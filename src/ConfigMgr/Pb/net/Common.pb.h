// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Common.proto

#ifndef PROTOBUF_net_2fCommon_2eproto__INCLUDED
#define PROTOBUF_net_2fCommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/Attributer.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fCommon_2eproto();
void protobuf_AssignDesc_net_2fCommon_2eproto();
void protobuf_ShutdownFile_net_2fCommon_2eproto();

class TSimpleItem;
class TArmItem;
class TAccessoryItem;
class TSoulItem;
class TMountEquipItem;
class TExclEquipItem;
class TExclEquipItemRefineInfo;
class TBeastArmRefineRecord;
class TBeastArmItem;
class TTreasureItem;
class TSilkBagItem;
class TDecorationBagItem;
class TDivineBagItem;
class TForceSoulItem;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TSimpleItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Common.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSimpleItem : public ::google::protobuf::Message {
 public:
  TSimpleItem();
  virtual ~TSimpleItem();

  TSimpleItem(const TSimpleItem& from);

  inline TSimpleItem& operator=(const TSimpleItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSimpleItem& default_instance();

  void Swap(TSimpleItem* other);

  // implements Message ----------------------------------------------

  TSimpleItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSimpleItem& from);
  void MergeFrom(const TSimpleItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ItemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSimpleItem</name>
  	<Function>
  		<name>itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 Tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSimpleItem</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 Num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSimpleItem</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional uint64 ExpireTime = 4;
  inline bool has_expiretime() const;
  inline void clear_expiretime();
  static const int kExpireTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TSimpleItem</name>
  	<Function>
  		<name>expiretime</name>
  		<replaceName>ExpireTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_expiretime</name>
  		<replaceName>ExpireTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_expiretime</name>
  		<replaceName>ExpireTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 expiretime() const;
  inline void set_expiretime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TSimpleItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_expiretime();
  inline void clear_has_expiretime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::uint64 expiretime_;
  ::google::protobuf::int32 num_;
  friend void  protobuf_AddDesc_net_2fCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fCommon_2eproto();

  void InitAsDefaultInstance();
  static TSimpleItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArmItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Common.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArmItem : public ::google::protobuf::Message {
 public:
  TArmItem();
  virtual ~TArmItem();

  TArmItem(const TArmItem& from);

  inline TArmItem& operator=(const TArmItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArmItem& default_instance();

  void Swap(TArmItem* other);

  // implements Message ----------------------------------------------

  TArmItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArmItem& from);
  void MergeFrom(const TArmItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ItemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArmItem</name>
  	<Function>
  		<name>itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 Tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArmItem</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 RefineLv = 3;
  inline bool has_refinelv() const;
  inline void clear_refinelv();
  static const int kRefineLvFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArmItem</name>
  	<Function>
  		<name>refinelv</name>
  		<replaceName>RefineLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refinelv</name>
  		<replaceName>RefineLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refinelv</name>
  		<replaceName>RefineLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 refinelv() const;
  inline void set_refinelv(::google::protobuf::int32 value);

  // optional int32 RefineSubLv = 4;
  inline bool has_refinesublv() const;
  inline void clear_refinesublv();
  static const int kRefineSubLvFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TArmItem</name>
  	<Function>
  		<name>refinesublv</name>
  		<replaceName>RefineSubLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refinesublv</name>
  		<replaceName>RefineSubLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refinesublv</name>
  		<replaceName>RefineSubLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 refinesublv() const;
  inline void set_refinesublv(::google::protobuf::int32 value);

  // optional int32 EnhanceLv = 5;
  inline bool has_enhancelv() const;
  inline void clear_enhancelv();
  static const int kEnhanceLvFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TArmItem</name>
  	<Function>
  		<name>enhancelv</name>
  		<replaceName>EnhanceLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enhancelv</name>
  		<replaceName>EnhanceLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enhancelv</name>
  		<replaceName>EnhanceLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 enhancelv() const;
  inline void set_enhancelv(::google::protobuf::int32 value);

  // optional int32 Num = 6;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TArmItem</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 GoldLv = 7;
  inline bool has_goldlv() const;
  inline void clear_goldlv();
  static const int kGoldLvFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TArmItem</name>
  	<Function>
  		<name>goldlv</name>
  		<replaceName>GoldLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goldlv</name>
  		<replaceName>GoldLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goldlv</name>
  		<replaceName>GoldLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 goldlv() const;
  inline void set_goldlv(::google::protobuf::int32 value);

  // optional int32 CarveId = 8;
  inline bool has_carveid() const;
  inline void clear_carveid();
  static const int kCarveIdFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TArmItem</name>
  	<Function>
  		<name>carveid</name>
  		<replaceName>CarveId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_carveid</name>
  		<replaceName>CarveId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_carveid</name>
  		<replaceName>CarveId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 carveid() const;
  inline void set_carveid(::google::protobuf::int32 value);

  // repeated .pb.TCommonReward CarveCost = 9;
  inline int carvecost_size() const;
  inline void clear_carvecost();
  static const int kCarveCostFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TArmItem</name>
  	<Function>
  		<name>carvecost</name>
  		<replaceName>CarveCost</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_carvecost</name>
  		<replaceName>CarveCost</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_carvecost</name>
  		<replaceName>CarveCost</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_carvecost</name>
  		<replaceName>CarveCost</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>carvecost_size</name>
  		<replaceName>CarveCost</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& carvecost(int index) const;
  inline ::pb::TCommonReward* mutable_carvecost(int index);
  inline ::pb::TCommonReward* add_carvecost();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      carvecost() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_carvecost();

  // optional int32 WhiteGoldLv = 10;
  inline bool has_whitegoldlv() const;
  inline void clear_whitegoldlv();
  static const int kWhiteGoldLvFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TArmItem</name>
  	<Function>
  		<name>whitegoldlv</name>
  		<replaceName>WhiteGoldLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_whitegoldlv</name>
  		<replaceName>WhiteGoldLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_whitegoldlv</name>
  		<replaceName>WhiteGoldLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 whitegoldlv() const;
  inline void set_whitegoldlv(::google::protobuf::int32 value);

  // optional int32 EvolveLv = 11;
  inline bool has_evolvelv() const;
  inline void clear_evolvelv();
  static const int kEvolveLvFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TArmItem</name>
  	<Function>
  		<name>evolvelv</name>
  		<replaceName>EvolveLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_evolvelv</name>
  		<replaceName>EvolveLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_evolvelv</name>
  		<replaceName>EvolveLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 evolvelv() const;
  inline void set_evolvelv(::google::protobuf::int32 value);

  // optional int32 EvolveExp = 12;
  inline bool has_evolveexp() const;
  inline void clear_evolveexp();
  static const int kEvolveExpFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TArmItem</name>
  	<Function>
  		<name>evolveexp</name>
  		<replaceName>EvolveExp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_evolveexp</name>
  		<replaceName>EvolveExp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_evolveexp</name>
  		<replaceName>EvolveExp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 evolveexp() const;
  inline void set_evolveexp(::google::protobuf::int32 value);

  // optional int32 EvolveLuck = 13;
  inline bool has_evolveluck() const;
  inline void clear_evolveluck();
  static const int kEvolveLuckFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TArmItem</name>
  	<Function>
  		<name>evolveluck</name>
  		<replaceName>EvolveLuck</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_evolveluck</name>
  		<replaceName>EvolveLuck</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_evolveluck</name>
  		<replaceName>EvolveLuck</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 evolveluck() const;
  inline void set_evolveluck(::google::protobuf::int32 value);

  // repeated .pb.TAttribute EvolveRandAttrArr = 14;
  inline int evolverandattrarr_size() const;
  inline void clear_evolverandattrarr();
  static const int kEvolveRandAttrArrFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TArmItem</name>
  	<Function>
  		<name>evolverandattrarr</name>
  		<replaceName>EvolveRandAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_evolverandattrarr</name>
  		<replaceName>EvolveRandAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_evolverandattrarr</name>
  		<replaceName>EvolveRandAttrArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_evolverandattrarr</name>
  		<replaceName>EvolveRandAttrArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>evolverandattrarr_size</name>
  		<replaceName>EvolveRandAttrArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAttribute& evolverandattrarr(int index) const;
  inline ::pb::TAttribute* mutable_evolverandattrarr(int index);
  inline ::pb::TAttribute* add_evolverandattrarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >&
      evolverandattrarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >*
      mutable_evolverandattrarr();

  // repeated .pb.TCommonReward EvolveCost = 15;
  inline int evolvecost_size() const;
  inline void clear_evolvecost();
  static const int kEvolveCostFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>TArmItem</name>
  	<Function>
  		<name>evolvecost</name>
  		<replaceName>EvolveCost</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_evolvecost</name>
  		<replaceName>EvolveCost</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_evolvecost</name>
  		<replaceName>EvolveCost</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_evolvecost</name>
  		<replaceName>EvolveCost</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>evolvecost_size</name>
  		<replaceName>EvolveCost</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& evolvecost(int index) const;
  inline ::pb::TCommonReward* mutable_evolvecost(int index);
  inline ::pb::TCommonReward* add_evolvecost();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      evolvecost() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_evolvecost();

  // @@protoc_insertion_point(class_scope:pb.TArmItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_refinelv();
  inline void clear_has_refinelv();
  inline void set_has_refinesublv();
  inline void clear_has_refinesublv();
  inline void set_has_enhancelv();
  inline void clear_has_enhancelv();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_goldlv();
  inline void clear_has_goldlv();
  inline void set_has_carveid();
  inline void clear_has_carveid();
  inline void set_has_whitegoldlv();
  inline void clear_has_whitegoldlv();
  inline void set_has_evolvelv();
  inline void clear_has_evolvelv();
  inline void set_has_evolveexp();
  inline void clear_has_evolveexp();
  inline void set_has_evolveluck();
  inline void clear_has_evolveluck();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 refinelv_;
  ::google::protobuf::int32 refinesublv_;
  ::google::protobuf::int32 enhancelv_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 goldlv_;
  ::google::protobuf::int32 carveid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > carvecost_;
  ::google::protobuf::int32 whitegoldlv_;
  ::google::protobuf::int32 evolvelv_;
  ::google::protobuf::int32 evolveexp_;
  ::google::protobuf::int32 evolveluck_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAttribute > evolverandattrarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > evolvecost_;
  friend void  protobuf_AddDesc_net_2fCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fCommon_2eproto();

  void InitAsDefaultInstance();
  static TArmItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAccessoryItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Common.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAccessoryItem : public ::google::protobuf::Message {
 public:
  TAccessoryItem();
  virtual ~TAccessoryItem();

  TAccessoryItem(const TAccessoryItem& from);

  inline TAccessoryItem& operator=(const TAccessoryItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAccessoryItem& default_instance();

  void Swap(TAccessoryItem* other);

  // implements Message ----------------------------------------------

  TAccessoryItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAccessoryItem& from);
  void MergeFrom(const TAccessoryItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ItemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAccessoryItem</name>
  	<Function>
  		<name>itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 Tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAccessoryItem</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 RefineLv = 3;
  inline bool has_refinelv() const;
  inline void clear_refinelv();
  static const int kRefineLvFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAccessoryItem</name>
  	<Function>
  		<name>refinelv</name>
  		<replaceName>RefineLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refinelv</name>
  		<replaceName>RefineLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refinelv</name>
  		<replaceName>RefineLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 refinelv() const;
  inline void set_refinelv(::google::protobuf::int32 value);

  // optional int32 RefineSubLv = 4;
  inline bool has_refinesublv() const;
  inline void clear_refinesublv();
  static const int kRefineSubLvFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAccessoryItem</name>
  	<Function>
  		<name>refinesublv</name>
  		<replaceName>RefineSubLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refinesublv</name>
  		<replaceName>RefineSubLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refinesublv</name>
  		<replaceName>RefineSubLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 refinesublv() const;
  inline void set_refinesublv(::google::protobuf::int32 value);

  // optional int32 EnhanceLv = 5;
  inline bool has_enhancelv() const;
  inline void clear_enhancelv();
  static const int kEnhanceLvFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAccessoryItem</name>
  	<Function>
  		<name>enhancelv</name>
  		<replaceName>EnhanceLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enhancelv</name>
  		<replaceName>EnhanceLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enhancelv</name>
  		<replaceName>EnhanceLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 enhancelv() const;
  inline void set_enhancelv(::google::protobuf::int32 value);

  // optional int32 EnhanceExp = 6;
  inline bool has_enhanceexp() const;
  inline void clear_enhanceexp();
  static const int kEnhanceExpFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TAccessoryItem</name>
  	<Function>
  		<name>enhanceexp</name>
  		<replaceName>EnhanceExp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enhanceexp</name>
  		<replaceName>EnhanceExp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enhanceexp</name>
  		<replaceName>EnhanceExp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 enhanceexp() const;
  inline void set_enhanceexp(::google::protobuf::int32 value);

  // repeated .pb.TCommonReward EnhanceCost = 7;
  inline int enhancecost_size() const;
  inline void clear_enhancecost();
  static const int kEnhanceCostFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TAccessoryItem</name>
  	<Function>
  		<name>enhancecost</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_enhancecost</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_enhancecost</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enhancecost</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>enhancecost_size</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& enhancecost(int index) const;
  inline ::pb::TCommonReward* mutable_enhancecost(int index);
  inline ::pb::TCommonReward* add_enhancecost();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      enhancecost() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_enhancecost();

  // optional int32 Num = 8;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TAccessoryItem</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 GoldLv = 9;
  inline bool has_goldlv() const;
  inline void clear_goldlv();
  static const int kGoldLvFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TAccessoryItem</name>
  	<Function>
  		<name>goldlv</name>
  		<replaceName>GoldLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goldlv</name>
  		<replaceName>GoldLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goldlv</name>
  		<replaceName>GoldLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 goldlv() const;
  inline void set_goldlv(::google::protobuf::int32 value);

  // optional int32 WhiteGoldLv = 10;
  inline bool has_whitegoldlv() const;
  inline void clear_whitegoldlv();
  static const int kWhiteGoldLvFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TAccessoryItem</name>
  	<Function>
  		<name>whitegoldlv</name>
  		<replaceName>WhiteGoldLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_whitegoldlv</name>
  		<replaceName>WhiteGoldLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_whitegoldlv</name>
  		<replaceName>WhiteGoldLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 whitegoldlv() const;
  inline void set_whitegoldlv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TAccessoryItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_refinelv();
  inline void clear_has_refinelv();
  inline void set_has_refinesublv();
  inline void clear_has_refinesublv();
  inline void set_has_enhancelv();
  inline void clear_has_enhancelv();
  inline void set_has_enhanceexp();
  inline void clear_has_enhanceexp();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_goldlv();
  inline void clear_has_goldlv();
  inline void set_has_whitegoldlv();
  inline void clear_has_whitegoldlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 refinelv_;
  ::google::protobuf::int32 refinesublv_;
  ::google::protobuf::int32 enhancelv_;
  ::google::protobuf::int32 enhanceexp_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > enhancecost_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 goldlv_;
  ::google::protobuf::int32 whitegoldlv_;
  friend void  protobuf_AddDesc_net_2fCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fCommon_2eproto();

  void InitAsDefaultInstance();
  static TAccessoryItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSoulItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Common.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSoulItem : public ::google::protobuf::Message {
 public:
  TSoulItem();
  virtual ~TSoulItem();

  TSoulItem(const TSoulItem& from);

  inline TSoulItem& operator=(const TSoulItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSoulItem& default_instance();

  void Swap(TSoulItem* other);

  // implements Message ----------------------------------------------

  TSoulItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSoulItem& from);
  void MergeFrom(const TSoulItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ItemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSoulItem</name>
  	<Function>
  		<name>itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 Tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSoulItem</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional uint32 AdvanceLv = 3;
  inline bool has_advancelv() const;
  inline void clear_advancelv();
  static const int kAdvanceLvFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSoulItem</name>
  	<Function>
  		<name>advancelv</name>
  		<replaceName>AdvanceLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_advancelv</name>
  		<replaceName>AdvanceLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_advancelv</name>
  		<replaceName>AdvanceLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 advancelv() const;
  inline void set_advancelv(::google::protobuf::uint32 value);

  // optional uint32 Num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TSoulItem</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSoulItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_advancelv();
  inline void clear_has_advancelv();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 advancelv_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fCommon_2eproto();

  void InitAsDefaultInstance();
  static TSoulItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TMountEquipItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Common.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TMountEquipItem : public ::google::protobuf::Message {
 public:
  TMountEquipItem();
  virtual ~TMountEquipItem();

  TMountEquipItem(const TMountEquipItem& from);

  inline TMountEquipItem& operator=(const TMountEquipItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMountEquipItem& default_instance();

  void Swap(TMountEquipItem* other);

  // implements Message ----------------------------------------------

  TMountEquipItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMountEquipItem& from);
  void MergeFrom(const TMountEquipItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ItemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TMountEquipItem</name>
  	<Function>
  		<name>itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 Tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TMountEquipItem</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional uint64 ExpireTime = 3;
  inline bool has_expiretime() const;
  inline void clear_expiretime();
  static const int kExpireTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TMountEquipItem</name>
  	<Function>
  		<name>expiretime</name>
  		<replaceName>ExpireTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_expiretime</name>
  		<replaceName>ExpireTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_expiretime</name>
  		<replaceName>ExpireTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 expiretime() const;
  inline void set_expiretime(::google::protobuf::uint64 value);

  // optional uint32 Num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TMountEquipItem</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 Exp = 5;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TMountEquipItem</name>
  	<Function>
  		<name>exp</name>
  		<replaceName>Exp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_exp</name>
  		<replaceName>Exp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exp</name>
  		<replaceName>Exp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TMountEquipItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_expiretime();
  inline void clear_has_expiretime();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint64 expiretime_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 exp_;
  friend void  protobuf_AddDesc_net_2fCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fCommon_2eproto();

  void InitAsDefaultInstance();
  static TMountEquipItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExclEquipItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Common.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExclEquipItem : public ::google::protobuf::Message {
 public:
  TExclEquipItem();
  virtual ~TExclEquipItem();

  TExclEquipItem(const TExclEquipItem& from);

  inline TExclEquipItem& operator=(const TExclEquipItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExclEquipItem& default_instance();

  void Swap(TExclEquipItem* other);

  // implements Message ----------------------------------------------

  TExclEquipItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExclEquipItem& from);
  void MergeFrom(const TExclEquipItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ItemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExclEquipItem</name>
  	<Function>
  		<name>itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 Tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExclEquipItem</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional uint32 AdvanceLv = 3;
  inline bool has_advancelv() const;
  inline void clear_advancelv();
  static const int kAdvanceLvFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TExclEquipItem</name>
  	<Function>
  		<name>advancelv</name>
  		<replaceName>AdvanceLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_advancelv</name>
  		<replaceName>AdvanceLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_advancelv</name>
  		<replaceName>AdvanceLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 advancelv() const;
  inline void set_advancelv(::google::protobuf::uint32 value);

  // optional uint32 AdvanceNum1 = 4;
  inline bool has_advancenum1() const;
  inline void clear_advancenum1();
  static const int kAdvanceNum1FieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TExclEquipItem</name>
  	<Function>
  		<name>advancenum1</name>
  		<replaceName>AdvanceNum1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_advancenum1</name>
  		<replaceName>AdvanceNum1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_advancenum1</name>
  		<replaceName>AdvanceNum1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 advancenum1() const;
  inline void set_advancenum1(::google::protobuf::uint32 value);

  // optional uint32 AdvanceNum2 = 5;
  inline bool has_advancenum2() const;
  inline void clear_advancenum2();
  static const int kAdvanceNum2FieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TExclEquipItem</name>
  	<Function>
  		<name>advancenum2</name>
  		<replaceName>AdvanceNum2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_advancenum2</name>
  		<replaceName>AdvanceNum2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_advancenum2</name>
  		<replaceName>AdvanceNum2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 advancenum2() const;
  inline void set_advancenum2(::google::protobuf::uint32 value);

  // optional uint32 AdvanceNum3 = 6;
  inline bool has_advancenum3() const;
  inline void clear_advancenum3();
  static const int kAdvanceNum3FieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TExclEquipItem</name>
  	<Function>
  		<name>advancenum3</name>
  		<replaceName>AdvanceNum3</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_advancenum3</name>
  		<replaceName>AdvanceNum3</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_advancenum3</name>
  		<replaceName>AdvanceNum3</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 advancenum3() const;
  inline void set_advancenum3(::google::protobuf::uint32 value);

  // optional uint32 StarLv = 7;
  inline bool has_starlv() const;
  inline void clear_starlv();
  static const int kStarLvFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TExclEquipItem</name>
  	<Function>
  		<name>starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starlv() const;
  inline void set_starlv(::google::protobuf::uint32 value);

  // optional uint32 Num = 8;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TExclEquipItem</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 GoldLv = 9;
  inline bool has_goldlv() const;
  inline void clear_goldlv();
  static const int kGoldLvFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TExclEquipItem</name>
  	<Function>
  		<name>goldlv</name>
  		<replaceName>GoldLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goldlv</name>
  		<replaceName>GoldLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goldlv</name>
  		<replaceName>GoldLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 goldlv() const;
  inline void set_goldlv(::google::protobuf::uint32 value);

  // optional uint32 EngraveLv = 10;
  inline bool has_engravelv() const;
  inline void clear_engravelv();
  static const int kEngraveLvFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TExclEquipItem</name>
  	<Function>
  		<name>engravelv</name>
  		<replaceName>EngraveLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_engravelv</name>
  		<replaceName>EngraveLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_engravelv</name>
  		<replaceName>EngraveLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 engravelv() const;
  inline void set_engravelv(::google::protobuf::uint32 value);

  // repeated .pb.TExclEquipItemRefineInfo RefineInfo = 11;
  inline int refineinfo_size() const;
  inline void clear_refineinfo();
  static const int kRefineInfoFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TExclEquipItem</name>
  	<Function>
  		<name>refineinfo</name>
  		<replaceName>RefineInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_refineinfo</name>
  		<replaceName>RefineInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_refineinfo</name>
  		<replaceName>RefineInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refineinfo</name>
  		<replaceName>RefineInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>refineinfo_size</name>
  		<replaceName>RefineInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExclEquipItemRefineInfo& refineinfo(int index) const;
  inline ::pb::TExclEquipItemRefineInfo* mutable_refineinfo(int index);
  inline ::pb::TExclEquipItemRefineInfo* add_refineinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TExclEquipItemRefineInfo >&
      refineinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TExclEquipItemRefineInfo >*
      mutable_refineinfo();

  // optional uint32 RefineTotalScore = 12;
  inline bool has_refinetotalscore() const;
  inline void clear_refinetotalscore();
  static const int kRefineTotalScoreFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TExclEquipItem</name>
  	<Function>
  		<name>refinetotalscore</name>
  		<replaceName>RefineTotalScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refinetotalscore</name>
  		<replaceName>RefineTotalScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refinetotalscore</name>
  		<replaceName>RefineTotalScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 refinetotalscore() const;
  inline void set_refinetotalscore(::google::protobuf::uint32 value);

  // optional .pb.TExclEquipItemRefineInfo confirmedRefineInfo = 13;
  inline bool has_confirmedrefineinfo() const;
  inline void clear_confirmedrefineinfo();
  static const int kConfirmedRefineInfoFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TExclEquipItem</name>
  	<Function>
  		<name>confirmedrefineinfo</name>
  		<replaceName>confirmedRefineInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_confirmedrefineinfo</name>
  		<replaceName>confirmedRefineInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_confirmedrefineinfo</name>
  		<replaceName>confirmedRefineInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_confirmedrefineinfo</name>
  		<replaceName>confirmedRefineInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExclEquipItemRefineInfo& confirmedrefineinfo() const;
  inline ::pb::TExclEquipItemRefineInfo* mutable_confirmedrefineinfo();
  inline ::pb::TExclEquipItemRefineInfo* release_confirmedrefineinfo();
  inline void set_allocated_confirmedrefineinfo(::pb::TExclEquipItemRefineInfo* confirmedrefineinfo);

  // repeated .pb.TCommonReward refineReward = 14;
  inline int refinereward_size() const;
  inline void clear_refinereward();
  static const int kRefineRewardFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TExclEquipItem</name>
  	<Function>
  		<name>refinereward</name>
  		<replaceName>refineReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_refinereward</name>
  		<replaceName>refineReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_refinereward</name>
  		<replaceName>refineReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refinereward</name>
  		<replaceName>refineReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>refinereward_size</name>
  		<replaceName>refineReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& refinereward(int index) const;
  inline ::pb::TCommonReward* mutable_refinereward(int index);
  inline ::pb::TCommonReward* add_refinereward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      refinereward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_refinereward();

  // @@protoc_insertion_point(class_scope:pb.TExclEquipItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_advancelv();
  inline void clear_has_advancelv();
  inline void set_has_advancenum1();
  inline void clear_has_advancenum1();
  inline void set_has_advancenum2();
  inline void clear_has_advancenum2();
  inline void set_has_advancenum3();
  inline void clear_has_advancenum3();
  inline void set_has_starlv();
  inline void clear_has_starlv();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_goldlv();
  inline void clear_has_goldlv();
  inline void set_has_engravelv();
  inline void clear_has_engravelv();
  inline void set_has_refinetotalscore();
  inline void clear_has_refinetotalscore();
  inline void set_has_confirmedrefineinfo();
  inline void clear_has_confirmedrefineinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 advancelv_;
  ::google::protobuf::uint32 advancenum1_;
  ::google::protobuf::uint32 advancenum2_;
  ::google::protobuf::uint32 advancenum3_;
  ::google::protobuf::uint32 starlv_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 goldlv_;
  ::google::protobuf::uint32 engravelv_;
  ::google::protobuf::RepeatedPtrField< ::pb::TExclEquipItemRefineInfo > refineinfo_;
  ::pb::TExclEquipItemRefineInfo* confirmedrefineinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > refinereward_;
  ::google::protobuf::uint32 refinetotalscore_;
  friend void  protobuf_AddDesc_net_2fCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fCommon_2eproto();

  void InitAsDefaultInstance();
  static TExclEquipItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExclEquipItemRefineInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Common.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExclEquipItemRefineInfo : public ::google::protobuf::Message {
 public:
  TExclEquipItemRefineInfo();
  virtual ~TExclEquipItemRefineInfo();

  TExclEquipItemRefineInfo(const TExclEquipItemRefineInfo& from);

  inline TExclEquipItemRefineInfo& operator=(const TExclEquipItemRefineInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExclEquipItemRefineInfo& default_instance();

  void Swap(TExclEquipItemRefineInfo* other);

  // implements Message ----------------------------------------------

  TExclEquipItemRefineInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExclEquipItemRefineInfo& from);
  void MergeFrom(const TExclEquipItemRefineInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 posId = 1;
  inline bool has_posid() const;
  inline void clear_posid();
  static const int kPosIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExclEquipItemRefineInfo</name>
  	<Function>
  		<name>posid</name>
  		<replaceName>posId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posid</name>
  		<replaceName>posId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posid</name>
  		<replaceName>posId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 posid() const;
  inline void set_posid(::google::protobuf::uint32 value);

  // optional uint32 AttrId = 2;
  inline bool has_attrid() const;
  inline void clear_attrid();
  static const int kAttrIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExclEquipItemRefineInfo</name>
  	<Function>
  		<name>attrid</name>
  		<replaceName>AttrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attrid</name>
  		<replaceName>AttrId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attrid</name>
  		<replaceName>AttrId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attrid() const;
  inline void set_attrid(::google::protobuf::uint32 value);

  // optional uint32 AttrValue = 3;
  inline bool has_attrvalue() const;
  inline void clear_attrvalue();
  static const int kAttrValueFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TExclEquipItemRefineInfo</name>
  	<Function>
  		<name>attrvalue</name>
  		<replaceName>AttrValue</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attrvalue</name>
  		<replaceName>AttrValue</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attrvalue</name>
  		<replaceName>AttrValue</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attrvalue() const;
  inline void set_attrvalue(::google::protobuf::uint32 value);

  // optional uint32 AttrScore = 4;
  inline bool has_attrscore() const;
  inline void clear_attrscore();
  static const int kAttrScoreFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TExclEquipItemRefineInfo</name>
  	<Function>
  		<name>attrscore</name>
  		<replaceName>AttrScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attrscore</name>
  		<replaceName>AttrScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attrscore</name>
  		<replaceName>AttrScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attrscore() const;
  inline void set_attrscore(::google::protobuf::uint32 value);

  // optional uint32 Process = 5;
  inline bool has_process() const;
  inline void clear_process();
  static const int kProcessFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TExclEquipItemRefineInfo</name>
  	<Function>
  		<name>process</name>
  		<replaceName>Process</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_process</name>
  		<replaceName>Process</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_process</name>
  		<replaceName>Process</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 process() const;
  inline void set_process(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TExclEquipItemRefineInfo)
 private:
  inline void set_has_posid();
  inline void clear_has_posid();
  inline void set_has_attrid();
  inline void clear_has_attrid();
  inline void set_has_attrvalue();
  inline void clear_has_attrvalue();
  inline void set_has_attrscore();
  inline void clear_has_attrscore();
  inline void set_has_process();
  inline void clear_has_process();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 posid_;
  ::google::protobuf::uint32 attrid_;
  ::google::protobuf::uint32 attrvalue_;
  ::google::protobuf::uint32 attrscore_;
  ::google::protobuf::uint32 process_;
  friend void  protobuf_AddDesc_net_2fCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fCommon_2eproto();

  void InitAsDefaultInstance();
  static TExclEquipItemRefineInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastArmRefineRecord</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Common.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastArmRefineRecord : public ::google::protobuf::Message {
 public:
  TBeastArmRefineRecord();
  virtual ~TBeastArmRefineRecord();

  TBeastArmRefineRecord(const TBeastArmRefineRecord& from);

  inline TBeastArmRefineRecord& operator=(const TBeastArmRefineRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastArmRefineRecord& default_instance();

  void Swap(TBeastArmRefineRecord* other);

  // implements Message ----------------------------------------------

  TBeastArmRefineRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastArmRefineRecord& from);
  void MergeFrom(const TBeastArmRefineRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RandAttrIndex = 1;
  inline bool has_randattrindex() const;
  inline void clear_randattrindex();
  static const int kRandAttrIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastArmRefineRecord</name>
  	<Function>
  		<name>randattrindex</name>
  		<replaceName>RandAttrIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_randattrindex</name>
  		<replaceName>RandAttrIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_randattrindex</name>
  		<replaceName>RandAttrIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 randattrindex() const;
  inline void set_randattrindex(::google::protobuf::uint32 value);

  // repeated uint32 RefineAttrArr = 2;
  inline int refineattrarr_size() const;
  inline void clear_refineattrarr();
  static const int kRefineAttrArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastArmRefineRecord</name>
  	<Function>
  		<name>refineattrarr</name>
  		<replaceName>RefineAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_refineattrarr</name>
  		<replaceName>RefineAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_refineattrarr</name>
  		<replaceName>RefineAttrArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refineattrarr</name>
  		<replaceName>RefineAttrArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>refineattrarr_size</name>
  		<replaceName>RefineAttrArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 refineattrarr(int index) const;
  inline void set_refineattrarr(int index, ::google::protobuf::uint32 value);
  inline void add_refineattrarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      refineattrarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_refineattrarr();

  // @@protoc_insertion_point(class_scope:pb.TBeastArmRefineRecord)
 private:
  inline void set_has_randattrindex();
  inline void clear_has_randattrindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > refineattrarr_;
  ::google::protobuf::uint32 randattrindex_;
  friend void  protobuf_AddDesc_net_2fCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fCommon_2eproto();

  void InitAsDefaultInstance();
  static TBeastArmRefineRecord* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastArmItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Common.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastArmItem : public ::google::protobuf::Message {
 public:
  TBeastArmItem();
  virtual ~TBeastArmItem();

  TBeastArmItem(const TBeastArmItem& from);

  inline TBeastArmItem& operator=(const TBeastArmItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastArmItem& default_instance();

  void Swap(TBeastArmItem* other);

  // implements Message ----------------------------------------------

  TBeastArmItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastArmItem& from);
  void MergeFrom(const TBeastArmItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ItemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastArmItem</name>
  	<Function>
  		<name>itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 Tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastArmItem</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional uint32 EnhanceLv = 3;
  inline bool has_enhancelv() const;
  inline void clear_enhancelv();
  static const int kEnhanceLvFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBeastArmItem</name>
  	<Function>
  		<name>enhancelv</name>
  		<replaceName>EnhanceLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enhancelv</name>
  		<replaceName>EnhanceLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enhancelv</name>
  		<replaceName>EnhanceLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 enhancelv() const;
  inline void set_enhancelv(::google::protobuf::uint32 value);

  // optional uint32 Num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBeastArmItem</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // repeated uint32 RandAttrArr = 5;
  inline int randattrarr_size() const;
  inline void clear_randattrarr();
  static const int kRandAttrArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TBeastArmItem</name>
  	<Function>
  		<name>randattrarr</name>
  		<replaceName>RandAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_randattrarr</name>
  		<replaceName>RandAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_randattrarr</name>
  		<replaceName>RandAttrArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_randattrarr</name>
  		<replaceName>RandAttrArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>randattrarr_size</name>
  		<replaceName>RandAttrArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 randattrarr(int index) const;
  inline void set_randattrarr(int index, ::google::protobuf::uint32 value);
  inline void add_randattrarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      randattrarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_randattrarr();

  // repeated .pb.TBeastArmRefineRecord RefineRecordArr = 6;
  inline int refinerecordarr_size() const;
  inline void clear_refinerecordarr();
  static const int kRefineRecordArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TBeastArmItem</name>
  	<Function>
  		<name>refinerecordarr</name>
  		<replaceName>RefineRecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_refinerecordarr</name>
  		<replaceName>RefineRecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_refinerecordarr</name>
  		<replaceName>RefineRecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refinerecordarr</name>
  		<replaceName>RefineRecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>refinerecordarr_size</name>
  		<replaceName>RefineRecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastArmRefineRecord& refinerecordarr(int index) const;
  inline ::pb::TBeastArmRefineRecord* mutable_refinerecordarr(int index);
  inline ::pb::TBeastArmRefineRecord* add_refinerecordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmRefineRecord >&
      refinerecordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmRefineRecord >*
      mutable_refinerecordarr();

  // optional uint32 AdvanceLv = 7;
  inline bool has_advancelv() const;
  inline void clear_advancelv();
  static const int kAdvanceLvFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TBeastArmItem</name>
  	<Function>
  		<name>advancelv</name>
  		<replaceName>AdvanceLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_advancelv</name>
  		<replaceName>AdvanceLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_advancelv</name>
  		<replaceName>AdvanceLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 advancelv() const;
  inline void set_advancelv(::google::protobuf::uint32 value);

  // optional uint32 AdvanceStarLv = 8;
  inline bool has_advancestarlv() const;
  inline void clear_advancestarlv();
  static const int kAdvanceStarLvFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TBeastArmItem</name>
  	<Function>
  		<name>advancestarlv</name>
  		<replaceName>AdvanceStarLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_advancestarlv</name>
  		<replaceName>AdvanceStarLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_advancestarlv</name>
  		<replaceName>AdvanceStarLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 advancestarlv() const;
  inline void set_advancestarlv(::google::protobuf::uint32 value);

  // optional uint32 InitialItemTid = 9;
  inline bool has_initialitemtid() const;
  inline void clear_initialitemtid();
  static const int kInitialItemTidFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TBeastArmItem</name>
  	<Function>
  		<name>initialitemtid</name>
  		<replaceName>InitialItemTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_initialitemtid</name>
  		<replaceName>InitialItemTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_initialitemtid</name>
  		<replaceName>InitialItemTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 initialitemtid() const;
  inline void set_initialitemtid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastArmItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_enhancelv();
  inline void clear_has_enhancelv();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_advancelv();
  inline void clear_has_advancelv();
  inline void set_has_advancestarlv();
  inline void clear_has_advancestarlv();
  inline void set_has_initialitemtid();
  inline void clear_has_initialitemtid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 enhancelv_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > randattrarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmRefineRecord > refinerecordarr_;
  ::google::protobuf::uint32 advancelv_;
  ::google::protobuf::uint32 advancestarlv_;
  ::google::protobuf::uint32 initialitemtid_;
  friend void  protobuf_AddDesc_net_2fCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fCommon_2eproto();

  void InitAsDefaultInstance();
  static TBeastArmItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTreasureItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Common.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreasureItem : public ::google::protobuf::Message {
 public:
  TTreasureItem();
  virtual ~TTreasureItem();

  TTreasureItem(const TTreasureItem& from);

  inline TTreasureItem& operator=(const TTreasureItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreasureItem& default_instance();

  void Swap(TTreasureItem* other);

  // implements Message ----------------------------------------------

  TTreasureItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreasureItem& from);
  void MergeFrom(const TTreasureItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ItemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTreasureItem</name>
  	<Function>
  		<name>itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 Tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTreasureItem</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 Num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTreasureItem</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 StarLv = 4;
  inline bool has_starlv() const;
  inline void clear_starlv();
  static const int kStarLvFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTreasureItem</name>
  	<Function>
  		<name>starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 starlv() const;
  inline void set_starlv(::google::protobuf::int32 value);

  // optional int32 IsActivated = 5;
  inline bool has_isactivated() const;
  inline void clear_isactivated();
  static const int kIsActivatedFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TTreasureItem</name>
  	<Function>
  		<name>isactivated</name>
  		<replaceName>IsActivated</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isactivated</name>
  		<replaceName>IsActivated</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isactivated</name>
  		<replaceName>IsActivated</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 isactivated() const;
  inline void set_isactivated(::google::protobuf::int32 value);

  // optional int32 IsAwaked = 6;
  inline bool has_isawaked() const;
  inline void clear_isawaked();
  static const int kIsAwakedFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TTreasureItem</name>
  	<Function>
  		<name>isawaked</name>
  		<replaceName>IsAwaked</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isawaked</name>
  		<replaceName>IsAwaked</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isawaked</name>
  		<replaceName>IsAwaked</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 isawaked() const;
  inline void set_isawaked(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TTreasureItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_starlv();
  inline void clear_has_starlv();
  inline void set_has_isactivated();
  inline void clear_has_isactivated();
  inline void set_has_isawaked();
  inline void clear_has_isawaked();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 starlv_;
  ::google::protobuf::int32 isactivated_;
  ::google::protobuf::int32 isawaked_;
  friend void  protobuf_AddDesc_net_2fCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fCommon_2eproto();

  void InitAsDefaultInstance();
  static TTreasureItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSilkBagItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Common.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSilkBagItem : public ::google::protobuf::Message {
 public:
  TSilkBagItem();
  virtual ~TSilkBagItem();

  TSilkBagItem(const TSilkBagItem& from);

  inline TSilkBagItem& operator=(const TSilkBagItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSilkBagItem& default_instance();

  void Swap(TSilkBagItem* other);

  // implements Message ----------------------------------------------

  TSilkBagItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSilkBagItem& from);
  void MergeFrom(const TSilkBagItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ItemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagItem</name>
  	<Function>
  		<name>itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 Tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagItem</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 Num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagItem</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 EnhanceLv = 4;
  inline bool has_enhancelv() const;
  inline void clear_enhancelv();
  static const int kEnhanceLvFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagItem</name>
  	<Function>
  		<name>enhancelv</name>
  		<replaceName>EnhanceLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enhancelv</name>
  		<replaceName>EnhanceLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enhancelv</name>
  		<replaceName>EnhanceLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 enhancelv() const;
  inline void set_enhancelv(::google::protobuf::int32 value);

  // optional int32 EnhanceExp = 5;
  inline bool has_enhanceexp() const;
  inline void clear_enhanceexp();
  static const int kEnhanceExpFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagItem</name>
  	<Function>
  		<name>enhanceexp</name>
  		<replaceName>EnhanceExp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enhanceexp</name>
  		<replaceName>EnhanceExp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enhanceexp</name>
  		<replaceName>EnhanceExp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 enhanceexp() const;
  inline void set_enhanceexp(::google::protobuf::int32 value);

  // optional int32 StarLv = 6;
  inline bool has_starlv() const;
  inline void clear_starlv();
  static const int kStarLvFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagItem</name>
  	<Function>
  		<name>starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 starlv() const;
  inline void set_starlv(::google::protobuf::int32 value);

  // repeated .pb.TCommonReward EnhanceCost = 7;
  inline int enhancecost_size() const;
  inline void clear_enhancecost();
  static const int kEnhanceCostFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagItem</name>
  	<Function>
  		<name>enhancecost</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_enhancecost</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_enhancecost</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enhancecost</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>enhancecost_size</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& enhancecost(int index) const;
  inline ::pb::TCommonReward* mutable_enhancecost(int index);
  inline ::pb::TCommonReward* add_enhancecost();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      enhancecost() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_enhancecost();

  // @@protoc_insertion_point(class_scope:pb.TSilkBagItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_enhancelv();
  inline void clear_has_enhancelv();
  inline void set_has_enhanceexp();
  inline void clear_has_enhanceexp();
  inline void set_has_starlv();
  inline void clear_has_starlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 enhancelv_;
  ::google::protobuf::int32 enhanceexp_;
  ::google::protobuf::int32 starlv_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > enhancecost_;
  friend void  protobuf_AddDesc_net_2fCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fCommon_2eproto();

  void InitAsDefaultInstance();
  static TSilkBagItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDecorationBagItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Common.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDecorationBagItem : public ::google::protobuf::Message {
 public:
  TDecorationBagItem();
  virtual ~TDecorationBagItem();

  TDecorationBagItem(const TDecorationBagItem& from);

  inline TDecorationBagItem& operator=(const TDecorationBagItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDecorationBagItem& default_instance();

  void Swap(TDecorationBagItem* other);

  // implements Message ----------------------------------------------

  TDecorationBagItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDecorationBagItem& from);
  void MergeFrom(const TDecorationBagItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ItemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDecorationBagItem</name>
  	<Function>
  		<name>itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 Tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDecorationBagItem</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional uint32 Num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TDecorationBagItem</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 StarLv = 4;
  inline bool has_starlv() const;
  inline void clear_starlv();
  static const int kStarLvFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TDecorationBagItem</name>
  	<Function>
  		<name>starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starlv() const;
  inline void set_starlv(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward EnhanceCost = 7;
  inline int enhancecost_size() const;
  inline void clear_enhancecost();
  static const int kEnhanceCostFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TDecorationBagItem</name>
  	<Function>
  		<name>enhancecost</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_enhancecost</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_enhancecost</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enhancecost</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>enhancecost_size</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& enhancecost(int index) const;
  inline ::pb::TCommonReward* mutable_enhancecost(int index);
  inline ::pb::TCommonReward* add_enhancecost();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      enhancecost() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_enhancecost();

  // @@protoc_insertion_point(class_scope:pb.TDecorationBagItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_starlv();
  inline void clear_has_starlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 starlv_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > enhancecost_;
  friend void  protobuf_AddDesc_net_2fCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fCommon_2eproto();

  void InitAsDefaultInstance();
  static TDecorationBagItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDivineBagItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Common.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDivineBagItem : public ::google::protobuf::Message {
 public:
  TDivineBagItem();
  virtual ~TDivineBagItem();

  TDivineBagItem(const TDivineBagItem& from);

  inline TDivineBagItem& operator=(const TDivineBagItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDivineBagItem& default_instance();

  void Swap(TDivineBagItem* other);

  // implements Message ----------------------------------------------

  TDivineBagItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDivineBagItem& from);
  void MergeFrom(const TDivineBagItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ItemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDivineBagItem</name>
  	<Function>
  		<name>itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 Tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDivineBagItem</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional uint32 Num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TDivineBagItem</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional int32 SmeltAfterLv = 4;
  inline bool has_smeltafterlv() const;
  inline void clear_smeltafterlv();
  static const int kSmeltAfterLvFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TDivineBagItem</name>
  	<Function>
  		<name>smeltafterlv</name>
  		<replaceName>SmeltAfterLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_smeltafterlv</name>
  		<replaceName>SmeltAfterLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_smeltafterlv</name>
  		<replaceName>SmeltAfterLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 smeltafterlv() const;
  inline void set_smeltafterlv(::google::protobuf::int32 value);

  // optional int32 SurmountAfterLv = 5;
  inline bool has_surmountafterlv() const;
  inline void clear_surmountafterlv();
  static const int kSurmountAfterLvFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TDivineBagItem</name>
  	<Function>
  		<name>surmountafterlv</name>
  		<replaceName>SurmountAfterLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_surmountafterlv</name>
  		<replaceName>SurmountAfterLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_surmountafterlv</name>
  		<replaceName>SurmountAfterLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 surmountafterlv() const;
  inline void set_surmountafterlv(::google::protobuf::int32 value);

  // repeated .pb.TAttributeInfo SmeltAttribute = 6;
  inline int smeltattribute_size() const;
  inline void clear_smeltattribute();
  static const int kSmeltAttributeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TDivineBagItem</name>
  	<Function>
  		<name>smeltattribute</name>
  		<replaceName>SmeltAttribute</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_smeltattribute</name>
  		<replaceName>SmeltAttribute</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_smeltattribute</name>
  		<replaceName>SmeltAttribute</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_smeltattribute</name>
  		<replaceName>SmeltAttribute</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>smeltattribute_size</name>
  		<replaceName>SmeltAttribute</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAttributeInfo& smeltattribute(int index) const;
  inline ::pb::TAttributeInfo* mutable_smeltattribute(int index);
  inline ::pb::TAttributeInfo* add_smeltattribute();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAttributeInfo >&
      smeltattribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAttributeInfo >*
      mutable_smeltattribute();

  // repeated .pb.TAttributeInfo SmeltUnSubmitAttribute = 7;
  inline int smeltunsubmitattribute_size() const;
  inline void clear_smeltunsubmitattribute();
  static const int kSmeltUnSubmitAttributeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TDivineBagItem</name>
  	<Function>
  		<name>smeltunsubmitattribute</name>
  		<replaceName>SmeltUnSubmitAttribute</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_smeltunsubmitattribute</name>
  		<replaceName>SmeltUnSubmitAttribute</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_smeltunsubmitattribute</name>
  		<replaceName>SmeltUnSubmitAttribute</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_smeltunsubmitattribute</name>
  		<replaceName>SmeltUnSubmitAttribute</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>smeltunsubmitattribute_size</name>
  		<replaceName>SmeltUnSubmitAttribute</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAttributeInfo& smeltunsubmitattribute(int index) const;
  inline ::pb::TAttributeInfo* mutable_smeltunsubmitattribute(int index);
  inline ::pb::TAttributeInfo* add_smeltunsubmitattribute();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAttributeInfo >&
      smeltunsubmitattribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAttributeInfo >*
      mutable_smeltunsubmitattribute();

  // optional int32 LastSmeltType = 8;
  inline bool has_lastsmelttype() const;
  inline void clear_lastsmelttype();
  static const int kLastSmeltTypeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TDivineBagItem</name>
  	<Function>
  		<name>lastsmelttype</name>
  		<replaceName>LastSmeltType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lastsmelttype</name>
  		<replaceName>LastSmeltType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lastsmelttype</name>
  		<replaceName>LastSmeltType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lastsmelttype() const;
  inline void set_lastsmelttype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TDivineBagItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_smeltafterlv();
  inline void clear_has_smeltafterlv();
  inline void set_has_surmountafterlv();
  inline void clear_has_surmountafterlv();
  inline void set_has_lastsmelttype();
  inline void clear_has_lastsmelttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::int32 smeltafterlv_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAttributeInfo > smeltattribute_;
  ::google::protobuf::int32 surmountafterlv_;
  ::google::protobuf::int32 lastsmelttype_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAttributeInfo > smeltunsubmitattribute_;
  friend void  protobuf_AddDesc_net_2fCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fCommon_2eproto();

  void InitAsDefaultInstance();
  static TDivineBagItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TForceSoulItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Common.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TForceSoulItem : public ::google::protobuf::Message {
 public:
  TForceSoulItem();
  virtual ~TForceSoulItem();

  TForceSoulItem(const TForceSoulItem& from);

  inline TForceSoulItem& operator=(const TForceSoulItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TForceSoulItem& default_instance();

  void Swap(TForceSoulItem* other);

  // implements Message ----------------------------------------------

  TForceSoulItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TForceSoulItem& from);
  void MergeFrom(const TForceSoulItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ItemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TForceSoulItem</name>
  	<Function>
  		<name>itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 Tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TForceSoulItem</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 Num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TForceSoulItem</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 EnhanceLv = 4;
  inline bool has_enhancelv() const;
  inline void clear_enhancelv();
  static const int kEnhanceLvFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TForceSoulItem</name>
  	<Function>
  		<name>enhancelv</name>
  		<replaceName>EnhanceLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enhancelv</name>
  		<replaceName>EnhanceLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enhancelv</name>
  		<replaceName>EnhanceLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 enhancelv() const;
  inline void set_enhancelv(::google::protobuf::int32 value);

  // optional int32 StarLv = 5;
  inline bool has_starlv() const;
  inline void clear_starlv();
  static const int kStarLvFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TForceSoulItem</name>
  	<Function>
  		<name>starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 starlv() const;
  inline void set_starlv(::google::protobuf::int32 value);

  // repeated .pb.TCommonReward EnhanceCost = 6;
  inline int enhancecost_size() const;
  inline void clear_enhancecost();
  static const int kEnhanceCostFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TForceSoulItem</name>
  	<Function>
  		<name>enhancecost</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_enhancecost</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_enhancecost</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enhancecost</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>enhancecost_size</name>
  		<replaceName>EnhanceCost</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& enhancecost(int index) const;
  inline ::pb::TCommonReward* mutable_enhancecost(int index);
  inline ::pb::TCommonReward* add_enhancecost();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      enhancecost() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_enhancecost();

  // repeated .pb.TCommonReward StarCost = 7;
  inline int starcost_size() const;
  inline void clear_starcost();
  static const int kStarCostFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TForceSoulItem</name>
  	<Function>
  		<name>starcost</name>
  		<replaceName>StarCost</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_starcost</name>
  		<replaceName>StarCost</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_starcost</name>
  		<replaceName>StarCost</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starcost</name>
  		<replaceName>StarCost</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>starcost_size</name>
  		<replaceName>StarCost</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& starcost(int index) const;
  inline ::pb::TCommonReward* mutable_starcost(int index);
  inline ::pb::TCommonReward* add_starcost();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      starcost() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_starcost();

  // @@protoc_insertion_point(class_scope:pb.TForceSoulItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_enhancelv();
  inline void clear_has_enhancelv();
  inline void set_has_starlv();
  inline void clear_has_starlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 enhancelv_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > enhancecost_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > starcost_;
  ::google::protobuf::int32 starlv_;
  friend void  protobuf_AddDesc_net_2fCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fCommon_2eproto();

  void InitAsDefaultInstance();
  static TForceSoulItem* default_instance_;
};
// ===================================================================


// ===================================================================

// TSimpleItem

// optional int32 ItemId = 1;
inline bool TSimpleItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSimpleItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSimpleItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSimpleItem::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 TSimpleItem::itemid() const {
  // @@protoc_insertion_point(field_get:pb.TSimpleItem.ItemId)
  return itemid_;
}
inline void TSimpleItem::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSimpleItem.ItemId)
}

// optional int32 Tid = 2;
inline bool TSimpleItem::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSimpleItem::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSimpleItem::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSimpleItem::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 TSimpleItem::tid() const {
  // @@protoc_insertion_point(field_get:pb.TSimpleItem.Tid)
  return tid_;
}
inline void TSimpleItem::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSimpleItem.Tid)
}

// optional int32 Num = 3;
inline bool TSimpleItem::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSimpleItem::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSimpleItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSimpleItem::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 TSimpleItem::num() const {
  // @@protoc_insertion_point(field_get:pb.TSimpleItem.Num)
  return num_;
}
inline void TSimpleItem::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TSimpleItem.Num)
}

// optional uint64 ExpireTime = 4;
inline bool TSimpleItem::has_expiretime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TSimpleItem::set_has_expiretime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TSimpleItem::clear_has_expiretime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TSimpleItem::clear_expiretime() {
  expiretime_ = GOOGLE_ULONGLONG(0);
  clear_has_expiretime();
}
inline ::google::protobuf::uint64 TSimpleItem::expiretime() const {
  // @@protoc_insertion_point(field_get:pb.TSimpleItem.ExpireTime)
  return expiretime_;
}
inline void TSimpleItem::set_expiretime(::google::protobuf::uint64 value) {
  set_has_expiretime();
  expiretime_ = value;
  // @@protoc_insertion_point(field_set:pb.TSimpleItem.ExpireTime)
}

// -------------------------------------------------------------------

// TArmItem

// optional int32 ItemId = 1;
inline bool TArmItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArmItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArmItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArmItem::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 TArmItem::itemid() const {
  // @@protoc_insertion_point(field_get:pb.TArmItem.ItemId)
  return itemid_;
}
inline void TArmItem::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArmItem.ItemId)
}

// optional int32 Tid = 2;
inline bool TArmItem::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArmItem::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArmItem::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArmItem::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 TArmItem::tid() const {
  // @@protoc_insertion_point(field_get:pb.TArmItem.Tid)
  return tid_;
}
inline void TArmItem::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArmItem.Tid)
}

// optional int32 RefineLv = 3;
inline bool TArmItem::has_refinelv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArmItem::set_has_refinelv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArmItem::clear_has_refinelv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArmItem::clear_refinelv() {
  refinelv_ = 0;
  clear_has_refinelv();
}
inline ::google::protobuf::int32 TArmItem::refinelv() const {
  // @@protoc_insertion_point(field_get:pb.TArmItem.RefineLv)
  return refinelv_;
}
inline void TArmItem::set_refinelv(::google::protobuf::int32 value) {
  set_has_refinelv();
  refinelv_ = value;
  // @@protoc_insertion_point(field_set:pb.TArmItem.RefineLv)
}

// optional int32 RefineSubLv = 4;
inline bool TArmItem::has_refinesublv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TArmItem::set_has_refinesublv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TArmItem::clear_has_refinesublv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TArmItem::clear_refinesublv() {
  refinesublv_ = 0;
  clear_has_refinesublv();
}
inline ::google::protobuf::int32 TArmItem::refinesublv() const {
  // @@protoc_insertion_point(field_get:pb.TArmItem.RefineSubLv)
  return refinesublv_;
}
inline void TArmItem::set_refinesublv(::google::protobuf::int32 value) {
  set_has_refinesublv();
  refinesublv_ = value;
  // @@protoc_insertion_point(field_set:pb.TArmItem.RefineSubLv)
}

// optional int32 EnhanceLv = 5;
inline bool TArmItem::has_enhancelv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TArmItem::set_has_enhancelv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TArmItem::clear_has_enhancelv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TArmItem::clear_enhancelv() {
  enhancelv_ = 0;
  clear_has_enhancelv();
}
inline ::google::protobuf::int32 TArmItem::enhancelv() const {
  // @@protoc_insertion_point(field_get:pb.TArmItem.EnhanceLv)
  return enhancelv_;
}
inline void TArmItem::set_enhancelv(::google::protobuf::int32 value) {
  set_has_enhancelv();
  enhancelv_ = value;
  // @@protoc_insertion_point(field_set:pb.TArmItem.EnhanceLv)
}

// optional int32 Num = 6;
inline bool TArmItem::has_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TArmItem::set_has_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TArmItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TArmItem::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 TArmItem::num() const {
  // @@protoc_insertion_point(field_get:pb.TArmItem.Num)
  return num_;
}
inline void TArmItem::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TArmItem.Num)
}

// optional int32 GoldLv = 7;
inline bool TArmItem::has_goldlv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TArmItem::set_has_goldlv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TArmItem::clear_has_goldlv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TArmItem::clear_goldlv() {
  goldlv_ = 0;
  clear_has_goldlv();
}
inline ::google::protobuf::int32 TArmItem::goldlv() const {
  // @@protoc_insertion_point(field_get:pb.TArmItem.GoldLv)
  return goldlv_;
}
inline void TArmItem::set_goldlv(::google::protobuf::int32 value) {
  set_has_goldlv();
  goldlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TArmItem.GoldLv)
}

// optional int32 CarveId = 8;
inline bool TArmItem::has_carveid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TArmItem::set_has_carveid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TArmItem::clear_has_carveid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TArmItem::clear_carveid() {
  carveid_ = 0;
  clear_has_carveid();
}
inline ::google::protobuf::int32 TArmItem::carveid() const {
  // @@protoc_insertion_point(field_get:pb.TArmItem.CarveId)
  return carveid_;
}
inline void TArmItem::set_carveid(::google::protobuf::int32 value) {
  set_has_carveid();
  carveid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArmItem.CarveId)
}

// repeated .pb.TCommonReward CarveCost = 9;
inline int TArmItem::carvecost_size() const {
  return carvecost_.size();
}
inline void TArmItem::clear_carvecost() {
  carvecost_.Clear();
}
inline const ::pb::TCommonReward& TArmItem::carvecost(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArmItem.CarveCost)
  return carvecost_.Get(index);
}
inline ::pb::TCommonReward* TArmItem::mutable_carvecost(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArmItem.CarveCost)
  return carvecost_.Mutable(index);
}
inline ::pb::TCommonReward* TArmItem::add_carvecost() {
  // @@protoc_insertion_point(field_add:pb.TArmItem.CarveCost)
  return carvecost_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TArmItem::carvecost() const {
  // @@protoc_insertion_point(field_list:pb.TArmItem.CarveCost)
  return carvecost_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TArmItem::mutable_carvecost() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArmItem.CarveCost)
  return &carvecost_;
}

// optional int32 WhiteGoldLv = 10;
inline bool TArmItem::has_whitegoldlv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TArmItem::set_has_whitegoldlv() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TArmItem::clear_has_whitegoldlv() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TArmItem::clear_whitegoldlv() {
  whitegoldlv_ = 0;
  clear_has_whitegoldlv();
}
inline ::google::protobuf::int32 TArmItem::whitegoldlv() const {
  // @@protoc_insertion_point(field_get:pb.TArmItem.WhiteGoldLv)
  return whitegoldlv_;
}
inline void TArmItem::set_whitegoldlv(::google::protobuf::int32 value) {
  set_has_whitegoldlv();
  whitegoldlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TArmItem.WhiteGoldLv)
}

// optional int32 EvolveLv = 11;
inline bool TArmItem::has_evolvelv() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TArmItem::set_has_evolvelv() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TArmItem::clear_has_evolvelv() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TArmItem::clear_evolvelv() {
  evolvelv_ = 0;
  clear_has_evolvelv();
}
inline ::google::protobuf::int32 TArmItem::evolvelv() const {
  // @@protoc_insertion_point(field_get:pb.TArmItem.EvolveLv)
  return evolvelv_;
}
inline void TArmItem::set_evolvelv(::google::protobuf::int32 value) {
  set_has_evolvelv();
  evolvelv_ = value;
  // @@protoc_insertion_point(field_set:pb.TArmItem.EvolveLv)
}

// optional int32 EvolveExp = 12;
inline bool TArmItem::has_evolveexp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TArmItem::set_has_evolveexp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TArmItem::clear_has_evolveexp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TArmItem::clear_evolveexp() {
  evolveexp_ = 0;
  clear_has_evolveexp();
}
inline ::google::protobuf::int32 TArmItem::evolveexp() const {
  // @@protoc_insertion_point(field_get:pb.TArmItem.EvolveExp)
  return evolveexp_;
}
inline void TArmItem::set_evolveexp(::google::protobuf::int32 value) {
  set_has_evolveexp();
  evolveexp_ = value;
  // @@protoc_insertion_point(field_set:pb.TArmItem.EvolveExp)
}

// optional int32 EvolveLuck = 13;
inline bool TArmItem::has_evolveluck() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TArmItem::set_has_evolveluck() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TArmItem::clear_has_evolveluck() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TArmItem::clear_evolveluck() {
  evolveluck_ = 0;
  clear_has_evolveluck();
}
inline ::google::protobuf::int32 TArmItem::evolveluck() const {
  // @@protoc_insertion_point(field_get:pb.TArmItem.EvolveLuck)
  return evolveluck_;
}
inline void TArmItem::set_evolveluck(::google::protobuf::int32 value) {
  set_has_evolveluck();
  evolveluck_ = value;
  // @@protoc_insertion_point(field_set:pb.TArmItem.EvolveLuck)
}

// repeated .pb.TAttribute EvolveRandAttrArr = 14;
inline int TArmItem::evolverandattrarr_size() const {
  return evolverandattrarr_.size();
}
inline void TArmItem::clear_evolverandattrarr() {
  evolverandattrarr_.Clear();
}
inline const ::pb::TAttribute& TArmItem::evolverandattrarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArmItem.EvolveRandAttrArr)
  return evolverandattrarr_.Get(index);
}
inline ::pb::TAttribute* TArmItem::mutable_evolverandattrarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArmItem.EvolveRandAttrArr)
  return evolverandattrarr_.Mutable(index);
}
inline ::pb::TAttribute* TArmItem::add_evolverandattrarr() {
  // @@protoc_insertion_point(field_add:pb.TArmItem.EvolveRandAttrArr)
  return evolverandattrarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >&
TArmItem::evolverandattrarr() const {
  // @@protoc_insertion_point(field_list:pb.TArmItem.EvolveRandAttrArr)
  return evolverandattrarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >*
TArmItem::mutable_evolverandattrarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArmItem.EvolveRandAttrArr)
  return &evolverandattrarr_;
}

// repeated .pb.TCommonReward EvolveCost = 15;
inline int TArmItem::evolvecost_size() const {
  return evolvecost_.size();
}
inline void TArmItem::clear_evolvecost() {
  evolvecost_.Clear();
}
inline const ::pb::TCommonReward& TArmItem::evolvecost(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArmItem.EvolveCost)
  return evolvecost_.Get(index);
}
inline ::pb::TCommonReward* TArmItem::mutable_evolvecost(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArmItem.EvolveCost)
  return evolvecost_.Mutable(index);
}
inline ::pb::TCommonReward* TArmItem::add_evolvecost() {
  // @@protoc_insertion_point(field_add:pb.TArmItem.EvolveCost)
  return evolvecost_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TArmItem::evolvecost() const {
  // @@protoc_insertion_point(field_list:pb.TArmItem.EvolveCost)
  return evolvecost_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TArmItem::mutable_evolvecost() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArmItem.EvolveCost)
  return &evolvecost_;
}

// -------------------------------------------------------------------

// TAccessoryItem

// optional int32 ItemId = 1;
inline bool TAccessoryItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAccessoryItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAccessoryItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAccessoryItem::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 TAccessoryItem::itemid() const {
  // @@protoc_insertion_point(field_get:pb.TAccessoryItem.ItemId)
  return itemid_;
}
inline void TAccessoryItem::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAccessoryItem.ItemId)
}

// optional int32 Tid = 2;
inline bool TAccessoryItem::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAccessoryItem::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAccessoryItem::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAccessoryItem::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 TAccessoryItem::tid() const {
  // @@protoc_insertion_point(field_get:pb.TAccessoryItem.Tid)
  return tid_;
}
inline void TAccessoryItem::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAccessoryItem.Tid)
}

// optional int32 RefineLv = 3;
inline bool TAccessoryItem::has_refinelv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAccessoryItem::set_has_refinelv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAccessoryItem::clear_has_refinelv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAccessoryItem::clear_refinelv() {
  refinelv_ = 0;
  clear_has_refinelv();
}
inline ::google::protobuf::int32 TAccessoryItem::refinelv() const {
  // @@protoc_insertion_point(field_get:pb.TAccessoryItem.RefineLv)
  return refinelv_;
}
inline void TAccessoryItem::set_refinelv(::google::protobuf::int32 value) {
  set_has_refinelv();
  refinelv_ = value;
  // @@protoc_insertion_point(field_set:pb.TAccessoryItem.RefineLv)
}

// optional int32 RefineSubLv = 4;
inline bool TAccessoryItem::has_refinesublv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAccessoryItem::set_has_refinesublv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAccessoryItem::clear_has_refinesublv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAccessoryItem::clear_refinesublv() {
  refinesublv_ = 0;
  clear_has_refinesublv();
}
inline ::google::protobuf::int32 TAccessoryItem::refinesublv() const {
  // @@protoc_insertion_point(field_get:pb.TAccessoryItem.RefineSubLv)
  return refinesublv_;
}
inline void TAccessoryItem::set_refinesublv(::google::protobuf::int32 value) {
  set_has_refinesublv();
  refinesublv_ = value;
  // @@protoc_insertion_point(field_set:pb.TAccessoryItem.RefineSubLv)
}

// optional int32 EnhanceLv = 5;
inline bool TAccessoryItem::has_enhancelv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAccessoryItem::set_has_enhancelv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAccessoryItem::clear_has_enhancelv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAccessoryItem::clear_enhancelv() {
  enhancelv_ = 0;
  clear_has_enhancelv();
}
inline ::google::protobuf::int32 TAccessoryItem::enhancelv() const {
  // @@protoc_insertion_point(field_get:pb.TAccessoryItem.EnhanceLv)
  return enhancelv_;
}
inline void TAccessoryItem::set_enhancelv(::google::protobuf::int32 value) {
  set_has_enhancelv();
  enhancelv_ = value;
  // @@protoc_insertion_point(field_set:pb.TAccessoryItem.EnhanceLv)
}

// optional int32 EnhanceExp = 6;
inline bool TAccessoryItem::has_enhanceexp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TAccessoryItem::set_has_enhanceexp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TAccessoryItem::clear_has_enhanceexp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TAccessoryItem::clear_enhanceexp() {
  enhanceexp_ = 0;
  clear_has_enhanceexp();
}
inline ::google::protobuf::int32 TAccessoryItem::enhanceexp() const {
  // @@protoc_insertion_point(field_get:pb.TAccessoryItem.EnhanceExp)
  return enhanceexp_;
}
inline void TAccessoryItem::set_enhanceexp(::google::protobuf::int32 value) {
  set_has_enhanceexp();
  enhanceexp_ = value;
  // @@protoc_insertion_point(field_set:pb.TAccessoryItem.EnhanceExp)
}

// repeated .pb.TCommonReward EnhanceCost = 7;
inline int TAccessoryItem::enhancecost_size() const {
  return enhancecost_.size();
}
inline void TAccessoryItem::clear_enhancecost() {
  enhancecost_.Clear();
}
inline const ::pb::TCommonReward& TAccessoryItem::enhancecost(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAccessoryItem.EnhanceCost)
  return enhancecost_.Get(index);
}
inline ::pb::TCommonReward* TAccessoryItem::mutable_enhancecost(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAccessoryItem.EnhanceCost)
  return enhancecost_.Mutable(index);
}
inline ::pb::TCommonReward* TAccessoryItem::add_enhancecost() {
  // @@protoc_insertion_point(field_add:pb.TAccessoryItem.EnhanceCost)
  return enhancecost_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TAccessoryItem::enhancecost() const {
  // @@protoc_insertion_point(field_list:pb.TAccessoryItem.EnhanceCost)
  return enhancecost_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TAccessoryItem::mutable_enhancecost() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAccessoryItem.EnhanceCost)
  return &enhancecost_;
}

// optional int32 Num = 8;
inline bool TAccessoryItem::has_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TAccessoryItem::set_has_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TAccessoryItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TAccessoryItem::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 TAccessoryItem::num() const {
  // @@protoc_insertion_point(field_get:pb.TAccessoryItem.Num)
  return num_;
}
inline void TAccessoryItem::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TAccessoryItem.Num)
}

// optional int32 GoldLv = 9;
inline bool TAccessoryItem::has_goldlv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TAccessoryItem::set_has_goldlv() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TAccessoryItem::clear_has_goldlv() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TAccessoryItem::clear_goldlv() {
  goldlv_ = 0;
  clear_has_goldlv();
}
inline ::google::protobuf::int32 TAccessoryItem::goldlv() const {
  // @@protoc_insertion_point(field_get:pb.TAccessoryItem.GoldLv)
  return goldlv_;
}
inline void TAccessoryItem::set_goldlv(::google::protobuf::int32 value) {
  set_has_goldlv();
  goldlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TAccessoryItem.GoldLv)
}

// optional int32 WhiteGoldLv = 10;
inline bool TAccessoryItem::has_whitegoldlv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TAccessoryItem::set_has_whitegoldlv() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TAccessoryItem::clear_has_whitegoldlv() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TAccessoryItem::clear_whitegoldlv() {
  whitegoldlv_ = 0;
  clear_has_whitegoldlv();
}
inline ::google::protobuf::int32 TAccessoryItem::whitegoldlv() const {
  // @@protoc_insertion_point(field_get:pb.TAccessoryItem.WhiteGoldLv)
  return whitegoldlv_;
}
inline void TAccessoryItem::set_whitegoldlv(::google::protobuf::int32 value) {
  set_has_whitegoldlv();
  whitegoldlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TAccessoryItem.WhiteGoldLv)
}

// -------------------------------------------------------------------

// TSoulItem

// optional uint32 ItemId = 1;
inline bool TSoulItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSoulItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSoulItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSoulItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 TSoulItem::itemid() const {
  // @@protoc_insertion_point(field_get:pb.TSoulItem.ItemId)
  return itemid_;
}
inline void TSoulItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSoulItem.ItemId)
}

// optional uint32 Tid = 2;
inline bool TSoulItem::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSoulItem::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSoulItem::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSoulItem::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TSoulItem::tid() const {
  // @@protoc_insertion_point(field_get:pb.TSoulItem.Tid)
  return tid_;
}
inline void TSoulItem::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSoulItem.Tid)
}

// optional uint32 AdvanceLv = 3;
inline bool TSoulItem::has_advancelv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSoulItem::set_has_advancelv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSoulItem::clear_has_advancelv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSoulItem::clear_advancelv() {
  advancelv_ = 0u;
  clear_has_advancelv();
}
inline ::google::protobuf::uint32 TSoulItem::advancelv() const {
  // @@protoc_insertion_point(field_get:pb.TSoulItem.AdvanceLv)
  return advancelv_;
}
inline void TSoulItem::set_advancelv(::google::protobuf::uint32 value) {
  set_has_advancelv();
  advancelv_ = value;
  // @@protoc_insertion_point(field_set:pb.TSoulItem.AdvanceLv)
}

// optional uint32 Num = 4;
inline bool TSoulItem::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TSoulItem::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TSoulItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TSoulItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TSoulItem::num() const {
  // @@protoc_insertion_point(field_get:pb.TSoulItem.Num)
  return num_;
}
inline void TSoulItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TSoulItem.Num)
}

// -------------------------------------------------------------------

// TMountEquipItem

// optional uint32 ItemId = 1;
inline bool TMountEquipItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMountEquipItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TMountEquipItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TMountEquipItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 TMountEquipItem::itemid() const {
  // @@protoc_insertion_point(field_get:pb.TMountEquipItem.ItemId)
  return itemid_;
}
inline void TMountEquipItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:pb.TMountEquipItem.ItemId)
}

// optional uint32 Tid = 2;
inline bool TMountEquipItem::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMountEquipItem::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TMountEquipItem::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TMountEquipItem::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TMountEquipItem::tid() const {
  // @@protoc_insertion_point(field_get:pb.TMountEquipItem.Tid)
  return tid_;
}
inline void TMountEquipItem::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TMountEquipItem.Tid)
}

// optional uint64 ExpireTime = 3;
inline bool TMountEquipItem::has_expiretime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMountEquipItem::set_has_expiretime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TMountEquipItem::clear_has_expiretime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TMountEquipItem::clear_expiretime() {
  expiretime_ = GOOGLE_ULONGLONG(0);
  clear_has_expiretime();
}
inline ::google::protobuf::uint64 TMountEquipItem::expiretime() const {
  // @@protoc_insertion_point(field_get:pb.TMountEquipItem.ExpireTime)
  return expiretime_;
}
inline void TMountEquipItem::set_expiretime(::google::protobuf::uint64 value) {
  set_has_expiretime();
  expiretime_ = value;
  // @@protoc_insertion_point(field_set:pb.TMountEquipItem.ExpireTime)
}

// optional uint32 Num = 4;
inline bool TMountEquipItem::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMountEquipItem::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TMountEquipItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TMountEquipItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TMountEquipItem::num() const {
  // @@protoc_insertion_point(field_get:pb.TMountEquipItem.Num)
  return num_;
}
inline void TMountEquipItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TMountEquipItem.Num)
}

// optional uint32 Exp = 5;
inline bool TMountEquipItem::has_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TMountEquipItem::set_has_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TMountEquipItem::clear_has_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TMountEquipItem::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 TMountEquipItem::exp() const {
  // @@protoc_insertion_point(field_get:pb.TMountEquipItem.Exp)
  return exp_;
}
inline void TMountEquipItem::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:pb.TMountEquipItem.Exp)
}

// -------------------------------------------------------------------

// TExclEquipItem

// optional uint32 ItemId = 1;
inline bool TExclEquipItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExclEquipItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExclEquipItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExclEquipItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 TExclEquipItem::itemid() const {
  // @@protoc_insertion_point(field_get:pb.TExclEquipItem.ItemId)
  return itemid_;
}
inline void TExclEquipItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:pb.TExclEquipItem.ItemId)
}

// optional uint32 Tid = 2;
inline bool TExclEquipItem::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TExclEquipItem::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TExclEquipItem::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TExclEquipItem::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TExclEquipItem::tid() const {
  // @@protoc_insertion_point(field_get:pb.TExclEquipItem.Tid)
  return tid_;
}
inline void TExclEquipItem::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TExclEquipItem.Tid)
}

// optional uint32 AdvanceLv = 3;
inline bool TExclEquipItem::has_advancelv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TExclEquipItem::set_has_advancelv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TExclEquipItem::clear_has_advancelv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TExclEquipItem::clear_advancelv() {
  advancelv_ = 0u;
  clear_has_advancelv();
}
inline ::google::protobuf::uint32 TExclEquipItem::advancelv() const {
  // @@protoc_insertion_point(field_get:pb.TExclEquipItem.AdvanceLv)
  return advancelv_;
}
inline void TExclEquipItem::set_advancelv(::google::protobuf::uint32 value) {
  set_has_advancelv();
  advancelv_ = value;
  // @@protoc_insertion_point(field_set:pb.TExclEquipItem.AdvanceLv)
}

// optional uint32 AdvanceNum1 = 4;
inline bool TExclEquipItem::has_advancenum1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TExclEquipItem::set_has_advancenum1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TExclEquipItem::clear_has_advancenum1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TExclEquipItem::clear_advancenum1() {
  advancenum1_ = 0u;
  clear_has_advancenum1();
}
inline ::google::protobuf::uint32 TExclEquipItem::advancenum1() const {
  // @@protoc_insertion_point(field_get:pb.TExclEquipItem.AdvanceNum1)
  return advancenum1_;
}
inline void TExclEquipItem::set_advancenum1(::google::protobuf::uint32 value) {
  set_has_advancenum1();
  advancenum1_ = value;
  // @@protoc_insertion_point(field_set:pb.TExclEquipItem.AdvanceNum1)
}

// optional uint32 AdvanceNum2 = 5;
inline bool TExclEquipItem::has_advancenum2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TExclEquipItem::set_has_advancenum2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TExclEquipItem::clear_has_advancenum2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TExclEquipItem::clear_advancenum2() {
  advancenum2_ = 0u;
  clear_has_advancenum2();
}
inline ::google::protobuf::uint32 TExclEquipItem::advancenum2() const {
  // @@protoc_insertion_point(field_get:pb.TExclEquipItem.AdvanceNum2)
  return advancenum2_;
}
inline void TExclEquipItem::set_advancenum2(::google::protobuf::uint32 value) {
  set_has_advancenum2();
  advancenum2_ = value;
  // @@protoc_insertion_point(field_set:pb.TExclEquipItem.AdvanceNum2)
}

// optional uint32 AdvanceNum3 = 6;
inline bool TExclEquipItem::has_advancenum3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TExclEquipItem::set_has_advancenum3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TExclEquipItem::clear_has_advancenum3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TExclEquipItem::clear_advancenum3() {
  advancenum3_ = 0u;
  clear_has_advancenum3();
}
inline ::google::protobuf::uint32 TExclEquipItem::advancenum3() const {
  // @@protoc_insertion_point(field_get:pb.TExclEquipItem.AdvanceNum3)
  return advancenum3_;
}
inline void TExclEquipItem::set_advancenum3(::google::protobuf::uint32 value) {
  set_has_advancenum3();
  advancenum3_ = value;
  // @@protoc_insertion_point(field_set:pb.TExclEquipItem.AdvanceNum3)
}

// optional uint32 StarLv = 7;
inline bool TExclEquipItem::has_starlv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TExclEquipItem::set_has_starlv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TExclEquipItem::clear_has_starlv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TExclEquipItem::clear_starlv() {
  starlv_ = 0u;
  clear_has_starlv();
}
inline ::google::protobuf::uint32 TExclEquipItem::starlv() const {
  // @@protoc_insertion_point(field_get:pb.TExclEquipItem.StarLv)
  return starlv_;
}
inline void TExclEquipItem::set_starlv(::google::protobuf::uint32 value) {
  set_has_starlv();
  starlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TExclEquipItem.StarLv)
}

// optional uint32 Num = 8;
inline bool TExclEquipItem::has_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TExclEquipItem::set_has_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TExclEquipItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TExclEquipItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TExclEquipItem::num() const {
  // @@protoc_insertion_point(field_get:pb.TExclEquipItem.Num)
  return num_;
}
inline void TExclEquipItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TExclEquipItem.Num)
}

// optional uint32 GoldLv = 9;
inline bool TExclEquipItem::has_goldlv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TExclEquipItem::set_has_goldlv() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TExclEquipItem::clear_has_goldlv() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TExclEquipItem::clear_goldlv() {
  goldlv_ = 0u;
  clear_has_goldlv();
}
inline ::google::protobuf::uint32 TExclEquipItem::goldlv() const {
  // @@protoc_insertion_point(field_get:pb.TExclEquipItem.GoldLv)
  return goldlv_;
}
inline void TExclEquipItem::set_goldlv(::google::protobuf::uint32 value) {
  set_has_goldlv();
  goldlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TExclEquipItem.GoldLv)
}

// optional uint32 EngraveLv = 10;
inline bool TExclEquipItem::has_engravelv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TExclEquipItem::set_has_engravelv() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TExclEquipItem::clear_has_engravelv() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TExclEquipItem::clear_engravelv() {
  engravelv_ = 0u;
  clear_has_engravelv();
}
inline ::google::protobuf::uint32 TExclEquipItem::engravelv() const {
  // @@protoc_insertion_point(field_get:pb.TExclEquipItem.EngraveLv)
  return engravelv_;
}
inline void TExclEquipItem::set_engravelv(::google::protobuf::uint32 value) {
  set_has_engravelv();
  engravelv_ = value;
  // @@protoc_insertion_point(field_set:pb.TExclEquipItem.EngraveLv)
}

// repeated .pb.TExclEquipItemRefineInfo RefineInfo = 11;
inline int TExclEquipItem::refineinfo_size() const {
  return refineinfo_.size();
}
inline void TExclEquipItem::clear_refineinfo() {
  refineinfo_.Clear();
}
inline const ::pb::TExclEquipItemRefineInfo& TExclEquipItem::refineinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExclEquipItem.RefineInfo)
  return refineinfo_.Get(index);
}
inline ::pb::TExclEquipItemRefineInfo* TExclEquipItem::mutable_refineinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TExclEquipItem.RefineInfo)
  return refineinfo_.Mutable(index);
}
inline ::pb::TExclEquipItemRefineInfo* TExclEquipItem::add_refineinfo() {
  // @@protoc_insertion_point(field_add:pb.TExclEquipItem.RefineInfo)
  return refineinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TExclEquipItemRefineInfo >&
TExclEquipItem::refineinfo() const {
  // @@protoc_insertion_point(field_list:pb.TExclEquipItem.RefineInfo)
  return refineinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TExclEquipItemRefineInfo >*
TExclEquipItem::mutable_refineinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExclEquipItem.RefineInfo)
  return &refineinfo_;
}

// optional uint32 RefineTotalScore = 12;
inline bool TExclEquipItem::has_refinetotalscore() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TExclEquipItem::set_has_refinetotalscore() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TExclEquipItem::clear_has_refinetotalscore() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TExclEquipItem::clear_refinetotalscore() {
  refinetotalscore_ = 0u;
  clear_has_refinetotalscore();
}
inline ::google::protobuf::uint32 TExclEquipItem::refinetotalscore() const {
  // @@protoc_insertion_point(field_get:pb.TExclEquipItem.RefineTotalScore)
  return refinetotalscore_;
}
inline void TExclEquipItem::set_refinetotalscore(::google::protobuf::uint32 value) {
  set_has_refinetotalscore();
  refinetotalscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TExclEquipItem.RefineTotalScore)
}

// optional .pb.TExclEquipItemRefineInfo confirmedRefineInfo = 13;
inline bool TExclEquipItem::has_confirmedrefineinfo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TExclEquipItem::set_has_confirmedrefineinfo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TExclEquipItem::clear_has_confirmedrefineinfo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TExclEquipItem::clear_confirmedrefineinfo() {
  if (confirmedrefineinfo_ != NULL) confirmedrefineinfo_->::pb::TExclEquipItemRefineInfo::Clear();
  clear_has_confirmedrefineinfo();
}
inline const ::pb::TExclEquipItemRefineInfo& TExclEquipItem::confirmedrefineinfo() const {
  // @@protoc_insertion_point(field_get:pb.TExclEquipItem.confirmedRefineInfo)
  return confirmedrefineinfo_ != NULL ? *confirmedrefineinfo_ : *default_instance_->confirmedrefineinfo_;
}
inline ::pb::TExclEquipItemRefineInfo* TExclEquipItem::mutable_confirmedrefineinfo() {
  set_has_confirmedrefineinfo();
  if (confirmedrefineinfo_ == NULL) confirmedrefineinfo_ = new ::pb::TExclEquipItemRefineInfo;
  // @@protoc_insertion_point(field_mutable:pb.TExclEquipItem.confirmedRefineInfo)
  return confirmedrefineinfo_;
}
inline ::pb::TExclEquipItemRefineInfo* TExclEquipItem::release_confirmedrefineinfo() {
  clear_has_confirmedrefineinfo();
  ::pb::TExclEquipItemRefineInfo* temp = confirmedrefineinfo_;
  confirmedrefineinfo_ = NULL;
  return temp;
}
inline void TExclEquipItem::set_allocated_confirmedrefineinfo(::pb::TExclEquipItemRefineInfo* confirmedrefineinfo) {
  delete confirmedrefineinfo_;
  confirmedrefineinfo_ = confirmedrefineinfo;
  if (confirmedrefineinfo) {
    set_has_confirmedrefineinfo();
  } else {
    clear_has_confirmedrefineinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TExclEquipItem.confirmedRefineInfo)
}

// repeated .pb.TCommonReward refineReward = 14;
inline int TExclEquipItem::refinereward_size() const {
  return refinereward_.size();
}
inline void TExclEquipItem::clear_refinereward() {
  refinereward_.Clear();
}
inline const ::pb::TCommonReward& TExclEquipItem::refinereward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExclEquipItem.refineReward)
  return refinereward_.Get(index);
}
inline ::pb::TCommonReward* TExclEquipItem::mutable_refinereward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TExclEquipItem.refineReward)
  return refinereward_.Mutable(index);
}
inline ::pb::TCommonReward* TExclEquipItem::add_refinereward() {
  // @@protoc_insertion_point(field_add:pb.TExclEquipItem.refineReward)
  return refinereward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TExclEquipItem::refinereward() const {
  // @@protoc_insertion_point(field_list:pb.TExclEquipItem.refineReward)
  return refinereward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TExclEquipItem::mutable_refinereward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExclEquipItem.refineReward)
  return &refinereward_;
}

// -------------------------------------------------------------------

// TExclEquipItemRefineInfo

// optional uint32 posId = 1;
inline bool TExclEquipItemRefineInfo::has_posid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExclEquipItemRefineInfo::set_has_posid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExclEquipItemRefineInfo::clear_has_posid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExclEquipItemRefineInfo::clear_posid() {
  posid_ = 0u;
  clear_has_posid();
}
inline ::google::protobuf::uint32 TExclEquipItemRefineInfo::posid() const {
  // @@protoc_insertion_point(field_get:pb.TExclEquipItemRefineInfo.posId)
  return posid_;
}
inline void TExclEquipItemRefineInfo::set_posid(::google::protobuf::uint32 value) {
  set_has_posid();
  posid_ = value;
  // @@protoc_insertion_point(field_set:pb.TExclEquipItemRefineInfo.posId)
}

// optional uint32 AttrId = 2;
inline bool TExclEquipItemRefineInfo::has_attrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TExclEquipItemRefineInfo::set_has_attrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TExclEquipItemRefineInfo::clear_has_attrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TExclEquipItemRefineInfo::clear_attrid() {
  attrid_ = 0u;
  clear_has_attrid();
}
inline ::google::protobuf::uint32 TExclEquipItemRefineInfo::attrid() const {
  // @@protoc_insertion_point(field_get:pb.TExclEquipItemRefineInfo.AttrId)
  return attrid_;
}
inline void TExclEquipItemRefineInfo::set_attrid(::google::protobuf::uint32 value) {
  set_has_attrid();
  attrid_ = value;
  // @@protoc_insertion_point(field_set:pb.TExclEquipItemRefineInfo.AttrId)
}

// optional uint32 AttrValue = 3;
inline bool TExclEquipItemRefineInfo::has_attrvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TExclEquipItemRefineInfo::set_has_attrvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TExclEquipItemRefineInfo::clear_has_attrvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TExclEquipItemRefineInfo::clear_attrvalue() {
  attrvalue_ = 0u;
  clear_has_attrvalue();
}
inline ::google::protobuf::uint32 TExclEquipItemRefineInfo::attrvalue() const {
  // @@protoc_insertion_point(field_get:pb.TExclEquipItemRefineInfo.AttrValue)
  return attrvalue_;
}
inline void TExclEquipItemRefineInfo::set_attrvalue(::google::protobuf::uint32 value) {
  set_has_attrvalue();
  attrvalue_ = value;
  // @@protoc_insertion_point(field_set:pb.TExclEquipItemRefineInfo.AttrValue)
}

// optional uint32 AttrScore = 4;
inline bool TExclEquipItemRefineInfo::has_attrscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TExclEquipItemRefineInfo::set_has_attrscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TExclEquipItemRefineInfo::clear_has_attrscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TExclEquipItemRefineInfo::clear_attrscore() {
  attrscore_ = 0u;
  clear_has_attrscore();
}
inline ::google::protobuf::uint32 TExclEquipItemRefineInfo::attrscore() const {
  // @@protoc_insertion_point(field_get:pb.TExclEquipItemRefineInfo.AttrScore)
  return attrscore_;
}
inline void TExclEquipItemRefineInfo::set_attrscore(::google::protobuf::uint32 value) {
  set_has_attrscore();
  attrscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TExclEquipItemRefineInfo.AttrScore)
}

// optional uint32 Process = 5;
inline bool TExclEquipItemRefineInfo::has_process() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TExclEquipItemRefineInfo::set_has_process() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TExclEquipItemRefineInfo::clear_has_process() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TExclEquipItemRefineInfo::clear_process() {
  process_ = 0u;
  clear_has_process();
}
inline ::google::protobuf::uint32 TExclEquipItemRefineInfo::process() const {
  // @@protoc_insertion_point(field_get:pb.TExclEquipItemRefineInfo.Process)
  return process_;
}
inline void TExclEquipItemRefineInfo::set_process(::google::protobuf::uint32 value) {
  set_has_process();
  process_ = value;
  // @@protoc_insertion_point(field_set:pb.TExclEquipItemRefineInfo.Process)
}

// -------------------------------------------------------------------

// TBeastArmRefineRecord

// optional uint32 RandAttrIndex = 1;
inline bool TBeastArmRefineRecord::has_randattrindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastArmRefineRecord::set_has_randattrindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastArmRefineRecord::clear_has_randattrindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastArmRefineRecord::clear_randattrindex() {
  randattrindex_ = 0u;
  clear_has_randattrindex();
}
inline ::google::protobuf::uint32 TBeastArmRefineRecord::randattrindex() const {
  // @@protoc_insertion_point(field_get:pb.TBeastArmRefineRecord.RandAttrIndex)
  return randattrindex_;
}
inline void TBeastArmRefineRecord::set_randattrindex(::google::protobuf::uint32 value) {
  set_has_randattrindex();
  randattrindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastArmRefineRecord.RandAttrIndex)
}

// repeated uint32 RefineAttrArr = 2;
inline int TBeastArmRefineRecord::refineattrarr_size() const {
  return refineattrarr_.size();
}
inline void TBeastArmRefineRecord::clear_refineattrarr() {
  refineattrarr_.Clear();
}
inline ::google::protobuf::uint32 TBeastArmRefineRecord::refineattrarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastArmRefineRecord.RefineAttrArr)
  return refineattrarr_.Get(index);
}
inline void TBeastArmRefineRecord::set_refineattrarr(int index, ::google::protobuf::uint32 value) {
  refineattrarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TBeastArmRefineRecord.RefineAttrArr)
}
inline void TBeastArmRefineRecord::add_refineattrarr(::google::protobuf::uint32 value) {
  refineattrarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TBeastArmRefineRecord.RefineAttrArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TBeastArmRefineRecord::refineattrarr() const {
  // @@protoc_insertion_point(field_list:pb.TBeastArmRefineRecord.RefineAttrArr)
  return refineattrarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TBeastArmRefineRecord::mutable_refineattrarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastArmRefineRecord.RefineAttrArr)
  return &refineattrarr_;
}

// -------------------------------------------------------------------

// TBeastArmItem

// optional uint32 ItemId = 1;
inline bool TBeastArmItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastArmItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastArmItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastArmItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 TBeastArmItem::itemid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastArmItem.ItemId)
  return itemid_;
}
inline void TBeastArmItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastArmItem.ItemId)
}

// optional uint32 Tid = 2;
inline bool TBeastArmItem::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastArmItem::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastArmItem::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastArmItem::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TBeastArmItem::tid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastArmItem.Tid)
  return tid_;
}
inline void TBeastArmItem::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastArmItem.Tid)
}

// optional uint32 EnhanceLv = 3;
inline bool TBeastArmItem::has_enhancelv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBeastArmItem::set_has_enhancelv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBeastArmItem::clear_has_enhancelv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBeastArmItem::clear_enhancelv() {
  enhancelv_ = 0u;
  clear_has_enhancelv();
}
inline ::google::protobuf::uint32 TBeastArmItem::enhancelv() const {
  // @@protoc_insertion_point(field_get:pb.TBeastArmItem.EnhanceLv)
  return enhancelv_;
}
inline void TBeastArmItem::set_enhancelv(::google::protobuf::uint32 value) {
  set_has_enhancelv();
  enhancelv_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastArmItem.EnhanceLv)
}

// optional uint32 Num = 4;
inline bool TBeastArmItem::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBeastArmItem::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBeastArmItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBeastArmItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TBeastArmItem::num() const {
  // @@protoc_insertion_point(field_get:pb.TBeastArmItem.Num)
  return num_;
}
inline void TBeastArmItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastArmItem.Num)
}

// repeated uint32 RandAttrArr = 5;
inline int TBeastArmItem::randattrarr_size() const {
  return randattrarr_.size();
}
inline void TBeastArmItem::clear_randattrarr() {
  randattrarr_.Clear();
}
inline ::google::protobuf::uint32 TBeastArmItem::randattrarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastArmItem.RandAttrArr)
  return randattrarr_.Get(index);
}
inline void TBeastArmItem::set_randattrarr(int index, ::google::protobuf::uint32 value) {
  randattrarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TBeastArmItem.RandAttrArr)
}
inline void TBeastArmItem::add_randattrarr(::google::protobuf::uint32 value) {
  randattrarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TBeastArmItem.RandAttrArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TBeastArmItem::randattrarr() const {
  // @@protoc_insertion_point(field_list:pb.TBeastArmItem.RandAttrArr)
  return randattrarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TBeastArmItem::mutable_randattrarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastArmItem.RandAttrArr)
  return &randattrarr_;
}

// repeated .pb.TBeastArmRefineRecord RefineRecordArr = 6;
inline int TBeastArmItem::refinerecordarr_size() const {
  return refinerecordarr_.size();
}
inline void TBeastArmItem::clear_refinerecordarr() {
  refinerecordarr_.Clear();
}
inline const ::pb::TBeastArmRefineRecord& TBeastArmItem::refinerecordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastArmItem.RefineRecordArr)
  return refinerecordarr_.Get(index);
}
inline ::pb::TBeastArmRefineRecord* TBeastArmItem::mutable_refinerecordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastArmItem.RefineRecordArr)
  return refinerecordarr_.Mutable(index);
}
inline ::pb::TBeastArmRefineRecord* TBeastArmItem::add_refinerecordarr() {
  // @@protoc_insertion_point(field_add:pb.TBeastArmItem.RefineRecordArr)
  return refinerecordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmRefineRecord >&
TBeastArmItem::refinerecordarr() const {
  // @@protoc_insertion_point(field_list:pb.TBeastArmItem.RefineRecordArr)
  return refinerecordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmRefineRecord >*
TBeastArmItem::mutable_refinerecordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastArmItem.RefineRecordArr)
  return &refinerecordarr_;
}

// optional uint32 AdvanceLv = 7;
inline bool TBeastArmItem::has_advancelv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TBeastArmItem::set_has_advancelv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TBeastArmItem::clear_has_advancelv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TBeastArmItem::clear_advancelv() {
  advancelv_ = 0u;
  clear_has_advancelv();
}
inline ::google::protobuf::uint32 TBeastArmItem::advancelv() const {
  // @@protoc_insertion_point(field_get:pb.TBeastArmItem.AdvanceLv)
  return advancelv_;
}
inline void TBeastArmItem::set_advancelv(::google::protobuf::uint32 value) {
  set_has_advancelv();
  advancelv_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastArmItem.AdvanceLv)
}

// optional uint32 AdvanceStarLv = 8;
inline bool TBeastArmItem::has_advancestarlv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TBeastArmItem::set_has_advancestarlv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TBeastArmItem::clear_has_advancestarlv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TBeastArmItem::clear_advancestarlv() {
  advancestarlv_ = 0u;
  clear_has_advancestarlv();
}
inline ::google::protobuf::uint32 TBeastArmItem::advancestarlv() const {
  // @@protoc_insertion_point(field_get:pb.TBeastArmItem.AdvanceStarLv)
  return advancestarlv_;
}
inline void TBeastArmItem::set_advancestarlv(::google::protobuf::uint32 value) {
  set_has_advancestarlv();
  advancestarlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastArmItem.AdvanceStarLv)
}

// optional uint32 InitialItemTid = 9;
inline bool TBeastArmItem::has_initialitemtid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TBeastArmItem::set_has_initialitemtid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TBeastArmItem::clear_has_initialitemtid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TBeastArmItem::clear_initialitemtid() {
  initialitemtid_ = 0u;
  clear_has_initialitemtid();
}
inline ::google::protobuf::uint32 TBeastArmItem::initialitemtid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastArmItem.InitialItemTid)
  return initialitemtid_;
}
inline void TBeastArmItem::set_initialitemtid(::google::protobuf::uint32 value) {
  set_has_initialitemtid();
  initialitemtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastArmItem.InitialItemTid)
}

// -------------------------------------------------------------------

// TTreasureItem

// optional int32 ItemId = 1;
inline bool TTreasureItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTreasureItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTreasureItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTreasureItem::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 TTreasureItem::itemid() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureItem.ItemId)
  return itemid_;
}
inline void TTreasureItem::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureItem.ItemId)
}

// optional int32 Tid = 2;
inline bool TTreasureItem::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTreasureItem::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTreasureItem::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTreasureItem::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 TTreasureItem::tid() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureItem.Tid)
  return tid_;
}
inline void TTreasureItem::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureItem.Tid)
}

// optional int32 Num = 3;
inline bool TTreasureItem::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTreasureItem::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTreasureItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTreasureItem::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 TTreasureItem::num() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureItem.Num)
  return num_;
}
inline void TTreasureItem::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureItem.Num)
}

// optional int32 StarLv = 4;
inline bool TTreasureItem::has_starlv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTreasureItem::set_has_starlv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTreasureItem::clear_has_starlv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTreasureItem::clear_starlv() {
  starlv_ = 0;
  clear_has_starlv();
}
inline ::google::protobuf::int32 TTreasureItem::starlv() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureItem.StarLv)
  return starlv_;
}
inline void TTreasureItem::set_starlv(::google::protobuf::int32 value) {
  set_has_starlv();
  starlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureItem.StarLv)
}

// optional int32 IsActivated = 5;
inline bool TTreasureItem::has_isactivated() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TTreasureItem::set_has_isactivated() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TTreasureItem::clear_has_isactivated() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TTreasureItem::clear_isactivated() {
  isactivated_ = 0;
  clear_has_isactivated();
}
inline ::google::protobuf::int32 TTreasureItem::isactivated() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureItem.IsActivated)
  return isactivated_;
}
inline void TTreasureItem::set_isactivated(::google::protobuf::int32 value) {
  set_has_isactivated();
  isactivated_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureItem.IsActivated)
}

// optional int32 IsAwaked = 6;
inline bool TTreasureItem::has_isawaked() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TTreasureItem::set_has_isawaked() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TTreasureItem::clear_has_isawaked() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TTreasureItem::clear_isawaked() {
  isawaked_ = 0;
  clear_has_isawaked();
}
inline ::google::protobuf::int32 TTreasureItem::isawaked() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureItem.IsAwaked)
  return isawaked_;
}
inline void TTreasureItem::set_isawaked(::google::protobuf::int32 value) {
  set_has_isawaked();
  isawaked_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureItem.IsAwaked)
}

// -------------------------------------------------------------------

// TSilkBagItem

// optional int32 ItemId = 1;
inline bool TSilkBagItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSilkBagItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSilkBagItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSilkBagItem::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 TSilkBagItem::itemid() const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagItem.ItemId)
  return itemid_;
}
inline void TSilkBagItem::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSilkBagItem.ItemId)
}

// optional int32 Tid = 2;
inline bool TSilkBagItem::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSilkBagItem::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSilkBagItem::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSilkBagItem::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 TSilkBagItem::tid() const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagItem.Tid)
  return tid_;
}
inline void TSilkBagItem::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSilkBagItem.Tid)
}

// optional int32 Num = 3;
inline bool TSilkBagItem::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSilkBagItem::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSilkBagItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSilkBagItem::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 TSilkBagItem::num() const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagItem.Num)
  return num_;
}
inline void TSilkBagItem::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TSilkBagItem.Num)
}

// optional int32 EnhanceLv = 4;
inline bool TSilkBagItem::has_enhancelv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TSilkBagItem::set_has_enhancelv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TSilkBagItem::clear_has_enhancelv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TSilkBagItem::clear_enhancelv() {
  enhancelv_ = 0;
  clear_has_enhancelv();
}
inline ::google::protobuf::int32 TSilkBagItem::enhancelv() const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagItem.EnhanceLv)
  return enhancelv_;
}
inline void TSilkBagItem::set_enhancelv(::google::protobuf::int32 value) {
  set_has_enhancelv();
  enhancelv_ = value;
  // @@protoc_insertion_point(field_set:pb.TSilkBagItem.EnhanceLv)
}

// optional int32 EnhanceExp = 5;
inline bool TSilkBagItem::has_enhanceexp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TSilkBagItem::set_has_enhanceexp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TSilkBagItem::clear_has_enhanceexp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TSilkBagItem::clear_enhanceexp() {
  enhanceexp_ = 0;
  clear_has_enhanceexp();
}
inline ::google::protobuf::int32 TSilkBagItem::enhanceexp() const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagItem.EnhanceExp)
  return enhanceexp_;
}
inline void TSilkBagItem::set_enhanceexp(::google::protobuf::int32 value) {
  set_has_enhanceexp();
  enhanceexp_ = value;
  // @@protoc_insertion_point(field_set:pb.TSilkBagItem.EnhanceExp)
}

// optional int32 StarLv = 6;
inline bool TSilkBagItem::has_starlv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TSilkBagItem::set_has_starlv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TSilkBagItem::clear_has_starlv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TSilkBagItem::clear_starlv() {
  starlv_ = 0;
  clear_has_starlv();
}
inline ::google::protobuf::int32 TSilkBagItem::starlv() const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagItem.StarLv)
  return starlv_;
}
inline void TSilkBagItem::set_starlv(::google::protobuf::int32 value) {
  set_has_starlv();
  starlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TSilkBagItem.StarLv)
}

// repeated .pb.TCommonReward EnhanceCost = 7;
inline int TSilkBagItem::enhancecost_size() const {
  return enhancecost_.size();
}
inline void TSilkBagItem::clear_enhancecost() {
  enhancecost_.Clear();
}
inline const ::pb::TCommonReward& TSilkBagItem::enhancecost(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagItem.EnhanceCost)
  return enhancecost_.Get(index);
}
inline ::pb::TCommonReward* TSilkBagItem::mutable_enhancecost(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSilkBagItem.EnhanceCost)
  return enhancecost_.Mutable(index);
}
inline ::pb::TCommonReward* TSilkBagItem::add_enhancecost() {
  // @@protoc_insertion_point(field_add:pb.TSilkBagItem.EnhanceCost)
  return enhancecost_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TSilkBagItem::enhancecost() const {
  // @@protoc_insertion_point(field_list:pb.TSilkBagItem.EnhanceCost)
  return enhancecost_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TSilkBagItem::mutable_enhancecost() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSilkBagItem.EnhanceCost)
  return &enhancecost_;
}

// -------------------------------------------------------------------

// TDecorationBagItem

// optional uint32 ItemId = 1;
inline bool TDecorationBagItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDecorationBagItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDecorationBagItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDecorationBagItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 TDecorationBagItem::itemid() const {
  // @@protoc_insertion_point(field_get:pb.TDecorationBagItem.ItemId)
  return itemid_;
}
inline void TDecorationBagItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDecorationBagItem.ItemId)
}

// optional uint32 Tid = 2;
inline bool TDecorationBagItem::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDecorationBagItem::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDecorationBagItem::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDecorationBagItem::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TDecorationBagItem::tid() const {
  // @@protoc_insertion_point(field_get:pb.TDecorationBagItem.Tid)
  return tid_;
}
inline void TDecorationBagItem::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDecorationBagItem.Tid)
}

// optional uint32 Num = 3;
inline bool TDecorationBagItem::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDecorationBagItem::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDecorationBagItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDecorationBagItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TDecorationBagItem::num() const {
  // @@protoc_insertion_point(field_get:pb.TDecorationBagItem.Num)
  return num_;
}
inline void TDecorationBagItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TDecorationBagItem.Num)
}

// optional uint32 StarLv = 4;
inline bool TDecorationBagItem::has_starlv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDecorationBagItem::set_has_starlv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDecorationBagItem::clear_has_starlv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDecorationBagItem::clear_starlv() {
  starlv_ = 0u;
  clear_has_starlv();
}
inline ::google::protobuf::uint32 TDecorationBagItem::starlv() const {
  // @@protoc_insertion_point(field_get:pb.TDecorationBagItem.StarLv)
  return starlv_;
}
inline void TDecorationBagItem::set_starlv(::google::protobuf::uint32 value) {
  set_has_starlv();
  starlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TDecorationBagItem.StarLv)
}

// repeated .pb.TCommonReward EnhanceCost = 7;
inline int TDecorationBagItem::enhancecost_size() const {
  return enhancecost_.size();
}
inline void TDecorationBagItem::clear_enhancecost() {
  enhancecost_.Clear();
}
inline const ::pb::TCommonReward& TDecorationBagItem::enhancecost(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDecorationBagItem.EnhanceCost)
  return enhancecost_.Get(index);
}
inline ::pb::TCommonReward* TDecorationBagItem::mutable_enhancecost(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TDecorationBagItem.EnhanceCost)
  return enhancecost_.Mutable(index);
}
inline ::pb::TCommonReward* TDecorationBagItem::add_enhancecost() {
  // @@protoc_insertion_point(field_add:pb.TDecorationBagItem.EnhanceCost)
  return enhancecost_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TDecorationBagItem::enhancecost() const {
  // @@protoc_insertion_point(field_list:pb.TDecorationBagItem.EnhanceCost)
  return enhancecost_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TDecorationBagItem::mutable_enhancecost() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDecorationBagItem.EnhanceCost)
  return &enhancecost_;
}

// -------------------------------------------------------------------

// TDivineBagItem

// optional int32 ItemId = 1;
inline bool TDivineBagItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDivineBagItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDivineBagItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDivineBagItem::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 TDivineBagItem::itemid() const {
  // @@protoc_insertion_point(field_get:pb.TDivineBagItem.ItemId)
  return itemid_;
}
inline void TDivineBagItem::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDivineBagItem.ItemId)
}

// optional int32 Tid = 2;
inline bool TDivineBagItem::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDivineBagItem::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDivineBagItem::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDivineBagItem::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 TDivineBagItem::tid() const {
  // @@protoc_insertion_point(field_get:pb.TDivineBagItem.Tid)
  return tid_;
}
inline void TDivineBagItem::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDivineBagItem.Tid)
}

// optional uint32 Num = 3;
inline bool TDivineBagItem::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDivineBagItem::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDivineBagItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDivineBagItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TDivineBagItem::num() const {
  // @@protoc_insertion_point(field_get:pb.TDivineBagItem.Num)
  return num_;
}
inline void TDivineBagItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TDivineBagItem.Num)
}

// optional int32 SmeltAfterLv = 4;
inline bool TDivineBagItem::has_smeltafterlv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDivineBagItem::set_has_smeltafterlv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDivineBagItem::clear_has_smeltafterlv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDivineBagItem::clear_smeltafterlv() {
  smeltafterlv_ = 0;
  clear_has_smeltafterlv();
}
inline ::google::protobuf::int32 TDivineBagItem::smeltafterlv() const {
  // @@protoc_insertion_point(field_get:pb.TDivineBagItem.SmeltAfterLv)
  return smeltafterlv_;
}
inline void TDivineBagItem::set_smeltafterlv(::google::protobuf::int32 value) {
  set_has_smeltafterlv();
  smeltafterlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TDivineBagItem.SmeltAfterLv)
}

// optional int32 SurmountAfterLv = 5;
inline bool TDivineBagItem::has_surmountafterlv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDivineBagItem::set_has_surmountafterlv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDivineBagItem::clear_has_surmountafterlv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDivineBagItem::clear_surmountafterlv() {
  surmountafterlv_ = 0;
  clear_has_surmountafterlv();
}
inline ::google::protobuf::int32 TDivineBagItem::surmountafterlv() const {
  // @@protoc_insertion_point(field_get:pb.TDivineBagItem.SurmountAfterLv)
  return surmountafterlv_;
}
inline void TDivineBagItem::set_surmountafterlv(::google::protobuf::int32 value) {
  set_has_surmountafterlv();
  surmountafterlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TDivineBagItem.SurmountAfterLv)
}

// repeated .pb.TAttributeInfo SmeltAttribute = 6;
inline int TDivineBagItem::smeltattribute_size() const {
  return smeltattribute_.size();
}
inline void TDivineBagItem::clear_smeltattribute() {
  smeltattribute_.Clear();
}
inline const ::pb::TAttributeInfo& TDivineBagItem::smeltattribute(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDivineBagItem.SmeltAttribute)
  return smeltattribute_.Get(index);
}
inline ::pb::TAttributeInfo* TDivineBagItem::mutable_smeltattribute(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TDivineBagItem.SmeltAttribute)
  return smeltattribute_.Mutable(index);
}
inline ::pb::TAttributeInfo* TDivineBagItem::add_smeltattribute() {
  // @@protoc_insertion_point(field_add:pb.TDivineBagItem.SmeltAttribute)
  return smeltattribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAttributeInfo >&
TDivineBagItem::smeltattribute() const {
  // @@protoc_insertion_point(field_list:pb.TDivineBagItem.SmeltAttribute)
  return smeltattribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAttributeInfo >*
TDivineBagItem::mutable_smeltattribute() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDivineBagItem.SmeltAttribute)
  return &smeltattribute_;
}

// repeated .pb.TAttributeInfo SmeltUnSubmitAttribute = 7;
inline int TDivineBagItem::smeltunsubmitattribute_size() const {
  return smeltunsubmitattribute_.size();
}
inline void TDivineBagItem::clear_smeltunsubmitattribute() {
  smeltunsubmitattribute_.Clear();
}
inline const ::pb::TAttributeInfo& TDivineBagItem::smeltunsubmitattribute(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDivineBagItem.SmeltUnSubmitAttribute)
  return smeltunsubmitattribute_.Get(index);
}
inline ::pb::TAttributeInfo* TDivineBagItem::mutable_smeltunsubmitattribute(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TDivineBagItem.SmeltUnSubmitAttribute)
  return smeltunsubmitattribute_.Mutable(index);
}
inline ::pb::TAttributeInfo* TDivineBagItem::add_smeltunsubmitattribute() {
  // @@protoc_insertion_point(field_add:pb.TDivineBagItem.SmeltUnSubmitAttribute)
  return smeltunsubmitattribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAttributeInfo >&
TDivineBagItem::smeltunsubmitattribute() const {
  // @@protoc_insertion_point(field_list:pb.TDivineBagItem.SmeltUnSubmitAttribute)
  return smeltunsubmitattribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAttributeInfo >*
TDivineBagItem::mutable_smeltunsubmitattribute() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDivineBagItem.SmeltUnSubmitAttribute)
  return &smeltunsubmitattribute_;
}

// optional int32 LastSmeltType = 8;
inline bool TDivineBagItem::has_lastsmelttype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TDivineBagItem::set_has_lastsmelttype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TDivineBagItem::clear_has_lastsmelttype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TDivineBagItem::clear_lastsmelttype() {
  lastsmelttype_ = 0;
  clear_has_lastsmelttype();
}
inline ::google::protobuf::int32 TDivineBagItem::lastsmelttype() const {
  // @@protoc_insertion_point(field_get:pb.TDivineBagItem.LastSmeltType)
  return lastsmelttype_;
}
inline void TDivineBagItem::set_lastsmelttype(::google::protobuf::int32 value) {
  set_has_lastsmelttype();
  lastsmelttype_ = value;
  // @@protoc_insertion_point(field_set:pb.TDivineBagItem.LastSmeltType)
}

// -------------------------------------------------------------------

// TForceSoulItem

// optional int32 ItemId = 1;
inline bool TForceSoulItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TForceSoulItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TForceSoulItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TForceSoulItem::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 TForceSoulItem::itemid() const {
  // @@protoc_insertion_point(field_get:pb.TForceSoulItem.ItemId)
  return itemid_;
}
inline void TForceSoulItem::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:pb.TForceSoulItem.ItemId)
}

// optional int32 Tid = 2;
inline bool TForceSoulItem::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TForceSoulItem::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TForceSoulItem::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TForceSoulItem::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 TForceSoulItem::tid() const {
  // @@protoc_insertion_point(field_get:pb.TForceSoulItem.Tid)
  return tid_;
}
inline void TForceSoulItem::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TForceSoulItem.Tid)
}

// optional int32 Num = 3;
inline bool TForceSoulItem::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TForceSoulItem::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TForceSoulItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TForceSoulItem::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 TForceSoulItem::num() const {
  // @@protoc_insertion_point(field_get:pb.TForceSoulItem.Num)
  return num_;
}
inline void TForceSoulItem::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TForceSoulItem.Num)
}

// optional int32 EnhanceLv = 4;
inline bool TForceSoulItem::has_enhancelv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TForceSoulItem::set_has_enhancelv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TForceSoulItem::clear_has_enhancelv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TForceSoulItem::clear_enhancelv() {
  enhancelv_ = 0;
  clear_has_enhancelv();
}
inline ::google::protobuf::int32 TForceSoulItem::enhancelv() const {
  // @@protoc_insertion_point(field_get:pb.TForceSoulItem.EnhanceLv)
  return enhancelv_;
}
inline void TForceSoulItem::set_enhancelv(::google::protobuf::int32 value) {
  set_has_enhancelv();
  enhancelv_ = value;
  // @@protoc_insertion_point(field_set:pb.TForceSoulItem.EnhanceLv)
}

// optional int32 StarLv = 5;
inline bool TForceSoulItem::has_starlv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TForceSoulItem::set_has_starlv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TForceSoulItem::clear_has_starlv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TForceSoulItem::clear_starlv() {
  starlv_ = 0;
  clear_has_starlv();
}
inline ::google::protobuf::int32 TForceSoulItem::starlv() const {
  // @@protoc_insertion_point(field_get:pb.TForceSoulItem.StarLv)
  return starlv_;
}
inline void TForceSoulItem::set_starlv(::google::protobuf::int32 value) {
  set_has_starlv();
  starlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TForceSoulItem.StarLv)
}

// repeated .pb.TCommonReward EnhanceCost = 6;
inline int TForceSoulItem::enhancecost_size() const {
  return enhancecost_.size();
}
inline void TForceSoulItem::clear_enhancecost() {
  enhancecost_.Clear();
}
inline const ::pb::TCommonReward& TForceSoulItem::enhancecost(int index) const {
  // @@protoc_insertion_point(field_get:pb.TForceSoulItem.EnhanceCost)
  return enhancecost_.Get(index);
}
inline ::pb::TCommonReward* TForceSoulItem::mutable_enhancecost(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TForceSoulItem.EnhanceCost)
  return enhancecost_.Mutable(index);
}
inline ::pb::TCommonReward* TForceSoulItem::add_enhancecost() {
  // @@protoc_insertion_point(field_add:pb.TForceSoulItem.EnhanceCost)
  return enhancecost_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TForceSoulItem::enhancecost() const {
  // @@protoc_insertion_point(field_list:pb.TForceSoulItem.EnhanceCost)
  return enhancecost_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TForceSoulItem::mutable_enhancecost() {
  // @@protoc_insertion_point(field_mutable_list:pb.TForceSoulItem.EnhanceCost)
  return &enhancecost_;
}

// repeated .pb.TCommonReward StarCost = 7;
inline int TForceSoulItem::starcost_size() const {
  return starcost_.size();
}
inline void TForceSoulItem::clear_starcost() {
  starcost_.Clear();
}
inline const ::pb::TCommonReward& TForceSoulItem::starcost(int index) const {
  // @@protoc_insertion_point(field_get:pb.TForceSoulItem.StarCost)
  return starcost_.Get(index);
}
inline ::pb::TCommonReward* TForceSoulItem::mutable_starcost(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TForceSoulItem.StarCost)
  return starcost_.Mutable(index);
}
inline ::pb::TCommonReward* TForceSoulItem::add_starcost() {
  // @@protoc_insertion_point(field_add:pb.TForceSoulItem.StarCost)
  return starcost_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TForceSoulItem::starcost() const {
  // @@protoc_insertion_point(field_list:pb.TForceSoulItem.StarCost)
  return starcost_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TForceSoulItem::mutable_starcost() {
  // @@protoc_insertion_point(field_mutable_list:pb.TForceSoulItem.StarCost)
  return &starcost_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fCommon_2eproto__INCLUDED
