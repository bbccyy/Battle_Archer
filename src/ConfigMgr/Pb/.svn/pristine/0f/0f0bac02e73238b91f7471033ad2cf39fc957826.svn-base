// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/RewardRecycle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/RewardRecycle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TRewardRecycleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRewardRecycleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRewardRecycleGetRecycleInfoArrRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRewardRecycleGetRecycleInfoArrRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRewardRecycleDoRecycleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRewardRecycleDoRecycleReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fRewardRecycle_2eproto() {
  protobuf_AddDesc_net_2fRewardRecycle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/RewardRecycle.proto");
  GOOGLE_CHECK(file != NULL);
  TRewardRecycleInfo_descriptor_ = file->message_type(0);
  static const int TRewardRecycleInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardRecycleInfo, recycleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardRecycleInfo, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardRecycleInfo, recycletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardRecycleInfo, recycleround_),
  };
  TRewardRecycleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRewardRecycleInfo_descriptor_,
      TRewardRecycleInfo::default_instance_,
      TRewardRecycleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardRecycleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardRecycleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRewardRecycleInfo));
  TRewardRecycleGetRecycleInfoArrRsp_descriptor_ = file->message_type(1);
  static const int TRewardRecycleGetRecycleInfoArrRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardRecycleGetRecycleInfoArrRsp, recycleinfoarr_),
  };
  TRewardRecycleGetRecycleInfoArrRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRewardRecycleGetRecycleInfoArrRsp_descriptor_,
      TRewardRecycleGetRecycleInfoArrRsp::default_instance_,
      TRewardRecycleGetRecycleInfoArrRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardRecycleGetRecycleInfoArrRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardRecycleGetRecycleInfoArrRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRewardRecycleGetRecycleInfoArrRsp));
  TRewardRecycleDoRecycleReq_descriptor_ = file->message_type(2);
  static const int TRewardRecycleDoRecycleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardRecycleDoRecycleReq, recycleid_),
  };
  TRewardRecycleDoRecycleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRewardRecycleDoRecycleReq_descriptor_,
      TRewardRecycleDoRecycleReq::default_instance_,
      TRewardRecycleDoRecycleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardRecycleDoRecycleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardRecycleDoRecycleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRewardRecycleDoRecycleReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fRewardRecycle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRewardRecycleInfo_descriptor_, &TRewardRecycleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRewardRecycleGetRecycleInfoArrRsp_descriptor_, &TRewardRecycleGetRecycleInfoArrRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRewardRecycleDoRecycleReq_descriptor_, &TRewardRecycleDoRecycleReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fRewardRecycle_2eproto() {
  delete TRewardRecycleInfo::default_instance_;
  delete TRewardRecycleInfo_reflection_;
  delete TRewardRecycleGetRecycleInfoArrRsp::default_instance_;
  delete TRewardRecycleGetRecycleInfoArrRsp_reflection_;
  delete TRewardRecycleDoRecycleReq::default_instance_;
  delete TRewardRecycleDoRecycleReq_reflection_;
}

void protobuf_AddDesc_net_2fRewardRecycle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027net/RewardRecycle.proto\022\002pb\032\026net/Commo"
    "nReward.proto\"x\n\022TRewardRecycleInfo\022\021\n\tR"
    "ecycleId\030\001 \002(\r\022$\n\tRewardArr\030\002 \003(\0132\021.pb.T"
    "CommonReward\022\023\n\013RecycleTime\030\003 \002(\004\022\024\n\014Rec"
    "ycleRound\030\004 \002(\r\"T\n\"TRewardRecycleGetRecy"
    "cleInfoArrRsp\022.\n\016RecycleInfoArr\030\001 \003(\0132\026."
    "pb.TRewardRecycleInfo\"/\n\032TRewardRecycleD"
    "oRecycleReq\022\021\n\tRecycleId\030\001 \002(\r", 310);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/RewardRecycle.proto", &protobuf_RegisterTypes);
  TRewardRecycleInfo::default_instance_ = new TRewardRecycleInfo();
  TRewardRecycleGetRecycleInfoArrRsp::default_instance_ = new TRewardRecycleGetRecycleInfoArrRsp();
  TRewardRecycleDoRecycleReq::default_instance_ = new TRewardRecycleDoRecycleReq();
  TRewardRecycleInfo::default_instance_->InitAsDefaultInstance();
  TRewardRecycleGetRecycleInfoArrRsp::default_instance_->InitAsDefaultInstance();
  TRewardRecycleDoRecycleReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fRewardRecycle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fRewardRecycle_2eproto {
  StaticDescriptorInitializer_net_2fRewardRecycle_2eproto() {
    protobuf_AddDesc_net_2fRewardRecycle_2eproto();
  }
} static_descriptor_initializer_net_2fRewardRecycle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TRewardRecycleInfo::kRecycleIdFieldNumber;
const int TRewardRecycleInfo::kRewardArrFieldNumber;
const int TRewardRecycleInfo::kRecycleTimeFieldNumber;
const int TRewardRecycleInfo::kRecycleRoundFieldNumber;
#endif  // !_MSC_VER

TRewardRecycleInfo::TRewardRecycleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRewardRecycleInfo)
}

void TRewardRecycleInfo::InitAsDefaultInstance() {
}

TRewardRecycleInfo::TRewardRecycleInfo(const TRewardRecycleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRewardRecycleInfo)
}

void TRewardRecycleInfo::SharedCtor() {
  _cached_size_ = 0;
  recycleid_ = 0u;
  recycletime_ = GOOGLE_ULONGLONG(0);
  recycleround_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRewardRecycleInfo::~TRewardRecycleInfo() {
  // @@protoc_insertion_point(destructor:pb.TRewardRecycleInfo)
  SharedDtor();
}

void TRewardRecycleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRewardRecycleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRewardRecycleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRewardRecycleInfo_descriptor_;
}

const TRewardRecycleInfo& TRewardRecycleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRewardRecycle_2eproto();
  return *default_instance_;
}

TRewardRecycleInfo* TRewardRecycleInfo::default_instance_ = NULL;

TRewardRecycleInfo* TRewardRecycleInfo::New() const {
  return new TRewardRecycleInfo;
}

void TRewardRecycleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRewardRecycleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(recycleid_, recycletime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRewardRecycleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRewardRecycleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RecycleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recycleid_)));
          set_has_recycleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        if (input->ExpectTag(24)) goto parse_RecycleTime;
        break;
      }

      // required uint64 RecycleTime = 3;
      case 3: {
        if (tag == 24) {
         parse_RecycleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recycletime_)));
          set_has_recycletime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RecycleRound;
        break;
      }

      // required uint32 RecycleRound = 4;
      case 4: {
        if (tag == 32) {
         parse_RecycleRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recycleround_)));
          set_has_recycleround();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRewardRecycleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRewardRecycleInfo)
  return false;
#undef DO_
}

void TRewardRecycleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRewardRecycleInfo)
  // required uint32 RecycleId = 1;
  if (has_recycleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recycleid(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardarr(i), output);
  }

  // required uint64 RecycleTime = 3;
  if (has_recycletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->recycletime(), output);
  }

  // required uint32 RecycleRound = 4;
  if (has_recycleround()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->recycleround(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRewardRecycleInfo)
}

::google::protobuf::uint8* TRewardRecycleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRewardRecycleInfo)
  // required uint32 RecycleId = 1;
  if (has_recycleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recycleid(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardarr(i), target);
  }

  // required uint64 RecycleTime = 3;
  if (has_recycletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->recycletime(), target);
  }

  // required uint32 RecycleRound = 4;
  if (has_recycleround()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->recycleround(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRewardRecycleInfo)
  return target;
}

int TRewardRecycleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RecycleId = 1;
    if (has_recycleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recycleid());
    }

    // required uint64 RecycleTime = 3;
    if (has_recycletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recycletime());
    }

    // required uint32 RecycleRound = 4;
    if (has_recycleround()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recycleround());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 2;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRewardRecycleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRewardRecycleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRewardRecycleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRewardRecycleInfo::MergeFrom(const TRewardRecycleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recycleid()) {
      set_recycleid(from.recycleid());
    }
    if (from.has_recycletime()) {
      set_recycletime(from.recycletime());
    }
    if (from.has_recycleround()) {
      set_recycleround(from.recycleround());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRewardRecycleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRewardRecycleInfo::CopyFrom(const TRewardRecycleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRewardRecycleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void TRewardRecycleInfo::Swap(TRewardRecycleInfo* other) {
  if (other != this) {
    std::swap(recycleid_, other->recycleid_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(recycletime_, other->recycletime_);
    std::swap(recycleround_, other->recycleround_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRewardRecycleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRewardRecycleInfo_descriptor_;
  metadata.reflection = TRewardRecycleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRewardRecycleGetRecycleInfoArrRsp::kRecycleInfoArrFieldNumber;
#endif  // !_MSC_VER

TRewardRecycleGetRecycleInfoArrRsp::TRewardRecycleGetRecycleInfoArrRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRewardRecycleGetRecycleInfoArrRsp)
}

void TRewardRecycleGetRecycleInfoArrRsp::InitAsDefaultInstance() {
}

TRewardRecycleGetRecycleInfoArrRsp::TRewardRecycleGetRecycleInfoArrRsp(const TRewardRecycleGetRecycleInfoArrRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRewardRecycleGetRecycleInfoArrRsp)
}

void TRewardRecycleGetRecycleInfoArrRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRewardRecycleGetRecycleInfoArrRsp::~TRewardRecycleGetRecycleInfoArrRsp() {
  // @@protoc_insertion_point(destructor:pb.TRewardRecycleGetRecycleInfoArrRsp)
  SharedDtor();
}

void TRewardRecycleGetRecycleInfoArrRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRewardRecycleGetRecycleInfoArrRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRewardRecycleGetRecycleInfoArrRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRewardRecycleGetRecycleInfoArrRsp_descriptor_;
}

const TRewardRecycleGetRecycleInfoArrRsp& TRewardRecycleGetRecycleInfoArrRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRewardRecycle_2eproto();
  return *default_instance_;
}

TRewardRecycleGetRecycleInfoArrRsp* TRewardRecycleGetRecycleInfoArrRsp::default_instance_ = NULL;

TRewardRecycleGetRecycleInfoArrRsp* TRewardRecycleGetRecycleInfoArrRsp::New() const {
  return new TRewardRecycleGetRecycleInfoArrRsp;
}

void TRewardRecycleGetRecycleInfoArrRsp::Clear() {
  recycleinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRewardRecycleGetRecycleInfoArrRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRewardRecycleGetRecycleInfoArrRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TRewardRecycleInfo RecycleInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RecycleInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recycleinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RecycleInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRewardRecycleGetRecycleInfoArrRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRewardRecycleGetRecycleInfoArrRsp)
  return false;
#undef DO_
}

void TRewardRecycleGetRecycleInfoArrRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRewardRecycleGetRecycleInfoArrRsp)
  // repeated .pb.TRewardRecycleInfo RecycleInfoArr = 1;
  for (int i = 0; i < this->recycleinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recycleinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRewardRecycleGetRecycleInfoArrRsp)
}

::google::protobuf::uint8* TRewardRecycleGetRecycleInfoArrRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRewardRecycleGetRecycleInfoArrRsp)
  // repeated .pb.TRewardRecycleInfo RecycleInfoArr = 1;
  for (int i = 0; i < this->recycleinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recycleinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRewardRecycleGetRecycleInfoArrRsp)
  return target;
}

int TRewardRecycleGetRecycleInfoArrRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TRewardRecycleInfo RecycleInfoArr = 1;
  total_size += 1 * this->recycleinfoarr_size();
  for (int i = 0; i < this->recycleinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recycleinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRewardRecycleGetRecycleInfoArrRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRewardRecycleGetRecycleInfoArrRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRewardRecycleGetRecycleInfoArrRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRewardRecycleGetRecycleInfoArrRsp::MergeFrom(const TRewardRecycleGetRecycleInfoArrRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recycleinfoarr_.MergeFrom(from.recycleinfoarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRewardRecycleGetRecycleInfoArrRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRewardRecycleGetRecycleInfoArrRsp::CopyFrom(const TRewardRecycleGetRecycleInfoArrRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRewardRecycleGetRecycleInfoArrRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->recycleinfoarr())) return false;
  return true;
}

void TRewardRecycleGetRecycleInfoArrRsp::Swap(TRewardRecycleGetRecycleInfoArrRsp* other) {
  if (other != this) {
    recycleinfoarr_.Swap(&other->recycleinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRewardRecycleGetRecycleInfoArrRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRewardRecycleGetRecycleInfoArrRsp_descriptor_;
  metadata.reflection = TRewardRecycleGetRecycleInfoArrRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRewardRecycleDoRecycleReq::kRecycleIdFieldNumber;
#endif  // !_MSC_VER

TRewardRecycleDoRecycleReq::TRewardRecycleDoRecycleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRewardRecycleDoRecycleReq)
}

void TRewardRecycleDoRecycleReq::InitAsDefaultInstance() {
}

TRewardRecycleDoRecycleReq::TRewardRecycleDoRecycleReq(const TRewardRecycleDoRecycleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRewardRecycleDoRecycleReq)
}

void TRewardRecycleDoRecycleReq::SharedCtor() {
  _cached_size_ = 0;
  recycleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRewardRecycleDoRecycleReq::~TRewardRecycleDoRecycleReq() {
  // @@protoc_insertion_point(destructor:pb.TRewardRecycleDoRecycleReq)
  SharedDtor();
}

void TRewardRecycleDoRecycleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRewardRecycleDoRecycleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRewardRecycleDoRecycleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRewardRecycleDoRecycleReq_descriptor_;
}

const TRewardRecycleDoRecycleReq& TRewardRecycleDoRecycleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRewardRecycle_2eproto();
  return *default_instance_;
}

TRewardRecycleDoRecycleReq* TRewardRecycleDoRecycleReq::default_instance_ = NULL;

TRewardRecycleDoRecycleReq* TRewardRecycleDoRecycleReq::New() const {
  return new TRewardRecycleDoRecycleReq;
}

void TRewardRecycleDoRecycleReq::Clear() {
  recycleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRewardRecycleDoRecycleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRewardRecycleDoRecycleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RecycleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recycleid_)));
          set_has_recycleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRewardRecycleDoRecycleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRewardRecycleDoRecycleReq)
  return false;
#undef DO_
}

void TRewardRecycleDoRecycleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRewardRecycleDoRecycleReq)
  // required uint32 RecycleId = 1;
  if (has_recycleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recycleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRewardRecycleDoRecycleReq)
}

::google::protobuf::uint8* TRewardRecycleDoRecycleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRewardRecycleDoRecycleReq)
  // required uint32 RecycleId = 1;
  if (has_recycleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recycleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRewardRecycleDoRecycleReq)
  return target;
}

int TRewardRecycleDoRecycleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RecycleId = 1;
    if (has_recycleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recycleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRewardRecycleDoRecycleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRewardRecycleDoRecycleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRewardRecycleDoRecycleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRewardRecycleDoRecycleReq::MergeFrom(const TRewardRecycleDoRecycleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recycleid()) {
      set_recycleid(from.recycleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRewardRecycleDoRecycleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRewardRecycleDoRecycleReq::CopyFrom(const TRewardRecycleDoRecycleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRewardRecycleDoRecycleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TRewardRecycleDoRecycleReq::Swap(TRewardRecycleDoRecycleReq* other) {
  if (other != this) {
    std::swap(recycleid_, other->recycleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRewardRecycleDoRecycleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRewardRecycleDoRecycleReq_descriptor_;
  metadata.reflection = TRewardRecycleDoRecycleReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
