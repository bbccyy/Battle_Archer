// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/BuffData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/BuffData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* SpecialHitModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecialHitModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModAbsorbDamageConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModAbsorbDamageConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModNonTargettableConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModNonTargettableConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModNonHostileTargettableConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModNonHostileTargettableConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModReflectDamageConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModReflectDamageConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModReflectSkillConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModReflectSkillConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModBuffImmunityConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModBuffImmunityConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModSkillImmunityConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModSkillImmunityConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModHitActionImmunityConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModHitActionImmunityConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModDispelConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModDispelConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModStealHpConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModStealHpConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModDamageShareConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModDamageShareConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModDamageCopyConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModDamageCopyConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModHealCopyConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModHealCopyConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModHpConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModHpConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModRageConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModRageConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModRecordDataConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModRecordDataConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModHarmOnMoveConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModHarmOnMoveConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModDamageImmunityConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModDamageImmunityConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fBuffData_2eproto() {
  protobuf_AddDesc_module_2fBuffData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/BuffData.proto");
  GOOGLE_CHECK(file != NULL);
  SpecialHitModel_descriptor_ = file->message_type(0);
  static const int SpecialHitModel_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialHitModel, hittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialHitModel, bufftype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialHitModel, bufflist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialHitModel, adjustscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialHitModel, bufflasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialHitModel, buffeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialHitModel, buffhitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialHitModel, updateeffect_),
  };
  SpecialHitModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecialHitModel_descriptor_,
      SpecialHitModel::default_instance_,
      SpecialHitModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialHitModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialHitModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecialHitModel));
  BuffModAbsorbDamageConfig_descriptor_ = file->message_type(1);
  static const int BuffModAbsorbDamageConfig_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAbsorbDamageConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAbsorbDamageConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAbsorbDamageConfig, valueparma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAbsorbDamageConfig, valuegrowth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAbsorbDamageConfig, iscureself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAbsorbDamageConfig, percentparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAbsorbDamageConfig, percentgrowth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAbsorbDamageConfig, absorbcalculatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAbsorbDamageConfig, attributeoriginal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAbsorbDamageConfig, attributetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAbsorbDamageConfig, attributepercenteparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAbsorbDamageConfig, attributepercentegrowth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAbsorbDamageConfig, absorbtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAbsorbDamageConfig, absorbcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAbsorbDamageConfig, threshold_),
  };
  BuffModAbsorbDamageConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModAbsorbDamageConfig_descriptor_,
      BuffModAbsorbDamageConfig::default_instance_,
      BuffModAbsorbDamageConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAbsorbDamageConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAbsorbDamageConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModAbsorbDamageConfig));
  BuffModNonTargettableConfig_descriptor_ = file->message_type(2);
  static const int BuffModNonTargettableConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNonTargettableConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNonTargettableConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNonTargettableConfig, whitelist_),
  };
  BuffModNonTargettableConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModNonTargettableConfig_descriptor_,
      BuffModNonTargettableConfig::default_instance_,
      BuffModNonTargettableConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNonTargettableConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNonTargettableConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModNonTargettableConfig));
  BuffModNonHostileTargettableConfig_descriptor_ = file->message_type(3);
  static const int BuffModNonHostileTargettableConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNonHostileTargettableConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNonHostileTargettableConfig, delaytime_),
  };
  BuffModNonHostileTargettableConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModNonHostileTargettableConfig_descriptor_,
      BuffModNonHostileTargettableConfig::default_instance_,
      BuffModNonHostileTargettableConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNonHostileTargettableConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNonHostileTargettableConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModNonHostileTargettableConfig));
  BuffModReflectDamageConfig_descriptor_ = file->message_type(4);
  static const int BuffModReflectDamageConfig_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModReflectDamageConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModReflectDamageConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModReflectDamageConfig, reboundtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModReflectDamageConfig, rebounddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModReflectDamageConfig, reboundcalculatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModReflectDamageConfig, attributeoriginal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModReflectDamageConfig, attributetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModReflectDamageConfig, attributepercenteparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModReflectDamageConfig, attributepercentegrowth_),
  };
  BuffModReflectDamageConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModReflectDamageConfig_descriptor_,
      BuffModReflectDamageConfig::default_instance_,
      BuffModReflectDamageConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModReflectDamageConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModReflectDamageConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModReflectDamageConfig));
  BuffModReflectSkillConfig_descriptor_ = file->message_type(5);
  static const int BuffModReflectSkillConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModReflectSkillConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModReflectSkillConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModReflectSkillConfig, reboundcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModReflectSkillConfig, reboundtype_),
  };
  BuffModReflectSkillConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModReflectSkillConfig_descriptor_,
      BuffModReflectSkillConfig::default_instance_,
      BuffModReflectSkillConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModReflectSkillConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModReflectSkillConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModReflectSkillConfig));
  BuffModBuffImmunityConfig_descriptor_ = file->message_type(6);
  static const int BuffModBuffImmunityConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModBuffImmunityConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModBuffImmunityConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModBuffImmunityConfig, purgetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModBuffImmunityConfig, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModBuffImmunityConfig, showhint_),
  };
  BuffModBuffImmunityConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModBuffImmunityConfig_descriptor_,
      BuffModBuffImmunityConfig::default_instance_,
      BuffModBuffImmunityConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModBuffImmunityConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModBuffImmunityConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModBuffImmunityConfig));
  BuffModSkillImmunityConfig_descriptor_ = file->message_type(7);
  static const int BuffModSkillImmunityConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModSkillImmunityConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModSkillImmunityConfig, showhint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModSkillImmunityConfig, immunetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModSkillImmunityConfig, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModSkillImmunityConfig, delaytime_),
  };
  BuffModSkillImmunityConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModSkillImmunityConfig_descriptor_,
      BuffModSkillImmunityConfig::default_instance_,
      BuffModSkillImmunityConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModSkillImmunityConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModSkillImmunityConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModSkillImmunityConfig));
  BuffModHitActionImmunityConfig_descriptor_ = file->message_type(8);
  static const int BuffModHitActionImmunityConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHitActionImmunityConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHitActionImmunityConfig, delaytime_),
  };
  BuffModHitActionImmunityConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModHitActionImmunityConfig_descriptor_,
      BuffModHitActionImmunityConfig::default_instance_,
      BuffModHitActionImmunityConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHitActionImmunityConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHitActionImmunityConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModHitActionImmunityConfig));
  BuffModDispelConfig_descriptor_ = file->message_type(9);
  static const int BuffModDispelConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDispelConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDispelConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDispelConfig, cleantype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDispelConfig, bufflist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDispelConfig, ispartof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDispelConfig, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDispelConfig, cleanlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDispelConfig, isonnum_),
  };
  BuffModDispelConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModDispelConfig_descriptor_,
      BuffModDispelConfig::default_instance_,
      BuffModDispelConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDispelConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDispelConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModDispelConfig));
  BuffModStealHpConfig_descriptor_ = file->message_type(10);
  static const int BuffModStealHpConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModStealHpConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModStealHpConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModStealHpConfig, steallifetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModStealHpConfig, steallifedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModStealHpConfig, stealmoment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModStealHpConfig, buffsubtypefilter_),
  };
  BuffModStealHpConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModStealHpConfig_descriptor_,
      BuffModStealHpConfig::default_instance_,
      BuffModStealHpConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModStealHpConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModStealHpConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModStealHpConfig));
  BuffModDamageShareConfig_descriptor_ = file->message_type(11);
  static const int BuffModDamageShareConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDamageShareConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDamageShareConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDamageShareConfig, percentparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDamageShareConfig, percentgrowth_),
  };
  BuffModDamageShareConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModDamageShareConfig_descriptor_,
      BuffModDamageShareConfig::default_instance_,
      BuffModDamageShareConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDamageShareConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDamageShareConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModDamageShareConfig));
  BuffModDamageCopyConfig_descriptor_ = file->message_type(12);
  static const int BuffModDamageCopyConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDamageCopyConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDamageCopyConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDamageCopyConfig, percentparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDamageCopyConfig, percentgrowth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDamageCopyConfig, ignoreself_),
  };
  BuffModDamageCopyConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModDamageCopyConfig_descriptor_,
      BuffModDamageCopyConfig::default_instance_,
      BuffModDamageCopyConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDamageCopyConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDamageCopyConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModDamageCopyConfig));
  BuffModHealCopyConfig_descriptor_ = file->message_type(13);
  static const int BuffModHealCopyConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHealCopyConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHealCopyConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHealCopyConfig, percentparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHealCopyConfig, percentgrowth_),
  };
  BuffModHealCopyConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModHealCopyConfig_descriptor_,
      BuffModHealCopyConfig::default_instance_,
      BuffModHealCopyConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHealCopyConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHealCopyConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModHealCopyConfig));
  BuffModHpConfig_descriptor_ = file->message_type(14);
  static const int BuffModHpConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHpConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHpConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHpConfig, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHpConfig, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHpConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHpConfig, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHpConfig, percentgrowth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHpConfig, valuegrowth_),
  };
  BuffModHpConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModHpConfig_descriptor_,
      BuffModHpConfig::default_instance_,
      BuffModHpConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHpConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHpConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModHpConfig));
  BuffModRageConfig_descriptor_ = file->message_type(15);
  static const int BuffModRageConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRageConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRageConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRageConfig, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRageConfig, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRageConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRageConfig, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRageConfig, percentgrowth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRageConfig, valuegrowth_),
  };
  BuffModRageConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModRageConfig_descriptor_,
      BuffModRageConfig::default_instance_,
      BuffModRageConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRageConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRageConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModRageConfig));
  BuffModRecordDataConfig_descriptor_ = file->message_type(16);
  static const int BuffModRecordDataConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRecordDataConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRecordDataConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRecordDataConfig, typemajor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRecordDataConfig, triggerbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRecordDataConfig, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRecordDataConfig, typesub_),
  };
  BuffModRecordDataConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModRecordDataConfig_descriptor_,
      BuffModRecordDataConfig::default_instance_,
      BuffModRecordDataConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRecordDataConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRecordDataConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModRecordDataConfig));
  BuffModHarmOnMoveConfig_descriptor_ = file->message_type(17);
  static const int BuffModHarmOnMoveConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHarmOnMoveConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHarmOnMoveConfig, skillid_),
  };
  BuffModHarmOnMoveConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModHarmOnMoveConfig_descriptor_,
      BuffModHarmOnMoveConfig::default_instance_,
      BuffModHarmOnMoveConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHarmOnMoveConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModHarmOnMoveConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModHarmOnMoveConfig));
  BuffModDamageImmunityConfig_descriptor_ = file->message_type(18);
  static const int BuffModDamageImmunityConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDamageImmunityConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDamageImmunityConfig, type_),
  };
  BuffModDamageImmunityConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModDamageImmunityConfig_descriptor_,
      BuffModDamageImmunityConfig::default_instance_,
      BuffModDamageImmunityConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDamageImmunityConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDamageImmunityConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModDamageImmunityConfig));
  BuffData_descriptor_ = file->message_type(19);
  static const int BuffData_offsets_[83] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, basedatamodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, specialhitmodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodhpconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodreflectdamageconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodreflectskillconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodbuffimmunityconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodpropertyconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodattackspeedconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodrageconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodabsorbdamageconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodnonhostiletargettableconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodnontargettableconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmoddamageshareconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodhealcopyconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodstealhpconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodskillimmunityconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodtoughnessconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmoddispelconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmoddamageimmunityconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodhitactionimmunityconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodarmattraddconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodskillonlowlifeconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodmovecontrolimmunityconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodconditionchangeconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodpropertydecconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodchangedmgbybuffsubconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodshrinkcontroldurationconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodunlimitedshieldconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodreflectbuffconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodfataldmgshiftconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodrageimmunityconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodignoreshieldconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodrevertstateonendconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodchangecastrangeconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodsetmaxlosehpconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodadjustreflecteddamageconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodactiveuieffectconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodadjustbuffhitrateconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodlimitbymaxhprateconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodbattlearchermodifyconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodnomoveconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodnonormalskillconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodnoskillconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmoddizzinessconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodfreezeconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodcharmedconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodchaosconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodrandommoveconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmoddamagecopyconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodtauntconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodnoragerecoverconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmoddisableconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodharmonmoveconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodfearconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodnosuckbloodconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodnoreviveconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodtransformationconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodnothingconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodtransformscaleconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmoddieconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodrepeatskillconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodskillonendconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodspecifyskilltidconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodresetbufftimeconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodaddskillconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodpropertyformulaconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodeffectinrangeconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodrecorddataconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodskillonendbconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodhidesomeappearanceconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodinheritexistbuffstackconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodscaletextconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodadddefpointconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodremovedefpointconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodeffectinrangeconditionconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodchangedirconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodtdmoniterdefenderstateconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodtdnobeanconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodtdrepeatsendbeanconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodtdrepeatcheckbeanconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodbuffonstackconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buffmodchangesummonedaiconfig_),
  };
  BuffData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffData_descriptor_,
      BuffData::default_instance_,
      BuffData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fBuffData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecialHitModel_descriptor_, &SpecialHitModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModAbsorbDamageConfig_descriptor_, &BuffModAbsorbDamageConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModNonTargettableConfig_descriptor_, &BuffModNonTargettableConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModNonHostileTargettableConfig_descriptor_, &BuffModNonHostileTargettableConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModReflectDamageConfig_descriptor_, &BuffModReflectDamageConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModReflectSkillConfig_descriptor_, &BuffModReflectSkillConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModBuffImmunityConfig_descriptor_, &BuffModBuffImmunityConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModSkillImmunityConfig_descriptor_, &BuffModSkillImmunityConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModHitActionImmunityConfig_descriptor_, &BuffModHitActionImmunityConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModDispelConfig_descriptor_, &BuffModDispelConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModStealHpConfig_descriptor_, &BuffModStealHpConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModDamageShareConfig_descriptor_, &BuffModDamageShareConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModDamageCopyConfig_descriptor_, &BuffModDamageCopyConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModHealCopyConfig_descriptor_, &BuffModHealCopyConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModHpConfig_descriptor_, &BuffModHpConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModRageConfig_descriptor_, &BuffModRageConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModRecordDataConfig_descriptor_, &BuffModRecordDataConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModHarmOnMoveConfig_descriptor_, &BuffModHarmOnMoveConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModDamageImmunityConfig_descriptor_, &BuffModDamageImmunityConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffData_descriptor_, &BuffData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fBuffData_2eproto() {
  delete SpecialHitModel::default_instance_;
  delete SpecialHitModel_reflection_;
  delete BuffModAbsorbDamageConfig::default_instance_;
  delete BuffModAbsorbDamageConfig_reflection_;
  delete BuffModNonTargettableConfig::default_instance_;
  delete BuffModNonTargettableConfig_reflection_;
  delete BuffModNonHostileTargettableConfig::default_instance_;
  delete BuffModNonHostileTargettableConfig_reflection_;
  delete BuffModReflectDamageConfig::default_instance_;
  delete BuffModReflectDamageConfig_reflection_;
  delete BuffModReflectSkillConfig::default_instance_;
  delete BuffModReflectSkillConfig_reflection_;
  delete BuffModBuffImmunityConfig::default_instance_;
  delete BuffModBuffImmunityConfig_reflection_;
  delete BuffModSkillImmunityConfig::default_instance_;
  delete BuffModSkillImmunityConfig_reflection_;
  delete BuffModHitActionImmunityConfig::default_instance_;
  delete BuffModHitActionImmunityConfig_reflection_;
  delete BuffModDispelConfig::default_instance_;
  delete BuffModDispelConfig_reflection_;
  delete BuffModStealHpConfig::default_instance_;
  delete BuffModStealHpConfig_reflection_;
  delete BuffModDamageShareConfig::default_instance_;
  delete BuffModDamageShareConfig_reflection_;
  delete BuffModDamageCopyConfig::default_instance_;
  delete BuffModDamageCopyConfig_reflection_;
  delete BuffModHealCopyConfig::default_instance_;
  delete BuffModHealCopyConfig_reflection_;
  delete BuffModHpConfig::default_instance_;
  delete BuffModHpConfig_reflection_;
  delete BuffModRageConfig::default_instance_;
  delete BuffModRageConfig_reflection_;
  delete BuffModRecordDataConfig::default_instance_;
  delete BuffModRecordDataConfig_reflection_;
  delete BuffModHarmOnMoveConfig::default_instance_;
  delete BuffModHarmOnMoveConfig_reflection_;
  delete BuffModDamageImmunityConfig::default_instance_;
  delete BuffModDamageImmunityConfig_reflection_;
  delete BuffData::default_instance_;
  delete BuffData_reflection_;
}

void protobuf_AddDesc_module_2fBuffData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  ::pb::protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025module/BuffData.proto\022\002pb\032\031module/Buff"
    "DataBase.proto\032\032module/BuffDataBase2.pro"
    "to\"\260\001\n\017SpecialHitModel\022\017\n\007HitType\030\001 \001(\005\022"
    "\020\n\010BuffType\030\002 \001(\005\022\020\n\010BuffList\030\003 \003(\005\022\023\n\013A"
    "djustScale\030\004 \001(\010\022\024\n\014BuffLastTime\030\005 \003(\005\022\022"
    "\n\nBuffEffect\030\006 \003(\005\022\023\n\013BuffHitRate\030\007 \003(\005\022"
    "\024\n\014UpdateEffect\030\010 \001(\010\"\364\002\n\031BuffModAbsorbD"
    "amageConfig\022\016\n\006Active\030\001 \001(\010\022\021\n\tDelayTime"
    "\030\002 \001(\005\022\022\n\nValueParma\030\003 \001(\005\022\023\n\013ValueGrowt"
    "h\030\004 \001(\005\022\022\n\nIsCureSelf\030\005 \001(\005\022\024\n\014PercentPa"
    "ram\030\006 \001(\005\022\025\n\rPercentGrowth\030\007 \001(\005\022\033\n\023Abso"
    "rbCalculateType\030\010 \001(\005\022\031\n\021AttributeOrigin"
    "al\030\t \001(\005\022\025\n\rAttributeType\030\n \001(\005\022\036\n\026Attri"
    "butePercenteParam\030\013 \001(\005\022\037\n\027AttributePerc"
    "enteGrowth\030\014 \001(\005\022\022\n\nAbsorbType\030\r \001(\005\022\023\n\013"
    "AbsorbCount\030\016 \001(\005\022\021\n\tThreshold\030\017 \001(\005\"S\n\033"
    "BuffModNonTargettableConfig\022\016\n\006Active\030\001 "
    "\001(\010\022\021\n\tDelayTime\030\002 \001(\005\022\021\n\tWhiteList\030\003 \003("
    "\005\"G\n\"BuffModNonHostileTargettableConfig\022"
    "\016\n\006Active\030\001 \001(\010\022\021\n\tDelayTime\030\002 \001(\005\"\215\002\n\032B"
    "uffModReflectDamageConfig\022\016\n\006Active\030\001 \001("
    "\010\022\021\n\tDelayTime\030\002 \001(\005\022\023\n\013ReboundType\030\003 \001("
    "\005\022&\n\013ReboundData\030\004 \001(\0132\021.pb.BuffDataMode"
    "l\022\034\n\024ReboundCalculateType\030\005 \001(\005\022\031\n\021Attri"
    "buteOriginal\030\006 \001(\005\022\025\n\rAttributeType\030\007 \001("
    "\005\022\036\n\026AttributePercenteParam\030\010 \001(\005\022\037\n\027Att"
    "ributePercenteGrowth\030\t \001(\005\"i\n\031BuffModRef"
    "lectSkillConfig\022\016\n\006Active\030\001 \001(\010\022\021\n\tDelay"
    "Time\030\002 \001(\005\022\024\n\014ReboundCount\030\003 \001(\005\022\023\n\013Rebo"
    "undType\030\004 \001(\005\"q\n\031BuffModBuffImmunityConf"
    "ig\022\016\n\006Active\030\001 \001(\010\022\021\n\tDelayTime\030\002 \001(\005\022\021\n"
    "\tPurgeType\030\003 \001(\005\022\014\n\004Data\030\004 \003(\005\022\020\n\010ShowHi"
    "nt\030\005 \001(\010\"s\n\032BuffModSkillImmunityConfig\022\016"
    "\n\006Active\030\001 \001(\010\022\020\n\010ShowHint\030\002 \001(\010\022\022\n\nImmu"
    "neType\030\003 \001(\005\022\014\n\004Data\030\004 \003(\005\022\021\n\tDelayTime\030"
    "\005 \001(\005\"C\n\036BuffModHitActionImmunityConfig\022"
    "\016\n\006Active\030\001 \001(\010\022\021\n\tDelayTime\030\002 \001(\005\"\243\001\n\023B"
    "uffModDispelConfig\022\016\n\006Active\030\001 \001(\010\022\021\n\tDe"
    "layTime\030\002 \001(\005\022\021\n\tCleanType\030\003 \001(\005\022\020\n\010Buff"
    "List\030\004 \003(\005\022\020\n\010IsPartof\030\005 \001(\010\022\r\n\005Count\030\006 "
    "\001(\005\022\022\n\nCleanLevel\030\007 \001(\005\022\017\n\007IsOnNum\030\010 \001(\010"
    "\"\252\001\n\024BuffModStealHpConfig\022\016\n\006Active\030\001 \001("
    "\010\022\021\n\tDelayTime\030\002 \001(\005\022\025\n\rStealLifeType\030\003 "
    "\001(\005\022(\n\rStealLifeData\030\004 \001(\0132\021.pb.BuffData"
    "Model\022\023\n\013StealMoment\030\005 \001(\005\022\031\n\021BuffSubTyp"
    "eFilter\030\006 \003(\005\"j\n\030BuffModDamageShareConfi"
    "g\022\016\n\006Active\030\001 \001(\010\022\021\n\tDelayTime\030\002 \001(\005\022\024\n\014"
    "PercentParam\030\003 \001(\005\022\025\n\rPercentGrowth\030\004 \001("
    "\005\"}\n\027BuffModDamageCopyConfig\022\016\n\006Active\030\001"
    " \001(\010\022\021\n\tDelayTime\030\002 \001(\005\022\024\n\014PercentParam\030"
    "\003 \001(\005\022\025\n\rPercentGrowth\030\004 \001(\005\022\022\n\nIgnoreSe"
    "lf\030\005 \001(\010\"g\n\025BuffModHealCopyConfig\022\016\n\006Act"
    "ive\030\001 \001(\010\022\021\n\tDelayTime\030\002 \001(\005\022\024\n\014PercentP"
    "aram\030\003 \001(\005\022\025\n\rPercentGrowth\030\004 \001(\005\"\261\001\n\017Bu"
    "ffModHpConfig\022\016\n\006Active\030\001 \001(\010\022\021\n\tDelayTi"
    "me\030\002 \001(\005\022\r\n\005Count\030\003 \001(\005\022\020\n\010Interval\030\004 \001("
    "\005\022\014\n\004Type\030\005 \001(\005\022 \n\004Data\030\007 \001(\0132\022.pb.BuffD"
    "atasModel\022\025\n\rPercentGrowth\030\010 \001(\005\022\023\n\013Valu"
    "eGrowth\030\t \001(\005\"\263\001\n\021BuffModRageConfig\022\016\n\006A"
    "ctive\030\001 \001(\010\022\021\n\tDelayTime\030\002 \001(\005\022\r\n\005Count\030"
    "\003 \001(\005\022\020\n\010Interval\030\004 \001(\005\022\014\n\004Type\030\005 \001(\005\022 \n"
    "\004Data\030\006 \001(\0132\022.pb.BuffDatasModel\022\025\n\rPerce"
    "ntGrowth\030\007 \001(\005\022\023\n\013ValueGrowth\030\010 \001(\005\"\207\001\n\027"
    "BuffModRecordDataConfig\022\016\n\006Active\030\001 \001(\010\022"
    "\021\n\tDelayTime\030\002 \001(\005\022\021\n\tTypeMajor\030\003 \001(\005\022\023\n"
    "\013TriggerBody\030\004 \001(\005\022\020\n\010DataType\030\005 \001(\005\022\017\n\007"
    "TypeSub\030\006 \001(\005\":\n\027BuffModHarmOnMoveConfig"
    "\022\016\n\006Active\030\001 \001(\010\022\017\n\007SkillId\030\002 \001(\005\";\n\033Buf"
    "fModDamageImmunityConfig\022\016\n\006Active\030\001 \001(\010"
    "\022\014\n\004Type\030\002 \001(\005\"\227*\n\010BuffData\022\n\n\002Id\030\001 \001(\005\022"
    ",\n\rBaseDataModel\030\002 \001(\0132\025.pb.BuffBaseData"
    "Model\022,\n\017SpecialHitModel\030\003 \001(\0132\023.pb.Spec"
    "ialHitModel\022,\n\017BuffModHpConfig\030\033 \001(\0132\023.p"
    "b.BuffModHpConfig\022B\n\032BuffModReflectDamag"
    "eConfig\030\021 \001(\0132\036.pb.BuffModReflectDamageC"
    "onfig\022@\n\031BuffModReflectSkillConfig\030\022 \001(\013"
    "2\035.pb.BuffModReflectSkillConfig\022@\n\031BuffM"
    "odBuffImmunityConfig\030\023 \001(\0132\035.pb.BuffModB"
    "uffImmunityConfig\0228\n\025BuffModPropertyConf"
    "ig\030$ \001(\0132\031.pb.BuffModPropertyConfig\022>\n\030B"
    "uffModAttackSpeedConfig\030\006 \001(\0132\034.pb.BuffM"
    "odAttackSpeedConfig\0220\n\021BuffModRageConfig"
    "\030\034 \001(\0132\025.pb.BuffModRageConfig\022@\n\031BuffMod"
    "AbsorbDamageConfig\030\016 \001(\0132\035.pb.BuffModAbs"
    "orbDamageConfig\022R\n\"BuffModNonHostileTarg"
    "ettableConfig\030% \001(\0132&.pb.BuffModNonHosti"
    "leTargettableConfig\022D\n\033BuffModNonTargett"
    "ableConfig\030\020 \001(\0132\037.pb.BuffModNonTargetta"
    "bleConfig\022>\n\030BuffModDamageShareConfig\030\030 "
    "\001(\0132\034.pb.BuffModDamageShareConfig\0228\n\025Buf"
    "fModHealCopyConfig\030\032 \001(\0132\031.pb.BuffModHea"
    "lCopyConfig\0226\n\024BuffModStealHpConfig\030\025 \001("
    "\0132\030.pb.BuffModStealHpConfig\022B\n\032BuffModSk"
    "illImmunityConfig\030\" \001(\0132\036.pb.BuffModSkil"
    "lImmunityConfig\022:\n\026BuffModToughnessConfi"
    "g\030# \001(\0132\032.pb.BuffModToughnessConfig\0224\n\023B"
    "uffModDispelConfig\030! \001(\0132\027.pb.BuffModDis"
    "pelConfig\022D\n\033BuffModDamageImmunityConfig"
    "\030) \001(\0132\037.pb.BuffModDamageImmunityConfig\022"
    "J\n\036BuffModHitActionImmunityConfig\030( \001(\0132"
    "\".pb.BuffModHitActionImmunityConfig\022<\n\027B"
    "uffModArmAttrAddConfig\030* \001(\0132\033.pb.BuffMo"
    "dArmAttrAddConfig\022D\n\033BuffModSkillOnLowLi"
    "feConfig\030+ \001(\0132\037.pb.BuffModSkillOnLowLif"
    "eConfig\022N\n BuffModMoveControlImmunityCon"
    "fig\0302 \001(\0132$.pb.BuffModMoveControlImmunit"
    "yConfig\022F\n\034BuffModConditionChangeConfig\030"
    "4 \001(\0132 .pb.BuffModConditionChangeConfig\022"
    ">\n\030BuffModPropertyDecConfig\0307 \001(\0132\034.pb.B"
    "uffModPropertyDecConfig\022L\n\037BuffModChange"
    "DmgByBuffSubConfig\0308 \001(\0132#.pb.BuffModCha"
    "ngeDmgByBuffSubConfig\022R\n\"BuffModShrinkCo"
    "ntrolDurationConfig\030> \001(\0132&.pb.BuffModSh"
    "rinkControlDurationConfig\022F\n\034BuffModUnli"
    "mitedShieldConfig\030@ \001(\0132 .pb.BuffModUnli"
    "mitedShieldConfig\022>\n\030BuffModReflectBuffC"
    "onfig\030A \001(\0132\034.pb.BuffModReflectBuffConfi"
    "g\022B\n\032BuffModFatalDmgShiftConfig\030B \001(\0132\036."
    "pb.BuffModFatalDmgShiftConfig\022@\n\031BuffMod"
    "RageImmunityConfig\030D \001(\0132\035.pb.BuffModRag"
    "eImmunityConfig\022@\n\031BuffModIgnoreShieldCo"
    "nfig\030J \001(\0132\035.pb.BuffModIgnoreShieldConfi"
    "g\022H\n\035BuffModRevertStateOnEndConfig\030M \001(\013"
    "2!.pb.BuffModRevertStateOnEndConfig\022F\n\034B"
    "uffModChangeCastRangeConfig\030N \001(\0132 .pb.B"
    "uffModChangeCastRangeConfig\022@\n\031BuffModSe"
    "tMaxLoseHPConfig\030Q \001(\0132\035.pb.BuffModSetMa"
    "xLoseHPConfig\022R\n\"BuffModAdjustReflectedD"
    "amageConfig\030R \001(\0132&.pb.BuffModAdjustRefl"
    "ectedDamageConfig\022D\n\033BuffModActiveUIEffe"
    "ctConfig\030S \001(\0132\037.pb.BuffModActiveUIEffec"
    "tConfig\022J\n\036BuffModAdjustBuffHitRateConfi"
    "g\030T \001(\0132\".pb.BuffModAdjustBuffHitRateCon"
    "fig\022H\n\035BuffModLimitByMaxHpRateConfig\030U \001"
    "(\0132!.pb.BuffModLimitByMaxHpRateConfig\022L\n"
    "\037BuffModBattleArcherModifyConfig\030V \001(\0132#"
    ".pb.BuffModBattleArcherModifyConfig\0224\n\023B"
    "uffModNoMoveConfig\030\007 \001(\0132\027.pb.BuffModNoM"
    "oveConfig\022B\n\032BuffModNoNormalSkillConfig\030"
    "\010 \001(\0132\036.pb.BuffModNoNormalSkillConfig\0226\n"
    "\024BuffModNoSkillConfig\030\t \001(\0132\030.pb.BuffMod"
    "NoSkillConfig\022:\n\026BuffModDizzinessConfig\030"
    "\n \001(\0132\032.pb.BuffModDizzinessConfig\0224\n\023Buf"
    "fModFreezeConfig\030\013 \001(\0132\027.pb.BuffModFreez"
    "eConfig\0226\n\024BuffModCharmedConfig\030\037 \001(\0132\030."
    "pb.BuffModCharmedConfig\0222\n\022BuffModChaosC"
    "onfig\030  \001(\0132\026.pb.BuffModChaosConfig\022<\n\027B"
    "uffModRandomMoveConfig\030\014 \001(\0132\033.pb.BuffMo"
    "dRandomMoveConfig\022<\n\027BuffModDamageCopyCo"
    "nfig\030\031 \001(\0132\033.pb.BuffModDamageCopyConfig\022"
    "2\n\022BuffModTauntConfig\030\036 \001(\0132\026.pb.BuffMod"
    "TauntConfig\022B\n\032BuffModNoRageRecoverConfi"
    "g\0305 \001(\0132\036.pb.BuffModNoRageRecoverConfig\022"
    "6\n\024BuffModDisableConfig\0309 \001(\0132\030.pb.BuffM"
    "odDisableConfig\022<\n\027BuffModHarmOnMoveConf"
    "ig\030\? \001(\0132\033.pb.BuffModHarmOnMoveConfig\0220\n"
    "\021BuffModFearConfig\030C \001(\0132\025.pb.BuffModFea"
    "rConfig\022>\n\030BuffModNoSuckBloodConfig\030K \001("
    "\0132\034.pb.BuffModNoSuckBloodConfig\0228\n\025BuffM"
    "odNoReviveConfig\030O \001(\0132\031.pb.BuffModNoRev"
    "iveConfig\022D\n\033BuffModTransformationConfig"
    "\030\024 \001(\0132\037.pb.BuffModTransformationConfig\022"
    "6\n\024BuffModNothingConfig\030\004 \001(\0132\030.pb.BuffM"
    "odNothingConfig\022D\n\033BuffModTransformScale"
    "Config\030\r \001(\0132\037.pb.BuffModTransformScaleC"
    "onfig\022.\n\020BuffModDieConfig\030\017 \001(\0132\024.pb.Buf"
    "fModDieConfig\022>\n\030BuffModRepeatSkillConfi"
    "g\030\027 \001(\0132\034.pb.BuffModRepeatSkillConfig\022<\n"
    "\027BuffModSkillOnEndConfig\030\035 \001(\0132\033.pb.Buff"
    "ModSkillOnEndConfig\022F\n\034BuffModSpecifySki"
    "llTidConfig\030\' \001(\0132 .pb.BuffModSpecifySki"
    "llTidConfig\022B\n\032BuffModResetBuffTimeConfi"
    "g\030, \001(\0132\036.pb.BuffModResetBuffTimeConfig\022"
    "8\n\025BuffModAddSkillConfig\030- \001(\0132\031.pb.Buff"
    "ModAddSkillConfig\022F\n\034BuffModPropertyForm"
    "ulaConfig\030. \001(\0132 .pb.BuffModPropertyForm"
    "ulaConfig\022B\n\032BuffModEffectInRangeConfig\030"
    "/ \001(\0132\036.pb.BuffModEffectInRangeConfig\022<\n"
    "\027BuffModRecordDataConfig\0300 \001(\0132\033.pb.Buff"
    "ModRecordDataConfig\022=\n\030BuffModSkillOnEnd"
    "BConfig\0301 \001(\0132\033.pb.BuffModSkillOnEndConf"
    "ig\022L\n\037BuffModHideSomeAppearanceConfig\0303 "
    "\001(\0132#.pb.BuffModHideSomeAppearanceConfig"
    "\022R\n\"BuffModInheritExistBuffStackConfig\0306"
    " \001(\0132&.pb.BuffModInheritExistBuffStackCo"
    "nfig\022:\n\026BuffModScaleTextConfig\030: \001(\0132\032.p"
    "b.BuffModScaleTextConfig\022>\n\030BuffModAddDe"
    "fPointConfig\030; \001(\0132\034.pb.BuffModAddDefPoi"
    "ntConfig\022D\n\033BuffModRemoveDefPointConfig\030"
    "< \001(\0132\037.pb.BuffModRemoveDefPointConfig\022T"
    "\n#BuffModEffectInRangeConditionConfig\030= "
    "\001(\0132\'.pb.BuffModEffectInRangeConditionCo"
    "nfig\022:\n\026BuffModChangeDirConfig\030E \001(\0132\032.p"
    "b.BuffModChangeDirConfig\022T\n#BuffModTDMon"
    "iterDefenderStateConfig\030F \001(\0132\'.pb.BuffM"
    "odTDMoniterDefenderStateConfig\0228\n\025BuffMo"
    "dTDNoBeanConfig\030G \001(\0132\031.pb.BuffModTDNoBe"
    "anConfig\022H\n\035BuffModTDRepeatSendBeanConfi"
    "g\030H \001(\0132!.pb.BuffModTDRepeatSendBeanConf"
    "ig\022J\n\036BuffModTDRepeatCheckBeanConfig\030I \001"
    "(\0132\".pb.BuffModTDRepeatCheckBeanConfig\022>"
    "\n\030BuffModBuffOnStackConfig\030L \001(\0132\034.pb.Bu"
    "ffModBuffOnStackConfig\022H\n\035BuffModChangeS"
    "ummonedAIConfig\030P \001(\0132!.pb.BuffModChange"
    "SummonedAIConfig", 8176);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/BuffData.proto", &protobuf_RegisterTypes);
  SpecialHitModel::default_instance_ = new SpecialHitModel();
  BuffModAbsorbDamageConfig::default_instance_ = new BuffModAbsorbDamageConfig();
  BuffModNonTargettableConfig::default_instance_ = new BuffModNonTargettableConfig();
  BuffModNonHostileTargettableConfig::default_instance_ = new BuffModNonHostileTargettableConfig();
  BuffModReflectDamageConfig::default_instance_ = new BuffModReflectDamageConfig();
  BuffModReflectSkillConfig::default_instance_ = new BuffModReflectSkillConfig();
  BuffModBuffImmunityConfig::default_instance_ = new BuffModBuffImmunityConfig();
  BuffModSkillImmunityConfig::default_instance_ = new BuffModSkillImmunityConfig();
  BuffModHitActionImmunityConfig::default_instance_ = new BuffModHitActionImmunityConfig();
  BuffModDispelConfig::default_instance_ = new BuffModDispelConfig();
  BuffModStealHpConfig::default_instance_ = new BuffModStealHpConfig();
  BuffModDamageShareConfig::default_instance_ = new BuffModDamageShareConfig();
  BuffModDamageCopyConfig::default_instance_ = new BuffModDamageCopyConfig();
  BuffModHealCopyConfig::default_instance_ = new BuffModHealCopyConfig();
  BuffModHpConfig::default_instance_ = new BuffModHpConfig();
  BuffModRageConfig::default_instance_ = new BuffModRageConfig();
  BuffModRecordDataConfig::default_instance_ = new BuffModRecordDataConfig();
  BuffModHarmOnMoveConfig::default_instance_ = new BuffModHarmOnMoveConfig();
  BuffModDamageImmunityConfig::default_instance_ = new BuffModDamageImmunityConfig();
  BuffData::default_instance_ = new BuffData();
  SpecialHitModel::default_instance_->InitAsDefaultInstance();
  BuffModAbsorbDamageConfig::default_instance_->InitAsDefaultInstance();
  BuffModNonTargettableConfig::default_instance_->InitAsDefaultInstance();
  BuffModNonHostileTargettableConfig::default_instance_->InitAsDefaultInstance();
  BuffModReflectDamageConfig::default_instance_->InitAsDefaultInstance();
  BuffModReflectSkillConfig::default_instance_->InitAsDefaultInstance();
  BuffModBuffImmunityConfig::default_instance_->InitAsDefaultInstance();
  BuffModSkillImmunityConfig::default_instance_->InitAsDefaultInstance();
  BuffModHitActionImmunityConfig::default_instance_->InitAsDefaultInstance();
  BuffModDispelConfig::default_instance_->InitAsDefaultInstance();
  BuffModStealHpConfig::default_instance_->InitAsDefaultInstance();
  BuffModDamageShareConfig::default_instance_->InitAsDefaultInstance();
  BuffModDamageCopyConfig::default_instance_->InitAsDefaultInstance();
  BuffModHealCopyConfig::default_instance_->InitAsDefaultInstance();
  BuffModHpConfig::default_instance_->InitAsDefaultInstance();
  BuffModRageConfig::default_instance_->InitAsDefaultInstance();
  BuffModRecordDataConfig::default_instance_->InitAsDefaultInstance();
  BuffModHarmOnMoveConfig::default_instance_->InitAsDefaultInstance();
  BuffModDamageImmunityConfig::default_instance_->InitAsDefaultInstance();
  BuffData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fBuffData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fBuffData_2eproto {
  StaticDescriptorInitializer_module_2fBuffData_2eproto() {
    protobuf_AddDesc_module_2fBuffData_2eproto();
  }
} static_descriptor_initializer_module_2fBuffData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SpecialHitModel::kHitTypeFieldNumber;
const int SpecialHitModel::kBuffTypeFieldNumber;
const int SpecialHitModel::kBuffListFieldNumber;
const int SpecialHitModel::kAdjustScaleFieldNumber;
const int SpecialHitModel::kBuffLastTimeFieldNumber;
const int SpecialHitModel::kBuffEffectFieldNumber;
const int SpecialHitModel::kBuffHitRateFieldNumber;
const int SpecialHitModel::kUpdateEffectFieldNumber;
#endif  // !_MSC_VER

SpecialHitModel::SpecialHitModel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SpecialHitModel)
}

void SpecialHitModel::InitAsDefaultInstance() {
}

SpecialHitModel::SpecialHitModel(const SpecialHitModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SpecialHitModel)
}

void SpecialHitModel::SharedCtor() {
  _cached_size_ = 0;
  hittype_ = 0;
  bufftype_ = 0;
  adjustscale_ = false;
  updateeffect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialHitModel::~SpecialHitModel() {
  // @@protoc_insertion_point(destructor:pb.SpecialHitModel)
  SharedDtor();
}

void SpecialHitModel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpecialHitModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecialHitModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecialHitModel_descriptor_;
}

const SpecialHitModel& SpecialHitModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

SpecialHitModel* SpecialHitModel::default_instance_ = NULL;

SpecialHitModel* SpecialHitModel::New() const {
  return new SpecialHitModel;
}

void SpecialHitModel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpecialHitModel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hittype_, bufftype_);
  ZR_(adjustscale_, updateeffect_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  bufflist_.Clear();
  bufflasttime_.Clear();
  buffeffect_.Clear();
  buffhitrate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecialHitModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SpecialHitModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HitType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hittype_)));
          set_has_hittype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuffType;
        break;
      }

      // optional int32 BuffType = 2;
      case 2: {
        if (tag == 16) {
         parse_BuffType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bufftype_)));
          set_has_bufftype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BuffList;
        break;
      }

      // repeated int32 BuffList = 3;
      case 3: {
        if (tag == 24) {
         parse_BuffList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_bufflist())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bufflist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BuffList;
        if (input->ExpectTag(32)) goto parse_AdjustScale;
        break;
      }

      // optional bool AdjustScale = 4;
      case 4: {
        if (tag == 32) {
         parse_AdjustScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adjustscale_)));
          set_has_adjustscale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BuffLastTime;
        break;
      }

      // repeated int32 BuffLastTime = 5;
      case 5: {
        if (tag == 40) {
         parse_BuffLastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_bufflasttime())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bufflasttime())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BuffLastTime;
        if (input->ExpectTag(48)) goto parse_BuffEffect;
        break;
      }

      // repeated int32 BuffEffect = 6;
      case 6: {
        if (tag == 48) {
         parse_BuffEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_buffeffect())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buffeffect())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_BuffEffect;
        if (input->ExpectTag(56)) goto parse_BuffHitRate;
        break;
      }

      // repeated int32 BuffHitRate = 7;
      case 7: {
        if (tag == 56) {
         parse_BuffHitRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_buffhitrate())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buffhitrate())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_BuffHitRate;
        if (input->ExpectTag(64)) goto parse_UpdateEffect;
        break;
      }

      // optional bool UpdateEffect = 8;
      case 8: {
        if (tag == 64) {
         parse_UpdateEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &updateeffect_)));
          set_has_updateeffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SpecialHitModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SpecialHitModel)
  return false;
#undef DO_
}

void SpecialHitModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SpecialHitModel)
  // optional int32 HitType = 1;
  if (has_hittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hittype(), output);
  }

  // optional int32 BuffType = 2;
  if (has_bufftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bufftype(), output);
  }

  // repeated int32 BuffList = 3;
  for (int i = 0; i < this->bufflist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->bufflist(i), output);
  }

  // optional bool AdjustScale = 4;
  if (has_adjustscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->adjustscale(), output);
  }

  // repeated int32 BuffLastTime = 5;
  for (int i = 0; i < this->bufflasttime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->bufflasttime(i), output);
  }

  // repeated int32 BuffEffect = 6;
  for (int i = 0; i < this->buffeffect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->buffeffect(i), output);
  }

  // repeated int32 BuffHitRate = 7;
  for (int i = 0; i < this->buffhitrate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->buffhitrate(i), output);
  }

  // optional bool UpdateEffect = 8;
  if (has_updateeffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->updateeffect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SpecialHitModel)
}

::google::protobuf::uint8* SpecialHitModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SpecialHitModel)
  // optional int32 HitType = 1;
  if (has_hittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hittype(), target);
  }

  // optional int32 BuffType = 2;
  if (has_bufftype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bufftype(), target);
  }

  // repeated int32 BuffList = 3;
  for (int i = 0; i < this->bufflist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->bufflist(i), target);
  }

  // optional bool AdjustScale = 4;
  if (has_adjustscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->adjustscale(), target);
  }

  // repeated int32 BuffLastTime = 5;
  for (int i = 0; i < this->bufflasttime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->bufflasttime(i), target);
  }

  // repeated int32 BuffEffect = 6;
  for (int i = 0; i < this->buffeffect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->buffeffect(i), target);
  }

  // repeated int32 BuffHitRate = 7;
  for (int i = 0; i < this->buffhitrate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->buffhitrate(i), target);
  }

  // optional bool UpdateEffect = 8;
  if (has_updateeffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->updateeffect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SpecialHitModel)
  return target;
}

int SpecialHitModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HitType = 1;
    if (has_hittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hittype());
    }

    // optional int32 BuffType = 2;
    if (has_bufftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bufftype());
    }

    // optional bool AdjustScale = 4;
    if (has_adjustscale()) {
      total_size += 1 + 1;
    }

    // optional bool UpdateEffect = 8;
    if (has_updateeffect()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 BuffList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->bufflist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bufflist(i));
    }
    total_size += 1 * this->bufflist_size() + data_size;
  }

  // repeated int32 BuffLastTime = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->bufflasttime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bufflasttime(i));
    }
    total_size += 1 * this->bufflasttime_size() + data_size;
  }

  // repeated int32 BuffEffect = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffeffect_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->buffeffect(i));
    }
    total_size += 1 * this->buffeffect_size() + data_size;
  }

  // repeated int32 BuffHitRate = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffhitrate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->buffhitrate(i));
    }
    total_size += 1 * this->buffhitrate_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialHitModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecialHitModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecialHitModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecialHitModel::MergeFrom(const SpecialHitModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  bufflist_.MergeFrom(from.bufflist_);
  bufflasttime_.MergeFrom(from.bufflasttime_);
  buffeffect_.MergeFrom(from.buffeffect_);
  buffhitrate_.MergeFrom(from.buffhitrate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hittype()) {
      set_hittype(from.hittype());
    }
    if (from.has_bufftype()) {
      set_bufftype(from.bufftype());
    }
    if (from.has_adjustscale()) {
      set_adjustscale(from.adjustscale());
    }
    if (from.has_updateeffect()) {
      set_updateeffect(from.updateeffect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecialHitModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialHitModel::CopyFrom(const SpecialHitModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialHitModel::IsInitialized() const {

  return true;
}

void SpecialHitModel::Swap(SpecialHitModel* other) {
  if (other != this) {
    std::swap(hittype_, other->hittype_);
    std::swap(bufftype_, other->bufftype_);
    bufflist_.Swap(&other->bufflist_);
    std::swap(adjustscale_, other->adjustscale_);
    bufflasttime_.Swap(&other->bufflasttime_);
    buffeffect_.Swap(&other->buffeffect_);
    buffhitrate_.Swap(&other->buffhitrate_);
    std::swap(updateeffect_, other->updateeffect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecialHitModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecialHitModel_descriptor_;
  metadata.reflection = SpecialHitModel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModAbsorbDamageConfig::kActiveFieldNumber;
const int BuffModAbsorbDamageConfig::kDelayTimeFieldNumber;
const int BuffModAbsorbDamageConfig::kValueParmaFieldNumber;
const int BuffModAbsorbDamageConfig::kValueGrowthFieldNumber;
const int BuffModAbsorbDamageConfig::kIsCureSelfFieldNumber;
const int BuffModAbsorbDamageConfig::kPercentParamFieldNumber;
const int BuffModAbsorbDamageConfig::kPercentGrowthFieldNumber;
const int BuffModAbsorbDamageConfig::kAbsorbCalculateTypeFieldNumber;
const int BuffModAbsorbDamageConfig::kAttributeOriginalFieldNumber;
const int BuffModAbsorbDamageConfig::kAttributeTypeFieldNumber;
const int BuffModAbsorbDamageConfig::kAttributePercenteParamFieldNumber;
const int BuffModAbsorbDamageConfig::kAttributePercenteGrowthFieldNumber;
const int BuffModAbsorbDamageConfig::kAbsorbTypeFieldNumber;
const int BuffModAbsorbDamageConfig::kAbsorbCountFieldNumber;
const int BuffModAbsorbDamageConfig::kThresholdFieldNumber;
#endif  // !_MSC_VER

BuffModAbsorbDamageConfig::BuffModAbsorbDamageConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModAbsorbDamageConfig)
}

void BuffModAbsorbDamageConfig::InitAsDefaultInstance() {
}

BuffModAbsorbDamageConfig::BuffModAbsorbDamageConfig(const BuffModAbsorbDamageConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModAbsorbDamageConfig)
}

void BuffModAbsorbDamageConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  valueparma_ = 0;
  valuegrowth_ = 0;
  iscureself_ = 0;
  percentparam_ = 0;
  percentgrowth_ = 0;
  absorbcalculatetype_ = 0;
  attributeoriginal_ = 0;
  attributetype_ = 0;
  attributepercenteparam_ = 0;
  attributepercentegrowth_ = 0;
  absorbtype_ = 0;
  absorbcount_ = 0;
  threshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModAbsorbDamageConfig::~BuffModAbsorbDamageConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModAbsorbDamageConfig)
  SharedDtor();
}

void BuffModAbsorbDamageConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModAbsorbDamageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModAbsorbDamageConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModAbsorbDamageConfig_descriptor_;
}

const BuffModAbsorbDamageConfig& BuffModAbsorbDamageConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

BuffModAbsorbDamageConfig* BuffModAbsorbDamageConfig::default_instance_ = NULL;

BuffModAbsorbDamageConfig* BuffModAbsorbDamageConfig::New() const {
  return new BuffModAbsorbDamageConfig;
}

void BuffModAbsorbDamageConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModAbsorbDamageConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(active_, absorbcalculatetype_);
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(attributeoriginal_, threshold_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModAbsorbDamageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModAbsorbDamageConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ValueParma;
        break;
      }

      // optional int32 ValueParma = 3;
      case 3: {
        if (tag == 24) {
         parse_ValueParma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valueparma_)));
          set_has_valueparma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ValueGrowth;
        break;
      }

      // optional int32 ValueGrowth = 4;
      case 4: {
        if (tag == 32) {
         parse_ValueGrowth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuegrowth_)));
          set_has_valuegrowth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_IsCureSelf;
        break;
      }

      // optional int32 IsCureSelf = 5;
      case 5: {
        if (tag == 40) {
         parse_IsCureSelf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscureself_)));
          set_has_iscureself();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_PercentParam;
        break;
      }

      // optional int32 PercentParam = 6;
      case 6: {
        if (tag == 48) {
         parse_PercentParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percentparam_)));
          set_has_percentparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_PercentGrowth;
        break;
      }

      // optional int32 PercentGrowth = 7;
      case 7: {
        if (tag == 56) {
         parse_PercentGrowth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percentgrowth_)));
          set_has_percentgrowth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_AbsorbCalculateType;
        break;
      }

      // optional int32 AbsorbCalculateType = 8;
      case 8: {
        if (tag == 64) {
         parse_AbsorbCalculateType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &absorbcalculatetype_)));
          set_has_absorbcalculatetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_AttributeOriginal;
        break;
      }

      // optional int32 AttributeOriginal = 9;
      case 9: {
        if (tag == 72) {
         parse_AttributeOriginal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attributeoriginal_)));
          set_has_attributeoriginal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_AttributeType;
        break;
      }

      // optional int32 AttributeType = 10;
      case 10: {
        if (tag == 80) {
         parse_AttributeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attributetype_)));
          set_has_attributetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_AttributePercenteParam;
        break;
      }

      // optional int32 AttributePercenteParam = 11;
      case 11: {
        if (tag == 88) {
         parse_AttributePercenteParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attributepercenteparam_)));
          set_has_attributepercenteparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_AttributePercenteGrowth;
        break;
      }

      // optional int32 AttributePercenteGrowth = 12;
      case 12: {
        if (tag == 96) {
         parse_AttributePercenteGrowth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attributepercentegrowth_)));
          set_has_attributepercentegrowth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_AbsorbType;
        break;
      }

      // optional int32 AbsorbType = 13;
      case 13: {
        if (tag == 104) {
         parse_AbsorbType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &absorbtype_)));
          set_has_absorbtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_AbsorbCount;
        break;
      }

      // optional int32 AbsorbCount = 14;
      case 14: {
        if (tag == 112) {
         parse_AbsorbCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &absorbcount_)));
          set_has_absorbcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_Threshold;
        break;
      }

      // optional int32 Threshold = 15;
      case 15: {
        if (tag == 120) {
         parse_Threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModAbsorbDamageConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModAbsorbDamageConfig)
  return false;
#undef DO_
}

void BuffModAbsorbDamageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModAbsorbDamageConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional int32 ValueParma = 3;
  if (has_valueparma()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->valueparma(), output);
  }

  // optional int32 ValueGrowth = 4;
  if (has_valuegrowth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->valuegrowth(), output);
  }

  // optional int32 IsCureSelf = 5;
  if (has_iscureself()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->iscureself(), output);
  }

  // optional int32 PercentParam = 6;
  if (has_percentparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->percentparam(), output);
  }

  // optional int32 PercentGrowth = 7;
  if (has_percentgrowth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->percentgrowth(), output);
  }

  // optional int32 AbsorbCalculateType = 8;
  if (has_absorbcalculatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->absorbcalculatetype(), output);
  }

  // optional int32 AttributeOriginal = 9;
  if (has_attributeoriginal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->attributeoriginal(), output);
  }

  // optional int32 AttributeType = 10;
  if (has_attributetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->attributetype(), output);
  }

  // optional int32 AttributePercenteParam = 11;
  if (has_attributepercenteparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->attributepercenteparam(), output);
  }

  // optional int32 AttributePercenteGrowth = 12;
  if (has_attributepercentegrowth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->attributepercentegrowth(), output);
  }

  // optional int32 AbsorbType = 13;
  if (has_absorbtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->absorbtype(), output);
  }

  // optional int32 AbsorbCount = 14;
  if (has_absorbcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->absorbcount(), output);
  }

  // optional int32 Threshold = 15;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->threshold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModAbsorbDamageConfig)
}

::google::protobuf::uint8* BuffModAbsorbDamageConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModAbsorbDamageConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional int32 ValueParma = 3;
  if (has_valueparma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->valueparma(), target);
  }

  // optional int32 ValueGrowth = 4;
  if (has_valuegrowth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->valuegrowth(), target);
  }

  // optional int32 IsCureSelf = 5;
  if (has_iscureself()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->iscureself(), target);
  }

  // optional int32 PercentParam = 6;
  if (has_percentparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->percentparam(), target);
  }

  // optional int32 PercentGrowth = 7;
  if (has_percentgrowth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->percentgrowth(), target);
  }

  // optional int32 AbsorbCalculateType = 8;
  if (has_absorbcalculatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->absorbcalculatetype(), target);
  }

  // optional int32 AttributeOriginal = 9;
  if (has_attributeoriginal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->attributeoriginal(), target);
  }

  // optional int32 AttributeType = 10;
  if (has_attributetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->attributetype(), target);
  }

  // optional int32 AttributePercenteParam = 11;
  if (has_attributepercenteparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->attributepercenteparam(), target);
  }

  // optional int32 AttributePercenteGrowth = 12;
  if (has_attributepercentegrowth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->attributepercentegrowth(), target);
  }

  // optional int32 AbsorbType = 13;
  if (has_absorbtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->absorbtype(), target);
  }

  // optional int32 AbsorbCount = 14;
  if (has_absorbcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->absorbcount(), target);
  }

  // optional int32 Threshold = 15;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->threshold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModAbsorbDamageConfig)
  return target;
}

int BuffModAbsorbDamageConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 ValueParma = 3;
    if (has_valueparma()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valueparma());
    }

    // optional int32 ValueGrowth = 4;
    if (has_valuegrowth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuegrowth());
    }

    // optional int32 IsCureSelf = 5;
    if (has_iscureself()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscureself());
    }

    // optional int32 PercentParam = 6;
    if (has_percentparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentparam());
    }

    // optional int32 PercentGrowth = 7;
    if (has_percentgrowth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentgrowth());
    }

    // optional int32 AbsorbCalculateType = 8;
    if (has_absorbcalculatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->absorbcalculatetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 AttributeOriginal = 9;
    if (has_attributeoriginal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attributeoriginal());
    }

    // optional int32 AttributeType = 10;
    if (has_attributetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attributetype());
    }

    // optional int32 AttributePercenteParam = 11;
    if (has_attributepercenteparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attributepercenteparam());
    }

    // optional int32 AttributePercenteGrowth = 12;
    if (has_attributepercentegrowth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attributepercentegrowth());
    }

    // optional int32 AbsorbType = 13;
    if (has_absorbtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->absorbtype());
    }

    // optional int32 AbsorbCount = 14;
    if (has_absorbcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->absorbcount());
    }

    // optional int32 Threshold = 15;
    if (has_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->threshold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModAbsorbDamageConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModAbsorbDamageConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModAbsorbDamageConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModAbsorbDamageConfig::MergeFrom(const BuffModAbsorbDamageConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_valueparma()) {
      set_valueparma(from.valueparma());
    }
    if (from.has_valuegrowth()) {
      set_valuegrowth(from.valuegrowth());
    }
    if (from.has_iscureself()) {
      set_iscureself(from.iscureself());
    }
    if (from.has_percentparam()) {
      set_percentparam(from.percentparam());
    }
    if (from.has_percentgrowth()) {
      set_percentgrowth(from.percentgrowth());
    }
    if (from.has_absorbcalculatetype()) {
      set_absorbcalculatetype(from.absorbcalculatetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attributeoriginal()) {
      set_attributeoriginal(from.attributeoriginal());
    }
    if (from.has_attributetype()) {
      set_attributetype(from.attributetype());
    }
    if (from.has_attributepercenteparam()) {
      set_attributepercenteparam(from.attributepercenteparam());
    }
    if (from.has_attributepercentegrowth()) {
      set_attributepercentegrowth(from.attributepercentegrowth());
    }
    if (from.has_absorbtype()) {
      set_absorbtype(from.absorbtype());
    }
    if (from.has_absorbcount()) {
      set_absorbcount(from.absorbcount());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModAbsorbDamageConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModAbsorbDamageConfig::CopyFrom(const BuffModAbsorbDamageConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModAbsorbDamageConfig::IsInitialized() const {

  return true;
}

void BuffModAbsorbDamageConfig::Swap(BuffModAbsorbDamageConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(valueparma_, other->valueparma_);
    std::swap(valuegrowth_, other->valuegrowth_);
    std::swap(iscureself_, other->iscureself_);
    std::swap(percentparam_, other->percentparam_);
    std::swap(percentgrowth_, other->percentgrowth_);
    std::swap(absorbcalculatetype_, other->absorbcalculatetype_);
    std::swap(attributeoriginal_, other->attributeoriginal_);
    std::swap(attributetype_, other->attributetype_);
    std::swap(attributepercenteparam_, other->attributepercenteparam_);
    std::swap(attributepercentegrowth_, other->attributepercentegrowth_);
    std::swap(absorbtype_, other->absorbtype_);
    std::swap(absorbcount_, other->absorbcount_);
    std::swap(threshold_, other->threshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModAbsorbDamageConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModAbsorbDamageConfig_descriptor_;
  metadata.reflection = BuffModAbsorbDamageConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModNonTargettableConfig::kActiveFieldNumber;
const int BuffModNonTargettableConfig::kDelayTimeFieldNumber;
const int BuffModNonTargettableConfig::kWhiteListFieldNumber;
#endif  // !_MSC_VER

BuffModNonTargettableConfig::BuffModNonTargettableConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModNonTargettableConfig)
}

void BuffModNonTargettableConfig::InitAsDefaultInstance() {
}

BuffModNonTargettableConfig::BuffModNonTargettableConfig(const BuffModNonTargettableConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModNonTargettableConfig)
}

void BuffModNonTargettableConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModNonTargettableConfig::~BuffModNonTargettableConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModNonTargettableConfig)
  SharedDtor();
}

void BuffModNonTargettableConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModNonTargettableConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModNonTargettableConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModNonTargettableConfig_descriptor_;
}

const BuffModNonTargettableConfig& BuffModNonTargettableConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

BuffModNonTargettableConfig* BuffModNonTargettableConfig::default_instance_ = NULL;

BuffModNonTargettableConfig* BuffModNonTargettableConfig::New() const {
  return new BuffModNonTargettableConfig;
}

void BuffModNonTargettableConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModNonTargettableConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, delaytime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  whitelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModNonTargettableConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModNonTargettableConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_WhiteList;
        break;
      }

      // repeated int32 WhiteList = 3;
      case 3: {
        if (tag == 24) {
         parse_WhiteList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_whitelist())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_whitelist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_WhiteList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModNonTargettableConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModNonTargettableConfig)
  return false;
#undef DO_
}

void BuffModNonTargettableConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModNonTargettableConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // repeated int32 WhiteList = 3;
  for (int i = 0; i < this->whitelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->whitelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModNonTargettableConfig)
}

::google::protobuf::uint8* BuffModNonTargettableConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModNonTargettableConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // repeated int32 WhiteList = 3;
  for (int i = 0; i < this->whitelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->whitelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModNonTargettableConfig)
  return target;
}

int BuffModNonTargettableConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

  }
  // repeated int32 WhiteList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->whitelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->whitelist(i));
    }
    total_size += 1 * this->whitelist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModNonTargettableConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModNonTargettableConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModNonTargettableConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModNonTargettableConfig::MergeFrom(const BuffModNonTargettableConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  whitelist_.MergeFrom(from.whitelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModNonTargettableConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModNonTargettableConfig::CopyFrom(const BuffModNonTargettableConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModNonTargettableConfig::IsInitialized() const {

  return true;
}

void BuffModNonTargettableConfig::Swap(BuffModNonTargettableConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    whitelist_.Swap(&other->whitelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModNonTargettableConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModNonTargettableConfig_descriptor_;
  metadata.reflection = BuffModNonTargettableConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModNonHostileTargettableConfig::kActiveFieldNumber;
const int BuffModNonHostileTargettableConfig::kDelayTimeFieldNumber;
#endif  // !_MSC_VER

BuffModNonHostileTargettableConfig::BuffModNonHostileTargettableConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModNonHostileTargettableConfig)
}

void BuffModNonHostileTargettableConfig::InitAsDefaultInstance() {
}

BuffModNonHostileTargettableConfig::BuffModNonHostileTargettableConfig(const BuffModNonHostileTargettableConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModNonHostileTargettableConfig)
}

void BuffModNonHostileTargettableConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModNonHostileTargettableConfig::~BuffModNonHostileTargettableConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModNonHostileTargettableConfig)
  SharedDtor();
}

void BuffModNonHostileTargettableConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModNonHostileTargettableConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModNonHostileTargettableConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModNonHostileTargettableConfig_descriptor_;
}

const BuffModNonHostileTargettableConfig& BuffModNonHostileTargettableConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

BuffModNonHostileTargettableConfig* BuffModNonHostileTargettableConfig::default_instance_ = NULL;

BuffModNonHostileTargettableConfig* BuffModNonHostileTargettableConfig::New() const {
  return new BuffModNonHostileTargettableConfig;
}

void BuffModNonHostileTargettableConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModNonHostileTargettableConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, delaytime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModNonHostileTargettableConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModNonHostileTargettableConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModNonHostileTargettableConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModNonHostileTargettableConfig)
  return false;
#undef DO_
}

void BuffModNonHostileTargettableConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModNonHostileTargettableConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModNonHostileTargettableConfig)
}

::google::protobuf::uint8* BuffModNonHostileTargettableConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModNonHostileTargettableConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModNonHostileTargettableConfig)
  return target;
}

int BuffModNonHostileTargettableConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModNonHostileTargettableConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModNonHostileTargettableConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModNonHostileTargettableConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModNonHostileTargettableConfig::MergeFrom(const BuffModNonHostileTargettableConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModNonHostileTargettableConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModNonHostileTargettableConfig::CopyFrom(const BuffModNonHostileTargettableConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModNonHostileTargettableConfig::IsInitialized() const {

  return true;
}

void BuffModNonHostileTargettableConfig::Swap(BuffModNonHostileTargettableConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModNonHostileTargettableConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModNonHostileTargettableConfig_descriptor_;
  metadata.reflection = BuffModNonHostileTargettableConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModReflectDamageConfig::kActiveFieldNumber;
const int BuffModReflectDamageConfig::kDelayTimeFieldNumber;
const int BuffModReflectDamageConfig::kReboundTypeFieldNumber;
const int BuffModReflectDamageConfig::kReboundDataFieldNumber;
const int BuffModReflectDamageConfig::kReboundCalculateTypeFieldNumber;
const int BuffModReflectDamageConfig::kAttributeOriginalFieldNumber;
const int BuffModReflectDamageConfig::kAttributeTypeFieldNumber;
const int BuffModReflectDamageConfig::kAttributePercenteParamFieldNumber;
const int BuffModReflectDamageConfig::kAttributePercenteGrowthFieldNumber;
#endif  // !_MSC_VER

BuffModReflectDamageConfig::BuffModReflectDamageConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModReflectDamageConfig)
}

void BuffModReflectDamageConfig::InitAsDefaultInstance() {
  rebounddata_ = const_cast< ::pb::BuffDataModel*>(&::pb::BuffDataModel::default_instance());
}

BuffModReflectDamageConfig::BuffModReflectDamageConfig(const BuffModReflectDamageConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModReflectDamageConfig)
}

void BuffModReflectDamageConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  reboundtype_ = 0;
  rebounddata_ = NULL;
  reboundcalculatetype_ = 0;
  attributeoriginal_ = 0;
  attributetype_ = 0;
  attributepercenteparam_ = 0;
  attributepercentegrowth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModReflectDamageConfig::~BuffModReflectDamageConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModReflectDamageConfig)
  SharedDtor();
}

void BuffModReflectDamageConfig::SharedDtor() {
  if (this != default_instance_) {
    delete rebounddata_;
  }
}

void BuffModReflectDamageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModReflectDamageConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModReflectDamageConfig_descriptor_;
}

const BuffModReflectDamageConfig& BuffModReflectDamageConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

BuffModReflectDamageConfig* BuffModReflectDamageConfig::default_instance_ = NULL;

BuffModReflectDamageConfig* BuffModReflectDamageConfig::New() const {
  return new BuffModReflectDamageConfig;
}

void BuffModReflectDamageConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModReflectDamageConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(active_, delaytime_);
    ZR_(reboundtype_, attributepercenteparam_);
    if (has_rebounddata()) {
      if (rebounddata_ != NULL) rebounddata_->::pb::BuffDataModel::Clear();
    }
  }
  attributepercentegrowth_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModReflectDamageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModReflectDamageConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ReboundType;
        break;
      }

      // optional int32 ReboundType = 3;
      case 3: {
        if (tag == 24) {
         parse_ReboundType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reboundtype_)));
          set_has_reboundtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ReboundData;
        break;
      }

      // optional .pb.BuffDataModel ReboundData = 4;
      case 4: {
        if (tag == 34) {
         parse_ReboundData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rebounddata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ReboundCalculateType;
        break;
      }

      // optional int32 ReboundCalculateType = 5;
      case 5: {
        if (tag == 40) {
         parse_ReboundCalculateType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reboundcalculatetype_)));
          set_has_reboundcalculatetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_AttributeOriginal;
        break;
      }

      // optional int32 AttributeOriginal = 6;
      case 6: {
        if (tag == 48) {
         parse_AttributeOriginal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attributeoriginal_)));
          set_has_attributeoriginal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_AttributeType;
        break;
      }

      // optional int32 AttributeType = 7;
      case 7: {
        if (tag == 56) {
         parse_AttributeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attributetype_)));
          set_has_attributetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_AttributePercenteParam;
        break;
      }

      // optional int32 AttributePercenteParam = 8;
      case 8: {
        if (tag == 64) {
         parse_AttributePercenteParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attributepercenteparam_)));
          set_has_attributepercenteparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_AttributePercenteGrowth;
        break;
      }

      // optional int32 AttributePercenteGrowth = 9;
      case 9: {
        if (tag == 72) {
         parse_AttributePercenteGrowth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attributepercentegrowth_)));
          set_has_attributepercentegrowth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModReflectDamageConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModReflectDamageConfig)
  return false;
#undef DO_
}

void BuffModReflectDamageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModReflectDamageConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional int32 ReboundType = 3;
  if (has_reboundtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reboundtype(), output);
  }

  // optional .pb.BuffDataModel ReboundData = 4;
  if (has_rebounddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rebounddata(), output);
  }

  // optional int32 ReboundCalculateType = 5;
  if (has_reboundcalculatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reboundcalculatetype(), output);
  }

  // optional int32 AttributeOriginal = 6;
  if (has_attributeoriginal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->attributeoriginal(), output);
  }

  // optional int32 AttributeType = 7;
  if (has_attributetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->attributetype(), output);
  }

  // optional int32 AttributePercenteParam = 8;
  if (has_attributepercenteparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->attributepercenteparam(), output);
  }

  // optional int32 AttributePercenteGrowth = 9;
  if (has_attributepercentegrowth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->attributepercentegrowth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModReflectDamageConfig)
}

::google::protobuf::uint8* BuffModReflectDamageConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModReflectDamageConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional int32 ReboundType = 3;
  if (has_reboundtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reboundtype(), target);
  }

  // optional .pb.BuffDataModel ReboundData = 4;
  if (has_rebounddata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rebounddata(), target);
  }

  // optional int32 ReboundCalculateType = 5;
  if (has_reboundcalculatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reboundcalculatetype(), target);
  }

  // optional int32 AttributeOriginal = 6;
  if (has_attributeoriginal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->attributeoriginal(), target);
  }

  // optional int32 AttributeType = 7;
  if (has_attributetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->attributetype(), target);
  }

  // optional int32 AttributePercenteParam = 8;
  if (has_attributepercenteparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->attributepercenteparam(), target);
  }

  // optional int32 AttributePercenteGrowth = 9;
  if (has_attributepercentegrowth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->attributepercentegrowth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModReflectDamageConfig)
  return target;
}

int BuffModReflectDamageConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 ReboundType = 3;
    if (has_reboundtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reboundtype());
    }

    // optional .pb.BuffDataModel ReboundData = 4;
    if (has_rebounddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rebounddata());
    }

    // optional int32 ReboundCalculateType = 5;
    if (has_reboundcalculatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reboundcalculatetype());
    }

    // optional int32 AttributeOriginal = 6;
    if (has_attributeoriginal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attributeoriginal());
    }

    // optional int32 AttributeType = 7;
    if (has_attributetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attributetype());
    }

    // optional int32 AttributePercenteParam = 8;
    if (has_attributepercenteparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attributepercenteparam());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 AttributePercenteGrowth = 9;
    if (has_attributepercentegrowth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attributepercentegrowth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModReflectDamageConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModReflectDamageConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModReflectDamageConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModReflectDamageConfig::MergeFrom(const BuffModReflectDamageConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_reboundtype()) {
      set_reboundtype(from.reboundtype());
    }
    if (from.has_rebounddata()) {
      mutable_rebounddata()->::pb::BuffDataModel::MergeFrom(from.rebounddata());
    }
    if (from.has_reboundcalculatetype()) {
      set_reboundcalculatetype(from.reboundcalculatetype());
    }
    if (from.has_attributeoriginal()) {
      set_attributeoriginal(from.attributeoriginal());
    }
    if (from.has_attributetype()) {
      set_attributetype(from.attributetype());
    }
    if (from.has_attributepercenteparam()) {
      set_attributepercenteparam(from.attributepercenteparam());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attributepercentegrowth()) {
      set_attributepercentegrowth(from.attributepercentegrowth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModReflectDamageConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModReflectDamageConfig::CopyFrom(const BuffModReflectDamageConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModReflectDamageConfig::IsInitialized() const {

  return true;
}

void BuffModReflectDamageConfig::Swap(BuffModReflectDamageConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(reboundtype_, other->reboundtype_);
    std::swap(rebounddata_, other->rebounddata_);
    std::swap(reboundcalculatetype_, other->reboundcalculatetype_);
    std::swap(attributeoriginal_, other->attributeoriginal_);
    std::swap(attributetype_, other->attributetype_);
    std::swap(attributepercenteparam_, other->attributepercenteparam_);
    std::swap(attributepercentegrowth_, other->attributepercentegrowth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModReflectDamageConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModReflectDamageConfig_descriptor_;
  metadata.reflection = BuffModReflectDamageConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModReflectSkillConfig::kActiveFieldNumber;
const int BuffModReflectSkillConfig::kDelayTimeFieldNumber;
const int BuffModReflectSkillConfig::kReboundCountFieldNumber;
const int BuffModReflectSkillConfig::kReboundTypeFieldNumber;
#endif  // !_MSC_VER

BuffModReflectSkillConfig::BuffModReflectSkillConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModReflectSkillConfig)
}

void BuffModReflectSkillConfig::InitAsDefaultInstance() {
}

BuffModReflectSkillConfig::BuffModReflectSkillConfig(const BuffModReflectSkillConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModReflectSkillConfig)
}

void BuffModReflectSkillConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  reboundcount_ = 0;
  reboundtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModReflectSkillConfig::~BuffModReflectSkillConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModReflectSkillConfig)
  SharedDtor();
}

void BuffModReflectSkillConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModReflectSkillConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModReflectSkillConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModReflectSkillConfig_descriptor_;
}

const BuffModReflectSkillConfig& BuffModReflectSkillConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

BuffModReflectSkillConfig* BuffModReflectSkillConfig::default_instance_ = NULL;

BuffModReflectSkillConfig* BuffModReflectSkillConfig::New() const {
  return new BuffModReflectSkillConfig;
}

void BuffModReflectSkillConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModReflectSkillConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, reboundtype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModReflectSkillConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModReflectSkillConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ReboundCount;
        break;
      }

      // optional int32 ReboundCount = 3;
      case 3: {
        if (tag == 24) {
         parse_ReboundCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reboundcount_)));
          set_has_reboundcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ReboundType;
        break;
      }

      // optional int32 ReboundType = 4;
      case 4: {
        if (tag == 32) {
         parse_ReboundType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reboundtype_)));
          set_has_reboundtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModReflectSkillConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModReflectSkillConfig)
  return false;
#undef DO_
}

void BuffModReflectSkillConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModReflectSkillConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional int32 ReboundCount = 3;
  if (has_reboundcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reboundcount(), output);
  }

  // optional int32 ReboundType = 4;
  if (has_reboundtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reboundtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModReflectSkillConfig)
}

::google::protobuf::uint8* BuffModReflectSkillConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModReflectSkillConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional int32 ReboundCount = 3;
  if (has_reboundcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reboundcount(), target);
  }

  // optional int32 ReboundType = 4;
  if (has_reboundtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reboundtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModReflectSkillConfig)
  return target;
}

int BuffModReflectSkillConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 ReboundCount = 3;
    if (has_reboundcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reboundcount());
    }

    // optional int32 ReboundType = 4;
    if (has_reboundtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reboundtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModReflectSkillConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModReflectSkillConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModReflectSkillConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModReflectSkillConfig::MergeFrom(const BuffModReflectSkillConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_reboundcount()) {
      set_reboundcount(from.reboundcount());
    }
    if (from.has_reboundtype()) {
      set_reboundtype(from.reboundtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModReflectSkillConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModReflectSkillConfig::CopyFrom(const BuffModReflectSkillConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModReflectSkillConfig::IsInitialized() const {

  return true;
}

void BuffModReflectSkillConfig::Swap(BuffModReflectSkillConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(reboundcount_, other->reboundcount_);
    std::swap(reboundtype_, other->reboundtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModReflectSkillConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModReflectSkillConfig_descriptor_;
  metadata.reflection = BuffModReflectSkillConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModBuffImmunityConfig::kActiveFieldNumber;
const int BuffModBuffImmunityConfig::kDelayTimeFieldNumber;
const int BuffModBuffImmunityConfig::kPurgeTypeFieldNumber;
const int BuffModBuffImmunityConfig::kDataFieldNumber;
const int BuffModBuffImmunityConfig::kShowHintFieldNumber;
#endif  // !_MSC_VER

BuffModBuffImmunityConfig::BuffModBuffImmunityConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModBuffImmunityConfig)
}

void BuffModBuffImmunityConfig::InitAsDefaultInstance() {
}

BuffModBuffImmunityConfig::BuffModBuffImmunityConfig(const BuffModBuffImmunityConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModBuffImmunityConfig)
}

void BuffModBuffImmunityConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  purgetype_ = 0;
  showhint_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModBuffImmunityConfig::~BuffModBuffImmunityConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModBuffImmunityConfig)
  SharedDtor();
}

void BuffModBuffImmunityConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModBuffImmunityConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModBuffImmunityConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModBuffImmunityConfig_descriptor_;
}

const BuffModBuffImmunityConfig& BuffModBuffImmunityConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

BuffModBuffImmunityConfig* BuffModBuffImmunityConfig::default_instance_ = NULL;

BuffModBuffImmunityConfig* BuffModBuffImmunityConfig::New() const {
  return new BuffModBuffImmunityConfig;
}

void BuffModBuffImmunityConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModBuffImmunityConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(delaytime_, purgetype_);
  ZR_(active_, showhint_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModBuffImmunityConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModBuffImmunityConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PurgeType;
        break;
      }

      // optional int32 PurgeType = 3;
      case 3: {
        if (tag == 24) {
         parse_PurgeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purgetype_)));
          set_has_purgetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Data;
        break;
      }

      // repeated int32 Data = 4;
      case 4: {
        if (tag == 32) {
         parse_Data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_data())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Data;
        if (input->ExpectTag(40)) goto parse_ShowHint;
        break;
      }

      // optional bool ShowHint = 5;
      case 5: {
        if (tag == 40) {
         parse_ShowHint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showhint_)));
          set_has_showhint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModBuffImmunityConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModBuffImmunityConfig)
  return false;
#undef DO_
}

void BuffModBuffImmunityConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModBuffImmunityConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional int32 PurgeType = 3;
  if (has_purgetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->purgetype(), output);
  }

  // repeated int32 Data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->data(i), output);
  }

  // optional bool ShowHint = 5;
  if (has_showhint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->showhint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModBuffImmunityConfig)
}

::google::protobuf::uint8* BuffModBuffImmunityConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModBuffImmunityConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional int32 PurgeType = 3;
  if (has_purgetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->purgetype(), target);
  }

  // repeated int32 Data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->data(i), target);
  }

  // optional bool ShowHint = 5;
  if (has_showhint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->showhint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModBuffImmunityConfig)
  return target;
}

int BuffModBuffImmunityConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 PurgeType = 3;
    if (has_purgetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purgetype());
    }

    // optional bool ShowHint = 5;
    if (has_showhint()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 Data = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModBuffImmunityConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModBuffImmunityConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModBuffImmunityConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModBuffImmunityConfig::MergeFrom(const BuffModBuffImmunityConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_purgetype()) {
      set_purgetype(from.purgetype());
    }
    if (from.has_showhint()) {
      set_showhint(from.showhint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModBuffImmunityConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModBuffImmunityConfig::CopyFrom(const BuffModBuffImmunityConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModBuffImmunityConfig::IsInitialized() const {

  return true;
}

void BuffModBuffImmunityConfig::Swap(BuffModBuffImmunityConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(purgetype_, other->purgetype_);
    data_.Swap(&other->data_);
    std::swap(showhint_, other->showhint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModBuffImmunityConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModBuffImmunityConfig_descriptor_;
  metadata.reflection = BuffModBuffImmunityConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModSkillImmunityConfig::kActiveFieldNumber;
const int BuffModSkillImmunityConfig::kShowHintFieldNumber;
const int BuffModSkillImmunityConfig::kImmuneTypeFieldNumber;
const int BuffModSkillImmunityConfig::kDataFieldNumber;
const int BuffModSkillImmunityConfig::kDelayTimeFieldNumber;
#endif  // !_MSC_VER

BuffModSkillImmunityConfig::BuffModSkillImmunityConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModSkillImmunityConfig)
}

void BuffModSkillImmunityConfig::InitAsDefaultInstance() {
}

BuffModSkillImmunityConfig::BuffModSkillImmunityConfig(const BuffModSkillImmunityConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModSkillImmunityConfig)
}

void BuffModSkillImmunityConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  showhint_ = false;
  immunetype_ = 0;
  delaytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModSkillImmunityConfig::~BuffModSkillImmunityConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModSkillImmunityConfig)
  SharedDtor();
}

void BuffModSkillImmunityConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModSkillImmunityConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModSkillImmunityConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModSkillImmunityConfig_descriptor_;
}

const BuffModSkillImmunityConfig& BuffModSkillImmunityConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

BuffModSkillImmunityConfig* BuffModSkillImmunityConfig::default_instance_ = NULL;

BuffModSkillImmunityConfig* BuffModSkillImmunityConfig::New() const {
  return new BuffModSkillImmunityConfig;
}

void BuffModSkillImmunityConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModSkillImmunityConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(active_, immunetype_);
    delaytime_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModSkillImmunityConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModSkillImmunityConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ShowHint;
        break;
      }

      // optional bool ShowHint = 2;
      case 2: {
        if (tag == 16) {
         parse_ShowHint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showhint_)));
          set_has_showhint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ImmuneType;
        break;
      }

      // optional int32 ImmuneType = 3;
      case 3: {
        if (tag == 24) {
         parse_ImmuneType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &immunetype_)));
          set_has_immunetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Data;
        break;
      }

      // repeated int32 Data = 4;
      case 4: {
        if (tag == 32) {
         parse_Data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_data())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Data;
        if (input->ExpectTag(40)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 5;
      case 5: {
        if (tag == 40) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModSkillImmunityConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModSkillImmunityConfig)
  return false;
#undef DO_
}

void BuffModSkillImmunityConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModSkillImmunityConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional bool ShowHint = 2;
  if (has_showhint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->showhint(), output);
  }

  // optional int32 ImmuneType = 3;
  if (has_immunetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->immunetype(), output);
  }

  // repeated int32 Data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->data(i), output);
  }

  // optional int32 DelayTime = 5;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->delaytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModSkillImmunityConfig)
}

::google::protobuf::uint8* BuffModSkillImmunityConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModSkillImmunityConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional bool ShowHint = 2;
  if (has_showhint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->showhint(), target);
  }

  // optional int32 ImmuneType = 3;
  if (has_immunetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->immunetype(), target);
  }

  // repeated int32 Data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->data(i), target);
  }

  // optional int32 DelayTime = 5;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->delaytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModSkillImmunityConfig)
  return target;
}

int BuffModSkillImmunityConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional bool ShowHint = 2;
    if (has_showhint()) {
      total_size += 1 + 1;
    }

    // optional int32 ImmuneType = 3;
    if (has_immunetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->immunetype());
    }

    // optional int32 DelayTime = 5;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

  }
  // repeated int32 Data = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModSkillImmunityConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModSkillImmunityConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModSkillImmunityConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModSkillImmunityConfig::MergeFrom(const BuffModSkillImmunityConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_showhint()) {
      set_showhint(from.showhint());
    }
    if (from.has_immunetype()) {
      set_immunetype(from.immunetype());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModSkillImmunityConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModSkillImmunityConfig::CopyFrom(const BuffModSkillImmunityConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModSkillImmunityConfig::IsInitialized() const {

  return true;
}

void BuffModSkillImmunityConfig::Swap(BuffModSkillImmunityConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(showhint_, other->showhint_);
    std::swap(immunetype_, other->immunetype_);
    data_.Swap(&other->data_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModSkillImmunityConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModSkillImmunityConfig_descriptor_;
  metadata.reflection = BuffModSkillImmunityConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModHitActionImmunityConfig::kActiveFieldNumber;
const int BuffModHitActionImmunityConfig::kDelayTimeFieldNumber;
#endif  // !_MSC_VER

BuffModHitActionImmunityConfig::BuffModHitActionImmunityConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModHitActionImmunityConfig)
}

void BuffModHitActionImmunityConfig::InitAsDefaultInstance() {
}

BuffModHitActionImmunityConfig::BuffModHitActionImmunityConfig(const BuffModHitActionImmunityConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModHitActionImmunityConfig)
}

void BuffModHitActionImmunityConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModHitActionImmunityConfig::~BuffModHitActionImmunityConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModHitActionImmunityConfig)
  SharedDtor();
}

void BuffModHitActionImmunityConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModHitActionImmunityConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModHitActionImmunityConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModHitActionImmunityConfig_descriptor_;
}

const BuffModHitActionImmunityConfig& BuffModHitActionImmunityConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

BuffModHitActionImmunityConfig* BuffModHitActionImmunityConfig::default_instance_ = NULL;

BuffModHitActionImmunityConfig* BuffModHitActionImmunityConfig::New() const {
  return new BuffModHitActionImmunityConfig;
}

void BuffModHitActionImmunityConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModHitActionImmunityConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, delaytime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModHitActionImmunityConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModHitActionImmunityConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModHitActionImmunityConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModHitActionImmunityConfig)
  return false;
#undef DO_
}

void BuffModHitActionImmunityConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModHitActionImmunityConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModHitActionImmunityConfig)
}

::google::protobuf::uint8* BuffModHitActionImmunityConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModHitActionImmunityConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModHitActionImmunityConfig)
  return target;
}

int BuffModHitActionImmunityConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModHitActionImmunityConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModHitActionImmunityConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModHitActionImmunityConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModHitActionImmunityConfig::MergeFrom(const BuffModHitActionImmunityConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModHitActionImmunityConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModHitActionImmunityConfig::CopyFrom(const BuffModHitActionImmunityConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModHitActionImmunityConfig::IsInitialized() const {

  return true;
}

void BuffModHitActionImmunityConfig::Swap(BuffModHitActionImmunityConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModHitActionImmunityConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModHitActionImmunityConfig_descriptor_;
  metadata.reflection = BuffModHitActionImmunityConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModDispelConfig::kActiveFieldNumber;
const int BuffModDispelConfig::kDelayTimeFieldNumber;
const int BuffModDispelConfig::kCleanTypeFieldNumber;
const int BuffModDispelConfig::kBuffListFieldNumber;
const int BuffModDispelConfig::kIsPartofFieldNumber;
const int BuffModDispelConfig::kCountFieldNumber;
const int BuffModDispelConfig::kCleanLevelFieldNumber;
const int BuffModDispelConfig::kIsOnNumFieldNumber;
#endif  // !_MSC_VER

BuffModDispelConfig::BuffModDispelConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModDispelConfig)
}

void BuffModDispelConfig::InitAsDefaultInstance() {
}

BuffModDispelConfig::BuffModDispelConfig(const BuffModDispelConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModDispelConfig)
}

void BuffModDispelConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  cleantype_ = 0;
  ispartof_ = false;
  count_ = 0;
  cleanlevel_ = 0;
  isonnum_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModDispelConfig::~BuffModDispelConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModDispelConfig)
  SharedDtor();
}

void BuffModDispelConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModDispelConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModDispelConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModDispelConfig_descriptor_;
}

const BuffModDispelConfig& BuffModDispelConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

BuffModDispelConfig* BuffModDispelConfig::default_instance_ = NULL;

BuffModDispelConfig* BuffModDispelConfig::New() const {
  return new BuffModDispelConfig;
}

void BuffModDispelConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModDispelConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(delaytime_, cleantype_);
    ZR_(active_, cleanlevel_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  bufflist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModDispelConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModDispelConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CleanType;
        break;
      }

      // optional int32 CleanType = 3;
      case 3: {
        if (tag == 24) {
         parse_CleanType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cleantype_)));
          set_has_cleantype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BuffList;
        break;
      }

      // repeated int32 BuffList = 4;
      case 4: {
        if (tag == 32) {
         parse_BuffList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_bufflist())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bufflist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BuffList;
        if (input->ExpectTag(40)) goto parse_IsPartof;
        break;
      }

      // optional bool IsPartof = 5;
      case 5: {
        if (tag == 40) {
         parse_IsPartof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispartof_)));
          set_has_ispartof();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Count;
        break;
      }

      // optional int32 Count = 6;
      case 6: {
        if (tag == 48) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_CleanLevel;
        break;
      }

      // optional int32 CleanLevel = 7;
      case 7: {
        if (tag == 56) {
         parse_CleanLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cleanlevel_)));
          set_has_cleanlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_IsOnNum;
        break;
      }

      // optional bool IsOnNum = 8;
      case 8: {
        if (tag == 64) {
         parse_IsOnNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isonnum_)));
          set_has_isonnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModDispelConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModDispelConfig)
  return false;
#undef DO_
}

void BuffModDispelConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModDispelConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional int32 CleanType = 3;
  if (has_cleantype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cleantype(), output);
  }

  // repeated int32 BuffList = 4;
  for (int i = 0; i < this->bufflist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->bufflist(i), output);
  }

  // optional bool IsPartof = 5;
  if (has_ispartof()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ispartof(), output);
  }

  // optional int32 Count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->count(), output);
  }

  // optional int32 CleanLevel = 7;
  if (has_cleanlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cleanlevel(), output);
  }

  // optional bool IsOnNum = 8;
  if (has_isonnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isonnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModDispelConfig)
}

::google::protobuf::uint8* BuffModDispelConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModDispelConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional int32 CleanType = 3;
  if (has_cleantype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cleantype(), target);
  }

  // repeated int32 BuffList = 4;
  for (int i = 0; i < this->bufflist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->bufflist(i), target);
  }

  // optional bool IsPartof = 5;
  if (has_ispartof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ispartof(), target);
  }

  // optional int32 Count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->count(), target);
  }

  // optional int32 CleanLevel = 7;
  if (has_cleanlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cleanlevel(), target);
  }

  // optional bool IsOnNum = 8;
  if (has_isonnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isonnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModDispelConfig)
  return target;
}

int BuffModDispelConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 CleanType = 3;
    if (has_cleantype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cleantype());
    }

    // optional bool IsPartof = 5;
    if (has_ispartof()) {
      total_size += 1 + 1;
    }

    // optional int32 Count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 CleanLevel = 7;
    if (has_cleanlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cleanlevel());
    }

    // optional bool IsOnNum = 8;
    if (has_isonnum()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 BuffList = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->bufflist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bufflist(i));
    }
    total_size += 1 * this->bufflist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModDispelConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModDispelConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModDispelConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModDispelConfig::MergeFrom(const BuffModDispelConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  bufflist_.MergeFrom(from.bufflist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_cleantype()) {
      set_cleantype(from.cleantype());
    }
    if (from.has_ispartof()) {
      set_ispartof(from.ispartof());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_cleanlevel()) {
      set_cleanlevel(from.cleanlevel());
    }
    if (from.has_isonnum()) {
      set_isonnum(from.isonnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModDispelConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModDispelConfig::CopyFrom(const BuffModDispelConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModDispelConfig::IsInitialized() const {

  return true;
}

void BuffModDispelConfig::Swap(BuffModDispelConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(cleantype_, other->cleantype_);
    bufflist_.Swap(&other->bufflist_);
    std::swap(ispartof_, other->ispartof_);
    std::swap(count_, other->count_);
    std::swap(cleanlevel_, other->cleanlevel_);
    std::swap(isonnum_, other->isonnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModDispelConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModDispelConfig_descriptor_;
  metadata.reflection = BuffModDispelConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModStealHpConfig::kActiveFieldNumber;
const int BuffModStealHpConfig::kDelayTimeFieldNumber;
const int BuffModStealHpConfig::kStealLifeTypeFieldNumber;
const int BuffModStealHpConfig::kStealLifeDataFieldNumber;
const int BuffModStealHpConfig::kStealMomentFieldNumber;
const int BuffModStealHpConfig::kBuffSubTypeFilterFieldNumber;
#endif  // !_MSC_VER

BuffModStealHpConfig::BuffModStealHpConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModStealHpConfig)
}

void BuffModStealHpConfig::InitAsDefaultInstance() {
  steallifedata_ = const_cast< ::pb::BuffDataModel*>(&::pb::BuffDataModel::default_instance());
}

BuffModStealHpConfig::BuffModStealHpConfig(const BuffModStealHpConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModStealHpConfig)
}

void BuffModStealHpConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  steallifetype_ = 0;
  steallifedata_ = NULL;
  stealmoment_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModStealHpConfig::~BuffModStealHpConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModStealHpConfig)
  SharedDtor();
}

void BuffModStealHpConfig::SharedDtor() {
  if (this != default_instance_) {
    delete steallifedata_;
  }
}

void BuffModStealHpConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModStealHpConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModStealHpConfig_descriptor_;
}

const BuffModStealHpConfig& BuffModStealHpConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

BuffModStealHpConfig* BuffModStealHpConfig::default_instance_ = NULL;

BuffModStealHpConfig* BuffModStealHpConfig::New() const {
  return new BuffModStealHpConfig;
}

void BuffModStealHpConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModStealHpConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(active_, delaytime_);
    ZR_(steallifetype_, stealmoment_);
    if (has_steallifedata()) {
      if (steallifedata_ != NULL) steallifedata_->::pb::BuffDataModel::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  buffsubtypefilter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModStealHpConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModStealHpConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_StealLifeType;
        break;
      }

      // optional int32 StealLifeType = 3;
      case 3: {
        if (tag == 24) {
         parse_StealLifeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steallifetype_)));
          set_has_steallifetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_StealLifeData;
        break;
      }

      // optional .pb.BuffDataModel StealLifeData = 4;
      case 4: {
        if (tag == 34) {
         parse_StealLifeData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_steallifedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_StealMoment;
        break;
      }

      // optional int32 StealMoment = 5;
      case 5: {
        if (tag == 40) {
         parse_StealMoment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stealmoment_)));
          set_has_stealmoment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_BuffSubTypeFilter;
        break;
      }

      // repeated int32 BuffSubTypeFilter = 6;
      case 6: {
        if (tag == 48) {
         parse_BuffSubTypeFilter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_buffsubtypefilter())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buffsubtypefilter())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_BuffSubTypeFilter;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModStealHpConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModStealHpConfig)
  return false;
#undef DO_
}

void BuffModStealHpConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModStealHpConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional int32 StealLifeType = 3;
  if (has_steallifetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->steallifetype(), output);
  }

  // optional .pb.BuffDataModel StealLifeData = 4;
  if (has_steallifedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->steallifedata(), output);
  }

  // optional int32 StealMoment = 5;
  if (has_stealmoment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stealmoment(), output);
  }

  // repeated int32 BuffSubTypeFilter = 6;
  for (int i = 0; i < this->buffsubtypefilter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->buffsubtypefilter(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModStealHpConfig)
}

::google::protobuf::uint8* BuffModStealHpConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModStealHpConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional int32 StealLifeType = 3;
  if (has_steallifetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->steallifetype(), target);
  }

  // optional .pb.BuffDataModel StealLifeData = 4;
  if (has_steallifedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->steallifedata(), target);
  }

  // optional int32 StealMoment = 5;
  if (has_stealmoment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stealmoment(), target);
  }

  // repeated int32 BuffSubTypeFilter = 6;
  for (int i = 0; i < this->buffsubtypefilter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->buffsubtypefilter(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModStealHpConfig)
  return target;
}

int BuffModStealHpConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 StealLifeType = 3;
    if (has_steallifetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->steallifetype());
    }

    // optional .pb.BuffDataModel StealLifeData = 4;
    if (has_steallifedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->steallifedata());
    }

    // optional int32 StealMoment = 5;
    if (has_stealmoment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stealmoment());
    }

  }
  // repeated int32 BuffSubTypeFilter = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffsubtypefilter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->buffsubtypefilter(i));
    }
    total_size += 1 * this->buffsubtypefilter_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModStealHpConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModStealHpConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModStealHpConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModStealHpConfig::MergeFrom(const BuffModStealHpConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffsubtypefilter_.MergeFrom(from.buffsubtypefilter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_steallifetype()) {
      set_steallifetype(from.steallifetype());
    }
    if (from.has_steallifedata()) {
      mutable_steallifedata()->::pb::BuffDataModel::MergeFrom(from.steallifedata());
    }
    if (from.has_stealmoment()) {
      set_stealmoment(from.stealmoment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModStealHpConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModStealHpConfig::CopyFrom(const BuffModStealHpConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModStealHpConfig::IsInitialized() const {

  return true;
}

void BuffModStealHpConfig::Swap(BuffModStealHpConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(steallifetype_, other->steallifetype_);
    std::swap(steallifedata_, other->steallifedata_);
    std::swap(stealmoment_, other->stealmoment_);
    buffsubtypefilter_.Swap(&other->buffsubtypefilter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModStealHpConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModStealHpConfig_descriptor_;
  metadata.reflection = BuffModStealHpConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModDamageShareConfig::kActiveFieldNumber;
const int BuffModDamageShareConfig::kDelayTimeFieldNumber;
const int BuffModDamageShareConfig::kPercentParamFieldNumber;
const int BuffModDamageShareConfig::kPercentGrowthFieldNumber;
#endif  // !_MSC_VER

BuffModDamageShareConfig::BuffModDamageShareConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModDamageShareConfig)
}

void BuffModDamageShareConfig::InitAsDefaultInstance() {
}

BuffModDamageShareConfig::BuffModDamageShareConfig(const BuffModDamageShareConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModDamageShareConfig)
}

void BuffModDamageShareConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  percentparam_ = 0;
  percentgrowth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModDamageShareConfig::~BuffModDamageShareConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModDamageShareConfig)
  SharedDtor();
}

void BuffModDamageShareConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModDamageShareConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModDamageShareConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModDamageShareConfig_descriptor_;
}

const BuffModDamageShareConfig& BuffModDamageShareConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

BuffModDamageShareConfig* BuffModDamageShareConfig::default_instance_ = NULL;

BuffModDamageShareConfig* BuffModDamageShareConfig::New() const {
  return new BuffModDamageShareConfig;
}

void BuffModDamageShareConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModDamageShareConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, percentgrowth_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModDamageShareConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModDamageShareConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PercentParam;
        break;
      }

      // optional int32 PercentParam = 3;
      case 3: {
        if (tag == 24) {
         parse_PercentParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percentparam_)));
          set_has_percentparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PercentGrowth;
        break;
      }

      // optional int32 PercentGrowth = 4;
      case 4: {
        if (tag == 32) {
         parse_PercentGrowth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percentgrowth_)));
          set_has_percentgrowth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModDamageShareConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModDamageShareConfig)
  return false;
#undef DO_
}

void BuffModDamageShareConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModDamageShareConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional int32 PercentParam = 3;
  if (has_percentparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->percentparam(), output);
  }

  // optional int32 PercentGrowth = 4;
  if (has_percentgrowth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->percentgrowth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModDamageShareConfig)
}

::google::protobuf::uint8* BuffModDamageShareConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModDamageShareConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional int32 PercentParam = 3;
  if (has_percentparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->percentparam(), target);
  }

  // optional int32 PercentGrowth = 4;
  if (has_percentgrowth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->percentgrowth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModDamageShareConfig)
  return target;
}

int BuffModDamageShareConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 PercentParam = 3;
    if (has_percentparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentparam());
    }

    // optional int32 PercentGrowth = 4;
    if (has_percentgrowth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentgrowth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModDamageShareConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModDamageShareConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModDamageShareConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModDamageShareConfig::MergeFrom(const BuffModDamageShareConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_percentparam()) {
      set_percentparam(from.percentparam());
    }
    if (from.has_percentgrowth()) {
      set_percentgrowth(from.percentgrowth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModDamageShareConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModDamageShareConfig::CopyFrom(const BuffModDamageShareConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModDamageShareConfig::IsInitialized() const {

  return true;
}

void BuffModDamageShareConfig::Swap(BuffModDamageShareConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(percentparam_, other->percentparam_);
    std::swap(percentgrowth_, other->percentgrowth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModDamageShareConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModDamageShareConfig_descriptor_;
  metadata.reflection = BuffModDamageShareConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModDamageCopyConfig::kActiveFieldNumber;
const int BuffModDamageCopyConfig::kDelayTimeFieldNumber;
const int BuffModDamageCopyConfig::kPercentParamFieldNumber;
const int BuffModDamageCopyConfig::kPercentGrowthFieldNumber;
const int BuffModDamageCopyConfig::kIgnoreSelfFieldNumber;
#endif  // !_MSC_VER

BuffModDamageCopyConfig::BuffModDamageCopyConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModDamageCopyConfig)
}

void BuffModDamageCopyConfig::InitAsDefaultInstance() {
}

BuffModDamageCopyConfig::BuffModDamageCopyConfig(const BuffModDamageCopyConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModDamageCopyConfig)
}

void BuffModDamageCopyConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  percentparam_ = 0;
  percentgrowth_ = 0;
  ignoreself_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModDamageCopyConfig::~BuffModDamageCopyConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModDamageCopyConfig)
  SharedDtor();
}

void BuffModDamageCopyConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModDamageCopyConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModDamageCopyConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModDamageCopyConfig_descriptor_;
}

const BuffModDamageCopyConfig& BuffModDamageCopyConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

BuffModDamageCopyConfig* BuffModDamageCopyConfig::default_instance_ = NULL;

BuffModDamageCopyConfig* BuffModDamageCopyConfig::New() const {
  return new BuffModDamageCopyConfig;
}

void BuffModDamageCopyConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModDamageCopyConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(delaytime_, percentgrowth_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModDamageCopyConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModDamageCopyConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PercentParam;
        break;
      }

      // optional int32 PercentParam = 3;
      case 3: {
        if (tag == 24) {
         parse_PercentParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percentparam_)));
          set_has_percentparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PercentGrowth;
        break;
      }

      // optional int32 PercentGrowth = 4;
      case 4: {
        if (tag == 32) {
         parse_PercentGrowth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percentgrowth_)));
          set_has_percentgrowth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_IgnoreSelf;
        break;
      }

      // optional bool IgnoreSelf = 5;
      case 5: {
        if (tag == 40) {
         parse_IgnoreSelf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignoreself_)));
          set_has_ignoreself();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModDamageCopyConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModDamageCopyConfig)
  return false;
#undef DO_
}

void BuffModDamageCopyConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModDamageCopyConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional int32 PercentParam = 3;
  if (has_percentparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->percentparam(), output);
  }

  // optional int32 PercentGrowth = 4;
  if (has_percentgrowth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->percentgrowth(), output);
  }

  // optional bool IgnoreSelf = 5;
  if (has_ignoreself()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ignoreself(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModDamageCopyConfig)
}

::google::protobuf::uint8* BuffModDamageCopyConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModDamageCopyConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional int32 PercentParam = 3;
  if (has_percentparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->percentparam(), target);
  }

  // optional int32 PercentGrowth = 4;
  if (has_percentgrowth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->percentgrowth(), target);
  }

  // optional bool IgnoreSelf = 5;
  if (has_ignoreself()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ignoreself(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModDamageCopyConfig)
  return target;
}

int BuffModDamageCopyConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 PercentParam = 3;
    if (has_percentparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentparam());
    }

    // optional int32 PercentGrowth = 4;
    if (has_percentgrowth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentgrowth());
    }

    // optional bool IgnoreSelf = 5;
    if (has_ignoreself()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModDamageCopyConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModDamageCopyConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModDamageCopyConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModDamageCopyConfig::MergeFrom(const BuffModDamageCopyConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_percentparam()) {
      set_percentparam(from.percentparam());
    }
    if (from.has_percentgrowth()) {
      set_percentgrowth(from.percentgrowth());
    }
    if (from.has_ignoreself()) {
      set_ignoreself(from.ignoreself());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModDamageCopyConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModDamageCopyConfig::CopyFrom(const BuffModDamageCopyConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModDamageCopyConfig::IsInitialized() const {

  return true;
}

void BuffModDamageCopyConfig::Swap(BuffModDamageCopyConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(percentparam_, other->percentparam_);
    std::swap(percentgrowth_, other->percentgrowth_);
    std::swap(ignoreself_, other->ignoreself_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModDamageCopyConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModDamageCopyConfig_descriptor_;
  metadata.reflection = BuffModDamageCopyConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModHealCopyConfig::kActiveFieldNumber;
const int BuffModHealCopyConfig::kDelayTimeFieldNumber;
const int BuffModHealCopyConfig::kPercentParamFieldNumber;
const int BuffModHealCopyConfig::kPercentGrowthFieldNumber;
#endif  // !_MSC_VER

BuffModHealCopyConfig::BuffModHealCopyConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModHealCopyConfig)
}

void BuffModHealCopyConfig::InitAsDefaultInstance() {
}

BuffModHealCopyConfig::BuffModHealCopyConfig(const BuffModHealCopyConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModHealCopyConfig)
}

void BuffModHealCopyConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  percentparam_ = 0;
  percentgrowth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModHealCopyConfig::~BuffModHealCopyConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModHealCopyConfig)
  SharedDtor();
}

void BuffModHealCopyConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModHealCopyConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModHealCopyConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModHealCopyConfig_descriptor_;
}

const BuffModHealCopyConfig& BuffModHealCopyConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

BuffModHealCopyConfig* BuffModHealCopyConfig::default_instance_ = NULL;

BuffModHealCopyConfig* BuffModHealCopyConfig::New() const {
  return new BuffModHealCopyConfig;
}

void BuffModHealCopyConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModHealCopyConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, percentgrowth_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModHealCopyConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModHealCopyConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PercentParam;
        break;
      }

      // optional int32 PercentParam = 3;
      case 3: {
        if (tag == 24) {
         parse_PercentParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percentparam_)));
          set_has_percentparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PercentGrowth;
        break;
      }

      // optional int32 PercentGrowth = 4;
      case 4: {
        if (tag == 32) {
         parse_PercentGrowth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percentgrowth_)));
          set_has_percentgrowth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModHealCopyConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModHealCopyConfig)
  return false;
#undef DO_
}

void BuffModHealCopyConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModHealCopyConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional int32 PercentParam = 3;
  if (has_percentparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->percentparam(), output);
  }

  // optional int32 PercentGrowth = 4;
  if (has_percentgrowth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->percentgrowth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModHealCopyConfig)
}

::google::protobuf::uint8* BuffModHealCopyConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModHealCopyConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional int32 PercentParam = 3;
  if (has_percentparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->percentparam(), target);
  }

  // optional int32 PercentGrowth = 4;
  if (has_percentgrowth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->percentgrowth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModHealCopyConfig)
  return target;
}

int BuffModHealCopyConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 PercentParam = 3;
    if (has_percentparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentparam());
    }

    // optional int32 PercentGrowth = 4;
    if (has_percentgrowth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentgrowth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModHealCopyConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModHealCopyConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModHealCopyConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModHealCopyConfig::MergeFrom(const BuffModHealCopyConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_percentparam()) {
      set_percentparam(from.percentparam());
    }
    if (from.has_percentgrowth()) {
      set_percentgrowth(from.percentgrowth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModHealCopyConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModHealCopyConfig::CopyFrom(const BuffModHealCopyConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModHealCopyConfig::IsInitialized() const {

  return true;
}

void BuffModHealCopyConfig::Swap(BuffModHealCopyConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(percentparam_, other->percentparam_);
    std::swap(percentgrowth_, other->percentgrowth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModHealCopyConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModHealCopyConfig_descriptor_;
  metadata.reflection = BuffModHealCopyConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModHpConfig::kActiveFieldNumber;
const int BuffModHpConfig::kDelayTimeFieldNumber;
const int BuffModHpConfig::kCountFieldNumber;
const int BuffModHpConfig::kIntervalFieldNumber;
const int BuffModHpConfig::kTypeFieldNumber;
const int BuffModHpConfig::kDataFieldNumber;
const int BuffModHpConfig::kPercentGrowthFieldNumber;
const int BuffModHpConfig::kValueGrowthFieldNumber;
#endif  // !_MSC_VER

BuffModHpConfig::BuffModHpConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModHpConfig)
}

void BuffModHpConfig::InitAsDefaultInstance() {
  data_ = const_cast< ::pb::BuffDatasModel*>(&::pb::BuffDatasModel::default_instance());
}

BuffModHpConfig::BuffModHpConfig(const BuffModHpConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModHpConfig)
}

void BuffModHpConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  count_ = 0;
  interval_ = 0;
  type_ = 0;
  data_ = NULL;
  percentgrowth_ = 0;
  valuegrowth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModHpConfig::~BuffModHpConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModHpConfig)
  SharedDtor();
}

void BuffModHpConfig::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void BuffModHpConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModHpConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModHpConfig_descriptor_;
}

const BuffModHpConfig& BuffModHpConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

BuffModHpConfig* BuffModHpConfig::default_instance_ = NULL;

BuffModHpConfig* BuffModHpConfig::New() const {
  return new BuffModHpConfig;
}

void BuffModHpConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModHpConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(active_, interval_);
    ZR_(type_, valuegrowth_);
    if (has_data()) {
      if (data_ != NULL) data_->::pb::BuffDatasModel::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModHpConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModHpConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Count;
        break;
      }

      // optional int32 Count = 3;
      case 3: {
        if (tag == 24) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Interval;
        break;
      }

      // optional int32 Interval = 4;
      case 4: {
        if (tag == 32) {
         parse_Interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Type;
        break;
      }

      // optional int32 Type = 5;
      case 5: {
        if (tag == 40) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Data;
        break;
      }

      // optional .pb.BuffDatasModel Data = 7;
      case 7: {
        if (tag == 58) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_PercentGrowth;
        break;
      }

      // optional int32 PercentGrowth = 8;
      case 8: {
        if (tag == 64) {
         parse_PercentGrowth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percentgrowth_)));
          set_has_percentgrowth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ValueGrowth;
        break;
      }

      // optional int32 ValueGrowth = 9;
      case 9: {
        if (tag == 72) {
         parse_ValueGrowth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuegrowth_)));
          set_has_valuegrowth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModHpConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModHpConfig)
  return false;
#undef DO_
}

void BuffModHpConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModHpConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional int32 Count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // optional int32 Interval = 4;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->interval(), output);
  }

  // optional int32 Type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional .pb.BuffDatasModel Data = 7;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->data(), output);
  }

  // optional int32 PercentGrowth = 8;
  if (has_percentgrowth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->percentgrowth(), output);
  }

  // optional int32 ValueGrowth = 9;
  if (has_valuegrowth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->valuegrowth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModHpConfig)
}

::google::protobuf::uint8* BuffModHpConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModHpConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional int32 Count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // optional int32 Interval = 4;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->interval(), target);
  }

  // optional int32 Type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional .pb.BuffDatasModel Data = 7;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->data(), target);
  }

  // optional int32 PercentGrowth = 8;
  if (has_percentgrowth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->percentgrowth(), target);
  }

  // optional int32 ValueGrowth = 9;
  if (has_valuegrowth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->valuegrowth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModHpConfig)
  return target;
}

int BuffModHpConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 Count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 Interval = 4;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }

    // optional int32 Type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .pb.BuffDatasModel Data = 7;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional int32 PercentGrowth = 8;
    if (has_percentgrowth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentgrowth());
    }

    // optional int32 ValueGrowth = 9;
    if (has_valuegrowth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuegrowth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModHpConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModHpConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModHpConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModHpConfig::MergeFrom(const BuffModHpConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      mutable_data()->::pb::BuffDatasModel::MergeFrom(from.data());
    }
    if (from.has_percentgrowth()) {
      set_percentgrowth(from.percentgrowth());
    }
    if (from.has_valuegrowth()) {
      set_valuegrowth(from.valuegrowth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModHpConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModHpConfig::CopyFrom(const BuffModHpConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModHpConfig::IsInitialized() const {

  return true;
}

void BuffModHpConfig::Swap(BuffModHpConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(count_, other->count_);
    std::swap(interval_, other->interval_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(percentgrowth_, other->percentgrowth_);
    std::swap(valuegrowth_, other->valuegrowth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModHpConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModHpConfig_descriptor_;
  metadata.reflection = BuffModHpConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModRageConfig::kActiveFieldNumber;
const int BuffModRageConfig::kDelayTimeFieldNumber;
const int BuffModRageConfig::kCountFieldNumber;
const int BuffModRageConfig::kIntervalFieldNumber;
const int BuffModRageConfig::kTypeFieldNumber;
const int BuffModRageConfig::kDataFieldNumber;
const int BuffModRageConfig::kPercentGrowthFieldNumber;
const int BuffModRageConfig::kValueGrowthFieldNumber;
#endif  // !_MSC_VER

BuffModRageConfig::BuffModRageConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModRageConfig)
}

void BuffModRageConfig::InitAsDefaultInstance() {
  data_ = const_cast< ::pb::BuffDatasModel*>(&::pb::BuffDatasModel::default_instance());
}

BuffModRageConfig::BuffModRageConfig(const BuffModRageConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModRageConfig)
}

void BuffModRageConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  count_ = 0;
  interval_ = 0;
  type_ = 0;
  data_ = NULL;
  percentgrowth_ = 0;
  valuegrowth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModRageConfig::~BuffModRageConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModRageConfig)
  SharedDtor();
}

void BuffModRageConfig::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void BuffModRageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModRageConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModRageConfig_descriptor_;
}

const BuffModRageConfig& BuffModRageConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

BuffModRageConfig* BuffModRageConfig::default_instance_ = NULL;

BuffModRageConfig* BuffModRageConfig::New() const {
  return new BuffModRageConfig;
}

void BuffModRageConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModRageConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(active_, interval_);
    ZR_(type_, valuegrowth_);
    if (has_data()) {
      if (data_ != NULL) data_->::pb::BuffDatasModel::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModRageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModRageConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Count;
        break;
      }

      // optional int32 Count = 3;
      case 3: {
        if (tag == 24) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Interval;
        break;
      }

      // optional int32 Interval = 4;
      case 4: {
        if (tag == 32) {
         parse_Interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Type;
        break;
      }

      // optional int32 Type = 5;
      case 5: {
        if (tag == 40) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Data;
        break;
      }

      // optional .pb.BuffDatasModel Data = 6;
      case 6: {
        if (tag == 50) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_PercentGrowth;
        break;
      }

      // optional int32 PercentGrowth = 7;
      case 7: {
        if (tag == 56) {
         parse_PercentGrowth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percentgrowth_)));
          set_has_percentgrowth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ValueGrowth;
        break;
      }

      // optional int32 ValueGrowth = 8;
      case 8: {
        if (tag == 64) {
         parse_ValueGrowth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuegrowth_)));
          set_has_valuegrowth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModRageConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModRageConfig)
  return false;
#undef DO_
}

void BuffModRageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModRageConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional int32 Count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // optional int32 Interval = 4;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->interval(), output);
  }

  // optional int32 Type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional .pb.BuffDatasModel Data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(), output);
  }

  // optional int32 PercentGrowth = 7;
  if (has_percentgrowth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->percentgrowth(), output);
  }

  // optional int32 ValueGrowth = 8;
  if (has_valuegrowth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->valuegrowth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModRageConfig)
}

::google::protobuf::uint8* BuffModRageConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModRageConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional int32 Count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // optional int32 Interval = 4;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->interval(), target);
  }

  // optional int32 Type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional .pb.BuffDatasModel Data = 6;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(), target);
  }

  // optional int32 PercentGrowth = 7;
  if (has_percentgrowth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->percentgrowth(), target);
  }

  // optional int32 ValueGrowth = 8;
  if (has_valuegrowth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->valuegrowth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModRageConfig)
  return target;
}

int BuffModRageConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 Count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 Interval = 4;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }

    // optional int32 Type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .pb.BuffDatasModel Data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional int32 PercentGrowth = 7;
    if (has_percentgrowth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentgrowth());
    }

    // optional int32 ValueGrowth = 8;
    if (has_valuegrowth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuegrowth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModRageConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModRageConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModRageConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModRageConfig::MergeFrom(const BuffModRageConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      mutable_data()->::pb::BuffDatasModel::MergeFrom(from.data());
    }
    if (from.has_percentgrowth()) {
      set_percentgrowth(from.percentgrowth());
    }
    if (from.has_valuegrowth()) {
      set_valuegrowth(from.valuegrowth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModRageConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModRageConfig::CopyFrom(const BuffModRageConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModRageConfig::IsInitialized() const {

  return true;
}

void BuffModRageConfig::Swap(BuffModRageConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(count_, other->count_);
    std::swap(interval_, other->interval_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(percentgrowth_, other->percentgrowth_);
    std::swap(valuegrowth_, other->valuegrowth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModRageConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModRageConfig_descriptor_;
  metadata.reflection = BuffModRageConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModRecordDataConfig::kActiveFieldNumber;
const int BuffModRecordDataConfig::kDelayTimeFieldNumber;
const int BuffModRecordDataConfig::kTypeMajorFieldNumber;
const int BuffModRecordDataConfig::kTriggerBodyFieldNumber;
const int BuffModRecordDataConfig::kDataTypeFieldNumber;
const int BuffModRecordDataConfig::kTypeSubFieldNumber;
#endif  // !_MSC_VER

BuffModRecordDataConfig::BuffModRecordDataConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModRecordDataConfig)
}

void BuffModRecordDataConfig::InitAsDefaultInstance() {
}

BuffModRecordDataConfig::BuffModRecordDataConfig(const BuffModRecordDataConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModRecordDataConfig)
}

void BuffModRecordDataConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  typemajor_ = 0;
  triggerbody_ = 0;
  datatype_ = 0;
  typesub_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModRecordDataConfig::~BuffModRecordDataConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModRecordDataConfig)
  SharedDtor();
}

void BuffModRecordDataConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModRecordDataConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModRecordDataConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModRecordDataConfig_descriptor_;
}

const BuffModRecordDataConfig& BuffModRecordDataConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

BuffModRecordDataConfig* BuffModRecordDataConfig::default_instance_ = NULL;

BuffModRecordDataConfig* BuffModRecordDataConfig::New() const {
  return new BuffModRecordDataConfig;
}

void BuffModRecordDataConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModRecordDataConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(active_, typesub_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModRecordDataConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModRecordDataConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TypeMajor;
        break;
      }

      // optional int32 TypeMajor = 3;
      case 3: {
        if (tag == 24) {
         parse_TypeMajor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typemajor_)));
          set_has_typemajor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TriggerBody;
        break;
      }

      // optional int32 TriggerBody = 4;
      case 4: {
        if (tag == 32) {
         parse_TriggerBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggerbody_)));
          set_has_triggerbody();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_DataType;
        break;
      }

      // optional int32 DataType = 5;
      case 5: {
        if (tag == 40) {
         parse_DataType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datatype_)));
          set_has_datatype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_TypeSub;
        break;
      }

      // optional int32 TypeSub = 6;
      case 6: {
        if (tag == 48) {
         parse_TypeSub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typesub_)));
          set_has_typesub();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModRecordDataConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModRecordDataConfig)
  return false;
#undef DO_
}

void BuffModRecordDataConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModRecordDataConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional int32 TypeMajor = 3;
  if (has_typemajor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->typemajor(), output);
  }

  // optional int32 TriggerBody = 4;
  if (has_triggerbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->triggerbody(), output);
  }

  // optional int32 DataType = 5;
  if (has_datatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->datatype(), output);
  }

  // optional int32 TypeSub = 6;
  if (has_typesub()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->typesub(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModRecordDataConfig)
}

::google::protobuf::uint8* BuffModRecordDataConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModRecordDataConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional int32 TypeMajor = 3;
  if (has_typemajor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->typemajor(), target);
  }

  // optional int32 TriggerBody = 4;
  if (has_triggerbody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->triggerbody(), target);
  }

  // optional int32 DataType = 5;
  if (has_datatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->datatype(), target);
  }

  // optional int32 TypeSub = 6;
  if (has_typesub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->typesub(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModRecordDataConfig)
  return target;
}

int BuffModRecordDataConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 TypeMajor = 3;
    if (has_typemajor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typemajor());
    }

    // optional int32 TriggerBody = 4;
    if (has_triggerbody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggerbody());
    }

    // optional int32 DataType = 5;
    if (has_datatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datatype());
    }

    // optional int32 TypeSub = 6;
    if (has_typesub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typesub());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModRecordDataConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModRecordDataConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModRecordDataConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModRecordDataConfig::MergeFrom(const BuffModRecordDataConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_typemajor()) {
      set_typemajor(from.typemajor());
    }
    if (from.has_triggerbody()) {
      set_triggerbody(from.triggerbody());
    }
    if (from.has_datatype()) {
      set_datatype(from.datatype());
    }
    if (from.has_typesub()) {
      set_typesub(from.typesub());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModRecordDataConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModRecordDataConfig::CopyFrom(const BuffModRecordDataConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModRecordDataConfig::IsInitialized() const {

  return true;
}

void BuffModRecordDataConfig::Swap(BuffModRecordDataConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(typemajor_, other->typemajor_);
    std::swap(triggerbody_, other->triggerbody_);
    std::swap(datatype_, other->datatype_);
    std::swap(typesub_, other->typesub_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModRecordDataConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModRecordDataConfig_descriptor_;
  metadata.reflection = BuffModRecordDataConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModHarmOnMoveConfig::kActiveFieldNumber;
const int BuffModHarmOnMoveConfig::kSkillIdFieldNumber;
#endif  // !_MSC_VER

BuffModHarmOnMoveConfig::BuffModHarmOnMoveConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModHarmOnMoveConfig)
}

void BuffModHarmOnMoveConfig::InitAsDefaultInstance() {
}

BuffModHarmOnMoveConfig::BuffModHarmOnMoveConfig(const BuffModHarmOnMoveConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModHarmOnMoveConfig)
}

void BuffModHarmOnMoveConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModHarmOnMoveConfig::~BuffModHarmOnMoveConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModHarmOnMoveConfig)
  SharedDtor();
}

void BuffModHarmOnMoveConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModHarmOnMoveConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModHarmOnMoveConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModHarmOnMoveConfig_descriptor_;
}

const BuffModHarmOnMoveConfig& BuffModHarmOnMoveConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

BuffModHarmOnMoveConfig* BuffModHarmOnMoveConfig::default_instance_ = NULL;

BuffModHarmOnMoveConfig* BuffModHarmOnMoveConfig::New() const {
  return new BuffModHarmOnMoveConfig;
}

void BuffModHarmOnMoveConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModHarmOnMoveConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, skillid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModHarmOnMoveConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModHarmOnMoveConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SkillId;
        break;
      }

      // optional int32 SkillId = 2;
      case 2: {
        if (tag == 16) {
         parse_SkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModHarmOnMoveConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModHarmOnMoveConfig)
  return false;
#undef DO_
}

void BuffModHarmOnMoveConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModHarmOnMoveConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 SkillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModHarmOnMoveConfig)
}

::google::protobuf::uint8* BuffModHarmOnMoveConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModHarmOnMoveConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 SkillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModHarmOnMoveConfig)
  return target;
}

int BuffModHarmOnMoveConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 SkillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModHarmOnMoveConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModHarmOnMoveConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModHarmOnMoveConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModHarmOnMoveConfig::MergeFrom(const BuffModHarmOnMoveConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModHarmOnMoveConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModHarmOnMoveConfig::CopyFrom(const BuffModHarmOnMoveConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModHarmOnMoveConfig::IsInitialized() const {

  return true;
}

void BuffModHarmOnMoveConfig::Swap(BuffModHarmOnMoveConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModHarmOnMoveConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModHarmOnMoveConfig_descriptor_;
  metadata.reflection = BuffModHarmOnMoveConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModDamageImmunityConfig::kActiveFieldNumber;
const int BuffModDamageImmunityConfig::kTypeFieldNumber;
#endif  // !_MSC_VER

BuffModDamageImmunityConfig::BuffModDamageImmunityConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModDamageImmunityConfig)
}

void BuffModDamageImmunityConfig::InitAsDefaultInstance() {
}

BuffModDamageImmunityConfig::BuffModDamageImmunityConfig(const BuffModDamageImmunityConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModDamageImmunityConfig)
}

void BuffModDamageImmunityConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModDamageImmunityConfig::~BuffModDamageImmunityConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModDamageImmunityConfig)
  SharedDtor();
}

void BuffModDamageImmunityConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModDamageImmunityConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModDamageImmunityConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModDamageImmunityConfig_descriptor_;
}

const BuffModDamageImmunityConfig& BuffModDamageImmunityConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

BuffModDamageImmunityConfig* BuffModDamageImmunityConfig::default_instance_ = NULL;

BuffModDamageImmunityConfig* BuffModDamageImmunityConfig::New() const {
  return new BuffModDamageImmunityConfig;
}

void BuffModDamageImmunityConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModDamageImmunityConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModDamageImmunityConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModDamageImmunityConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional int32 Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModDamageImmunityConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModDamageImmunityConfig)
  return false;
#undef DO_
}

void BuffModDamageImmunityConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModDamageImmunityConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModDamageImmunityConfig)
}

::google::protobuf::uint8* BuffModDamageImmunityConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModDamageImmunityConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModDamageImmunityConfig)
  return target;
}

int BuffModDamageImmunityConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModDamageImmunityConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModDamageImmunityConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModDamageImmunityConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModDamageImmunityConfig::MergeFrom(const BuffModDamageImmunityConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModDamageImmunityConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModDamageImmunityConfig::CopyFrom(const BuffModDamageImmunityConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModDamageImmunityConfig::IsInitialized() const {

  return true;
}

void BuffModDamageImmunityConfig::Swap(BuffModDamageImmunityConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModDamageImmunityConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModDamageImmunityConfig_descriptor_;
  metadata.reflection = BuffModDamageImmunityConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffData::kIdFieldNumber;
const int BuffData::kBaseDataModelFieldNumber;
const int BuffData::kSpecialHitModelFieldNumber;
const int BuffData::kBuffModHpConfigFieldNumber;
const int BuffData::kBuffModReflectDamageConfigFieldNumber;
const int BuffData::kBuffModReflectSkillConfigFieldNumber;
const int BuffData::kBuffModBuffImmunityConfigFieldNumber;
const int BuffData::kBuffModPropertyConfigFieldNumber;
const int BuffData::kBuffModAttackSpeedConfigFieldNumber;
const int BuffData::kBuffModRageConfigFieldNumber;
const int BuffData::kBuffModAbsorbDamageConfigFieldNumber;
const int BuffData::kBuffModNonHostileTargettableConfigFieldNumber;
const int BuffData::kBuffModNonTargettableConfigFieldNumber;
const int BuffData::kBuffModDamageShareConfigFieldNumber;
const int BuffData::kBuffModHealCopyConfigFieldNumber;
const int BuffData::kBuffModStealHpConfigFieldNumber;
const int BuffData::kBuffModSkillImmunityConfigFieldNumber;
const int BuffData::kBuffModToughnessConfigFieldNumber;
const int BuffData::kBuffModDispelConfigFieldNumber;
const int BuffData::kBuffModDamageImmunityConfigFieldNumber;
const int BuffData::kBuffModHitActionImmunityConfigFieldNumber;
const int BuffData::kBuffModArmAttrAddConfigFieldNumber;
const int BuffData::kBuffModSkillOnLowLifeConfigFieldNumber;
const int BuffData::kBuffModMoveControlImmunityConfigFieldNumber;
const int BuffData::kBuffModConditionChangeConfigFieldNumber;
const int BuffData::kBuffModPropertyDecConfigFieldNumber;
const int BuffData::kBuffModChangeDmgByBuffSubConfigFieldNumber;
const int BuffData::kBuffModShrinkControlDurationConfigFieldNumber;
const int BuffData::kBuffModUnlimitedShieldConfigFieldNumber;
const int BuffData::kBuffModReflectBuffConfigFieldNumber;
const int BuffData::kBuffModFatalDmgShiftConfigFieldNumber;
const int BuffData::kBuffModRageImmunityConfigFieldNumber;
const int BuffData::kBuffModIgnoreShieldConfigFieldNumber;
const int BuffData::kBuffModRevertStateOnEndConfigFieldNumber;
const int BuffData::kBuffModChangeCastRangeConfigFieldNumber;
const int BuffData::kBuffModSetMaxLoseHPConfigFieldNumber;
const int BuffData::kBuffModAdjustReflectedDamageConfigFieldNumber;
const int BuffData::kBuffModActiveUIEffectConfigFieldNumber;
const int BuffData::kBuffModAdjustBuffHitRateConfigFieldNumber;
const int BuffData::kBuffModLimitByMaxHpRateConfigFieldNumber;
const int BuffData::kBuffModBattleArcherModifyConfigFieldNumber;
const int BuffData::kBuffModNoMoveConfigFieldNumber;
const int BuffData::kBuffModNoNormalSkillConfigFieldNumber;
const int BuffData::kBuffModNoSkillConfigFieldNumber;
const int BuffData::kBuffModDizzinessConfigFieldNumber;
const int BuffData::kBuffModFreezeConfigFieldNumber;
const int BuffData::kBuffModCharmedConfigFieldNumber;
const int BuffData::kBuffModChaosConfigFieldNumber;
const int BuffData::kBuffModRandomMoveConfigFieldNumber;
const int BuffData::kBuffModDamageCopyConfigFieldNumber;
const int BuffData::kBuffModTauntConfigFieldNumber;
const int BuffData::kBuffModNoRageRecoverConfigFieldNumber;
const int BuffData::kBuffModDisableConfigFieldNumber;
const int BuffData::kBuffModHarmOnMoveConfigFieldNumber;
const int BuffData::kBuffModFearConfigFieldNumber;
const int BuffData::kBuffModNoSuckBloodConfigFieldNumber;
const int BuffData::kBuffModNoReviveConfigFieldNumber;
const int BuffData::kBuffModTransformationConfigFieldNumber;
const int BuffData::kBuffModNothingConfigFieldNumber;
const int BuffData::kBuffModTransformScaleConfigFieldNumber;
const int BuffData::kBuffModDieConfigFieldNumber;
const int BuffData::kBuffModRepeatSkillConfigFieldNumber;
const int BuffData::kBuffModSkillOnEndConfigFieldNumber;
const int BuffData::kBuffModSpecifySkillTidConfigFieldNumber;
const int BuffData::kBuffModResetBuffTimeConfigFieldNumber;
const int BuffData::kBuffModAddSkillConfigFieldNumber;
const int BuffData::kBuffModPropertyFormulaConfigFieldNumber;
const int BuffData::kBuffModEffectInRangeConfigFieldNumber;
const int BuffData::kBuffModRecordDataConfigFieldNumber;
const int BuffData::kBuffModSkillOnEndBConfigFieldNumber;
const int BuffData::kBuffModHideSomeAppearanceConfigFieldNumber;
const int BuffData::kBuffModInheritExistBuffStackConfigFieldNumber;
const int BuffData::kBuffModScaleTextConfigFieldNumber;
const int BuffData::kBuffModAddDefPointConfigFieldNumber;
const int BuffData::kBuffModRemoveDefPointConfigFieldNumber;
const int BuffData::kBuffModEffectInRangeConditionConfigFieldNumber;
const int BuffData::kBuffModChangeDirConfigFieldNumber;
const int BuffData::kBuffModTDMoniterDefenderStateConfigFieldNumber;
const int BuffData::kBuffModTDNoBeanConfigFieldNumber;
const int BuffData::kBuffModTDRepeatSendBeanConfigFieldNumber;
const int BuffData::kBuffModTDRepeatCheckBeanConfigFieldNumber;
const int BuffData::kBuffModBuffOnStackConfigFieldNumber;
const int BuffData::kBuffModChangeSummonedAIConfigFieldNumber;
#endif  // !_MSC_VER

BuffData::BuffData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffData)
}

void BuffData::InitAsDefaultInstance() {
  basedatamodel_ = const_cast< ::pb::BuffBaseDataModel*>(&::pb::BuffBaseDataModel::default_instance());
  specialhitmodel_ = const_cast< ::pb::SpecialHitModel*>(&::pb::SpecialHitModel::default_instance());
  buffmodhpconfig_ = const_cast< ::pb::BuffModHpConfig*>(&::pb::BuffModHpConfig::default_instance());
  buffmodreflectdamageconfig_ = const_cast< ::pb::BuffModReflectDamageConfig*>(&::pb::BuffModReflectDamageConfig::default_instance());
  buffmodreflectskillconfig_ = const_cast< ::pb::BuffModReflectSkillConfig*>(&::pb::BuffModReflectSkillConfig::default_instance());
  buffmodbuffimmunityconfig_ = const_cast< ::pb::BuffModBuffImmunityConfig*>(&::pb::BuffModBuffImmunityConfig::default_instance());
  buffmodpropertyconfig_ = const_cast< ::pb::BuffModPropertyConfig*>(&::pb::BuffModPropertyConfig::default_instance());
  buffmodattackspeedconfig_ = const_cast< ::pb::BuffModAttackSpeedConfig*>(&::pb::BuffModAttackSpeedConfig::default_instance());
  buffmodrageconfig_ = const_cast< ::pb::BuffModRageConfig*>(&::pb::BuffModRageConfig::default_instance());
  buffmodabsorbdamageconfig_ = const_cast< ::pb::BuffModAbsorbDamageConfig*>(&::pb::BuffModAbsorbDamageConfig::default_instance());
  buffmodnonhostiletargettableconfig_ = const_cast< ::pb::BuffModNonHostileTargettableConfig*>(&::pb::BuffModNonHostileTargettableConfig::default_instance());
  buffmodnontargettableconfig_ = const_cast< ::pb::BuffModNonTargettableConfig*>(&::pb::BuffModNonTargettableConfig::default_instance());
  buffmoddamageshareconfig_ = const_cast< ::pb::BuffModDamageShareConfig*>(&::pb::BuffModDamageShareConfig::default_instance());
  buffmodhealcopyconfig_ = const_cast< ::pb::BuffModHealCopyConfig*>(&::pb::BuffModHealCopyConfig::default_instance());
  buffmodstealhpconfig_ = const_cast< ::pb::BuffModStealHpConfig*>(&::pb::BuffModStealHpConfig::default_instance());
  buffmodskillimmunityconfig_ = const_cast< ::pb::BuffModSkillImmunityConfig*>(&::pb::BuffModSkillImmunityConfig::default_instance());
  buffmodtoughnessconfig_ = const_cast< ::pb::BuffModToughnessConfig*>(&::pb::BuffModToughnessConfig::default_instance());
  buffmoddispelconfig_ = const_cast< ::pb::BuffModDispelConfig*>(&::pb::BuffModDispelConfig::default_instance());
  buffmoddamageimmunityconfig_ = const_cast< ::pb::BuffModDamageImmunityConfig*>(&::pb::BuffModDamageImmunityConfig::default_instance());
  buffmodhitactionimmunityconfig_ = const_cast< ::pb::BuffModHitActionImmunityConfig*>(&::pb::BuffModHitActionImmunityConfig::default_instance());
  buffmodarmattraddconfig_ = const_cast< ::pb::BuffModArmAttrAddConfig*>(&::pb::BuffModArmAttrAddConfig::default_instance());
  buffmodskillonlowlifeconfig_ = const_cast< ::pb::BuffModSkillOnLowLifeConfig*>(&::pb::BuffModSkillOnLowLifeConfig::default_instance());
  buffmodmovecontrolimmunityconfig_ = const_cast< ::pb::BuffModMoveControlImmunityConfig*>(&::pb::BuffModMoveControlImmunityConfig::default_instance());
  buffmodconditionchangeconfig_ = const_cast< ::pb::BuffModConditionChangeConfig*>(&::pb::BuffModConditionChangeConfig::default_instance());
  buffmodpropertydecconfig_ = const_cast< ::pb::BuffModPropertyDecConfig*>(&::pb::BuffModPropertyDecConfig::default_instance());
  buffmodchangedmgbybuffsubconfig_ = const_cast< ::pb::BuffModChangeDmgByBuffSubConfig*>(&::pb::BuffModChangeDmgByBuffSubConfig::default_instance());
  buffmodshrinkcontroldurationconfig_ = const_cast< ::pb::BuffModShrinkControlDurationConfig*>(&::pb::BuffModShrinkControlDurationConfig::default_instance());
  buffmodunlimitedshieldconfig_ = const_cast< ::pb::BuffModUnlimitedShieldConfig*>(&::pb::BuffModUnlimitedShieldConfig::default_instance());
  buffmodreflectbuffconfig_ = const_cast< ::pb::BuffModReflectBuffConfig*>(&::pb::BuffModReflectBuffConfig::default_instance());
  buffmodfataldmgshiftconfig_ = const_cast< ::pb::BuffModFatalDmgShiftConfig*>(&::pb::BuffModFatalDmgShiftConfig::default_instance());
  buffmodrageimmunityconfig_ = const_cast< ::pb::BuffModRageImmunityConfig*>(&::pb::BuffModRageImmunityConfig::default_instance());
  buffmodignoreshieldconfig_ = const_cast< ::pb::BuffModIgnoreShieldConfig*>(&::pb::BuffModIgnoreShieldConfig::default_instance());
  buffmodrevertstateonendconfig_ = const_cast< ::pb::BuffModRevertStateOnEndConfig*>(&::pb::BuffModRevertStateOnEndConfig::default_instance());
  buffmodchangecastrangeconfig_ = const_cast< ::pb::BuffModChangeCastRangeConfig*>(&::pb::BuffModChangeCastRangeConfig::default_instance());
  buffmodsetmaxlosehpconfig_ = const_cast< ::pb::BuffModSetMaxLoseHPConfig*>(&::pb::BuffModSetMaxLoseHPConfig::default_instance());
  buffmodadjustreflecteddamageconfig_ = const_cast< ::pb::BuffModAdjustReflectedDamageConfig*>(&::pb::BuffModAdjustReflectedDamageConfig::default_instance());
  buffmodactiveuieffectconfig_ = const_cast< ::pb::BuffModActiveUIEffectConfig*>(&::pb::BuffModActiveUIEffectConfig::default_instance());
  buffmodadjustbuffhitrateconfig_ = const_cast< ::pb::BuffModAdjustBuffHitRateConfig*>(&::pb::BuffModAdjustBuffHitRateConfig::default_instance());
  buffmodlimitbymaxhprateconfig_ = const_cast< ::pb::BuffModLimitByMaxHpRateConfig*>(&::pb::BuffModLimitByMaxHpRateConfig::default_instance());
  buffmodbattlearchermodifyconfig_ = const_cast< ::pb::BuffModBattleArcherModifyConfig*>(&::pb::BuffModBattleArcherModifyConfig::default_instance());
  buffmodnomoveconfig_ = const_cast< ::pb::BuffModNoMoveConfig*>(&::pb::BuffModNoMoveConfig::default_instance());
  buffmodnonormalskillconfig_ = const_cast< ::pb::BuffModNoNormalSkillConfig*>(&::pb::BuffModNoNormalSkillConfig::default_instance());
  buffmodnoskillconfig_ = const_cast< ::pb::BuffModNoSkillConfig*>(&::pb::BuffModNoSkillConfig::default_instance());
  buffmoddizzinessconfig_ = const_cast< ::pb::BuffModDizzinessConfig*>(&::pb::BuffModDizzinessConfig::default_instance());
  buffmodfreezeconfig_ = const_cast< ::pb::BuffModFreezeConfig*>(&::pb::BuffModFreezeConfig::default_instance());
  buffmodcharmedconfig_ = const_cast< ::pb::BuffModCharmedConfig*>(&::pb::BuffModCharmedConfig::default_instance());
  buffmodchaosconfig_ = const_cast< ::pb::BuffModChaosConfig*>(&::pb::BuffModChaosConfig::default_instance());
  buffmodrandommoveconfig_ = const_cast< ::pb::BuffModRandomMoveConfig*>(&::pb::BuffModRandomMoveConfig::default_instance());
  buffmoddamagecopyconfig_ = const_cast< ::pb::BuffModDamageCopyConfig*>(&::pb::BuffModDamageCopyConfig::default_instance());
  buffmodtauntconfig_ = const_cast< ::pb::BuffModTauntConfig*>(&::pb::BuffModTauntConfig::default_instance());
  buffmodnoragerecoverconfig_ = const_cast< ::pb::BuffModNoRageRecoverConfig*>(&::pb::BuffModNoRageRecoverConfig::default_instance());
  buffmoddisableconfig_ = const_cast< ::pb::BuffModDisableConfig*>(&::pb::BuffModDisableConfig::default_instance());
  buffmodharmonmoveconfig_ = const_cast< ::pb::BuffModHarmOnMoveConfig*>(&::pb::BuffModHarmOnMoveConfig::default_instance());
  buffmodfearconfig_ = const_cast< ::pb::BuffModFearConfig*>(&::pb::BuffModFearConfig::default_instance());
  buffmodnosuckbloodconfig_ = const_cast< ::pb::BuffModNoSuckBloodConfig*>(&::pb::BuffModNoSuckBloodConfig::default_instance());
  buffmodnoreviveconfig_ = const_cast< ::pb::BuffModNoReviveConfig*>(&::pb::BuffModNoReviveConfig::default_instance());
  buffmodtransformationconfig_ = const_cast< ::pb::BuffModTransformationConfig*>(&::pb::BuffModTransformationConfig::default_instance());
  buffmodnothingconfig_ = const_cast< ::pb::BuffModNothingConfig*>(&::pb::BuffModNothingConfig::default_instance());
  buffmodtransformscaleconfig_ = const_cast< ::pb::BuffModTransformScaleConfig*>(&::pb::BuffModTransformScaleConfig::default_instance());
  buffmoddieconfig_ = const_cast< ::pb::BuffModDieConfig*>(&::pb::BuffModDieConfig::default_instance());
  buffmodrepeatskillconfig_ = const_cast< ::pb::BuffModRepeatSkillConfig*>(&::pb::BuffModRepeatSkillConfig::default_instance());
  buffmodskillonendconfig_ = const_cast< ::pb::BuffModSkillOnEndConfig*>(&::pb::BuffModSkillOnEndConfig::default_instance());
  buffmodspecifyskilltidconfig_ = const_cast< ::pb::BuffModSpecifySkillTidConfig*>(&::pb::BuffModSpecifySkillTidConfig::default_instance());
  buffmodresetbufftimeconfig_ = const_cast< ::pb::BuffModResetBuffTimeConfig*>(&::pb::BuffModResetBuffTimeConfig::default_instance());
  buffmodaddskillconfig_ = const_cast< ::pb::BuffModAddSkillConfig*>(&::pb::BuffModAddSkillConfig::default_instance());
  buffmodpropertyformulaconfig_ = const_cast< ::pb::BuffModPropertyFormulaConfig*>(&::pb::BuffModPropertyFormulaConfig::default_instance());
  buffmodeffectinrangeconfig_ = const_cast< ::pb::BuffModEffectInRangeConfig*>(&::pb::BuffModEffectInRangeConfig::default_instance());
  buffmodrecorddataconfig_ = const_cast< ::pb::BuffModRecordDataConfig*>(&::pb::BuffModRecordDataConfig::default_instance());
  buffmodskillonendbconfig_ = const_cast< ::pb::BuffModSkillOnEndConfig*>(&::pb::BuffModSkillOnEndConfig::default_instance());
  buffmodhidesomeappearanceconfig_ = const_cast< ::pb::BuffModHideSomeAppearanceConfig*>(&::pb::BuffModHideSomeAppearanceConfig::default_instance());
  buffmodinheritexistbuffstackconfig_ = const_cast< ::pb::BuffModInheritExistBuffStackConfig*>(&::pb::BuffModInheritExistBuffStackConfig::default_instance());
  buffmodscaletextconfig_ = const_cast< ::pb::BuffModScaleTextConfig*>(&::pb::BuffModScaleTextConfig::default_instance());
  buffmodadddefpointconfig_ = const_cast< ::pb::BuffModAddDefPointConfig*>(&::pb::BuffModAddDefPointConfig::default_instance());
  buffmodremovedefpointconfig_ = const_cast< ::pb::BuffModRemoveDefPointConfig*>(&::pb::BuffModRemoveDefPointConfig::default_instance());
  buffmodeffectinrangeconditionconfig_ = const_cast< ::pb::BuffModEffectInRangeConditionConfig*>(&::pb::BuffModEffectInRangeConditionConfig::default_instance());
  buffmodchangedirconfig_ = const_cast< ::pb::BuffModChangeDirConfig*>(&::pb::BuffModChangeDirConfig::default_instance());
  buffmodtdmoniterdefenderstateconfig_ = const_cast< ::pb::BuffModTDMoniterDefenderStateConfig*>(&::pb::BuffModTDMoniterDefenderStateConfig::default_instance());
  buffmodtdnobeanconfig_ = const_cast< ::pb::BuffModTDNoBeanConfig*>(&::pb::BuffModTDNoBeanConfig::default_instance());
  buffmodtdrepeatsendbeanconfig_ = const_cast< ::pb::BuffModTDRepeatSendBeanConfig*>(&::pb::BuffModTDRepeatSendBeanConfig::default_instance());
  buffmodtdrepeatcheckbeanconfig_ = const_cast< ::pb::BuffModTDRepeatCheckBeanConfig*>(&::pb::BuffModTDRepeatCheckBeanConfig::default_instance());
  buffmodbuffonstackconfig_ = const_cast< ::pb::BuffModBuffOnStackConfig*>(&::pb::BuffModBuffOnStackConfig::default_instance());
  buffmodchangesummonedaiconfig_ = const_cast< ::pb::BuffModChangeSummonedAIConfig*>(&::pb::BuffModChangeSummonedAIConfig::default_instance());
}

BuffData::BuffData(const BuffData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffData)
}

void BuffData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  basedatamodel_ = NULL;
  specialhitmodel_ = NULL;
  buffmodhpconfig_ = NULL;
  buffmodreflectdamageconfig_ = NULL;
  buffmodreflectskillconfig_ = NULL;
  buffmodbuffimmunityconfig_ = NULL;
  buffmodpropertyconfig_ = NULL;
  buffmodattackspeedconfig_ = NULL;
  buffmodrageconfig_ = NULL;
  buffmodabsorbdamageconfig_ = NULL;
  buffmodnonhostiletargettableconfig_ = NULL;
  buffmodnontargettableconfig_ = NULL;
  buffmoddamageshareconfig_ = NULL;
  buffmodhealcopyconfig_ = NULL;
  buffmodstealhpconfig_ = NULL;
  buffmodskillimmunityconfig_ = NULL;
  buffmodtoughnessconfig_ = NULL;
  buffmoddispelconfig_ = NULL;
  buffmoddamageimmunityconfig_ = NULL;
  buffmodhitactionimmunityconfig_ = NULL;
  buffmodarmattraddconfig_ = NULL;
  buffmodskillonlowlifeconfig_ = NULL;
  buffmodmovecontrolimmunityconfig_ = NULL;
  buffmodconditionchangeconfig_ = NULL;
  buffmodpropertydecconfig_ = NULL;
  buffmodchangedmgbybuffsubconfig_ = NULL;
  buffmodshrinkcontroldurationconfig_ = NULL;
  buffmodunlimitedshieldconfig_ = NULL;
  buffmodreflectbuffconfig_ = NULL;
  buffmodfataldmgshiftconfig_ = NULL;
  buffmodrageimmunityconfig_ = NULL;
  buffmodignoreshieldconfig_ = NULL;
  buffmodrevertstateonendconfig_ = NULL;
  buffmodchangecastrangeconfig_ = NULL;
  buffmodsetmaxlosehpconfig_ = NULL;
  buffmodadjustreflecteddamageconfig_ = NULL;
  buffmodactiveuieffectconfig_ = NULL;
  buffmodadjustbuffhitrateconfig_ = NULL;
  buffmodlimitbymaxhprateconfig_ = NULL;
  buffmodbattlearchermodifyconfig_ = NULL;
  buffmodnomoveconfig_ = NULL;
  buffmodnonormalskillconfig_ = NULL;
  buffmodnoskillconfig_ = NULL;
  buffmoddizzinessconfig_ = NULL;
  buffmodfreezeconfig_ = NULL;
  buffmodcharmedconfig_ = NULL;
  buffmodchaosconfig_ = NULL;
  buffmodrandommoveconfig_ = NULL;
  buffmoddamagecopyconfig_ = NULL;
  buffmodtauntconfig_ = NULL;
  buffmodnoragerecoverconfig_ = NULL;
  buffmoddisableconfig_ = NULL;
  buffmodharmonmoveconfig_ = NULL;
  buffmodfearconfig_ = NULL;
  buffmodnosuckbloodconfig_ = NULL;
  buffmodnoreviveconfig_ = NULL;
  buffmodtransformationconfig_ = NULL;
  buffmodnothingconfig_ = NULL;
  buffmodtransformscaleconfig_ = NULL;
  buffmoddieconfig_ = NULL;
  buffmodrepeatskillconfig_ = NULL;
  buffmodskillonendconfig_ = NULL;
  buffmodspecifyskilltidconfig_ = NULL;
  buffmodresetbufftimeconfig_ = NULL;
  buffmodaddskillconfig_ = NULL;
  buffmodpropertyformulaconfig_ = NULL;
  buffmodeffectinrangeconfig_ = NULL;
  buffmodrecorddataconfig_ = NULL;
  buffmodskillonendbconfig_ = NULL;
  buffmodhidesomeappearanceconfig_ = NULL;
  buffmodinheritexistbuffstackconfig_ = NULL;
  buffmodscaletextconfig_ = NULL;
  buffmodadddefpointconfig_ = NULL;
  buffmodremovedefpointconfig_ = NULL;
  buffmodeffectinrangeconditionconfig_ = NULL;
  buffmodchangedirconfig_ = NULL;
  buffmodtdmoniterdefenderstateconfig_ = NULL;
  buffmodtdnobeanconfig_ = NULL;
  buffmodtdrepeatsendbeanconfig_ = NULL;
  buffmodtdrepeatcheckbeanconfig_ = NULL;
  buffmodbuffonstackconfig_ = NULL;
  buffmodchangesummonedaiconfig_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffData::~BuffData() {
  // @@protoc_insertion_point(destructor:pb.BuffData)
  SharedDtor();
}

void BuffData::SharedDtor() {
  if (this != default_instance_) {
    delete basedatamodel_;
    delete specialhitmodel_;
    delete buffmodhpconfig_;
    delete buffmodreflectdamageconfig_;
    delete buffmodreflectskillconfig_;
    delete buffmodbuffimmunityconfig_;
    delete buffmodpropertyconfig_;
    delete buffmodattackspeedconfig_;
    delete buffmodrageconfig_;
    delete buffmodabsorbdamageconfig_;
    delete buffmodnonhostiletargettableconfig_;
    delete buffmodnontargettableconfig_;
    delete buffmoddamageshareconfig_;
    delete buffmodhealcopyconfig_;
    delete buffmodstealhpconfig_;
    delete buffmodskillimmunityconfig_;
    delete buffmodtoughnessconfig_;
    delete buffmoddispelconfig_;
    delete buffmoddamageimmunityconfig_;
    delete buffmodhitactionimmunityconfig_;
    delete buffmodarmattraddconfig_;
    delete buffmodskillonlowlifeconfig_;
    delete buffmodmovecontrolimmunityconfig_;
    delete buffmodconditionchangeconfig_;
    delete buffmodpropertydecconfig_;
    delete buffmodchangedmgbybuffsubconfig_;
    delete buffmodshrinkcontroldurationconfig_;
    delete buffmodunlimitedshieldconfig_;
    delete buffmodreflectbuffconfig_;
    delete buffmodfataldmgshiftconfig_;
    delete buffmodrageimmunityconfig_;
    delete buffmodignoreshieldconfig_;
    delete buffmodrevertstateonendconfig_;
    delete buffmodchangecastrangeconfig_;
    delete buffmodsetmaxlosehpconfig_;
    delete buffmodadjustreflecteddamageconfig_;
    delete buffmodactiveuieffectconfig_;
    delete buffmodadjustbuffhitrateconfig_;
    delete buffmodlimitbymaxhprateconfig_;
    delete buffmodbattlearchermodifyconfig_;
    delete buffmodnomoveconfig_;
    delete buffmodnonormalskillconfig_;
    delete buffmodnoskillconfig_;
    delete buffmoddizzinessconfig_;
    delete buffmodfreezeconfig_;
    delete buffmodcharmedconfig_;
    delete buffmodchaosconfig_;
    delete buffmodrandommoveconfig_;
    delete buffmoddamagecopyconfig_;
    delete buffmodtauntconfig_;
    delete buffmodnoragerecoverconfig_;
    delete buffmoddisableconfig_;
    delete buffmodharmonmoveconfig_;
    delete buffmodfearconfig_;
    delete buffmodnosuckbloodconfig_;
    delete buffmodnoreviveconfig_;
    delete buffmodtransformationconfig_;
    delete buffmodnothingconfig_;
    delete buffmodtransformscaleconfig_;
    delete buffmoddieconfig_;
    delete buffmodrepeatskillconfig_;
    delete buffmodskillonendconfig_;
    delete buffmodspecifyskilltidconfig_;
    delete buffmodresetbufftimeconfig_;
    delete buffmodaddskillconfig_;
    delete buffmodpropertyformulaconfig_;
    delete buffmodeffectinrangeconfig_;
    delete buffmodrecorddataconfig_;
    delete buffmodskillonendbconfig_;
    delete buffmodhidesomeappearanceconfig_;
    delete buffmodinheritexistbuffstackconfig_;
    delete buffmodscaletextconfig_;
    delete buffmodadddefpointconfig_;
    delete buffmodremovedefpointconfig_;
    delete buffmodeffectinrangeconditionconfig_;
    delete buffmodchangedirconfig_;
    delete buffmodtdmoniterdefenderstateconfig_;
    delete buffmodtdnobeanconfig_;
    delete buffmodtdrepeatsendbeanconfig_;
    delete buffmodtdrepeatcheckbeanconfig_;
    delete buffmodbuffonstackconfig_;
    delete buffmodchangesummonedaiconfig_;
  }
}

void BuffData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffData_descriptor_;
}

const BuffData& BuffData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffData_2eproto();
  return *default_instance_;
}

BuffData* BuffData::default_instance_ = NULL;

BuffData* BuffData::New() const {
  return new BuffData;
}

void BuffData::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    id_ = 0;
    if (has_basedatamodel()) {
      if (basedatamodel_ != NULL) basedatamodel_->::pb::BuffBaseDataModel::Clear();
    }
    if (has_specialhitmodel()) {
      if (specialhitmodel_ != NULL) specialhitmodel_->::pb::SpecialHitModel::Clear();
    }
    if (has_buffmodhpconfig()) {
      if (buffmodhpconfig_ != NULL) buffmodhpconfig_->::pb::BuffModHpConfig::Clear();
    }
    if (has_buffmodreflectdamageconfig()) {
      if (buffmodreflectdamageconfig_ != NULL) buffmodreflectdamageconfig_->::pb::BuffModReflectDamageConfig::Clear();
    }
    if (has_buffmodreflectskillconfig()) {
      if (buffmodreflectskillconfig_ != NULL) buffmodreflectskillconfig_->::pb::BuffModReflectSkillConfig::Clear();
    }
    if (has_buffmodbuffimmunityconfig()) {
      if (buffmodbuffimmunityconfig_ != NULL) buffmodbuffimmunityconfig_->::pb::BuffModBuffImmunityConfig::Clear();
    }
    if (has_buffmodpropertyconfig()) {
      if (buffmodpropertyconfig_ != NULL) buffmodpropertyconfig_->::pb::BuffModPropertyConfig::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_buffmodattackspeedconfig()) {
      if (buffmodattackspeedconfig_ != NULL) buffmodattackspeedconfig_->::pb::BuffModAttackSpeedConfig::Clear();
    }
    if (has_buffmodrageconfig()) {
      if (buffmodrageconfig_ != NULL) buffmodrageconfig_->::pb::BuffModRageConfig::Clear();
    }
    if (has_buffmodabsorbdamageconfig()) {
      if (buffmodabsorbdamageconfig_ != NULL) buffmodabsorbdamageconfig_->::pb::BuffModAbsorbDamageConfig::Clear();
    }
    if (has_buffmodnonhostiletargettableconfig()) {
      if (buffmodnonhostiletargettableconfig_ != NULL) buffmodnonhostiletargettableconfig_->::pb::BuffModNonHostileTargettableConfig::Clear();
    }
    if (has_buffmodnontargettableconfig()) {
      if (buffmodnontargettableconfig_ != NULL) buffmodnontargettableconfig_->::pb::BuffModNonTargettableConfig::Clear();
    }
    if (has_buffmoddamageshareconfig()) {
      if (buffmoddamageshareconfig_ != NULL) buffmoddamageshareconfig_->::pb::BuffModDamageShareConfig::Clear();
    }
    if (has_buffmodhealcopyconfig()) {
      if (buffmodhealcopyconfig_ != NULL) buffmodhealcopyconfig_->::pb::BuffModHealCopyConfig::Clear();
    }
    if (has_buffmodstealhpconfig()) {
      if (buffmodstealhpconfig_ != NULL) buffmodstealhpconfig_->::pb::BuffModStealHpConfig::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_buffmodskillimmunityconfig()) {
      if (buffmodskillimmunityconfig_ != NULL) buffmodskillimmunityconfig_->::pb::BuffModSkillImmunityConfig::Clear();
    }
    if (has_buffmodtoughnessconfig()) {
      if (buffmodtoughnessconfig_ != NULL) buffmodtoughnessconfig_->::pb::BuffModToughnessConfig::Clear();
    }
    if (has_buffmoddispelconfig()) {
      if (buffmoddispelconfig_ != NULL) buffmoddispelconfig_->::pb::BuffModDispelConfig::Clear();
    }
    if (has_buffmoddamageimmunityconfig()) {
      if (buffmoddamageimmunityconfig_ != NULL) buffmoddamageimmunityconfig_->::pb::BuffModDamageImmunityConfig::Clear();
    }
    if (has_buffmodhitactionimmunityconfig()) {
      if (buffmodhitactionimmunityconfig_ != NULL) buffmodhitactionimmunityconfig_->::pb::BuffModHitActionImmunityConfig::Clear();
    }
    if (has_buffmodarmattraddconfig()) {
      if (buffmodarmattraddconfig_ != NULL) buffmodarmattraddconfig_->::pb::BuffModArmAttrAddConfig::Clear();
    }
    if (has_buffmodskillonlowlifeconfig()) {
      if (buffmodskillonlowlifeconfig_ != NULL) buffmodskillonlowlifeconfig_->::pb::BuffModSkillOnLowLifeConfig::Clear();
    }
    if (has_buffmodmovecontrolimmunityconfig()) {
      if (buffmodmovecontrolimmunityconfig_ != NULL) buffmodmovecontrolimmunityconfig_->::pb::BuffModMoveControlImmunityConfig::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    if (has_buffmodconditionchangeconfig()) {
      if (buffmodconditionchangeconfig_ != NULL) buffmodconditionchangeconfig_->::pb::BuffModConditionChangeConfig::Clear();
    }
    if (has_buffmodpropertydecconfig()) {
      if (buffmodpropertydecconfig_ != NULL) buffmodpropertydecconfig_->::pb::BuffModPropertyDecConfig::Clear();
    }
    if (has_buffmodchangedmgbybuffsubconfig()) {
      if (buffmodchangedmgbybuffsubconfig_ != NULL) buffmodchangedmgbybuffsubconfig_->::pb::BuffModChangeDmgByBuffSubConfig::Clear();
    }
    if (has_buffmodshrinkcontroldurationconfig()) {
      if (buffmodshrinkcontroldurationconfig_ != NULL) buffmodshrinkcontroldurationconfig_->::pb::BuffModShrinkControlDurationConfig::Clear();
    }
    if (has_buffmodunlimitedshieldconfig()) {
      if (buffmodunlimitedshieldconfig_ != NULL) buffmodunlimitedshieldconfig_->::pb::BuffModUnlimitedShieldConfig::Clear();
    }
    if (has_buffmodreflectbuffconfig()) {
      if (buffmodreflectbuffconfig_ != NULL) buffmodreflectbuffconfig_->::pb::BuffModReflectBuffConfig::Clear();
    }
    if (has_buffmodfataldmgshiftconfig()) {
      if (buffmodfataldmgshiftconfig_ != NULL) buffmodfataldmgshiftconfig_->::pb::BuffModFatalDmgShiftConfig::Clear();
    }
    if (has_buffmodrageimmunityconfig()) {
      if (buffmodrageimmunityconfig_ != NULL) buffmodrageimmunityconfig_->::pb::BuffModRageImmunityConfig::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    if (has_buffmodignoreshieldconfig()) {
      if (buffmodignoreshieldconfig_ != NULL) buffmodignoreshieldconfig_->::pb::BuffModIgnoreShieldConfig::Clear();
    }
    if (has_buffmodrevertstateonendconfig()) {
      if (buffmodrevertstateonendconfig_ != NULL) buffmodrevertstateonendconfig_->::pb::BuffModRevertStateOnEndConfig::Clear();
    }
    if (has_buffmodchangecastrangeconfig()) {
      if (buffmodchangecastrangeconfig_ != NULL) buffmodchangecastrangeconfig_->::pb::BuffModChangeCastRangeConfig::Clear();
    }
    if (has_buffmodsetmaxlosehpconfig()) {
      if (buffmodsetmaxlosehpconfig_ != NULL) buffmodsetmaxlosehpconfig_->::pb::BuffModSetMaxLoseHPConfig::Clear();
    }
    if (has_buffmodadjustreflecteddamageconfig()) {
      if (buffmodadjustreflecteddamageconfig_ != NULL) buffmodadjustreflecteddamageconfig_->::pb::BuffModAdjustReflectedDamageConfig::Clear();
    }
    if (has_buffmodactiveuieffectconfig()) {
      if (buffmodactiveuieffectconfig_ != NULL) buffmodactiveuieffectconfig_->::pb::BuffModActiveUIEffectConfig::Clear();
    }
    if (has_buffmodadjustbuffhitrateconfig()) {
      if (buffmodadjustbuffhitrateconfig_ != NULL) buffmodadjustbuffhitrateconfig_->::pb::BuffModAdjustBuffHitRateConfig::Clear();
    }
    if (has_buffmodlimitbymaxhprateconfig()) {
      if (buffmodlimitbymaxhprateconfig_ != NULL) buffmodlimitbymaxhprateconfig_->::pb::BuffModLimitByMaxHpRateConfig::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    if (has_buffmodbattlearchermodifyconfig()) {
      if (buffmodbattlearchermodifyconfig_ != NULL) buffmodbattlearchermodifyconfig_->::pb::BuffModBattleArcherModifyConfig::Clear();
    }
    if (has_buffmodnomoveconfig()) {
      if (buffmodnomoveconfig_ != NULL) buffmodnomoveconfig_->::pb::BuffModNoMoveConfig::Clear();
    }
    if (has_buffmodnonormalskillconfig()) {
      if (buffmodnonormalskillconfig_ != NULL) buffmodnonormalskillconfig_->::pb::BuffModNoNormalSkillConfig::Clear();
    }
    if (has_buffmodnoskillconfig()) {
      if (buffmodnoskillconfig_ != NULL) buffmodnoskillconfig_->::pb::BuffModNoSkillConfig::Clear();
    }
    if (has_buffmoddizzinessconfig()) {
      if (buffmoddizzinessconfig_ != NULL) buffmoddizzinessconfig_->::pb::BuffModDizzinessConfig::Clear();
    }
    if (has_buffmodfreezeconfig()) {
      if (buffmodfreezeconfig_ != NULL) buffmodfreezeconfig_->::pb::BuffModFreezeConfig::Clear();
    }
    if (has_buffmodcharmedconfig()) {
      if (buffmodcharmedconfig_ != NULL) buffmodcharmedconfig_->::pb::BuffModCharmedConfig::Clear();
    }
    if (has_buffmodchaosconfig()) {
      if (buffmodchaosconfig_ != NULL) buffmodchaosconfig_->::pb::BuffModChaosConfig::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 16711680) {
    if (has_buffmodrandommoveconfig()) {
      if (buffmodrandommoveconfig_ != NULL) buffmodrandommoveconfig_->::pb::BuffModRandomMoveConfig::Clear();
    }
    if (has_buffmoddamagecopyconfig()) {
      if (buffmoddamagecopyconfig_ != NULL) buffmoddamagecopyconfig_->::pb::BuffModDamageCopyConfig::Clear();
    }
    if (has_buffmodtauntconfig()) {
      if (buffmodtauntconfig_ != NULL) buffmodtauntconfig_->::pb::BuffModTauntConfig::Clear();
    }
    if (has_buffmodnoragerecoverconfig()) {
      if (buffmodnoragerecoverconfig_ != NULL) buffmodnoragerecoverconfig_->::pb::BuffModNoRageRecoverConfig::Clear();
    }
    if (has_buffmoddisableconfig()) {
      if (buffmoddisableconfig_ != NULL) buffmoddisableconfig_->::pb::BuffModDisableConfig::Clear();
    }
    if (has_buffmodharmonmoveconfig()) {
      if (buffmodharmonmoveconfig_ != NULL) buffmodharmonmoveconfig_->::pb::BuffModHarmOnMoveConfig::Clear();
    }
    if (has_buffmodfearconfig()) {
      if (buffmodfearconfig_ != NULL) buffmodfearconfig_->::pb::BuffModFearConfig::Clear();
    }
    if (has_buffmodnosuckbloodconfig()) {
      if (buffmodnosuckbloodconfig_ != NULL) buffmodnosuckbloodconfig_->::pb::BuffModNoSuckBloodConfig::Clear();
    }
  }
  if (_has_bits_[56 / 32] & 4278190080) {
    if (has_buffmodnoreviveconfig()) {
      if (buffmodnoreviveconfig_ != NULL) buffmodnoreviveconfig_->::pb::BuffModNoReviveConfig::Clear();
    }
    if (has_buffmodtransformationconfig()) {
      if (buffmodtransformationconfig_ != NULL) buffmodtransformationconfig_->::pb::BuffModTransformationConfig::Clear();
    }
    if (has_buffmodnothingconfig()) {
      if (buffmodnothingconfig_ != NULL) buffmodnothingconfig_->::pb::BuffModNothingConfig::Clear();
    }
    if (has_buffmodtransformscaleconfig()) {
      if (buffmodtransformscaleconfig_ != NULL) buffmodtransformscaleconfig_->::pb::BuffModTransformScaleConfig::Clear();
    }
    if (has_buffmoddieconfig()) {
      if (buffmoddieconfig_ != NULL) buffmoddieconfig_->::pb::BuffModDieConfig::Clear();
    }
    if (has_buffmodrepeatskillconfig()) {
      if (buffmodrepeatskillconfig_ != NULL) buffmodrepeatskillconfig_->::pb::BuffModRepeatSkillConfig::Clear();
    }
    if (has_buffmodskillonendconfig()) {
      if (buffmodskillonendconfig_ != NULL) buffmodskillonendconfig_->::pb::BuffModSkillOnEndConfig::Clear();
    }
    if (has_buffmodspecifyskilltidconfig()) {
      if (buffmodspecifyskilltidconfig_ != NULL) buffmodspecifyskilltidconfig_->::pb::BuffModSpecifySkillTidConfig::Clear();
    }
  }
  if (_has_bits_[64 / 32] & 255) {
    if (has_buffmodresetbufftimeconfig()) {
      if (buffmodresetbufftimeconfig_ != NULL) buffmodresetbufftimeconfig_->::pb::BuffModResetBuffTimeConfig::Clear();
    }
    if (has_buffmodaddskillconfig()) {
      if (buffmodaddskillconfig_ != NULL) buffmodaddskillconfig_->::pb::BuffModAddSkillConfig::Clear();
    }
    if (has_buffmodpropertyformulaconfig()) {
      if (buffmodpropertyformulaconfig_ != NULL) buffmodpropertyformulaconfig_->::pb::BuffModPropertyFormulaConfig::Clear();
    }
    if (has_buffmodeffectinrangeconfig()) {
      if (buffmodeffectinrangeconfig_ != NULL) buffmodeffectinrangeconfig_->::pb::BuffModEffectInRangeConfig::Clear();
    }
    if (has_buffmodrecorddataconfig()) {
      if (buffmodrecorddataconfig_ != NULL) buffmodrecorddataconfig_->::pb::BuffModRecordDataConfig::Clear();
    }
    if (has_buffmodskillonendbconfig()) {
      if (buffmodskillonendbconfig_ != NULL) buffmodskillonendbconfig_->::pb::BuffModSkillOnEndConfig::Clear();
    }
    if (has_buffmodhidesomeappearanceconfig()) {
      if (buffmodhidesomeappearanceconfig_ != NULL) buffmodhidesomeappearanceconfig_->::pb::BuffModHideSomeAppearanceConfig::Clear();
    }
    if (has_buffmodinheritexistbuffstackconfig()) {
      if (buffmodinheritexistbuffstackconfig_ != NULL) buffmodinheritexistbuffstackconfig_->::pb::BuffModInheritExistBuffStackConfig::Clear();
    }
  }
  if (_has_bits_[72 / 32] & 65280) {
    if (has_buffmodscaletextconfig()) {
      if (buffmodscaletextconfig_ != NULL) buffmodscaletextconfig_->::pb::BuffModScaleTextConfig::Clear();
    }
    if (has_buffmodadddefpointconfig()) {
      if (buffmodadddefpointconfig_ != NULL) buffmodadddefpointconfig_->::pb::BuffModAddDefPointConfig::Clear();
    }
    if (has_buffmodremovedefpointconfig()) {
      if (buffmodremovedefpointconfig_ != NULL) buffmodremovedefpointconfig_->::pb::BuffModRemoveDefPointConfig::Clear();
    }
    if (has_buffmodeffectinrangeconditionconfig()) {
      if (buffmodeffectinrangeconditionconfig_ != NULL) buffmodeffectinrangeconditionconfig_->::pb::BuffModEffectInRangeConditionConfig::Clear();
    }
    if (has_buffmodchangedirconfig()) {
      if (buffmodchangedirconfig_ != NULL) buffmodchangedirconfig_->::pb::BuffModChangeDirConfig::Clear();
    }
    if (has_buffmodtdmoniterdefenderstateconfig()) {
      if (buffmodtdmoniterdefenderstateconfig_ != NULL) buffmodtdmoniterdefenderstateconfig_->::pb::BuffModTDMoniterDefenderStateConfig::Clear();
    }
    if (has_buffmodtdnobeanconfig()) {
      if (buffmodtdnobeanconfig_ != NULL) buffmodtdnobeanconfig_->::pb::BuffModTDNoBeanConfig::Clear();
    }
    if (has_buffmodtdrepeatsendbeanconfig()) {
      if (buffmodtdrepeatsendbeanconfig_ != NULL) buffmodtdrepeatsendbeanconfig_->::pb::BuffModTDRepeatSendBeanConfig::Clear();
    }
  }
  if (_has_bits_[80 / 32] & 458752) {
    if (has_buffmodtdrepeatcheckbeanconfig()) {
      if (buffmodtdrepeatcheckbeanconfig_ != NULL) buffmodtdrepeatcheckbeanconfig_->::pb::BuffModTDRepeatCheckBeanConfig::Clear();
    }
    if (has_buffmodbuffonstackconfig()) {
      if (buffmodbuffonstackconfig_ != NULL) buffmodbuffonstackconfig_->::pb::BuffModBuffOnStackConfig::Clear();
    }
    if (has_buffmodchangesummonedaiconfig()) {
      if (buffmodchangesummonedaiconfig_ != NULL) buffmodchangesummonedaiconfig_->::pb::BuffModChangeSummonedAIConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BaseDataModel;
        break;
      }

      // optional .pb.BuffBaseDataModel BaseDataModel = 2;
      case 2: {
        if (tag == 18) {
         parse_BaseDataModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basedatamodel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SpecialHitModel;
        break;
      }

      // optional .pb.SpecialHitModel SpecialHitModel = 3;
      case 3: {
        if (tag == 26) {
         parse_SpecialHitModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specialhitmodel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BuffModNothingConfig;
        break;
      }

      // optional .pb.BuffModNothingConfig BuffModNothingConfig = 4;
      case 4: {
        if (tag == 34) {
         parse_BuffModNothingConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodnothingconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_BuffModAttackSpeedConfig;
        break;
      }

      // optional .pb.BuffModAttackSpeedConfig BuffModAttackSpeedConfig = 6;
      case 6: {
        if (tag == 50) {
         parse_BuffModAttackSpeedConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodattackspeedconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_BuffModNoMoveConfig;
        break;
      }

      // optional .pb.BuffModNoMoveConfig BuffModNoMoveConfig = 7;
      case 7: {
        if (tag == 58) {
         parse_BuffModNoMoveConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodnomoveconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_BuffModNoNormalSkillConfig;
        break;
      }

      // optional .pb.BuffModNoNormalSkillConfig BuffModNoNormalSkillConfig = 8;
      case 8: {
        if (tag == 66) {
         parse_BuffModNoNormalSkillConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodnonormalskillconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_BuffModNoSkillConfig;
        break;
      }

      // optional .pb.BuffModNoSkillConfig BuffModNoSkillConfig = 9;
      case 9: {
        if (tag == 74) {
         parse_BuffModNoSkillConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodnoskillconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_BuffModDizzinessConfig;
        break;
      }

      // optional .pb.BuffModDizzinessConfig BuffModDizzinessConfig = 10;
      case 10: {
        if (tag == 82) {
         parse_BuffModDizzinessConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmoddizzinessconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_BuffModFreezeConfig;
        break;
      }

      // optional .pb.BuffModFreezeConfig BuffModFreezeConfig = 11;
      case 11: {
        if (tag == 90) {
         parse_BuffModFreezeConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodfreezeconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_BuffModRandomMoveConfig;
        break;
      }

      // optional .pb.BuffModRandomMoveConfig BuffModRandomMoveConfig = 12;
      case 12: {
        if (tag == 98) {
         parse_BuffModRandomMoveConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodrandommoveconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_BuffModTransformScaleConfig;
        break;
      }

      // optional .pb.BuffModTransformScaleConfig BuffModTransformScaleConfig = 13;
      case 13: {
        if (tag == 106) {
         parse_BuffModTransformScaleConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodtransformscaleconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_BuffModAbsorbDamageConfig;
        break;
      }

      // optional .pb.BuffModAbsorbDamageConfig BuffModAbsorbDamageConfig = 14;
      case 14: {
        if (tag == 114) {
         parse_BuffModAbsorbDamageConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodabsorbdamageconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_BuffModDieConfig;
        break;
      }

      // optional .pb.BuffModDieConfig BuffModDieConfig = 15;
      case 15: {
        if (tag == 122) {
         parse_BuffModDieConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmoddieconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_BuffModNonTargettableConfig;
        break;
      }

      // optional .pb.BuffModNonTargettableConfig BuffModNonTargettableConfig = 16;
      case 16: {
        if (tag == 130) {
         parse_BuffModNonTargettableConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodnontargettableconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_BuffModReflectDamageConfig;
        break;
      }

      // optional .pb.BuffModReflectDamageConfig BuffModReflectDamageConfig = 17;
      case 17: {
        if (tag == 138) {
         parse_BuffModReflectDamageConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodreflectdamageconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_BuffModReflectSkillConfig;
        break;
      }

      // optional .pb.BuffModReflectSkillConfig BuffModReflectSkillConfig = 18;
      case 18: {
        if (tag == 146) {
         parse_BuffModReflectSkillConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodreflectskillconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_BuffModBuffImmunityConfig;
        break;
      }

      // optional .pb.BuffModBuffImmunityConfig BuffModBuffImmunityConfig = 19;
      case 19: {
        if (tag == 154) {
         parse_BuffModBuffImmunityConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodbuffimmunityconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_BuffModTransformationConfig;
        break;
      }

      // optional .pb.BuffModTransformationConfig BuffModTransformationConfig = 20;
      case 20: {
        if (tag == 162) {
         parse_BuffModTransformationConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodtransformationconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_BuffModStealHpConfig;
        break;
      }

      // optional .pb.BuffModStealHpConfig BuffModStealHpConfig = 21;
      case 21: {
        if (tag == 170) {
         parse_BuffModStealHpConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodstealhpconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_BuffModRepeatSkillConfig;
        break;
      }

      // optional .pb.BuffModRepeatSkillConfig BuffModRepeatSkillConfig = 23;
      case 23: {
        if (tag == 186) {
         parse_BuffModRepeatSkillConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodrepeatskillconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_BuffModDamageShareConfig;
        break;
      }

      // optional .pb.BuffModDamageShareConfig BuffModDamageShareConfig = 24;
      case 24: {
        if (tag == 194) {
         parse_BuffModDamageShareConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmoddamageshareconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_BuffModDamageCopyConfig;
        break;
      }

      // optional .pb.BuffModDamageCopyConfig BuffModDamageCopyConfig = 25;
      case 25: {
        if (tag == 202) {
         parse_BuffModDamageCopyConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmoddamagecopyconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_BuffModHealCopyConfig;
        break;
      }

      // optional .pb.BuffModHealCopyConfig BuffModHealCopyConfig = 26;
      case 26: {
        if (tag == 210) {
         parse_BuffModHealCopyConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodhealcopyconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_BuffModHpConfig;
        break;
      }

      // optional .pb.BuffModHpConfig BuffModHpConfig = 27;
      case 27: {
        if (tag == 218) {
         parse_BuffModHpConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodhpconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_BuffModRageConfig;
        break;
      }

      // optional .pb.BuffModRageConfig BuffModRageConfig = 28;
      case 28: {
        if (tag == 226) {
         parse_BuffModRageConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodrageconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_BuffModSkillOnEndConfig;
        break;
      }

      // optional .pb.BuffModSkillOnEndConfig BuffModSkillOnEndConfig = 29;
      case 29: {
        if (tag == 234) {
         parse_BuffModSkillOnEndConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodskillonendconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_BuffModTauntConfig;
        break;
      }

      // optional .pb.BuffModTauntConfig BuffModTauntConfig = 30;
      case 30: {
        if (tag == 242) {
         parse_BuffModTauntConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodtauntconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_BuffModCharmedConfig;
        break;
      }

      // optional .pb.BuffModCharmedConfig BuffModCharmedConfig = 31;
      case 31: {
        if (tag == 250) {
         parse_BuffModCharmedConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodcharmedconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_BuffModChaosConfig;
        break;
      }

      // optional .pb.BuffModChaosConfig BuffModChaosConfig = 32;
      case 32: {
        if (tag == 258) {
         parse_BuffModChaosConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodchaosconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_BuffModDispelConfig;
        break;
      }

      // optional .pb.BuffModDispelConfig BuffModDispelConfig = 33;
      case 33: {
        if (tag == 266) {
         parse_BuffModDispelConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmoddispelconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_BuffModSkillImmunityConfig;
        break;
      }

      // optional .pb.BuffModSkillImmunityConfig BuffModSkillImmunityConfig = 34;
      case 34: {
        if (tag == 274) {
         parse_BuffModSkillImmunityConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodskillimmunityconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_BuffModToughnessConfig;
        break;
      }

      // optional .pb.BuffModToughnessConfig BuffModToughnessConfig = 35;
      case 35: {
        if (tag == 282) {
         parse_BuffModToughnessConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodtoughnessconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_BuffModPropertyConfig;
        break;
      }

      // optional .pb.BuffModPropertyConfig BuffModPropertyConfig = 36;
      case 36: {
        if (tag == 290) {
         parse_BuffModPropertyConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodpropertyconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_BuffModNonHostileTargettableConfig;
        break;
      }

      // optional .pb.BuffModNonHostileTargettableConfig BuffModNonHostileTargettableConfig = 37;
      case 37: {
        if (tag == 298) {
         parse_BuffModNonHostileTargettableConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodnonhostiletargettableconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_BuffModSpecifySkillTidConfig;
        break;
      }

      // optional .pb.BuffModSpecifySkillTidConfig BuffModSpecifySkillTidConfig = 39;
      case 39: {
        if (tag == 314) {
         parse_BuffModSpecifySkillTidConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodspecifyskilltidconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_BuffModHitActionImmunityConfig;
        break;
      }

      // optional .pb.BuffModHitActionImmunityConfig BuffModHitActionImmunityConfig = 40;
      case 40: {
        if (tag == 322) {
         parse_BuffModHitActionImmunityConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodhitactionimmunityconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_BuffModDamageImmunityConfig;
        break;
      }

      // optional .pb.BuffModDamageImmunityConfig BuffModDamageImmunityConfig = 41;
      case 41: {
        if (tag == 330) {
         parse_BuffModDamageImmunityConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmoddamageimmunityconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_BuffModArmAttrAddConfig;
        break;
      }

      // optional .pb.BuffModArmAttrAddConfig BuffModArmAttrAddConfig = 42;
      case 42: {
        if (tag == 338) {
         parse_BuffModArmAttrAddConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodarmattraddconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_BuffModSkillOnLowLifeConfig;
        break;
      }

      // optional .pb.BuffModSkillOnLowLifeConfig BuffModSkillOnLowLifeConfig = 43;
      case 43: {
        if (tag == 346) {
         parse_BuffModSkillOnLowLifeConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodskillonlowlifeconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_BuffModResetBuffTimeConfig;
        break;
      }

      // optional .pb.BuffModResetBuffTimeConfig BuffModResetBuffTimeConfig = 44;
      case 44: {
        if (tag == 354) {
         parse_BuffModResetBuffTimeConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodresetbufftimeconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_BuffModAddSkillConfig;
        break;
      }

      // optional .pb.BuffModAddSkillConfig BuffModAddSkillConfig = 45;
      case 45: {
        if (tag == 362) {
         parse_BuffModAddSkillConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodaddskillconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_BuffModPropertyFormulaConfig;
        break;
      }

      // optional .pb.BuffModPropertyFormulaConfig BuffModPropertyFormulaConfig = 46;
      case 46: {
        if (tag == 370) {
         parse_BuffModPropertyFormulaConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodpropertyformulaconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_BuffModEffectInRangeConfig;
        break;
      }

      // optional .pb.BuffModEffectInRangeConfig BuffModEffectInRangeConfig = 47;
      case 47: {
        if (tag == 378) {
         parse_BuffModEffectInRangeConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodeffectinrangeconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_BuffModRecordDataConfig;
        break;
      }

      // optional .pb.BuffModRecordDataConfig BuffModRecordDataConfig = 48;
      case 48: {
        if (tag == 386) {
         parse_BuffModRecordDataConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodrecorddataconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_BuffModSkillOnEndBConfig;
        break;
      }

      // optional .pb.BuffModSkillOnEndConfig BuffModSkillOnEndBConfig = 49;
      case 49: {
        if (tag == 394) {
         parse_BuffModSkillOnEndBConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodskillonendbconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_BuffModMoveControlImmunityConfig;
        break;
      }

      // optional .pb.BuffModMoveControlImmunityConfig BuffModMoveControlImmunityConfig = 50;
      case 50: {
        if (tag == 402) {
         parse_BuffModMoveControlImmunityConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodmovecontrolimmunityconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_BuffModHideSomeAppearanceConfig;
        break;
      }

      // optional .pb.BuffModHideSomeAppearanceConfig BuffModHideSomeAppearanceConfig = 51;
      case 51: {
        if (tag == 410) {
         parse_BuffModHideSomeAppearanceConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodhidesomeappearanceconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_BuffModConditionChangeConfig;
        break;
      }

      // optional .pb.BuffModConditionChangeConfig BuffModConditionChangeConfig = 52;
      case 52: {
        if (tag == 418) {
         parse_BuffModConditionChangeConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodconditionchangeconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse_BuffModNoRageRecoverConfig;
        break;
      }

      // optional .pb.BuffModNoRageRecoverConfig BuffModNoRageRecoverConfig = 53;
      case 53: {
        if (tag == 426) {
         parse_BuffModNoRageRecoverConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodnoragerecoverconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_BuffModInheritExistBuffStackConfig;
        break;
      }

      // optional .pb.BuffModInheritExistBuffStackConfig BuffModInheritExistBuffStackConfig = 54;
      case 54: {
        if (tag == 434) {
         parse_BuffModInheritExistBuffStackConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodinheritexistbuffstackconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(442)) goto parse_BuffModPropertyDecConfig;
        break;
      }

      // optional .pb.BuffModPropertyDecConfig BuffModPropertyDecConfig = 55;
      case 55: {
        if (tag == 442) {
         parse_BuffModPropertyDecConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodpropertydecconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(450)) goto parse_BuffModChangeDmgByBuffSubConfig;
        break;
      }

      // optional .pb.BuffModChangeDmgByBuffSubConfig BuffModChangeDmgByBuffSubConfig = 56;
      case 56: {
        if (tag == 450) {
         parse_BuffModChangeDmgByBuffSubConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodchangedmgbybuffsubconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(458)) goto parse_BuffModDisableConfig;
        break;
      }

      // optional .pb.BuffModDisableConfig BuffModDisableConfig = 57;
      case 57: {
        if (tag == 458) {
         parse_BuffModDisableConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmoddisableconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_BuffModScaleTextConfig;
        break;
      }

      // optional .pb.BuffModScaleTextConfig BuffModScaleTextConfig = 58;
      case 58: {
        if (tag == 466) {
         parse_BuffModScaleTextConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodscaletextconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse_BuffModAddDefPointConfig;
        break;
      }

      // optional .pb.BuffModAddDefPointConfig BuffModAddDefPointConfig = 59;
      case 59: {
        if (tag == 474) {
         parse_BuffModAddDefPointConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodadddefpointconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_BuffModRemoveDefPointConfig;
        break;
      }

      // optional .pb.BuffModRemoveDefPointConfig BuffModRemoveDefPointConfig = 60;
      case 60: {
        if (tag == 482) {
         parse_BuffModRemoveDefPointConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodremovedefpointconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_BuffModEffectInRangeConditionConfig;
        break;
      }

      // optional .pb.BuffModEffectInRangeConditionConfig BuffModEffectInRangeConditionConfig = 61;
      case 61: {
        if (tag == 490) {
         parse_BuffModEffectInRangeConditionConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodeffectinrangeconditionconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(498)) goto parse_BuffModShrinkControlDurationConfig;
        break;
      }

      // optional .pb.BuffModShrinkControlDurationConfig BuffModShrinkControlDurationConfig = 62;
      case 62: {
        if (tag == 498) {
         parse_BuffModShrinkControlDurationConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodshrinkcontroldurationconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(506)) goto parse_BuffModHarmOnMoveConfig;
        break;
      }

      // optional .pb.BuffModHarmOnMoveConfig BuffModHarmOnMoveConfig = 63;
      case 63: {
        if (tag == 506) {
         parse_BuffModHarmOnMoveConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodharmonmoveconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(514)) goto parse_BuffModUnlimitedShieldConfig;
        break;
      }

      // optional .pb.BuffModUnlimitedShieldConfig BuffModUnlimitedShieldConfig = 64;
      case 64: {
        if (tag == 514) {
         parse_BuffModUnlimitedShieldConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodunlimitedshieldconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(522)) goto parse_BuffModReflectBuffConfig;
        break;
      }

      // optional .pb.BuffModReflectBuffConfig BuffModReflectBuffConfig = 65;
      case 65: {
        if (tag == 522) {
         parse_BuffModReflectBuffConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodreflectbuffconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(530)) goto parse_BuffModFatalDmgShiftConfig;
        break;
      }

      // optional .pb.BuffModFatalDmgShiftConfig BuffModFatalDmgShiftConfig = 66;
      case 66: {
        if (tag == 530) {
         parse_BuffModFatalDmgShiftConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodfataldmgshiftconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(538)) goto parse_BuffModFearConfig;
        break;
      }

      // optional .pb.BuffModFearConfig BuffModFearConfig = 67;
      case 67: {
        if (tag == 538) {
         parse_BuffModFearConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodfearconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(546)) goto parse_BuffModRageImmunityConfig;
        break;
      }

      // optional .pb.BuffModRageImmunityConfig BuffModRageImmunityConfig = 68;
      case 68: {
        if (tag == 546) {
         parse_BuffModRageImmunityConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodrageimmunityconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(554)) goto parse_BuffModChangeDirConfig;
        break;
      }

      // optional .pb.BuffModChangeDirConfig BuffModChangeDirConfig = 69;
      case 69: {
        if (tag == 554) {
         parse_BuffModChangeDirConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodchangedirconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(562)) goto parse_BuffModTDMoniterDefenderStateConfig;
        break;
      }

      // optional .pb.BuffModTDMoniterDefenderStateConfig BuffModTDMoniterDefenderStateConfig = 70;
      case 70: {
        if (tag == 562) {
         parse_BuffModTDMoniterDefenderStateConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodtdmoniterdefenderstateconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(570)) goto parse_BuffModTDNoBeanConfig;
        break;
      }

      // optional .pb.BuffModTDNoBeanConfig BuffModTDNoBeanConfig = 71;
      case 71: {
        if (tag == 570) {
         parse_BuffModTDNoBeanConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodtdnobeanconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(578)) goto parse_BuffModTDRepeatSendBeanConfig;
        break;
      }

      // optional .pb.BuffModTDRepeatSendBeanConfig BuffModTDRepeatSendBeanConfig = 72;
      case 72: {
        if (tag == 578) {
         parse_BuffModTDRepeatSendBeanConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodtdrepeatsendbeanconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(586)) goto parse_BuffModTDRepeatCheckBeanConfig;
        break;
      }

      // optional .pb.BuffModTDRepeatCheckBeanConfig BuffModTDRepeatCheckBeanConfig = 73;
      case 73: {
        if (tag == 586) {
         parse_BuffModTDRepeatCheckBeanConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodtdrepeatcheckbeanconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(594)) goto parse_BuffModIgnoreShieldConfig;
        break;
      }

      // optional .pb.BuffModIgnoreShieldConfig BuffModIgnoreShieldConfig = 74;
      case 74: {
        if (tag == 594) {
         parse_BuffModIgnoreShieldConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodignoreshieldconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(602)) goto parse_BuffModNoSuckBloodConfig;
        break;
      }

      // optional .pb.BuffModNoSuckBloodConfig BuffModNoSuckBloodConfig = 75;
      case 75: {
        if (tag == 602) {
         parse_BuffModNoSuckBloodConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodnosuckbloodconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(610)) goto parse_BuffModBuffOnStackConfig;
        break;
      }

      // optional .pb.BuffModBuffOnStackConfig BuffModBuffOnStackConfig = 76;
      case 76: {
        if (tag == 610) {
         parse_BuffModBuffOnStackConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodbuffonstackconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(618)) goto parse_BuffModRevertStateOnEndConfig;
        break;
      }

      // optional .pb.BuffModRevertStateOnEndConfig BuffModRevertStateOnEndConfig = 77;
      case 77: {
        if (tag == 618) {
         parse_BuffModRevertStateOnEndConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodrevertstateonendconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(626)) goto parse_BuffModChangeCastRangeConfig;
        break;
      }

      // optional .pb.BuffModChangeCastRangeConfig BuffModChangeCastRangeConfig = 78;
      case 78: {
        if (tag == 626) {
         parse_BuffModChangeCastRangeConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodchangecastrangeconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(634)) goto parse_BuffModNoReviveConfig;
        break;
      }

      // optional .pb.BuffModNoReviveConfig BuffModNoReviveConfig = 79;
      case 79: {
        if (tag == 634) {
         parse_BuffModNoReviveConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodnoreviveconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(642)) goto parse_BuffModChangeSummonedAIConfig;
        break;
      }

      // optional .pb.BuffModChangeSummonedAIConfig BuffModChangeSummonedAIConfig = 80;
      case 80: {
        if (tag == 642) {
         parse_BuffModChangeSummonedAIConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodchangesummonedaiconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(650)) goto parse_BuffModSetMaxLoseHPConfig;
        break;
      }

      // optional .pb.BuffModSetMaxLoseHPConfig BuffModSetMaxLoseHPConfig = 81;
      case 81: {
        if (tag == 650) {
         parse_BuffModSetMaxLoseHPConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodsetmaxlosehpconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(658)) goto parse_BuffModAdjustReflectedDamageConfig;
        break;
      }

      // optional .pb.BuffModAdjustReflectedDamageConfig BuffModAdjustReflectedDamageConfig = 82;
      case 82: {
        if (tag == 658) {
         parse_BuffModAdjustReflectedDamageConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodadjustreflecteddamageconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(666)) goto parse_BuffModActiveUIEffectConfig;
        break;
      }

      // optional .pb.BuffModActiveUIEffectConfig BuffModActiveUIEffectConfig = 83;
      case 83: {
        if (tag == 666) {
         parse_BuffModActiveUIEffectConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodactiveuieffectconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(674)) goto parse_BuffModAdjustBuffHitRateConfig;
        break;
      }

      // optional .pb.BuffModAdjustBuffHitRateConfig BuffModAdjustBuffHitRateConfig = 84;
      case 84: {
        if (tag == 674) {
         parse_BuffModAdjustBuffHitRateConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodadjustbuffhitrateconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(682)) goto parse_BuffModLimitByMaxHpRateConfig;
        break;
      }

      // optional .pb.BuffModLimitByMaxHpRateConfig BuffModLimitByMaxHpRateConfig = 85;
      case 85: {
        if (tag == 682) {
         parse_BuffModLimitByMaxHpRateConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodlimitbymaxhprateconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(690)) goto parse_BuffModBattleArcherModifyConfig;
        break;
      }

      // optional .pb.BuffModBattleArcherModifyConfig BuffModBattleArcherModifyConfig = 86;
      case 86: {
        if (tag == 690) {
         parse_BuffModBattleArcherModifyConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffmodbattlearchermodifyconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffData)
  return false;
#undef DO_
}

void BuffData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffData)
  // optional int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .pb.BuffBaseDataModel BaseDataModel = 2;
  if (has_basedatamodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->basedatamodel(), output);
  }

  // optional .pb.SpecialHitModel SpecialHitModel = 3;
  if (has_specialhitmodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->specialhitmodel(), output);
  }

  // optional .pb.BuffModNothingConfig BuffModNothingConfig = 4;
  if (has_buffmodnothingconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->buffmodnothingconfig(), output);
  }

  // optional .pb.BuffModAttackSpeedConfig BuffModAttackSpeedConfig = 6;
  if (has_buffmodattackspeedconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->buffmodattackspeedconfig(), output);
  }

  // optional .pb.BuffModNoMoveConfig BuffModNoMoveConfig = 7;
  if (has_buffmodnomoveconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->buffmodnomoveconfig(), output);
  }

  // optional .pb.BuffModNoNormalSkillConfig BuffModNoNormalSkillConfig = 8;
  if (has_buffmodnonormalskillconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->buffmodnonormalskillconfig(), output);
  }

  // optional .pb.BuffModNoSkillConfig BuffModNoSkillConfig = 9;
  if (has_buffmodnoskillconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->buffmodnoskillconfig(), output);
  }

  // optional .pb.BuffModDizzinessConfig BuffModDizzinessConfig = 10;
  if (has_buffmoddizzinessconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->buffmoddizzinessconfig(), output);
  }

  // optional .pb.BuffModFreezeConfig BuffModFreezeConfig = 11;
  if (has_buffmodfreezeconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->buffmodfreezeconfig(), output);
  }

  // optional .pb.BuffModRandomMoveConfig BuffModRandomMoveConfig = 12;
  if (has_buffmodrandommoveconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->buffmodrandommoveconfig(), output);
  }

  // optional .pb.BuffModTransformScaleConfig BuffModTransformScaleConfig = 13;
  if (has_buffmodtransformscaleconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->buffmodtransformscaleconfig(), output);
  }

  // optional .pb.BuffModAbsorbDamageConfig BuffModAbsorbDamageConfig = 14;
  if (has_buffmodabsorbdamageconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->buffmodabsorbdamageconfig(), output);
  }

  // optional .pb.BuffModDieConfig BuffModDieConfig = 15;
  if (has_buffmoddieconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->buffmoddieconfig(), output);
  }

  // optional .pb.BuffModNonTargettableConfig BuffModNonTargettableConfig = 16;
  if (has_buffmodnontargettableconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->buffmodnontargettableconfig(), output);
  }

  // optional .pb.BuffModReflectDamageConfig BuffModReflectDamageConfig = 17;
  if (has_buffmodreflectdamageconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->buffmodreflectdamageconfig(), output);
  }

  // optional .pb.BuffModReflectSkillConfig BuffModReflectSkillConfig = 18;
  if (has_buffmodreflectskillconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->buffmodreflectskillconfig(), output);
  }

  // optional .pb.BuffModBuffImmunityConfig BuffModBuffImmunityConfig = 19;
  if (has_buffmodbuffimmunityconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->buffmodbuffimmunityconfig(), output);
  }

  // optional .pb.BuffModTransformationConfig BuffModTransformationConfig = 20;
  if (has_buffmodtransformationconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->buffmodtransformationconfig(), output);
  }

  // optional .pb.BuffModStealHpConfig BuffModStealHpConfig = 21;
  if (has_buffmodstealhpconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->buffmodstealhpconfig(), output);
  }

  // optional .pb.BuffModRepeatSkillConfig BuffModRepeatSkillConfig = 23;
  if (has_buffmodrepeatskillconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->buffmodrepeatskillconfig(), output);
  }

  // optional .pb.BuffModDamageShareConfig BuffModDamageShareConfig = 24;
  if (has_buffmoddamageshareconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->buffmoddamageshareconfig(), output);
  }

  // optional .pb.BuffModDamageCopyConfig BuffModDamageCopyConfig = 25;
  if (has_buffmoddamagecopyconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->buffmoddamagecopyconfig(), output);
  }

  // optional .pb.BuffModHealCopyConfig BuffModHealCopyConfig = 26;
  if (has_buffmodhealcopyconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->buffmodhealcopyconfig(), output);
  }

  // optional .pb.BuffModHpConfig BuffModHpConfig = 27;
  if (has_buffmodhpconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->buffmodhpconfig(), output);
  }

  // optional .pb.BuffModRageConfig BuffModRageConfig = 28;
  if (has_buffmodrageconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->buffmodrageconfig(), output);
  }

  // optional .pb.BuffModSkillOnEndConfig BuffModSkillOnEndConfig = 29;
  if (has_buffmodskillonendconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->buffmodskillonendconfig(), output);
  }

  // optional .pb.BuffModTauntConfig BuffModTauntConfig = 30;
  if (has_buffmodtauntconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->buffmodtauntconfig(), output);
  }

  // optional .pb.BuffModCharmedConfig BuffModCharmedConfig = 31;
  if (has_buffmodcharmedconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->buffmodcharmedconfig(), output);
  }

  // optional .pb.BuffModChaosConfig BuffModChaosConfig = 32;
  if (has_buffmodchaosconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->buffmodchaosconfig(), output);
  }

  // optional .pb.BuffModDispelConfig BuffModDispelConfig = 33;
  if (has_buffmoddispelconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->buffmoddispelconfig(), output);
  }

  // optional .pb.BuffModSkillImmunityConfig BuffModSkillImmunityConfig = 34;
  if (has_buffmodskillimmunityconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->buffmodskillimmunityconfig(), output);
  }

  // optional .pb.BuffModToughnessConfig BuffModToughnessConfig = 35;
  if (has_buffmodtoughnessconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->buffmodtoughnessconfig(), output);
  }

  // optional .pb.BuffModPropertyConfig BuffModPropertyConfig = 36;
  if (has_buffmodpropertyconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->buffmodpropertyconfig(), output);
  }

  // optional .pb.BuffModNonHostileTargettableConfig BuffModNonHostileTargettableConfig = 37;
  if (has_buffmodnonhostiletargettableconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->buffmodnonhostiletargettableconfig(), output);
  }

  // optional .pb.BuffModSpecifySkillTidConfig BuffModSpecifySkillTidConfig = 39;
  if (has_buffmodspecifyskilltidconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->buffmodspecifyskilltidconfig(), output);
  }

  // optional .pb.BuffModHitActionImmunityConfig BuffModHitActionImmunityConfig = 40;
  if (has_buffmodhitactionimmunityconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->buffmodhitactionimmunityconfig(), output);
  }

  // optional .pb.BuffModDamageImmunityConfig BuffModDamageImmunityConfig = 41;
  if (has_buffmoddamageimmunityconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->buffmoddamageimmunityconfig(), output);
  }

  // optional .pb.BuffModArmAttrAddConfig BuffModArmAttrAddConfig = 42;
  if (has_buffmodarmattraddconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->buffmodarmattraddconfig(), output);
  }

  // optional .pb.BuffModSkillOnLowLifeConfig BuffModSkillOnLowLifeConfig = 43;
  if (has_buffmodskillonlowlifeconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->buffmodskillonlowlifeconfig(), output);
  }

  // optional .pb.BuffModResetBuffTimeConfig BuffModResetBuffTimeConfig = 44;
  if (has_buffmodresetbufftimeconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->buffmodresetbufftimeconfig(), output);
  }

  // optional .pb.BuffModAddSkillConfig BuffModAddSkillConfig = 45;
  if (has_buffmodaddskillconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->buffmodaddskillconfig(), output);
  }

  // optional .pb.BuffModPropertyFormulaConfig BuffModPropertyFormulaConfig = 46;
  if (has_buffmodpropertyformulaconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->buffmodpropertyformulaconfig(), output);
  }

  // optional .pb.BuffModEffectInRangeConfig BuffModEffectInRangeConfig = 47;
  if (has_buffmodeffectinrangeconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->buffmodeffectinrangeconfig(), output);
  }

  // optional .pb.BuffModRecordDataConfig BuffModRecordDataConfig = 48;
  if (has_buffmodrecorddataconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->buffmodrecorddataconfig(), output);
  }

  // optional .pb.BuffModSkillOnEndConfig BuffModSkillOnEndBConfig = 49;
  if (has_buffmodskillonendbconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->buffmodskillonendbconfig(), output);
  }

  // optional .pb.BuffModMoveControlImmunityConfig BuffModMoveControlImmunityConfig = 50;
  if (has_buffmodmovecontrolimmunityconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->buffmodmovecontrolimmunityconfig(), output);
  }

  // optional .pb.BuffModHideSomeAppearanceConfig BuffModHideSomeAppearanceConfig = 51;
  if (has_buffmodhidesomeappearanceconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->buffmodhidesomeappearanceconfig(), output);
  }

  // optional .pb.BuffModConditionChangeConfig BuffModConditionChangeConfig = 52;
  if (has_buffmodconditionchangeconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->buffmodconditionchangeconfig(), output);
  }

  // optional .pb.BuffModNoRageRecoverConfig BuffModNoRageRecoverConfig = 53;
  if (has_buffmodnoragerecoverconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->buffmodnoragerecoverconfig(), output);
  }

  // optional .pb.BuffModInheritExistBuffStackConfig BuffModInheritExistBuffStackConfig = 54;
  if (has_buffmodinheritexistbuffstackconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->buffmodinheritexistbuffstackconfig(), output);
  }

  // optional .pb.BuffModPropertyDecConfig BuffModPropertyDecConfig = 55;
  if (has_buffmodpropertydecconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->buffmodpropertydecconfig(), output);
  }

  // optional .pb.BuffModChangeDmgByBuffSubConfig BuffModChangeDmgByBuffSubConfig = 56;
  if (has_buffmodchangedmgbybuffsubconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, this->buffmodchangedmgbybuffsubconfig(), output);
  }

  // optional .pb.BuffModDisableConfig BuffModDisableConfig = 57;
  if (has_buffmoddisableconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->buffmoddisableconfig(), output);
  }

  // optional .pb.BuffModScaleTextConfig BuffModScaleTextConfig = 58;
  if (has_buffmodscaletextconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->buffmodscaletextconfig(), output);
  }

  // optional .pb.BuffModAddDefPointConfig BuffModAddDefPointConfig = 59;
  if (has_buffmodadddefpointconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->buffmodadddefpointconfig(), output);
  }

  // optional .pb.BuffModRemoveDefPointConfig BuffModRemoveDefPointConfig = 60;
  if (has_buffmodremovedefpointconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->buffmodremovedefpointconfig(), output);
  }

  // optional .pb.BuffModEffectInRangeConditionConfig BuffModEffectInRangeConditionConfig = 61;
  if (has_buffmodeffectinrangeconditionconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->buffmodeffectinrangeconditionconfig(), output);
  }

  // optional .pb.BuffModShrinkControlDurationConfig BuffModShrinkControlDurationConfig = 62;
  if (has_buffmodshrinkcontroldurationconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->buffmodshrinkcontroldurationconfig(), output);
  }

  // optional .pb.BuffModHarmOnMoveConfig BuffModHarmOnMoveConfig = 63;
  if (has_buffmodharmonmoveconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->buffmodharmonmoveconfig(), output);
  }

  // optional .pb.BuffModUnlimitedShieldConfig BuffModUnlimitedShieldConfig = 64;
  if (has_buffmodunlimitedshieldconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->buffmodunlimitedshieldconfig(), output);
  }

  // optional .pb.BuffModReflectBuffConfig BuffModReflectBuffConfig = 65;
  if (has_buffmodreflectbuffconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->buffmodreflectbuffconfig(), output);
  }

  // optional .pb.BuffModFatalDmgShiftConfig BuffModFatalDmgShiftConfig = 66;
  if (has_buffmodfataldmgshiftconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, this->buffmodfataldmgshiftconfig(), output);
  }

  // optional .pb.BuffModFearConfig BuffModFearConfig = 67;
  if (has_buffmodfearconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      67, this->buffmodfearconfig(), output);
  }

  // optional .pb.BuffModRageImmunityConfig BuffModRageImmunityConfig = 68;
  if (has_buffmodrageimmunityconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      68, this->buffmodrageimmunityconfig(), output);
  }

  // optional .pb.BuffModChangeDirConfig BuffModChangeDirConfig = 69;
  if (has_buffmodchangedirconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69, this->buffmodchangedirconfig(), output);
  }

  // optional .pb.BuffModTDMoniterDefenderStateConfig BuffModTDMoniterDefenderStateConfig = 70;
  if (has_buffmodtdmoniterdefenderstateconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->buffmodtdmoniterdefenderstateconfig(), output);
  }

  // optional .pb.BuffModTDNoBeanConfig BuffModTDNoBeanConfig = 71;
  if (has_buffmodtdnobeanconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, this->buffmodtdnobeanconfig(), output);
  }

  // optional .pb.BuffModTDRepeatSendBeanConfig BuffModTDRepeatSendBeanConfig = 72;
  if (has_buffmodtdrepeatsendbeanconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, this->buffmodtdrepeatsendbeanconfig(), output);
  }

  // optional .pb.BuffModTDRepeatCheckBeanConfig BuffModTDRepeatCheckBeanConfig = 73;
  if (has_buffmodtdrepeatcheckbeanconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      73, this->buffmodtdrepeatcheckbeanconfig(), output);
  }

  // optional .pb.BuffModIgnoreShieldConfig BuffModIgnoreShieldConfig = 74;
  if (has_buffmodignoreshieldconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      74, this->buffmodignoreshieldconfig(), output);
  }

  // optional .pb.BuffModNoSuckBloodConfig BuffModNoSuckBloodConfig = 75;
  if (has_buffmodnosuckbloodconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      75, this->buffmodnosuckbloodconfig(), output);
  }

  // optional .pb.BuffModBuffOnStackConfig BuffModBuffOnStackConfig = 76;
  if (has_buffmodbuffonstackconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      76, this->buffmodbuffonstackconfig(), output);
  }

  // optional .pb.BuffModRevertStateOnEndConfig BuffModRevertStateOnEndConfig = 77;
  if (has_buffmodrevertstateonendconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      77, this->buffmodrevertstateonendconfig(), output);
  }

  // optional .pb.BuffModChangeCastRangeConfig BuffModChangeCastRangeConfig = 78;
  if (has_buffmodchangecastrangeconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      78, this->buffmodchangecastrangeconfig(), output);
  }

  // optional .pb.BuffModNoReviveConfig BuffModNoReviveConfig = 79;
  if (has_buffmodnoreviveconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      79, this->buffmodnoreviveconfig(), output);
  }

  // optional .pb.BuffModChangeSummonedAIConfig BuffModChangeSummonedAIConfig = 80;
  if (has_buffmodchangesummonedaiconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80, this->buffmodchangesummonedaiconfig(), output);
  }

  // optional .pb.BuffModSetMaxLoseHPConfig BuffModSetMaxLoseHPConfig = 81;
  if (has_buffmodsetmaxlosehpconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      81, this->buffmodsetmaxlosehpconfig(), output);
  }

  // optional .pb.BuffModAdjustReflectedDamageConfig BuffModAdjustReflectedDamageConfig = 82;
  if (has_buffmodadjustreflecteddamageconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      82, this->buffmodadjustreflecteddamageconfig(), output);
  }

  // optional .pb.BuffModActiveUIEffectConfig BuffModActiveUIEffectConfig = 83;
  if (has_buffmodactiveuieffectconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      83, this->buffmodactiveuieffectconfig(), output);
  }

  // optional .pb.BuffModAdjustBuffHitRateConfig BuffModAdjustBuffHitRateConfig = 84;
  if (has_buffmodadjustbuffhitrateconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      84, this->buffmodadjustbuffhitrateconfig(), output);
  }

  // optional .pb.BuffModLimitByMaxHpRateConfig BuffModLimitByMaxHpRateConfig = 85;
  if (has_buffmodlimitbymaxhprateconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      85, this->buffmodlimitbymaxhprateconfig(), output);
  }

  // optional .pb.BuffModBattleArcherModifyConfig BuffModBattleArcherModifyConfig = 86;
  if (has_buffmodbattlearchermodifyconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      86, this->buffmodbattlearchermodifyconfig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffData)
}

::google::protobuf::uint8* BuffData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffData)
  // optional int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .pb.BuffBaseDataModel BaseDataModel = 2;
  if (has_basedatamodel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->basedatamodel(), target);
  }

  // optional .pb.SpecialHitModel SpecialHitModel = 3;
  if (has_specialhitmodel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->specialhitmodel(), target);
  }

  // optional .pb.BuffModNothingConfig BuffModNothingConfig = 4;
  if (has_buffmodnothingconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->buffmodnothingconfig(), target);
  }

  // optional .pb.BuffModAttackSpeedConfig BuffModAttackSpeedConfig = 6;
  if (has_buffmodattackspeedconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->buffmodattackspeedconfig(), target);
  }

  // optional .pb.BuffModNoMoveConfig BuffModNoMoveConfig = 7;
  if (has_buffmodnomoveconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->buffmodnomoveconfig(), target);
  }

  // optional .pb.BuffModNoNormalSkillConfig BuffModNoNormalSkillConfig = 8;
  if (has_buffmodnonormalskillconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->buffmodnonormalskillconfig(), target);
  }

  // optional .pb.BuffModNoSkillConfig BuffModNoSkillConfig = 9;
  if (has_buffmodnoskillconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->buffmodnoskillconfig(), target);
  }

  // optional .pb.BuffModDizzinessConfig BuffModDizzinessConfig = 10;
  if (has_buffmoddizzinessconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->buffmoddizzinessconfig(), target);
  }

  // optional .pb.BuffModFreezeConfig BuffModFreezeConfig = 11;
  if (has_buffmodfreezeconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->buffmodfreezeconfig(), target);
  }

  // optional .pb.BuffModRandomMoveConfig BuffModRandomMoveConfig = 12;
  if (has_buffmodrandommoveconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->buffmodrandommoveconfig(), target);
  }

  // optional .pb.BuffModTransformScaleConfig BuffModTransformScaleConfig = 13;
  if (has_buffmodtransformscaleconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->buffmodtransformscaleconfig(), target);
  }

  // optional .pb.BuffModAbsorbDamageConfig BuffModAbsorbDamageConfig = 14;
  if (has_buffmodabsorbdamageconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->buffmodabsorbdamageconfig(), target);
  }

  // optional .pb.BuffModDieConfig BuffModDieConfig = 15;
  if (has_buffmoddieconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->buffmoddieconfig(), target);
  }

  // optional .pb.BuffModNonTargettableConfig BuffModNonTargettableConfig = 16;
  if (has_buffmodnontargettableconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->buffmodnontargettableconfig(), target);
  }

  // optional .pb.BuffModReflectDamageConfig BuffModReflectDamageConfig = 17;
  if (has_buffmodreflectdamageconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->buffmodreflectdamageconfig(), target);
  }

  // optional .pb.BuffModReflectSkillConfig BuffModReflectSkillConfig = 18;
  if (has_buffmodreflectskillconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->buffmodreflectskillconfig(), target);
  }

  // optional .pb.BuffModBuffImmunityConfig BuffModBuffImmunityConfig = 19;
  if (has_buffmodbuffimmunityconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->buffmodbuffimmunityconfig(), target);
  }

  // optional .pb.BuffModTransformationConfig BuffModTransformationConfig = 20;
  if (has_buffmodtransformationconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->buffmodtransformationconfig(), target);
  }

  // optional .pb.BuffModStealHpConfig BuffModStealHpConfig = 21;
  if (has_buffmodstealhpconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->buffmodstealhpconfig(), target);
  }

  // optional .pb.BuffModRepeatSkillConfig BuffModRepeatSkillConfig = 23;
  if (has_buffmodrepeatskillconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->buffmodrepeatskillconfig(), target);
  }

  // optional .pb.BuffModDamageShareConfig BuffModDamageShareConfig = 24;
  if (has_buffmoddamageshareconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->buffmoddamageshareconfig(), target);
  }

  // optional .pb.BuffModDamageCopyConfig BuffModDamageCopyConfig = 25;
  if (has_buffmoddamagecopyconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->buffmoddamagecopyconfig(), target);
  }

  // optional .pb.BuffModHealCopyConfig BuffModHealCopyConfig = 26;
  if (has_buffmodhealcopyconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->buffmodhealcopyconfig(), target);
  }

  // optional .pb.BuffModHpConfig BuffModHpConfig = 27;
  if (has_buffmodhpconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->buffmodhpconfig(), target);
  }

  // optional .pb.BuffModRageConfig BuffModRageConfig = 28;
  if (has_buffmodrageconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->buffmodrageconfig(), target);
  }

  // optional .pb.BuffModSkillOnEndConfig BuffModSkillOnEndConfig = 29;
  if (has_buffmodskillonendconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->buffmodskillonendconfig(), target);
  }

  // optional .pb.BuffModTauntConfig BuffModTauntConfig = 30;
  if (has_buffmodtauntconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->buffmodtauntconfig(), target);
  }

  // optional .pb.BuffModCharmedConfig BuffModCharmedConfig = 31;
  if (has_buffmodcharmedconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->buffmodcharmedconfig(), target);
  }

  // optional .pb.BuffModChaosConfig BuffModChaosConfig = 32;
  if (has_buffmodchaosconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->buffmodchaosconfig(), target);
  }

  // optional .pb.BuffModDispelConfig BuffModDispelConfig = 33;
  if (has_buffmoddispelconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->buffmoddispelconfig(), target);
  }

  // optional .pb.BuffModSkillImmunityConfig BuffModSkillImmunityConfig = 34;
  if (has_buffmodskillimmunityconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->buffmodskillimmunityconfig(), target);
  }

  // optional .pb.BuffModToughnessConfig BuffModToughnessConfig = 35;
  if (has_buffmodtoughnessconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->buffmodtoughnessconfig(), target);
  }

  // optional .pb.BuffModPropertyConfig BuffModPropertyConfig = 36;
  if (has_buffmodpropertyconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->buffmodpropertyconfig(), target);
  }

  // optional .pb.BuffModNonHostileTargettableConfig BuffModNonHostileTargettableConfig = 37;
  if (has_buffmodnonhostiletargettableconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->buffmodnonhostiletargettableconfig(), target);
  }

  // optional .pb.BuffModSpecifySkillTidConfig BuffModSpecifySkillTidConfig = 39;
  if (has_buffmodspecifyskilltidconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->buffmodspecifyskilltidconfig(), target);
  }

  // optional .pb.BuffModHitActionImmunityConfig BuffModHitActionImmunityConfig = 40;
  if (has_buffmodhitactionimmunityconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->buffmodhitactionimmunityconfig(), target);
  }

  // optional .pb.BuffModDamageImmunityConfig BuffModDamageImmunityConfig = 41;
  if (has_buffmoddamageimmunityconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->buffmoddamageimmunityconfig(), target);
  }

  // optional .pb.BuffModArmAttrAddConfig BuffModArmAttrAddConfig = 42;
  if (has_buffmodarmattraddconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->buffmodarmattraddconfig(), target);
  }

  // optional .pb.BuffModSkillOnLowLifeConfig BuffModSkillOnLowLifeConfig = 43;
  if (has_buffmodskillonlowlifeconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->buffmodskillonlowlifeconfig(), target);
  }

  // optional .pb.BuffModResetBuffTimeConfig BuffModResetBuffTimeConfig = 44;
  if (has_buffmodresetbufftimeconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->buffmodresetbufftimeconfig(), target);
  }

  // optional .pb.BuffModAddSkillConfig BuffModAddSkillConfig = 45;
  if (has_buffmodaddskillconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->buffmodaddskillconfig(), target);
  }

  // optional .pb.BuffModPropertyFormulaConfig BuffModPropertyFormulaConfig = 46;
  if (has_buffmodpropertyformulaconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->buffmodpropertyformulaconfig(), target);
  }

  // optional .pb.BuffModEffectInRangeConfig BuffModEffectInRangeConfig = 47;
  if (has_buffmodeffectinrangeconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->buffmodeffectinrangeconfig(), target);
  }

  // optional .pb.BuffModRecordDataConfig BuffModRecordDataConfig = 48;
  if (has_buffmodrecorddataconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->buffmodrecorddataconfig(), target);
  }

  // optional .pb.BuffModSkillOnEndConfig BuffModSkillOnEndBConfig = 49;
  if (has_buffmodskillonendbconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->buffmodskillonendbconfig(), target);
  }

  // optional .pb.BuffModMoveControlImmunityConfig BuffModMoveControlImmunityConfig = 50;
  if (has_buffmodmovecontrolimmunityconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->buffmodmovecontrolimmunityconfig(), target);
  }

  // optional .pb.BuffModHideSomeAppearanceConfig BuffModHideSomeAppearanceConfig = 51;
  if (has_buffmodhidesomeappearanceconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->buffmodhidesomeappearanceconfig(), target);
  }

  // optional .pb.BuffModConditionChangeConfig BuffModConditionChangeConfig = 52;
  if (has_buffmodconditionchangeconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->buffmodconditionchangeconfig(), target);
  }

  // optional .pb.BuffModNoRageRecoverConfig BuffModNoRageRecoverConfig = 53;
  if (has_buffmodnoragerecoverconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->buffmodnoragerecoverconfig(), target);
  }

  // optional .pb.BuffModInheritExistBuffStackConfig BuffModInheritExistBuffStackConfig = 54;
  if (has_buffmodinheritexistbuffstackconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->buffmodinheritexistbuffstackconfig(), target);
  }

  // optional .pb.BuffModPropertyDecConfig BuffModPropertyDecConfig = 55;
  if (has_buffmodpropertydecconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->buffmodpropertydecconfig(), target);
  }

  // optional .pb.BuffModChangeDmgByBuffSubConfig BuffModChangeDmgByBuffSubConfig = 56;
  if (has_buffmodchangedmgbybuffsubconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, this->buffmodchangedmgbybuffsubconfig(), target);
  }

  // optional .pb.BuffModDisableConfig BuffModDisableConfig = 57;
  if (has_buffmoddisableconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->buffmoddisableconfig(), target);
  }

  // optional .pb.BuffModScaleTextConfig BuffModScaleTextConfig = 58;
  if (has_buffmodscaletextconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->buffmodscaletextconfig(), target);
  }

  // optional .pb.BuffModAddDefPointConfig BuffModAddDefPointConfig = 59;
  if (has_buffmodadddefpointconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->buffmodadddefpointconfig(), target);
  }

  // optional .pb.BuffModRemoveDefPointConfig BuffModRemoveDefPointConfig = 60;
  if (has_buffmodremovedefpointconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->buffmodremovedefpointconfig(), target);
  }

  // optional .pb.BuffModEffectInRangeConditionConfig BuffModEffectInRangeConditionConfig = 61;
  if (has_buffmodeffectinrangeconditionconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->buffmodeffectinrangeconditionconfig(), target);
  }

  // optional .pb.BuffModShrinkControlDurationConfig BuffModShrinkControlDurationConfig = 62;
  if (has_buffmodshrinkcontroldurationconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->buffmodshrinkcontroldurationconfig(), target);
  }

  // optional .pb.BuffModHarmOnMoveConfig BuffModHarmOnMoveConfig = 63;
  if (has_buffmodharmonmoveconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->buffmodharmonmoveconfig(), target);
  }

  // optional .pb.BuffModUnlimitedShieldConfig BuffModUnlimitedShieldConfig = 64;
  if (has_buffmodunlimitedshieldconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, this->buffmodunlimitedshieldconfig(), target);
  }

  // optional .pb.BuffModReflectBuffConfig BuffModReflectBuffConfig = 65;
  if (has_buffmodreflectbuffconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->buffmodreflectbuffconfig(), target);
  }

  // optional .pb.BuffModFatalDmgShiftConfig BuffModFatalDmgShiftConfig = 66;
  if (has_buffmodfataldmgshiftconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        66, this->buffmodfataldmgshiftconfig(), target);
  }

  // optional .pb.BuffModFearConfig BuffModFearConfig = 67;
  if (has_buffmodfearconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        67, this->buffmodfearconfig(), target);
  }

  // optional .pb.BuffModRageImmunityConfig BuffModRageImmunityConfig = 68;
  if (has_buffmodrageimmunityconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        68, this->buffmodrageimmunityconfig(), target);
  }

  // optional .pb.BuffModChangeDirConfig BuffModChangeDirConfig = 69;
  if (has_buffmodchangedirconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        69, this->buffmodchangedirconfig(), target);
  }

  // optional .pb.BuffModTDMoniterDefenderStateConfig BuffModTDMoniterDefenderStateConfig = 70;
  if (has_buffmodtdmoniterdefenderstateconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->buffmodtdmoniterdefenderstateconfig(), target);
  }

  // optional .pb.BuffModTDNoBeanConfig BuffModTDNoBeanConfig = 71;
  if (has_buffmodtdnobeanconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        71, this->buffmodtdnobeanconfig(), target);
  }

  // optional .pb.BuffModTDRepeatSendBeanConfig BuffModTDRepeatSendBeanConfig = 72;
  if (has_buffmodtdrepeatsendbeanconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        72, this->buffmodtdrepeatsendbeanconfig(), target);
  }

  // optional .pb.BuffModTDRepeatCheckBeanConfig BuffModTDRepeatCheckBeanConfig = 73;
  if (has_buffmodtdrepeatcheckbeanconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        73, this->buffmodtdrepeatcheckbeanconfig(), target);
  }

  // optional .pb.BuffModIgnoreShieldConfig BuffModIgnoreShieldConfig = 74;
  if (has_buffmodignoreshieldconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        74, this->buffmodignoreshieldconfig(), target);
  }

  // optional .pb.BuffModNoSuckBloodConfig BuffModNoSuckBloodConfig = 75;
  if (has_buffmodnosuckbloodconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        75, this->buffmodnosuckbloodconfig(), target);
  }

  // optional .pb.BuffModBuffOnStackConfig BuffModBuffOnStackConfig = 76;
  if (has_buffmodbuffonstackconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        76, this->buffmodbuffonstackconfig(), target);
  }

  // optional .pb.BuffModRevertStateOnEndConfig BuffModRevertStateOnEndConfig = 77;
  if (has_buffmodrevertstateonendconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        77, this->buffmodrevertstateonendconfig(), target);
  }

  // optional .pb.BuffModChangeCastRangeConfig BuffModChangeCastRangeConfig = 78;
  if (has_buffmodchangecastrangeconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        78, this->buffmodchangecastrangeconfig(), target);
  }

  // optional .pb.BuffModNoReviveConfig BuffModNoReviveConfig = 79;
  if (has_buffmodnoreviveconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        79, this->buffmodnoreviveconfig(), target);
  }

  // optional .pb.BuffModChangeSummonedAIConfig BuffModChangeSummonedAIConfig = 80;
  if (has_buffmodchangesummonedaiconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        80, this->buffmodchangesummonedaiconfig(), target);
  }

  // optional .pb.BuffModSetMaxLoseHPConfig BuffModSetMaxLoseHPConfig = 81;
  if (has_buffmodsetmaxlosehpconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        81, this->buffmodsetmaxlosehpconfig(), target);
  }

  // optional .pb.BuffModAdjustReflectedDamageConfig BuffModAdjustReflectedDamageConfig = 82;
  if (has_buffmodadjustreflecteddamageconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        82, this->buffmodadjustreflecteddamageconfig(), target);
  }

  // optional .pb.BuffModActiveUIEffectConfig BuffModActiveUIEffectConfig = 83;
  if (has_buffmodactiveuieffectconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        83, this->buffmodactiveuieffectconfig(), target);
  }

  // optional .pb.BuffModAdjustBuffHitRateConfig BuffModAdjustBuffHitRateConfig = 84;
  if (has_buffmodadjustbuffhitrateconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        84, this->buffmodadjustbuffhitrateconfig(), target);
  }

  // optional .pb.BuffModLimitByMaxHpRateConfig BuffModLimitByMaxHpRateConfig = 85;
  if (has_buffmodlimitbymaxhprateconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        85, this->buffmodlimitbymaxhprateconfig(), target);
  }

  // optional .pb.BuffModBattleArcherModifyConfig BuffModBattleArcherModifyConfig = 86;
  if (has_buffmodbattlearchermodifyconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        86, this->buffmodbattlearchermodifyconfig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffData)
  return target;
}

int BuffData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .pb.BuffBaseDataModel BaseDataModel = 2;
    if (has_basedatamodel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basedatamodel());
    }

    // optional .pb.SpecialHitModel SpecialHitModel = 3;
    if (has_specialhitmodel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->specialhitmodel());
    }

    // optional .pb.BuffModHpConfig BuffModHpConfig = 27;
    if (has_buffmodhpconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodhpconfig());
    }

    // optional .pb.BuffModReflectDamageConfig BuffModReflectDamageConfig = 17;
    if (has_buffmodreflectdamageconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodreflectdamageconfig());
    }

    // optional .pb.BuffModReflectSkillConfig BuffModReflectSkillConfig = 18;
    if (has_buffmodreflectskillconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodreflectskillconfig());
    }

    // optional .pb.BuffModBuffImmunityConfig BuffModBuffImmunityConfig = 19;
    if (has_buffmodbuffimmunityconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodbuffimmunityconfig());
    }

    // optional .pb.BuffModPropertyConfig BuffModPropertyConfig = 36;
    if (has_buffmodpropertyconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodpropertyconfig());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.BuffModAttackSpeedConfig BuffModAttackSpeedConfig = 6;
    if (has_buffmodattackspeedconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodattackspeedconfig());
    }

    // optional .pb.BuffModRageConfig BuffModRageConfig = 28;
    if (has_buffmodrageconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodrageconfig());
    }

    // optional .pb.BuffModAbsorbDamageConfig BuffModAbsorbDamageConfig = 14;
    if (has_buffmodabsorbdamageconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodabsorbdamageconfig());
    }

    // optional .pb.BuffModNonHostileTargettableConfig BuffModNonHostileTargettableConfig = 37;
    if (has_buffmodnonhostiletargettableconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodnonhostiletargettableconfig());
    }

    // optional .pb.BuffModNonTargettableConfig BuffModNonTargettableConfig = 16;
    if (has_buffmodnontargettableconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodnontargettableconfig());
    }

    // optional .pb.BuffModDamageShareConfig BuffModDamageShareConfig = 24;
    if (has_buffmoddamageshareconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmoddamageshareconfig());
    }

    // optional .pb.BuffModHealCopyConfig BuffModHealCopyConfig = 26;
    if (has_buffmodhealcopyconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodhealcopyconfig());
    }

    // optional .pb.BuffModStealHpConfig BuffModStealHpConfig = 21;
    if (has_buffmodstealhpconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodstealhpconfig());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .pb.BuffModSkillImmunityConfig BuffModSkillImmunityConfig = 34;
    if (has_buffmodskillimmunityconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodskillimmunityconfig());
    }

    // optional .pb.BuffModToughnessConfig BuffModToughnessConfig = 35;
    if (has_buffmodtoughnessconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodtoughnessconfig());
    }

    // optional .pb.BuffModDispelConfig BuffModDispelConfig = 33;
    if (has_buffmoddispelconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmoddispelconfig());
    }

    // optional .pb.BuffModDamageImmunityConfig BuffModDamageImmunityConfig = 41;
    if (has_buffmoddamageimmunityconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmoddamageimmunityconfig());
    }

    // optional .pb.BuffModHitActionImmunityConfig BuffModHitActionImmunityConfig = 40;
    if (has_buffmodhitactionimmunityconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodhitactionimmunityconfig());
    }

    // optional .pb.BuffModArmAttrAddConfig BuffModArmAttrAddConfig = 42;
    if (has_buffmodarmattraddconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodarmattraddconfig());
    }

    // optional .pb.BuffModSkillOnLowLifeConfig BuffModSkillOnLowLifeConfig = 43;
    if (has_buffmodskillonlowlifeconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodskillonlowlifeconfig());
    }

    // optional .pb.BuffModMoveControlImmunityConfig BuffModMoveControlImmunityConfig = 50;
    if (has_buffmodmovecontrolimmunityconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodmovecontrolimmunityconfig());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .pb.BuffModConditionChangeConfig BuffModConditionChangeConfig = 52;
    if (has_buffmodconditionchangeconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodconditionchangeconfig());
    }

    // optional .pb.BuffModPropertyDecConfig BuffModPropertyDecConfig = 55;
    if (has_buffmodpropertydecconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodpropertydecconfig());
    }

    // optional .pb.BuffModChangeDmgByBuffSubConfig BuffModChangeDmgByBuffSubConfig = 56;
    if (has_buffmodchangedmgbybuffsubconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodchangedmgbybuffsubconfig());
    }

    // optional .pb.BuffModShrinkControlDurationConfig BuffModShrinkControlDurationConfig = 62;
    if (has_buffmodshrinkcontroldurationconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodshrinkcontroldurationconfig());
    }

    // optional .pb.BuffModUnlimitedShieldConfig BuffModUnlimitedShieldConfig = 64;
    if (has_buffmodunlimitedshieldconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodunlimitedshieldconfig());
    }

    // optional .pb.BuffModReflectBuffConfig BuffModReflectBuffConfig = 65;
    if (has_buffmodreflectbuffconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodreflectbuffconfig());
    }

    // optional .pb.BuffModFatalDmgShiftConfig BuffModFatalDmgShiftConfig = 66;
    if (has_buffmodfataldmgshiftconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodfataldmgshiftconfig());
    }

    // optional .pb.BuffModRageImmunityConfig BuffModRageImmunityConfig = 68;
    if (has_buffmodrageimmunityconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodrageimmunityconfig());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .pb.BuffModIgnoreShieldConfig BuffModIgnoreShieldConfig = 74;
    if (has_buffmodignoreshieldconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodignoreshieldconfig());
    }

    // optional .pb.BuffModRevertStateOnEndConfig BuffModRevertStateOnEndConfig = 77;
    if (has_buffmodrevertstateonendconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodrevertstateonendconfig());
    }

    // optional .pb.BuffModChangeCastRangeConfig BuffModChangeCastRangeConfig = 78;
    if (has_buffmodchangecastrangeconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodchangecastrangeconfig());
    }

    // optional .pb.BuffModSetMaxLoseHPConfig BuffModSetMaxLoseHPConfig = 81;
    if (has_buffmodsetmaxlosehpconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodsetmaxlosehpconfig());
    }

    // optional .pb.BuffModAdjustReflectedDamageConfig BuffModAdjustReflectedDamageConfig = 82;
    if (has_buffmodadjustreflecteddamageconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodadjustreflecteddamageconfig());
    }

    // optional .pb.BuffModActiveUIEffectConfig BuffModActiveUIEffectConfig = 83;
    if (has_buffmodactiveuieffectconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodactiveuieffectconfig());
    }

    // optional .pb.BuffModAdjustBuffHitRateConfig BuffModAdjustBuffHitRateConfig = 84;
    if (has_buffmodadjustbuffhitrateconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodadjustbuffhitrateconfig());
    }

    // optional .pb.BuffModLimitByMaxHpRateConfig BuffModLimitByMaxHpRateConfig = 85;
    if (has_buffmodlimitbymaxhprateconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodlimitbymaxhprateconfig());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .pb.BuffModBattleArcherModifyConfig BuffModBattleArcherModifyConfig = 86;
    if (has_buffmodbattlearchermodifyconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodbattlearchermodifyconfig());
    }

    // optional .pb.BuffModNoMoveConfig BuffModNoMoveConfig = 7;
    if (has_buffmodnomoveconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodnomoveconfig());
    }

    // optional .pb.BuffModNoNormalSkillConfig BuffModNoNormalSkillConfig = 8;
    if (has_buffmodnonormalskillconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodnonormalskillconfig());
    }

    // optional .pb.BuffModNoSkillConfig BuffModNoSkillConfig = 9;
    if (has_buffmodnoskillconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodnoskillconfig());
    }

    // optional .pb.BuffModDizzinessConfig BuffModDizzinessConfig = 10;
    if (has_buffmoddizzinessconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmoddizzinessconfig());
    }

    // optional .pb.BuffModFreezeConfig BuffModFreezeConfig = 11;
    if (has_buffmodfreezeconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodfreezeconfig());
    }

    // optional .pb.BuffModCharmedConfig BuffModCharmedConfig = 31;
    if (has_buffmodcharmedconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodcharmedconfig());
    }

    // optional .pb.BuffModChaosConfig BuffModChaosConfig = 32;
    if (has_buffmodchaosconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodchaosconfig());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .pb.BuffModRandomMoveConfig BuffModRandomMoveConfig = 12;
    if (has_buffmodrandommoveconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodrandommoveconfig());
    }

    // optional .pb.BuffModDamageCopyConfig BuffModDamageCopyConfig = 25;
    if (has_buffmoddamagecopyconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmoddamagecopyconfig());
    }

    // optional .pb.BuffModTauntConfig BuffModTauntConfig = 30;
    if (has_buffmodtauntconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodtauntconfig());
    }

    // optional .pb.BuffModNoRageRecoverConfig BuffModNoRageRecoverConfig = 53;
    if (has_buffmodnoragerecoverconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodnoragerecoverconfig());
    }

    // optional .pb.BuffModDisableConfig BuffModDisableConfig = 57;
    if (has_buffmoddisableconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmoddisableconfig());
    }

    // optional .pb.BuffModHarmOnMoveConfig BuffModHarmOnMoveConfig = 63;
    if (has_buffmodharmonmoveconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodharmonmoveconfig());
    }

    // optional .pb.BuffModFearConfig BuffModFearConfig = 67;
    if (has_buffmodfearconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodfearconfig());
    }

    // optional .pb.BuffModNoSuckBloodConfig BuffModNoSuckBloodConfig = 75;
    if (has_buffmodnosuckbloodconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodnosuckbloodconfig());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .pb.BuffModNoReviveConfig BuffModNoReviveConfig = 79;
    if (has_buffmodnoreviveconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodnoreviveconfig());
    }

    // optional .pb.BuffModTransformationConfig BuffModTransformationConfig = 20;
    if (has_buffmodtransformationconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodtransformationconfig());
    }

    // optional .pb.BuffModNothingConfig BuffModNothingConfig = 4;
    if (has_buffmodnothingconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodnothingconfig());
    }

    // optional .pb.BuffModTransformScaleConfig BuffModTransformScaleConfig = 13;
    if (has_buffmodtransformscaleconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodtransformscaleconfig());
    }

    // optional .pb.BuffModDieConfig BuffModDieConfig = 15;
    if (has_buffmoddieconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmoddieconfig());
    }

    // optional .pb.BuffModRepeatSkillConfig BuffModRepeatSkillConfig = 23;
    if (has_buffmodrepeatskillconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodrepeatskillconfig());
    }

    // optional .pb.BuffModSkillOnEndConfig BuffModSkillOnEndConfig = 29;
    if (has_buffmodskillonendconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodskillonendconfig());
    }

    // optional .pb.BuffModSpecifySkillTidConfig BuffModSpecifySkillTidConfig = 39;
    if (has_buffmodspecifyskilltidconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodspecifyskilltidconfig());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional .pb.BuffModResetBuffTimeConfig BuffModResetBuffTimeConfig = 44;
    if (has_buffmodresetbufftimeconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodresetbufftimeconfig());
    }

    // optional .pb.BuffModAddSkillConfig BuffModAddSkillConfig = 45;
    if (has_buffmodaddskillconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodaddskillconfig());
    }

    // optional .pb.BuffModPropertyFormulaConfig BuffModPropertyFormulaConfig = 46;
    if (has_buffmodpropertyformulaconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodpropertyformulaconfig());
    }

    // optional .pb.BuffModEffectInRangeConfig BuffModEffectInRangeConfig = 47;
    if (has_buffmodeffectinrangeconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodeffectinrangeconfig());
    }

    // optional .pb.BuffModRecordDataConfig BuffModRecordDataConfig = 48;
    if (has_buffmodrecorddataconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodrecorddataconfig());
    }

    // optional .pb.BuffModSkillOnEndConfig BuffModSkillOnEndBConfig = 49;
    if (has_buffmodskillonendbconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodskillonendbconfig());
    }

    // optional .pb.BuffModHideSomeAppearanceConfig BuffModHideSomeAppearanceConfig = 51;
    if (has_buffmodhidesomeappearanceconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodhidesomeappearanceconfig());
    }

    // optional .pb.BuffModInheritExistBuffStackConfig BuffModInheritExistBuffStackConfig = 54;
    if (has_buffmodinheritexistbuffstackconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodinheritexistbuffstackconfig());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional .pb.BuffModScaleTextConfig BuffModScaleTextConfig = 58;
    if (has_buffmodscaletextconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodscaletextconfig());
    }

    // optional .pb.BuffModAddDefPointConfig BuffModAddDefPointConfig = 59;
    if (has_buffmodadddefpointconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodadddefpointconfig());
    }

    // optional .pb.BuffModRemoveDefPointConfig BuffModRemoveDefPointConfig = 60;
    if (has_buffmodremovedefpointconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodremovedefpointconfig());
    }

    // optional .pb.BuffModEffectInRangeConditionConfig BuffModEffectInRangeConditionConfig = 61;
    if (has_buffmodeffectinrangeconditionconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodeffectinrangeconditionconfig());
    }

    // optional .pb.BuffModChangeDirConfig BuffModChangeDirConfig = 69;
    if (has_buffmodchangedirconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodchangedirconfig());
    }

    // optional .pb.BuffModTDMoniterDefenderStateConfig BuffModTDMoniterDefenderStateConfig = 70;
    if (has_buffmodtdmoniterdefenderstateconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodtdmoniterdefenderstateconfig());
    }

    // optional .pb.BuffModTDNoBeanConfig BuffModTDNoBeanConfig = 71;
    if (has_buffmodtdnobeanconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodtdnobeanconfig());
    }

    // optional .pb.BuffModTDRepeatSendBeanConfig BuffModTDRepeatSendBeanConfig = 72;
    if (has_buffmodtdrepeatsendbeanconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodtdrepeatsendbeanconfig());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional .pb.BuffModTDRepeatCheckBeanConfig BuffModTDRepeatCheckBeanConfig = 73;
    if (has_buffmodtdrepeatcheckbeanconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodtdrepeatcheckbeanconfig());
    }

    // optional .pb.BuffModBuffOnStackConfig BuffModBuffOnStackConfig = 76;
    if (has_buffmodbuffonstackconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodbuffonstackconfig());
    }

    // optional .pb.BuffModChangeSummonedAIConfig BuffModChangeSummonedAIConfig = 80;
    if (has_buffmodchangesummonedaiconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffmodchangesummonedaiconfig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffData::MergeFrom(const BuffData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_basedatamodel()) {
      mutable_basedatamodel()->::pb::BuffBaseDataModel::MergeFrom(from.basedatamodel());
    }
    if (from.has_specialhitmodel()) {
      mutable_specialhitmodel()->::pb::SpecialHitModel::MergeFrom(from.specialhitmodel());
    }
    if (from.has_buffmodhpconfig()) {
      mutable_buffmodhpconfig()->::pb::BuffModHpConfig::MergeFrom(from.buffmodhpconfig());
    }
    if (from.has_buffmodreflectdamageconfig()) {
      mutable_buffmodreflectdamageconfig()->::pb::BuffModReflectDamageConfig::MergeFrom(from.buffmodreflectdamageconfig());
    }
    if (from.has_buffmodreflectskillconfig()) {
      mutable_buffmodreflectskillconfig()->::pb::BuffModReflectSkillConfig::MergeFrom(from.buffmodreflectskillconfig());
    }
    if (from.has_buffmodbuffimmunityconfig()) {
      mutable_buffmodbuffimmunityconfig()->::pb::BuffModBuffImmunityConfig::MergeFrom(from.buffmodbuffimmunityconfig());
    }
    if (from.has_buffmodpropertyconfig()) {
      mutable_buffmodpropertyconfig()->::pb::BuffModPropertyConfig::MergeFrom(from.buffmodpropertyconfig());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buffmodattackspeedconfig()) {
      mutable_buffmodattackspeedconfig()->::pb::BuffModAttackSpeedConfig::MergeFrom(from.buffmodattackspeedconfig());
    }
    if (from.has_buffmodrageconfig()) {
      mutable_buffmodrageconfig()->::pb::BuffModRageConfig::MergeFrom(from.buffmodrageconfig());
    }
    if (from.has_buffmodabsorbdamageconfig()) {
      mutable_buffmodabsorbdamageconfig()->::pb::BuffModAbsorbDamageConfig::MergeFrom(from.buffmodabsorbdamageconfig());
    }
    if (from.has_buffmodnonhostiletargettableconfig()) {
      mutable_buffmodnonhostiletargettableconfig()->::pb::BuffModNonHostileTargettableConfig::MergeFrom(from.buffmodnonhostiletargettableconfig());
    }
    if (from.has_buffmodnontargettableconfig()) {
      mutable_buffmodnontargettableconfig()->::pb::BuffModNonTargettableConfig::MergeFrom(from.buffmodnontargettableconfig());
    }
    if (from.has_buffmoddamageshareconfig()) {
      mutable_buffmoddamageshareconfig()->::pb::BuffModDamageShareConfig::MergeFrom(from.buffmoddamageshareconfig());
    }
    if (from.has_buffmodhealcopyconfig()) {
      mutable_buffmodhealcopyconfig()->::pb::BuffModHealCopyConfig::MergeFrom(from.buffmodhealcopyconfig());
    }
    if (from.has_buffmodstealhpconfig()) {
      mutable_buffmodstealhpconfig()->::pb::BuffModStealHpConfig::MergeFrom(from.buffmodstealhpconfig());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_buffmodskillimmunityconfig()) {
      mutable_buffmodskillimmunityconfig()->::pb::BuffModSkillImmunityConfig::MergeFrom(from.buffmodskillimmunityconfig());
    }
    if (from.has_buffmodtoughnessconfig()) {
      mutable_buffmodtoughnessconfig()->::pb::BuffModToughnessConfig::MergeFrom(from.buffmodtoughnessconfig());
    }
    if (from.has_buffmoddispelconfig()) {
      mutable_buffmoddispelconfig()->::pb::BuffModDispelConfig::MergeFrom(from.buffmoddispelconfig());
    }
    if (from.has_buffmoddamageimmunityconfig()) {
      mutable_buffmoddamageimmunityconfig()->::pb::BuffModDamageImmunityConfig::MergeFrom(from.buffmoddamageimmunityconfig());
    }
    if (from.has_buffmodhitactionimmunityconfig()) {
      mutable_buffmodhitactionimmunityconfig()->::pb::BuffModHitActionImmunityConfig::MergeFrom(from.buffmodhitactionimmunityconfig());
    }
    if (from.has_buffmodarmattraddconfig()) {
      mutable_buffmodarmattraddconfig()->::pb::BuffModArmAttrAddConfig::MergeFrom(from.buffmodarmattraddconfig());
    }
    if (from.has_buffmodskillonlowlifeconfig()) {
      mutable_buffmodskillonlowlifeconfig()->::pb::BuffModSkillOnLowLifeConfig::MergeFrom(from.buffmodskillonlowlifeconfig());
    }
    if (from.has_buffmodmovecontrolimmunityconfig()) {
      mutable_buffmodmovecontrolimmunityconfig()->::pb::BuffModMoveControlImmunityConfig::MergeFrom(from.buffmodmovecontrolimmunityconfig());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_buffmodconditionchangeconfig()) {
      mutable_buffmodconditionchangeconfig()->::pb::BuffModConditionChangeConfig::MergeFrom(from.buffmodconditionchangeconfig());
    }
    if (from.has_buffmodpropertydecconfig()) {
      mutable_buffmodpropertydecconfig()->::pb::BuffModPropertyDecConfig::MergeFrom(from.buffmodpropertydecconfig());
    }
    if (from.has_buffmodchangedmgbybuffsubconfig()) {
      mutable_buffmodchangedmgbybuffsubconfig()->::pb::BuffModChangeDmgByBuffSubConfig::MergeFrom(from.buffmodchangedmgbybuffsubconfig());
    }
    if (from.has_buffmodshrinkcontroldurationconfig()) {
      mutable_buffmodshrinkcontroldurationconfig()->::pb::BuffModShrinkControlDurationConfig::MergeFrom(from.buffmodshrinkcontroldurationconfig());
    }
    if (from.has_buffmodunlimitedshieldconfig()) {
      mutable_buffmodunlimitedshieldconfig()->::pb::BuffModUnlimitedShieldConfig::MergeFrom(from.buffmodunlimitedshieldconfig());
    }
    if (from.has_buffmodreflectbuffconfig()) {
      mutable_buffmodreflectbuffconfig()->::pb::BuffModReflectBuffConfig::MergeFrom(from.buffmodreflectbuffconfig());
    }
    if (from.has_buffmodfataldmgshiftconfig()) {
      mutable_buffmodfataldmgshiftconfig()->::pb::BuffModFatalDmgShiftConfig::MergeFrom(from.buffmodfataldmgshiftconfig());
    }
    if (from.has_buffmodrageimmunityconfig()) {
      mutable_buffmodrageimmunityconfig()->::pb::BuffModRageImmunityConfig::MergeFrom(from.buffmodrageimmunityconfig());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_buffmodignoreshieldconfig()) {
      mutable_buffmodignoreshieldconfig()->::pb::BuffModIgnoreShieldConfig::MergeFrom(from.buffmodignoreshieldconfig());
    }
    if (from.has_buffmodrevertstateonendconfig()) {
      mutable_buffmodrevertstateonendconfig()->::pb::BuffModRevertStateOnEndConfig::MergeFrom(from.buffmodrevertstateonendconfig());
    }
    if (from.has_buffmodchangecastrangeconfig()) {
      mutable_buffmodchangecastrangeconfig()->::pb::BuffModChangeCastRangeConfig::MergeFrom(from.buffmodchangecastrangeconfig());
    }
    if (from.has_buffmodsetmaxlosehpconfig()) {
      mutable_buffmodsetmaxlosehpconfig()->::pb::BuffModSetMaxLoseHPConfig::MergeFrom(from.buffmodsetmaxlosehpconfig());
    }
    if (from.has_buffmodadjustreflecteddamageconfig()) {
      mutable_buffmodadjustreflecteddamageconfig()->::pb::BuffModAdjustReflectedDamageConfig::MergeFrom(from.buffmodadjustreflecteddamageconfig());
    }
    if (from.has_buffmodactiveuieffectconfig()) {
      mutable_buffmodactiveuieffectconfig()->::pb::BuffModActiveUIEffectConfig::MergeFrom(from.buffmodactiveuieffectconfig());
    }
    if (from.has_buffmodadjustbuffhitrateconfig()) {
      mutable_buffmodadjustbuffhitrateconfig()->::pb::BuffModAdjustBuffHitRateConfig::MergeFrom(from.buffmodadjustbuffhitrateconfig());
    }
    if (from.has_buffmodlimitbymaxhprateconfig()) {
      mutable_buffmodlimitbymaxhprateconfig()->::pb::BuffModLimitByMaxHpRateConfig::MergeFrom(from.buffmodlimitbymaxhprateconfig());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_buffmodbattlearchermodifyconfig()) {
      mutable_buffmodbattlearchermodifyconfig()->::pb::BuffModBattleArcherModifyConfig::MergeFrom(from.buffmodbattlearchermodifyconfig());
    }
    if (from.has_buffmodnomoveconfig()) {
      mutable_buffmodnomoveconfig()->::pb::BuffModNoMoveConfig::MergeFrom(from.buffmodnomoveconfig());
    }
    if (from.has_buffmodnonormalskillconfig()) {
      mutable_buffmodnonormalskillconfig()->::pb::BuffModNoNormalSkillConfig::MergeFrom(from.buffmodnonormalskillconfig());
    }
    if (from.has_buffmodnoskillconfig()) {
      mutable_buffmodnoskillconfig()->::pb::BuffModNoSkillConfig::MergeFrom(from.buffmodnoskillconfig());
    }
    if (from.has_buffmoddizzinessconfig()) {
      mutable_buffmoddizzinessconfig()->::pb::BuffModDizzinessConfig::MergeFrom(from.buffmoddizzinessconfig());
    }
    if (from.has_buffmodfreezeconfig()) {
      mutable_buffmodfreezeconfig()->::pb::BuffModFreezeConfig::MergeFrom(from.buffmodfreezeconfig());
    }
    if (from.has_buffmodcharmedconfig()) {
      mutable_buffmodcharmedconfig()->::pb::BuffModCharmedConfig::MergeFrom(from.buffmodcharmedconfig());
    }
    if (from.has_buffmodchaosconfig()) {
      mutable_buffmodchaosconfig()->::pb::BuffModChaosConfig::MergeFrom(from.buffmodchaosconfig());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_buffmodrandommoveconfig()) {
      mutable_buffmodrandommoveconfig()->::pb::BuffModRandomMoveConfig::MergeFrom(from.buffmodrandommoveconfig());
    }
    if (from.has_buffmoddamagecopyconfig()) {
      mutable_buffmoddamagecopyconfig()->::pb::BuffModDamageCopyConfig::MergeFrom(from.buffmoddamagecopyconfig());
    }
    if (from.has_buffmodtauntconfig()) {
      mutable_buffmodtauntconfig()->::pb::BuffModTauntConfig::MergeFrom(from.buffmodtauntconfig());
    }
    if (from.has_buffmodnoragerecoverconfig()) {
      mutable_buffmodnoragerecoverconfig()->::pb::BuffModNoRageRecoverConfig::MergeFrom(from.buffmodnoragerecoverconfig());
    }
    if (from.has_buffmoddisableconfig()) {
      mutable_buffmoddisableconfig()->::pb::BuffModDisableConfig::MergeFrom(from.buffmoddisableconfig());
    }
    if (from.has_buffmodharmonmoveconfig()) {
      mutable_buffmodharmonmoveconfig()->::pb::BuffModHarmOnMoveConfig::MergeFrom(from.buffmodharmonmoveconfig());
    }
    if (from.has_buffmodfearconfig()) {
      mutable_buffmodfearconfig()->::pb::BuffModFearConfig::MergeFrom(from.buffmodfearconfig());
    }
    if (from.has_buffmodnosuckbloodconfig()) {
      mutable_buffmodnosuckbloodconfig()->::pb::BuffModNoSuckBloodConfig::MergeFrom(from.buffmodnosuckbloodconfig());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_buffmodnoreviveconfig()) {
      mutable_buffmodnoreviveconfig()->::pb::BuffModNoReviveConfig::MergeFrom(from.buffmodnoreviveconfig());
    }
    if (from.has_buffmodtransformationconfig()) {
      mutable_buffmodtransformationconfig()->::pb::BuffModTransformationConfig::MergeFrom(from.buffmodtransformationconfig());
    }
    if (from.has_buffmodnothingconfig()) {
      mutable_buffmodnothingconfig()->::pb::BuffModNothingConfig::MergeFrom(from.buffmodnothingconfig());
    }
    if (from.has_buffmodtransformscaleconfig()) {
      mutable_buffmodtransformscaleconfig()->::pb::BuffModTransformScaleConfig::MergeFrom(from.buffmodtransformscaleconfig());
    }
    if (from.has_buffmoddieconfig()) {
      mutable_buffmoddieconfig()->::pb::BuffModDieConfig::MergeFrom(from.buffmoddieconfig());
    }
    if (from.has_buffmodrepeatskillconfig()) {
      mutable_buffmodrepeatskillconfig()->::pb::BuffModRepeatSkillConfig::MergeFrom(from.buffmodrepeatskillconfig());
    }
    if (from.has_buffmodskillonendconfig()) {
      mutable_buffmodskillonendconfig()->::pb::BuffModSkillOnEndConfig::MergeFrom(from.buffmodskillonendconfig());
    }
    if (from.has_buffmodspecifyskilltidconfig()) {
      mutable_buffmodspecifyskilltidconfig()->::pb::BuffModSpecifySkillTidConfig::MergeFrom(from.buffmodspecifyskilltidconfig());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_buffmodresetbufftimeconfig()) {
      mutable_buffmodresetbufftimeconfig()->::pb::BuffModResetBuffTimeConfig::MergeFrom(from.buffmodresetbufftimeconfig());
    }
    if (from.has_buffmodaddskillconfig()) {
      mutable_buffmodaddskillconfig()->::pb::BuffModAddSkillConfig::MergeFrom(from.buffmodaddskillconfig());
    }
    if (from.has_buffmodpropertyformulaconfig()) {
      mutable_buffmodpropertyformulaconfig()->::pb::BuffModPropertyFormulaConfig::MergeFrom(from.buffmodpropertyformulaconfig());
    }
    if (from.has_buffmodeffectinrangeconfig()) {
      mutable_buffmodeffectinrangeconfig()->::pb::BuffModEffectInRangeConfig::MergeFrom(from.buffmodeffectinrangeconfig());
    }
    if (from.has_buffmodrecorddataconfig()) {
      mutable_buffmodrecorddataconfig()->::pb::BuffModRecordDataConfig::MergeFrom(from.buffmodrecorddataconfig());
    }
    if (from.has_buffmodskillonendbconfig()) {
      mutable_buffmodskillonendbconfig()->::pb::BuffModSkillOnEndConfig::MergeFrom(from.buffmodskillonendbconfig());
    }
    if (from.has_buffmodhidesomeappearanceconfig()) {
      mutable_buffmodhidesomeappearanceconfig()->::pb::BuffModHideSomeAppearanceConfig::MergeFrom(from.buffmodhidesomeappearanceconfig());
    }
    if (from.has_buffmodinheritexistbuffstackconfig()) {
      mutable_buffmodinheritexistbuffstackconfig()->::pb::BuffModInheritExistBuffStackConfig::MergeFrom(from.buffmodinheritexistbuffstackconfig());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_buffmodscaletextconfig()) {
      mutable_buffmodscaletextconfig()->::pb::BuffModScaleTextConfig::MergeFrom(from.buffmodscaletextconfig());
    }
    if (from.has_buffmodadddefpointconfig()) {
      mutable_buffmodadddefpointconfig()->::pb::BuffModAddDefPointConfig::MergeFrom(from.buffmodadddefpointconfig());
    }
    if (from.has_buffmodremovedefpointconfig()) {
      mutable_buffmodremovedefpointconfig()->::pb::BuffModRemoveDefPointConfig::MergeFrom(from.buffmodremovedefpointconfig());
    }
    if (from.has_buffmodeffectinrangeconditionconfig()) {
      mutable_buffmodeffectinrangeconditionconfig()->::pb::BuffModEffectInRangeConditionConfig::MergeFrom(from.buffmodeffectinrangeconditionconfig());
    }
    if (from.has_buffmodchangedirconfig()) {
      mutable_buffmodchangedirconfig()->::pb::BuffModChangeDirConfig::MergeFrom(from.buffmodchangedirconfig());
    }
    if (from.has_buffmodtdmoniterdefenderstateconfig()) {
      mutable_buffmodtdmoniterdefenderstateconfig()->::pb::BuffModTDMoniterDefenderStateConfig::MergeFrom(from.buffmodtdmoniterdefenderstateconfig());
    }
    if (from.has_buffmodtdnobeanconfig()) {
      mutable_buffmodtdnobeanconfig()->::pb::BuffModTDNoBeanConfig::MergeFrom(from.buffmodtdnobeanconfig());
    }
    if (from.has_buffmodtdrepeatsendbeanconfig()) {
      mutable_buffmodtdrepeatsendbeanconfig()->::pb::BuffModTDRepeatSendBeanConfig::MergeFrom(from.buffmodtdrepeatsendbeanconfig());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_buffmodtdrepeatcheckbeanconfig()) {
      mutable_buffmodtdrepeatcheckbeanconfig()->::pb::BuffModTDRepeatCheckBeanConfig::MergeFrom(from.buffmodtdrepeatcheckbeanconfig());
    }
    if (from.has_buffmodbuffonstackconfig()) {
      mutable_buffmodbuffonstackconfig()->::pb::BuffModBuffOnStackConfig::MergeFrom(from.buffmodbuffonstackconfig());
    }
    if (from.has_buffmodchangesummonedaiconfig()) {
      mutable_buffmodchangesummonedaiconfig()->::pb::BuffModChangeSummonedAIConfig::MergeFrom(from.buffmodchangesummonedaiconfig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffData::CopyFrom(const BuffData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffData::IsInitialized() const {

  return true;
}

void BuffData::Swap(BuffData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(basedatamodel_, other->basedatamodel_);
    std::swap(specialhitmodel_, other->specialhitmodel_);
    std::swap(buffmodhpconfig_, other->buffmodhpconfig_);
    std::swap(buffmodreflectdamageconfig_, other->buffmodreflectdamageconfig_);
    std::swap(buffmodreflectskillconfig_, other->buffmodreflectskillconfig_);
    std::swap(buffmodbuffimmunityconfig_, other->buffmodbuffimmunityconfig_);
    std::swap(buffmodpropertyconfig_, other->buffmodpropertyconfig_);
    std::swap(buffmodattackspeedconfig_, other->buffmodattackspeedconfig_);
    std::swap(buffmodrageconfig_, other->buffmodrageconfig_);
    std::swap(buffmodabsorbdamageconfig_, other->buffmodabsorbdamageconfig_);
    std::swap(buffmodnonhostiletargettableconfig_, other->buffmodnonhostiletargettableconfig_);
    std::swap(buffmodnontargettableconfig_, other->buffmodnontargettableconfig_);
    std::swap(buffmoddamageshareconfig_, other->buffmoddamageshareconfig_);
    std::swap(buffmodhealcopyconfig_, other->buffmodhealcopyconfig_);
    std::swap(buffmodstealhpconfig_, other->buffmodstealhpconfig_);
    std::swap(buffmodskillimmunityconfig_, other->buffmodskillimmunityconfig_);
    std::swap(buffmodtoughnessconfig_, other->buffmodtoughnessconfig_);
    std::swap(buffmoddispelconfig_, other->buffmoddispelconfig_);
    std::swap(buffmoddamageimmunityconfig_, other->buffmoddamageimmunityconfig_);
    std::swap(buffmodhitactionimmunityconfig_, other->buffmodhitactionimmunityconfig_);
    std::swap(buffmodarmattraddconfig_, other->buffmodarmattraddconfig_);
    std::swap(buffmodskillonlowlifeconfig_, other->buffmodskillonlowlifeconfig_);
    std::swap(buffmodmovecontrolimmunityconfig_, other->buffmodmovecontrolimmunityconfig_);
    std::swap(buffmodconditionchangeconfig_, other->buffmodconditionchangeconfig_);
    std::swap(buffmodpropertydecconfig_, other->buffmodpropertydecconfig_);
    std::swap(buffmodchangedmgbybuffsubconfig_, other->buffmodchangedmgbybuffsubconfig_);
    std::swap(buffmodshrinkcontroldurationconfig_, other->buffmodshrinkcontroldurationconfig_);
    std::swap(buffmodunlimitedshieldconfig_, other->buffmodunlimitedshieldconfig_);
    std::swap(buffmodreflectbuffconfig_, other->buffmodreflectbuffconfig_);
    std::swap(buffmodfataldmgshiftconfig_, other->buffmodfataldmgshiftconfig_);
    std::swap(buffmodrageimmunityconfig_, other->buffmodrageimmunityconfig_);
    std::swap(buffmodignoreshieldconfig_, other->buffmodignoreshieldconfig_);
    std::swap(buffmodrevertstateonendconfig_, other->buffmodrevertstateonendconfig_);
    std::swap(buffmodchangecastrangeconfig_, other->buffmodchangecastrangeconfig_);
    std::swap(buffmodsetmaxlosehpconfig_, other->buffmodsetmaxlosehpconfig_);
    std::swap(buffmodadjustreflecteddamageconfig_, other->buffmodadjustreflecteddamageconfig_);
    std::swap(buffmodactiveuieffectconfig_, other->buffmodactiveuieffectconfig_);
    std::swap(buffmodadjustbuffhitrateconfig_, other->buffmodadjustbuffhitrateconfig_);
    std::swap(buffmodlimitbymaxhprateconfig_, other->buffmodlimitbymaxhprateconfig_);
    std::swap(buffmodbattlearchermodifyconfig_, other->buffmodbattlearchermodifyconfig_);
    std::swap(buffmodnomoveconfig_, other->buffmodnomoveconfig_);
    std::swap(buffmodnonormalskillconfig_, other->buffmodnonormalskillconfig_);
    std::swap(buffmodnoskillconfig_, other->buffmodnoskillconfig_);
    std::swap(buffmoddizzinessconfig_, other->buffmoddizzinessconfig_);
    std::swap(buffmodfreezeconfig_, other->buffmodfreezeconfig_);
    std::swap(buffmodcharmedconfig_, other->buffmodcharmedconfig_);
    std::swap(buffmodchaosconfig_, other->buffmodchaosconfig_);
    std::swap(buffmodrandommoveconfig_, other->buffmodrandommoveconfig_);
    std::swap(buffmoddamagecopyconfig_, other->buffmoddamagecopyconfig_);
    std::swap(buffmodtauntconfig_, other->buffmodtauntconfig_);
    std::swap(buffmodnoragerecoverconfig_, other->buffmodnoragerecoverconfig_);
    std::swap(buffmoddisableconfig_, other->buffmoddisableconfig_);
    std::swap(buffmodharmonmoveconfig_, other->buffmodharmonmoveconfig_);
    std::swap(buffmodfearconfig_, other->buffmodfearconfig_);
    std::swap(buffmodnosuckbloodconfig_, other->buffmodnosuckbloodconfig_);
    std::swap(buffmodnoreviveconfig_, other->buffmodnoreviveconfig_);
    std::swap(buffmodtransformationconfig_, other->buffmodtransformationconfig_);
    std::swap(buffmodnothingconfig_, other->buffmodnothingconfig_);
    std::swap(buffmodtransformscaleconfig_, other->buffmodtransformscaleconfig_);
    std::swap(buffmoddieconfig_, other->buffmoddieconfig_);
    std::swap(buffmodrepeatskillconfig_, other->buffmodrepeatskillconfig_);
    std::swap(buffmodskillonendconfig_, other->buffmodskillonendconfig_);
    std::swap(buffmodspecifyskilltidconfig_, other->buffmodspecifyskilltidconfig_);
    std::swap(buffmodresetbufftimeconfig_, other->buffmodresetbufftimeconfig_);
    std::swap(buffmodaddskillconfig_, other->buffmodaddskillconfig_);
    std::swap(buffmodpropertyformulaconfig_, other->buffmodpropertyformulaconfig_);
    std::swap(buffmodeffectinrangeconfig_, other->buffmodeffectinrangeconfig_);
    std::swap(buffmodrecorddataconfig_, other->buffmodrecorddataconfig_);
    std::swap(buffmodskillonendbconfig_, other->buffmodskillonendbconfig_);
    std::swap(buffmodhidesomeappearanceconfig_, other->buffmodhidesomeappearanceconfig_);
    std::swap(buffmodinheritexistbuffstackconfig_, other->buffmodinheritexistbuffstackconfig_);
    std::swap(buffmodscaletextconfig_, other->buffmodscaletextconfig_);
    std::swap(buffmodadddefpointconfig_, other->buffmodadddefpointconfig_);
    std::swap(buffmodremovedefpointconfig_, other->buffmodremovedefpointconfig_);
    std::swap(buffmodeffectinrangeconditionconfig_, other->buffmodeffectinrangeconditionconfig_);
    std::swap(buffmodchangedirconfig_, other->buffmodchangedirconfig_);
    std::swap(buffmodtdmoniterdefenderstateconfig_, other->buffmodtdmoniterdefenderstateconfig_);
    std::swap(buffmodtdnobeanconfig_, other->buffmodtdnobeanconfig_);
    std::swap(buffmodtdrepeatsendbeanconfig_, other->buffmodtdrepeatsendbeanconfig_);
    std::swap(buffmodtdrepeatcheckbeanconfig_, other->buffmodtdrepeatcheckbeanconfig_);
    std::swap(buffmodbuffonstackconfig_, other->buffmodbuffonstackconfig_);
    std::swap(buffmodchangesummonedaiconfig_, other->buffmodchangesummonedaiconfig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffData_descriptor_;
  metadata.reflection = BuffData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
