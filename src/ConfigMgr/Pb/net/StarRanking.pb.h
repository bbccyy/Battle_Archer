// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/StarRanking.proto

#ifndef PROTOBUF_net_2fStarRanking_2eproto__INCLUDED
#define PROTOBUF_net_2fStarRanking_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fStarRanking_2eproto();
void protobuf_AssignDesc_net_2fStarRanking_2eproto();
void protobuf_ShutdownFile_net_2fStarRanking_2eproto();

class TStarRankingRankItem;
class TStarRankingTakeRewardRecordRsp;
class TStarRankingTakeRewardReq;
class TStarRankingRankRewardInfo;
class TStarRankingGetRankRewardRsp;
class TStarRankingEntranceCloseReq;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TStarRankingRankItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/StarRanking.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TStarRankingRankItem : public ::google::protobuf::Message {
 public:
  TStarRankingRankItem();
  virtual ~TStarRankingRankItem();

  TStarRankingRankItem(const TStarRankingRankItem& from);

  inline TStarRankingRankItem& operator=(const TStarRankingRankItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStarRankingRankItem& default_instance();

  void Swap(TStarRankingRankItem* other);

  // implements Message ----------------------------------------------

  TStarRankingRankItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStarRankingRankItem& from);
  void MergeFrom(const TStarRankingRankItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TStarRankingRankItem</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 Star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TStarRankingRankItem</name>
  	<Function>
  		<name>star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint64 ChangeTime = 3;
  inline bool has_changetime() const;
  inline void clear_changetime();
  static const int kChangeTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TStarRankingRankItem</name>
  	<Function>
  		<name>changetime</name>
  		<replaceName>ChangeTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_changetime</name>
  		<replaceName>ChangeTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_changetime</name>
  		<replaceName>ChangeTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 changetime() const;
  inline void set_changetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TStarRankingRankItem)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_changetime();
  inline void clear_has_changetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint64 changetime_;
  ::google::protobuf::uint32 star_;
  friend void  protobuf_AddDesc_net_2fStarRanking_2eproto();
  friend void protobuf_AssignDesc_net_2fStarRanking_2eproto();
  friend void protobuf_ShutdownFile_net_2fStarRanking_2eproto();

  void InitAsDefaultInstance();
  static TStarRankingRankItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TStarRankingTakeRewardRecordRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/StarRanking.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TStarRankingTakeRewardRecordRsp : public ::google::protobuf::Message {
 public:
  TStarRankingTakeRewardRecordRsp();
  virtual ~TStarRankingTakeRewardRecordRsp();

  TStarRankingTakeRewardRecordRsp(const TStarRankingTakeRewardRecordRsp& from);

  inline TStarRankingTakeRewardRecordRsp& operator=(const TStarRankingTakeRewardRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStarRankingTakeRewardRecordRsp& default_instance();

  void Swap(TStarRankingTakeRewardRecordRsp* other);

  // implements Message ----------------------------------------------

  TStarRankingTakeRewardRecordRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStarRankingTakeRewardRecordRsp& from);
  void MergeFrom(const TStarRankingTakeRewardRecordRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 TakeArr = 1;
  inline int takearr_size() const;
  inline void clear_takearr();
  static const int kTakeArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TStarRankingTakeRewardRecordRsp</name>
  	<Function>
  		<name>takearr</name>
  		<replaceName>TakeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_takearr</name>
  		<replaceName>TakeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_takearr</name>
  		<replaceName>TakeArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_takearr</name>
  		<replaceName>TakeArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>takearr_size</name>
  		<replaceName>TakeArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 takearr(int index) const;
  inline void set_takearr(int index, ::google::protobuf::int32 value);
  inline void add_takearr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      takearr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_takearr();

  // optional uint32 StarNum = 2;
  inline bool has_starnum() const;
  inline void clear_starnum();
  static const int kStarNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TStarRankingTakeRewardRecordRsp</name>
  	<Function>
  		<name>starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starnum() const;
  inline void set_starnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TStarRankingTakeRewardRecordRsp)
 private:
  inline void set_has_starnum();
  inline void clear_has_starnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > takearr_;
  ::google::protobuf::uint32 starnum_;
  friend void  protobuf_AddDesc_net_2fStarRanking_2eproto();
  friend void protobuf_AssignDesc_net_2fStarRanking_2eproto();
  friend void protobuf_ShutdownFile_net_2fStarRanking_2eproto();

  void InitAsDefaultInstance();
  static TStarRankingTakeRewardRecordRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TStarRankingTakeRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/StarRanking.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TStarRankingTakeRewardReq : public ::google::protobuf::Message {
 public:
  TStarRankingTakeRewardReq();
  virtual ~TStarRankingTakeRewardReq();

  TStarRankingTakeRewardReq(const TStarRankingTakeRewardReq& from);

  inline TStarRankingTakeRewardReq& operator=(const TStarRankingTakeRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStarRankingTakeRewardReq& default_instance();

  void Swap(TStarRankingTakeRewardReq* other);

  // implements Message ----------------------------------------------

  TStarRankingTakeRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStarRankingTakeRewardReq& from);
  void MergeFrom(const TStarRankingTakeRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 RewardId = 1;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TStarRankingTakeRewardReq</name>
  	<Function>
  		<name>rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 rewardid() const;
  inline void set_rewardid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TStarRankingTakeRewardReq)
 private:
  inline void set_has_rewardid();
  inline void clear_has_rewardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 rewardid_;
  friend void  protobuf_AddDesc_net_2fStarRanking_2eproto();
  friend void protobuf_AssignDesc_net_2fStarRanking_2eproto();
  friend void protobuf_ShutdownFile_net_2fStarRanking_2eproto();

  void InitAsDefaultInstance();
  static TStarRankingTakeRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TStarRankingRankRewardInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/StarRanking.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TStarRankingRankRewardInfo : public ::google::protobuf::Message {
 public:
  TStarRankingRankRewardInfo();
  virtual ~TStarRankingRankRewardInfo();

  TStarRankingRankRewardInfo(const TStarRankingRankRewardInfo& from);

  inline TStarRankingRankRewardInfo& operator=(const TStarRankingRankRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStarRankingRankRewardInfo& default_instance();

  void Swap(TStarRankingRankRewardInfo* other);

  // implements Message ----------------------------------------------

  TStarRankingRankRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStarRankingRankRewardInfo& from);
  void MergeFrom(const TStarRankingRankRewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TStarRankingRankItem RankInfo = 1;
  inline bool has_rankinfo() const;
  inline void clear_rankinfo();
  static const int kRankInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TStarRankingRankRewardInfo</name>
  	<Function>
  		<name>rankinfo</name>
  		<replaceName>RankInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rankinfo</name>
  		<replaceName>RankInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_rankinfo</name>
  		<replaceName>RankInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankinfo</name>
  		<replaceName>RankInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TStarRankingRankItem& rankinfo() const;
  inline ::pb::TStarRankingRankItem* mutable_rankinfo();
  inline ::pb::TStarRankingRankItem* release_rankinfo();
  inline void set_allocated_rankinfo(::pb::TStarRankingRankItem* rankinfo);

  // optional int32 Rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TStarRankingRankRewardInfo</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 Count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TStarRankingRankRewardInfo</name>
  	<Function>
  		<name>count</name>
  		<replaceName>Count</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_count</name>
  		<replaceName>Count</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_count</name>
  		<replaceName>Count</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TStarRankingRankRewardInfo)
 private:
  inline void set_has_rankinfo();
  inline void clear_has_rankinfo();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TStarRankingRankItem* rankinfo_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_net_2fStarRanking_2eproto();
  friend void protobuf_AssignDesc_net_2fStarRanking_2eproto();
  friend void protobuf_ShutdownFile_net_2fStarRanking_2eproto();

  void InitAsDefaultInstance();
  static TStarRankingRankRewardInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TStarRankingGetRankRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/StarRanking.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TStarRankingGetRankRewardRsp : public ::google::protobuf::Message {
 public:
  TStarRankingGetRankRewardRsp();
  virtual ~TStarRankingGetRankRewardRsp();

  TStarRankingGetRankRewardRsp(const TStarRankingGetRankRewardRsp& from);

  inline TStarRankingGetRankRewardRsp& operator=(const TStarRankingGetRankRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStarRankingGetRankRewardRsp& default_instance();

  void Swap(TStarRankingGetRankRewardRsp* other);

  // implements Message ----------------------------------------------

  TStarRankingGetRankRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStarRankingGetRankRewardRsp& from);
  void MergeFrom(const TStarRankingGetRankRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TStarRankingGetRankRewardRsp</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // repeated .pb.TStarRankingRankRewardInfo RankRewardArr = 2;
  inline int rankrewardarr_size() const;
  inline void clear_rankrewardarr();
  static const int kRankRewardArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TStarRankingGetRankRewardRsp</name>
  	<Function>
  		<name>rankrewardarr</name>
  		<replaceName>RankRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankrewardarr</name>
  		<replaceName>RankRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankrewardarr</name>
  		<replaceName>RankRewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankrewardarr</name>
  		<replaceName>RankRewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankrewardarr_size</name>
  		<replaceName>RankRewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TStarRankingRankRewardInfo& rankrewardarr(int index) const;
  inline ::pb::TStarRankingRankRewardInfo* mutable_rankrewardarr(int index);
  inline ::pb::TStarRankingRankRewardInfo* add_rankrewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TStarRankingRankRewardInfo >&
      rankrewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TStarRankingRankRewardInfo >*
      mutable_rankrewardarr();

  // optional uint32 StarNum = 3;
  inline bool has_starnum() const;
  inline void clear_starnum();
  static const int kStarNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TStarRankingGetRankRewardRsp</name>
  	<Function>
  		<name>starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starnum() const;
  inline void set_starnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TStarRankingGetRankRewardRsp)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_starnum();
  inline void clear_has_starnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TStarRankingRankRewardInfo > rankrewardarr_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::uint32 starnum_;
  friend void  protobuf_AddDesc_net_2fStarRanking_2eproto();
  friend void protobuf_AssignDesc_net_2fStarRanking_2eproto();
  friend void protobuf_ShutdownFile_net_2fStarRanking_2eproto();

  void InitAsDefaultInstance();
  static TStarRankingGetRankRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TStarRankingEntranceCloseReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/StarRanking.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TStarRankingEntranceCloseReq : public ::google::protobuf::Message {
 public:
  TStarRankingEntranceCloseReq();
  virtual ~TStarRankingEntranceCloseReq();

  TStarRankingEntranceCloseReq(const TStarRankingEntranceCloseReq& from);

  inline TStarRankingEntranceCloseReq& operator=(const TStarRankingEntranceCloseReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStarRankingEntranceCloseReq& default_instance();

  void Swap(TStarRankingEntranceCloseReq* other);

  // implements Message ----------------------------------------------

  TStarRankingEntranceCloseReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStarRankingEntranceCloseReq& from);
  void MergeFrom(const TStarRankingEntranceCloseReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TStarRankingEntranceCloseReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fStarRanking_2eproto();
  friend void protobuf_AssignDesc_net_2fStarRanking_2eproto();
  friend void protobuf_ShutdownFile_net_2fStarRanking_2eproto();

  void InitAsDefaultInstance();
  static TStarRankingEntranceCloseReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TStarRankingRankItem

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TStarRankingRankItem::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TStarRankingRankItem::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TStarRankingRankItem::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TStarRankingRankItem::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TStarRankingRankItem::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TStarRankingRankItem.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TStarRankingRankItem::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TStarRankingRankItem.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TStarRankingRankItem::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TStarRankingRankItem::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TStarRankingRankItem.UserInfo)
}

// optional uint32 Star = 2;
inline bool TStarRankingRankItem::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TStarRankingRankItem::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TStarRankingRankItem::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TStarRankingRankItem::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 TStarRankingRankItem::star() const {
  // @@protoc_insertion_point(field_get:pb.TStarRankingRankItem.Star)
  return star_;
}
inline void TStarRankingRankItem::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:pb.TStarRankingRankItem.Star)
}

// optional uint64 ChangeTime = 3;
inline bool TStarRankingRankItem::has_changetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TStarRankingRankItem::set_has_changetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TStarRankingRankItem::clear_has_changetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TStarRankingRankItem::clear_changetime() {
  changetime_ = GOOGLE_ULONGLONG(0);
  clear_has_changetime();
}
inline ::google::protobuf::uint64 TStarRankingRankItem::changetime() const {
  // @@protoc_insertion_point(field_get:pb.TStarRankingRankItem.ChangeTime)
  return changetime_;
}
inline void TStarRankingRankItem::set_changetime(::google::protobuf::uint64 value) {
  set_has_changetime();
  changetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TStarRankingRankItem.ChangeTime)
}

// -------------------------------------------------------------------

// TStarRankingTakeRewardRecordRsp

// repeated int32 TakeArr = 1;
inline int TStarRankingTakeRewardRecordRsp::takearr_size() const {
  return takearr_.size();
}
inline void TStarRankingTakeRewardRecordRsp::clear_takearr() {
  takearr_.Clear();
}
inline ::google::protobuf::int32 TStarRankingTakeRewardRecordRsp::takearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TStarRankingTakeRewardRecordRsp.TakeArr)
  return takearr_.Get(index);
}
inline void TStarRankingTakeRewardRecordRsp::set_takearr(int index, ::google::protobuf::int32 value) {
  takearr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TStarRankingTakeRewardRecordRsp.TakeArr)
}
inline void TStarRankingTakeRewardRecordRsp::add_takearr(::google::protobuf::int32 value) {
  takearr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TStarRankingTakeRewardRecordRsp.TakeArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TStarRankingTakeRewardRecordRsp::takearr() const {
  // @@protoc_insertion_point(field_list:pb.TStarRankingTakeRewardRecordRsp.TakeArr)
  return takearr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TStarRankingTakeRewardRecordRsp::mutable_takearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TStarRankingTakeRewardRecordRsp.TakeArr)
  return &takearr_;
}

// optional uint32 StarNum = 2;
inline bool TStarRankingTakeRewardRecordRsp::has_starnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TStarRankingTakeRewardRecordRsp::set_has_starnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TStarRankingTakeRewardRecordRsp::clear_has_starnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TStarRankingTakeRewardRecordRsp::clear_starnum() {
  starnum_ = 0u;
  clear_has_starnum();
}
inline ::google::protobuf::uint32 TStarRankingTakeRewardRecordRsp::starnum() const {
  // @@protoc_insertion_point(field_get:pb.TStarRankingTakeRewardRecordRsp.StarNum)
  return starnum_;
}
inline void TStarRankingTakeRewardRecordRsp::set_starnum(::google::protobuf::uint32 value) {
  set_has_starnum();
  starnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TStarRankingTakeRewardRecordRsp.StarNum)
}

// -------------------------------------------------------------------

// TStarRankingTakeRewardReq

// optional int32 RewardId = 1;
inline bool TStarRankingTakeRewardReq::has_rewardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TStarRankingTakeRewardReq::set_has_rewardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TStarRankingTakeRewardReq::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TStarRankingTakeRewardReq::clear_rewardid() {
  rewardid_ = 0;
  clear_has_rewardid();
}
inline ::google::protobuf::int32 TStarRankingTakeRewardReq::rewardid() const {
  // @@protoc_insertion_point(field_get:pb.TStarRankingTakeRewardReq.RewardId)
  return rewardid_;
}
inline void TStarRankingTakeRewardReq::set_rewardid(::google::protobuf::int32 value) {
  set_has_rewardid();
  rewardid_ = value;
  // @@protoc_insertion_point(field_set:pb.TStarRankingTakeRewardReq.RewardId)
}

// -------------------------------------------------------------------

// TStarRankingRankRewardInfo

// optional .pb.TStarRankingRankItem RankInfo = 1;
inline bool TStarRankingRankRewardInfo::has_rankinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TStarRankingRankRewardInfo::set_has_rankinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TStarRankingRankRewardInfo::clear_has_rankinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TStarRankingRankRewardInfo::clear_rankinfo() {
  if (rankinfo_ != NULL) rankinfo_->::pb::TStarRankingRankItem::Clear();
  clear_has_rankinfo();
}
inline const ::pb::TStarRankingRankItem& TStarRankingRankRewardInfo::rankinfo() const {
  // @@protoc_insertion_point(field_get:pb.TStarRankingRankRewardInfo.RankInfo)
  return rankinfo_ != NULL ? *rankinfo_ : *default_instance_->rankinfo_;
}
inline ::pb::TStarRankingRankItem* TStarRankingRankRewardInfo::mutable_rankinfo() {
  set_has_rankinfo();
  if (rankinfo_ == NULL) rankinfo_ = new ::pb::TStarRankingRankItem;
  // @@protoc_insertion_point(field_mutable:pb.TStarRankingRankRewardInfo.RankInfo)
  return rankinfo_;
}
inline ::pb::TStarRankingRankItem* TStarRankingRankRewardInfo::release_rankinfo() {
  clear_has_rankinfo();
  ::pb::TStarRankingRankItem* temp = rankinfo_;
  rankinfo_ = NULL;
  return temp;
}
inline void TStarRankingRankRewardInfo::set_allocated_rankinfo(::pb::TStarRankingRankItem* rankinfo) {
  delete rankinfo_;
  rankinfo_ = rankinfo;
  if (rankinfo) {
    set_has_rankinfo();
  } else {
    clear_has_rankinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TStarRankingRankRewardInfo.RankInfo)
}

// optional int32 Rank = 2;
inline bool TStarRankingRankRewardInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TStarRankingRankRewardInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TStarRankingRankRewardInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TStarRankingRankRewardInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 TStarRankingRankRewardInfo::rank() const {
  // @@protoc_insertion_point(field_get:pb.TStarRankingRankRewardInfo.Rank)
  return rank_;
}
inline void TStarRankingRankRewardInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TStarRankingRankRewardInfo.Rank)
}

// optional int32 Count = 3;
inline bool TStarRankingRankRewardInfo::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TStarRankingRankRewardInfo::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TStarRankingRankRewardInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TStarRankingRankRewardInfo::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 TStarRankingRankRewardInfo::count() const {
  // @@protoc_insertion_point(field_get:pb.TStarRankingRankRewardInfo.Count)
  return count_;
}
inline void TStarRankingRankRewardInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pb.TStarRankingRankRewardInfo.Count)
}

// -------------------------------------------------------------------

// TStarRankingGetRankRewardRsp

// optional int32 Rank = 1;
inline bool TStarRankingGetRankRewardRsp::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TStarRankingGetRankRewardRsp::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TStarRankingGetRankRewardRsp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TStarRankingGetRankRewardRsp::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 TStarRankingGetRankRewardRsp::rank() const {
  // @@protoc_insertion_point(field_get:pb.TStarRankingGetRankRewardRsp.Rank)
  return rank_;
}
inline void TStarRankingGetRankRewardRsp::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TStarRankingGetRankRewardRsp.Rank)
}

// repeated .pb.TStarRankingRankRewardInfo RankRewardArr = 2;
inline int TStarRankingGetRankRewardRsp::rankrewardarr_size() const {
  return rankrewardarr_.size();
}
inline void TStarRankingGetRankRewardRsp::clear_rankrewardarr() {
  rankrewardarr_.Clear();
}
inline const ::pb::TStarRankingRankRewardInfo& TStarRankingGetRankRewardRsp::rankrewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TStarRankingGetRankRewardRsp.RankRewardArr)
  return rankrewardarr_.Get(index);
}
inline ::pb::TStarRankingRankRewardInfo* TStarRankingGetRankRewardRsp::mutable_rankrewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TStarRankingGetRankRewardRsp.RankRewardArr)
  return rankrewardarr_.Mutable(index);
}
inline ::pb::TStarRankingRankRewardInfo* TStarRankingGetRankRewardRsp::add_rankrewardarr() {
  // @@protoc_insertion_point(field_add:pb.TStarRankingGetRankRewardRsp.RankRewardArr)
  return rankrewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TStarRankingRankRewardInfo >&
TStarRankingGetRankRewardRsp::rankrewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TStarRankingGetRankRewardRsp.RankRewardArr)
  return rankrewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TStarRankingRankRewardInfo >*
TStarRankingGetRankRewardRsp::mutable_rankrewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TStarRankingGetRankRewardRsp.RankRewardArr)
  return &rankrewardarr_;
}

// optional uint32 StarNum = 3;
inline bool TStarRankingGetRankRewardRsp::has_starnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TStarRankingGetRankRewardRsp::set_has_starnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TStarRankingGetRankRewardRsp::clear_has_starnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TStarRankingGetRankRewardRsp::clear_starnum() {
  starnum_ = 0u;
  clear_has_starnum();
}
inline ::google::protobuf::uint32 TStarRankingGetRankRewardRsp::starnum() const {
  // @@protoc_insertion_point(field_get:pb.TStarRankingGetRankRewardRsp.StarNum)
  return starnum_;
}
inline void TStarRankingGetRankRewardRsp::set_starnum(::google::protobuf::uint32 value) {
  set_has_starnum();
  starnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TStarRankingGetRankRewardRsp.StarNum)
}

// -------------------------------------------------------------------

// TStarRankingEntranceCloseReq


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fStarRanking_2eproto__INCLUDED
