// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Mirror.proto

#ifndef PROTOBUF_net_2fMirror_2eproto__INCLUDED
#define PROTOBUF_net_2fMirror_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Battle.pb.h"
#include "net/Hero.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fMirror_2eproto();
void protobuf_AssignDesc_net_2fMirror_2eproto();
void protobuf_ShutdownFile_net_2fMirror_2eproto();

class TMirrorInfo;
class TMirrorUnitInfo;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TMirrorInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Mirror.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TMirrorInfo : public ::google::protobuf::Message {
 public:
  TMirrorInfo();
  virtual ~TMirrorInfo();

  TMirrorInfo(const TMirrorInfo& from);

  inline TMirrorInfo& operator=(const TMirrorInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMirrorInfo& default_instance();

  void Swap(TMirrorInfo* other);

  // implements Message ----------------------------------------------

  TMirrorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMirrorInfo& from);
  void MergeFrom(const TMirrorInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Uname = 1;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TMirrorInfo</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional string Guild = 2;
  inline bool has_guild() const;
  inline void clear_guild();
  static const int kGuildFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TMirrorInfo</name>
  	<Function>
  		<name>guild</name>
  		<replaceName>Guild</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guild</name>
  		<replaceName>Guild</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guild</name>
  		<replaceName>Guild</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& guild() const;
  inline void set_guild(const ::std::string& value);
  inline void set_guild(const char* value);
  inline void set_guild(const char* value, size_t size);
  inline ::std::string* mutable_guild();
  inline ::std::string* release_guild();
  inline void set_allocated_guild(::std::string* guild);

  // optional uint32 UserLevel = 3;
  inline bool has_userlevel() const;
  inline void clear_userlevel();
  static const int kUserLevelFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TMirrorInfo</name>
  	<Function>
  		<name>userlevel</name>
  		<replaceName>UserLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userlevel</name>
  		<replaceName>UserLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userlevel</name>
  		<replaceName>UserLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 userlevel() const;
  inline void set_userlevel(::google::protobuf::uint32 value);

  // optional uint32 AvatarId = 4;
  inline bool has_avatarid() const;
  inline void clear_avatarid();
  static const int kAvatarIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TMirrorInfo</name>
  	<Function>
  		<name>avatarid</name>
  		<replaceName>AvatarId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_avatarid</name>
  		<replaceName>AvatarId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_avatarid</name>
  		<replaceName>AvatarId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 avatarid() const;
  inline void set_avatarid(::google::protobuf::uint32 value);

  // optional uint32 VipLevel = 5;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TMirrorInfo</name>
  	<Function>
  		<name>viplevel</name>
  		<replaceName>VipLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viplevel</name>
  		<replaceName>VipLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viplevel</name>
  		<replaceName>VipLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 viplevel() const;
  inline void set_viplevel(::google::protobuf::uint32 value);

  // optional uint64 FightForce = 6;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TMirrorInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // repeated .pb.TMirrorUnitInfo UnitArr = 7;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TMirrorInfo</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TMirrorUnitInfo& unitarr(int index) const;
  inline ::pb::TMirrorUnitInfo* mutable_unitarr(int index);
  inline ::pb::TMirrorUnitInfo* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TMirrorUnitInfo >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TMirrorUnitInfo >*
      mutable_unitarr();

  // optional uint32 AvatarFrameId = 8;
  inline bool has_avatarframeid() const;
  inline void clear_avatarframeid();
  static const int kAvatarFrameIdFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TMirrorInfo</name>
  	<Function>
  		<name>avatarframeid</name>
  		<replaceName>AvatarFrameId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_avatarframeid</name>
  		<replaceName>AvatarFrameId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_avatarframeid</name>
  		<replaceName>AvatarFrameId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 avatarframeid() const;
  inline void set_avatarframeid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TMirrorInfo)
 private:
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_guild();
  inline void clear_has_guild();
  inline void set_has_userlevel();
  inline void clear_has_userlevel();
  inline void set_has_avatarid();
  inline void clear_has_avatarid();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_avatarframeid();
  inline void clear_has_avatarframeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uname_;
  ::std::string* guild_;
  ::google::protobuf::uint32 userlevel_;
  ::google::protobuf::uint32 avatarid_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 viplevel_;
  ::google::protobuf::uint32 avatarframeid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TMirrorUnitInfo > unitarr_;
  friend void  protobuf_AddDesc_net_2fMirror_2eproto();
  friend void protobuf_AssignDesc_net_2fMirror_2eproto();
  friend void protobuf_ShutdownFile_net_2fMirror_2eproto();

  void InitAsDefaultInstance();
  static TMirrorInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TMirrorUnitInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Mirror.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TMirrorUnitInfo : public ::google::protobuf::Message {
 public:
  TMirrorUnitInfo();
  virtual ~TMirrorUnitInfo();

  TMirrorUnitInfo(const TMirrorUnitInfo& from);

  inline TMirrorUnitInfo& operator=(const TMirrorUnitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMirrorUnitInfo& default_instance();

  void Swap(TMirrorUnitInfo* other);

  // implements Message ----------------------------------------------

  TMirrorUnitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMirrorUnitInfo& from);
  void MergeFrom(const TMirrorUnitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUnitInfo UnitInfo = 1;
  inline bool has_unitinfo() const;
  inline void clear_unitinfo();
  static const int kUnitInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TMirrorUnitInfo</name>
  	<Function>
  		<name>unitinfo</name>
  		<replaceName>UnitInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_unitinfo</name>
  		<replaceName>UnitInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_unitinfo</name>
  		<replaceName>UnitInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitinfo</name>
  		<replaceName>UnitInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitInfo& unitinfo() const;
  inline ::pb::TUnitInfo* mutable_unitinfo();
  inline ::pb::TUnitInfo* release_unitinfo();
  inline void set_allocated_unitinfo(::pb::TUnitInfo* unitinfo);

  // optional .pb.THeroInfo HeroInfo = 2;
  inline bool has_heroinfo() const;
  inline void clear_heroinfo();
  static const int kHeroInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TMirrorUnitInfo</name>
  	<Function>
  		<name>heroinfo</name>
  		<replaceName>HeroInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_heroinfo</name>
  		<replaceName>HeroInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_heroinfo</name>
  		<replaceName>HeroInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_heroinfo</name>
  		<replaceName>HeroInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::THeroInfo& heroinfo() const;
  inline ::pb::THeroInfo* mutable_heroinfo();
  inline ::pb::THeroInfo* release_heroinfo();
  inline void set_allocated_heroinfo(::pb::THeroInfo* heroinfo);

  // @@protoc_insertion_point(class_scope:pb.TMirrorUnitInfo)
 private:
  inline void set_has_unitinfo();
  inline void clear_has_unitinfo();
  inline void set_has_heroinfo();
  inline void clear_has_heroinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUnitInfo* unitinfo_;
  ::pb::THeroInfo* heroinfo_;
  friend void  protobuf_AddDesc_net_2fMirror_2eproto();
  friend void protobuf_AssignDesc_net_2fMirror_2eproto();
  friend void protobuf_ShutdownFile_net_2fMirror_2eproto();

  void InitAsDefaultInstance();
  static TMirrorUnitInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// TMirrorInfo

// optional string Uname = 1;
inline bool TMirrorInfo::has_uname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMirrorInfo::set_has_uname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TMirrorInfo::clear_has_uname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TMirrorInfo::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TMirrorInfo::uname() const {
  // @@protoc_insertion_point(field_get:pb.TMirrorInfo.Uname)
  return *uname_;
}
inline void TMirrorInfo::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TMirrorInfo.Uname)
}
inline void TMirrorInfo::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TMirrorInfo.Uname)
}
inline void TMirrorInfo::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TMirrorInfo.Uname)
}
inline ::std::string* TMirrorInfo::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TMirrorInfo.Uname)
  return uname_;
}
inline ::std::string* TMirrorInfo::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TMirrorInfo::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TMirrorInfo.Uname)
}

// optional string Guild = 2;
inline bool TMirrorInfo::has_guild() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMirrorInfo::set_has_guild() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TMirrorInfo::clear_has_guild() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TMirrorInfo::clear_guild() {
  if (guild_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_->clear();
  }
  clear_has_guild();
}
inline const ::std::string& TMirrorInfo::guild() const {
  // @@protoc_insertion_point(field_get:pb.TMirrorInfo.Guild)
  return *guild_;
}
inline void TMirrorInfo::set_guild(const ::std::string& value) {
  set_has_guild();
  if (guild_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_ = new ::std::string;
  }
  guild_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TMirrorInfo.Guild)
}
inline void TMirrorInfo::set_guild(const char* value) {
  set_has_guild();
  if (guild_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_ = new ::std::string;
  }
  guild_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TMirrorInfo.Guild)
}
inline void TMirrorInfo::set_guild(const char* value, size_t size) {
  set_has_guild();
  if (guild_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_ = new ::std::string;
  }
  guild_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TMirrorInfo.Guild)
}
inline ::std::string* TMirrorInfo::mutable_guild() {
  set_has_guild();
  if (guild_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guild_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TMirrorInfo.Guild)
  return guild_;
}
inline ::std::string* TMirrorInfo::release_guild() {
  clear_has_guild();
  if (guild_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guild_;
    guild_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TMirrorInfo::set_allocated_guild(::std::string* guild) {
  if (guild_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_;
  }
  if (guild) {
    set_has_guild();
    guild_ = guild;
  } else {
    clear_has_guild();
    guild_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TMirrorInfo.Guild)
}

// optional uint32 UserLevel = 3;
inline bool TMirrorInfo::has_userlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMirrorInfo::set_has_userlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TMirrorInfo::clear_has_userlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TMirrorInfo::clear_userlevel() {
  userlevel_ = 0u;
  clear_has_userlevel();
}
inline ::google::protobuf::uint32 TMirrorInfo::userlevel() const {
  // @@protoc_insertion_point(field_get:pb.TMirrorInfo.UserLevel)
  return userlevel_;
}
inline void TMirrorInfo::set_userlevel(::google::protobuf::uint32 value) {
  set_has_userlevel();
  userlevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TMirrorInfo.UserLevel)
}

// optional uint32 AvatarId = 4;
inline bool TMirrorInfo::has_avatarid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMirrorInfo::set_has_avatarid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TMirrorInfo::clear_has_avatarid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TMirrorInfo::clear_avatarid() {
  avatarid_ = 0u;
  clear_has_avatarid();
}
inline ::google::protobuf::uint32 TMirrorInfo::avatarid() const {
  // @@protoc_insertion_point(field_get:pb.TMirrorInfo.AvatarId)
  return avatarid_;
}
inline void TMirrorInfo::set_avatarid(::google::protobuf::uint32 value) {
  set_has_avatarid();
  avatarid_ = value;
  // @@protoc_insertion_point(field_set:pb.TMirrorInfo.AvatarId)
}

// optional uint32 VipLevel = 5;
inline bool TMirrorInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TMirrorInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TMirrorInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TMirrorInfo::clear_viplevel() {
  viplevel_ = 0u;
  clear_has_viplevel();
}
inline ::google::protobuf::uint32 TMirrorInfo::viplevel() const {
  // @@protoc_insertion_point(field_get:pb.TMirrorInfo.VipLevel)
  return viplevel_;
}
inline void TMirrorInfo::set_viplevel(::google::protobuf::uint32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TMirrorInfo.VipLevel)
}

// optional uint64 FightForce = 6;
inline bool TMirrorInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TMirrorInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TMirrorInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TMirrorInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TMirrorInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TMirrorInfo.FightForce)
  return fightforce_;
}
inline void TMirrorInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TMirrorInfo.FightForce)
}

// repeated .pb.TMirrorUnitInfo UnitArr = 7;
inline int TMirrorInfo::unitarr_size() const {
  return unitarr_.size();
}
inline void TMirrorInfo::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TMirrorUnitInfo& TMirrorInfo::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TMirrorInfo.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TMirrorUnitInfo* TMirrorInfo::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TMirrorInfo.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TMirrorUnitInfo* TMirrorInfo::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TMirrorInfo.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TMirrorUnitInfo >&
TMirrorInfo::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TMirrorInfo.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TMirrorUnitInfo >*
TMirrorInfo::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TMirrorInfo.UnitArr)
  return &unitarr_;
}

// optional uint32 AvatarFrameId = 8;
inline bool TMirrorInfo::has_avatarframeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TMirrorInfo::set_has_avatarframeid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TMirrorInfo::clear_has_avatarframeid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TMirrorInfo::clear_avatarframeid() {
  avatarframeid_ = 0u;
  clear_has_avatarframeid();
}
inline ::google::protobuf::uint32 TMirrorInfo::avatarframeid() const {
  // @@protoc_insertion_point(field_get:pb.TMirrorInfo.AvatarFrameId)
  return avatarframeid_;
}
inline void TMirrorInfo::set_avatarframeid(::google::protobuf::uint32 value) {
  set_has_avatarframeid();
  avatarframeid_ = value;
  // @@protoc_insertion_point(field_set:pb.TMirrorInfo.AvatarFrameId)
}

// -------------------------------------------------------------------

// TMirrorUnitInfo

// optional .pb.TUnitInfo UnitInfo = 1;
inline bool TMirrorUnitInfo::has_unitinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMirrorUnitInfo::set_has_unitinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TMirrorUnitInfo::clear_has_unitinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TMirrorUnitInfo::clear_unitinfo() {
  if (unitinfo_ != NULL) unitinfo_->::pb::TUnitInfo::Clear();
  clear_has_unitinfo();
}
inline const ::pb::TUnitInfo& TMirrorUnitInfo::unitinfo() const {
  // @@protoc_insertion_point(field_get:pb.TMirrorUnitInfo.UnitInfo)
  return unitinfo_ != NULL ? *unitinfo_ : *default_instance_->unitinfo_;
}
inline ::pb::TUnitInfo* TMirrorUnitInfo::mutable_unitinfo() {
  set_has_unitinfo();
  if (unitinfo_ == NULL) unitinfo_ = new ::pb::TUnitInfo;
  // @@protoc_insertion_point(field_mutable:pb.TMirrorUnitInfo.UnitInfo)
  return unitinfo_;
}
inline ::pb::TUnitInfo* TMirrorUnitInfo::release_unitinfo() {
  clear_has_unitinfo();
  ::pb::TUnitInfo* temp = unitinfo_;
  unitinfo_ = NULL;
  return temp;
}
inline void TMirrorUnitInfo::set_allocated_unitinfo(::pb::TUnitInfo* unitinfo) {
  delete unitinfo_;
  unitinfo_ = unitinfo;
  if (unitinfo) {
    set_has_unitinfo();
  } else {
    clear_has_unitinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TMirrorUnitInfo.UnitInfo)
}

// optional .pb.THeroInfo HeroInfo = 2;
inline bool TMirrorUnitInfo::has_heroinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMirrorUnitInfo::set_has_heroinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TMirrorUnitInfo::clear_has_heroinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TMirrorUnitInfo::clear_heroinfo() {
  if (heroinfo_ != NULL) heroinfo_->::pb::THeroInfo::Clear();
  clear_has_heroinfo();
}
inline const ::pb::THeroInfo& TMirrorUnitInfo::heroinfo() const {
  // @@protoc_insertion_point(field_get:pb.TMirrorUnitInfo.HeroInfo)
  return heroinfo_ != NULL ? *heroinfo_ : *default_instance_->heroinfo_;
}
inline ::pb::THeroInfo* TMirrorUnitInfo::mutable_heroinfo() {
  set_has_heroinfo();
  if (heroinfo_ == NULL) heroinfo_ = new ::pb::THeroInfo;
  // @@protoc_insertion_point(field_mutable:pb.TMirrorUnitInfo.HeroInfo)
  return heroinfo_;
}
inline ::pb::THeroInfo* TMirrorUnitInfo::release_heroinfo() {
  clear_has_heroinfo();
  ::pb::THeroInfo* temp = heroinfo_;
  heroinfo_ = NULL;
  return temp;
}
inline void TMirrorUnitInfo::set_allocated_heroinfo(::pb::THeroInfo* heroinfo) {
  delete heroinfo_;
  heroinfo_ = heroinfo;
  if (heroinfo) {
    set_has_heroinfo();
  } else {
    clear_has_heroinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TMirrorUnitInfo.HeroInfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fMirror_2eproto__INCLUDED
