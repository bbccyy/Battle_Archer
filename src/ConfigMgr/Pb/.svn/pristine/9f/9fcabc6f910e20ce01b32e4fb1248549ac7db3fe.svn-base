// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Tower.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Tower.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TTowerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerHangRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerHangRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerGetTowerInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerGetTowerInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerEnterChallengeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerEnterChallengeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerEnterChallengeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerEnterChallengeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerReportChallengeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerReportChallengeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerSweepReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerSweepReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerSweepRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerSweepRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerReportChallengeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerReportChallengeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerResetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerResetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerResetRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerResetRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerPassedLevelRankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerPassedLevelRankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerPassedLevelRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerPassedLevelRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerPassedLevelRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerPassedLevelRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerReportCampSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerReportCampSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerGetReportInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerGetReportInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerGetReportInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerGetReportInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerGetHangRewardInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerGetHangRewardInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerReceiveHangRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerReceiveHangRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerBuyHangRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerBuyHangRewardRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fTower_2eproto() {
  protobuf_AddDesc_net_2fTower_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Tower.proto");
  GOOGLE_CHECK(file != NULL);
  TTowerInfo_descriptor_ = file->message_type(0);
  static const int TTowerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerInfo, curpassedlayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerInfo, maxpassedlayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerInfo, usedresetnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerInfo, hasbuyresetnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerInfo, banlayerid_),
  };
  TTowerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerInfo_descriptor_,
      TTowerInfo::default_instance_,
      TTowerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerInfo));
  TTowerHangRewardInfo_descriptor_ = file->message_type(1);
  static const int TTowerHangRewardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHangRewardInfo, hangtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHangRewardInfo, hangreceivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHangRewardInfo, randomrewardarr_),
  };
  TTowerHangRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerHangRewardInfo_descriptor_,
      TTowerHangRewardInfo::default_instance_,
      TTowerHangRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHangRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHangRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerHangRewardInfo));
  TTowerGetTowerInfoRsp_descriptor_ = file->message_type(2);
  static const int TTowerGetTowerInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerGetTowerInfoRsp, towerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerGetTowerInfoRsp, hanginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerGetTowerInfoRsp, boughthangrewardnum_),
  };
  TTowerGetTowerInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerGetTowerInfoRsp_descriptor_,
      TTowerGetTowerInfoRsp::default_instance_,
      TTowerGetTowerInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerGetTowerInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerGetTowerInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerGetTowerInfoRsp));
  TTowerEnterChallengeReq_descriptor_ = file->message_type(3);
  static const int TTowerEnterChallengeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerEnterChallengeReq, layerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerEnterChallengeReq, battlecheckparam_),
  };
  TTowerEnterChallengeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerEnterChallengeReq_descriptor_,
      TTowerEnterChallengeReq::default_instance_,
      TTowerEnterChallengeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerEnterChallengeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerEnterChallengeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerEnterChallengeReq));
  TTowerEnterChallengeRsp_descriptor_ = file->message_type(4);
  static const int TTowerEnterChallengeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerEnterChallengeRsp, battleargs_),
  };
  TTowerEnterChallengeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerEnterChallengeRsp_descriptor_,
      TTowerEnterChallengeRsp::default_instance_,
      TTowerEnterChallengeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerEnterChallengeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerEnterChallengeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerEnterChallengeRsp));
  TTowerReportChallengeReq_descriptor_ = file->message_type(5);
  static const int TTowerReportChallengeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerReportChallengeReq, layerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerReportChallengeReq, issweep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerReportChallengeReq, battlereport_),
  };
  TTowerReportChallengeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerReportChallengeReq_descriptor_,
      TTowerReportChallengeReq::default_instance_,
      TTowerReportChallengeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerReportChallengeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerReportChallengeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerReportChallengeReq));
  TTowerSweepReq_descriptor_ = file->message_type(6);
  static const int TTowerSweepReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerSweepReq, startlayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerSweepReq, targetlayer_),
  };
  TTowerSweepReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerSweepReq_descriptor_,
      TTowerSweepReq::default_instance_,
      TTowerSweepReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerSweepReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerSweepReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerSweepReq));
  TTowerSweepRsp_descriptor_ = file->message_type(7);
  static const int TTowerSweepRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerSweepRsp, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerSweepRsp, curpassedlayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerSweepRsp, maxpassedlayerid_),
  };
  TTowerSweepRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerSweepRsp_descriptor_,
      TTowerSweepRsp::default_instance_,
      TTowerSweepRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerSweepRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerSweepRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerSweepRsp));
  TTowerReportChallengeRsp_descriptor_ = file->message_type(8);
  static const int TTowerReportChallengeRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerReportChallengeRsp, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerReportChallengeRsp, curpassedlayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerReportChallengeRsp, maxpassedlayerid_),
  };
  TTowerReportChallengeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerReportChallengeRsp_descriptor_,
      TTowerReportChallengeRsp::default_instance_,
      TTowerReportChallengeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerReportChallengeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerReportChallengeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerReportChallengeRsp));
  TTowerResetReq_descriptor_ = file->message_type(9);
  static const int TTowerResetReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerResetReq, usedresetnum_),
  };
  TTowerResetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerResetReq_descriptor_,
      TTowerResetReq::default_instance_,
      TTowerResetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerResetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerResetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerResetReq));
  TTowerResetRsp_descriptor_ = file->message_type(10);
  static const int TTowerResetRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerResetRsp, curpassedlayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerResetRsp, usedresetnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerResetRsp, hasbuyresetnum_),
  };
  TTowerResetRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerResetRsp_descriptor_,
      TTowerResetRsp::default_instance_,
      TTowerResetRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerResetRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerResetRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerResetRsp));
  TTowerPassedLevelRankItem_descriptor_ = file->message_type(11);
  static const int TTowerPassedLevelRankItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerPassedLevelRankItem, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerPassedLevelRankItem, passedlayer_),
  };
  TTowerPassedLevelRankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerPassedLevelRankItem_descriptor_,
      TTowerPassedLevelRankItem::default_instance_,
      TTowerPassedLevelRankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerPassedLevelRankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerPassedLevelRankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerPassedLevelRankItem));
  TTowerPassedLevelRankReq_descriptor_ = file->message_type(12);
  static const int TTowerPassedLevelRankReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerPassedLevelRankReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerPassedLevelRankReq, limit_),
  };
  TTowerPassedLevelRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerPassedLevelRankReq_descriptor_,
      TTowerPassedLevelRankReq::default_instance_,
      TTowerPassedLevelRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerPassedLevelRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerPassedLevelRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerPassedLevelRankReq));
  TTowerPassedLevelRankRsp_descriptor_ = file->message_type(13);
  static const int TTowerPassedLevelRankRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerPassedLevelRankRsp, rankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerPassedLevelRankRsp, myrank_),
  };
  TTowerPassedLevelRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerPassedLevelRankRsp_descriptor_,
      TTowerPassedLevelRankRsp::default_instance_,
      TTowerPassedLevelRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerPassedLevelRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerPassedLevelRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerPassedLevelRankRsp));
  TTowerReportCampSingle_descriptor_ = file->message_type(14);
  static const int TTowerReportCampSingle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerReportCampSingle, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerReportCampSingle, reportarr_),
  };
  TTowerReportCampSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerReportCampSingle_descriptor_,
      TTowerReportCampSingle::default_instance_,
      TTowerReportCampSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerReportCampSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerReportCampSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerReportCampSingle));
  TTowerGetReportInfoReq_descriptor_ = file->message_type(15);
  static const int TTowerGetReportInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerGetReportInfoReq, layerid_),
  };
  TTowerGetReportInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerGetReportInfoReq_descriptor_,
      TTowerGetReportInfoReq::default_instance_,
      TTowerGetReportInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerGetReportInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerGetReportInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerGetReportInfoReq));
  TTowerGetReportInfoRsp_descriptor_ = file->message_type(16);
  static const int TTowerGetReportInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerGetReportInfoRsp, firstcampreportarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerGetReportInfoRsp, recentlycampreportarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerGetReportInfoRsp, fightforcemincampreportarr_),
  };
  TTowerGetReportInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerGetReportInfoRsp_descriptor_,
      TTowerGetReportInfoRsp::default_instance_,
      TTowerGetReportInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerGetReportInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerGetReportInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerGetReportInfoRsp));
  TTowerGetHangRewardInfoRsp_descriptor_ = file->message_type(17);
  static const int TTowerGetHangRewardInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerGetHangRewardInfoRsp, hanginfo_),
  };
  TTowerGetHangRewardInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerGetHangRewardInfoRsp_descriptor_,
      TTowerGetHangRewardInfoRsp::default_instance_,
      TTowerGetHangRewardInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerGetHangRewardInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerGetHangRewardInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerGetHangRewardInfoRsp));
  TTowerReceiveHangRewardRsp_descriptor_ = file->message_type(18);
  static const int TTowerReceiveHangRewardRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerReceiveHangRewardRsp, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerReceiveHangRewardRsp, hangtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerReceiveHangRewardRsp, hangreceivetime_),
  };
  TTowerReceiveHangRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerReceiveHangRewardRsp_descriptor_,
      TTowerReceiveHangRewardRsp::default_instance_,
      TTowerReceiveHangRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerReceiveHangRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerReceiveHangRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerReceiveHangRewardRsp));
  TTowerBuyHangRewardRsp_descriptor_ = file->message_type(19);
  static const int TTowerBuyHangRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerBuyHangRewardRsp, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerBuyHangRewardRsp, boughthangrewardnum_),
  };
  TTowerBuyHangRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerBuyHangRewardRsp_descriptor_,
      TTowerBuyHangRewardRsp::default_instance_,
      TTowerBuyHangRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerBuyHangRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerBuyHangRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerBuyHangRewardRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fTower_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerInfo_descriptor_, &TTowerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerHangRewardInfo_descriptor_, &TTowerHangRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerGetTowerInfoRsp_descriptor_, &TTowerGetTowerInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerEnterChallengeReq_descriptor_, &TTowerEnterChallengeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerEnterChallengeRsp_descriptor_, &TTowerEnterChallengeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerReportChallengeReq_descriptor_, &TTowerReportChallengeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerSweepReq_descriptor_, &TTowerSweepReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerSweepRsp_descriptor_, &TTowerSweepRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerReportChallengeRsp_descriptor_, &TTowerReportChallengeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerResetReq_descriptor_, &TTowerResetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerResetRsp_descriptor_, &TTowerResetRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerPassedLevelRankItem_descriptor_, &TTowerPassedLevelRankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerPassedLevelRankReq_descriptor_, &TTowerPassedLevelRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerPassedLevelRankRsp_descriptor_, &TTowerPassedLevelRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerReportCampSingle_descriptor_, &TTowerReportCampSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerGetReportInfoReq_descriptor_, &TTowerGetReportInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerGetReportInfoRsp_descriptor_, &TTowerGetReportInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerGetHangRewardInfoRsp_descriptor_, &TTowerGetHangRewardInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerReceiveHangRewardRsp_descriptor_, &TTowerReceiveHangRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerBuyHangRewardRsp_descriptor_, &TTowerBuyHangRewardRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fTower_2eproto() {
  delete TTowerInfo::default_instance_;
  delete TTowerInfo_reflection_;
  delete TTowerHangRewardInfo::default_instance_;
  delete TTowerHangRewardInfo_reflection_;
  delete TTowerGetTowerInfoRsp::default_instance_;
  delete TTowerGetTowerInfoRsp_reflection_;
  delete TTowerEnterChallengeReq::default_instance_;
  delete TTowerEnterChallengeReq_reflection_;
  delete TTowerEnterChallengeRsp::default_instance_;
  delete TTowerEnterChallengeRsp_reflection_;
  delete TTowerReportChallengeReq::default_instance_;
  delete TTowerReportChallengeReq_reflection_;
  delete TTowerSweepReq::default_instance_;
  delete TTowerSweepReq_reflection_;
  delete TTowerSweepRsp::default_instance_;
  delete TTowerSweepRsp_reflection_;
  delete TTowerReportChallengeRsp::default_instance_;
  delete TTowerReportChallengeRsp_reflection_;
  delete TTowerResetReq::default_instance_;
  delete TTowerResetReq_reflection_;
  delete TTowerResetRsp::default_instance_;
  delete TTowerResetRsp_reflection_;
  delete TTowerPassedLevelRankItem::default_instance_;
  delete TTowerPassedLevelRankItem_reflection_;
  delete TTowerPassedLevelRankReq::default_instance_;
  delete TTowerPassedLevelRankReq_reflection_;
  delete TTowerPassedLevelRankRsp::default_instance_;
  delete TTowerPassedLevelRankRsp_reflection_;
  delete TTowerReportCampSingle::default_instance_;
  delete TTowerReportCampSingle_reflection_;
  delete TTowerGetReportInfoReq::default_instance_;
  delete TTowerGetReportInfoReq_reflection_;
  delete TTowerGetReportInfoRsp::default_instance_;
  delete TTowerGetReportInfoRsp_reflection_;
  delete TTowerGetHangRewardInfoRsp::default_instance_;
  delete TTowerGetHangRewardInfoRsp_reflection_;
  delete TTowerReceiveHangRewardRsp::default_instance_;
  delete TTowerReceiveHangRewardRsp_reflection_;
  delete TTowerBuyHangRewardRsp::default_instance_;
  delete TTowerBuyHangRewardRsp_reflection_;
}

void protobuf_AddDesc_net_2fTower_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017net/Tower.proto\022\002pb\032\016net/User.proto\032\020n"
    "et/Battle.proto\032\026net/CommonReward.proto\032"
    "\033net/LocalBattleReport.proto\"\202\001\n\nTTowerI"
    "nfo\022\030\n\020CurPassedLayerId\030\001 \001(\r\022\030\n\020MaxPass"
    "edLayerId\030\002 \001(\r\022\024\n\014UsedResetNum\030\003 \001(\r\022\026\n"
    "\016HasBuyResetNum\030\004 \001(\r\022\022\n\nBanLayerId\030\005 \001("
    "\r\"m\n\024TTowerHangRewardInfo\022\020\n\010HangTime\030\001 "
    "\001(\004\022\027\n\017HangReceiveTime\030\002 \001(\004\022*\n\017RandomRe"
    "wardArr\030\003 \003(\0132\021.pb.TCommonReward\"\203\001\n\025TTo"
    "werGetTowerInfoRsp\022!\n\tTowerInfo\030\001 \001(\0132\016."
    "pb.TTowerInfo\022*\n\010HangInfo\030\002 \001(\0132\030.pb.TTo"
    "werHangRewardInfo\022\033\n\023BoughtHangRewardNum"
    "\030\003 \001(\r\"[\n\027TTowerEnterChallengeReq\022\017\n\007Lay"
    "erId\030\001 \001(\r\022/\n\020BattleCheckParam\030\002 \001(\0132\025.p"
    "b.TBattleCheckParam\">\n\027TTowerEnterChalle"
    "ngeRsp\022#\n\nBattleArgs\030\002 \001(\0132\017.pb.TBattleA"
    "rgs\"R\n\030TTowerReportChallengeReq\022\017\n\007Layer"
    "Id\030\001 \001(\r\022\017\n\007IsSweep\030\002 \001(\010\022\024\n\014BattleRepor"
    "t\030\003 \001(\014\"9\n\016TTowerSweepReq\022\022\n\nStartLayer\030"
    "\001 \001(\r\022\023\n\013TargetLayer\030\002 \001(\r\"j\n\016TTowerSwee"
    "pRsp\022$\n\tRewardArr\030\001 \003(\0132\021.pb.TCommonRewa"
    "rd\022\030\n\020CurPassedLayerId\030\002 \001(\r\022\030\n\020MaxPasse"
    "dLayerId\030\003 \001(\r\"]\n\030TTowerReportChallengeR"
    "sp\022\r\n\005IsWin\030\001 \001(\010\022\030\n\020CurPassedLayerId\030\002 "
    "\001(\r\022\030\n\020MaxPassedLayerId\030\003 \001(\r\"&\n\016TTowerR"
    "esetReq\022\024\n\014UsedResetNum\030\001 \001(\r\"X\n\016TTowerR"
    "esetRsp\022\030\n\020CurPassedLayerId\030\001 \001(\r\022\024\n\014Use"
    "dResetNum\030\002 \001(\r\022\026\n\016HasBuyResetNum\030\003 \001(\r\""
    "W\n\031TTowerPassedLevelRankItem\022%\n\010UserInfo"
    "\030\001 \001(\0132\023.pb.TUserSimpleInfo\022\023\n\013PassedLay"
    "er\030\002 \001(\r\"9\n\030TTowerPassedLevelRankReq\022\016\n\006"
    "Offset\030\001 \001(\005\022\r\n\005Limit\030\002 \001(\005\"Z\n\030TTowerPas"
    "sedLevelRankRsp\022.\n\007RankArr\030\001 \003(\0132\035.pb.TT"
    "owerPassedLevelRankItem\022\016\n\006MyRank\030\002 \001(\005\""
    "]\n\026TTowerReportCampSingle\022\016\n\006CampId\030\001 \001("
    "\r\0223\n\tReportArr\030\002 \003(\0132 .pb.TLocalBattleRe"
    "portSimpleInfo\")\n\026TTowerGetReportInfoReq"
    "\022\017\n\007LayerId\030\001 \001(\r\"\313\001\n\026TTowerGetReportInf"
    "oRsp\0226\n\022FirstCampReportArr\030\001 \003(\0132\032.pb.TT"
    "owerReportCampSingle\0229\n\025RecentlyCampRepo"
    "rtArr\030\002 \003(\0132\032.pb.TTowerReportCampSingle\022"
    ">\n\032FightForceMinCampReportArr\030\003 \003(\0132\032.pb"
    ".TTowerReportCampSingle\"H\n\032TTowerGetHang"
    "RewardInfoRsp\022*\n\010HangInfo\030\001 \001(\0132\030.pb.TTo"
    "werHangRewardInfo\"m\n\032TTowerReceiveHangRe"
    "wardRsp\022$\n\tRewardArr\030\001 \003(\0132\021.pb.TCommonR"
    "eward\022\020\n\010HangTime\030\002 \001(\004\022\027\n\017HangReceiveTi"
    "me\030\003 \001(\004\"[\n\026TTowerBuyHangRewardRsp\022$\n\tRe"
    "wardArr\030\001 \003(\0132\021.pb.TCommonReward\022\033\n\023Boug"
    "htHangRewardNum\030\002 \001(\r", 1981);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Tower.proto", &protobuf_RegisterTypes);
  TTowerInfo::default_instance_ = new TTowerInfo();
  TTowerHangRewardInfo::default_instance_ = new TTowerHangRewardInfo();
  TTowerGetTowerInfoRsp::default_instance_ = new TTowerGetTowerInfoRsp();
  TTowerEnterChallengeReq::default_instance_ = new TTowerEnterChallengeReq();
  TTowerEnterChallengeRsp::default_instance_ = new TTowerEnterChallengeRsp();
  TTowerReportChallengeReq::default_instance_ = new TTowerReportChallengeReq();
  TTowerSweepReq::default_instance_ = new TTowerSweepReq();
  TTowerSweepRsp::default_instance_ = new TTowerSweepRsp();
  TTowerReportChallengeRsp::default_instance_ = new TTowerReportChallengeRsp();
  TTowerResetReq::default_instance_ = new TTowerResetReq();
  TTowerResetRsp::default_instance_ = new TTowerResetRsp();
  TTowerPassedLevelRankItem::default_instance_ = new TTowerPassedLevelRankItem();
  TTowerPassedLevelRankReq::default_instance_ = new TTowerPassedLevelRankReq();
  TTowerPassedLevelRankRsp::default_instance_ = new TTowerPassedLevelRankRsp();
  TTowerReportCampSingle::default_instance_ = new TTowerReportCampSingle();
  TTowerGetReportInfoReq::default_instance_ = new TTowerGetReportInfoReq();
  TTowerGetReportInfoRsp::default_instance_ = new TTowerGetReportInfoRsp();
  TTowerGetHangRewardInfoRsp::default_instance_ = new TTowerGetHangRewardInfoRsp();
  TTowerReceiveHangRewardRsp::default_instance_ = new TTowerReceiveHangRewardRsp();
  TTowerBuyHangRewardRsp::default_instance_ = new TTowerBuyHangRewardRsp();
  TTowerInfo::default_instance_->InitAsDefaultInstance();
  TTowerHangRewardInfo::default_instance_->InitAsDefaultInstance();
  TTowerGetTowerInfoRsp::default_instance_->InitAsDefaultInstance();
  TTowerEnterChallengeReq::default_instance_->InitAsDefaultInstance();
  TTowerEnterChallengeRsp::default_instance_->InitAsDefaultInstance();
  TTowerReportChallengeReq::default_instance_->InitAsDefaultInstance();
  TTowerSweepReq::default_instance_->InitAsDefaultInstance();
  TTowerSweepRsp::default_instance_->InitAsDefaultInstance();
  TTowerReportChallengeRsp::default_instance_->InitAsDefaultInstance();
  TTowerResetReq::default_instance_->InitAsDefaultInstance();
  TTowerResetRsp::default_instance_->InitAsDefaultInstance();
  TTowerPassedLevelRankItem::default_instance_->InitAsDefaultInstance();
  TTowerPassedLevelRankReq::default_instance_->InitAsDefaultInstance();
  TTowerPassedLevelRankRsp::default_instance_->InitAsDefaultInstance();
  TTowerReportCampSingle::default_instance_->InitAsDefaultInstance();
  TTowerGetReportInfoReq::default_instance_->InitAsDefaultInstance();
  TTowerGetReportInfoRsp::default_instance_->InitAsDefaultInstance();
  TTowerGetHangRewardInfoRsp::default_instance_->InitAsDefaultInstance();
  TTowerReceiveHangRewardRsp::default_instance_->InitAsDefaultInstance();
  TTowerBuyHangRewardRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fTower_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fTower_2eproto {
  StaticDescriptorInitializer_net_2fTower_2eproto() {
    protobuf_AddDesc_net_2fTower_2eproto();
  }
} static_descriptor_initializer_net_2fTower_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TTowerInfo::kCurPassedLayerIdFieldNumber;
const int TTowerInfo::kMaxPassedLayerIdFieldNumber;
const int TTowerInfo::kUsedResetNumFieldNumber;
const int TTowerInfo::kHasBuyResetNumFieldNumber;
const int TTowerInfo::kBanLayerIdFieldNumber;
#endif  // !_MSC_VER

TTowerInfo::TTowerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerInfo)
}

void TTowerInfo::InitAsDefaultInstance() {
}

TTowerInfo::TTowerInfo(const TTowerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerInfo)
}

void TTowerInfo::SharedCtor() {
  _cached_size_ = 0;
  curpassedlayerid_ = 0u;
  maxpassedlayerid_ = 0u;
  usedresetnum_ = 0u;
  hasbuyresetnum_ = 0u;
  banlayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerInfo::~TTowerInfo() {
  // @@protoc_insertion_point(destructor:pb.TTowerInfo)
  SharedDtor();
}

void TTowerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerInfo_descriptor_;
}

const TTowerInfo& TTowerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerInfo* TTowerInfo::default_instance_ = NULL;

TTowerInfo* TTowerInfo::New() const {
  return new TTowerInfo;
}

void TTowerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(curpassedlayerid_, banlayerid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CurPassedLayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpassedlayerid_)));
          set_has_curpassedlayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MaxPassedLayerId;
        break;
      }

      // optional uint32 MaxPassedLayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_MaxPassedLayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpassedlayerid_)));
          set_has_maxpassedlayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_UsedResetNum;
        break;
      }

      // optional uint32 UsedResetNum = 3;
      case 3: {
        if (tag == 24) {
         parse_UsedResetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedresetnum_)));
          set_has_usedresetnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_HasBuyResetNum;
        break;
      }

      // optional uint32 HasBuyResetNum = 4;
      case 4: {
        if (tag == 32) {
         parse_HasBuyResetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hasbuyresetnum_)));
          set_has_hasbuyresetnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BanLayerId;
        break;
      }

      // optional uint32 BanLayerId = 5;
      case 5: {
        if (tag == 40) {
         parse_BanLayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banlayerid_)));
          set_has_banlayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerInfo)
  return false;
#undef DO_
}

void TTowerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerInfo)
  // optional uint32 CurPassedLayerId = 1;
  if (has_curpassedlayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curpassedlayerid(), output);
  }

  // optional uint32 MaxPassedLayerId = 2;
  if (has_maxpassedlayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxpassedlayerid(), output);
  }

  // optional uint32 UsedResetNum = 3;
  if (has_usedresetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usedresetnum(), output);
  }

  // optional uint32 HasBuyResetNum = 4;
  if (has_hasbuyresetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hasbuyresetnum(), output);
  }

  // optional uint32 BanLayerId = 5;
  if (has_banlayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->banlayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerInfo)
}

::google::protobuf::uint8* TTowerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerInfo)
  // optional uint32 CurPassedLayerId = 1;
  if (has_curpassedlayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curpassedlayerid(), target);
  }

  // optional uint32 MaxPassedLayerId = 2;
  if (has_maxpassedlayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxpassedlayerid(), target);
  }

  // optional uint32 UsedResetNum = 3;
  if (has_usedresetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usedresetnum(), target);
  }

  // optional uint32 HasBuyResetNum = 4;
  if (has_hasbuyresetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hasbuyresetnum(), target);
  }

  // optional uint32 BanLayerId = 5;
  if (has_banlayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->banlayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerInfo)
  return target;
}

int TTowerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CurPassedLayerId = 1;
    if (has_curpassedlayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpassedlayerid());
    }

    // optional uint32 MaxPassedLayerId = 2;
    if (has_maxpassedlayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpassedlayerid());
    }

    // optional uint32 UsedResetNum = 3;
    if (has_usedresetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedresetnum());
    }

    // optional uint32 HasBuyResetNum = 4;
    if (has_hasbuyresetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hasbuyresetnum());
    }

    // optional uint32 BanLayerId = 5;
    if (has_banlayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banlayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerInfo::MergeFrom(const TTowerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curpassedlayerid()) {
      set_curpassedlayerid(from.curpassedlayerid());
    }
    if (from.has_maxpassedlayerid()) {
      set_maxpassedlayerid(from.maxpassedlayerid());
    }
    if (from.has_usedresetnum()) {
      set_usedresetnum(from.usedresetnum());
    }
    if (from.has_hasbuyresetnum()) {
      set_hasbuyresetnum(from.hasbuyresetnum());
    }
    if (from.has_banlayerid()) {
      set_banlayerid(from.banlayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerInfo::CopyFrom(const TTowerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerInfo::IsInitialized() const {

  return true;
}

void TTowerInfo::Swap(TTowerInfo* other) {
  if (other != this) {
    std::swap(curpassedlayerid_, other->curpassedlayerid_);
    std::swap(maxpassedlayerid_, other->maxpassedlayerid_);
    std::swap(usedresetnum_, other->usedresetnum_);
    std::swap(hasbuyresetnum_, other->hasbuyresetnum_);
    std::swap(banlayerid_, other->banlayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerInfo_descriptor_;
  metadata.reflection = TTowerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerHangRewardInfo::kHangTimeFieldNumber;
const int TTowerHangRewardInfo::kHangReceiveTimeFieldNumber;
const int TTowerHangRewardInfo::kRandomRewardArrFieldNumber;
#endif  // !_MSC_VER

TTowerHangRewardInfo::TTowerHangRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerHangRewardInfo)
}

void TTowerHangRewardInfo::InitAsDefaultInstance() {
}

TTowerHangRewardInfo::TTowerHangRewardInfo(const TTowerHangRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerHangRewardInfo)
}

void TTowerHangRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  hangtime_ = GOOGLE_ULONGLONG(0);
  hangreceivetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerHangRewardInfo::~TTowerHangRewardInfo() {
  // @@protoc_insertion_point(destructor:pb.TTowerHangRewardInfo)
  SharedDtor();
}

void TTowerHangRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerHangRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerHangRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerHangRewardInfo_descriptor_;
}

const TTowerHangRewardInfo& TTowerHangRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerHangRewardInfo* TTowerHangRewardInfo::default_instance_ = NULL;

TTowerHangRewardInfo* TTowerHangRewardInfo::New() const {
  return new TTowerHangRewardInfo;
}

void TTowerHangRewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerHangRewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hangtime_, hangreceivetime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  randomrewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerHangRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerHangRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 HangTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hangtime_)));
          set_has_hangtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HangReceiveTime;
        break;
      }

      // optional uint64 HangReceiveTime = 2;
      case 2: {
        if (tag == 16) {
         parse_HangReceiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hangreceivetime_)));
          set_has_hangreceivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RandomRewardArr;
        break;
      }

      // repeated .pb.TCommonReward RandomRewardArr = 3;
      case 3: {
        if (tag == 26) {
         parse_RandomRewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_randomrewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RandomRewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerHangRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerHangRewardInfo)
  return false;
#undef DO_
}

void TTowerHangRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerHangRewardInfo)
  // optional uint64 HangTime = 1;
  if (has_hangtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hangtime(), output);
  }

  // optional uint64 HangReceiveTime = 2;
  if (has_hangreceivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hangreceivetime(), output);
  }

  // repeated .pb.TCommonReward RandomRewardArr = 3;
  for (int i = 0; i < this->randomrewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->randomrewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerHangRewardInfo)
}

::google::protobuf::uint8* TTowerHangRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerHangRewardInfo)
  // optional uint64 HangTime = 1;
  if (has_hangtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hangtime(), target);
  }

  // optional uint64 HangReceiveTime = 2;
  if (has_hangreceivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hangreceivetime(), target);
  }

  // repeated .pb.TCommonReward RandomRewardArr = 3;
  for (int i = 0; i < this->randomrewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->randomrewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerHangRewardInfo)
  return target;
}

int TTowerHangRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 HangTime = 1;
    if (has_hangtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hangtime());
    }

    // optional uint64 HangReceiveTime = 2;
    if (has_hangreceivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hangreceivetime());
    }

  }
  // repeated .pb.TCommonReward RandomRewardArr = 3;
  total_size += 1 * this->randomrewardarr_size();
  for (int i = 0; i < this->randomrewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->randomrewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerHangRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerHangRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerHangRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerHangRewardInfo::MergeFrom(const TTowerHangRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  randomrewardarr_.MergeFrom(from.randomrewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hangtime()) {
      set_hangtime(from.hangtime());
    }
    if (from.has_hangreceivetime()) {
      set_hangreceivetime(from.hangreceivetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerHangRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerHangRewardInfo::CopyFrom(const TTowerHangRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerHangRewardInfo::IsInitialized() const {

  return true;
}

void TTowerHangRewardInfo::Swap(TTowerHangRewardInfo* other) {
  if (other != this) {
    std::swap(hangtime_, other->hangtime_);
    std::swap(hangreceivetime_, other->hangreceivetime_);
    randomrewardarr_.Swap(&other->randomrewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerHangRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerHangRewardInfo_descriptor_;
  metadata.reflection = TTowerHangRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerGetTowerInfoRsp::kTowerInfoFieldNumber;
const int TTowerGetTowerInfoRsp::kHangInfoFieldNumber;
const int TTowerGetTowerInfoRsp::kBoughtHangRewardNumFieldNumber;
#endif  // !_MSC_VER

TTowerGetTowerInfoRsp::TTowerGetTowerInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerGetTowerInfoRsp)
}

void TTowerGetTowerInfoRsp::InitAsDefaultInstance() {
  towerinfo_ = const_cast< ::pb::TTowerInfo*>(&::pb::TTowerInfo::default_instance());
  hanginfo_ = const_cast< ::pb::TTowerHangRewardInfo*>(&::pb::TTowerHangRewardInfo::default_instance());
}

TTowerGetTowerInfoRsp::TTowerGetTowerInfoRsp(const TTowerGetTowerInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerGetTowerInfoRsp)
}

void TTowerGetTowerInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  towerinfo_ = NULL;
  hanginfo_ = NULL;
  boughthangrewardnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerGetTowerInfoRsp::~TTowerGetTowerInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerGetTowerInfoRsp)
  SharedDtor();
}

void TTowerGetTowerInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete towerinfo_;
    delete hanginfo_;
  }
}

void TTowerGetTowerInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerGetTowerInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerGetTowerInfoRsp_descriptor_;
}

const TTowerGetTowerInfoRsp& TTowerGetTowerInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerGetTowerInfoRsp* TTowerGetTowerInfoRsp::default_instance_ = NULL;

TTowerGetTowerInfoRsp* TTowerGetTowerInfoRsp::New() const {
  return new TTowerGetTowerInfoRsp;
}

void TTowerGetTowerInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_towerinfo()) {
      if (towerinfo_ != NULL) towerinfo_->::pb::TTowerInfo::Clear();
    }
    if (has_hanginfo()) {
      if (hanginfo_ != NULL) hanginfo_->::pb::TTowerHangRewardInfo::Clear();
    }
    boughthangrewardnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerGetTowerInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerGetTowerInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TTowerInfo TowerInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_towerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_HangInfo;
        break;
      }

      // optional .pb.TTowerHangRewardInfo HangInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_HangInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hanginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BoughtHangRewardNum;
        break;
      }

      // optional uint32 BoughtHangRewardNum = 3;
      case 3: {
        if (tag == 24) {
         parse_BoughtHangRewardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boughthangrewardnum_)));
          set_has_boughthangrewardnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerGetTowerInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerGetTowerInfoRsp)
  return false;
#undef DO_
}

void TTowerGetTowerInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerGetTowerInfoRsp)
  // optional .pb.TTowerInfo TowerInfo = 1;
  if (has_towerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->towerinfo(), output);
  }

  // optional .pb.TTowerHangRewardInfo HangInfo = 2;
  if (has_hanginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hanginfo(), output);
  }

  // optional uint32 BoughtHangRewardNum = 3;
  if (has_boughthangrewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->boughthangrewardnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerGetTowerInfoRsp)
}

::google::protobuf::uint8* TTowerGetTowerInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerGetTowerInfoRsp)
  // optional .pb.TTowerInfo TowerInfo = 1;
  if (has_towerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->towerinfo(), target);
  }

  // optional .pb.TTowerHangRewardInfo HangInfo = 2;
  if (has_hanginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hanginfo(), target);
  }

  // optional uint32 BoughtHangRewardNum = 3;
  if (has_boughthangrewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->boughthangrewardnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerGetTowerInfoRsp)
  return target;
}

int TTowerGetTowerInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TTowerInfo TowerInfo = 1;
    if (has_towerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->towerinfo());
    }

    // optional .pb.TTowerHangRewardInfo HangInfo = 2;
    if (has_hanginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hanginfo());
    }

    // optional uint32 BoughtHangRewardNum = 3;
    if (has_boughthangrewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boughthangrewardnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerGetTowerInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerGetTowerInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerGetTowerInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerGetTowerInfoRsp::MergeFrom(const TTowerGetTowerInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_towerinfo()) {
      mutable_towerinfo()->::pb::TTowerInfo::MergeFrom(from.towerinfo());
    }
    if (from.has_hanginfo()) {
      mutable_hanginfo()->::pb::TTowerHangRewardInfo::MergeFrom(from.hanginfo());
    }
    if (from.has_boughthangrewardnum()) {
      set_boughthangrewardnum(from.boughthangrewardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerGetTowerInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerGetTowerInfoRsp::CopyFrom(const TTowerGetTowerInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerGetTowerInfoRsp::IsInitialized() const {

  return true;
}

void TTowerGetTowerInfoRsp::Swap(TTowerGetTowerInfoRsp* other) {
  if (other != this) {
    std::swap(towerinfo_, other->towerinfo_);
    std::swap(hanginfo_, other->hanginfo_);
    std::swap(boughthangrewardnum_, other->boughthangrewardnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerGetTowerInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerGetTowerInfoRsp_descriptor_;
  metadata.reflection = TTowerGetTowerInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerEnterChallengeReq::kLayerIdFieldNumber;
const int TTowerEnterChallengeReq::kBattleCheckParamFieldNumber;
#endif  // !_MSC_VER

TTowerEnterChallengeReq::TTowerEnterChallengeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerEnterChallengeReq)
}

void TTowerEnterChallengeReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TTowerEnterChallengeReq::TTowerEnterChallengeReq(const TTowerEnterChallengeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerEnterChallengeReq)
}

void TTowerEnterChallengeReq::SharedCtor() {
  _cached_size_ = 0;
  layerid_ = 0u;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerEnterChallengeReq::~TTowerEnterChallengeReq() {
  // @@protoc_insertion_point(destructor:pb.TTowerEnterChallengeReq)
  SharedDtor();
}

void TTowerEnterChallengeReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TTowerEnterChallengeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerEnterChallengeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerEnterChallengeReq_descriptor_;
}

const TTowerEnterChallengeReq& TTowerEnterChallengeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerEnterChallengeReq* TTowerEnterChallengeReq::default_instance_ = NULL;

TTowerEnterChallengeReq* TTowerEnterChallengeReq::New() const {
  return new TTowerEnterChallengeReq;
}

void TTowerEnterChallengeReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    layerid_ = 0u;
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerEnterChallengeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerEnterChallengeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerEnterChallengeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerEnterChallengeReq)
  return false;
#undef DO_
}

void TTowerEnterChallengeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerEnterChallengeReq)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerid(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battlecheckparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerEnterChallengeReq)
}

::google::protobuf::uint8* TTowerEnterChallengeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerEnterChallengeReq)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerid(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battlecheckparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerEnterChallengeReq)
  return target;
}

int TTowerEnterChallengeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerId = 1;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerid());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 2;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerEnterChallengeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerEnterChallengeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerEnterChallengeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerEnterChallengeReq::MergeFrom(const TTowerEnterChallengeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerEnterChallengeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerEnterChallengeReq::CopyFrom(const TTowerEnterChallengeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerEnterChallengeReq::IsInitialized() const {

  return true;
}

void TTowerEnterChallengeReq::Swap(TTowerEnterChallengeReq* other) {
  if (other != this) {
    std::swap(layerid_, other->layerid_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerEnterChallengeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerEnterChallengeReq_descriptor_;
  metadata.reflection = TTowerEnterChallengeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerEnterChallengeRsp::kBattleArgsFieldNumber;
#endif  // !_MSC_VER

TTowerEnterChallengeRsp::TTowerEnterChallengeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerEnterChallengeRsp)
}

void TTowerEnterChallengeRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TTowerEnterChallengeRsp::TTowerEnterChallengeRsp(const TTowerEnterChallengeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerEnterChallengeRsp)
}

void TTowerEnterChallengeRsp::SharedCtor() {
  _cached_size_ = 0;
  battleargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerEnterChallengeRsp::~TTowerEnterChallengeRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerEnterChallengeRsp)
  SharedDtor();
}

void TTowerEnterChallengeRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
  }
}

void TTowerEnterChallengeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerEnterChallengeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerEnterChallengeRsp_descriptor_;
}

const TTowerEnterChallengeRsp& TTowerEnterChallengeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerEnterChallengeRsp* TTowerEnterChallengeRsp::default_instance_ = NULL;

TTowerEnterChallengeRsp* TTowerEnterChallengeRsp::New() const {
  return new TTowerEnterChallengeRsp;
}

void TTowerEnterChallengeRsp::Clear() {
  if (has_battleargs()) {
    if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerEnterChallengeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerEnterChallengeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBattleArgs BattleArgs = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerEnterChallengeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerEnterChallengeRsp)
  return false;
#undef DO_
}

void TTowerEnterChallengeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerEnterChallengeRsp)
  // optional .pb.TBattleArgs BattleArgs = 2;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battleargs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerEnterChallengeRsp)
}

::google::protobuf::uint8* TTowerEnterChallengeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerEnterChallengeRsp)
  // optional .pb.TBattleArgs BattleArgs = 2;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battleargs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerEnterChallengeRsp)
  return target;
}

int TTowerEnterChallengeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBattleArgs BattleArgs = 2;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerEnterChallengeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerEnterChallengeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerEnterChallengeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerEnterChallengeRsp::MergeFrom(const TTowerEnterChallengeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TBattleArgs::MergeFrom(from.battleargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerEnterChallengeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerEnterChallengeRsp::CopyFrom(const TTowerEnterChallengeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerEnterChallengeRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TTowerEnterChallengeRsp::Swap(TTowerEnterChallengeRsp* other) {
  if (other != this) {
    std::swap(battleargs_, other->battleargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerEnterChallengeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerEnterChallengeRsp_descriptor_;
  metadata.reflection = TTowerEnterChallengeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerReportChallengeReq::kLayerIdFieldNumber;
const int TTowerReportChallengeReq::kIsSweepFieldNumber;
const int TTowerReportChallengeReq::kBattleReportFieldNumber;
#endif  // !_MSC_VER

TTowerReportChallengeReq::TTowerReportChallengeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerReportChallengeReq)
}

void TTowerReportChallengeReq::InitAsDefaultInstance() {
}

TTowerReportChallengeReq::TTowerReportChallengeReq(const TTowerReportChallengeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerReportChallengeReq)
}

void TTowerReportChallengeReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  layerid_ = 0u;
  issweep_ = false;
  battlereport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerReportChallengeReq::~TTowerReportChallengeReq() {
  // @@protoc_insertion_point(destructor:pb.TTowerReportChallengeReq)
  SharedDtor();
}

void TTowerReportChallengeReq::SharedDtor() {
  if (battlereport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battlereport_;
  }
  if (this != default_instance_) {
  }
}

void TTowerReportChallengeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerReportChallengeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerReportChallengeReq_descriptor_;
}

const TTowerReportChallengeReq& TTowerReportChallengeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerReportChallengeReq* TTowerReportChallengeReq::default_instance_ = NULL;

TTowerReportChallengeReq* TTowerReportChallengeReq::New() const {
  return new TTowerReportChallengeReq;
}

void TTowerReportChallengeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerReportChallengeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(layerid_, issweep_);
    if (has_battlereport()) {
      if (battlereport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battlereport_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerReportChallengeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerReportChallengeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsSweep;
        break;
      }

      // optional bool IsSweep = 2;
      case 2: {
        if (tag == 16) {
         parse_IsSweep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issweep_)));
          set_has_issweep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BattleReport;
        break;
      }

      // optional bytes BattleReport = 3;
      case 3: {
        if (tag == 26) {
         parse_BattleReport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battlereport()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerReportChallengeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerReportChallengeReq)
  return false;
#undef DO_
}

void TTowerReportChallengeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerReportChallengeReq)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerid(), output);
  }

  // optional bool IsSweep = 2;
  if (has_issweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->issweep(), output);
  }

  // optional bytes BattleReport = 3;
  if (has_battlereport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->battlereport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerReportChallengeReq)
}

::google::protobuf::uint8* TTowerReportChallengeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerReportChallengeReq)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerid(), target);
  }

  // optional bool IsSweep = 2;
  if (has_issweep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->issweep(), target);
  }

  // optional bytes BattleReport = 3;
  if (has_battlereport()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->battlereport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerReportChallengeReq)
  return target;
}

int TTowerReportChallengeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerId = 1;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerid());
    }

    // optional bool IsSweep = 2;
    if (has_issweep()) {
      total_size += 1 + 1;
    }

    // optional bytes BattleReport = 3;
    if (has_battlereport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battlereport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerReportChallengeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerReportChallengeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerReportChallengeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerReportChallengeReq::MergeFrom(const TTowerReportChallengeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
    if (from.has_issweep()) {
      set_issweep(from.issweep());
    }
    if (from.has_battlereport()) {
      set_battlereport(from.battlereport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerReportChallengeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerReportChallengeReq::CopyFrom(const TTowerReportChallengeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerReportChallengeReq::IsInitialized() const {

  return true;
}

void TTowerReportChallengeReq::Swap(TTowerReportChallengeReq* other) {
  if (other != this) {
    std::swap(layerid_, other->layerid_);
    std::swap(issweep_, other->issweep_);
    std::swap(battlereport_, other->battlereport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerReportChallengeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerReportChallengeReq_descriptor_;
  metadata.reflection = TTowerReportChallengeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerSweepReq::kStartLayerFieldNumber;
const int TTowerSweepReq::kTargetLayerFieldNumber;
#endif  // !_MSC_VER

TTowerSweepReq::TTowerSweepReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerSweepReq)
}

void TTowerSweepReq::InitAsDefaultInstance() {
}

TTowerSweepReq::TTowerSweepReq(const TTowerSweepReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerSweepReq)
}

void TTowerSweepReq::SharedCtor() {
  _cached_size_ = 0;
  startlayer_ = 0u;
  targetlayer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerSweepReq::~TTowerSweepReq() {
  // @@protoc_insertion_point(destructor:pb.TTowerSweepReq)
  SharedDtor();
}

void TTowerSweepReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerSweepReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerSweepReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerSweepReq_descriptor_;
}

const TTowerSweepReq& TTowerSweepReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerSweepReq* TTowerSweepReq::default_instance_ = NULL;

TTowerSweepReq* TTowerSweepReq::New() const {
  return new TTowerSweepReq;
}

void TTowerSweepReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerSweepReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(startlayer_, targetlayer_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerSweepReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerSweepReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 StartLayer = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startlayer_)));
          set_has_startlayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TargetLayer;
        break;
      }

      // optional uint32 TargetLayer = 2;
      case 2: {
        if (tag == 16) {
         parse_TargetLayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetlayer_)));
          set_has_targetlayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerSweepReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerSweepReq)
  return false;
#undef DO_
}

void TTowerSweepReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerSweepReq)
  // optional uint32 StartLayer = 1;
  if (has_startlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startlayer(), output);
  }

  // optional uint32 TargetLayer = 2;
  if (has_targetlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetlayer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerSweepReq)
}

::google::protobuf::uint8* TTowerSweepReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerSweepReq)
  // optional uint32 StartLayer = 1;
  if (has_startlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->startlayer(), target);
  }

  // optional uint32 TargetLayer = 2;
  if (has_targetlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetlayer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerSweepReq)
  return target;
}

int TTowerSweepReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 StartLayer = 1;
    if (has_startlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startlayer());
    }

    // optional uint32 TargetLayer = 2;
    if (has_targetlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetlayer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerSweepReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerSweepReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerSweepReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerSweepReq::MergeFrom(const TTowerSweepReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startlayer()) {
      set_startlayer(from.startlayer());
    }
    if (from.has_targetlayer()) {
      set_targetlayer(from.targetlayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerSweepReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerSweepReq::CopyFrom(const TTowerSweepReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerSweepReq::IsInitialized() const {

  return true;
}

void TTowerSweepReq::Swap(TTowerSweepReq* other) {
  if (other != this) {
    std::swap(startlayer_, other->startlayer_);
    std::swap(targetlayer_, other->targetlayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerSweepReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerSweepReq_descriptor_;
  metadata.reflection = TTowerSweepReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerSweepRsp::kRewardArrFieldNumber;
const int TTowerSweepRsp::kCurPassedLayerIdFieldNumber;
const int TTowerSweepRsp::kMaxPassedLayerIdFieldNumber;
#endif  // !_MSC_VER

TTowerSweepRsp::TTowerSweepRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerSweepRsp)
}

void TTowerSweepRsp::InitAsDefaultInstance() {
}

TTowerSweepRsp::TTowerSweepRsp(const TTowerSweepRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerSweepRsp)
}

void TTowerSweepRsp::SharedCtor() {
  _cached_size_ = 0;
  curpassedlayerid_ = 0u;
  maxpassedlayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerSweepRsp::~TTowerSweepRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerSweepRsp)
  SharedDtor();
}

void TTowerSweepRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerSweepRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerSweepRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerSweepRsp_descriptor_;
}

const TTowerSweepRsp& TTowerSweepRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerSweepRsp* TTowerSweepRsp::default_instance_ = NULL;

TTowerSweepRsp* TTowerSweepRsp::New() const {
  return new TTowerSweepRsp;
}

void TTowerSweepRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerSweepRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(curpassedlayerid_, maxpassedlayerid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerSweepRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerSweepRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectTag(16)) goto parse_CurPassedLayerId;
        break;
      }

      // optional uint32 CurPassedLayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_CurPassedLayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpassedlayerid_)));
          set_has_curpassedlayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MaxPassedLayerId;
        break;
      }

      // optional uint32 MaxPassedLayerId = 3;
      case 3: {
        if (tag == 24) {
         parse_MaxPassedLayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpassedlayerid_)));
          set_has_maxpassedlayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerSweepRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerSweepRsp)
  return false;
#undef DO_
}

void TTowerSweepRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerSweepRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  // optional uint32 CurPassedLayerId = 2;
  if (has_curpassedlayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curpassedlayerid(), output);
  }

  // optional uint32 MaxPassedLayerId = 3;
  if (has_maxpassedlayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxpassedlayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerSweepRsp)
}

::google::protobuf::uint8* TTowerSweepRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerSweepRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  // optional uint32 CurPassedLayerId = 2;
  if (has_curpassedlayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curpassedlayerid(), target);
  }

  // optional uint32 MaxPassedLayerId = 3;
  if (has_maxpassedlayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxpassedlayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerSweepRsp)
  return target;
}

int TTowerSweepRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 CurPassedLayerId = 2;
    if (has_curpassedlayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpassedlayerid());
    }

    // optional uint32 MaxPassedLayerId = 3;
    if (has_maxpassedlayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpassedlayerid());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerSweepRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerSweepRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerSweepRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerSweepRsp::MergeFrom(const TTowerSweepRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_curpassedlayerid()) {
      set_curpassedlayerid(from.curpassedlayerid());
    }
    if (from.has_maxpassedlayerid()) {
      set_maxpassedlayerid(from.maxpassedlayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerSweepRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerSweepRsp::CopyFrom(const TTowerSweepRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerSweepRsp::IsInitialized() const {

  return true;
}

void TTowerSweepRsp::Swap(TTowerSweepRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(curpassedlayerid_, other->curpassedlayerid_);
    std::swap(maxpassedlayerid_, other->maxpassedlayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerSweepRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerSweepRsp_descriptor_;
  metadata.reflection = TTowerSweepRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerReportChallengeRsp::kIsWinFieldNumber;
const int TTowerReportChallengeRsp::kCurPassedLayerIdFieldNumber;
const int TTowerReportChallengeRsp::kMaxPassedLayerIdFieldNumber;
#endif  // !_MSC_VER

TTowerReportChallengeRsp::TTowerReportChallengeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerReportChallengeRsp)
}

void TTowerReportChallengeRsp::InitAsDefaultInstance() {
}

TTowerReportChallengeRsp::TTowerReportChallengeRsp(const TTowerReportChallengeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerReportChallengeRsp)
}

void TTowerReportChallengeRsp::SharedCtor() {
  _cached_size_ = 0;
  iswin_ = false;
  curpassedlayerid_ = 0u;
  maxpassedlayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerReportChallengeRsp::~TTowerReportChallengeRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerReportChallengeRsp)
  SharedDtor();
}

void TTowerReportChallengeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerReportChallengeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerReportChallengeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerReportChallengeRsp_descriptor_;
}

const TTowerReportChallengeRsp& TTowerReportChallengeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerReportChallengeRsp* TTowerReportChallengeRsp::default_instance_ = NULL;

TTowerReportChallengeRsp* TTowerReportChallengeRsp::New() const {
  return new TTowerReportChallengeRsp;
}

void TTowerReportChallengeRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerReportChallengeRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(iswin_, maxpassedlayerid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerReportChallengeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerReportChallengeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsWin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CurPassedLayerId;
        break;
      }

      // optional uint32 CurPassedLayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_CurPassedLayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpassedlayerid_)));
          set_has_curpassedlayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MaxPassedLayerId;
        break;
      }

      // optional uint32 MaxPassedLayerId = 3;
      case 3: {
        if (tag == 24) {
         parse_MaxPassedLayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpassedlayerid_)));
          set_has_maxpassedlayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerReportChallengeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerReportChallengeRsp)
  return false;
#undef DO_
}

void TTowerReportChallengeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerReportChallengeRsp)
  // optional bool IsWin = 1;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iswin(), output);
  }

  // optional uint32 CurPassedLayerId = 2;
  if (has_curpassedlayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curpassedlayerid(), output);
  }

  // optional uint32 MaxPassedLayerId = 3;
  if (has_maxpassedlayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxpassedlayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerReportChallengeRsp)
}

::google::protobuf::uint8* TTowerReportChallengeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerReportChallengeRsp)
  // optional bool IsWin = 1;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->iswin(), target);
  }

  // optional uint32 CurPassedLayerId = 2;
  if (has_curpassedlayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curpassedlayerid(), target);
  }

  // optional uint32 MaxPassedLayerId = 3;
  if (has_maxpassedlayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxpassedlayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerReportChallengeRsp)
  return target;
}

int TTowerReportChallengeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsWin = 1;
    if (has_iswin()) {
      total_size += 1 + 1;
    }

    // optional uint32 CurPassedLayerId = 2;
    if (has_curpassedlayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpassedlayerid());
    }

    // optional uint32 MaxPassedLayerId = 3;
    if (has_maxpassedlayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpassedlayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerReportChallengeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerReportChallengeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerReportChallengeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerReportChallengeRsp::MergeFrom(const TTowerReportChallengeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
    if (from.has_curpassedlayerid()) {
      set_curpassedlayerid(from.curpassedlayerid());
    }
    if (from.has_maxpassedlayerid()) {
      set_maxpassedlayerid(from.maxpassedlayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerReportChallengeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerReportChallengeRsp::CopyFrom(const TTowerReportChallengeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerReportChallengeRsp::IsInitialized() const {

  return true;
}

void TTowerReportChallengeRsp::Swap(TTowerReportChallengeRsp* other) {
  if (other != this) {
    std::swap(iswin_, other->iswin_);
    std::swap(curpassedlayerid_, other->curpassedlayerid_);
    std::swap(maxpassedlayerid_, other->maxpassedlayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerReportChallengeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerReportChallengeRsp_descriptor_;
  metadata.reflection = TTowerReportChallengeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerResetReq::kUsedResetNumFieldNumber;
#endif  // !_MSC_VER

TTowerResetReq::TTowerResetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerResetReq)
}

void TTowerResetReq::InitAsDefaultInstance() {
}

TTowerResetReq::TTowerResetReq(const TTowerResetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerResetReq)
}

void TTowerResetReq::SharedCtor() {
  _cached_size_ = 0;
  usedresetnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerResetReq::~TTowerResetReq() {
  // @@protoc_insertion_point(destructor:pb.TTowerResetReq)
  SharedDtor();
}

void TTowerResetReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerResetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerResetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerResetReq_descriptor_;
}

const TTowerResetReq& TTowerResetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerResetReq* TTowerResetReq::default_instance_ = NULL;

TTowerResetReq* TTowerResetReq::New() const {
  return new TTowerResetReq;
}

void TTowerResetReq::Clear() {
  usedresetnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerResetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerResetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 UsedResetNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedresetnum_)));
          set_has_usedresetnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerResetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerResetReq)
  return false;
#undef DO_
}

void TTowerResetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerResetReq)
  // optional uint32 UsedResetNum = 1;
  if (has_usedresetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->usedresetnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerResetReq)
}

::google::protobuf::uint8* TTowerResetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerResetReq)
  // optional uint32 UsedResetNum = 1;
  if (has_usedresetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->usedresetnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerResetReq)
  return target;
}

int TTowerResetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 UsedResetNum = 1;
    if (has_usedresetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedresetnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerResetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerResetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerResetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerResetReq::MergeFrom(const TTowerResetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usedresetnum()) {
      set_usedresetnum(from.usedresetnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerResetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerResetReq::CopyFrom(const TTowerResetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerResetReq::IsInitialized() const {

  return true;
}

void TTowerResetReq::Swap(TTowerResetReq* other) {
  if (other != this) {
    std::swap(usedresetnum_, other->usedresetnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerResetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerResetReq_descriptor_;
  metadata.reflection = TTowerResetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerResetRsp::kCurPassedLayerIdFieldNumber;
const int TTowerResetRsp::kUsedResetNumFieldNumber;
const int TTowerResetRsp::kHasBuyResetNumFieldNumber;
#endif  // !_MSC_VER

TTowerResetRsp::TTowerResetRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerResetRsp)
}

void TTowerResetRsp::InitAsDefaultInstance() {
}

TTowerResetRsp::TTowerResetRsp(const TTowerResetRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerResetRsp)
}

void TTowerResetRsp::SharedCtor() {
  _cached_size_ = 0;
  curpassedlayerid_ = 0u;
  usedresetnum_ = 0u;
  hasbuyresetnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerResetRsp::~TTowerResetRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerResetRsp)
  SharedDtor();
}

void TTowerResetRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerResetRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerResetRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerResetRsp_descriptor_;
}

const TTowerResetRsp& TTowerResetRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerResetRsp* TTowerResetRsp::default_instance_ = NULL;

TTowerResetRsp* TTowerResetRsp::New() const {
  return new TTowerResetRsp;
}

void TTowerResetRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerResetRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(curpassedlayerid_, hasbuyresetnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerResetRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerResetRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CurPassedLayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpassedlayerid_)));
          set_has_curpassedlayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UsedResetNum;
        break;
      }

      // optional uint32 UsedResetNum = 2;
      case 2: {
        if (tag == 16) {
         parse_UsedResetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedresetnum_)));
          set_has_usedresetnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_HasBuyResetNum;
        break;
      }

      // optional uint32 HasBuyResetNum = 3;
      case 3: {
        if (tag == 24) {
         parse_HasBuyResetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hasbuyresetnum_)));
          set_has_hasbuyresetnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerResetRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerResetRsp)
  return false;
#undef DO_
}

void TTowerResetRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerResetRsp)
  // optional uint32 CurPassedLayerId = 1;
  if (has_curpassedlayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curpassedlayerid(), output);
  }

  // optional uint32 UsedResetNum = 2;
  if (has_usedresetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usedresetnum(), output);
  }

  // optional uint32 HasBuyResetNum = 3;
  if (has_hasbuyresetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hasbuyresetnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerResetRsp)
}

::google::protobuf::uint8* TTowerResetRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerResetRsp)
  // optional uint32 CurPassedLayerId = 1;
  if (has_curpassedlayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curpassedlayerid(), target);
  }

  // optional uint32 UsedResetNum = 2;
  if (has_usedresetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usedresetnum(), target);
  }

  // optional uint32 HasBuyResetNum = 3;
  if (has_hasbuyresetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hasbuyresetnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerResetRsp)
  return target;
}

int TTowerResetRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CurPassedLayerId = 1;
    if (has_curpassedlayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpassedlayerid());
    }

    // optional uint32 UsedResetNum = 2;
    if (has_usedresetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedresetnum());
    }

    // optional uint32 HasBuyResetNum = 3;
    if (has_hasbuyresetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hasbuyresetnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerResetRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerResetRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerResetRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerResetRsp::MergeFrom(const TTowerResetRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curpassedlayerid()) {
      set_curpassedlayerid(from.curpassedlayerid());
    }
    if (from.has_usedresetnum()) {
      set_usedresetnum(from.usedresetnum());
    }
    if (from.has_hasbuyresetnum()) {
      set_hasbuyresetnum(from.hasbuyresetnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerResetRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerResetRsp::CopyFrom(const TTowerResetRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerResetRsp::IsInitialized() const {

  return true;
}

void TTowerResetRsp::Swap(TTowerResetRsp* other) {
  if (other != this) {
    std::swap(curpassedlayerid_, other->curpassedlayerid_);
    std::swap(usedresetnum_, other->usedresetnum_);
    std::swap(hasbuyresetnum_, other->hasbuyresetnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerResetRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerResetRsp_descriptor_;
  metadata.reflection = TTowerResetRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerPassedLevelRankItem::kUserInfoFieldNumber;
const int TTowerPassedLevelRankItem::kPassedLayerFieldNumber;
#endif  // !_MSC_VER

TTowerPassedLevelRankItem::TTowerPassedLevelRankItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerPassedLevelRankItem)
}

void TTowerPassedLevelRankItem::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TTowerPassedLevelRankItem::TTowerPassedLevelRankItem(const TTowerPassedLevelRankItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerPassedLevelRankItem)
}

void TTowerPassedLevelRankItem::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  passedlayer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerPassedLevelRankItem::~TTowerPassedLevelRankItem() {
  // @@protoc_insertion_point(destructor:pb.TTowerPassedLevelRankItem)
  SharedDtor();
}

void TTowerPassedLevelRankItem::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TTowerPassedLevelRankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerPassedLevelRankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerPassedLevelRankItem_descriptor_;
}

const TTowerPassedLevelRankItem& TTowerPassedLevelRankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerPassedLevelRankItem* TTowerPassedLevelRankItem::default_instance_ = NULL;

TTowerPassedLevelRankItem* TTowerPassedLevelRankItem::New() const {
  return new TTowerPassedLevelRankItem;
}

void TTowerPassedLevelRankItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
    passedlayer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerPassedLevelRankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerPassedLevelRankItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PassedLayer;
        break;
      }

      // optional uint32 PassedLayer = 2;
      case 2: {
        if (tag == 16) {
         parse_PassedLayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passedlayer_)));
          set_has_passedlayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerPassedLevelRankItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerPassedLevelRankItem)
  return false;
#undef DO_
}

void TTowerPassedLevelRankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerPassedLevelRankItem)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 PassedLayer = 2;
  if (has_passedlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->passedlayer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerPassedLevelRankItem)
}

::google::protobuf::uint8* TTowerPassedLevelRankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerPassedLevelRankItem)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 PassedLayer = 2;
  if (has_passedlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->passedlayer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerPassedLevelRankItem)
  return target;
}

int TTowerPassedLevelRankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 PassedLayer = 2;
    if (has_passedlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passedlayer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerPassedLevelRankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerPassedLevelRankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerPassedLevelRankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerPassedLevelRankItem::MergeFrom(const TTowerPassedLevelRankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_passedlayer()) {
      set_passedlayer(from.passedlayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerPassedLevelRankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerPassedLevelRankItem::CopyFrom(const TTowerPassedLevelRankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerPassedLevelRankItem::IsInitialized() const {

  return true;
}

void TTowerPassedLevelRankItem::Swap(TTowerPassedLevelRankItem* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(passedlayer_, other->passedlayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerPassedLevelRankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerPassedLevelRankItem_descriptor_;
  metadata.reflection = TTowerPassedLevelRankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerPassedLevelRankReq::kOffsetFieldNumber;
const int TTowerPassedLevelRankReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TTowerPassedLevelRankReq::TTowerPassedLevelRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerPassedLevelRankReq)
}

void TTowerPassedLevelRankReq::InitAsDefaultInstance() {
}

TTowerPassedLevelRankReq::TTowerPassedLevelRankReq(const TTowerPassedLevelRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerPassedLevelRankReq)
}

void TTowerPassedLevelRankReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerPassedLevelRankReq::~TTowerPassedLevelRankReq() {
  // @@protoc_insertion_point(destructor:pb.TTowerPassedLevelRankReq)
  SharedDtor();
}

void TTowerPassedLevelRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerPassedLevelRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerPassedLevelRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerPassedLevelRankReq_descriptor_;
}

const TTowerPassedLevelRankReq& TTowerPassedLevelRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerPassedLevelRankReq* TTowerPassedLevelRankReq::default_instance_ = NULL;

TTowerPassedLevelRankReq* TTowerPassedLevelRankReq::New() const {
  return new TTowerPassedLevelRankReq;
}

void TTowerPassedLevelRankReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerPassedLevelRankReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerPassedLevelRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerPassedLevelRankReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional int32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerPassedLevelRankReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerPassedLevelRankReq)
  return false;
#undef DO_
}

void TTowerPassedLevelRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerPassedLevelRankReq)
  // optional int32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // optional int32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerPassedLevelRankReq)
}

::google::protobuf::uint8* TTowerPassedLevelRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerPassedLevelRankReq)
  // optional int32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // optional int32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerPassedLevelRankReq)
  return target;
}

int TTowerPassedLevelRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional int32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerPassedLevelRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerPassedLevelRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerPassedLevelRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerPassedLevelRankReq::MergeFrom(const TTowerPassedLevelRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerPassedLevelRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerPassedLevelRankReq::CopyFrom(const TTowerPassedLevelRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerPassedLevelRankReq::IsInitialized() const {

  return true;
}

void TTowerPassedLevelRankReq::Swap(TTowerPassedLevelRankReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerPassedLevelRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerPassedLevelRankReq_descriptor_;
  metadata.reflection = TTowerPassedLevelRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerPassedLevelRankRsp::kRankArrFieldNumber;
const int TTowerPassedLevelRankRsp::kMyRankFieldNumber;
#endif  // !_MSC_VER

TTowerPassedLevelRankRsp::TTowerPassedLevelRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerPassedLevelRankRsp)
}

void TTowerPassedLevelRankRsp::InitAsDefaultInstance() {
}

TTowerPassedLevelRankRsp::TTowerPassedLevelRankRsp(const TTowerPassedLevelRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerPassedLevelRankRsp)
}

void TTowerPassedLevelRankRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerPassedLevelRankRsp::~TTowerPassedLevelRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerPassedLevelRankRsp)
  SharedDtor();
}

void TTowerPassedLevelRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerPassedLevelRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerPassedLevelRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerPassedLevelRankRsp_descriptor_;
}

const TTowerPassedLevelRankRsp& TTowerPassedLevelRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerPassedLevelRankRsp* TTowerPassedLevelRankRsp::default_instance_ = NULL;

TTowerPassedLevelRankRsp* TTowerPassedLevelRankRsp::New() const {
  return new TTowerPassedLevelRankRsp;
}

void TTowerPassedLevelRankRsp::Clear() {
  myrank_ = 0;
  rankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerPassedLevelRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerPassedLevelRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TTowerPassedLevelRankItem RankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankArr;
        if (input->ExpectTag(16)) goto parse_MyRank;
        break;
      }

      // optional int32 MyRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerPassedLevelRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerPassedLevelRankRsp)
  return false;
#undef DO_
}

void TTowerPassedLevelRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerPassedLevelRankRsp)
  // repeated .pb.TTowerPassedLevelRankItem RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankarr(i), output);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerPassedLevelRankRsp)
}

::google::protobuf::uint8* TTowerPassedLevelRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerPassedLevelRankRsp)
  // repeated .pb.TTowerPassedLevelRankItem RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankarr(i), target);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerPassedLevelRankRsp)
  return target;
}

int TTowerPassedLevelRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 MyRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

  }
  // repeated .pb.TTowerPassedLevelRankItem RankArr = 1;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerPassedLevelRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerPassedLevelRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerPassedLevelRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerPassedLevelRankRsp::MergeFrom(const TTowerPassedLevelRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankarr_.MergeFrom(from.rankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerPassedLevelRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerPassedLevelRankRsp::CopyFrom(const TTowerPassedLevelRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerPassedLevelRankRsp::IsInitialized() const {

  return true;
}

void TTowerPassedLevelRankRsp::Swap(TTowerPassedLevelRankRsp* other) {
  if (other != this) {
    rankarr_.Swap(&other->rankarr_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerPassedLevelRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerPassedLevelRankRsp_descriptor_;
  metadata.reflection = TTowerPassedLevelRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerReportCampSingle::kCampIdFieldNumber;
const int TTowerReportCampSingle::kReportArrFieldNumber;
#endif  // !_MSC_VER

TTowerReportCampSingle::TTowerReportCampSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerReportCampSingle)
}

void TTowerReportCampSingle::InitAsDefaultInstance() {
}

TTowerReportCampSingle::TTowerReportCampSingle(const TTowerReportCampSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerReportCampSingle)
}

void TTowerReportCampSingle::SharedCtor() {
  _cached_size_ = 0;
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerReportCampSingle::~TTowerReportCampSingle() {
  // @@protoc_insertion_point(destructor:pb.TTowerReportCampSingle)
  SharedDtor();
}

void TTowerReportCampSingle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerReportCampSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerReportCampSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerReportCampSingle_descriptor_;
}

const TTowerReportCampSingle& TTowerReportCampSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerReportCampSingle* TTowerReportCampSingle::default_instance_ = NULL;

TTowerReportCampSingle* TTowerReportCampSingle::New() const {
  return new TTowerReportCampSingle;
}

void TTowerReportCampSingle::Clear() {
  campid_ = 0u;
  reportarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerReportCampSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerReportCampSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CampId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ReportArr;
        break;
      }

      // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 2;
      case 2: {
        if (tag == 18) {
         parse_ReportArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reportarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ReportArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerReportCampSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerReportCampSingle)
  return false;
#undef DO_
}

void TTowerReportCampSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerReportCampSingle)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->campid(), output);
  }

  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 2;
  for (int i = 0; i < this->reportarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reportarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerReportCampSingle)
}

::google::protobuf::uint8* TTowerReportCampSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerReportCampSingle)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->campid(), target);
  }

  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 2;
  for (int i = 0; i < this->reportarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reportarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerReportCampSingle)
  return target;
}

int TTowerReportCampSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CampId = 1;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

  }
  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 2;
  total_size += 1 * this->reportarr_size();
  for (int i = 0; i < this->reportarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reportarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerReportCampSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerReportCampSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerReportCampSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerReportCampSingle::MergeFrom(const TTowerReportCampSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  reportarr_.MergeFrom(from.reportarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_campid()) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerReportCampSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerReportCampSingle::CopyFrom(const TTowerReportCampSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerReportCampSingle::IsInitialized() const {

  return true;
}

void TTowerReportCampSingle::Swap(TTowerReportCampSingle* other) {
  if (other != this) {
    std::swap(campid_, other->campid_);
    reportarr_.Swap(&other->reportarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerReportCampSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerReportCampSingle_descriptor_;
  metadata.reflection = TTowerReportCampSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerGetReportInfoReq::kLayerIdFieldNumber;
#endif  // !_MSC_VER

TTowerGetReportInfoReq::TTowerGetReportInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerGetReportInfoReq)
}

void TTowerGetReportInfoReq::InitAsDefaultInstance() {
}

TTowerGetReportInfoReq::TTowerGetReportInfoReq(const TTowerGetReportInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerGetReportInfoReq)
}

void TTowerGetReportInfoReq::SharedCtor() {
  _cached_size_ = 0;
  layerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerGetReportInfoReq::~TTowerGetReportInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TTowerGetReportInfoReq)
  SharedDtor();
}

void TTowerGetReportInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerGetReportInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerGetReportInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerGetReportInfoReq_descriptor_;
}

const TTowerGetReportInfoReq& TTowerGetReportInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerGetReportInfoReq* TTowerGetReportInfoReq::default_instance_ = NULL;

TTowerGetReportInfoReq* TTowerGetReportInfoReq::New() const {
  return new TTowerGetReportInfoReq;
}

void TTowerGetReportInfoReq::Clear() {
  layerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerGetReportInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerGetReportInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerGetReportInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerGetReportInfoReq)
  return false;
#undef DO_
}

void TTowerGetReportInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerGetReportInfoReq)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerGetReportInfoReq)
}

::google::protobuf::uint8* TTowerGetReportInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerGetReportInfoReq)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerGetReportInfoReq)
  return target;
}

int TTowerGetReportInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerId = 1;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerGetReportInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerGetReportInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerGetReportInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerGetReportInfoReq::MergeFrom(const TTowerGetReportInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerGetReportInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerGetReportInfoReq::CopyFrom(const TTowerGetReportInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerGetReportInfoReq::IsInitialized() const {

  return true;
}

void TTowerGetReportInfoReq::Swap(TTowerGetReportInfoReq* other) {
  if (other != this) {
    std::swap(layerid_, other->layerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerGetReportInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerGetReportInfoReq_descriptor_;
  metadata.reflection = TTowerGetReportInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerGetReportInfoRsp::kFirstCampReportArrFieldNumber;
const int TTowerGetReportInfoRsp::kRecentlyCampReportArrFieldNumber;
const int TTowerGetReportInfoRsp::kFightForceMinCampReportArrFieldNumber;
#endif  // !_MSC_VER

TTowerGetReportInfoRsp::TTowerGetReportInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerGetReportInfoRsp)
}

void TTowerGetReportInfoRsp::InitAsDefaultInstance() {
}

TTowerGetReportInfoRsp::TTowerGetReportInfoRsp(const TTowerGetReportInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerGetReportInfoRsp)
}

void TTowerGetReportInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerGetReportInfoRsp::~TTowerGetReportInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerGetReportInfoRsp)
  SharedDtor();
}

void TTowerGetReportInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerGetReportInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerGetReportInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerGetReportInfoRsp_descriptor_;
}

const TTowerGetReportInfoRsp& TTowerGetReportInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerGetReportInfoRsp* TTowerGetReportInfoRsp::default_instance_ = NULL;

TTowerGetReportInfoRsp* TTowerGetReportInfoRsp::New() const {
  return new TTowerGetReportInfoRsp;
}

void TTowerGetReportInfoRsp::Clear() {
  firstcampreportarr_.Clear();
  recentlycampreportarr_.Clear();
  fightforcemincampreportarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerGetReportInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerGetReportInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TTowerReportCampSingle FirstCampReportArr = 1;
      case 1: {
        if (tag == 10) {
         parse_FirstCampReportArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_firstcampreportarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FirstCampReportArr;
        if (input->ExpectTag(18)) goto parse_RecentlyCampReportArr;
        break;
      }

      // repeated .pb.TTowerReportCampSingle RecentlyCampReportArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RecentlyCampReportArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recentlycampreportarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RecentlyCampReportArr;
        if (input->ExpectTag(26)) goto parse_FightForceMinCampReportArr;
        break;
      }

      // repeated .pb.TTowerReportCampSingle FightForceMinCampReportArr = 3;
      case 3: {
        if (tag == 26) {
         parse_FightForceMinCampReportArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fightforcemincampreportarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FightForceMinCampReportArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerGetReportInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerGetReportInfoRsp)
  return false;
#undef DO_
}

void TTowerGetReportInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerGetReportInfoRsp)
  // repeated .pb.TTowerReportCampSingle FirstCampReportArr = 1;
  for (int i = 0; i < this->firstcampreportarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->firstcampreportarr(i), output);
  }

  // repeated .pb.TTowerReportCampSingle RecentlyCampReportArr = 2;
  for (int i = 0; i < this->recentlycampreportarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recentlycampreportarr(i), output);
  }

  // repeated .pb.TTowerReportCampSingle FightForceMinCampReportArr = 3;
  for (int i = 0; i < this->fightforcemincampreportarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fightforcemincampreportarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerGetReportInfoRsp)
}

::google::protobuf::uint8* TTowerGetReportInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerGetReportInfoRsp)
  // repeated .pb.TTowerReportCampSingle FirstCampReportArr = 1;
  for (int i = 0; i < this->firstcampreportarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->firstcampreportarr(i), target);
  }

  // repeated .pb.TTowerReportCampSingle RecentlyCampReportArr = 2;
  for (int i = 0; i < this->recentlycampreportarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recentlycampreportarr(i), target);
  }

  // repeated .pb.TTowerReportCampSingle FightForceMinCampReportArr = 3;
  for (int i = 0; i < this->fightforcemincampreportarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fightforcemincampreportarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerGetReportInfoRsp)
  return target;
}

int TTowerGetReportInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TTowerReportCampSingle FirstCampReportArr = 1;
  total_size += 1 * this->firstcampreportarr_size();
  for (int i = 0; i < this->firstcampreportarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->firstcampreportarr(i));
  }

  // repeated .pb.TTowerReportCampSingle RecentlyCampReportArr = 2;
  total_size += 1 * this->recentlycampreportarr_size();
  for (int i = 0; i < this->recentlycampreportarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recentlycampreportarr(i));
  }

  // repeated .pb.TTowerReportCampSingle FightForceMinCampReportArr = 3;
  total_size += 1 * this->fightforcemincampreportarr_size();
  for (int i = 0; i < this->fightforcemincampreportarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fightforcemincampreportarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerGetReportInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerGetReportInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerGetReportInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerGetReportInfoRsp::MergeFrom(const TTowerGetReportInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  firstcampreportarr_.MergeFrom(from.firstcampreportarr_);
  recentlycampreportarr_.MergeFrom(from.recentlycampreportarr_);
  fightforcemincampreportarr_.MergeFrom(from.fightforcemincampreportarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerGetReportInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerGetReportInfoRsp::CopyFrom(const TTowerGetReportInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerGetReportInfoRsp::IsInitialized() const {

  return true;
}

void TTowerGetReportInfoRsp::Swap(TTowerGetReportInfoRsp* other) {
  if (other != this) {
    firstcampreportarr_.Swap(&other->firstcampreportarr_);
    recentlycampreportarr_.Swap(&other->recentlycampreportarr_);
    fightforcemincampreportarr_.Swap(&other->fightforcemincampreportarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerGetReportInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerGetReportInfoRsp_descriptor_;
  metadata.reflection = TTowerGetReportInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerGetHangRewardInfoRsp::kHangInfoFieldNumber;
#endif  // !_MSC_VER

TTowerGetHangRewardInfoRsp::TTowerGetHangRewardInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerGetHangRewardInfoRsp)
}

void TTowerGetHangRewardInfoRsp::InitAsDefaultInstance() {
  hanginfo_ = const_cast< ::pb::TTowerHangRewardInfo*>(&::pb::TTowerHangRewardInfo::default_instance());
}

TTowerGetHangRewardInfoRsp::TTowerGetHangRewardInfoRsp(const TTowerGetHangRewardInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerGetHangRewardInfoRsp)
}

void TTowerGetHangRewardInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  hanginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerGetHangRewardInfoRsp::~TTowerGetHangRewardInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerGetHangRewardInfoRsp)
  SharedDtor();
}

void TTowerGetHangRewardInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete hanginfo_;
  }
}

void TTowerGetHangRewardInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerGetHangRewardInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerGetHangRewardInfoRsp_descriptor_;
}

const TTowerGetHangRewardInfoRsp& TTowerGetHangRewardInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerGetHangRewardInfoRsp* TTowerGetHangRewardInfoRsp::default_instance_ = NULL;

TTowerGetHangRewardInfoRsp* TTowerGetHangRewardInfoRsp::New() const {
  return new TTowerGetHangRewardInfoRsp;
}

void TTowerGetHangRewardInfoRsp::Clear() {
  if (has_hanginfo()) {
    if (hanginfo_ != NULL) hanginfo_->::pb::TTowerHangRewardInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerGetHangRewardInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerGetHangRewardInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TTowerHangRewardInfo HangInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hanginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerGetHangRewardInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerGetHangRewardInfoRsp)
  return false;
#undef DO_
}

void TTowerGetHangRewardInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerGetHangRewardInfoRsp)
  // optional .pb.TTowerHangRewardInfo HangInfo = 1;
  if (has_hanginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hanginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerGetHangRewardInfoRsp)
}

::google::protobuf::uint8* TTowerGetHangRewardInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerGetHangRewardInfoRsp)
  // optional .pb.TTowerHangRewardInfo HangInfo = 1;
  if (has_hanginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hanginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerGetHangRewardInfoRsp)
  return target;
}

int TTowerGetHangRewardInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TTowerHangRewardInfo HangInfo = 1;
    if (has_hanginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hanginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerGetHangRewardInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerGetHangRewardInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerGetHangRewardInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerGetHangRewardInfoRsp::MergeFrom(const TTowerGetHangRewardInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hanginfo()) {
      mutable_hanginfo()->::pb::TTowerHangRewardInfo::MergeFrom(from.hanginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerGetHangRewardInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerGetHangRewardInfoRsp::CopyFrom(const TTowerGetHangRewardInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerGetHangRewardInfoRsp::IsInitialized() const {

  return true;
}

void TTowerGetHangRewardInfoRsp::Swap(TTowerGetHangRewardInfoRsp* other) {
  if (other != this) {
    std::swap(hanginfo_, other->hanginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerGetHangRewardInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerGetHangRewardInfoRsp_descriptor_;
  metadata.reflection = TTowerGetHangRewardInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerReceiveHangRewardRsp::kRewardArrFieldNumber;
const int TTowerReceiveHangRewardRsp::kHangTimeFieldNumber;
const int TTowerReceiveHangRewardRsp::kHangReceiveTimeFieldNumber;
#endif  // !_MSC_VER

TTowerReceiveHangRewardRsp::TTowerReceiveHangRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerReceiveHangRewardRsp)
}

void TTowerReceiveHangRewardRsp::InitAsDefaultInstance() {
}

TTowerReceiveHangRewardRsp::TTowerReceiveHangRewardRsp(const TTowerReceiveHangRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerReceiveHangRewardRsp)
}

void TTowerReceiveHangRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  hangtime_ = GOOGLE_ULONGLONG(0);
  hangreceivetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerReceiveHangRewardRsp::~TTowerReceiveHangRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerReceiveHangRewardRsp)
  SharedDtor();
}

void TTowerReceiveHangRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerReceiveHangRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerReceiveHangRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerReceiveHangRewardRsp_descriptor_;
}

const TTowerReceiveHangRewardRsp& TTowerReceiveHangRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerReceiveHangRewardRsp* TTowerReceiveHangRewardRsp::default_instance_ = NULL;

TTowerReceiveHangRewardRsp* TTowerReceiveHangRewardRsp::New() const {
  return new TTowerReceiveHangRewardRsp;
}

void TTowerReceiveHangRewardRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerReceiveHangRewardRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hangtime_, hangreceivetime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerReceiveHangRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerReceiveHangRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectTag(16)) goto parse_HangTime;
        break;
      }

      // optional uint64 HangTime = 2;
      case 2: {
        if (tag == 16) {
         parse_HangTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hangtime_)));
          set_has_hangtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_HangReceiveTime;
        break;
      }

      // optional uint64 HangReceiveTime = 3;
      case 3: {
        if (tag == 24) {
         parse_HangReceiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hangreceivetime_)));
          set_has_hangreceivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerReceiveHangRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerReceiveHangRewardRsp)
  return false;
#undef DO_
}

void TTowerReceiveHangRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerReceiveHangRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  // optional uint64 HangTime = 2;
  if (has_hangtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hangtime(), output);
  }

  // optional uint64 HangReceiveTime = 3;
  if (has_hangreceivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hangreceivetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerReceiveHangRewardRsp)
}

::google::protobuf::uint8* TTowerReceiveHangRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerReceiveHangRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  // optional uint64 HangTime = 2;
  if (has_hangtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hangtime(), target);
  }

  // optional uint64 HangReceiveTime = 3;
  if (has_hangreceivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hangreceivetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerReceiveHangRewardRsp)
  return target;
}

int TTowerReceiveHangRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 HangTime = 2;
    if (has_hangtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hangtime());
    }

    // optional uint64 HangReceiveTime = 3;
    if (has_hangreceivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hangreceivetime());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerReceiveHangRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerReceiveHangRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerReceiveHangRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerReceiveHangRewardRsp::MergeFrom(const TTowerReceiveHangRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_hangtime()) {
      set_hangtime(from.hangtime());
    }
    if (from.has_hangreceivetime()) {
      set_hangreceivetime(from.hangreceivetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerReceiveHangRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerReceiveHangRewardRsp::CopyFrom(const TTowerReceiveHangRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerReceiveHangRewardRsp::IsInitialized() const {

  return true;
}

void TTowerReceiveHangRewardRsp::Swap(TTowerReceiveHangRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(hangtime_, other->hangtime_);
    std::swap(hangreceivetime_, other->hangreceivetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerReceiveHangRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerReceiveHangRewardRsp_descriptor_;
  metadata.reflection = TTowerReceiveHangRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerBuyHangRewardRsp::kRewardArrFieldNumber;
const int TTowerBuyHangRewardRsp::kBoughtHangRewardNumFieldNumber;
#endif  // !_MSC_VER

TTowerBuyHangRewardRsp::TTowerBuyHangRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerBuyHangRewardRsp)
}

void TTowerBuyHangRewardRsp::InitAsDefaultInstance() {
}

TTowerBuyHangRewardRsp::TTowerBuyHangRewardRsp(const TTowerBuyHangRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerBuyHangRewardRsp)
}

void TTowerBuyHangRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  boughthangrewardnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerBuyHangRewardRsp::~TTowerBuyHangRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerBuyHangRewardRsp)
  SharedDtor();
}

void TTowerBuyHangRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerBuyHangRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerBuyHangRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerBuyHangRewardRsp_descriptor_;
}

const TTowerBuyHangRewardRsp& TTowerBuyHangRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTower_2eproto();
  return *default_instance_;
}

TTowerBuyHangRewardRsp* TTowerBuyHangRewardRsp::default_instance_ = NULL;

TTowerBuyHangRewardRsp* TTowerBuyHangRewardRsp::New() const {
  return new TTowerBuyHangRewardRsp;
}

void TTowerBuyHangRewardRsp::Clear() {
  boughthangrewardnum_ = 0u;
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerBuyHangRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerBuyHangRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectTag(16)) goto parse_BoughtHangRewardNum;
        break;
      }

      // optional uint32 BoughtHangRewardNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BoughtHangRewardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boughthangrewardnum_)));
          set_has_boughthangrewardnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerBuyHangRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerBuyHangRewardRsp)
  return false;
#undef DO_
}

void TTowerBuyHangRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerBuyHangRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  // optional uint32 BoughtHangRewardNum = 2;
  if (has_boughthangrewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->boughthangrewardnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerBuyHangRewardRsp)
}

::google::protobuf::uint8* TTowerBuyHangRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerBuyHangRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  // optional uint32 BoughtHangRewardNum = 2;
  if (has_boughthangrewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->boughthangrewardnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerBuyHangRewardRsp)
  return target;
}

int TTowerBuyHangRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 BoughtHangRewardNum = 2;
    if (has_boughthangrewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boughthangrewardnum());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerBuyHangRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerBuyHangRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerBuyHangRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerBuyHangRewardRsp::MergeFrom(const TTowerBuyHangRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_boughthangrewardnum()) {
      set_boughthangrewardnum(from.boughthangrewardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerBuyHangRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerBuyHangRewardRsp::CopyFrom(const TTowerBuyHangRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerBuyHangRewardRsp::IsInitialized() const {

  return true;
}

void TTowerBuyHangRewardRsp::Swap(TTowerBuyHangRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(boughthangrewardnum_, other->boughthangrewardnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerBuyHangRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerBuyHangRewardRsp_descriptor_;
  metadata.reflection = TTowerBuyHangRewardRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
