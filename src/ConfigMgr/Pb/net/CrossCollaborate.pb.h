// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossCollaborate.proto

#ifndef PROTOBUF_net_2fCrossCollaborate_2eproto__INCLUDED
#define PROTOBUF_net_2fCrossCollaborate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Battle.pb.h"
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

class TCrossCollaborateStageInfo;
class TCrossCollaboratePosInfo;
class TCrossCollaborateFormationInfo;
class TCrossCollaborateEnemyFormation;
class TCrossCollaborateInviteUserInfo;
class TCrossCollaborateUserInfo;
class TCrossCollaborateTeamInfo;
class TCrossCollaborateUnitViewInfo;
class TCrossCollaborateArmyViewInfo;
class TCrossCollaborateRecordInfo;
class TCrossCollaborateBattleRecord;
class TCrossCollaborateSimpleRecordInfo;
class TCrossCollaborateSimpleBattleRecord;
class TCrossCollaborateGetStageInfoRsp;
class TAdventureGetTeamListReq;
class TCrossCollaborateGetTeamListRsp;
class TCrossCollaborateCreateTeamRsp;
class TCrossCollaborateSetTeamReq;
class TCrossCollaborateJoinTeamReq;
class TCrossCollaborateJoinTeamRsp;
class TCrossCollaborateQuitTeamReq;
class TCrossCollaborateGetInviteListReq;
class TCrossCollaborateGetInviteListRsp;
class TCrossCollaborateInviteMemberReq;
class TCrossCollaborateInviteMemberRsp;
class TCrossCollaborateKickMemberReq;
class TCrossCollaborateGetMyFormationRsp;
class TCrossCollaborateSetFormationReq;
class TCrossCollaborateGetEnemyFormationReq;
class TCrossCollaborateGetEnemyFormationRsp;
class TCrossCollaborateSwapFightOrderReq;
class TCrossCollaborateGetBattleRecordReq;
class TCrossCollaborateGetBattleRecordRsp;
class TCrossCollaborateGetSimpleBattleRecordReq;
class TCrossCollaborateGetSimpleBattleRecordRsp;
class TCrossCollaborateGetRankListRsp;
class TCrossCollaborateReceiveBattleRewardReq;
class TCrossCollaborateReceiveRankRewardReq;
class TCrossCollaborateTeamNotify;
class TCrossCollaborateUserRankRewardNotify;
class TCrossCollaborateBattleReportArrReq;
class TCrossCollaborateBattleReportArrRsp;
class TCrossCollaborateGetServerGroupInfoRsp;

enum ECrossCollaborateStage {
  ECCO_STAGE_IDLE = 0,
  ECCO_STAGE_GROUP = 1,
  ECCO_STAGE_MERGE = 2,
  ECCO_STAGE_MATCH = 3,
  ECCO_STAGE_BATTLE = 4,
  ECCO_STAGE_REWARD = 5,
  ECCO_STAGE_END = 6
};
bool ECrossCollaborateStage_IsValid(int value);
const ECrossCollaborateStage ECrossCollaborateStage_MIN = ECCO_STAGE_IDLE;
const ECrossCollaborateStage ECrossCollaborateStage_MAX = ECCO_STAGE_END;
const int ECrossCollaborateStage_ARRAYSIZE = ECrossCollaborateStage_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECrossCollaborateStage_descriptor();
inline const ::std::string& ECrossCollaborateStage_Name(ECrossCollaborateStage value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECrossCollaborateStage_descriptor(), value);
}
inline bool ECrossCollaborateStage_Parse(
    const ::std::string& name, ECrossCollaborateStage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECrossCollaborateStage>(
    ECrossCollaborateStage_descriptor(), name, value);
}
enum ECrossCollaborateStatus {
  ECCO_STATUS_PRIVATE = 0,
  ECCO_STATUS_PUBLIC = 1
};
bool ECrossCollaborateStatus_IsValid(int value);
const ECrossCollaborateStatus ECrossCollaborateStatus_MIN = ECCO_STATUS_PRIVATE;
const ECrossCollaborateStatus ECrossCollaborateStatus_MAX = ECCO_STATUS_PUBLIC;
const int ECrossCollaborateStatus_ARRAYSIZE = ECrossCollaborateStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECrossCollaborateStatus_descriptor();
inline const ::std::string& ECrossCollaborateStatus_Name(ECrossCollaborateStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECrossCollaborateStatus_descriptor(), value);
}
inline bool ECrossCollaborateStatus_Parse(
    const ::std::string& name, ECrossCollaborateStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECrossCollaborateStatus>(
    ECrossCollaborateStatus_descriptor(), name, value);
}
enum ECrossCollaborateErrorCode {
  ECCO_ERROR_CODE_OK = 0,
  ECCO_ERROR_CODE_FULL = 1,
  ECCO_ERROR_CODE_NOTEXIST = 2,
  ECCO_ERROR_CODE_NEEDFIGHTFORCE = 3,
  ECCO_ERROR_CODE_NOTINSAMEGROUP = 4
};
bool ECrossCollaborateErrorCode_IsValid(int value);
const ECrossCollaborateErrorCode ECrossCollaborateErrorCode_MIN = ECCO_ERROR_CODE_OK;
const ECrossCollaborateErrorCode ECrossCollaborateErrorCode_MAX = ECCO_ERROR_CODE_NOTINSAMEGROUP;
const int ECrossCollaborateErrorCode_ARRAYSIZE = ECrossCollaborateErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECrossCollaborateErrorCode_descriptor();
inline const ::std::string& ECrossCollaborateErrorCode_Name(ECrossCollaborateErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECrossCollaborateErrorCode_descriptor(), value);
}
inline bool ECrossCollaborateErrorCode_Parse(
    const ::std::string& name, ECrossCollaborateErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECrossCollaborateErrorCode>(
    ECrossCollaborateErrorCode_descriptor(), name, value);
}
enum ECrossCollaborateInviteType {
  ECCO_INVIITE_TYPE_DEFAULT = 0,
  ECCO_INVIITE_TYPE_GUILD = 1,
  ECCO_INVIITE_TYPE_FRIEND = 2
};
bool ECrossCollaborateInviteType_IsValid(int value);
const ECrossCollaborateInviteType ECrossCollaborateInviteType_MIN = ECCO_INVIITE_TYPE_DEFAULT;
const ECrossCollaborateInviteType ECrossCollaborateInviteType_MAX = ECCO_INVIITE_TYPE_FRIEND;
const int ECrossCollaborateInviteType_ARRAYSIZE = ECrossCollaborateInviteType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECrossCollaborateInviteType_descriptor();
inline const ::std::string& ECrossCollaborateInviteType_Name(ECrossCollaborateInviteType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECrossCollaborateInviteType_descriptor(), value);
}
inline bool ECrossCollaborateInviteType_Parse(
    const ::std::string& name, ECrossCollaborateInviteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECrossCollaborateInviteType>(
    ECrossCollaborateInviteType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TCrossCollaborateStageInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateStageInfo : public ::google::protobuf::Message {
 public:
  TCrossCollaborateStageInfo();
  virtual ~TCrossCollaborateStageInfo();

  TCrossCollaborateStageInfo(const TCrossCollaborateStageInfo& from);

  inline TCrossCollaborateStageInfo& operator=(const TCrossCollaborateStageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateStageInfo& default_instance();

  void Swap(TCrossCollaborateStageInfo* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateStageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateStageInfo& from);
  void MergeFrom(const TCrossCollaborateStageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ECrossCollaborateStage Stage = 1;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateStageInfo</name>
  	<Function>
  		<name>stage</name>
  		<replaceName>Stage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stage</name>
  		<replaceName>Stage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stage</name>
  		<replaceName>Stage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ECrossCollaborateStage stage() const;
  inline void set_stage(::pb::ECrossCollaborateStage value);

  // optional uint64 BeginTime = 2;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateStageInfo</name>
  	<Function>
  		<name>begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 begintime() const;
  inline void set_begintime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateStageInfo)
 private:
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_begintime();
  inline void clear_has_begintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 begintime_;
  int stage_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateStageInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaboratePosInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaboratePosInfo : public ::google::protobuf::Message {
 public:
  TCrossCollaboratePosInfo();
  virtual ~TCrossCollaboratePosInfo();

  TCrossCollaboratePosInfo(const TCrossCollaboratePosInfo& from);

  inline TCrossCollaboratePosInfo& operator=(const TCrossCollaboratePosInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaboratePosInfo& default_instance();

  void Swap(TCrossCollaboratePosInfo* other);

  // implements Message ----------------------------------------------

  TCrossCollaboratePosInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaboratePosInfo& from);
  void MergeFrom(const TCrossCollaboratePosInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaboratePosInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 Hid = 2;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaboratePosInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaboratePosInfo)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_hid();
  inline void clear_has_hid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 hid_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaboratePosInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateFormationInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateFormationInfo : public ::google::protobuf::Message {
 public:
  TCrossCollaborateFormationInfo();
  virtual ~TCrossCollaborateFormationInfo();

  TCrossCollaborateFormationInfo(const TCrossCollaborateFormationInfo& from);

  inline TCrossCollaborateFormationInfo& operator=(const TCrossCollaborateFormationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateFormationInfo& default_instance();

  void Swap(TCrossCollaborateFormationInfo* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateFormationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateFormationInfo& from);
  void MergeFrom(const TCrossCollaborateFormationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FormationId = 1;
  inline bool has_formationid() const;
  inline void clear_formationid();
  static const int kFormationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateFormationInfo</name>
  	<Function>
  		<name>formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 formationid() const;
  inline void set_formationid(::google::protobuf::uint32 value);

  // repeated .pb.TCrossCollaboratePosInfo PosArr = 2;
  inline int posarr_size() const;
  inline void clear_posarr();
  static const int kPosArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateFormationInfo</name>
  	<Function>
  		<name>posarr</name>
  		<replaceName>PosArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_posarr</name>
  		<replaceName>PosArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_posarr</name>
  		<replaceName>PosArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posarr</name>
  		<replaceName>PosArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>posarr_size</name>
  		<replaceName>PosArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaboratePosInfo& posarr(int index) const;
  inline ::pb::TCrossCollaboratePosInfo* mutable_posarr(int index);
  inline ::pb::TCrossCollaboratePosInfo* add_posarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaboratePosInfo >&
      posarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaboratePosInfo >*
      mutable_posarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateFormationInfo)
 private:
  inline void set_has_formationid();
  inline void clear_has_formationid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaboratePosInfo > posarr_;
  ::google::protobuf::uint32 formationid_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateFormationInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateEnemyFormation</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateEnemyFormation : public ::google::protobuf::Message {
 public:
  TCrossCollaborateEnemyFormation();
  virtual ~TCrossCollaborateEnemyFormation();

  TCrossCollaborateEnemyFormation(const TCrossCollaborateEnemyFormation& from);

  inline TCrossCollaborateEnemyFormation& operator=(const TCrossCollaborateEnemyFormation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateEnemyFormation& default_instance();

  void Swap(TCrossCollaborateEnemyFormation* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateEnemyFormation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateEnemyFormation& from);
  void MergeFrom(const TCrossCollaborateEnemyFormation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FormationId = 1;
  inline bool has_formationid() const;
  inline void clear_formationid();
  static const int kFormationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateEnemyFormation</name>
  	<Function>
  		<name>formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 formationid() const;
  inline void set_formationid(::google::protobuf::uint32 value);

  // repeated .pb.TUnitInfo UnitArr = 2;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateEnemyFormation</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitInfo& unitarr(int index) const;
  inline ::pb::TUnitInfo* mutable_unitarr(int index);
  inline ::pb::TUnitInfo* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >*
      mutable_unitarr();

  // optional uint64 FightForce = 3;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateEnemyFormation</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateEnemyFormation)
 private:
  inline void set_has_formationid();
  inline void clear_has_formationid();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo > unitarr_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 formationid_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateEnemyFormation* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateInviteUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateInviteUserInfo : public ::google::protobuf::Message {
 public:
  TCrossCollaborateInviteUserInfo();
  virtual ~TCrossCollaborateInviteUserInfo();

  TCrossCollaborateInviteUserInfo(const TCrossCollaborateInviteUserInfo& from);

  inline TCrossCollaborateInviteUserInfo& operator=(const TCrossCollaborateInviteUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateInviteUserInfo& default_instance();

  void Swap(TCrossCollaborateInviteUserInfo* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateInviteUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateInviteUserInfo& from);
  void MergeFrom(const TCrossCollaborateInviteUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfoWithStatus UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateInviteUserInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfoWithStatus& userinfo() const;
  inline ::pb::TUserSimpleInfoWithStatus* mutable_userinfo();
  inline ::pb::TUserSimpleInfoWithStatus* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfoWithStatus* userinfo);

  // optional uint64 TeamId = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateInviteUserInfo</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateInviteUserInfo)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfoWithStatus* userinfo_;
  ::google::protobuf::uint64 teamid_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateInviteUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateUserInfo : public ::google::protobuf::Message {
 public:
  TCrossCollaborateUserInfo();
  virtual ~TCrossCollaborateUserInfo();

  TCrossCollaborateUserInfo(const TCrossCollaborateUserInfo& from);

  inline TCrossCollaborateUserInfo& operator=(const TCrossCollaborateUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateUserInfo& default_instance();

  void Swap(TCrossCollaborateUserInfo* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateUserInfo& from);
  void MergeFrom(const TCrossCollaborateUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateUserInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 Order = 2;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateUserInfo</name>
  	<Function>
  		<name>order</name>
  		<replaceName>Order</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_order</name>
  		<replaceName>Order</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_order</name>
  		<replaceName>Order</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 order() const;
  inline void set_order(::google::protobuf::uint32 value);

  // optional uint32 Score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateUserInfo</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint64 TotalFightForce = 4;
  inline bool has_totalfightforce() const;
  inline void clear_totalfightforce();
  static const int kTotalFightForceFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateUserInfo</name>
  	<Function>
  		<name>totalfightforce</name>
  		<replaceName>TotalFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalfightforce</name>
  		<replaceName>TotalFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalfightforce</name>
  		<replaceName>TotalFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totalfightforce() const;
  inline void set_totalfightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateUserInfo)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_totalfightforce();
  inline void clear_has_totalfightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint32 order_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint64 totalfightforce_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateTeamInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateTeamInfo : public ::google::protobuf::Message {
 public:
  TCrossCollaborateTeamInfo();
  virtual ~TCrossCollaborateTeamInfo();

  TCrossCollaborateTeamInfo(const TCrossCollaborateTeamInfo& from);

  inline TCrossCollaborateTeamInfo& operator=(const TCrossCollaborateTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateTeamInfo& default_instance();

  void Swap(TCrossCollaborateTeamInfo* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateTeamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateTeamInfo& from);
  void MergeFrom(const TCrossCollaborateTeamInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateTeamInfo</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint64 LeaderUid = 2;
  inline bool has_leaderuid() const;
  inline void clear_leaderuid();
  static const int kLeaderUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateTeamInfo</name>
  	<Function>
  		<name>leaderuid</name>
  		<replaceName>LeaderUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leaderuid</name>
  		<replaceName>LeaderUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leaderuid</name>
  		<replaceName>LeaderUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 leaderuid() const;
  inline void set_leaderuid(::google::protobuf::uint64 value);

  // optional uint64 NeedFightForce = 3;
  inline bool has_needfightforce() const;
  inline void clear_needfightforce();
  static const int kNeedFightForceFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateTeamInfo</name>
  	<Function>
  		<name>needfightforce</name>
  		<replaceName>NeedFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_needfightforce</name>
  		<replaceName>NeedFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_needfightforce</name>
  		<replaceName>NeedFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 needfightforce() const;
  inline void set_needfightforce(::google::protobuf::uint64 value);

  // optional .pb.ECrossCollaborateStatus TeamStatus = 4;
  inline bool has_teamstatus() const;
  inline void clear_teamstatus();
  static const int kTeamStatusFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateTeamInfo</name>
  	<Function>
  		<name>teamstatus</name>
  		<replaceName>TeamStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamstatus</name>
  		<replaceName>TeamStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamstatus</name>
  		<replaceName>TeamStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ECrossCollaborateStatus teamstatus() const;
  inline void set_teamstatus(::pb::ECrossCollaborateStatus value);

  // repeated .pb.TCrossCollaborateUserInfo UserArr = 5;
  inline int userarr_size() const;
  inline void clear_userarr();
  static const int kUserArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateTeamInfo</name>
  	<Function>
  		<name>userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userarr_size</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateUserInfo& userarr(int index) const;
  inline ::pb::TCrossCollaborateUserInfo* mutable_userarr(int index);
  inline ::pb::TCrossCollaborateUserInfo* add_userarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateUserInfo >&
      userarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateUserInfo >*
      mutable_userarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateTeamInfo)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_leaderuid();
  inline void clear_has_leaderuid();
  inline void set_has_needfightforce();
  inline void clear_has_needfightforce();
  inline void set_has_teamstatus();
  inline void clear_has_teamstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 leaderuid_;
  ::google::protobuf::uint64 needfightforce_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateUserInfo > userarr_;
  int teamstatus_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateTeamInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateUnitViewInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateUnitViewInfo : public ::google::protobuf::Message {
 public:
  TCrossCollaborateUnitViewInfo();
  virtual ~TCrossCollaborateUnitViewInfo();

  TCrossCollaborateUnitViewInfo(const TCrossCollaborateUnitViewInfo& from);

  inline TCrossCollaborateUnitViewInfo& operator=(const TCrossCollaborateUnitViewInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateUnitViewInfo& default_instance();

  void Swap(TCrossCollaborateUnitViewInfo* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateUnitViewInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateUnitViewInfo& from);
  void MergeFrom(const TCrossCollaborateUnitViewInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateUnitViewInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // required uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateUnitViewInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // required uint32 Level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateUnitViewInfo</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 Star = 4;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateUnitViewInfo</name>
  	<Function>
  		<name>star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint64 CurHp = 5;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHpFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateUnitViewInfo</name>
  	<Function>
  		<name>curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 curhp() const;
  inline void set_curhp(::google::protobuf::uint64 value);

  // optional uint64 MaxHp = 6;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateUnitViewInfo</name>
  	<Function>
  		<name>maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint64 value);

  // optional uint64 DamageOut = 7;
  inline bool has_damageout() const;
  inline void clear_damageout();
  static const int kDamageOutFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateUnitViewInfo</name>
  	<Function>
  		<name>damageout</name>
  		<replaceName>DamageOut</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damageout</name>
  		<replaceName>DamageOut</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damageout</name>
  		<replaceName>DamageOut</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 damageout() const;
  inline void set_damageout(::google::protobuf::uint64 value);

  // optional uint64 DamageIn = 8;
  inline bool has_damagein() const;
  inline void clear_damagein();
  static const int kDamageInFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateUnitViewInfo</name>
  	<Function>
  		<name>damagein</name>
  		<replaceName>DamageIn</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damagein</name>
  		<replaceName>DamageIn</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damagein</name>
  		<replaceName>DamageIn</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 damagein() const;
  inline void set_damagein(::google::protobuf::uint64 value);

  // optional uint32 Htid = 9;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateUnitViewInfo</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional uint64 HealOut = 10;
  inline bool has_healout() const;
  inline void clear_healout();
  static const int kHealOutFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateUnitViewInfo</name>
  	<Function>
  		<name>healout</name>
  		<replaceName>HealOut</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_healout</name>
  		<replaceName>HealOut</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_healout</name>
  		<replaceName>HealOut</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 healout() const;
  inline void set_healout(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateUnitViewInfo)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_damageout();
  inline void clear_has_damageout();
  inline void set_has_damagein();
  inline void clear_has_damagein();
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_healout();
  inline void clear_has_healout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint64 curhp_;
  ::google::protobuf::uint64 maxhp_;
  ::google::protobuf::uint64 damageout_;
  ::google::protobuf::uint64 damagein_;
  ::google::protobuf::uint64 healout_;
  ::google::protobuf::uint32 htid_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateUnitViewInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateArmyViewInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateArmyViewInfo : public ::google::protobuf::Message {
 public:
  TCrossCollaborateArmyViewInfo();
  virtual ~TCrossCollaborateArmyViewInfo();

  TCrossCollaborateArmyViewInfo(const TCrossCollaborateArmyViewInfo& from);

  inline TCrossCollaborateArmyViewInfo& operator=(const TCrossCollaborateArmyViewInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateArmyViewInfo& default_instance();

  void Swap(TCrossCollaborateArmyViewInfo* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateArmyViewInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateArmyViewInfo& from);
  void MergeFrom(const TCrossCollaborateArmyViewInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossCollaborateUnitViewInfo UnitArr = 1;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateArmyViewInfo</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateUnitViewInfo& unitarr(int index) const;
  inline ::pb::TCrossCollaborateUnitViewInfo* mutable_unitarr(int index);
  inline ::pb::TCrossCollaborateUnitViewInfo* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateUnitViewInfo >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateUnitViewInfo >*
      mutable_unitarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateArmyViewInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateUnitViewInfo > unitarr_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateArmyViewInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateRecordInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateRecordInfo : public ::google::protobuf::Message {
 public:
  TCrossCollaborateRecordInfo();
  virtual ~TCrossCollaborateRecordInfo();

  TCrossCollaborateRecordInfo(const TCrossCollaborateRecordInfo& from);

  inline TCrossCollaborateRecordInfo& operator=(const TCrossCollaborateRecordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateRecordInfo& default_instance();

  void Swap(TCrossCollaborateRecordInfo* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateRecordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateRecordInfo& from);
  void MergeFrom(const TCrossCollaborateRecordInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FormationId = 1;
  inline bool has_formationid() const;
  inline void clear_formationid();
  static const int kFormationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateRecordInfo</name>
  	<Function>
  		<name>formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 formationid() const;
  inline void set_formationid(::google::protobuf::uint32 value);

  // optional uint64 RecordId = 2;
  inline bool has_recordid() const;
  inline void clear_recordid();
  static const int kRecordIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateRecordInfo</name>
  	<Function>
  		<name>recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordid() const;
  inline void set_recordid(::google::protobuf::uint64 value);

  // optional bool IsWin = 3;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateRecordInfo</name>
  	<Function>
  		<name>iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool iswin() const;
  inline void set_iswin(bool value);

  // repeated .pb.TCrossCollaborateArmyViewInfo AttackArmyArr = 4;
  inline int attackarmyarr_size() const;
  inline void clear_attackarmyarr();
  static const int kAttackArmyArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateRecordInfo</name>
  	<Function>
  		<name>attackarmyarr</name>
  		<replaceName>AttackArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_attackarmyarr</name>
  		<replaceName>AttackArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_attackarmyarr</name>
  		<replaceName>AttackArmyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackarmyarr</name>
  		<replaceName>AttackArmyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>attackarmyarr_size</name>
  		<replaceName>AttackArmyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateArmyViewInfo& attackarmyarr(int index) const;
  inline ::pb::TCrossCollaborateArmyViewInfo* mutable_attackarmyarr(int index);
  inline ::pb::TCrossCollaborateArmyViewInfo* add_attackarmyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateArmyViewInfo >&
      attackarmyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateArmyViewInfo >*
      mutable_attackarmyarr();

  // repeated .pb.TCrossCollaborateArmyViewInfo DefendArmyArr = 5;
  inline int defendarmyarr_size() const;
  inline void clear_defendarmyarr();
  static const int kDefendArmyArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateRecordInfo</name>
  	<Function>
  		<name>defendarmyarr</name>
  		<replaceName>DefendArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_defendarmyarr</name>
  		<replaceName>DefendArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_defendarmyarr</name>
  		<replaceName>DefendArmyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defendarmyarr</name>
  		<replaceName>DefendArmyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>defendarmyarr_size</name>
  		<replaceName>DefendArmyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateArmyViewInfo& defendarmyarr(int index) const;
  inline ::pb::TCrossCollaborateArmyViewInfo* mutable_defendarmyarr(int index);
  inline ::pb::TCrossCollaborateArmyViewInfo* add_defendarmyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateArmyViewInfo >&
      defendarmyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateArmyViewInfo >*
      mutable_defendarmyarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateRecordInfo)
 private:
  inline void set_has_formationid();
  inline void clear_has_formationid();
  inline void set_has_recordid();
  inline void clear_has_recordid();
  inline void set_has_iswin();
  inline void clear_has_iswin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 recordid_;
  ::google::protobuf::uint32 formationid_;
  bool iswin_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateArmyViewInfo > attackarmyarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateArmyViewInfo > defendarmyarr_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateRecordInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateBattleRecord</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateBattleRecord : public ::google::protobuf::Message {
 public:
  TCrossCollaborateBattleRecord();
  virtual ~TCrossCollaborateBattleRecord();

  TCrossCollaborateBattleRecord(const TCrossCollaborateBattleRecord& from);

  inline TCrossCollaborateBattleRecord& operator=(const TCrossCollaborateBattleRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateBattleRecord& default_instance();

  void Swap(TCrossCollaborateBattleRecord* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateBattleRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateBattleRecord& from);
  void MergeFrom(const TCrossCollaborateBattleRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo AttackUserInfo = 1;
  inline bool has_attackuserinfo() const;
  inline void clear_attackuserinfo();
  static const int kAttackUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateBattleRecord</name>
  	<Function>
  		<name>attackuserinfo</name>
  		<replaceName>AttackUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attackuserinfo</name>
  		<replaceName>AttackUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_attackuserinfo</name>
  		<replaceName>AttackUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackuserinfo</name>
  		<replaceName>AttackUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& attackuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_attackuserinfo();
  inline ::pb::TUserSimpleInfo* release_attackuserinfo();
  inline void set_allocated_attackuserinfo(::pb::TUserSimpleInfo* attackuserinfo);

  // optional .pb.TUserSimpleInfo DefendUserInfo = 2;
  inline bool has_defenduserinfo() const;
  inline void clear_defenduserinfo();
  static const int kDefendUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateBattleRecord</name>
  	<Function>
  		<name>defenduserinfo</name>
  		<replaceName>DefendUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defenduserinfo</name>
  		<replaceName>DefendUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_defenduserinfo</name>
  		<replaceName>DefendUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defenduserinfo</name>
  		<replaceName>DefendUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& defenduserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_defenduserinfo();
  inline ::pb::TUserSimpleInfo* release_defenduserinfo();
  inline void set_allocated_defenduserinfo(::pb::TUserSimpleInfo* defenduserinfo);

  // optional uint32 AttackContinueWin = 3;
  inline bool has_attackcontinuewin() const;
  inline void clear_attackcontinuewin();
  static const int kAttackContinueWinFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateBattleRecord</name>
  	<Function>
  		<name>attackcontinuewin</name>
  		<replaceName>AttackContinueWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attackcontinuewin</name>
  		<replaceName>AttackContinueWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackcontinuewin</name>
  		<replaceName>AttackContinueWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attackcontinuewin() const;
  inline void set_attackcontinuewin(::google::protobuf::uint32 value);

  // optional uint32 AttackScoreBefore = 4;
  inline bool has_attackscorebefore() const;
  inline void clear_attackscorebefore();
  static const int kAttackScoreBeforeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateBattleRecord</name>
  	<Function>
  		<name>attackscorebefore</name>
  		<replaceName>AttackScoreBefore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attackscorebefore</name>
  		<replaceName>AttackScoreBefore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackscorebefore</name>
  		<replaceName>AttackScoreBefore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attackscorebefore() const;
  inline void set_attackscorebefore(::google::protobuf::uint32 value);

  // optional uint32 AttackScoreAfter = 5;
  inline bool has_attackscoreafter() const;
  inline void clear_attackscoreafter();
  static const int kAttackScoreAfterFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateBattleRecord</name>
  	<Function>
  		<name>attackscoreafter</name>
  		<replaceName>AttackScoreAfter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attackscoreafter</name>
  		<replaceName>AttackScoreAfter</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackscoreafter</name>
  		<replaceName>AttackScoreAfter</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attackscoreafter() const;
  inline void set_attackscoreafter(::google::protobuf::uint32 value);

  // optional uint32 DefendScoreBefore = 6;
  inline bool has_defendscorebefore() const;
  inline void clear_defendscorebefore();
  static const int kDefendScoreBeforeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateBattleRecord</name>
  	<Function>
  		<name>defendscorebefore</name>
  		<replaceName>DefendScoreBefore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defendscorebefore</name>
  		<replaceName>DefendScoreBefore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defendscorebefore</name>
  		<replaceName>DefendScoreBefore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 defendscorebefore() const;
  inline void set_defendscorebefore(::google::protobuf::uint32 value);

  // optional uint32 DefendScoreAfter = 7;
  inline bool has_defendscoreafter() const;
  inline void clear_defendscoreafter();
  static const int kDefendScoreAfterFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateBattleRecord</name>
  	<Function>
  		<name>defendscoreafter</name>
  		<replaceName>DefendScoreAfter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defendscoreafter</name>
  		<replaceName>DefendScoreAfter</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defendscoreafter</name>
  		<replaceName>DefendScoreAfter</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 defendscoreafter() const;
  inline void set_defendscoreafter(::google::protobuf::uint32 value);

  // optional uint64 RecordTime = 8;
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordTimeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateBattleRecord</name>
  	<Function>
  		<name>recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordtime() const;
  inline void set_recordtime(::google::protobuf::uint64 value);

  // repeated .pb.TCrossCollaborateRecordInfo RecordArr = 9;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateBattleRecord</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateRecordInfo& recordarr(int index) const;
  inline ::pb::TCrossCollaborateRecordInfo* mutable_recordarr(int index);
  inline ::pb::TCrossCollaborateRecordInfo* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateRecordInfo >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateRecordInfo >*
      mutable_recordarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateBattleRecord)
 private:
  inline void set_has_attackuserinfo();
  inline void clear_has_attackuserinfo();
  inline void set_has_defenduserinfo();
  inline void clear_has_defenduserinfo();
  inline void set_has_attackcontinuewin();
  inline void clear_has_attackcontinuewin();
  inline void set_has_attackscorebefore();
  inline void clear_has_attackscorebefore();
  inline void set_has_attackscoreafter();
  inline void clear_has_attackscoreafter();
  inline void set_has_defendscorebefore();
  inline void clear_has_defendscorebefore();
  inline void set_has_defendscoreafter();
  inline void clear_has_defendscoreafter();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* attackuserinfo_;
  ::pb::TUserSimpleInfo* defenduserinfo_;
  ::google::protobuf::uint32 attackcontinuewin_;
  ::google::protobuf::uint32 attackscorebefore_;
  ::google::protobuf::uint32 attackscoreafter_;
  ::google::protobuf::uint32 defendscorebefore_;
  ::google::protobuf::uint64 recordtime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateRecordInfo > recordarr_;
  ::google::protobuf::uint32 defendscoreafter_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateBattleRecord* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateSimpleRecordInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateSimpleRecordInfo : public ::google::protobuf::Message {
 public:
  TCrossCollaborateSimpleRecordInfo();
  virtual ~TCrossCollaborateSimpleRecordInfo();

  TCrossCollaborateSimpleRecordInfo(const TCrossCollaborateSimpleRecordInfo& from);

  inline TCrossCollaborateSimpleRecordInfo& operator=(const TCrossCollaborateSimpleRecordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateSimpleRecordInfo& default_instance();

  void Swap(TCrossCollaborateSimpleRecordInfo* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateSimpleRecordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateSimpleRecordInfo& from);
  void MergeFrom(const TCrossCollaborateSimpleRecordInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateSimpleRecordInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 WinNum = 2;
  inline bool has_winnum() const;
  inline void clear_winnum();
  static const int kWinNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateSimpleRecordInfo</name>
  	<Function>
  		<name>winnum</name>
  		<replaceName>WinNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_winnum</name>
  		<replaceName>WinNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_winnum</name>
  		<replaceName>WinNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 winnum() const;
  inline void set_winnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateSimpleRecordInfo)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_winnum();
  inline void clear_has_winnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint32 winnum_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateSimpleRecordInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateSimpleBattleRecord</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateSimpleBattleRecord : public ::google::protobuf::Message {
 public:
  TCrossCollaborateSimpleBattleRecord();
  virtual ~TCrossCollaborateSimpleBattleRecord();

  TCrossCollaborateSimpleBattleRecord(const TCrossCollaborateSimpleBattleRecord& from);

  inline TCrossCollaborateSimpleBattleRecord& operator=(const TCrossCollaborateSimpleBattleRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateSimpleBattleRecord& default_instance();

  void Swap(TCrossCollaborateSimpleBattleRecord* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateSimpleBattleRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateSimpleBattleRecord& from);
  void MergeFrom(const TCrossCollaborateSimpleBattleRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossCollaborateSimpleRecordInfo AttackUserInfoArr = 1;
  inline int attackuserinfoarr_size() const;
  inline void clear_attackuserinfoarr();
  static const int kAttackUserInfoArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateSimpleBattleRecord</name>
  	<Function>
  		<name>attackuserinfoarr</name>
  		<replaceName>AttackUserInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_attackuserinfoarr</name>
  		<replaceName>AttackUserInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_attackuserinfoarr</name>
  		<replaceName>AttackUserInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackuserinfoarr</name>
  		<replaceName>AttackUserInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>attackuserinfoarr_size</name>
  		<replaceName>AttackUserInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateSimpleRecordInfo& attackuserinfoarr(int index) const;
  inline ::pb::TCrossCollaborateSimpleRecordInfo* mutable_attackuserinfoarr(int index);
  inline ::pb::TCrossCollaborateSimpleRecordInfo* add_attackuserinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateSimpleRecordInfo >&
      attackuserinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateSimpleRecordInfo >*
      mutable_attackuserinfoarr();

  // repeated .pb.TCrossCollaborateSimpleRecordInfo DefendUserInfoArr = 2;
  inline int defenduserinfoarr_size() const;
  inline void clear_defenduserinfoarr();
  static const int kDefendUserInfoArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateSimpleBattleRecord</name>
  	<Function>
  		<name>defenduserinfoarr</name>
  		<replaceName>DefendUserInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_defenduserinfoarr</name>
  		<replaceName>DefendUserInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_defenduserinfoarr</name>
  		<replaceName>DefendUserInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defenduserinfoarr</name>
  		<replaceName>DefendUserInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>defenduserinfoarr_size</name>
  		<replaceName>DefendUserInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateSimpleRecordInfo& defenduserinfoarr(int index) const;
  inline ::pb::TCrossCollaborateSimpleRecordInfo* mutable_defenduserinfoarr(int index);
  inline ::pb::TCrossCollaborateSimpleRecordInfo* add_defenduserinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateSimpleRecordInfo >&
      defenduserinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateSimpleRecordInfo >*
      mutable_defenduserinfoarr();

  // optional uint64 RecordTime = 3;
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateSimpleBattleRecord</name>
  	<Function>
  		<name>recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordtime() const;
  inline void set_recordtime(::google::protobuf::uint64 value);

  // optional uint64 TeamId = 4;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateSimpleBattleRecord</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint32 Round = 5;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateSimpleBattleRecord</name>
  	<Function>
  		<name>round</name>
  		<replaceName>Round</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_round</name>
  		<replaceName>Round</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_round</name>
  		<replaceName>Round</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 round() const;
  inline void set_round(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateSimpleBattleRecord)
 private:
  inline void set_has_recordtime();
  inline void clear_has_recordtime();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_round();
  inline void clear_has_round();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateSimpleRecordInfo > attackuserinfoarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateSimpleRecordInfo > defenduserinfoarr_;
  ::google::protobuf::uint64 recordtime_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint32 round_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateSimpleBattleRecord* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateGetStageInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateGetStageInfoRsp : public ::google::protobuf::Message {
 public:
  TCrossCollaborateGetStageInfoRsp();
  virtual ~TCrossCollaborateGetStageInfoRsp();

  TCrossCollaborateGetStageInfoRsp(const TCrossCollaborateGetStageInfoRsp& from);

  inline TCrossCollaborateGetStageInfoRsp& operator=(const TCrossCollaborateGetStageInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateGetStageInfoRsp& default_instance();

  void Swap(TCrossCollaborateGetStageInfoRsp* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateGetStageInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateGetStageInfoRsp& from);
  void MergeFrom(const TCrossCollaborateGetStageInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossCollaborateStageInfo StageArr = 1;
  inline int stagearr_size() const;
  inline void clear_stagearr();
  static const int kStageArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetStageInfoRsp</name>
  	<Function>
  		<name>stagearr</name>
  		<replaceName>StageArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_stagearr</name>
  		<replaceName>StageArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_stagearr</name>
  		<replaceName>StageArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stagearr</name>
  		<replaceName>StageArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>stagearr_size</name>
  		<replaceName>StageArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateStageInfo& stagearr(int index) const;
  inline ::pb::TCrossCollaborateStageInfo* mutable_stagearr(int index);
  inline ::pb::TCrossCollaborateStageInfo* add_stagearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateStageInfo >&
      stagearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateStageInfo >*
      mutable_stagearr();

  // optional .pb.TCrossCollaborateUserInfo UserInfo = 2;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetStageInfoRsp</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateUserInfo& userinfo() const;
  inline ::pb::TCrossCollaborateUserInfo* mutable_userinfo();
  inline ::pb::TCrossCollaborateUserInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TCrossCollaborateUserInfo* userinfo);

  // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 3;
  inline bool has_teaminfo() const;
  inline void clear_teaminfo();
  static const int kTeamInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetStageInfoRsp</name>
  	<Function>
  		<name>teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateTeamInfo& teaminfo() const;
  inline ::pb::TCrossCollaborateTeamInfo* mutable_teaminfo();
  inline ::pb::TCrossCollaborateTeamInfo* release_teaminfo();
  inline void set_allocated_teaminfo(::pb::TCrossCollaborateTeamInfo* teaminfo);

  // optional .pb.TCrossCollaborateTeamInfo RivalTeamInfo = 4;
  inline bool has_rivalteaminfo() const;
  inline void clear_rivalteaminfo();
  static const int kRivalTeamInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetStageInfoRsp</name>
  	<Function>
  		<name>rivalteaminfo</name>
  		<replaceName>RivalTeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rivalteaminfo</name>
  		<replaceName>RivalTeamInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_rivalteaminfo</name>
  		<replaceName>RivalTeamInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rivalteaminfo</name>
  		<replaceName>RivalTeamInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateTeamInfo& rivalteaminfo() const;
  inline ::pb::TCrossCollaborateTeamInfo* mutable_rivalteaminfo();
  inline ::pb::TCrossCollaborateTeamInfo* release_rivalteaminfo();
  inline void set_allocated_rivalteaminfo(::pb::TCrossCollaborateTeamInfo* rivalteaminfo);

  // optional uint64 BattleRewardTime = 5;
  inline bool has_battlerewardtime() const;
  inline void clear_battlerewardtime();
  static const int kBattleRewardTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetStageInfoRsp</name>
  	<Function>
  		<name>battlerewardtime</name>
  		<replaceName>BattleRewardTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlerewardtime</name>
  		<replaceName>BattleRewardTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlerewardtime</name>
  		<replaceName>BattleRewardTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 battlerewardtime() const;
  inline void set_battlerewardtime(::google::protobuf::uint64 value);

  // optional uint32 RankRewardConfId = 6;
  inline bool has_rankrewardconfid() const;
  inline void clear_rankrewardconfid();
  static const int kRankRewardConfIdFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetStageInfoRsp</name>
  	<Function>
  		<name>rankrewardconfid</name>
  		<replaceName>RankRewardConfId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rankrewardconfid</name>
  		<replaceName>RankRewardConfId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankrewardconfid</name>
  		<replaceName>RankRewardConfId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rankrewardconfid() const;
  inline void set_rankrewardconfid(::google::protobuf::uint32 value);

  // repeated uint32 RankRewardIdArr = 7;
  inline int rankrewardidarr_size() const;
  inline void clear_rankrewardidarr();
  static const int kRankRewardIdArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetStageInfoRsp</name>
  	<Function>
  		<name>rankrewardidarr</name>
  		<replaceName>RankRewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankrewardidarr</name>
  		<replaceName>RankRewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankrewardidarr</name>
  		<replaceName>RankRewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankrewardidarr</name>
  		<replaceName>RankRewardIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankrewardidarr_size</name>
  		<replaceName>RankRewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rankrewardidarr(int index) const;
  inline void set_rankrewardidarr(int index, ::google::protobuf::uint32 value);
  inline void add_rankrewardidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rankrewardidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rankrewardidarr();

  // repeated string GroupServerIdArr = 8;
  inline int groupserveridarr_size() const;
  inline void clear_groupserveridarr();
  static const int kGroupServerIdArrFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetStageInfoRsp</name>
  	<Function>
  		<name>groupserveridarr</name>
  		<replaceName>GroupServerIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_groupserveridarr</name>
  		<replaceName>GroupServerIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_groupserveridarr</name>
  		<replaceName>GroupServerIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupserveridarr</name>
  		<replaceName>GroupServerIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>groupserveridarr_size</name>
  		<replaceName>GroupServerIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& groupserveridarr(int index) const;
  inline ::std::string* mutable_groupserveridarr(int index);
  inline void set_groupserveridarr(int index, const ::std::string& value);
  inline void set_groupserveridarr(int index, const char* value);
  inline void set_groupserveridarr(int index, const char* value, size_t size);
  inline ::std::string* add_groupserveridarr();
  inline void add_groupserveridarr(const ::std::string& value);
  inline void add_groupserveridarr(const char* value);
  inline void add_groupserveridarr(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& groupserveridarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_groupserveridarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateGetStageInfoRsp)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_teaminfo();
  inline void clear_has_teaminfo();
  inline void set_has_rivalteaminfo();
  inline void clear_has_rivalteaminfo();
  inline void set_has_battlerewardtime();
  inline void clear_has_battlerewardtime();
  inline void set_has_rankrewardconfid();
  inline void clear_has_rankrewardconfid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateStageInfo > stagearr_;
  ::pb::TCrossCollaborateUserInfo* userinfo_;
  ::pb::TCrossCollaborateTeamInfo* teaminfo_;
  ::pb::TCrossCollaborateTeamInfo* rivalteaminfo_;
  ::google::protobuf::uint64 battlerewardtime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rankrewardidarr_;
  ::google::protobuf::RepeatedPtrField< ::std::string> groupserveridarr_;
  ::google::protobuf::uint32 rankrewardconfid_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateGetStageInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureGetTeamListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureGetTeamListReq : public ::google::protobuf::Message {
 public:
  TAdventureGetTeamListReq();
  virtual ~TAdventureGetTeamListReq();

  TAdventureGetTeamListReq(const TAdventureGetTeamListReq& from);

  inline TAdventureGetTeamListReq& operator=(const TAdventureGetTeamListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureGetTeamListReq& default_instance();

  void Swap(TAdventureGetTeamListReq* other);

  // implements Message ----------------------------------------------

  TAdventureGetTeamListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureGetTeamListReq& from);
  void MergeFrom(const TAdventureGetTeamListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetTeamListReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetTeamListReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // optional uint32 CanJoin = 3;
  inline bool has_canjoin() const;
  inline void clear_canjoin();
  static const int kCanJoinFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetTeamListReq</name>
  	<Function>
  		<name>canjoin</name>
  		<replaceName>CanJoin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_canjoin</name>
  		<replaceName>CanJoin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_canjoin</name>
  		<replaceName>CanJoin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 canjoin() const;
  inline void set_canjoin(::google::protobuf::uint32 value);

  // optional .pb.ECrossCollaborateInviteType InviteType = 4;
  inline bool has_invitetype() const;
  inline void clear_invitetype();
  static const int kInviteTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetTeamListReq</name>
  	<Function>
  		<name>invitetype</name>
  		<replaceName>InviteType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_invitetype</name>
  		<replaceName>InviteType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_invitetype</name>
  		<replaceName>InviteType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ECrossCollaborateInviteType invitetype() const;
  inline void set_invitetype(::pb::ECrossCollaborateInviteType value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureGetTeamListReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_canjoin();
  inline void clear_has_canjoin();
  inline void set_has_invitetype();
  inline void clear_has_invitetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  ::google::protobuf::uint32 canjoin_;
  int invitetype_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TAdventureGetTeamListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateGetTeamListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateGetTeamListRsp : public ::google::protobuf::Message {
 public:
  TCrossCollaborateGetTeamListRsp();
  virtual ~TCrossCollaborateGetTeamListRsp();

  TCrossCollaborateGetTeamListRsp(const TCrossCollaborateGetTeamListRsp& from);

  inline TCrossCollaborateGetTeamListRsp& operator=(const TCrossCollaborateGetTeamListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateGetTeamListRsp& default_instance();

  void Swap(TCrossCollaborateGetTeamListRsp* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateGetTeamListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateGetTeamListRsp& from);
  void MergeFrom(const TCrossCollaborateGetTeamListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossCollaborateTeamInfo TeamArr = 1;
  inline int teamarr_size() const;
  inline void clear_teamarr();
  static const int kTeamArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetTeamListRsp</name>
  	<Function>
  		<name>teamarr</name>
  		<replaceName>TeamArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_teamarr</name>
  		<replaceName>TeamArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_teamarr</name>
  		<replaceName>TeamArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamarr</name>
  		<replaceName>TeamArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>teamarr_size</name>
  		<replaceName>TeamArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateTeamInfo& teamarr(int index) const;
  inline ::pb::TCrossCollaborateTeamInfo* mutable_teamarr(int index);
  inline ::pb::TCrossCollaborateTeamInfo* add_teamarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateTeamInfo >&
      teamarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateTeamInfo >*
      mutable_teamarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateGetTeamListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateTeamInfo > teamarr_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateGetTeamListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateCreateTeamRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateCreateTeamRsp : public ::google::protobuf::Message {
 public:
  TCrossCollaborateCreateTeamRsp();
  virtual ~TCrossCollaborateCreateTeamRsp();

  TCrossCollaborateCreateTeamRsp(const TCrossCollaborateCreateTeamRsp& from);

  inline TCrossCollaborateCreateTeamRsp& operator=(const TCrossCollaborateCreateTeamRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateCreateTeamRsp& default_instance();

  void Swap(TCrossCollaborateCreateTeamRsp* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateCreateTeamRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateCreateTeamRsp& from);
  void MergeFrom(const TCrossCollaborateCreateTeamRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 1;
  inline bool has_teaminfo() const;
  inline void clear_teaminfo();
  static const int kTeamInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateCreateTeamRsp</name>
  	<Function>
  		<name>teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateTeamInfo& teaminfo() const;
  inline ::pb::TCrossCollaborateTeamInfo* mutable_teaminfo();
  inline ::pb::TCrossCollaborateTeamInfo* release_teaminfo();
  inline void set_allocated_teaminfo(::pb::TCrossCollaborateTeamInfo* teaminfo);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateCreateTeamRsp)
 private:
  inline void set_has_teaminfo();
  inline void clear_has_teaminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TCrossCollaborateTeamInfo* teaminfo_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateCreateTeamRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateSetTeamReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateSetTeamReq : public ::google::protobuf::Message {
 public:
  TCrossCollaborateSetTeamReq();
  virtual ~TCrossCollaborateSetTeamReq();

  TCrossCollaborateSetTeamReq(const TCrossCollaborateSetTeamReq& from);

  inline TCrossCollaborateSetTeamReq& operator=(const TCrossCollaborateSetTeamReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateSetTeamReq& default_instance();

  void Swap(TCrossCollaborateSetTeamReq* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateSetTeamReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateSetTeamReq& from);
  void MergeFrom(const TCrossCollaborateSetTeamReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateSetTeamReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint64 NeedFightForce = 2;
  inline bool has_needfightforce() const;
  inline void clear_needfightforce();
  static const int kNeedFightForceFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateSetTeamReq</name>
  	<Function>
  		<name>needfightforce</name>
  		<replaceName>NeedFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_needfightforce</name>
  		<replaceName>NeedFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_needfightforce</name>
  		<replaceName>NeedFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 needfightforce() const;
  inline void set_needfightforce(::google::protobuf::uint64 value);

  // optional .pb.ECrossCollaborateStatus TeamStatus = 3;
  inline bool has_teamstatus() const;
  inline void clear_teamstatus();
  static const int kTeamStatusFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateSetTeamReq</name>
  	<Function>
  		<name>teamstatus</name>
  		<replaceName>TeamStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamstatus</name>
  		<replaceName>TeamStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamstatus</name>
  		<replaceName>TeamStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ECrossCollaborateStatus teamstatus() const;
  inline void set_teamstatus(::pb::ECrossCollaborateStatus value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateSetTeamReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_needfightforce();
  inline void clear_has_needfightforce();
  inline void set_has_teamstatus();
  inline void clear_has_teamstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 needfightforce_;
  int teamstatus_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateSetTeamReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateJoinTeamReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateJoinTeamReq : public ::google::protobuf::Message {
 public:
  TCrossCollaborateJoinTeamReq();
  virtual ~TCrossCollaborateJoinTeamReq();

  TCrossCollaborateJoinTeamReq(const TCrossCollaborateJoinTeamReq& from);

  inline TCrossCollaborateJoinTeamReq& operator=(const TCrossCollaborateJoinTeamReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateJoinTeamReq& default_instance();

  void Swap(TCrossCollaborateJoinTeamReq* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateJoinTeamReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateJoinTeamReq& from);
  void MergeFrom(const TCrossCollaborateJoinTeamReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateJoinTeamReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateJoinTeamReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateJoinTeamReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateJoinTeamRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateJoinTeamRsp : public ::google::protobuf::Message {
 public:
  TCrossCollaborateJoinTeamRsp();
  virtual ~TCrossCollaborateJoinTeamRsp();

  TCrossCollaborateJoinTeamRsp(const TCrossCollaborateJoinTeamRsp& from);

  inline TCrossCollaborateJoinTeamRsp& operator=(const TCrossCollaborateJoinTeamRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateJoinTeamRsp& default_instance();

  void Swap(TCrossCollaborateJoinTeamRsp* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateJoinTeamRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateJoinTeamRsp& from);
  void MergeFrom(const TCrossCollaborateJoinTeamRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ECrossCollaborateErrorCode ErrorCode = 1;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateJoinTeamRsp</name>
  	<Function>
  		<name>errorcode</name>
  		<replaceName>ErrorCode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_errorcode</name>
  		<replaceName>ErrorCode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_errorcode</name>
  		<replaceName>ErrorCode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ECrossCollaborateErrorCode errorcode() const;
  inline void set_errorcode(::pb::ECrossCollaborateErrorCode value);

  // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 2;
  inline bool has_teaminfo() const;
  inline void clear_teaminfo();
  static const int kTeamInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateJoinTeamRsp</name>
  	<Function>
  		<name>teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateTeamInfo& teaminfo() const;
  inline ::pb::TCrossCollaborateTeamInfo* mutable_teaminfo();
  inline ::pb::TCrossCollaborateTeamInfo* release_teaminfo();
  inline void set_allocated_teaminfo(::pb::TCrossCollaborateTeamInfo* teaminfo);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateJoinTeamRsp)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_teaminfo();
  inline void clear_has_teaminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TCrossCollaborateTeamInfo* teaminfo_;
  int errorcode_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateJoinTeamRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateQuitTeamReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateQuitTeamReq : public ::google::protobuf::Message {
 public:
  TCrossCollaborateQuitTeamReq();
  virtual ~TCrossCollaborateQuitTeamReq();

  TCrossCollaborateQuitTeamReq(const TCrossCollaborateQuitTeamReq& from);

  inline TCrossCollaborateQuitTeamReq& operator=(const TCrossCollaborateQuitTeamReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateQuitTeamReq& default_instance();

  void Swap(TCrossCollaborateQuitTeamReq* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateQuitTeamReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateQuitTeamReq& from);
  void MergeFrom(const TCrossCollaborateQuitTeamReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateQuitTeamReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateQuitTeamReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateQuitTeamReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateGetInviteListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateGetInviteListReq : public ::google::protobuf::Message {
 public:
  TCrossCollaborateGetInviteListReq();
  virtual ~TCrossCollaborateGetInviteListReq();

  TCrossCollaborateGetInviteListReq(const TCrossCollaborateGetInviteListReq& from);

  inline TCrossCollaborateGetInviteListReq& operator=(const TCrossCollaborateGetInviteListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateGetInviteListReq& default_instance();

  void Swap(TCrossCollaborateGetInviteListReq* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateGetInviteListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateGetInviteListReq& from);
  void MergeFrom(const TCrossCollaborateGetInviteListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ECrossCollaborateInviteType InviteType = 1;
  inline bool has_invitetype() const;
  inline void clear_invitetype();
  static const int kInviteTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetInviteListReq</name>
  	<Function>
  		<name>invitetype</name>
  		<replaceName>InviteType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_invitetype</name>
  		<replaceName>InviteType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_invitetype</name>
  		<replaceName>InviteType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ECrossCollaborateInviteType invitetype() const;
  inline void set_invitetype(::pb::ECrossCollaborateInviteType value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateGetInviteListReq)
 private:
  inline void set_has_invitetype();
  inline void clear_has_invitetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int invitetype_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateGetInviteListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateGetInviteListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateGetInviteListRsp : public ::google::protobuf::Message {
 public:
  TCrossCollaborateGetInviteListRsp();
  virtual ~TCrossCollaborateGetInviteListRsp();

  TCrossCollaborateGetInviteListRsp(const TCrossCollaborateGetInviteListRsp& from);

  inline TCrossCollaborateGetInviteListRsp& operator=(const TCrossCollaborateGetInviteListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateGetInviteListRsp& default_instance();

  void Swap(TCrossCollaborateGetInviteListRsp* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateGetInviteListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateGetInviteListRsp& from);
  void MergeFrom(const TCrossCollaborateGetInviteListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossCollaborateInviteUserInfo UserArr = 1;
  inline int userarr_size() const;
  inline void clear_userarr();
  static const int kUserArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetInviteListRsp</name>
  	<Function>
  		<name>userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userarr_size</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateInviteUserInfo& userarr(int index) const;
  inline ::pb::TCrossCollaborateInviteUserInfo* mutable_userarr(int index);
  inline ::pb::TCrossCollaborateInviteUserInfo* add_userarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateInviteUserInfo >&
      userarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateInviteUserInfo >*
      mutable_userarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateGetInviteListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateInviteUserInfo > userarr_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateGetInviteListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateInviteMemberReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateInviteMemberReq : public ::google::protobuf::Message {
 public:
  TCrossCollaborateInviteMemberReq();
  virtual ~TCrossCollaborateInviteMemberReq();

  TCrossCollaborateInviteMemberReq(const TCrossCollaborateInviteMemberReq& from);

  inline TCrossCollaborateInviteMemberReq& operator=(const TCrossCollaborateInviteMemberReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateInviteMemberReq& default_instance();

  void Swap(TCrossCollaborateInviteMemberReq* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateInviteMemberReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateInviteMemberReq& from);
  void MergeFrom(const TCrossCollaborateInviteMemberReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 InviteUid = 1;
  inline bool has_inviteuid() const;
  inline void clear_inviteuid();
  static const int kInviteUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateInviteMemberReq</name>
  	<Function>
  		<name>inviteuid</name>
  		<replaceName>InviteUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_inviteuid</name>
  		<replaceName>InviteUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_inviteuid</name>
  		<replaceName>InviteUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 inviteuid() const;
  inline void set_inviteuid(::google::protobuf::uint64 value);

  // optional string InviteServerId = 2;
  inline bool has_inviteserverid() const;
  inline void clear_inviteserverid();
  static const int kInviteServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateInviteMemberReq</name>
  	<Function>
  		<name>inviteserverid</name>
  		<replaceName>InviteServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_inviteserverid</name>
  		<replaceName>InviteServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_inviteserverid</name>
  		<replaceName>InviteServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& inviteserverid() const;
  inline void set_inviteserverid(const ::std::string& value);
  inline void set_inviteserverid(const char* value);
  inline void set_inviteserverid(const char* value, size_t size);
  inline ::std::string* mutable_inviteserverid();
  inline ::std::string* release_inviteserverid();
  inline void set_allocated_inviteserverid(::std::string* inviteserverid);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateInviteMemberReq)
 private:
  inline void set_has_inviteuid();
  inline void clear_has_inviteuid();
  inline void set_has_inviteserverid();
  inline void clear_has_inviteserverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 inviteuid_;
  ::std::string* inviteserverid_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateInviteMemberReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateInviteMemberRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateInviteMemberRsp : public ::google::protobuf::Message {
 public:
  TCrossCollaborateInviteMemberRsp();
  virtual ~TCrossCollaborateInviteMemberRsp();

  TCrossCollaborateInviteMemberRsp(const TCrossCollaborateInviteMemberRsp& from);

  inline TCrossCollaborateInviteMemberRsp& operator=(const TCrossCollaborateInviteMemberRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateInviteMemberRsp& default_instance();

  void Swap(TCrossCollaborateInviteMemberRsp* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateInviteMemberRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateInviteMemberRsp& from);
  void MergeFrom(const TCrossCollaborateInviteMemberRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateInviteMemberRsp</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateInviteMemberRsp)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateInviteMemberRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateKickMemberReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateKickMemberReq : public ::google::protobuf::Message {
 public:
  TCrossCollaborateKickMemberReq();
  virtual ~TCrossCollaborateKickMemberReq();

  TCrossCollaborateKickMemberReq(const TCrossCollaborateKickMemberReq& from);

  inline TCrossCollaborateKickMemberReq& operator=(const TCrossCollaborateKickMemberReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateKickMemberReq& default_instance();

  void Swap(TCrossCollaborateKickMemberReq* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateKickMemberReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateKickMemberReq& from);
  void MergeFrom(const TCrossCollaborateKickMemberReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateKickMemberReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint64 KickUid = 2;
  inline bool has_kickuid() const;
  inline void clear_kickuid();
  static const int kKickUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateKickMemberReq</name>
  	<Function>
  		<name>kickuid</name>
  		<replaceName>KickUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_kickuid</name>
  		<replaceName>KickUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_kickuid</name>
  		<replaceName>KickUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 kickuid() const;
  inline void set_kickuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateKickMemberReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_kickuid();
  inline void clear_has_kickuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 kickuid_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateKickMemberReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateGetMyFormationRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateGetMyFormationRsp : public ::google::protobuf::Message {
 public:
  TCrossCollaborateGetMyFormationRsp();
  virtual ~TCrossCollaborateGetMyFormationRsp();

  TCrossCollaborateGetMyFormationRsp(const TCrossCollaborateGetMyFormationRsp& from);

  inline TCrossCollaborateGetMyFormationRsp& operator=(const TCrossCollaborateGetMyFormationRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateGetMyFormationRsp& default_instance();

  void Swap(TCrossCollaborateGetMyFormationRsp* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateGetMyFormationRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateGetMyFormationRsp& from);
  void MergeFrom(const TCrossCollaborateGetMyFormationRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossCollaborateFormationInfo FormationArr = 1;
  inline int formationarr_size() const;
  inline void clear_formationarr();
  static const int kFormationArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetMyFormationRsp</name>
  	<Function>
  		<name>formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>formationarr_size</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateFormationInfo& formationarr(int index) const;
  inline ::pb::TCrossCollaborateFormationInfo* mutable_formationarr(int index);
  inline ::pb::TCrossCollaborateFormationInfo* add_formationarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateFormationInfo >&
      formationarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateFormationInfo >*
      mutable_formationarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateGetMyFormationRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateFormationInfo > formationarr_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateGetMyFormationRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateSetFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateSetFormationReq : public ::google::protobuf::Message {
 public:
  TCrossCollaborateSetFormationReq();
  virtual ~TCrossCollaborateSetFormationReq();

  TCrossCollaborateSetFormationReq(const TCrossCollaborateSetFormationReq& from);

  inline TCrossCollaborateSetFormationReq& operator=(const TCrossCollaborateSetFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateSetFormationReq& default_instance();

  void Swap(TCrossCollaborateSetFormationReq* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateSetFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateSetFormationReq& from);
  void MergeFrom(const TCrossCollaborateSetFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossCollaborateFormationInfo FormationArr = 1;
  inline int formationarr_size() const;
  inline void clear_formationarr();
  static const int kFormationArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateSetFormationReq</name>
  	<Function>
  		<name>formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>formationarr_size</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateFormationInfo& formationarr(int index) const;
  inline ::pb::TCrossCollaborateFormationInfo* mutable_formationarr(int index);
  inline ::pb::TCrossCollaborateFormationInfo* add_formationarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateFormationInfo >&
      formationarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateFormationInfo >*
      mutable_formationarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateSetFormationReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateFormationInfo > formationarr_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateSetFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateGetEnemyFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateGetEnemyFormationReq : public ::google::protobuf::Message {
 public:
  TCrossCollaborateGetEnemyFormationReq();
  virtual ~TCrossCollaborateGetEnemyFormationReq();

  TCrossCollaborateGetEnemyFormationReq(const TCrossCollaborateGetEnemyFormationReq& from);

  inline TCrossCollaborateGetEnemyFormationReq& operator=(const TCrossCollaborateGetEnemyFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateGetEnemyFormationReq& default_instance();

  void Swap(TCrossCollaborateGetEnemyFormationReq* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateGetEnemyFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateGetEnemyFormationReq& from);
  void MergeFrom(const TCrossCollaborateGetEnemyFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 EnemyUid = 1;
  inline bool has_enemyuid() const;
  inline void clear_enemyuid();
  static const int kEnemyUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetEnemyFormationReq</name>
  	<Function>
  		<name>enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 enemyuid() const;
  inline void set_enemyuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateGetEnemyFormationReq)
 private:
  inline void set_has_enemyuid();
  inline void clear_has_enemyuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 enemyuid_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateGetEnemyFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateGetEnemyFormationRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateGetEnemyFormationRsp : public ::google::protobuf::Message {
 public:
  TCrossCollaborateGetEnemyFormationRsp();
  virtual ~TCrossCollaborateGetEnemyFormationRsp();

  TCrossCollaborateGetEnemyFormationRsp(const TCrossCollaborateGetEnemyFormationRsp& from);

  inline TCrossCollaborateGetEnemyFormationRsp& operator=(const TCrossCollaborateGetEnemyFormationRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateGetEnemyFormationRsp& default_instance();

  void Swap(TCrossCollaborateGetEnemyFormationRsp* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateGetEnemyFormationRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateGetEnemyFormationRsp& from);
  void MergeFrom(const TCrossCollaborateGetEnemyFormationRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossCollaborateEnemyFormation FormationArr = 1;
  inline int formationarr_size() const;
  inline void clear_formationarr();
  static const int kFormationArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetEnemyFormationRsp</name>
  	<Function>
  		<name>formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>formationarr_size</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateEnemyFormation& formationarr(int index) const;
  inline ::pb::TCrossCollaborateEnemyFormation* mutable_formationarr(int index);
  inline ::pb::TCrossCollaborateEnemyFormation* add_formationarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateEnemyFormation >&
      formationarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateEnemyFormation >*
      mutable_formationarr();

  // repeated .pb.TRankSingle RankArr = 2;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetEnemyFormationRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRankSingle& rankarr(int index) const;
  inline ::pb::TRankSingle* mutable_rankarr(int index);
  inline ::pb::TRankSingle* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >*
      mutable_rankarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateGetEnemyFormationRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateEnemyFormation > formationarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle > rankarr_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateGetEnemyFormationRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateSwapFightOrderReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateSwapFightOrderReq : public ::google::protobuf::Message {
 public:
  TCrossCollaborateSwapFightOrderReq();
  virtual ~TCrossCollaborateSwapFightOrderReq();

  TCrossCollaborateSwapFightOrderReq(const TCrossCollaborateSwapFightOrderReq& from);

  inline TCrossCollaborateSwapFightOrderReq& operator=(const TCrossCollaborateSwapFightOrderReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateSwapFightOrderReq& default_instance();

  void Swap(TCrossCollaborateSwapFightOrderReq* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateSwapFightOrderReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateSwapFightOrderReq& from);
  void MergeFrom(const TCrossCollaborateSwapFightOrderReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateSwapFightOrderReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // repeated uint64 UidArr = 2;
  inline int uidarr_size() const;
  inline void clear_uidarr();
  static const int kUidArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateSwapFightOrderReq</name>
  	<Function>
  		<name>uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>uidarr_size</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uidarr(int index) const;
  inline void set_uidarr(int index, ::google::protobuf::uint64 value);
  inline void add_uidarr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uidarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateSwapFightOrderReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uidarr_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateSwapFightOrderReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateGetBattleRecordReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateGetBattleRecordReq : public ::google::protobuf::Message {
 public:
  TCrossCollaborateGetBattleRecordReq();
  virtual ~TCrossCollaborateGetBattleRecordReq();

  TCrossCollaborateGetBattleRecordReq(const TCrossCollaborateGetBattleRecordReq& from);

  inline TCrossCollaborateGetBattleRecordReq& operator=(const TCrossCollaborateGetBattleRecordReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateGetBattleRecordReq& default_instance();

  void Swap(TCrossCollaborateGetBattleRecordReq* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateGetBattleRecordReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateGetBattleRecordReq& from);
  void MergeFrom(const TCrossCollaborateGetBattleRecordReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetBattleRecordReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint64 RecordTime = 2;
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetBattleRecordReq</name>
  	<Function>
  		<name>recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordtime() const;
  inline void set_recordtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateGetBattleRecordReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 recordtime_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateGetBattleRecordReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateGetBattleRecordRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateGetBattleRecordRsp : public ::google::protobuf::Message {
 public:
  TCrossCollaborateGetBattleRecordRsp();
  virtual ~TCrossCollaborateGetBattleRecordRsp();

  TCrossCollaborateGetBattleRecordRsp(const TCrossCollaborateGetBattleRecordRsp& from);

  inline TCrossCollaborateGetBattleRecordRsp& operator=(const TCrossCollaborateGetBattleRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateGetBattleRecordRsp& default_instance();

  void Swap(TCrossCollaborateGetBattleRecordRsp* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateGetBattleRecordRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateGetBattleRecordRsp& from);
  void MergeFrom(const TCrossCollaborateGetBattleRecordRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossCollaborateBattleRecord BattleRecordArr = 1;
  inline int battlerecordarr_size() const;
  inline void clear_battlerecordarr();
  static const int kBattleRecordArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetBattleRecordRsp</name>
  	<Function>
  		<name>battlerecordarr</name>
  		<replaceName>BattleRecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_battlerecordarr</name>
  		<replaceName>BattleRecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_battlerecordarr</name>
  		<replaceName>BattleRecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlerecordarr</name>
  		<replaceName>BattleRecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>battlerecordarr_size</name>
  		<replaceName>BattleRecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateBattleRecord& battlerecordarr(int index) const;
  inline ::pb::TCrossCollaborateBattleRecord* mutable_battlerecordarr(int index);
  inline ::pb::TCrossCollaborateBattleRecord* add_battlerecordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateBattleRecord >&
      battlerecordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateBattleRecord >*
      mutable_battlerecordarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateGetBattleRecordRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateBattleRecord > battlerecordarr_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateGetBattleRecordRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateGetSimpleBattleRecordReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateGetSimpleBattleRecordReq : public ::google::protobuf::Message {
 public:
  TCrossCollaborateGetSimpleBattleRecordReq();
  virtual ~TCrossCollaborateGetSimpleBattleRecordReq();

  TCrossCollaborateGetSimpleBattleRecordReq(const TCrossCollaborateGetSimpleBattleRecordReq& from);

  inline TCrossCollaborateGetSimpleBattleRecordReq& operator=(const TCrossCollaborateGetSimpleBattleRecordReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateGetSimpleBattleRecordReq& default_instance();

  void Swap(TCrossCollaborateGetSimpleBattleRecordReq* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateGetSimpleBattleRecordReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateGetSimpleBattleRecordReq& from);
  void MergeFrom(const TCrossCollaborateGetSimpleBattleRecordReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetSimpleBattleRecordReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetSimpleBattleRecordReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateGetSimpleBattleRecordReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateGetSimpleBattleRecordReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateGetSimpleBattleRecordRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateGetSimpleBattleRecordRsp : public ::google::protobuf::Message {
 public:
  TCrossCollaborateGetSimpleBattleRecordRsp();
  virtual ~TCrossCollaborateGetSimpleBattleRecordRsp();

  TCrossCollaborateGetSimpleBattleRecordRsp(const TCrossCollaborateGetSimpleBattleRecordRsp& from);

  inline TCrossCollaborateGetSimpleBattleRecordRsp& operator=(const TCrossCollaborateGetSimpleBattleRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateGetSimpleBattleRecordRsp& default_instance();

  void Swap(TCrossCollaborateGetSimpleBattleRecordRsp* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateGetSimpleBattleRecordRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateGetSimpleBattleRecordRsp& from);
  void MergeFrom(const TCrossCollaborateGetSimpleBattleRecordRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossCollaborateSimpleBattleRecord SimpleBattleRecordArr = 1;
  inline int simplebattlerecordarr_size() const;
  inline void clear_simplebattlerecordarr();
  static const int kSimpleBattleRecordArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetSimpleBattleRecordRsp</name>
  	<Function>
  		<name>simplebattlerecordarr</name>
  		<replaceName>SimpleBattleRecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_simplebattlerecordarr</name>
  		<replaceName>SimpleBattleRecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_simplebattlerecordarr</name>
  		<replaceName>SimpleBattleRecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_simplebattlerecordarr</name>
  		<replaceName>SimpleBattleRecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>simplebattlerecordarr_size</name>
  		<replaceName>SimpleBattleRecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateSimpleBattleRecord& simplebattlerecordarr(int index) const;
  inline ::pb::TCrossCollaborateSimpleBattleRecord* mutable_simplebattlerecordarr(int index);
  inline ::pb::TCrossCollaborateSimpleBattleRecord* add_simplebattlerecordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateSimpleBattleRecord >&
      simplebattlerecordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateSimpleBattleRecord >*
      mutable_simplebattlerecordarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateGetSimpleBattleRecordRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateSimpleBattleRecord > simplebattlerecordarr_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateGetSimpleBattleRecordRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateGetRankListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateGetRankListRsp : public ::google::protobuf::Message {
 public:
  TCrossCollaborateGetRankListRsp();
  virtual ~TCrossCollaborateGetRankListRsp();

  TCrossCollaborateGetRankListRsp(const TCrossCollaborateGetRankListRsp& from);

  inline TCrossCollaborateGetRankListRsp& operator=(const TCrossCollaborateGetRankListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateGetRankListRsp& default_instance();

  void Swap(TCrossCollaborateGetRankListRsp* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateGetRankListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateGetRankListRsp& from);
  void MergeFrom(const TCrossCollaborateGetRankListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 MyRank = 1;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetRankListRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // repeated .pb.TCrossCollaborateUserInfo RankArr = 2;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetRankListRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateUserInfo& rankarr(int index) const;
  inline ::pb::TCrossCollaborateUserInfo* mutable_rankarr(int index);
  inline ::pb::TCrossCollaborateUserInfo* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateUserInfo >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateUserInfo >*
      mutable_rankarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateGetRankListRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateUserInfo > rankarr_;
  ::google::protobuf::int32 myrank_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateGetRankListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateReceiveBattleRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateReceiveBattleRewardReq : public ::google::protobuf::Message {
 public:
  TCrossCollaborateReceiveBattleRewardReq();
  virtual ~TCrossCollaborateReceiveBattleRewardReq();

  TCrossCollaborateReceiveBattleRewardReq(const TCrossCollaborateReceiveBattleRewardReq& from);

  inline TCrossCollaborateReceiveBattleRewardReq& operator=(const TCrossCollaborateReceiveBattleRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateReceiveBattleRewardReq& default_instance();

  void Swap(TCrossCollaborateReceiveBattleRewardReq* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateReceiveBattleRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateReceiveBattleRewardReq& from);
  void MergeFrom(const TCrossCollaborateReceiveBattleRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Round = 1;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateReceiveBattleRewardReq</name>
  	<Function>
  		<name>round</name>
  		<replaceName>Round</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_round</name>
  		<replaceName>Round</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_round</name>
  		<replaceName>Round</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 round() const;
  inline void set_round(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateReceiveBattleRewardReq)
 private:
  inline void set_has_round();
  inline void clear_has_round();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 round_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateReceiveBattleRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateReceiveRankRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateReceiveRankRewardReq : public ::google::protobuf::Message {
 public:
  TCrossCollaborateReceiveRankRewardReq();
  virtual ~TCrossCollaborateReceiveRankRewardReq();

  TCrossCollaborateReceiveRankRewardReq(const TCrossCollaborateReceiveRankRewardReq& from);

  inline TCrossCollaborateReceiveRankRewardReq& operator=(const TCrossCollaborateReceiveRankRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateReceiveRankRewardReq& default_instance();

  void Swap(TCrossCollaborateReceiveRankRewardReq* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateReceiveRankRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateReceiveRankRewardReq& from);
  void MergeFrom(const TCrossCollaborateReceiveRankRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RankId = 1;
  inline bool has_rankid() const;
  inline void clear_rankid();
  static const int kRankIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateReceiveRankRewardReq</name>
  	<Function>
  		<name>rankid</name>
  		<replaceName>RankId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rankid</name>
  		<replaceName>RankId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankid</name>
  		<replaceName>RankId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rankid() const;
  inline void set_rankid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateReceiveRankRewardReq)
 private:
  inline void set_has_rankid();
  inline void clear_has_rankid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rankid_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateReceiveRankRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateTeamNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateTeamNotify : public ::google::protobuf::Message {
 public:
  TCrossCollaborateTeamNotify();
  virtual ~TCrossCollaborateTeamNotify();

  TCrossCollaborateTeamNotify(const TCrossCollaborateTeamNotify& from);

  inline TCrossCollaborateTeamNotify& operator=(const TCrossCollaborateTeamNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateTeamNotify& default_instance();

  void Swap(TCrossCollaborateTeamNotify* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateTeamNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateTeamNotify& from);
  void MergeFrom(const TCrossCollaborateTeamNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 1;
  inline bool has_teaminfo() const;
  inline void clear_teaminfo();
  static const int kTeamInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateTeamNotify</name>
  	<Function>
  		<name>teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossCollaborateTeamInfo& teaminfo() const;
  inline ::pb::TCrossCollaborateTeamInfo* mutable_teaminfo();
  inline ::pb::TCrossCollaborateTeamInfo* release_teaminfo();
  inline void set_allocated_teaminfo(::pb::TCrossCollaborateTeamInfo* teaminfo);

  // optional uint64 PushTime = 2;
  inline bool has_pushtime() const;
  inline void clear_pushtime();
  static const int kPushTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateTeamNotify</name>
  	<Function>
  		<name>pushtime</name>
  		<replaceName>PushTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pushtime</name>
  		<replaceName>PushTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pushtime</name>
  		<replaceName>PushTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 pushtime() const;
  inline void set_pushtime(::google::protobuf::uint64 value);

  // optional uint32 IsInvite = 3;
  inline bool has_isinvite() const;
  inline void clear_isinvite();
  static const int kIsInviteFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateTeamNotify</name>
  	<Function>
  		<name>isinvite</name>
  		<replaceName>IsInvite</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isinvite</name>
  		<replaceName>IsInvite</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isinvite</name>
  		<replaceName>IsInvite</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isinvite() const;
  inline void set_isinvite(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateTeamNotify)
 private:
  inline void set_has_teaminfo();
  inline void clear_has_teaminfo();
  inline void set_has_pushtime();
  inline void clear_has_pushtime();
  inline void set_has_isinvite();
  inline void clear_has_isinvite();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TCrossCollaborateTeamInfo* teaminfo_;
  ::google::protobuf::uint64 pushtime_;
  ::google::protobuf::uint32 isinvite_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateTeamNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateUserRankRewardNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateUserRankRewardNotify : public ::google::protobuf::Message {
 public:
  TCrossCollaborateUserRankRewardNotify();
  virtual ~TCrossCollaborateUserRankRewardNotify();

  TCrossCollaborateUserRankRewardNotify(const TCrossCollaborateUserRankRewardNotify& from);

  inline TCrossCollaborateUserRankRewardNotify& operator=(const TCrossCollaborateUserRankRewardNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateUserRankRewardNotify& default_instance();

  void Swap(TCrossCollaborateUserRankRewardNotify* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateUserRankRewardNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateUserRankRewardNotify& from);
  void MergeFrom(const TCrossCollaborateUserRankRewardNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 RankRewardIdArr = 1;
  inline int rankrewardidarr_size() const;
  inline void clear_rankrewardidarr();
  static const int kRankRewardIdArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateUserRankRewardNotify</name>
  	<Function>
  		<name>rankrewardidarr</name>
  		<replaceName>RankRewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankrewardidarr</name>
  		<replaceName>RankRewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankrewardidarr</name>
  		<replaceName>RankRewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankrewardidarr</name>
  		<replaceName>RankRewardIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankrewardidarr_size</name>
  		<replaceName>RankRewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rankrewardidarr(int index) const;
  inline void set_rankrewardidarr(int index, ::google::protobuf::uint32 value);
  inline void add_rankrewardidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rankrewardidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rankrewardidarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateUserRankRewardNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rankrewardidarr_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateUserRankRewardNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateBattleReportArrReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateBattleReportArrReq : public ::google::protobuf::Message {
 public:
  TCrossCollaborateBattleReportArrReq();
  virtual ~TCrossCollaborateBattleReportArrReq();

  TCrossCollaborateBattleReportArrReq(const TCrossCollaborateBattleReportArrReq& from);

  inline TCrossCollaborateBattleReportArrReq& operator=(const TCrossCollaborateBattleReportArrReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateBattleReportArrReq& default_instance();

  void Swap(TCrossCollaborateBattleReportArrReq* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateBattleReportArrReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateBattleReportArrReq& from);
  void MergeFrom(const TCrossCollaborateBattleReportArrReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 ridArr = 1;
  inline int ridarr_size() const;
  inline void clear_ridarr();
  static const int kRidArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateBattleReportArrReq</name>
  	<Function>
  		<name>ridarr</name>
  		<replaceName>ridArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ridarr</name>
  		<replaceName>ridArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ridarr</name>
  		<replaceName>ridArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ridarr</name>
  		<replaceName>ridArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ridarr_size</name>
  		<replaceName>ridArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 ridarr(int index) const;
  inline void set_ridarr(int index, ::google::protobuf::uint64 value);
  inline void add_ridarr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ridarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ridarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateBattleReportArrReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ridarr_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateBattleReportArrReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateBattleReportArrRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateBattleReportArrRsp : public ::google::protobuf::Message {
 public:
  TCrossCollaborateBattleReportArrRsp();
  virtual ~TCrossCollaborateBattleReportArrRsp();

  TCrossCollaborateBattleReportArrRsp(const TCrossCollaborateBattleReportArrRsp& from);

  inline TCrossCollaborateBattleReportArrRsp& operator=(const TCrossCollaborateBattleReportArrRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateBattleReportArrRsp& default_instance();

  void Swap(TCrossCollaborateBattleReportArrRsp* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateBattleReportArrRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateBattleReportArrRsp& from);
  void MergeFrom(const TCrossCollaborateBattleReportArrRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes Result = 1;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateBattleReportArrRsp</name>
  	<Function>
  		<name>result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>result_size</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& result(int index) const;
  inline ::std::string* mutable_result(int index);
  inline void set_result(int index, const ::std::string& value);
  inline void set_result(int index, const char* value);
  inline void set_result(int index, const void* value, size_t size);
  inline ::std::string* add_result();
  inline void add_result(const ::std::string& value);
  inline void add_result(const char* value);
  inline void add_result(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& result() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_result();

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateBattleReportArrRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> result_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateBattleReportArrRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossCollaborateGetServerGroupInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossCollaborate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossCollaborateGetServerGroupInfoRsp : public ::google::protobuf::Message {
 public:
  TCrossCollaborateGetServerGroupInfoRsp();
  virtual ~TCrossCollaborateGetServerGroupInfoRsp();

  TCrossCollaborateGetServerGroupInfoRsp(const TCrossCollaborateGetServerGroupInfoRsp& from);

  inline TCrossCollaborateGetServerGroupInfoRsp& operator=(const TCrossCollaborateGetServerGroupInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossCollaborateGetServerGroupInfoRsp& default_instance();

  void Swap(TCrossCollaborateGetServerGroupInfoRsp* other);

  // implements Message ----------------------------------------------

  TCrossCollaborateGetServerGroupInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossCollaborateGetServerGroupInfoRsp& from);
  void MergeFrom(const TCrossCollaborateGetServerGroupInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GroupId = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetServerGroupInfoRsp</name>
  	<Function>
  		<name>groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossCollaborateGetServerGroupInfoRsp</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // @@protoc_insertion_point(class_scope:pb.TCrossCollaborateGetServerGroupInfoRsp)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* serverid_;
  ::google::protobuf::uint32 groupid_;
  friend void  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto();

  void InitAsDefaultInstance();
  static TCrossCollaborateGetServerGroupInfoRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TCrossCollaborateStageInfo

// optional .pb.ECrossCollaborateStage Stage = 1;
inline bool TCrossCollaborateStageInfo::has_stage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateStageInfo::set_has_stage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateStageInfo::clear_has_stage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateStageInfo::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
inline ::pb::ECrossCollaborateStage TCrossCollaborateStageInfo::stage() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateStageInfo.Stage)
  return static_cast< ::pb::ECrossCollaborateStage >(stage_);
}
inline void TCrossCollaborateStageInfo::set_stage(::pb::ECrossCollaborateStage value) {
  assert(::pb::ECrossCollaborateStage_IsValid(value));
  set_has_stage();
  stage_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateStageInfo.Stage)
}

// optional uint64 BeginTime = 2;
inline bool TCrossCollaborateStageInfo::has_begintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossCollaborateStageInfo::set_has_begintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossCollaborateStageInfo::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossCollaborateStageInfo::clear_begintime() {
  begintime_ = GOOGLE_ULONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::uint64 TCrossCollaborateStageInfo::begintime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateStageInfo.BeginTime)
  return begintime_;
}
inline void TCrossCollaborateStageInfo::set_begintime(::google::protobuf::uint64 value) {
  set_has_begintime();
  begintime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateStageInfo.BeginTime)
}

// -------------------------------------------------------------------

// TCrossCollaboratePosInfo

// optional uint32 Pos = 1;
inline bool TCrossCollaboratePosInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaboratePosInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaboratePosInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaboratePosInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TCrossCollaboratePosInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaboratePosInfo.Pos)
  return pos_;
}
inline void TCrossCollaboratePosInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaboratePosInfo.Pos)
}

// optional uint32 Hid = 2;
inline bool TCrossCollaboratePosInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossCollaboratePosInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossCollaboratePosInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossCollaboratePosInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TCrossCollaboratePosInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaboratePosInfo.Hid)
  return hid_;
}
inline void TCrossCollaboratePosInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaboratePosInfo.Hid)
}

// -------------------------------------------------------------------

// TCrossCollaborateFormationInfo

// optional uint32 FormationId = 1;
inline bool TCrossCollaborateFormationInfo::has_formationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateFormationInfo::set_has_formationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateFormationInfo::clear_has_formationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateFormationInfo::clear_formationid() {
  formationid_ = 0u;
  clear_has_formationid();
}
inline ::google::protobuf::uint32 TCrossCollaborateFormationInfo::formationid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateFormationInfo.FormationId)
  return formationid_;
}
inline void TCrossCollaborateFormationInfo::set_formationid(::google::protobuf::uint32 value) {
  set_has_formationid();
  formationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateFormationInfo.FormationId)
}

// repeated .pb.TCrossCollaboratePosInfo PosArr = 2;
inline int TCrossCollaborateFormationInfo::posarr_size() const {
  return posarr_.size();
}
inline void TCrossCollaborateFormationInfo::clear_posarr() {
  posarr_.Clear();
}
inline const ::pb::TCrossCollaboratePosInfo& TCrossCollaborateFormationInfo::posarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateFormationInfo.PosArr)
  return posarr_.Get(index);
}
inline ::pb::TCrossCollaboratePosInfo* TCrossCollaborateFormationInfo::mutable_posarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateFormationInfo.PosArr)
  return posarr_.Mutable(index);
}
inline ::pb::TCrossCollaboratePosInfo* TCrossCollaborateFormationInfo::add_posarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateFormationInfo.PosArr)
  return posarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaboratePosInfo >&
TCrossCollaborateFormationInfo::posarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateFormationInfo.PosArr)
  return posarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaboratePosInfo >*
TCrossCollaborateFormationInfo::mutable_posarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateFormationInfo.PosArr)
  return &posarr_;
}

// -------------------------------------------------------------------

// TCrossCollaborateEnemyFormation

// optional uint32 FormationId = 1;
inline bool TCrossCollaborateEnemyFormation::has_formationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateEnemyFormation::set_has_formationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateEnemyFormation::clear_has_formationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateEnemyFormation::clear_formationid() {
  formationid_ = 0u;
  clear_has_formationid();
}
inline ::google::protobuf::uint32 TCrossCollaborateEnemyFormation::formationid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateEnemyFormation.FormationId)
  return formationid_;
}
inline void TCrossCollaborateEnemyFormation::set_formationid(::google::protobuf::uint32 value) {
  set_has_formationid();
  formationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateEnemyFormation.FormationId)
}

// repeated .pb.TUnitInfo UnitArr = 2;
inline int TCrossCollaborateEnemyFormation::unitarr_size() const {
  return unitarr_.size();
}
inline void TCrossCollaborateEnemyFormation::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TUnitInfo& TCrossCollaborateEnemyFormation::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateEnemyFormation.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TUnitInfo* TCrossCollaborateEnemyFormation::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateEnemyFormation.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TUnitInfo* TCrossCollaborateEnemyFormation::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateEnemyFormation.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >&
TCrossCollaborateEnemyFormation::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateEnemyFormation.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >*
TCrossCollaborateEnemyFormation::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateEnemyFormation.UnitArr)
  return &unitarr_;
}

// optional uint64 FightForce = 3;
inline bool TCrossCollaborateEnemyFormation::has_fightforce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossCollaborateEnemyFormation::set_has_fightforce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossCollaborateEnemyFormation::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossCollaborateEnemyFormation::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TCrossCollaborateEnemyFormation::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateEnemyFormation.FightForce)
  return fightforce_;
}
inline void TCrossCollaborateEnemyFormation::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateEnemyFormation.FightForce)
}

// -------------------------------------------------------------------

// TCrossCollaborateInviteUserInfo

// optional .pb.TUserSimpleInfoWithStatus UserInfo = 1;
inline bool TCrossCollaborateInviteUserInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateInviteUserInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateInviteUserInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateInviteUserInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfoWithStatus::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfoWithStatus& TCrossCollaborateInviteUserInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateInviteUserInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfoWithStatus* TCrossCollaborateInviteUserInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfoWithStatus;
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateInviteUserInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfoWithStatus* TCrossCollaborateInviteUserInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfoWithStatus* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TCrossCollaborateInviteUserInfo::set_allocated_userinfo(::pb::TUserSimpleInfoWithStatus* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossCollaborateInviteUserInfo.UserInfo)
}

// optional uint64 TeamId = 2;
inline bool TCrossCollaborateInviteUserInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossCollaborateInviteUserInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossCollaborateInviteUserInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossCollaborateInviteUserInfo::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TCrossCollaborateInviteUserInfo::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateInviteUserInfo.TeamId)
  return teamid_;
}
inline void TCrossCollaborateInviteUserInfo::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateInviteUserInfo.TeamId)
}

// -------------------------------------------------------------------

// TCrossCollaborateUserInfo

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TCrossCollaborateUserInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateUserInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateUserInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateUserInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TCrossCollaborateUserInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateUserInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossCollaborateUserInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateUserInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossCollaborateUserInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TCrossCollaborateUserInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossCollaborateUserInfo.UserInfo)
}

// optional uint32 Order = 2;
inline bool TCrossCollaborateUserInfo::has_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossCollaborateUserInfo::set_has_order() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossCollaborateUserInfo::clear_has_order() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossCollaborateUserInfo::clear_order() {
  order_ = 0u;
  clear_has_order();
}
inline ::google::protobuf::uint32 TCrossCollaborateUserInfo::order() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateUserInfo.Order)
  return order_;
}
inline void TCrossCollaborateUserInfo::set_order(::google::protobuf::uint32 value) {
  set_has_order();
  order_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateUserInfo.Order)
}

// optional uint32 Score = 3;
inline bool TCrossCollaborateUserInfo::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossCollaborateUserInfo::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossCollaborateUserInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossCollaborateUserInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TCrossCollaborateUserInfo::score() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateUserInfo.Score)
  return score_;
}
inline void TCrossCollaborateUserInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateUserInfo.Score)
}

// optional uint64 TotalFightForce = 4;
inline bool TCrossCollaborateUserInfo::has_totalfightforce() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossCollaborateUserInfo::set_has_totalfightforce() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossCollaborateUserInfo::clear_has_totalfightforce() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossCollaborateUserInfo::clear_totalfightforce() {
  totalfightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_totalfightforce();
}
inline ::google::protobuf::uint64 TCrossCollaborateUserInfo::totalfightforce() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateUserInfo.TotalFightForce)
  return totalfightforce_;
}
inline void TCrossCollaborateUserInfo::set_totalfightforce(::google::protobuf::uint64 value) {
  set_has_totalfightforce();
  totalfightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateUserInfo.TotalFightForce)
}

// -------------------------------------------------------------------

// TCrossCollaborateTeamInfo

// optional uint64 TeamId = 1;
inline bool TCrossCollaborateTeamInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateTeamInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateTeamInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateTeamInfo::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TCrossCollaborateTeamInfo::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateTeamInfo.TeamId)
  return teamid_;
}
inline void TCrossCollaborateTeamInfo::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateTeamInfo.TeamId)
}

// optional uint64 LeaderUid = 2;
inline bool TCrossCollaborateTeamInfo::has_leaderuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossCollaborateTeamInfo::set_has_leaderuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossCollaborateTeamInfo::clear_has_leaderuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossCollaborateTeamInfo::clear_leaderuid() {
  leaderuid_ = GOOGLE_ULONGLONG(0);
  clear_has_leaderuid();
}
inline ::google::protobuf::uint64 TCrossCollaborateTeamInfo::leaderuid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateTeamInfo.LeaderUid)
  return leaderuid_;
}
inline void TCrossCollaborateTeamInfo::set_leaderuid(::google::protobuf::uint64 value) {
  set_has_leaderuid();
  leaderuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateTeamInfo.LeaderUid)
}

// optional uint64 NeedFightForce = 3;
inline bool TCrossCollaborateTeamInfo::has_needfightforce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossCollaborateTeamInfo::set_has_needfightforce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossCollaborateTeamInfo::clear_has_needfightforce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossCollaborateTeamInfo::clear_needfightforce() {
  needfightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_needfightforce();
}
inline ::google::protobuf::uint64 TCrossCollaborateTeamInfo::needfightforce() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateTeamInfo.NeedFightForce)
  return needfightforce_;
}
inline void TCrossCollaborateTeamInfo::set_needfightforce(::google::protobuf::uint64 value) {
  set_has_needfightforce();
  needfightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateTeamInfo.NeedFightForce)
}

// optional .pb.ECrossCollaborateStatus TeamStatus = 4;
inline bool TCrossCollaborateTeamInfo::has_teamstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossCollaborateTeamInfo::set_has_teamstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossCollaborateTeamInfo::clear_has_teamstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossCollaborateTeamInfo::clear_teamstatus() {
  teamstatus_ = 0;
  clear_has_teamstatus();
}
inline ::pb::ECrossCollaborateStatus TCrossCollaborateTeamInfo::teamstatus() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateTeamInfo.TeamStatus)
  return static_cast< ::pb::ECrossCollaborateStatus >(teamstatus_);
}
inline void TCrossCollaborateTeamInfo::set_teamstatus(::pb::ECrossCollaborateStatus value) {
  assert(::pb::ECrossCollaborateStatus_IsValid(value));
  set_has_teamstatus();
  teamstatus_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateTeamInfo.TeamStatus)
}

// repeated .pb.TCrossCollaborateUserInfo UserArr = 5;
inline int TCrossCollaborateTeamInfo::userarr_size() const {
  return userarr_.size();
}
inline void TCrossCollaborateTeamInfo::clear_userarr() {
  userarr_.Clear();
}
inline const ::pb::TCrossCollaborateUserInfo& TCrossCollaborateTeamInfo::userarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateTeamInfo.UserArr)
  return userarr_.Get(index);
}
inline ::pb::TCrossCollaborateUserInfo* TCrossCollaborateTeamInfo::mutable_userarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateTeamInfo.UserArr)
  return userarr_.Mutable(index);
}
inline ::pb::TCrossCollaborateUserInfo* TCrossCollaborateTeamInfo::add_userarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateTeamInfo.UserArr)
  return userarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateUserInfo >&
TCrossCollaborateTeamInfo::userarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateTeamInfo.UserArr)
  return userarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateUserInfo >*
TCrossCollaborateTeamInfo::mutable_userarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateTeamInfo.UserArr)
  return &userarr_;
}

// -------------------------------------------------------------------

// TCrossCollaborateUnitViewInfo

// required uint32 Hid = 1;
inline bool TCrossCollaborateUnitViewInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateUnitViewInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateUnitViewInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateUnitViewInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TCrossCollaborateUnitViewInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateUnitViewInfo.Hid)
  return hid_;
}
inline void TCrossCollaborateUnitViewInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateUnitViewInfo.Hid)
}

// required uint32 Pos = 2;
inline bool TCrossCollaborateUnitViewInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossCollaborateUnitViewInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossCollaborateUnitViewInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossCollaborateUnitViewInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TCrossCollaborateUnitViewInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateUnitViewInfo.Pos)
  return pos_;
}
inline void TCrossCollaborateUnitViewInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateUnitViewInfo.Pos)
}

// required uint32 Level = 3;
inline bool TCrossCollaborateUnitViewInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossCollaborateUnitViewInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossCollaborateUnitViewInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossCollaborateUnitViewInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TCrossCollaborateUnitViewInfo::level() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateUnitViewInfo.Level)
  return level_;
}
inline void TCrossCollaborateUnitViewInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateUnitViewInfo.Level)
}

// optional uint32 Star = 4;
inline bool TCrossCollaborateUnitViewInfo::has_star() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossCollaborateUnitViewInfo::set_has_star() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossCollaborateUnitViewInfo::clear_has_star() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossCollaborateUnitViewInfo::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 TCrossCollaborateUnitViewInfo::star() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateUnitViewInfo.Star)
  return star_;
}
inline void TCrossCollaborateUnitViewInfo::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateUnitViewInfo.Star)
}

// optional uint64 CurHp = 5;
inline bool TCrossCollaborateUnitViewInfo::has_curhp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossCollaborateUnitViewInfo::set_has_curhp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossCollaborateUnitViewInfo::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossCollaborateUnitViewInfo::clear_curhp() {
  curhp_ = GOOGLE_ULONGLONG(0);
  clear_has_curhp();
}
inline ::google::protobuf::uint64 TCrossCollaborateUnitViewInfo::curhp() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateUnitViewInfo.CurHp)
  return curhp_;
}
inline void TCrossCollaborateUnitViewInfo::set_curhp(::google::protobuf::uint64 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateUnitViewInfo.CurHp)
}

// optional uint64 MaxHp = 6;
inline bool TCrossCollaborateUnitViewInfo::has_maxhp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCrossCollaborateUnitViewInfo::set_has_maxhp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCrossCollaborateUnitViewInfo::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCrossCollaborateUnitViewInfo::clear_maxhp() {
  maxhp_ = GOOGLE_ULONGLONG(0);
  clear_has_maxhp();
}
inline ::google::protobuf::uint64 TCrossCollaborateUnitViewInfo::maxhp() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateUnitViewInfo.MaxHp)
  return maxhp_;
}
inline void TCrossCollaborateUnitViewInfo::set_maxhp(::google::protobuf::uint64 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateUnitViewInfo.MaxHp)
}

// optional uint64 DamageOut = 7;
inline bool TCrossCollaborateUnitViewInfo::has_damageout() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCrossCollaborateUnitViewInfo::set_has_damageout() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCrossCollaborateUnitViewInfo::clear_has_damageout() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCrossCollaborateUnitViewInfo::clear_damageout() {
  damageout_ = GOOGLE_ULONGLONG(0);
  clear_has_damageout();
}
inline ::google::protobuf::uint64 TCrossCollaborateUnitViewInfo::damageout() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateUnitViewInfo.DamageOut)
  return damageout_;
}
inline void TCrossCollaborateUnitViewInfo::set_damageout(::google::protobuf::uint64 value) {
  set_has_damageout();
  damageout_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateUnitViewInfo.DamageOut)
}

// optional uint64 DamageIn = 8;
inline bool TCrossCollaborateUnitViewInfo::has_damagein() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TCrossCollaborateUnitViewInfo::set_has_damagein() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TCrossCollaborateUnitViewInfo::clear_has_damagein() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TCrossCollaborateUnitViewInfo::clear_damagein() {
  damagein_ = GOOGLE_ULONGLONG(0);
  clear_has_damagein();
}
inline ::google::protobuf::uint64 TCrossCollaborateUnitViewInfo::damagein() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateUnitViewInfo.DamageIn)
  return damagein_;
}
inline void TCrossCollaborateUnitViewInfo::set_damagein(::google::protobuf::uint64 value) {
  set_has_damagein();
  damagein_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateUnitViewInfo.DamageIn)
}

// optional uint32 Htid = 9;
inline bool TCrossCollaborateUnitViewInfo::has_htid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TCrossCollaborateUnitViewInfo::set_has_htid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TCrossCollaborateUnitViewInfo::clear_has_htid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TCrossCollaborateUnitViewInfo::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TCrossCollaborateUnitViewInfo::htid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateUnitViewInfo.Htid)
  return htid_;
}
inline void TCrossCollaborateUnitViewInfo::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateUnitViewInfo.Htid)
}

// optional uint64 HealOut = 10;
inline bool TCrossCollaborateUnitViewInfo::has_healout() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TCrossCollaborateUnitViewInfo::set_has_healout() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TCrossCollaborateUnitViewInfo::clear_has_healout() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TCrossCollaborateUnitViewInfo::clear_healout() {
  healout_ = GOOGLE_ULONGLONG(0);
  clear_has_healout();
}
inline ::google::protobuf::uint64 TCrossCollaborateUnitViewInfo::healout() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateUnitViewInfo.HealOut)
  return healout_;
}
inline void TCrossCollaborateUnitViewInfo::set_healout(::google::protobuf::uint64 value) {
  set_has_healout();
  healout_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateUnitViewInfo.HealOut)
}

// -------------------------------------------------------------------

// TCrossCollaborateArmyViewInfo

// repeated .pb.TCrossCollaborateUnitViewInfo UnitArr = 1;
inline int TCrossCollaborateArmyViewInfo::unitarr_size() const {
  return unitarr_.size();
}
inline void TCrossCollaborateArmyViewInfo::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TCrossCollaborateUnitViewInfo& TCrossCollaborateArmyViewInfo::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateArmyViewInfo.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TCrossCollaborateUnitViewInfo* TCrossCollaborateArmyViewInfo::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateArmyViewInfo.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TCrossCollaborateUnitViewInfo* TCrossCollaborateArmyViewInfo::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateArmyViewInfo.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateUnitViewInfo >&
TCrossCollaborateArmyViewInfo::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateArmyViewInfo.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateUnitViewInfo >*
TCrossCollaborateArmyViewInfo::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateArmyViewInfo.UnitArr)
  return &unitarr_;
}

// -------------------------------------------------------------------

// TCrossCollaborateRecordInfo

// optional uint32 FormationId = 1;
inline bool TCrossCollaborateRecordInfo::has_formationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateRecordInfo::set_has_formationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateRecordInfo::clear_has_formationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateRecordInfo::clear_formationid() {
  formationid_ = 0u;
  clear_has_formationid();
}
inline ::google::protobuf::uint32 TCrossCollaborateRecordInfo::formationid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateRecordInfo.FormationId)
  return formationid_;
}
inline void TCrossCollaborateRecordInfo::set_formationid(::google::protobuf::uint32 value) {
  set_has_formationid();
  formationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateRecordInfo.FormationId)
}

// optional uint64 RecordId = 2;
inline bool TCrossCollaborateRecordInfo::has_recordid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossCollaborateRecordInfo::set_has_recordid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossCollaborateRecordInfo::clear_has_recordid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossCollaborateRecordInfo::clear_recordid() {
  recordid_ = GOOGLE_ULONGLONG(0);
  clear_has_recordid();
}
inline ::google::protobuf::uint64 TCrossCollaborateRecordInfo::recordid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateRecordInfo.RecordId)
  return recordid_;
}
inline void TCrossCollaborateRecordInfo::set_recordid(::google::protobuf::uint64 value) {
  set_has_recordid();
  recordid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateRecordInfo.RecordId)
}

// optional bool IsWin = 3;
inline bool TCrossCollaborateRecordInfo::has_iswin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossCollaborateRecordInfo::set_has_iswin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossCollaborateRecordInfo::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossCollaborateRecordInfo::clear_iswin() {
  iswin_ = false;
  clear_has_iswin();
}
inline bool TCrossCollaborateRecordInfo::iswin() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateRecordInfo.IsWin)
  return iswin_;
}
inline void TCrossCollaborateRecordInfo::set_iswin(bool value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateRecordInfo.IsWin)
}

// repeated .pb.TCrossCollaborateArmyViewInfo AttackArmyArr = 4;
inline int TCrossCollaborateRecordInfo::attackarmyarr_size() const {
  return attackarmyarr_.size();
}
inline void TCrossCollaborateRecordInfo::clear_attackarmyarr() {
  attackarmyarr_.Clear();
}
inline const ::pb::TCrossCollaborateArmyViewInfo& TCrossCollaborateRecordInfo::attackarmyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateRecordInfo.AttackArmyArr)
  return attackarmyarr_.Get(index);
}
inline ::pb::TCrossCollaborateArmyViewInfo* TCrossCollaborateRecordInfo::mutable_attackarmyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateRecordInfo.AttackArmyArr)
  return attackarmyarr_.Mutable(index);
}
inline ::pb::TCrossCollaborateArmyViewInfo* TCrossCollaborateRecordInfo::add_attackarmyarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateRecordInfo.AttackArmyArr)
  return attackarmyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateArmyViewInfo >&
TCrossCollaborateRecordInfo::attackarmyarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateRecordInfo.AttackArmyArr)
  return attackarmyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateArmyViewInfo >*
TCrossCollaborateRecordInfo::mutable_attackarmyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateRecordInfo.AttackArmyArr)
  return &attackarmyarr_;
}

// repeated .pb.TCrossCollaborateArmyViewInfo DefendArmyArr = 5;
inline int TCrossCollaborateRecordInfo::defendarmyarr_size() const {
  return defendarmyarr_.size();
}
inline void TCrossCollaborateRecordInfo::clear_defendarmyarr() {
  defendarmyarr_.Clear();
}
inline const ::pb::TCrossCollaborateArmyViewInfo& TCrossCollaborateRecordInfo::defendarmyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateRecordInfo.DefendArmyArr)
  return defendarmyarr_.Get(index);
}
inline ::pb::TCrossCollaborateArmyViewInfo* TCrossCollaborateRecordInfo::mutable_defendarmyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateRecordInfo.DefendArmyArr)
  return defendarmyarr_.Mutable(index);
}
inline ::pb::TCrossCollaborateArmyViewInfo* TCrossCollaborateRecordInfo::add_defendarmyarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateRecordInfo.DefendArmyArr)
  return defendarmyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateArmyViewInfo >&
TCrossCollaborateRecordInfo::defendarmyarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateRecordInfo.DefendArmyArr)
  return defendarmyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateArmyViewInfo >*
TCrossCollaborateRecordInfo::mutable_defendarmyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateRecordInfo.DefendArmyArr)
  return &defendarmyarr_;
}

// -------------------------------------------------------------------

// TCrossCollaborateBattleRecord

// optional .pb.TUserSimpleInfo AttackUserInfo = 1;
inline bool TCrossCollaborateBattleRecord::has_attackuserinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateBattleRecord::set_has_attackuserinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateBattleRecord::clear_has_attackuserinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateBattleRecord::clear_attackuserinfo() {
  if (attackuserinfo_ != NULL) attackuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_attackuserinfo();
}
inline const ::pb::TUserSimpleInfo& TCrossCollaborateBattleRecord::attackuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateBattleRecord.AttackUserInfo)
  return attackuserinfo_ != NULL ? *attackuserinfo_ : *default_instance_->attackuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossCollaborateBattleRecord::mutable_attackuserinfo() {
  set_has_attackuserinfo();
  if (attackuserinfo_ == NULL) attackuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateBattleRecord.AttackUserInfo)
  return attackuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossCollaborateBattleRecord::release_attackuserinfo() {
  clear_has_attackuserinfo();
  ::pb::TUserSimpleInfo* temp = attackuserinfo_;
  attackuserinfo_ = NULL;
  return temp;
}
inline void TCrossCollaborateBattleRecord::set_allocated_attackuserinfo(::pb::TUserSimpleInfo* attackuserinfo) {
  delete attackuserinfo_;
  attackuserinfo_ = attackuserinfo;
  if (attackuserinfo) {
    set_has_attackuserinfo();
  } else {
    clear_has_attackuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossCollaborateBattleRecord.AttackUserInfo)
}

// optional .pb.TUserSimpleInfo DefendUserInfo = 2;
inline bool TCrossCollaborateBattleRecord::has_defenduserinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossCollaborateBattleRecord::set_has_defenduserinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossCollaborateBattleRecord::clear_has_defenduserinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossCollaborateBattleRecord::clear_defenduserinfo() {
  if (defenduserinfo_ != NULL) defenduserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_defenduserinfo();
}
inline const ::pb::TUserSimpleInfo& TCrossCollaborateBattleRecord::defenduserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateBattleRecord.DefendUserInfo)
  return defenduserinfo_ != NULL ? *defenduserinfo_ : *default_instance_->defenduserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossCollaborateBattleRecord::mutable_defenduserinfo() {
  set_has_defenduserinfo();
  if (defenduserinfo_ == NULL) defenduserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateBattleRecord.DefendUserInfo)
  return defenduserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossCollaborateBattleRecord::release_defenduserinfo() {
  clear_has_defenduserinfo();
  ::pb::TUserSimpleInfo* temp = defenduserinfo_;
  defenduserinfo_ = NULL;
  return temp;
}
inline void TCrossCollaborateBattleRecord::set_allocated_defenduserinfo(::pb::TUserSimpleInfo* defenduserinfo) {
  delete defenduserinfo_;
  defenduserinfo_ = defenduserinfo;
  if (defenduserinfo) {
    set_has_defenduserinfo();
  } else {
    clear_has_defenduserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossCollaborateBattleRecord.DefendUserInfo)
}

// optional uint32 AttackContinueWin = 3;
inline bool TCrossCollaborateBattleRecord::has_attackcontinuewin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossCollaborateBattleRecord::set_has_attackcontinuewin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossCollaborateBattleRecord::clear_has_attackcontinuewin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossCollaborateBattleRecord::clear_attackcontinuewin() {
  attackcontinuewin_ = 0u;
  clear_has_attackcontinuewin();
}
inline ::google::protobuf::uint32 TCrossCollaborateBattleRecord::attackcontinuewin() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateBattleRecord.AttackContinueWin)
  return attackcontinuewin_;
}
inline void TCrossCollaborateBattleRecord::set_attackcontinuewin(::google::protobuf::uint32 value) {
  set_has_attackcontinuewin();
  attackcontinuewin_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateBattleRecord.AttackContinueWin)
}

// optional uint32 AttackScoreBefore = 4;
inline bool TCrossCollaborateBattleRecord::has_attackscorebefore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossCollaborateBattleRecord::set_has_attackscorebefore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossCollaborateBattleRecord::clear_has_attackscorebefore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossCollaborateBattleRecord::clear_attackscorebefore() {
  attackscorebefore_ = 0u;
  clear_has_attackscorebefore();
}
inline ::google::protobuf::uint32 TCrossCollaborateBattleRecord::attackscorebefore() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateBattleRecord.AttackScoreBefore)
  return attackscorebefore_;
}
inline void TCrossCollaborateBattleRecord::set_attackscorebefore(::google::protobuf::uint32 value) {
  set_has_attackscorebefore();
  attackscorebefore_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateBattleRecord.AttackScoreBefore)
}

// optional uint32 AttackScoreAfter = 5;
inline bool TCrossCollaborateBattleRecord::has_attackscoreafter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossCollaborateBattleRecord::set_has_attackscoreafter() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossCollaborateBattleRecord::clear_has_attackscoreafter() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossCollaborateBattleRecord::clear_attackscoreafter() {
  attackscoreafter_ = 0u;
  clear_has_attackscoreafter();
}
inline ::google::protobuf::uint32 TCrossCollaborateBattleRecord::attackscoreafter() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateBattleRecord.AttackScoreAfter)
  return attackscoreafter_;
}
inline void TCrossCollaborateBattleRecord::set_attackscoreafter(::google::protobuf::uint32 value) {
  set_has_attackscoreafter();
  attackscoreafter_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateBattleRecord.AttackScoreAfter)
}

// optional uint32 DefendScoreBefore = 6;
inline bool TCrossCollaborateBattleRecord::has_defendscorebefore() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCrossCollaborateBattleRecord::set_has_defendscorebefore() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCrossCollaborateBattleRecord::clear_has_defendscorebefore() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCrossCollaborateBattleRecord::clear_defendscorebefore() {
  defendscorebefore_ = 0u;
  clear_has_defendscorebefore();
}
inline ::google::protobuf::uint32 TCrossCollaborateBattleRecord::defendscorebefore() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateBattleRecord.DefendScoreBefore)
  return defendscorebefore_;
}
inline void TCrossCollaborateBattleRecord::set_defendscorebefore(::google::protobuf::uint32 value) {
  set_has_defendscorebefore();
  defendscorebefore_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateBattleRecord.DefendScoreBefore)
}

// optional uint32 DefendScoreAfter = 7;
inline bool TCrossCollaborateBattleRecord::has_defendscoreafter() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCrossCollaborateBattleRecord::set_has_defendscoreafter() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCrossCollaborateBattleRecord::clear_has_defendscoreafter() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCrossCollaborateBattleRecord::clear_defendscoreafter() {
  defendscoreafter_ = 0u;
  clear_has_defendscoreafter();
}
inline ::google::protobuf::uint32 TCrossCollaborateBattleRecord::defendscoreafter() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateBattleRecord.DefendScoreAfter)
  return defendscoreafter_;
}
inline void TCrossCollaborateBattleRecord::set_defendscoreafter(::google::protobuf::uint32 value) {
  set_has_defendscoreafter();
  defendscoreafter_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateBattleRecord.DefendScoreAfter)
}

// optional uint64 RecordTime = 8;
inline bool TCrossCollaborateBattleRecord::has_recordtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TCrossCollaborateBattleRecord::set_has_recordtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TCrossCollaborateBattleRecord::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TCrossCollaborateBattleRecord::clear_recordtime() {
  recordtime_ = GOOGLE_ULONGLONG(0);
  clear_has_recordtime();
}
inline ::google::protobuf::uint64 TCrossCollaborateBattleRecord::recordtime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateBattleRecord.RecordTime)
  return recordtime_;
}
inline void TCrossCollaborateBattleRecord::set_recordtime(::google::protobuf::uint64 value) {
  set_has_recordtime();
  recordtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateBattleRecord.RecordTime)
}

// repeated .pb.TCrossCollaborateRecordInfo RecordArr = 9;
inline int TCrossCollaborateBattleRecord::recordarr_size() const {
  return recordarr_.size();
}
inline void TCrossCollaborateBattleRecord::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TCrossCollaborateRecordInfo& TCrossCollaborateBattleRecord::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateBattleRecord.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TCrossCollaborateRecordInfo* TCrossCollaborateBattleRecord::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateBattleRecord.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TCrossCollaborateRecordInfo* TCrossCollaborateBattleRecord::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateBattleRecord.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateRecordInfo >&
TCrossCollaborateBattleRecord::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateBattleRecord.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateRecordInfo >*
TCrossCollaborateBattleRecord::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateBattleRecord.RecordArr)
  return &recordarr_;
}

// -------------------------------------------------------------------

// TCrossCollaborateSimpleRecordInfo

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TCrossCollaborateSimpleRecordInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateSimpleRecordInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateSimpleRecordInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateSimpleRecordInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TCrossCollaborateSimpleRecordInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateSimpleRecordInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossCollaborateSimpleRecordInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateSimpleRecordInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossCollaborateSimpleRecordInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TCrossCollaborateSimpleRecordInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossCollaborateSimpleRecordInfo.UserInfo)
}

// optional uint32 WinNum = 2;
inline bool TCrossCollaborateSimpleRecordInfo::has_winnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossCollaborateSimpleRecordInfo::set_has_winnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossCollaborateSimpleRecordInfo::clear_has_winnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossCollaborateSimpleRecordInfo::clear_winnum() {
  winnum_ = 0u;
  clear_has_winnum();
}
inline ::google::protobuf::uint32 TCrossCollaborateSimpleRecordInfo::winnum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateSimpleRecordInfo.WinNum)
  return winnum_;
}
inline void TCrossCollaborateSimpleRecordInfo::set_winnum(::google::protobuf::uint32 value) {
  set_has_winnum();
  winnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateSimpleRecordInfo.WinNum)
}

// -------------------------------------------------------------------

// TCrossCollaborateSimpleBattleRecord

// repeated .pb.TCrossCollaborateSimpleRecordInfo AttackUserInfoArr = 1;
inline int TCrossCollaborateSimpleBattleRecord::attackuserinfoarr_size() const {
  return attackuserinfoarr_.size();
}
inline void TCrossCollaborateSimpleBattleRecord::clear_attackuserinfoarr() {
  attackuserinfoarr_.Clear();
}
inline const ::pb::TCrossCollaborateSimpleRecordInfo& TCrossCollaborateSimpleBattleRecord::attackuserinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateSimpleBattleRecord.AttackUserInfoArr)
  return attackuserinfoarr_.Get(index);
}
inline ::pb::TCrossCollaborateSimpleRecordInfo* TCrossCollaborateSimpleBattleRecord::mutable_attackuserinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateSimpleBattleRecord.AttackUserInfoArr)
  return attackuserinfoarr_.Mutable(index);
}
inline ::pb::TCrossCollaborateSimpleRecordInfo* TCrossCollaborateSimpleBattleRecord::add_attackuserinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateSimpleBattleRecord.AttackUserInfoArr)
  return attackuserinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateSimpleRecordInfo >&
TCrossCollaborateSimpleBattleRecord::attackuserinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateSimpleBattleRecord.AttackUserInfoArr)
  return attackuserinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateSimpleRecordInfo >*
TCrossCollaborateSimpleBattleRecord::mutable_attackuserinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateSimpleBattleRecord.AttackUserInfoArr)
  return &attackuserinfoarr_;
}

// repeated .pb.TCrossCollaborateSimpleRecordInfo DefendUserInfoArr = 2;
inline int TCrossCollaborateSimpleBattleRecord::defenduserinfoarr_size() const {
  return defenduserinfoarr_.size();
}
inline void TCrossCollaborateSimpleBattleRecord::clear_defenduserinfoarr() {
  defenduserinfoarr_.Clear();
}
inline const ::pb::TCrossCollaborateSimpleRecordInfo& TCrossCollaborateSimpleBattleRecord::defenduserinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateSimpleBattleRecord.DefendUserInfoArr)
  return defenduserinfoarr_.Get(index);
}
inline ::pb::TCrossCollaborateSimpleRecordInfo* TCrossCollaborateSimpleBattleRecord::mutable_defenduserinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateSimpleBattleRecord.DefendUserInfoArr)
  return defenduserinfoarr_.Mutable(index);
}
inline ::pb::TCrossCollaborateSimpleRecordInfo* TCrossCollaborateSimpleBattleRecord::add_defenduserinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateSimpleBattleRecord.DefendUserInfoArr)
  return defenduserinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateSimpleRecordInfo >&
TCrossCollaborateSimpleBattleRecord::defenduserinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateSimpleBattleRecord.DefendUserInfoArr)
  return defenduserinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateSimpleRecordInfo >*
TCrossCollaborateSimpleBattleRecord::mutable_defenduserinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateSimpleBattleRecord.DefendUserInfoArr)
  return &defenduserinfoarr_;
}

// optional uint64 RecordTime = 3;
inline bool TCrossCollaborateSimpleBattleRecord::has_recordtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossCollaborateSimpleBattleRecord::set_has_recordtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossCollaborateSimpleBattleRecord::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossCollaborateSimpleBattleRecord::clear_recordtime() {
  recordtime_ = GOOGLE_ULONGLONG(0);
  clear_has_recordtime();
}
inline ::google::protobuf::uint64 TCrossCollaborateSimpleBattleRecord::recordtime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateSimpleBattleRecord.RecordTime)
  return recordtime_;
}
inline void TCrossCollaborateSimpleBattleRecord::set_recordtime(::google::protobuf::uint64 value) {
  set_has_recordtime();
  recordtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateSimpleBattleRecord.RecordTime)
}

// optional uint64 TeamId = 4;
inline bool TCrossCollaborateSimpleBattleRecord::has_teamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossCollaborateSimpleBattleRecord::set_has_teamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossCollaborateSimpleBattleRecord::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossCollaborateSimpleBattleRecord::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TCrossCollaborateSimpleBattleRecord::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateSimpleBattleRecord.TeamId)
  return teamid_;
}
inline void TCrossCollaborateSimpleBattleRecord::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateSimpleBattleRecord.TeamId)
}

// optional uint32 Round = 5;
inline bool TCrossCollaborateSimpleBattleRecord::has_round() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossCollaborateSimpleBattleRecord::set_has_round() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossCollaborateSimpleBattleRecord::clear_has_round() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossCollaborateSimpleBattleRecord::clear_round() {
  round_ = 0u;
  clear_has_round();
}
inline ::google::protobuf::uint32 TCrossCollaborateSimpleBattleRecord::round() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateSimpleBattleRecord.Round)
  return round_;
}
inline void TCrossCollaborateSimpleBattleRecord::set_round(::google::protobuf::uint32 value) {
  set_has_round();
  round_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateSimpleBattleRecord.Round)
}

// -------------------------------------------------------------------

// TCrossCollaborateGetStageInfoRsp

// repeated .pb.TCrossCollaborateStageInfo StageArr = 1;
inline int TCrossCollaborateGetStageInfoRsp::stagearr_size() const {
  return stagearr_.size();
}
inline void TCrossCollaborateGetStageInfoRsp::clear_stagearr() {
  stagearr_.Clear();
}
inline const ::pb::TCrossCollaborateStageInfo& TCrossCollaborateGetStageInfoRsp::stagearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetStageInfoRsp.StageArr)
  return stagearr_.Get(index);
}
inline ::pb::TCrossCollaborateStageInfo* TCrossCollaborateGetStageInfoRsp::mutable_stagearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateGetStageInfoRsp.StageArr)
  return stagearr_.Mutable(index);
}
inline ::pb::TCrossCollaborateStageInfo* TCrossCollaborateGetStageInfoRsp::add_stagearr() {
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateGetStageInfoRsp.StageArr)
  return stagearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateStageInfo >&
TCrossCollaborateGetStageInfoRsp::stagearr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateGetStageInfoRsp.StageArr)
  return stagearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateStageInfo >*
TCrossCollaborateGetStageInfoRsp::mutable_stagearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateGetStageInfoRsp.StageArr)
  return &stagearr_;
}

// optional .pb.TCrossCollaborateUserInfo UserInfo = 2;
inline bool TCrossCollaborateGetStageInfoRsp::has_userinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossCollaborateGetStageInfoRsp::set_has_userinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossCollaborateGetStageInfoRsp::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossCollaborateGetStageInfoRsp::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TCrossCollaborateUserInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TCrossCollaborateUserInfo& TCrossCollaborateGetStageInfoRsp::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetStageInfoRsp.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TCrossCollaborateUserInfo* TCrossCollaborateGetStageInfoRsp::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TCrossCollaborateUserInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateGetStageInfoRsp.UserInfo)
  return userinfo_;
}
inline ::pb::TCrossCollaborateUserInfo* TCrossCollaborateGetStageInfoRsp::release_userinfo() {
  clear_has_userinfo();
  ::pb::TCrossCollaborateUserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TCrossCollaborateGetStageInfoRsp::set_allocated_userinfo(::pb::TCrossCollaborateUserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossCollaborateGetStageInfoRsp.UserInfo)
}

// optional .pb.TCrossCollaborateTeamInfo TeamInfo = 3;
inline bool TCrossCollaborateGetStageInfoRsp::has_teaminfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossCollaborateGetStageInfoRsp::set_has_teaminfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossCollaborateGetStageInfoRsp::clear_has_teaminfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossCollaborateGetStageInfoRsp::clear_teaminfo() {
  if (teaminfo_ != NULL) teaminfo_->::pb::TCrossCollaborateTeamInfo::Clear();
  clear_has_teaminfo();
}
inline const ::pb::TCrossCollaborateTeamInfo& TCrossCollaborateGetStageInfoRsp::teaminfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetStageInfoRsp.TeamInfo)
  return teaminfo_ != NULL ? *teaminfo_ : *default_instance_->teaminfo_;
}
inline ::pb::TCrossCollaborateTeamInfo* TCrossCollaborateGetStageInfoRsp::mutable_teaminfo() {
  set_has_teaminfo();
  if (teaminfo_ == NULL) teaminfo_ = new ::pb::TCrossCollaborateTeamInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateGetStageInfoRsp.TeamInfo)
  return teaminfo_;
}
inline ::pb::TCrossCollaborateTeamInfo* TCrossCollaborateGetStageInfoRsp::release_teaminfo() {
  clear_has_teaminfo();
  ::pb::TCrossCollaborateTeamInfo* temp = teaminfo_;
  teaminfo_ = NULL;
  return temp;
}
inline void TCrossCollaborateGetStageInfoRsp::set_allocated_teaminfo(::pb::TCrossCollaborateTeamInfo* teaminfo) {
  delete teaminfo_;
  teaminfo_ = teaminfo;
  if (teaminfo) {
    set_has_teaminfo();
  } else {
    clear_has_teaminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossCollaborateGetStageInfoRsp.TeamInfo)
}

// optional .pb.TCrossCollaborateTeamInfo RivalTeamInfo = 4;
inline bool TCrossCollaborateGetStageInfoRsp::has_rivalteaminfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossCollaborateGetStageInfoRsp::set_has_rivalteaminfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossCollaborateGetStageInfoRsp::clear_has_rivalteaminfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossCollaborateGetStageInfoRsp::clear_rivalteaminfo() {
  if (rivalteaminfo_ != NULL) rivalteaminfo_->::pb::TCrossCollaborateTeamInfo::Clear();
  clear_has_rivalteaminfo();
}
inline const ::pb::TCrossCollaborateTeamInfo& TCrossCollaborateGetStageInfoRsp::rivalteaminfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetStageInfoRsp.RivalTeamInfo)
  return rivalteaminfo_ != NULL ? *rivalteaminfo_ : *default_instance_->rivalteaminfo_;
}
inline ::pb::TCrossCollaborateTeamInfo* TCrossCollaborateGetStageInfoRsp::mutable_rivalteaminfo() {
  set_has_rivalteaminfo();
  if (rivalteaminfo_ == NULL) rivalteaminfo_ = new ::pb::TCrossCollaborateTeamInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateGetStageInfoRsp.RivalTeamInfo)
  return rivalteaminfo_;
}
inline ::pb::TCrossCollaborateTeamInfo* TCrossCollaborateGetStageInfoRsp::release_rivalteaminfo() {
  clear_has_rivalteaminfo();
  ::pb::TCrossCollaborateTeamInfo* temp = rivalteaminfo_;
  rivalteaminfo_ = NULL;
  return temp;
}
inline void TCrossCollaborateGetStageInfoRsp::set_allocated_rivalteaminfo(::pb::TCrossCollaborateTeamInfo* rivalteaminfo) {
  delete rivalteaminfo_;
  rivalteaminfo_ = rivalteaminfo;
  if (rivalteaminfo) {
    set_has_rivalteaminfo();
  } else {
    clear_has_rivalteaminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossCollaborateGetStageInfoRsp.RivalTeamInfo)
}

// optional uint64 BattleRewardTime = 5;
inline bool TCrossCollaborateGetStageInfoRsp::has_battlerewardtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossCollaborateGetStageInfoRsp::set_has_battlerewardtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossCollaborateGetStageInfoRsp::clear_has_battlerewardtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossCollaborateGetStageInfoRsp::clear_battlerewardtime() {
  battlerewardtime_ = GOOGLE_ULONGLONG(0);
  clear_has_battlerewardtime();
}
inline ::google::protobuf::uint64 TCrossCollaborateGetStageInfoRsp::battlerewardtime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetStageInfoRsp.BattleRewardTime)
  return battlerewardtime_;
}
inline void TCrossCollaborateGetStageInfoRsp::set_battlerewardtime(::google::protobuf::uint64 value) {
  set_has_battlerewardtime();
  battlerewardtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateGetStageInfoRsp.BattleRewardTime)
}

// optional uint32 RankRewardConfId = 6;
inline bool TCrossCollaborateGetStageInfoRsp::has_rankrewardconfid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCrossCollaborateGetStageInfoRsp::set_has_rankrewardconfid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCrossCollaborateGetStageInfoRsp::clear_has_rankrewardconfid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCrossCollaborateGetStageInfoRsp::clear_rankrewardconfid() {
  rankrewardconfid_ = 0u;
  clear_has_rankrewardconfid();
}
inline ::google::protobuf::uint32 TCrossCollaborateGetStageInfoRsp::rankrewardconfid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetStageInfoRsp.RankRewardConfId)
  return rankrewardconfid_;
}
inline void TCrossCollaborateGetStageInfoRsp::set_rankrewardconfid(::google::protobuf::uint32 value) {
  set_has_rankrewardconfid();
  rankrewardconfid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateGetStageInfoRsp.RankRewardConfId)
}

// repeated uint32 RankRewardIdArr = 7;
inline int TCrossCollaborateGetStageInfoRsp::rankrewardidarr_size() const {
  return rankrewardidarr_.size();
}
inline void TCrossCollaborateGetStageInfoRsp::clear_rankrewardidarr() {
  rankrewardidarr_.Clear();
}
inline ::google::protobuf::uint32 TCrossCollaborateGetStageInfoRsp::rankrewardidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetStageInfoRsp.RankRewardIdArr)
  return rankrewardidarr_.Get(index);
}
inline void TCrossCollaborateGetStageInfoRsp::set_rankrewardidarr(int index, ::google::protobuf::uint32 value) {
  rankrewardidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateGetStageInfoRsp.RankRewardIdArr)
}
inline void TCrossCollaborateGetStageInfoRsp::add_rankrewardidarr(::google::protobuf::uint32 value) {
  rankrewardidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateGetStageInfoRsp.RankRewardIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TCrossCollaborateGetStageInfoRsp::rankrewardidarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateGetStageInfoRsp.RankRewardIdArr)
  return rankrewardidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TCrossCollaborateGetStageInfoRsp::mutable_rankrewardidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateGetStageInfoRsp.RankRewardIdArr)
  return &rankrewardidarr_;
}

// repeated string GroupServerIdArr = 8;
inline int TCrossCollaborateGetStageInfoRsp::groupserveridarr_size() const {
  return groupserveridarr_.size();
}
inline void TCrossCollaborateGetStageInfoRsp::clear_groupserveridarr() {
  groupserveridarr_.Clear();
}
inline const ::std::string& TCrossCollaborateGetStageInfoRsp::groupserveridarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetStageInfoRsp.GroupServerIdArr)
  return groupserveridarr_.Get(index);
}
inline ::std::string* TCrossCollaborateGetStageInfoRsp::mutable_groupserveridarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateGetStageInfoRsp.GroupServerIdArr)
  return groupserveridarr_.Mutable(index);
}
inline void TCrossCollaborateGetStageInfoRsp::set_groupserveridarr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateGetStageInfoRsp.GroupServerIdArr)
  groupserveridarr_.Mutable(index)->assign(value);
}
inline void TCrossCollaborateGetStageInfoRsp::set_groupserveridarr(int index, const char* value) {
  groupserveridarr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossCollaborateGetStageInfoRsp.GroupServerIdArr)
}
inline void TCrossCollaborateGetStageInfoRsp::set_groupserveridarr(int index, const char* value, size_t size) {
  groupserveridarr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossCollaborateGetStageInfoRsp.GroupServerIdArr)
}
inline ::std::string* TCrossCollaborateGetStageInfoRsp::add_groupserveridarr() {
  return groupserveridarr_.Add();
}
inline void TCrossCollaborateGetStageInfoRsp::add_groupserveridarr(const ::std::string& value) {
  groupserveridarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateGetStageInfoRsp.GroupServerIdArr)
}
inline void TCrossCollaborateGetStageInfoRsp::add_groupserveridarr(const char* value) {
  groupserveridarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TCrossCollaborateGetStageInfoRsp.GroupServerIdArr)
}
inline void TCrossCollaborateGetStageInfoRsp::add_groupserveridarr(const char* value, size_t size) {
  groupserveridarr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TCrossCollaborateGetStageInfoRsp.GroupServerIdArr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TCrossCollaborateGetStageInfoRsp::groupserveridarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateGetStageInfoRsp.GroupServerIdArr)
  return groupserveridarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TCrossCollaborateGetStageInfoRsp::mutable_groupserveridarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateGetStageInfoRsp.GroupServerIdArr)
  return &groupserveridarr_;
}

// -------------------------------------------------------------------

// TAdventureGetTeamListReq

// optional uint32 Offset = 1;
inline bool TAdventureGetTeamListReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureGetTeamListReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureGetTeamListReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureGetTeamListReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TAdventureGetTeamListReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetTeamListReq.Offset)
  return offset_;
}
inline void TAdventureGetTeamListReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetTeamListReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TAdventureGetTeamListReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureGetTeamListReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureGetTeamListReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureGetTeamListReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TAdventureGetTeamListReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetTeamListReq.Limit)
  return limit_;
}
inline void TAdventureGetTeamListReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetTeamListReq.Limit)
}

// optional uint32 CanJoin = 3;
inline bool TAdventureGetTeamListReq::has_canjoin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureGetTeamListReq::set_has_canjoin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureGetTeamListReq::clear_has_canjoin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureGetTeamListReq::clear_canjoin() {
  canjoin_ = 0u;
  clear_has_canjoin();
}
inline ::google::protobuf::uint32 TAdventureGetTeamListReq::canjoin() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetTeamListReq.CanJoin)
  return canjoin_;
}
inline void TAdventureGetTeamListReq::set_canjoin(::google::protobuf::uint32 value) {
  set_has_canjoin();
  canjoin_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetTeamListReq.CanJoin)
}

// optional .pb.ECrossCollaborateInviteType InviteType = 4;
inline bool TAdventureGetTeamListReq::has_invitetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureGetTeamListReq::set_has_invitetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureGetTeamListReq::clear_has_invitetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureGetTeamListReq::clear_invitetype() {
  invitetype_ = 0;
  clear_has_invitetype();
}
inline ::pb::ECrossCollaborateInviteType TAdventureGetTeamListReq::invitetype() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetTeamListReq.InviteType)
  return static_cast< ::pb::ECrossCollaborateInviteType >(invitetype_);
}
inline void TAdventureGetTeamListReq::set_invitetype(::pb::ECrossCollaborateInviteType value) {
  assert(::pb::ECrossCollaborateInviteType_IsValid(value));
  set_has_invitetype();
  invitetype_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetTeamListReq.InviteType)
}

// -------------------------------------------------------------------

// TCrossCollaborateGetTeamListRsp

// repeated .pb.TCrossCollaborateTeamInfo TeamArr = 1;
inline int TCrossCollaborateGetTeamListRsp::teamarr_size() const {
  return teamarr_.size();
}
inline void TCrossCollaborateGetTeamListRsp::clear_teamarr() {
  teamarr_.Clear();
}
inline const ::pb::TCrossCollaborateTeamInfo& TCrossCollaborateGetTeamListRsp::teamarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetTeamListRsp.TeamArr)
  return teamarr_.Get(index);
}
inline ::pb::TCrossCollaborateTeamInfo* TCrossCollaborateGetTeamListRsp::mutable_teamarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateGetTeamListRsp.TeamArr)
  return teamarr_.Mutable(index);
}
inline ::pb::TCrossCollaborateTeamInfo* TCrossCollaborateGetTeamListRsp::add_teamarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateGetTeamListRsp.TeamArr)
  return teamarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateTeamInfo >&
TCrossCollaborateGetTeamListRsp::teamarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateGetTeamListRsp.TeamArr)
  return teamarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateTeamInfo >*
TCrossCollaborateGetTeamListRsp::mutable_teamarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateGetTeamListRsp.TeamArr)
  return &teamarr_;
}

// -------------------------------------------------------------------

// TCrossCollaborateCreateTeamRsp

// optional .pb.TCrossCollaborateTeamInfo TeamInfo = 1;
inline bool TCrossCollaborateCreateTeamRsp::has_teaminfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateCreateTeamRsp::set_has_teaminfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateCreateTeamRsp::clear_has_teaminfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateCreateTeamRsp::clear_teaminfo() {
  if (teaminfo_ != NULL) teaminfo_->::pb::TCrossCollaborateTeamInfo::Clear();
  clear_has_teaminfo();
}
inline const ::pb::TCrossCollaborateTeamInfo& TCrossCollaborateCreateTeamRsp::teaminfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateCreateTeamRsp.TeamInfo)
  return teaminfo_ != NULL ? *teaminfo_ : *default_instance_->teaminfo_;
}
inline ::pb::TCrossCollaborateTeamInfo* TCrossCollaborateCreateTeamRsp::mutable_teaminfo() {
  set_has_teaminfo();
  if (teaminfo_ == NULL) teaminfo_ = new ::pb::TCrossCollaborateTeamInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateCreateTeamRsp.TeamInfo)
  return teaminfo_;
}
inline ::pb::TCrossCollaborateTeamInfo* TCrossCollaborateCreateTeamRsp::release_teaminfo() {
  clear_has_teaminfo();
  ::pb::TCrossCollaborateTeamInfo* temp = teaminfo_;
  teaminfo_ = NULL;
  return temp;
}
inline void TCrossCollaborateCreateTeamRsp::set_allocated_teaminfo(::pb::TCrossCollaborateTeamInfo* teaminfo) {
  delete teaminfo_;
  teaminfo_ = teaminfo;
  if (teaminfo) {
    set_has_teaminfo();
  } else {
    clear_has_teaminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossCollaborateCreateTeamRsp.TeamInfo)
}

// -------------------------------------------------------------------

// TCrossCollaborateSetTeamReq

// optional uint64 TeamId = 1;
inline bool TCrossCollaborateSetTeamReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateSetTeamReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateSetTeamReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateSetTeamReq::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TCrossCollaborateSetTeamReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateSetTeamReq.TeamId)
  return teamid_;
}
inline void TCrossCollaborateSetTeamReq::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateSetTeamReq.TeamId)
}

// optional uint64 NeedFightForce = 2;
inline bool TCrossCollaborateSetTeamReq::has_needfightforce() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossCollaborateSetTeamReq::set_has_needfightforce() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossCollaborateSetTeamReq::clear_has_needfightforce() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossCollaborateSetTeamReq::clear_needfightforce() {
  needfightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_needfightforce();
}
inline ::google::protobuf::uint64 TCrossCollaborateSetTeamReq::needfightforce() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateSetTeamReq.NeedFightForce)
  return needfightforce_;
}
inline void TCrossCollaborateSetTeamReq::set_needfightforce(::google::protobuf::uint64 value) {
  set_has_needfightforce();
  needfightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateSetTeamReq.NeedFightForce)
}

// optional .pb.ECrossCollaborateStatus TeamStatus = 3;
inline bool TCrossCollaborateSetTeamReq::has_teamstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossCollaborateSetTeamReq::set_has_teamstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossCollaborateSetTeamReq::clear_has_teamstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossCollaborateSetTeamReq::clear_teamstatus() {
  teamstatus_ = 0;
  clear_has_teamstatus();
}
inline ::pb::ECrossCollaborateStatus TCrossCollaborateSetTeamReq::teamstatus() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateSetTeamReq.TeamStatus)
  return static_cast< ::pb::ECrossCollaborateStatus >(teamstatus_);
}
inline void TCrossCollaborateSetTeamReq::set_teamstatus(::pb::ECrossCollaborateStatus value) {
  assert(::pb::ECrossCollaborateStatus_IsValid(value));
  set_has_teamstatus();
  teamstatus_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateSetTeamReq.TeamStatus)
}

// -------------------------------------------------------------------

// TCrossCollaborateJoinTeamReq

// optional uint64 TeamId = 1;
inline bool TCrossCollaborateJoinTeamReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateJoinTeamReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateJoinTeamReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateJoinTeamReq::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TCrossCollaborateJoinTeamReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateJoinTeamReq.TeamId)
  return teamid_;
}
inline void TCrossCollaborateJoinTeamReq::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateJoinTeamReq.TeamId)
}

// -------------------------------------------------------------------

// TCrossCollaborateJoinTeamRsp

// optional .pb.ECrossCollaborateErrorCode ErrorCode = 1;
inline bool TCrossCollaborateJoinTeamRsp::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateJoinTeamRsp::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateJoinTeamRsp::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateJoinTeamRsp::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::pb::ECrossCollaborateErrorCode TCrossCollaborateJoinTeamRsp::errorcode() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateJoinTeamRsp.ErrorCode)
  return static_cast< ::pb::ECrossCollaborateErrorCode >(errorcode_);
}
inline void TCrossCollaborateJoinTeamRsp::set_errorcode(::pb::ECrossCollaborateErrorCode value) {
  assert(::pb::ECrossCollaborateErrorCode_IsValid(value));
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateJoinTeamRsp.ErrorCode)
}

// optional .pb.TCrossCollaborateTeamInfo TeamInfo = 2;
inline bool TCrossCollaborateJoinTeamRsp::has_teaminfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossCollaborateJoinTeamRsp::set_has_teaminfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossCollaborateJoinTeamRsp::clear_has_teaminfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossCollaborateJoinTeamRsp::clear_teaminfo() {
  if (teaminfo_ != NULL) teaminfo_->::pb::TCrossCollaborateTeamInfo::Clear();
  clear_has_teaminfo();
}
inline const ::pb::TCrossCollaborateTeamInfo& TCrossCollaborateJoinTeamRsp::teaminfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateJoinTeamRsp.TeamInfo)
  return teaminfo_ != NULL ? *teaminfo_ : *default_instance_->teaminfo_;
}
inline ::pb::TCrossCollaborateTeamInfo* TCrossCollaborateJoinTeamRsp::mutable_teaminfo() {
  set_has_teaminfo();
  if (teaminfo_ == NULL) teaminfo_ = new ::pb::TCrossCollaborateTeamInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateJoinTeamRsp.TeamInfo)
  return teaminfo_;
}
inline ::pb::TCrossCollaborateTeamInfo* TCrossCollaborateJoinTeamRsp::release_teaminfo() {
  clear_has_teaminfo();
  ::pb::TCrossCollaborateTeamInfo* temp = teaminfo_;
  teaminfo_ = NULL;
  return temp;
}
inline void TCrossCollaborateJoinTeamRsp::set_allocated_teaminfo(::pb::TCrossCollaborateTeamInfo* teaminfo) {
  delete teaminfo_;
  teaminfo_ = teaminfo;
  if (teaminfo) {
    set_has_teaminfo();
  } else {
    clear_has_teaminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossCollaborateJoinTeamRsp.TeamInfo)
}

// -------------------------------------------------------------------

// TCrossCollaborateQuitTeamReq

// optional uint64 TeamId = 1;
inline bool TCrossCollaborateQuitTeamReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateQuitTeamReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateQuitTeamReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateQuitTeamReq::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TCrossCollaborateQuitTeamReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateQuitTeamReq.TeamId)
  return teamid_;
}
inline void TCrossCollaborateQuitTeamReq::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateQuitTeamReq.TeamId)
}

// -------------------------------------------------------------------

// TCrossCollaborateGetInviteListReq

// optional .pb.ECrossCollaborateInviteType InviteType = 1;
inline bool TCrossCollaborateGetInviteListReq::has_invitetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateGetInviteListReq::set_has_invitetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateGetInviteListReq::clear_has_invitetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateGetInviteListReq::clear_invitetype() {
  invitetype_ = 0;
  clear_has_invitetype();
}
inline ::pb::ECrossCollaborateInviteType TCrossCollaborateGetInviteListReq::invitetype() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetInviteListReq.InviteType)
  return static_cast< ::pb::ECrossCollaborateInviteType >(invitetype_);
}
inline void TCrossCollaborateGetInviteListReq::set_invitetype(::pb::ECrossCollaborateInviteType value) {
  assert(::pb::ECrossCollaborateInviteType_IsValid(value));
  set_has_invitetype();
  invitetype_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateGetInviteListReq.InviteType)
}

// -------------------------------------------------------------------

// TCrossCollaborateGetInviteListRsp

// repeated .pb.TCrossCollaborateInviteUserInfo UserArr = 1;
inline int TCrossCollaborateGetInviteListRsp::userarr_size() const {
  return userarr_.size();
}
inline void TCrossCollaborateGetInviteListRsp::clear_userarr() {
  userarr_.Clear();
}
inline const ::pb::TCrossCollaborateInviteUserInfo& TCrossCollaborateGetInviteListRsp::userarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetInviteListRsp.UserArr)
  return userarr_.Get(index);
}
inline ::pb::TCrossCollaborateInviteUserInfo* TCrossCollaborateGetInviteListRsp::mutable_userarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateGetInviteListRsp.UserArr)
  return userarr_.Mutable(index);
}
inline ::pb::TCrossCollaborateInviteUserInfo* TCrossCollaborateGetInviteListRsp::add_userarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateGetInviteListRsp.UserArr)
  return userarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateInviteUserInfo >&
TCrossCollaborateGetInviteListRsp::userarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateGetInviteListRsp.UserArr)
  return userarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateInviteUserInfo >*
TCrossCollaborateGetInviteListRsp::mutable_userarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateGetInviteListRsp.UserArr)
  return &userarr_;
}

// -------------------------------------------------------------------

// TCrossCollaborateInviteMemberReq

// optional uint64 InviteUid = 1;
inline bool TCrossCollaborateInviteMemberReq::has_inviteuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateInviteMemberReq::set_has_inviteuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateInviteMemberReq::clear_has_inviteuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateInviteMemberReq::clear_inviteuid() {
  inviteuid_ = GOOGLE_ULONGLONG(0);
  clear_has_inviteuid();
}
inline ::google::protobuf::uint64 TCrossCollaborateInviteMemberReq::inviteuid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateInviteMemberReq.InviteUid)
  return inviteuid_;
}
inline void TCrossCollaborateInviteMemberReq::set_inviteuid(::google::protobuf::uint64 value) {
  set_has_inviteuid();
  inviteuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateInviteMemberReq.InviteUid)
}

// optional string InviteServerId = 2;
inline bool TCrossCollaborateInviteMemberReq::has_inviteserverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossCollaborateInviteMemberReq::set_has_inviteserverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossCollaborateInviteMemberReq::clear_has_inviteserverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossCollaborateInviteMemberReq::clear_inviteserverid() {
  if (inviteserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inviteserverid_->clear();
  }
  clear_has_inviteserverid();
}
inline const ::std::string& TCrossCollaborateInviteMemberReq::inviteserverid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateInviteMemberReq.InviteServerId)
  return *inviteserverid_;
}
inline void TCrossCollaborateInviteMemberReq::set_inviteserverid(const ::std::string& value) {
  set_has_inviteserverid();
  if (inviteserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inviteserverid_ = new ::std::string;
  }
  inviteserverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateInviteMemberReq.InviteServerId)
}
inline void TCrossCollaborateInviteMemberReq::set_inviteserverid(const char* value) {
  set_has_inviteserverid();
  if (inviteserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inviteserverid_ = new ::std::string;
  }
  inviteserverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossCollaborateInviteMemberReq.InviteServerId)
}
inline void TCrossCollaborateInviteMemberReq::set_inviteserverid(const char* value, size_t size) {
  set_has_inviteserverid();
  if (inviteserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inviteserverid_ = new ::std::string;
  }
  inviteserverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossCollaborateInviteMemberReq.InviteServerId)
}
inline ::std::string* TCrossCollaborateInviteMemberReq::mutable_inviteserverid() {
  set_has_inviteserverid();
  if (inviteserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inviteserverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateInviteMemberReq.InviteServerId)
  return inviteserverid_;
}
inline ::std::string* TCrossCollaborateInviteMemberReq::release_inviteserverid() {
  clear_has_inviteserverid();
  if (inviteserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inviteserverid_;
    inviteserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossCollaborateInviteMemberReq::set_allocated_inviteserverid(::std::string* inviteserverid) {
  if (inviteserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inviteserverid_;
  }
  if (inviteserverid) {
    set_has_inviteserverid();
    inviteserverid_ = inviteserverid;
  } else {
    clear_has_inviteserverid();
    inviteserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossCollaborateInviteMemberReq.InviteServerId)
}

// -------------------------------------------------------------------

// TCrossCollaborateInviteMemberRsp

// optional uint64 TeamId = 1;
inline bool TCrossCollaborateInviteMemberRsp::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateInviteMemberRsp::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateInviteMemberRsp::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateInviteMemberRsp::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TCrossCollaborateInviteMemberRsp::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateInviteMemberRsp.TeamId)
  return teamid_;
}
inline void TCrossCollaborateInviteMemberRsp::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateInviteMemberRsp.TeamId)
}

// -------------------------------------------------------------------

// TCrossCollaborateKickMemberReq

// optional uint64 TeamId = 1;
inline bool TCrossCollaborateKickMemberReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateKickMemberReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateKickMemberReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateKickMemberReq::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TCrossCollaborateKickMemberReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateKickMemberReq.TeamId)
  return teamid_;
}
inline void TCrossCollaborateKickMemberReq::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateKickMemberReq.TeamId)
}

// optional uint64 KickUid = 2;
inline bool TCrossCollaborateKickMemberReq::has_kickuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossCollaborateKickMemberReq::set_has_kickuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossCollaborateKickMemberReq::clear_has_kickuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossCollaborateKickMemberReq::clear_kickuid() {
  kickuid_ = GOOGLE_ULONGLONG(0);
  clear_has_kickuid();
}
inline ::google::protobuf::uint64 TCrossCollaborateKickMemberReq::kickuid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateKickMemberReq.KickUid)
  return kickuid_;
}
inline void TCrossCollaborateKickMemberReq::set_kickuid(::google::protobuf::uint64 value) {
  set_has_kickuid();
  kickuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateKickMemberReq.KickUid)
}

// -------------------------------------------------------------------

// TCrossCollaborateGetMyFormationRsp

// repeated .pb.TCrossCollaborateFormationInfo FormationArr = 1;
inline int TCrossCollaborateGetMyFormationRsp::formationarr_size() const {
  return formationarr_.size();
}
inline void TCrossCollaborateGetMyFormationRsp::clear_formationarr() {
  formationarr_.Clear();
}
inline const ::pb::TCrossCollaborateFormationInfo& TCrossCollaborateGetMyFormationRsp::formationarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetMyFormationRsp.FormationArr)
  return formationarr_.Get(index);
}
inline ::pb::TCrossCollaborateFormationInfo* TCrossCollaborateGetMyFormationRsp::mutable_formationarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateGetMyFormationRsp.FormationArr)
  return formationarr_.Mutable(index);
}
inline ::pb::TCrossCollaborateFormationInfo* TCrossCollaborateGetMyFormationRsp::add_formationarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateGetMyFormationRsp.FormationArr)
  return formationarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateFormationInfo >&
TCrossCollaborateGetMyFormationRsp::formationarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateGetMyFormationRsp.FormationArr)
  return formationarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateFormationInfo >*
TCrossCollaborateGetMyFormationRsp::mutable_formationarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateGetMyFormationRsp.FormationArr)
  return &formationarr_;
}

// -------------------------------------------------------------------

// TCrossCollaborateSetFormationReq

// repeated .pb.TCrossCollaborateFormationInfo FormationArr = 1;
inline int TCrossCollaborateSetFormationReq::formationarr_size() const {
  return formationarr_.size();
}
inline void TCrossCollaborateSetFormationReq::clear_formationarr() {
  formationarr_.Clear();
}
inline const ::pb::TCrossCollaborateFormationInfo& TCrossCollaborateSetFormationReq::formationarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateSetFormationReq.FormationArr)
  return formationarr_.Get(index);
}
inline ::pb::TCrossCollaborateFormationInfo* TCrossCollaborateSetFormationReq::mutable_formationarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateSetFormationReq.FormationArr)
  return formationarr_.Mutable(index);
}
inline ::pb::TCrossCollaborateFormationInfo* TCrossCollaborateSetFormationReq::add_formationarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateSetFormationReq.FormationArr)
  return formationarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateFormationInfo >&
TCrossCollaborateSetFormationReq::formationarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateSetFormationReq.FormationArr)
  return formationarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateFormationInfo >*
TCrossCollaborateSetFormationReq::mutable_formationarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateSetFormationReq.FormationArr)
  return &formationarr_;
}

// -------------------------------------------------------------------

// TCrossCollaborateGetEnemyFormationReq

// optional uint64 EnemyUid = 1;
inline bool TCrossCollaborateGetEnemyFormationReq::has_enemyuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateGetEnemyFormationReq::set_has_enemyuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateGetEnemyFormationReq::clear_has_enemyuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateGetEnemyFormationReq::clear_enemyuid() {
  enemyuid_ = GOOGLE_ULONGLONG(0);
  clear_has_enemyuid();
}
inline ::google::protobuf::uint64 TCrossCollaborateGetEnemyFormationReq::enemyuid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetEnemyFormationReq.EnemyUid)
  return enemyuid_;
}
inline void TCrossCollaborateGetEnemyFormationReq::set_enemyuid(::google::protobuf::uint64 value) {
  set_has_enemyuid();
  enemyuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateGetEnemyFormationReq.EnemyUid)
}

// -------------------------------------------------------------------

// TCrossCollaborateGetEnemyFormationRsp

// repeated .pb.TCrossCollaborateEnemyFormation FormationArr = 1;
inline int TCrossCollaborateGetEnemyFormationRsp::formationarr_size() const {
  return formationarr_.size();
}
inline void TCrossCollaborateGetEnemyFormationRsp::clear_formationarr() {
  formationarr_.Clear();
}
inline const ::pb::TCrossCollaborateEnemyFormation& TCrossCollaborateGetEnemyFormationRsp::formationarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetEnemyFormationRsp.FormationArr)
  return formationarr_.Get(index);
}
inline ::pb::TCrossCollaborateEnemyFormation* TCrossCollaborateGetEnemyFormationRsp::mutable_formationarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateGetEnemyFormationRsp.FormationArr)
  return formationarr_.Mutable(index);
}
inline ::pb::TCrossCollaborateEnemyFormation* TCrossCollaborateGetEnemyFormationRsp::add_formationarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateGetEnemyFormationRsp.FormationArr)
  return formationarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateEnemyFormation >&
TCrossCollaborateGetEnemyFormationRsp::formationarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateGetEnemyFormationRsp.FormationArr)
  return formationarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateEnemyFormation >*
TCrossCollaborateGetEnemyFormationRsp::mutable_formationarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateGetEnemyFormationRsp.FormationArr)
  return &formationarr_;
}

// repeated .pb.TRankSingle RankArr = 2;
inline int TCrossCollaborateGetEnemyFormationRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TCrossCollaborateGetEnemyFormationRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TRankSingle& TCrossCollaborateGetEnemyFormationRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetEnemyFormationRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TRankSingle* TCrossCollaborateGetEnemyFormationRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateGetEnemyFormationRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TRankSingle* TCrossCollaborateGetEnemyFormationRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateGetEnemyFormationRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >&
TCrossCollaborateGetEnemyFormationRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateGetEnemyFormationRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >*
TCrossCollaborateGetEnemyFormationRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateGetEnemyFormationRsp.RankArr)
  return &rankarr_;
}

// -------------------------------------------------------------------

// TCrossCollaborateSwapFightOrderReq

// optional uint64 TeamId = 1;
inline bool TCrossCollaborateSwapFightOrderReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateSwapFightOrderReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateSwapFightOrderReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateSwapFightOrderReq::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TCrossCollaborateSwapFightOrderReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateSwapFightOrderReq.TeamId)
  return teamid_;
}
inline void TCrossCollaborateSwapFightOrderReq::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateSwapFightOrderReq.TeamId)
}

// repeated uint64 UidArr = 2;
inline int TCrossCollaborateSwapFightOrderReq::uidarr_size() const {
  return uidarr_.size();
}
inline void TCrossCollaborateSwapFightOrderReq::clear_uidarr() {
  uidarr_.Clear();
}
inline ::google::protobuf::uint64 TCrossCollaborateSwapFightOrderReq::uidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateSwapFightOrderReq.UidArr)
  return uidarr_.Get(index);
}
inline void TCrossCollaborateSwapFightOrderReq::set_uidarr(int index, ::google::protobuf::uint64 value) {
  uidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateSwapFightOrderReq.UidArr)
}
inline void TCrossCollaborateSwapFightOrderReq::add_uidarr(::google::protobuf::uint64 value) {
  uidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateSwapFightOrderReq.UidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TCrossCollaborateSwapFightOrderReq::uidarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateSwapFightOrderReq.UidArr)
  return uidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TCrossCollaborateSwapFightOrderReq::mutable_uidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateSwapFightOrderReq.UidArr)
  return &uidarr_;
}

// -------------------------------------------------------------------

// TCrossCollaborateGetBattleRecordReq

// optional uint64 TeamId = 1;
inline bool TCrossCollaborateGetBattleRecordReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateGetBattleRecordReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateGetBattleRecordReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateGetBattleRecordReq::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TCrossCollaborateGetBattleRecordReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetBattleRecordReq.TeamId)
  return teamid_;
}
inline void TCrossCollaborateGetBattleRecordReq::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateGetBattleRecordReq.TeamId)
}

// optional uint64 RecordTime = 2;
inline bool TCrossCollaborateGetBattleRecordReq::has_recordtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossCollaborateGetBattleRecordReq::set_has_recordtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossCollaborateGetBattleRecordReq::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossCollaborateGetBattleRecordReq::clear_recordtime() {
  recordtime_ = GOOGLE_ULONGLONG(0);
  clear_has_recordtime();
}
inline ::google::protobuf::uint64 TCrossCollaborateGetBattleRecordReq::recordtime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetBattleRecordReq.RecordTime)
  return recordtime_;
}
inline void TCrossCollaborateGetBattleRecordReq::set_recordtime(::google::protobuf::uint64 value) {
  set_has_recordtime();
  recordtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateGetBattleRecordReq.RecordTime)
}

// -------------------------------------------------------------------

// TCrossCollaborateGetBattleRecordRsp

// repeated .pb.TCrossCollaborateBattleRecord BattleRecordArr = 1;
inline int TCrossCollaborateGetBattleRecordRsp::battlerecordarr_size() const {
  return battlerecordarr_.size();
}
inline void TCrossCollaborateGetBattleRecordRsp::clear_battlerecordarr() {
  battlerecordarr_.Clear();
}
inline const ::pb::TCrossCollaborateBattleRecord& TCrossCollaborateGetBattleRecordRsp::battlerecordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetBattleRecordRsp.BattleRecordArr)
  return battlerecordarr_.Get(index);
}
inline ::pb::TCrossCollaborateBattleRecord* TCrossCollaborateGetBattleRecordRsp::mutable_battlerecordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateGetBattleRecordRsp.BattleRecordArr)
  return battlerecordarr_.Mutable(index);
}
inline ::pb::TCrossCollaborateBattleRecord* TCrossCollaborateGetBattleRecordRsp::add_battlerecordarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateGetBattleRecordRsp.BattleRecordArr)
  return battlerecordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateBattleRecord >&
TCrossCollaborateGetBattleRecordRsp::battlerecordarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateGetBattleRecordRsp.BattleRecordArr)
  return battlerecordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateBattleRecord >*
TCrossCollaborateGetBattleRecordRsp::mutable_battlerecordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateGetBattleRecordRsp.BattleRecordArr)
  return &battlerecordarr_;
}

// -------------------------------------------------------------------

// TCrossCollaborateGetSimpleBattleRecordReq

// optional uint32 Offset = 1;
inline bool TCrossCollaborateGetSimpleBattleRecordReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateGetSimpleBattleRecordReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateGetSimpleBattleRecordReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateGetSimpleBattleRecordReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TCrossCollaborateGetSimpleBattleRecordReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetSimpleBattleRecordReq.Offset)
  return offset_;
}
inline void TCrossCollaborateGetSimpleBattleRecordReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateGetSimpleBattleRecordReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TCrossCollaborateGetSimpleBattleRecordReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossCollaborateGetSimpleBattleRecordReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossCollaborateGetSimpleBattleRecordReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossCollaborateGetSimpleBattleRecordReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TCrossCollaborateGetSimpleBattleRecordReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetSimpleBattleRecordReq.Limit)
  return limit_;
}
inline void TCrossCollaborateGetSimpleBattleRecordReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateGetSimpleBattleRecordReq.Limit)
}

// -------------------------------------------------------------------

// TCrossCollaborateGetSimpleBattleRecordRsp

// repeated .pb.TCrossCollaborateSimpleBattleRecord SimpleBattleRecordArr = 1;
inline int TCrossCollaborateGetSimpleBattleRecordRsp::simplebattlerecordarr_size() const {
  return simplebattlerecordarr_.size();
}
inline void TCrossCollaborateGetSimpleBattleRecordRsp::clear_simplebattlerecordarr() {
  simplebattlerecordarr_.Clear();
}
inline const ::pb::TCrossCollaborateSimpleBattleRecord& TCrossCollaborateGetSimpleBattleRecordRsp::simplebattlerecordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetSimpleBattleRecordRsp.SimpleBattleRecordArr)
  return simplebattlerecordarr_.Get(index);
}
inline ::pb::TCrossCollaborateSimpleBattleRecord* TCrossCollaborateGetSimpleBattleRecordRsp::mutable_simplebattlerecordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateGetSimpleBattleRecordRsp.SimpleBattleRecordArr)
  return simplebattlerecordarr_.Mutable(index);
}
inline ::pb::TCrossCollaborateSimpleBattleRecord* TCrossCollaborateGetSimpleBattleRecordRsp::add_simplebattlerecordarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateGetSimpleBattleRecordRsp.SimpleBattleRecordArr)
  return simplebattlerecordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateSimpleBattleRecord >&
TCrossCollaborateGetSimpleBattleRecordRsp::simplebattlerecordarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateGetSimpleBattleRecordRsp.SimpleBattleRecordArr)
  return simplebattlerecordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateSimpleBattleRecord >*
TCrossCollaborateGetSimpleBattleRecordRsp::mutable_simplebattlerecordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateGetSimpleBattleRecordRsp.SimpleBattleRecordArr)
  return &simplebattlerecordarr_;
}

// -------------------------------------------------------------------

// TCrossCollaborateGetRankListRsp

// optional int32 MyRank = 1;
inline bool TCrossCollaborateGetRankListRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateGetRankListRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateGetRankListRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateGetRankListRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TCrossCollaborateGetRankListRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetRankListRsp.MyRank)
  return myrank_;
}
inline void TCrossCollaborateGetRankListRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateGetRankListRsp.MyRank)
}

// repeated .pb.TCrossCollaborateUserInfo RankArr = 2;
inline int TCrossCollaborateGetRankListRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TCrossCollaborateGetRankListRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TCrossCollaborateUserInfo& TCrossCollaborateGetRankListRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetRankListRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TCrossCollaborateUserInfo* TCrossCollaborateGetRankListRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateGetRankListRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TCrossCollaborateUserInfo* TCrossCollaborateGetRankListRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateGetRankListRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateUserInfo >&
TCrossCollaborateGetRankListRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateGetRankListRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossCollaborateUserInfo >*
TCrossCollaborateGetRankListRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateGetRankListRsp.RankArr)
  return &rankarr_;
}

// -------------------------------------------------------------------

// TCrossCollaborateReceiveBattleRewardReq

// optional uint32 Round = 1;
inline bool TCrossCollaborateReceiveBattleRewardReq::has_round() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateReceiveBattleRewardReq::set_has_round() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateReceiveBattleRewardReq::clear_has_round() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateReceiveBattleRewardReq::clear_round() {
  round_ = 0u;
  clear_has_round();
}
inline ::google::protobuf::uint32 TCrossCollaborateReceiveBattleRewardReq::round() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateReceiveBattleRewardReq.Round)
  return round_;
}
inline void TCrossCollaborateReceiveBattleRewardReq::set_round(::google::protobuf::uint32 value) {
  set_has_round();
  round_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateReceiveBattleRewardReq.Round)
}

// -------------------------------------------------------------------

// TCrossCollaborateReceiveRankRewardReq

// optional uint32 RankId = 1;
inline bool TCrossCollaborateReceiveRankRewardReq::has_rankid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateReceiveRankRewardReq::set_has_rankid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateReceiveRankRewardReq::clear_has_rankid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateReceiveRankRewardReq::clear_rankid() {
  rankid_ = 0u;
  clear_has_rankid();
}
inline ::google::protobuf::uint32 TCrossCollaborateReceiveRankRewardReq::rankid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateReceiveRankRewardReq.RankId)
  return rankid_;
}
inline void TCrossCollaborateReceiveRankRewardReq::set_rankid(::google::protobuf::uint32 value) {
  set_has_rankid();
  rankid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateReceiveRankRewardReq.RankId)
}

// -------------------------------------------------------------------

// TCrossCollaborateTeamNotify

// optional .pb.TCrossCollaborateTeamInfo TeamInfo = 1;
inline bool TCrossCollaborateTeamNotify::has_teaminfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateTeamNotify::set_has_teaminfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateTeamNotify::clear_has_teaminfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateTeamNotify::clear_teaminfo() {
  if (teaminfo_ != NULL) teaminfo_->::pb::TCrossCollaborateTeamInfo::Clear();
  clear_has_teaminfo();
}
inline const ::pb::TCrossCollaborateTeamInfo& TCrossCollaborateTeamNotify::teaminfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateTeamNotify.TeamInfo)
  return teaminfo_ != NULL ? *teaminfo_ : *default_instance_->teaminfo_;
}
inline ::pb::TCrossCollaborateTeamInfo* TCrossCollaborateTeamNotify::mutable_teaminfo() {
  set_has_teaminfo();
  if (teaminfo_ == NULL) teaminfo_ = new ::pb::TCrossCollaborateTeamInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateTeamNotify.TeamInfo)
  return teaminfo_;
}
inline ::pb::TCrossCollaborateTeamInfo* TCrossCollaborateTeamNotify::release_teaminfo() {
  clear_has_teaminfo();
  ::pb::TCrossCollaborateTeamInfo* temp = teaminfo_;
  teaminfo_ = NULL;
  return temp;
}
inline void TCrossCollaborateTeamNotify::set_allocated_teaminfo(::pb::TCrossCollaborateTeamInfo* teaminfo) {
  delete teaminfo_;
  teaminfo_ = teaminfo;
  if (teaminfo) {
    set_has_teaminfo();
  } else {
    clear_has_teaminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossCollaborateTeamNotify.TeamInfo)
}

// optional uint64 PushTime = 2;
inline bool TCrossCollaborateTeamNotify::has_pushtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossCollaborateTeamNotify::set_has_pushtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossCollaborateTeamNotify::clear_has_pushtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossCollaborateTeamNotify::clear_pushtime() {
  pushtime_ = GOOGLE_ULONGLONG(0);
  clear_has_pushtime();
}
inline ::google::protobuf::uint64 TCrossCollaborateTeamNotify::pushtime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateTeamNotify.PushTime)
  return pushtime_;
}
inline void TCrossCollaborateTeamNotify::set_pushtime(::google::protobuf::uint64 value) {
  set_has_pushtime();
  pushtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateTeamNotify.PushTime)
}

// optional uint32 IsInvite = 3;
inline bool TCrossCollaborateTeamNotify::has_isinvite() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossCollaborateTeamNotify::set_has_isinvite() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossCollaborateTeamNotify::clear_has_isinvite() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossCollaborateTeamNotify::clear_isinvite() {
  isinvite_ = 0u;
  clear_has_isinvite();
}
inline ::google::protobuf::uint32 TCrossCollaborateTeamNotify::isinvite() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateTeamNotify.IsInvite)
  return isinvite_;
}
inline void TCrossCollaborateTeamNotify::set_isinvite(::google::protobuf::uint32 value) {
  set_has_isinvite();
  isinvite_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateTeamNotify.IsInvite)
}

// -------------------------------------------------------------------

// TCrossCollaborateUserRankRewardNotify

// repeated uint32 RankRewardIdArr = 1;
inline int TCrossCollaborateUserRankRewardNotify::rankrewardidarr_size() const {
  return rankrewardidarr_.size();
}
inline void TCrossCollaborateUserRankRewardNotify::clear_rankrewardidarr() {
  rankrewardidarr_.Clear();
}
inline ::google::protobuf::uint32 TCrossCollaborateUserRankRewardNotify::rankrewardidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateUserRankRewardNotify.RankRewardIdArr)
  return rankrewardidarr_.Get(index);
}
inline void TCrossCollaborateUserRankRewardNotify::set_rankrewardidarr(int index, ::google::protobuf::uint32 value) {
  rankrewardidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateUserRankRewardNotify.RankRewardIdArr)
}
inline void TCrossCollaborateUserRankRewardNotify::add_rankrewardidarr(::google::protobuf::uint32 value) {
  rankrewardidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateUserRankRewardNotify.RankRewardIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TCrossCollaborateUserRankRewardNotify::rankrewardidarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateUserRankRewardNotify.RankRewardIdArr)
  return rankrewardidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TCrossCollaborateUserRankRewardNotify::mutable_rankrewardidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateUserRankRewardNotify.RankRewardIdArr)
  return &rankrewardidarr_;
}

// -------------------------------------------------------------------

// TCrossCollaborateBattleReportArrReq

// repeated uint64 ridArr = 1;
inline int TCrossCollaborateBattleReportArrReq::ridarr_size() const {
  return ridarr_.size();
}
inline void TCrossCollaborateBattleReportArrReq::clear_ridarr() {
  ridarr_.Clear();
}
inline ::google::protobuf::uint64 TCrossCollaborateBattleReportArrReq::ridarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateBattleReportArrReq.ridArr)
  return ridarr_.Get(index);
}
inline void TCrossCollaborateBattleReportArrReq::set_ridarr(int index, ::google::protobuf::uint64 value) {
  ridarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateBattleReportArrReq.ridArr)
}
inline void TCrossCollaborateBattleReportArrReq::add_ridarr(::google::protobuf::uint64 value) {
  ridarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateBattleReportArrReq.ridArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TCrossCollaborateBattleReportArrReq::ridarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateBattleReportArrReq.ridArr)
  return ridarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TCrossCollaborateBattleReportArrReq::mutable_ridarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateBattleReportArrReq.ridArr)
  return &ridarr_;
}

// -------------------------------------------------------------------

// TCrossCollaborateBattleReportArrRsp

// repeated bytes Result = 1;
inline int TCrossCollaborateBattleReportArrRsp::result_size() const {
  return result_.size();
}
inline void TCrossCollaborateBattleReportArrRsp::clear_result() {
  result_.Clear();
}
inline const ::std::string& TCrossCollaborateBattleReportArrRsp::result(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateBattleReportArrRsp.Result)
  return result_.Get(index);
}
inline ::std::string* TCrossCollaborateBattleReportArrRsp::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateBattleReportArrRsp.Result)
  return result_.Mutable(index);
}
inline void TCrossCollaborateBattleReportArrRsp::set_result(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateBattleReportArrRsp.Result)
  result_.Mutable(index)->assign(value);
}
inline void TCrossCollaborateBattleReportArrRsp::set_result(int index, const char* value) {
  result_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossCollaborateBattleReportArrRsp.Result)
}
inline void TCrossCollaborateBattleReportArrRsp::set_result(int index, const void* value, size_t size) {
  result_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossCollaborateBattleReportArrRsp.Result)
}
inline ::std::string* TCrossCollaborateBattleReportArrRsp::add_result() {
  return result_.Add();
}
inline void TCrossCollaborateBattleReportArrRsp::add_result(const ::std::string& value) {
  result_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TCrossCollaborateBattleReportArrRsp.Result)
}
inline void TCrossCollaborateBattleReportArrRsp::add_result(const char* value) {
  result_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TCrossCollaborateBattleReportArrRsp.Result)
}
inline void TCrossCollaborateBattleReportArrRsp::add_result(const void* value, size_t size) {
  result_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TCrossCollaborateBattleReportArrRsp.Result)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TCrossCollaborateBattleReportArrRsp::result() const {
  // @@protoc_insertion_point(field_list:pb.TCrossCollaborateBattleReportArrRsp.Result)
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TCrossCollaborateBattleReportArrRsp::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossCollaborateBattleReportArrRsp.Result)
  return &result_;
}

// -------------------------------------------------------------------

// TCrossCollaborateGetServerGroupInfoRsp

// optional uint32 GroupId = 1;
inline bool TCrossCollaborateGetServerGroupInfoRsp::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossCollaborateGetServerGroupInfoRsp::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossCollaborateGetServerGroupInfoRsp::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossCollaborateGetServerGroupInfoRsp::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 TCrossCollaborateGetServerGroupInfoRsp::groupid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetServerGroupInfoRsp.GroupId)
  return groupid_;
}
inline void TCrossCollaborateGetServerGroupInfoRsp::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateGetServerGroupInfoRsp.GroupId)
}

// optional string ServerId = 2;
inline bool TCrossCollaborateGetServerGroupInfoRsp::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossCollaborateGetServerGroupInfoRsp::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossCollaborateGetServerGroupInfoRsp::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossCollaborateGetServerGroupInfoRsp::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TCrossCollaborateGetServerGroupInfoRsp::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossCollaborateGetServerGroupInfoRsp.ServerId)
  return *serverid_;
}
inline void TCrossCollaborateGetServerGroupInfoRsp::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossCollaborateGetServerGroupInfoRsp.ServerId)
}
inline void TCrossCollaborateGetServerGroupInfoRsp::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossCollaborateGetServerGroupInfoRsp.ServerId)
}
inline void TCrossCollaborateGetServerGroupInfoRsp::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossCollaborateGetServerGroupInfoRsp.ServerId)
}
inline ::std::string* TCrossCollaborateGetServerGroupInfoRsp::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossCollaborateGetServerGroupInfoRsp.ServerId)
  return serverid_;
}
inline ::std::string* TCrossCollaborateGetServerGroupInfoRsp::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossCollaborateGetServerGroupInfoRsp::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossCollaborateGetServerGroupInfoRsp.ServerId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::ECrossCollaborateStage> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ECrossCollaborateStage>() {
  return ::pb::ECrossCollaborateStage_descriptor();
}
template <> struct is_proto_enum< ::pb::ECrossCollaborateStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ECrossCollaborateStatus>() {
  return ::pb::ECrossCollaborateStatus_descriptor();
}
template <> struct is_proto_enum< ::pb::ECrossCollaborateErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ECrossCollaborateErrorCode>() {
  return ::pb::ECrossCollaborateErrorCode_descriptor();
}
template <> struct is_proto_enum< ::pb::ECrossCollaborateInviteType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ECrossCollaborateInviteType>() {
  return ::pb::ECrossCollaborateInviteType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fCrossCollaborate_2eproto__INCLUDED
