// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SceneConf2d.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/SceneConf2d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* PointElement2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointElement2_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttachPoint2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttachPoint2_reflection_ = NULL;
const ::google::protobuf::Descriptor* BindAssetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BindAssetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RectArea2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RectArea2_reflection_ = NULL;
const ::google::protobuf::Descriptor* CustomArea2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CustomArea2_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PendantInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PendantInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnimAsset2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnimAsset2_reflection_ = NULL;
const ::google::protobuf::Descriptor* StaticAsset2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StaticAsset2_reflection_ = NULL;
const ::google::protobuf::Descriptor* EffectAsset2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EffectAsset2_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssetGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssetGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* PatrolPathPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PatrolPathPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* PatrolPath2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PatrolPath2_reflection_ = NULL;
const ::google::protobuf::Descriptor* PatrolPathConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PatrolPathConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* CarrierEnt2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarrierEnt2_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureEntrance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureEntrance_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneChunkInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneChunkInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Obstacle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Obstacle_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fSceneConf2d_2eproto() {
  protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/SceneConf2d.proto");
  GOOGLE_CHECK(file != NULL);
  PointElement2_descriptor_ = file->message_type(0);
  static const int PointElement2_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointElement2, elementtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointElement2, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointElement2, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointElement2, sortinglayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointElement2, sortingorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointElement2, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointElement2, fake3doffset_),
  };
  PointElement2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointElement2_descriptor_,
      PointElement2::default_instance_,
      PointElement2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointElement2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointElement2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointElement2));
  AttachPoint2_descriptor_ = file->message_type(1);
  static const int AttachPoint2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachPoint2, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachPoint2, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachPoint2, worldscale_),
  };
  AttachPoint2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttachPoint2_descriptor_,
      AttachPoint2::default_instance_,
      AttachPoint2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachPoint2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachPoint2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttachPoint2));
  BindAssetInfo_descriptor_ = file->message_type(2);
  static const int BindAssetInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAssetInfo, assetelename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAssetInfo, activemovetargetelename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAssetInfo, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAssetInfo, moveanimname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAssetInfo, moveenddirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAssetInfo, arrivedanim_),
  };
  BindAssetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BindAssetInfo_descriptor_,
      BindAssetInfo::default_instance_,
      BindAssetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAssetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindAssetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BindAssetInfo));
  RectArea2_descriptor_ = file->message_type(3);
  static const int RectArea2_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea2, elementtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea2, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea2, rectinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea2, centerposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea2, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea2, attachpointarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea2, sortinglayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea2, sortingorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea2, activebindassetinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea2, conftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea2, viewelementname_),
  };
  RectArea2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RectArea2_descriptor_,
      RectArea2::default_instance_,
      RectArea2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RectArea2));
  CustomArea2_descriptor_ = file->message_type(4);
  static const int CustomArea2_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomArea2, elementtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomArea2, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomArea2, chunkindexarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomArea2, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomArea2, viewelementname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomArea2, centerposition_),
  };
  CustomArea2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CustomArea2_descriptor_,
      CustomArea2::default_instance_,
      CustomArea2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomArea2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomArea2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CustomArea2));
  GuardInfo_descriptor_ = file->message_type(5);
  static const int GuardInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardInfo, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardInfo, degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardInfo, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardInfo, eventid_),
  };
  GuardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuardInfo_descriptor_,
      GuardInfo::default_instance_,
      GuardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuardInfo));
  PendantInfo_descriptor_ = file->message_type(6);
  static const int PendantInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PendantInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PendantInfo, assetpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PendantInfo, assettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PendantInfo, attachpointname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PendantInfo, scale_),
  };
  PendantInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PendantInfo_descriptor_,
      PendantInfo::default_instance_,
      PendantInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PendantInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PendantInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PendantInfo));
  AnimAsset2_descriptor_ = file->message_type(7);
  static const int AnimAsset2_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset2, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset2, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset2, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset2, assetpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset2, defaultanim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset2, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset2, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset2, sortinglayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset2, sortingorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset2, withguard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset2, guardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset2, attachpointarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset2, pendantinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset2, specialstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset2, fake3doffset_),
  };
  AnimAsset2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnimAsset2_descriptor_,
      AnimAsset2::default_instance_,
      AnimAsset2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnimAsset2));
  StaticAsset2_descriptor_ = file->message_type(8);
  static const int StaticAsset2_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset2, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset2, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset2, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset2, assetpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset2, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset2, sortinglayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset2, sortingorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset2, withguard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset2, guardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset2, fake3doffset_),
  };
  StaticAsset2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StaticAsset2_descriptor_,
      StaticAsset2::default_instance_,
      StaticAsset2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StaticAsset2));
  EffectAsset2_descriptor_ = file->message_type(9);
  static const int EffectAsset2_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAsset2, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAsset2, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAsset2, assetpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAsset2, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAsset2, sortinglayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAsset2, sortingorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAsset2, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAsset2, fake3doffset_),
  };
  EffectAsset2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EffectAsset2_descriptor_,
      EffectAsset2::default_instance_,
      EffectAsset2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAsset2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAsset2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EffectAsset2));
  AssetGroup_descriptor_ = file->message_type(10);
  static const int AssetGroup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetGroup, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetGroup, effectassetarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetGroup, animassetarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetGroup, staticassetarr_),
  };
  AssetGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssetGroup_descriptor_,
      AssetGroup::default_instance_,
      AssetGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssetGroup));
  PatrolPathPoint_descriptor_ = file->message_type(11);
  static const int PatrolPathPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatrolPathPoint, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatrolPathPoint, staytime_),
  };
  PatrolPathPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PatrolPathPoint_descriptor_,
      PatrolPathPoint::default_instance_,
      PatrolPathPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatrolPathPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatrolPathPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PatrolPathPoint));
  PatrolPath2_descriptor_ = file->message_type(12);
  static const int PatrolPath2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatrolPath2, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatrolPath2, pointarr_),
  };
  PatrolPath2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PatrolPath2_descriptor_,
      PatrolPath2::default_instance_,
      PatrolPath2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatrolPath2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatrolPath2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PatrolPath2));
  PatrolPathConf_descriptor_ = file->message_type(13);
  static const int PatrolPathConf_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatrolPathConf, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatrolPathConf, patrolpathname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatrolPathConf, animassetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatrolPathConf, patroltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatrolPathConf, patrolspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatrolPathConf, patrolinganim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatrolPathConf, defaultanim_),
  };
  PatrolPathConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PatrolPathConf_descriptor_,
      PatrolPathConf::default_instance_,
      PatrolPathConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatrolPathConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatrolPathConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PatrolPathConf));
  CarrierEnt2_descriptor_ = file->message_type(14);
  static const int CarrierEnt2_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierEnt2, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierEnt2, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierEnt2, enterposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierEnt2, existposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierEnt2, sceneuiposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierEnt2, assetpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierEnt2, fadeintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierEnt2, sceneuiassetpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierEnt2, walkareaname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierEnt2, carrierspeed_),
  };
  CarrierEnt2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarrierEnt2_descriptor_,
      CarrierEnt2::default_instance_,
      CarrierEnt2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierEnt2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierEnt2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarrierEnt2));
  FeatureEntrance_descriptor_ = file->message_type(15);
  static const int FeatureEntrance_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntrance, interactable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntrance, featureentranceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntrance, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntrance, eventfuncid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntrance, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntrance, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntrance, sortedlayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntrance, orderinlayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntrance, attachpointarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntrance, assetpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntrance, switchconfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntrance, pressscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntrance, fake3doffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntrance, entrancename_),
  };
  FeatureEntrance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeatureEntrance_descriptor_,
      FeatureEntrance::default_instance_,
      FeatureEntrance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntrance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureEntrance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeatureEntrance));
  SceneChunkInfo_descriptor_ = file->message_type(16);
  static const int SceneChunkInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChunkInfo, coordinateorigin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChunkInfo, unitchunkinfo_),
  };
  SceneChunkInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneChunkInfo_descriptor_,
      SceneChunkInfo::default_instance_,
      SceneChunkInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChunkInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneChunkInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneChunkInfo));
  Obstacle_descriptor_ = file->message_type(17);
  static const int Obstacle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, visible_),
  };
  Obstacle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Obstacle_descriptor_,
      Obstacle::default_instance_,
      Obstacle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Obstacle));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fSceneConf2d_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointElement2_descriptor_, &PointElement2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttachPoint2_descriptor_, &AttachPoint2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BindAssetInfo_descriptor_, &BindAssetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RectArea2_descriptor_, &RectArea2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CustomArea2_descriptor_, &CustomArea2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuardInfo_descriptor_, &GuardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PendantInfo_descriptor_, &PendantInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnimAsset2_descriptor_, &AnimAsset2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StaticAsset2_descriptor_, &StaticAsset2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EffectAsset2_descriptor_, &EffectAsset2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssetGroup_descriptor_, &AssetGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PatrolPathPoint_descriptor_, &PatrolPathPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PatrolPath2_descriptor_, &PatrolPath2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PatrolPathConf_descriptor_, &PatrolPathConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarrierEnt2_descriptor_, &CarrierEnt2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeatureEntrance_descriptor_, &FeatureEntrance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneChunkInfo_descriptor_, &SceneChunkInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Obstacle_descriptor_, &Obstacle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fSceneConf2d_2eproto() {
  delete PointElement2::default_instance_;
  delete PointElement2_reflection_;
  delete AttachPoint2::default_instance_;
  delete AttachPoint2_reflection_;
  delete BindAssetInfo::default_instance_;
  delete BindAssetInfo_reflection_;
  delete RectArea2::default_instance_;
  delete RectArea2_reflection_;
  delete CustomArea2::default_instance_;
  delete CustomArea2_reflection_;
  delete GuardInfo::default_instance_;
  delete GuardInfo_reflection_;
  delete PendantInfo::default_instance_;
  delete PendantInfo_reflection_;
  delete AnimAsset2::default_instance_;
  delete AnimAsset2_reflection_;
  delete StaticAsset2::default_instance_;
  delete StaticAsset2_reflection_;
  delete EffectAsset2::default_instance_;
  delete EffectAsset2_reflection_;
  delete AssetGroup::default_instance_;
  delete AssetGroup_reflection_;
  delete PatrolPathPoint::default_instance_;
  delete PatrolPathPoint_reflection_;
  delete PatrolPath2::default_instance_;
  delete PatrolPath2_reflection_;
  delete PatrolPathConf::default_instance_;
  delete PatrolPathConf_reflection_;
  delete CarrierEnt2::default_instance_;
  delete CarrierEnt2_reflection_;
  delete FeatureEntrance::default_instance_;
  delete FeatureEntrance_reflection_;
  delete SceneChunkInfo::default_instance_;
  delete SceneChunkInfo_reflection_;
  delete Obstacle::default_instance_;
  delete Obstacle_reflection_;
}

void protobuf_AddDesc_module_2fSceneConf2d_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fSceneElementDefine_2eproto();
  ::pb::protobuf_AddDesc_module_2fUtil_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030module/SceneConf2d.proto\022\002pb\032\037module/S"
    "ceneElementDefine.proto\032\021module/Util.pro"
    "to\"\335\001\n\rPointElement2\022*\n\013ElementType\030\001 \002("
    "\0162\025.pb.ESceneElementType\022\014\n\004Name\030\002 \002(\t\022\037"
    "\n\010Position\030\003 \002(\0132\r.pb.PbVector2\022\024\n\014Sorti"
    "ngLayer\030\004 \001(\t\022\024\n\014SortingOrder\030\005 \001(\r\022 \n\tD"
    "irection\030\006 \001(\0132\r.pb.PbVector2\022#\n\014Fake3dO"
    "ffset\030\007 \001(\0132\r.pb.PbVector2\"`\n\014AttachPoin"
    "t2\022\014\n\004Name\030\001 \001(\t\022\037\n\010Position\030\002 \001(\0132\r.pb."
    "PbVector2\022!\n\nWorldScale\030\003 \001(\0132\r.pb.PbVec"
    "tor2\"\255\001\n\rBindAssetInfo\022\024\n\014AssetEleName\030\001"
    " \001(\t\022\037\n\027ActiveMoveTargetEleName\030\002 \001(\t\022\021\n"
    "\tMoveSpeed\030\003 \001(\002\022\024\n\014MoveAnimName\030\004 \001(\t\022\'"
    "\n\020MoveEndDirection\030\005 \001(\0132\r.pb.PbVector2\022"
    "\023\n\013ArrivedAnim\030\006 \001(\t\"\316\002\n\tRectArea2\022*\n\013El"
    "ementType\030\001 \002(\0162\025.pb.ESceneElementType\022\014"
    "\n\004Name\030\002 \002(\t\022\034\n\010RectInfo\030\003 \002(\0132\n.pb.PbRe"
    "ct\022%\n\016CenterPosition\030\004 \002(\0132\r.pb.PbVector"
    "2\022\017\n\007Visible\030\005 \002(\010\022(\n\016AttachPointArr\030\006 \003"
    "(\0132\020.pb.AttachPoint2\022\024\n\014SortingLayer\030\007 \001"
    "(\t\022\024\n\014SortingOrder\030\010 \001(\005\0221\n\026ActiveBindAs"
    "setInfoArr\030\t \003(\0132\021.pb.BindAssetInfo\022\017\n\007C"
    "onfTid\030\n \001(\005\022\027\n\017ViewElementName\030\013 \001(\t\"\276\001"
    "\n\013CustomArea2\022*\n\013ElementType\030\001 \002(\0162\025.pb."
    "ESceneElementType\022\014\n\004Name\030\002 \002(\t\022$\n\rChunk"
    "IndexArr\030\003 \003(\0132\r.pb.PbVector2\022\017\n\007Visible"
    "\030\004 \002(\010\022\027\n\017ViewElementName\030\005 \001(\t\022%\n\016Cente"
    "rPosition\030\006 \001(\0132\r.pb.PbVector2\"d\n\tGuardI"
    "nfo\022\016\n\006Radius\030\001 \001(\002\022\016\n\006Degree\030\002 \001(\r\022&\n\tE"
    "ventType\030\003 \001(\0162\023.pb.EGuardEventType\022\017\n\007E"
    "ventId\030\004 \001(\r\"i\n\013PendantInfo\022\014\n\004Name\030\001 \001("
    "\t\022\021\n\tAssetPath\030\002 \001(\t\022\021\n\tAssetType\030\003 \001(\r\022"
    "\027\n\017AttachPointName\030\004 \001(\t\022\r\n\005Scale\030\005 \001(\002\""
    "\243\003\n\nAnimAsset2\022\014\n\004Name\030\001 \002(\t\022\037\n\010Position"
    "\030\002 \002(\0132\r.pb.PbVector2\022\034\n\005Scale\030\003 \002(\0132\r.p"
    "b.PbVector2\022\021\n\tAssetPath\030\004 \002(\t\022\023\n\013Defaul"
    "tAnim\030\005 \001(\t\022\017\n\007Visible\030\006 \002(\010\022 \n\tDirectio"
    "n\030\007 \001(\0132\r.pb.PbVector2\022\024\n\014SortingLayer\030\010"
    " \001(\t\022\024\n\014SortingOrder\030\t \001(\r\022\021\n\tWithGuard\030"
    "\n \001(\010\022 \n\tGuardInfo\030\013 \001(\0132\r.pb.GuardInfo\022"
    "(\n\016AttachPointArr\030\014 \003(\0132\020.pb.AttachPoint"
    "2\022\'\n\016PendantInfoArr\030\r \003(\0132\017.pb.PendantIn"
    "fo\022\024\n\014SpecialStyle\030\016 \001(\r\022#\n\014Fake3dOffset"
    "\030\017 \001(\0132\r.pb.PbVector2\"\205\002\n\014StaticAsset2\022\014"
    "\n\004Name\030\001 \002(\t\022\037\n\010Position\030\002 \002(\0132\r.pb.PbVe"
    "ctor2\022\034\n\005Scale\030\003 \002(\0132\r.pb.PbVector2\022\021\n\tA"
    "ssetPath\030\004 \002(\t\022\017\n\007Visible\030\005 \002(\010\022\024\n\014Sorti"
    "ngLayer\030\006 \001(\t\022\024\n\014SortingOrder\030\007 \001(\r\022\021\n\tW"
    "ithGuard\030\010 \001(\010\022 \n\tGuardInfo\030\t \001(\0132\r.pb.G"
    "uardInfo\022#\n\014Fake3dOffset\030\n \001(\0132\r.pb.PbVe"
    "ctor2\"\301\001\n\014EffectAsset2\022\014\n\004Name\030\001 \002(\t\022\037\n\010"
    "Position\030\002 \002(\0132\r.pb.PbVector2\022\021\n\tAssetPa"
    "th\030\003 \002(\t\022\017\n\007Visible\030\004 \002(\010\022\024\n\014SortingLaye"
    "r\030\005 \001(\t\022\024\n\014SortingOrder\030\006 \001(\r\022\r\n\005Scale\030\007"
    " \001(\002\022#\n\014Fake3dOffset\030\010 \001(\0132\r.pb.PbVector"
    "2\"\224\001\n\nAssetGroup\022\014\n\004Name\030\001 \001(\t\022(\n\016Effect"
    "AssetArr\030\002 \003(\0132\020.pb.EffectAsset2\022$\n\014Anim"
    "AssetArr\030\003 \003(\0132\016.pb.AnimAsset2\022(\n\016Static"
    "AssetArr\030\004 \003(\0132\020.pb.StaticAsset2\"D\n\017Patr"
    "olPathPoint\022\037\n\010Position\030\001 \001(\0132\r.pb.PbVec"
    "tor2\022\020\n\010StayTime\030\002 \001(\002\"B\n\013PatrolPath2\022\014\n"
    "\004Name\030\001 \001(\t\022%\n\010PointArr\030\002 \003(\0132\023.pb.Patro"
    "lPathPoint\"\242\001\n\016PatrolPathConf\022\014\n\004Name\030\001 "
    "\002(\t\022\026\n\016PatrolPathName\030\002 \002(\t\022\025\n\rAnimAsset"
    "Name\030\003 \002(\t\022\022\n\nPatrolType\030\004 \002(\r\022\023\n\013Patrol"
    "Speed\030\005 \002(\002\022\025\n\rPatrolingAnim\030\006 \002(\t\022\023\n\013De"
    "faultAnim\030\007 \002(\t\"\215\002\n\013CarrierEnt2\022\014\n\004Name\030"
    "\001 \001(\t\022\017\n\007Visible\030\002 \001(\010\022$\n\rEnterPosition\030"
    "\003 \001(\0132\r.pb.PbVector2\022$\n\rExistPosition\030\004 "
    "\001(\0132\r.pb.PbVector2\022&\n\017SceneUIPosition\030\005 "
    "\001(\0132\r.pb.PbVector2\022\021\n\tAssetPath\030\006 \001(\t\022\022\n"
    "\nFadeInTime\030\007 \001(\002\022\030\n\020SceneUIAssetPath\030\010 "
    "\001(\t\022\024\n\014WalkAreaName\030\t \001(\t\022\024\n\014CarrierSpee"
    "d\030\n \001(\002\"\363\002\n\017FeatureEntrance\022\024\n\014Interacta"
    "ble\030\001 \001(\010\022\031\n\021FeatureEntranceId\030\002 \001(\005\022\037\n\010"
    "Position\030\003 \001(\0132\r.pb.PbVector2\022\023\n\013EventFu"
    "ncId\030\004 \001(\005\022\016\n\006Params\030\005 \001(\t\022\034\n\005Scale\030\006 \001("
    "\0132\r.pb.PbVector2\022\023\n\013SortedLayer\030\007 \001(\t\022\024\n"
    "\014OrderInLayer\030\010 \001(\r\022(\n\016AttachPointArr\030\t "
    "\003(\0132\020.pb.AttachPoint2\022\021\n\tAssetPath\030\n \001(\t"
    "\022\024\n\014SwitchConfId\030\013 \001(\r\022\022\n\nPressScale\030\014 \001"
    "(\002\022#\n\014Fake3dOffset\030\r \001(\0132\r.pb.PbVector2\022"
    "\024\n\014EntranceName\030\016 \001(\t\"_\n\016SceneChunkInfo\022"
    "\'\n\020CoordinateOrigin\030\001 \002(\0132\r.pb.PbVector2"
    "\022$\n\rUnitChunkInfo\030\002 \002(\0132\r.pb.PbVector2\")"
    "\n\010Obstacle\022\014\n\004Name\030\001 \001(\t\022\017\n\007Visible\030\002 \001("
    "\010", 3441);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/SceneConf2d.proto", &protobuf_RegisterTypes);
  PointElement2::default_instance_ = new PointElement2();
  AttachPoint2::default_instance_ = new AttachPoint2();
  BindAssetInfo::default_instance_ = new BindAssetInfo();
  RectArea2::default_instance_ = new RectArea2();
  CustomArea2::default_instance_ = new CustomArea2();
  GuardInfo::default_instance_ = new GuardInfo();
  PendantInfo::default_instance_ = new PendantInfo();
  AnimAsset2::default_instance_ = new AnimAsset2();
  StaticAsset2::default_instance_ = new StaticAsset2();
  EffectAsset2::default_instance_ = new EffectAsset2();
  AssetGroup::default_instance_ = new AssetGroup();
  PatrolPathPoint::default_instance_ = new PatrolPathPoint();
  PatrolPath2::default_instance_ = new PatrolPath2();
  PatrolPathConf::default_instance_ = new PatrolPathConf();
  CarrierEnt2::default_instance_ = new CarrierEnt2();
  FeatureEntrance::default_instance_ = new FeatureEntrance();
  SceneChunkInfo::default_instance_ = new SceneChunkInfo();
  Obstacle::default_instance_ = new Obstacle();
  PointElement2::default_instance_->InitAsDefaultInstance();
  AttachPoint2::default_instance_->InitAsDefaultInstance();
  BindAssetInfo::default_instance_->InitAsDefaultInstance();
  RectArea2::default_instance_->InitAsDefaultInstance();
  CustomArea2::default_instance_->InitAsDefaultInstance();
  GuardInfo::default_instance_->InitAsDefaultInstance();
  PendantInfo::default_instance_->InitAsDefaultInstance();
  AnimAsset2::default_instance_->InitAsDefaultInstance();
  StaticAsset2::default_instance_->InitAsDefaultInstance();
  EffectAsset2::default_instance_->InitAsDefaultInstance();
  AssetGroup::default_instance_->InitAsDefaultInstance();
  PatrolPathPoint::default_instance_->InitAsDefaultInstance();
  PatrolPath2::default_instance_->InitAsDefaultInstance();
  PatrolPathConf::default_instance_->InitAsDefaultInstance();
  CarrierEnt2::default_instance_->InitAsDefaultInstance();
  FeatureEntrance::default_instance_->InitAsDefaultInstance();
  SceneChunkInfo::default_instance_->InitAsDefaultInstance();
  Obstacle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fSceneConf2d_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fSceneConf2d_2eproto {
  StaticDescriptorInitializer_module_2fSceneConf2d_2eproto() {
    protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  }
} static_descriptor_initializer_module_2fSceneConf2d_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PointElement2::kElementTypeFieldNumber;
const int PointElement2::kNameFieldNumber;
const int PointElement2::kPositionFieldNumber;
const int PointElement2::kSortingLayerFieldNumber;
const int PointElement2::kSortingOrderFieldNumber;
const int PointElement2::kDirectionFieldNumber;
const int PointElement2::kFake3DOffsetFieldNumber;
#endif  // !_MSC_VER

PointElement2::PointElement2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PointElement2)
}

void PointElement2::InitAsDefaultInstance() {
  position_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
  direction_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
  fake3doffset_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
}

PointElement2::PointElement2(const PointElement2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PointElement2)
}

void PointElement2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  elementtype_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = NULL;
  sortinglayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sortingorder_ = 0u;
  direction_ = NULL;
  fake3doffset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointElement2::~PointElement2() {
  // @@protoc_insertion_point(destructor:pb.PointElement2)
  SharedDtor();
}

void PointElement2::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (sortinglayer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sortinglayer_;
  }
  if (this != default_instance_) {
    delete position_;
    delete direction_;
    delete fake3doffset_;
  }
}

void PointElement2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointElement2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointElement2_descriptor_;
}

const PointElement2& PointElement2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  return *default_instance_;
}

PointElement2* PointElement2::default_instance_ = NULL;

PointElement2* PointElement2::New() const {
  return new PointElement2;
}

void PointElement2::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    elementtype_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::pb::PbVector2::Clear();
    }
    if (has_sortinglayer()) {
      if (sortinglayer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sortinglayer_->clear();
      }
    }
    sortingorder_ = 0u;
    if (has_direction()) {
      if (direction_ != NULL) direction_->::pb::PbVector2::Clear();
    }
    if (has_fake3doffset()) {
      if (fake3doffset_ != NULL) fake3doffset_->::pb::PbVector2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointElement2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PointElement2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.ESceneElementType ElementType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ESceneElementType_IsValid(value)) {
            set_elementtype(static_cast< ::pb::ESceneElementType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Position;
        break;
      }

      // required .pb.PbVector2 Position = 3;
      case 3: {
        if (tag == 26) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SortingLayer;
        break;
      }

      // optional string SortingLayer = 4;
      case 4: {
        if (tag == 34) {
         parse_SortingLayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sortinglayer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sortinglayer().data(), this->sortinglayer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sortinglayer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SortingOrder;
        break;
      }

      // optional uint32 SortingOrder = 5;
      case 5: {
        if (tag == 40) {
         parse_SortingOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sortingorder_)));
          set_has_sortingorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Direction;
        break;
      }

      // optional .pb.PbVector2 Direction = 6;
      case 6: {
        if (tag == 50) {
         parse_Direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Fake3dOffset;
        break;
      }

      // optional .pb.PbVector2 Fake3dOffset = 7;
      case 7: {
        if (tag == 58) {
         parse_Fake3dOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fake3doffset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PointElement2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PointElement2)
  return false;
#undef DO_
}

void PointElement2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PointElement2)
  // required .pb.ESceneElementType ElementType = 1;
  if (has_elementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->elementtype(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required .pb.PbVector2 Position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  // optional string SortingLayer = 4;
  if (has_sortinglayer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sortinglayer().data(), this->sortinglayer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sortinglayer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sortinglayer(), output);
  }

  // optional uint32 SortingOrder = 5;
  if (has_sortingorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sortingorder(), output);
  }

  // optional .pb.PbVector2 Direction = 6;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->direction(), output);
  }

  // optional .pb.PbVector2 Fake3dOffset = 7;
  if (has_fake3doffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fake3doffset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PointElement2)
}

::google::protobuf::uint8* PointElement2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PointElement2)
  // required .pb.ESceneElementType ElementType = 1;
  if (has_elementtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->elementtype(), target);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .pb.PbVector2 Position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  // optional string SortingLayer = 4;
  if (has_sortinglayer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sortinglayer().data(), this->sortinglayer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sortinglayer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sortinglayer(), target);
  }

  // optional uint32 SortingOrder = 5;
  if (has_sortingorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sortingorder(), target);
  }

  // optional .pb.PbVector2 Direction = 6;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->direction(), target);
  }

  // optional .pb.PbVector2 Fake3dOffset = 7;
  if (has_fake3doffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fake3doffset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PointElement2)
  return target;
}

int PointElement2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.ESceneElementType ElementType = 1;
    if (has_elementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->elementtype());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .pb.PbVector2 Position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional string SortingLayer = 4;
    if (has_sortinglayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sortinglayer());
    }

    // optional uint32 SortingOrder = 5;
    if (has_sortingorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sortingorder());
    }

    // optional .pb.PbVector2 Direction = 6;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // optional .pb.PbVector2 Fake3dOffset = 7;
    if (has_fake3doffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fake3doffset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointElement2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointElement2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointElement2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointElement2::MergeFrom(const PointElement2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elementtype()) {
      set_elementtype(from.elementtype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_position()) {
      mutable_position()->::pb::PbVector2::MergeFrom(from.position());
    }
    if (from.has_sortinglayer()) {
      set_sortinglayer(from.sortinglayer());
    }
    if (from.has_sortingorder()) {
      set_sortingorder(from.sortingorder());
    }
    if (from.has_direction()) {
      mutable_direction()->::pb::PbVector2::MergeFrom(from.direction());
    }
    if (from.has_fake3doffset()) {
      mutable_fake3doffset()->::pb::PbVector2::MergeFrom(from.fake3doffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointElement2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointElement2::CopyFrom(const PointElement2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointElement2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_direction()) {
    if (!this->direction().IsInitialized()) return false;
  }
  if (has_fake3doffset()) {
    if (!this->fake3doffset().IsInitialized()) return false;
  }
  return true;
}

void PointElement2::Swap(PointElement2* other) {
  if (other != this) {
    std::swap(elementtype_, other->elementtype_);
    std::swap(name_, other->name_);
    std::swap(position_, other->position_);
    std::swap(sortinglayer_, other->sortinglayer_);
    std::swap(sortingorder_, other->sortingorder_);
    std::swap(direction_, other->direction_);
    std::swap(fake3doffset_, other->fake3doffset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointElement2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointElement2_descriptor_;
  metadata.reflection = PointElement2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttachPoint2::kNameFieldNumber;
const int AttachPoint2::kPositionFieldNumber;
const int AttachPoint2::kWorldScaleFieldNumber;
#endif  // !_MSC_VER

AttachPoint2::AttachPoint2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AttachPoint2)
}

void AttachPoint2::InitAsDefaultInstance() {
  position_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
  worldscale_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
}

AttachPoint2::AttachPoint2(const AttachPoint2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AttachPoint2)
}

void AttachPoint2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = NULL;
  worldscale_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttachPoint2::~AttachPoint2() {
  // @@protoc_insertion_point(destructor:pb.AttachPoint2)
  SharedDtor();
}

void AttachPoint2::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete position_;
    delete worldscale_;
  }
}

void AttachPoint2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttachPoint2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttachPoint2_descriptor_;
}

const AttachPoint2& AttachPoint2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  return *default_instance_;
}

AttachPoint2* AttachPoint2::default_instance_ = NULL;

AttachPoint2* AttachPoint2::New() const {
  return new AttachPoint2;
}

void AttachPoint2::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::pb::PbVector2::Clear();
    }
    if (has_worldscale()) {
      if (worldscale_ != NULL) worldscale_->::pb::PbVector2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttachPoint2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AttachPoint2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Position;
        break;
      }

      // optional .pb.PbVector2 Position = 2;
      case 2: {
        if (tag == 18) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_WorldScale;
        break;
      }

      // optional .pb.PbVector2 WorldScale = 3;
      case 3: {
        if (tag == 26) {
         parse_WorldScale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worldscale()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AttachPoint2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AttachPoint2)
  return false;
#undef DO_
}

void AttachPoint2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AttachPoint2)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .pb.PbVector2 Position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  // optional .pb.PbVector2 WorldScale = 3;
  if (has_worldscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->worldscale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AttachPoint2)
}

::google::protobuf::uint8* AttachPoint2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AttachPoint2)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .pb.PbVector2 Position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  // optional .pb.PbVector2 WorldScale = 3;
  if (has_worldscale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->worldscale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AttachPoint2)
  return target;
}

int AttachPoint2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .pb.PbVector2 Position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .pb.PbVector2 WorldScale = 3;
    if (has_worldscale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worldscale());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttachPoint2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttachPoint2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttachPoint2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttachPoint2::MergeFrom(const AttachPoint2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_position()) {
      mutable_position()->::pb::PbVector2::MergeFrom(from.position());
    }
    if (from.has_worldscale()) {
      mutable_worldscale()->::pb::PbVector2::MergeFrom(from.worldscale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttachPoint2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttachPoint2::CopyFrom(const AttachPoint2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachPoint2::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_worldscale()) {
    if (!this->worldscale().IsInitialized()) return false;
  }
  return true;
}

void AttachPoint2::Swap(AttachPoint2* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(position_, other->position_);
    std::swap(worldscale_, other->worldscale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttachPoint2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttachPoint2_descriptor_;
  metadata.reflection = AttachPoint2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BindAssetInfo::kAssetEleNameFieldNumber;
const int BindAssetInfo::kActiveMoveTargetEleNameFieldNumber;
const int BindAssetInfo::kMoveSpeedFieldNumber;
const int BindAssetInfo::kMoveAnimNameFieldNumber;
const int BindAssetInfo::kMoveEndDirectionFieldNumber;
const int BindAssetInfo::kArrivedAnimFieldNumber;
#endif  // !_MSC_VER

BindAssetInfo::BindAssetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BindAssetInfo)
}

void BindAssetInfo::InitAsDefaultInstance() {
  moveenddirection_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
}

BindAssetInfo::BindAssetInfo(const BindAssetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BindAssetInfo)
}

void BindAssetInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  assetelename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activemovetargetelename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  movespeed_ = 0;
  moveanimname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  moveenddirection_ = NULL;
  arrivedanim_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BindAssetInfo::~BindAssetInfo() {
  // @@protoc_insertion_point(destructor:pb.BindAssetInfo)
  SharedDtor();
}

void BindAssetInfo::SharedDtor() {
  if (assetelename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete assetelename_;
  }
  if (activemovetargetelename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete activemovetargetelename_;
  }
  if (moveanimname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete moveanimname_;
  }
  if (arrivedanim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete arrivedanim_;
  }
  if (this != default_instance_) {
    delete moveenddirection_;
  }
}

void BindAssetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindAssetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BindAssetInfo_descriptor_;
}

const BindAssetInfo& BindAssetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  return *default_instance_;
}

BindAssetInfo* BindAssetInfo::default_instance_ = NULL;

BindAssetInfo* BindAssetInfo::New() const {
  return new BindAssetInfo;
}

void BindAssetInfo::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_assetelename()) {
      if (assetelename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        assetelename_->clear();
      }
    }
    if (has_activemovetargetelename()) {
      if (activemovetargetelename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        activemovetargetelename_->clear();
      }
    }
    movespeed_ = 0;
    if (has_moveanimname()) {
      if (moveanimname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        moveanimname_->clear();
      }
    }
    if (has_moveenddirection()) {
      if (moveenddirection_ != NULL) moveenddirection_->::pb::PbVector2::Clear();
    }
    if (has_arrivedanim()) {
      if (arrivedanim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        arrivedanim_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BindAssetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BindAssetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AssetEleName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assetelename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->assetelename().data(), this->assetelename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "assetelename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ActiveMoveTargetEleName;
        break;
      }

      // optional string ActiveMoveTargetEleName = 2;
      case 2: {
        if (tag == 18) {
         parse_ActiveMoveTargetEleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activemovetargetelename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->activemovetargetelename().data(), this->activemovetargetelename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "activemovetargetelename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_MoveSpeed;
        break;
      }

      // optional float MoveSpeed = 3;
      case 3: {
        if (tag == 29) {
         parse_MoveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_MoveAnimName;
        break;
      }

      // optional string MoveAnimName = 4;
      case 4: {
        if (tag == 34) {
         parse_MoveAnimName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_moveanimname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->moveanimname().data(), this->moveanimname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "moveanimname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_MoveEndDirection;
        break;
      }

      // optional .pb.PbVector2 MoveEndDirection = 5;
      case 5: {
        if (tag == 42) {
         parse_MoveEndDirection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_moveenddirection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ArrivedAnim;
        break;
      }

      // optional string ArrivedAnim = 6;
      case 6: {
        if (tag == 50) {
         parse_ArrivedAnim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arrivedanim()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arrivedanim().data(), this->arrivedanim().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "arrivedanim");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BindAssetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BindAssetInfo)
  return false;
#undef DO_
}

void BindAssetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BindAssetInfo)
  // optional string AssetEleName = 1;
  if (has_assetelename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetelename().data(), this->assetelename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetelename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->assetelename(), output);
  }

  // optional string ActiveMoveTargetEleName = 2;
  if (has_activemovetargetelename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->activemovetargetelename().data(), this->activemovetargetelename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "activemovetargetelename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->activemovetargetelename(), output);
  }

  // optional float MoveSpeed = 3;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->movespeed(), output);
  }

  // optional string MoveAnimName = 4;
  if (has_moveanimname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->moveanimname().data(), this->moveanimname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "moveanimname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->moveanimname(), output);
  }

  // optional .pb.PbVector2 MoveEndDirection = 5;
  if (has_moveenddirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->moveenddirection(), output);
  }

  // optional string ArrivedAnim = 6;
  if (has_arrivedanim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arrivedanim().data(), this->arrivedanim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "arrivedanim");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->arrivedanim(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BindAssetInfo)
}

::google::protobuf::uint8* BindAssetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BindAssetInfo)
  // optional string AssetEleName = 1;
  if (has_assetelename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetelename().data(), this->assetelename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetelename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->assetelename(), target);
  }

  // optional string ActiveMoveTargetEleName = 2;
  if (has_activemovetargetelename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->activemovetargetelename().data(), this->activemovetargetelename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "activemovetargetelename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->activemovetargetelename(), target);
  }

  // optional float MoveSpeed = 3;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->movespeed(), target);
  }

  // optional string MoveAnimName = 4;
  if (has_moveanimname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->moveanimname().data(), this->moveanimname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "moveanimname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->moveanimname(), target);
  }

  // optional .pb.PbVector2 MoveEndDirection = 5;
  if (has_moveenddirection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->moveenddirection(), target);
  }

  // optional string ArrivedAnim = 6;
  if (has_arrivedanim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arrivedanim().data(), this->arrivedanim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "arrivedanim");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->arrivedanim(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BindAssetInfo)
  return target;
}

int BindAssetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AssetEleName = 1;
    if (has_assetelename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assetelename());
    }

    // optional string ActiveMoveTargetEleName = 2;
    if (has_activemovetargetelename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activemovetargetelename());
    }

    // optional float MoveSpeed = 3;
    if (has_movespeed()) {
      total_size += 1 + 4;
    }

    // optional string MoveAnimName = 4;
    if (has_moveanimname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->moveanimname());
    }

    // optional .pb.PbVector2 MoveEndDirection = 5;
    if (has_moveenddirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->moveenddirection());
    }

    // optional string ArrivedAnim = 6;
    if (has_arrivedanim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arrivedanim());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindAssetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BindAssetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BindAssetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BindAssetInfo::MergeFrom(const BindAssetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assetelename()) {
      set_assetelename(from.assetelename());
    }
    if (from.has_activemovetargetelename()) {
      set_activemovetargetelename(from.activemovetargetelename());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_moveanimname()) {
      set_moveanimname(from.moveanimname());
    }
    if (from.has_moveenddirection()) {
      mutable_moveenddirection()->::pb::PbVector2::MergeFrom(from.moveenddirection());
    }
    if (from.has_arrivedanim()) {
      set_arrivedanim(from.arrivedanim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BindAssetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindAssetInfo::CopyFrom(const BindAssetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindAssetInfo::IsInitialized() const {

  if (has_moveenddirection()) {
    if (!this->moveenddirection().IsInitialized()) return false;
  }
  return true;
}

void BindAssetInfo::Swap(BindAssetInfo* other) {
  if (other != this) {
    std::swap(assetelename_, other->assetelename_);
    std::swap(activemovetargetelename_, other->activemovetargetelename_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(moveanimname_, other->moveanimname_);
    std::swap(moveenddirection_, other->moveenddirection_);
    std::swap(arrivedanim_, other->arrivedanim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BindAssetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BindAssetInfo_descriptor_;
  metadata.reflection = BindAssetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RectArea2::kElementTypeFieldNumber;
const int RectArea2::kNameFieldNumber;
const int RectArea2::kRectInfoFieldNumber;
const int RectArea2::kCenterPositionFieldNumber;
const int RectArea2::kVisibleFieldNumber;
const int RectArea2::kAttachPointArrFieldNumber;
const int RectArea2::kSortingLayerFieldNumber;
const int RectArea2::kSortingOrderFieldNumber;
const int RectArea2::kActiveBindAssetInfoArrFieldNumber;
const int RectArea2::kConfTidFieldNumber;
const int RectArea2::kViewElementNameFieldNumber;
#endif  // !_MSC_VER

RectArea2::RectArea2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RectArea2)
}

void RectArea2::InitAsDefaultInstance() {
  rectinfo_ = const_cast< ::pb::PbRect*>(&::pb::PbRect::default_instance());
  centerposition_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
}

RectArea2::RectArea2(const RectArea2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.RectArea2)
}

void RectArea2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  elementtype_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rectinfo_ = NULL;
  centerposition_ = NULL;
  visible_ = false;
  sortinglayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sortingorder_ = 0;
  conftid_ = 0;
  viewelementname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RectArea2::~RectArea2() {
  // @@protoc_insertion_point(destructor:pb.RectArea2)
  SharedDtor();
}

void RectArea2::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (sortinglayer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sortinglayer_;
  }
  if (viewelementname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete viewelementname_;
  }
  if (this != default_instance_) {
    delete rectinfo_;
    delete centerposition_;
  }
}

void RectArea2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RectArea2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RectArea2_descriptor_;
}

const RectArea2& RectArea2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  return *default_instance_;
}

RectArea2* RectArea2::default_instance_ = NULL;

RectArea2* RectArea2::New() const {
  return new RectArea2;
}

void RectArea2::Clear() {
  if (_has_bits_[0 / 32] & 223) {
    elementtype_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_rectinfo()) {
      if (rectinfo_ != NULL) rectinfo_->::pb::PbRect::Clear();
    }
    if (has_centerposition()) {
      if (centerposition_ != NULL) centerposition_->::pb::PbVector2::Clear();
    }
    visible_ = false;
    if (has_sortinglayer()) {
      if (sortinglayer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sortinglayer_->clear();
      }
    }
    sortingorder_ = 0;
  }
  if (_has_bits_[8 / 32] & 1536) {
    conftid_ = 0;
    if (has_viewelementname()) {
      if (viewelementname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        viewelementname_->clear();
      }
    }
  }
  attachpointarr_.Clear();
  activebindassetinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RectArea2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RectArea2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.ESceneElementType ElementType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ESceneElementType_IsValid(value)) {
            set_elementtype(static_cast< ::pb::ESceneElementType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RectInfo;
        break;
      }

      // required .pb.PbRect RectInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_RectInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rectinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CenterPosition;
        break;
      }

      // required .pb.PbVector2 CenterPosition = 4;
      case 4: {
        if (tag == 34) {
         parse_CenterPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_centerposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Visible;
        break;
      }

      // required bool Visible = 5;
      case 5: {
        if (tag == 40) {
         parse_Visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_AttachPointArr;
        break;
      }

      // repeated .pb.AttachPoint2 AttachPointArr = 6;
      case 6: {
        if (tag == 50) {
         parse_AttachPointArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachpointarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_AttachPointArr;
        if (input->ExpectTag(58)) goto parse_SortingLayer;
        break;
      }

      // optional string SortingLayer = 7;
      case 7: {
        if (tag == 58) {
         parse_SortingLayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sortinglayer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sortinglayer().data(), this->sortinglayer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sortinglayer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_SortingOrder;
        break;
      }

      // optional int32 SortingOrder = 8;
      case 8: {
        if (tag == 64) {
         parse_SortingOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sortingorder_)));
          set_has_sortingorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ActiveBindAssetInfoArr;
        break;
      }

      // repeated .pb.BindAssetInfo ActiveBindAssetInfoArr = 9;
      case 9: {
        if (tag == 74) {
         parse_ActiveBindAssetInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activebindassetinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ActiveBindAssetInfoArr;
        if (input->ExpectTag(80)) goto parse_ConfTid;
        break;
      }

      // optional int32 ConfTid = 10;
      case 10: {
        if (tag == 80) {
         parse_ConfTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conftid_)));
          set_has_conftid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_ViewElementName;
        break;
      }

      // optional string ViewElementName = 11;
      case 11: {
        if (tag == 90) {
         parse_ViewElementName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_viewelementname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->viewelementname().data(), this->viewelementname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "viewelementname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RectArea2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RectArea2)
  return false;
#undef DO_
}

void RectArea2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RectArea2)
  // required .pb.ESceneElementType ElementType = 1;
  if (has_elementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->elementtype(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required .pb.PbRect RectInfo = 3;
  if (has_rectinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rectinfo(), output);
  }

  // required .pb.PbVector2 CenterPosition = 4;
  if (has_centerposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->centerposition(), output);
  }

  // required bool Visible = 5;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->visible(), output);
  }

  // repeated .pb.AttachPoint2 AttachPointArr = 6;
  for (int i = 0; i < this->attachpointarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attachpointarr(i), output);
  }

  // optional string SortingLayer = 7;
  if (has_sortinglayer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sortinglayer().data(), this->sortinglayer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sortinglayer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sortinglayer(), output);
  }

  // optional int32 SortingOrder = 8;
  if (has_sortingorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sortingorder(), output);
  }

  // repeated .pb.BindAssetInfo ActiveBindAssetInfoArr = 9;
  for (int i = 0; i < this->activebindassetinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->activebindassetinfoarr(i), output);
  }

  // optional int32 ConfTid = 10;
  if (has_conftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->conftid(), output);
  }

  // optional string ViewElementName = 11;
  if (has_viewelementname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->viewelementname().data(), this->viewelementname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "viewelementname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->viewelementname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RectArea2)
}

::google::protobuf::uint8* RectArea2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RectArea2)
  // required .pb.ESceneElementType ElementType = 1;
  if (has_elementtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->elementtype(), target);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .pb.PbRect RectInfo = 3;
  if (has_rectinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rectinfo(), target);
  }

  // required .pb.PbVector2 CenterPosition = 4;
  if (has_centerposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->centerposition(), target);
  }

  // required bool Visible = 5;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->visible(), target);
  }

  // repeated .pb.AttachPoint2 AttachPointArr = 6;
  for (int i = 0; i < this->attachpointarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attachpointarr(i), target);
  }

  // optional string SortingLayer = 7;
  if (has_sortinglayer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sortinglayer().data(), this->sortinglayer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sortinglayer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sortinglayer(), target);
  }

  // optional int32 SortingOrder = 8;
  if (has_sortingorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sortingorder(), target);
  }

  // repeated .pb.BindAssetInfo ActiveBindAssetInfoArr = 9;
  for (int i = 0; i < this->activebindassetinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->activebindassetinfoarr(i), target);
  }

  // optional int32 ConfTid = 10;
  if (has_conftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->conftid(), target);
  }

  // optional string ViewElementName = 11;
  if (has_viewelementname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->viewelementname().data(), this->viewelementname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "viewelementname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->viewelementname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RectArea2)
  return target;
}

int RectArea2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.ESceneElementType ElementType = 1;
    if (has_elementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->elementtype());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .pb.PbRect RectInfo = 3;
    if (has_rectinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rectinfo());
    }

    // required .pb.PbVector2 CenterPosition = 4;
    if (has_centerposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->centerposition());
    }

    // required bool Visible = 5;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional string SortingLayer = 7;
    if (has_sortinglayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sortinglayer());
    }

    // optional int32 SortingOrder = 8;
    if (has_sortingorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sortingorder());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 ConfTid = 10;
    if (has_conftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conftid());
    }

    // optional string ViewElementName = 11;
    if (has_viewelementname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->viewelementname());
    }

  }
  // repeated .pb.AttachPoint2 AttachPointArr = 6;
  total_size += 1 * this->attachpointarr_size();
  for (int i = 0; i < this->attachpointarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attachpointarr(i));
  }

  // repeated .pb.BindAssetInfo ActiveBindAssetInfoArr = 9;
  total_size += 1 * this->activebindassetinfoarr_size();
  for (int i = 0; i < this->activebindassetinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activebindassetinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RectArea2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RectArea2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RectArea2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RectArea2::MergeFrom(const RectArea2& from) {
  GOOGLE_CHECK_NE(&from, this);
  attachpointarr_.MergeFrom(from.attachpointarr_);
  activebindassetinfoarr_.MergeFrom(from.activebindassetinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elementtype()) {
      set_elementtype(from.elementtype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rectinfo()) {
      mutable_rectinfo()->::pb::PbRect::MergeFrom(from.rectinfo());
    }
    if (from.has_centerposition()) {
      mutable_centerposition()->::pb::PbVector2::MergeFrom(from.centerposition());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_sortinglayer()) {
      set_sortinglayer(from.sortinglayer());
    }
    if (from.has_sortingorder()) {
      set_sortingorder(from.sortingorder());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_conftid()) {
      set_conftid(from.conftid());
    }
    if (from.has_viewelementname()) {
      set_viewelementname(from.viewelementname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RectArea2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RectArea2::CopyFrom(const RectArea2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectArea2::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_rectinfo()) {
    if (!this->rectinfo().IsInitialized()) return false;
  }
  if (has_centerposition()) {
    if (!this->centerposition().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->attachpointarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->activebindassetinfoarr())) return false;
  return true;
}

void RectArea2::Swap(RectArea2* other) {
  if (other != this) {
    std::swap(elementtype_, other->elementtype_);
    std::swap(name_, other->name_);
    std::swap(rectinfo_, other->rectinfo_);
    std::swap(centerposition_, other->centerposition_);
    std::swap(visible_, other->visible_);
    attachpointarr_.Swap(&other->attachpointarr_);
    std::swap(sortinglayer_, other->sortinglayer_);
    std::swap(sortingorder_, other->sortingorder_);
    activebindassetinfoarr_.Swap(&other->activebindassetinfoarr_);
    std::swap(conftid_, other->conftid_);
    std::swap(viewelementname_, other->viewelementname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RectArea2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RectArea2_descriptor_;
  metadata.reflection = RectArea2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CustomArea2::kElementTypeFieldNumber;
const int CustomArea2::kNameFieldNumber;
const int CustomArea2::kChunkIndexArrFieldNumber;
const int CustomArea2::kVisibleFieldNumber;
const int CustomArea2::kViewElementNameFieldNumber;
const int CustomArea2::kCenterPositionFieldNumber;
#endif  // !_MSC_VER

CustomArea2::CustomArea2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CustomArea2)
}

void CustomArea2::InitAsDefaultInstance() {
  centerposition_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
}

CustomArea2::CustomArea2(const CustomArea2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.CustomArea2)
}

void CustomArea2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  elementtype_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visible_ = false;
  viewelementname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  centerposition_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CustomArea2::~CustomArea2() {
  // @@protoc_insertion_point(destructor:pb.CustomArea2)
  SharedDtor();
}

void CustomArea2::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (viewelementname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete viewelementname_;
  }
  if (this != default_instance_) {
    delete centerposition_;
  }
}

void CustomArea2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomArea2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CustomArea2_descriptor_;
}

const CustomArea2& CustomArea2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  return *default_instance_;
}

CustomArea2* CustomArea2::default_instance_ = NULL;

CustomArea2* CustomArea2::New() const {
  return new CustomArea2;
}

void CustomArea2::Clear() {
  if (_has_bits_[0 / 32] & 59) {
    elementtype_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    visible_ = false;
    if (has_viewelementname()) {
      if (viewelementname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        viewelementname_->clear();
      }
    }
    if (has_centerposition()) {
      if (centerposition_ != NULL) centerposition_->::pb::PbVector2::Clear();
    }
  }
  chunkindexarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CustomArea2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CustomArea2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.ESceneElementType ElementType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ESceneElementType_IsValid(value)) {
            set_elementtype(static_cast< ::pb::ESceneElementType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ChunkIndexArr;
        break;
      }

      // repeated .pb.PbVector2 ChunkIndexArr = 3;
      case 3: {
        if (tag == 26) {
         parse_ChunkIndexArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chunkindexarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ChunkIndexArr;
        if (input->ExpectTag(32)) goto parse_Visible;
        break;
      }

      // required bool Visible = 4;
      case 4: {
        if (tag == 32) {
         parse_Visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ViewElementName;
        break;
      }

      // optional string ViewElementName = 5;
      case 5: {
        if (tag == 42) {
         parse_ViewElementName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_viewelementname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->viewelementname().data(), this->viewelementname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "viewelementname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_CenterPosition;
        break;
      }

      // optional .pb.PbVector2 CenterPosition = 6;
      case 6: {
        if (tag == 50) {
         parse_CenterPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_centerposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CustomArea2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CustomArea2)
  return false;
#undef DO_
}

void CustomArea2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CustomArea2)
  // required .pb.ESceneElementType ElementType = 1;
  if (has_elementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->elementtype(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .pb.PbVector2 ChunkIndexArr = 3;
  for (int i = 0; i < this->chunkindexarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chunkindexarr(i), output);
  }

  // required bool Visible = 4;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->visible(), output);
  }

  // optional string ViewElementName = 5;
  if (has_viewelementname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->viewelementname().data(), this->viewelementname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "viewelementname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->viewelementname(), output);
  }

  // optional .pb.PbVector2 CenterPosition = 6;
  if (has_centerposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->centerposition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CustomArea2)
}

::google::protobuf::uint8* CustomArea2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CustomArea2)
  // required .pb.ESceneElementType ElementType = 1;
  if (has_elementtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->elementtype(), target);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .pb.PbVector2 ChunkIndexArr = 3;
  for (int i = 0; i < this->chunkindexarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chunkindexarr(i), target);
  }

  // required bool Visible = 4;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->visible(), target);
  }

  // optional string ViewElementName = 5;
  if (has_viewelementname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->viewelementname().data(), this->viewelementname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "viewelementname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->viewelementname(), target);
  }

  // optional .pb.PbVector2 CenterPosition = 6;
  if (has_centerposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->centerposition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CustomArea2)
  return target;
}

int CustomArea2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.ESceneElementType ElementType = 1;
    if (has_elementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->elementtype());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required bool Visible = 4;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional string ViewElementName = 5;
    if (has_viewelementname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->viewelementname());
    }

    // optional .pb.PbVector2 CenterPosition = 6;
    if (has_centerposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->centerposition());
    }

  }
  // repeated .pb.PbVector2 ChunkIndexArr = 3;
  total_size += 1 * this->chunkindexarr_size();
  for (int i = 0; i < this->chunkindexarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chunkindexarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomArea2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CustomArea2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CustomArea2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CustomArea2::MergeFrom(const CustomArea2& from) {
  GOOGLE_CHECK_NE(&from, this);
  chunkindexarr_.MergeFrom(from.chunkindexarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elementtype()) {
      set_elementtype(from.elementtype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_viewelementname()) {
      set_viewelementname(from.viewelementname());
    }
    if (from.has_centerposition()) {
      mutable_centerposition()->::pb::PbVector2::MergeFrom(from.centerposition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CustomArea2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomArea2::CopyFrom(const CustomArea2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomArea2::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->chunkindexarr())) return false;
  if (has_centerposition()) {
    if (!this->centerposition().IsInitialized()) return false;
  }
  return true;
}

void CustomArea2::Swap(CustomArea2* other) {
  if (other != this) {
    std::swap(elementtype_, other->elementtype_);
    std::swap(name_, other->name_);
    chunkindexarr_.Swap(&other->chunkindexarr_);
    std::swap(visible_, other->visible_);
    std::swap(viewelementname_, other->viewelementname_);
    std::swap(centerposition_, other->centerposition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CustomArea2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CustomArea2_descriptor_;
  metadata.reflection = CustomArea2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuardInfo::kRadiusFieldNumber;
const int GuardInfo::kDegreeFieldNumber;
const int GuardInfo::kEventTypeFieldNumber;
const int GuardInfo::kEventIdFieldNumber;
#endif  // !_MSC_VER

GuardInfo::GuardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.GuardInfo)
}

void GuardInfo::InitAsDefaultInstance() {
}

GuardInfo::GuardInfo(const GuardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.GuardInfo)
}

void GuardInfo::SharedCtor() {
  _cached_size_ = 0;
  radius_ = 0;
  degree_ = 0u;
  eventtype_ = 1;
  eventid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuardInfo::~GuardInfo() {
  // @@protoc_insertion_point(destructor:pb.GuardInfo)
  SharedDtor();
}

void GuardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuardInfo_descriptor_;
}

const GuardInfo& GuardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  return *default_instance_;
}

GuardInfo* GuardInfo::default_instance_ = NULL;

GuardInfo* GuardInfo::New() const {
  return new GuardInfo;
}

void GuardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(radius_, degree_);
    eventtype_ = 1;
    eventid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.GuardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float Radius = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Degree;
        break;
      }

      // optional uint32 Degree = 2;
      case 2: {
        if (tag == 16) {
         parse_Degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &degree_)));
          set_has_degree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EventType;
        break;
      }

      // optional .pb.EGuardEventType EventType = 3;
      case 3: {
        if (tag == 24) {
         parse_EventType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EGuardEventType_IsValid(value)) {
            set_eventtype(static_cast< ::pb::EGuardEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_EventId;
        break;
      }

      // optional uint32 EventId = 4;
      case 4: {
        if (tag == 32) {
         parse_EventId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.GuardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.GuardInfo)
  return false;
#undef DO_
}

void GuardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.GuardInfo)
  // optional float Radius = 1;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->radius(), output);
  }

  // optional uint32 Degree = 2;
  if (has_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->degree(), output);
  }

  // optional .pb.EGuardEventType EventType = 3;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->eventtype(), output);
  }

  // optional uint32 EventId = 4;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->eventid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.GuardInfo)
}

::google::protobuf::uint8* GuardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GuardInfo)
  // optional float Radius = 1;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->radius(), target);
  }

  // optional uint32 Degree = 2;
  if (has_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->degree(), target);
  }

  // optional .pb.EGuardEventType EventType = 3;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->eventtype(), target);
  }

  // optional uint32 EventId = 4;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->eventid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GuardInfo)
  return target;
}

int GuardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float Radius = 1;
    if (has_radius()) {
      total_size += 1 + 4;
    }

    // optional uint32 Degree = 2;
    if (has_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->degree());
    }

    // optional .pb.EGuardEventType EventType = 3;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
    }

    // optional uint32 EventId = 4;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuardInfo::MergeFrom(const GuardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_degree()) {
      set_degree(from.degree());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuardInfo::CopyFrom(const GuardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuardInfo::IsInitialized() const {

  return true;
}

void GuardInfo::Swap(GuardInfo* other) {
  if (other != this) {
    std::swap(radius_, other->radius_);
    std::swap(degree_, other->degree_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(eventid_, other->eventid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuardInfo_descriptor_;
  metadata.reflection = GuardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PendantInfo::kNameFieldNumber;
const int PendantInfo::kAssetPathFieldNumber;
const int PendantInfo::kAssetTypeFieldNumber;
const int PendantInfo::kAttachPointNameFieldNumber;
const int PendantInfo::kScaleFieldNumber;
#endif  // !_MSC_VER

PendantInfo::PendantInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PendantInfo)
}

void PendantInfo::InitAsDefaultInstance() {
}

PendantInfo::PendantInfo(const PendantInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PendantInfo)
}

void PendantInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assettype_ = 0u;
  attachpointname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PendantInfo::~PendantInfo() {
  // @@protoc_insertion_point(destructor:pb.PendantInfo)
  SharedDtor();
}

void PendantInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete assetpath_;
  }
  if (attachpointname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attachpointname_;
  }
  if (this != default_instance_) {
  }
}

void PendantInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PendantInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PendantInfo_descriptor_;
}

const PendantInfo& PendantInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  return *default_instance_;
}

PendantInfo* PendantInfo::default_instance_ = NULL;

PendantInfo* PendantInfo::New() const {
  return new PendantInfo;
}

void PendantInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PendantInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(assettype_, scale_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_assetpath()) {
      if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        assetpath_->clear();
      }
    }
    if (has_attachpointname()) {
      if (attachpointname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attachpointname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PendantInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PendantInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AssetPath;
        break;
      }

      // optional string AssetPath = 2;
      case 2: {
        if (tag == 18) {
         parse_AssetPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assetpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->assetpath().data(), this->assetpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "assetpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AssetType;
        break;
      }

      // optional uint32 AssetType = 3;
      case 3: {
        if (tag == 24) {
         parse_AssetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assettype_)));
          set_has_assettype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AttachPointName;
        break;
      }

      // optional string AttachPointName = 4;
      case 4: {
        if (tag == 34) {
         parse_AttachPointName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attachpointname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attachpointname().data(), this->attachpointname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "attachpointname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_Scale;
        break;
      }

      // optional float Scale = 5;
      case 5: {
        if (tag == 45) {
         parse_Scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PendantInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PendantInfo)
  return false;
#undef DO_
}

void PendantInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PendantInfo)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string AssetPath = 2;
  if (has_assetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetpath().data(), this->assetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->assetpath(), output);
  }

  // optional uint32 AssetType = 3;
  if (has_assettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->assettype(), output);
  }

  // optional string AttachPointName = 4;
  if (has_attachpointname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attachpointname().data(), this->attachpointname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "attachpointname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->attachpointname(), output);
  }

  // optional float Scale = 5;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->scale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PendantInfo)
}

::google::protobuf::uint8* PendantInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PendantInfo)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string AssetPath = 2;
  if (has_assetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetpath().data(), this->assetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->assetpath(), target);
  }

  // optional uint32 AssetType = 3;
  if (has_assettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->assettype(), target);
  }

  // optional string AttachPointName = 4;
  if (has_attachpointname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attachpointname().data(), this->attachpointname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "attachpointname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->attachpointname(), target);
  }

  // optional float Scale = 5;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->scale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PendantInfo)
  return target;
}

int PendantInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string AssetPath = 2;
    if (has_assetpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assetpath());
    }

    // optional uint32 AssetType = 3;
    if (has_assettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assettype());
    }

    // optional string AttachPointName = 4;
    if (has_attachpointname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attachpointname());
    }

    // optional float Scale = 5;
    if (has_scale()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PendantInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PendantInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PendantInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PendantInfo::MergeFrom(const PendantInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_assetpath()) {
      set_assetpath(from.assetpath());
    }
    if (from.has_assettype()) {
      set_assettype(from.assettype());
    }
    if (from.has_attachpointname()) {
      set_attachpointname(from.attachpointname());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PendantInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PendantInfo::CopyFrom(const PendantInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendantInfo::IsInitialized() const {

  return true;
}

void PendantInfo::Swap(PendantInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(assetpath_, other->assetpath_);
    std::swap(assettype_, other->assettype_);
    std::swap(attachpointname_, other->attachpointname_);
    std::swap(scale_, other->scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PendantInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PendantInfo_descriptor_;
  metadata.reflection = PendantInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnimAsset2::kNameFieldNumber;
const int AnimAsset2::kPositionFieldNumber;
const int AnimAsset2::kScaleFieldNumber;
const int AnimAsset2::kAssetPathFieldNumber;
const int AnimAsset2::kDefaultAnimFieldNumber;
const int AnimAsset2::kVisibleFieldNumber;
const int AnimAsset2::kDirectionFieldNumber;
const int AnimAsset2::kSortingLayerFieldNumber;
const int AnimAsset2::kSortingOrderFieldNumber;
const int AnimAsset2::kWithGuardFieldNumber;
const int AnimAsset2::kGuardInfoFieldNumber;
const int AnimAsset2::kAttachPointArrFieldNumber;
const int AnimAsset2::kPendantInfoArrFieldNumber;
const int AnimAsset2::kSpecialStyleFieldNumber;
const int AnimAsset2::kFake3DOffsetFieldNumber;
#endif  // !_MSC_VER

AnimAsset2::AnimAsset2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AnimAsset2)
}

void AnimAsset2::InitAsDefaultInstance() {
  position_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
  scale_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
  direction_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
  guardinfo_ = const_cast< ::pb::GuardInfo*>(&::pb::GuardInfo::default_instance());
  fake3doffset_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
}

AnimAsset2::AnimAsset2(const AnimAsset2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AnimAsset2)
}

void AnimAsset2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = NULL;
  scale_ = NULL;
  assetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defaultanim_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visible_ = false;
  direction_ = NULL;
  sortinglayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sortingorder_ = 0u;
  withguard_ = false;
  guardinfo_ = NULL;
  specialstyle_ = 0u;
  fake3doffset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnimAsset2::~AnimAsset2() {
  // @@protoc_insertion_point(destructor:pb.AnimAsset2)
  SharedDtor();
}

void AnimAsset2::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete assetpath_;
  }
  if (defaultanim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete defaultanim_;
  }
  if (sortinglayer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sortinglayer_;
  }
  if (this != default_instance_) {
    delete position_;
    delete scale_;
    delete direction_;
    delete guardinfo_;
    delete fake3doffset_;
  }
}

void AnimAsset2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnimAsset2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnimAsset2_descriptor_;
}

const AnimAsset2& AnimAsset2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  return *default_instance_;
}

AnimAsset2* AnimAsset2::default_instance_ = NULL;

AnimAsset2* AnimAsset2::New() const {
  return new AnimAsset2;
}

void AnimAsset2::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AnimAsset2*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::pb::PbVector2::Clear();
    }
    if (has_scale()) {
      if (scale_ != NULL) scale_->::pb::PbVector2::Clear();
    }
    if (has_assetpath()) {
      if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        assetpath_->clear();
      }
    }
    if (has_defaultanim()) {
      if (defaultanim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        defaultanim_->clear();
      }
    }
    visible_ = false;
    if (has_direction()) {
      if (direction_ != NULL) direction_->::pb::PbVector2::Clear();
    }
    if (has_sortinglayer()) {
      if (sortinglayer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sortinglayer_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 26368) {
    ZR_(withguard_, sortingorder_);
    if (has_guardinfo()) {
      if (guardinfo_ != NULL) guardinfo_->::pb::GuardInfo::Clear();
    }
    specialstyle_ = 0u;
    if (has_fake3doffset()) {
      if (fake3doffset_ != NULL) fake3doffset_->::pb::PbVector2::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attachpointarr_.Clear();
  pendantinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnimAsset2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AnimAsset2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Position;
        break;
      }

      // required .pb.PbVector2 Position = 2;
      case 2: {
        if (tag == 18) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Scale;
        break;
      }

      // required .pb.PbVector2 Scale = 3;
      case 3: {
        if (tag == 26) {
         parse_Scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AssetPath;
        break;
      }

      // required string AssetPath = 4;
      case 4: {
        if (tag == 34) {
         parse_AssetPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assetpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->assetpath().data(), this->assetpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "assetpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DefaultAnim;
        break;
      }

      // optional string DefaultAnim = 5;
      case 5: {
        if (tag == 42) {
         parse_DefaultAnim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defaultanim()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->defaultanim().data(), this->defaultanim().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "defaultanim");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Visible;
        break;
      }

      // required bool Visible = 6;
      case 6: {
        if (tag == 48) {
         parse_Visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Direction;
        break;
      }

      // optional .pb.PbVector2 Direction = 7;
      case 7: {
        if (tag == 58) {
         parse_Direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_SortingLayer;
        break;
      }

      // optional string SortingLayer = 8;
      case 8: {
        if (tag == 66) {
         parse_SortingLayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sortinglayer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sortinglayer().data(), this->sortinglayer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sortinglayer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_SortingOrder;
        break;
      }

      // optional uint32 SortingOrder = 9;
      case 9: {
        if (tag == 72) {
         parse_SortingOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sortingorder_)));
          set_has_sortingorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_WithGuard;
        break;
      }

      // optional bool WithGuard = 10;
      case 10: {
        if (tag == 80) {
         parse_WithGuard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &withguard_)));
          set_has_withguard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_GuardInfo;
        break;
      }

      // optional .pb.GuardInfo GuardInfo = 11;
      case 11: {
        if (tag == 90) {
         parse_GuardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_AttachPointArr;
        break;
      }

      // repeated .pb.AttachPoint2 AttachPointArr = 12;
      case 12: {
        if (tag == 98) {
         parse_AttachPointArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachpointarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_AttachPointArr;
        if (input->ExpectTag(106)) goto parse_PendantInfoArr;
        break;
      }

      // repeated .pb.PendantInfo PendantInfoArr = 13;
      case 13: {
        if (tag == 106) {
         parse_PendantInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pendantinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_PendantInfoArr;
        if (input->ExpectTag(112)) goto parse_SpecialStyle;
        break;
      }

      // optional uint32 SpecialStyle = 14;
      case 14: {
        if (tag == 112) {
         parse_SpecialStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &specialstyle_)));
          set_has_specialstyle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_Fake3dOffset;
        break;
      }

      // optional .pb.PbVector2 Fake3dOffset = 15;
      case 15: {
        if (tag == 122) {
         parse_Fake3dOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fake3doffset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AnimAsset2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AnimAsset2)
  return false;
#undef DO_
}

void AnimAsset2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AnimAsset2)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .pb.PbVector2 Position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  // required .pb.PbVector2 Scale = 3;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->scale(), output);
  }

  // required string AssetPath = 4;
  if (has_assetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetpath().data(), this->assetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->assetpath(), output);
  }

  // optional string DefaultAnim = 5;
  if (has_defaultanim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defaultanim().data(), this->defaultanim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defaultanim");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->defaultanim(), output);
  }

  // required bool Visible = 6;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->visible(), output);
  }

  // optional .pb.PbVector2 Direction = 7;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->direction(), output);
  }

  // optional string SortingLayer = 8;
  if (has_sortinglayer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sortinglayer().data(), this->sortinglayer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sortinglayer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sortinglayer(), output);
  }

  // optional uint32 SortingOrder = 9;
  if (has_sortingorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sortingorder(), output);
  }

  // optional bool WithGuard = 10;
  if (has_withguard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->withguard(), output);
  }

  // optional .pb.GuardInfo GuardInfo = 11;
  if (has_guardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->guardinfo(), output);
  }

  // repeated .pb.AttachPoint2 AttachPointArr = 12;
  for (int i = 0; i < this->attachpointarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->attachpointarr(i), output);
  }

  // repeated .pb.PendantInfo PendantInfoArr = 13;
  for (int i = 0; i < this->pendantinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->pendantinfoarr(i), output);
  }

  // optional uint32 SpecialStyle = 14;
  if (has_specialstyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->specialstyle(), output);
  }

  // optional .pb.PbVector2 Fake3dOffset = 15;
  if (has_fake3doffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->fake3doffset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AnimAsset2)
}

::google::protobuf::uint8* AnimAsset2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AnimAsset2)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .pb.PbVector2 Position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  // required .pb.PbVector2 Scale = 3;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->scale(), target);
  }

  // required string AssetPath = 4;
  if (has_assetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetpath().data(), this->assetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->assetpath(), target);
  }

  // optional string DefaultAnim = 5;
  if (has_defaultanim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defaultanim().data(), this->defaultanim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defaultanim");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->defaultanim(), target);
  }

  // required bool Visible = 6;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->visible(), target);
  }

  // optional .pb.PbVector2 Direction = 7;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->direction(), target);
  }

  // optional string SortingLayer = 8;
  if (has_sortinglayer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sortinglayer().data(), this->sortinglayer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sortinglayer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sortinglayer(), target);
  }

  // optional uint32 SortingOrder = 9;
  if (has_sortingorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sortingorder(), target);
  }

  // optional bool WithGuard = 10;
  if (has_withguard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->withguard(), target);
  }

  // optional .pb.GuardInfo GuardInfo = 11;
  if (has_guardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->guardinfo(), target);
  }

  // repeated .pb.AttachPoint2 AttachPointArr = 12;
  for (int i = 0; i < this->attachpointarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->attachpointarr(i), target);
  }

  // repeated .pb.PendantInfo PendantInfoArr = 13;
  for (int i = 0; i < this->pendantinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->pendantinfoarr(i), target);
  }

  // optional uint32 SpecialStyle = 14;
  if (has_specialstyle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->specialstyle(), target);
  }

  // optional .pb.PbVector2 Fake3dOffset = 15;
  if (has_fake3doffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->fake3doffset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AnimAsset2)
  return target;
}

int AnimAsset2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .pb.PbVector2 Position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required .pb.PbVector2 Scale = 3;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

    // required string AssetPath = 4;
    if (has_assetpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assetpath());
    }

    // optional string DefaultAnim = 5;
    if (has_defaultanim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defaultanim());
    }

    // required bool Visible = 6;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional .pb.PbVector2 Direction = 7;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // optional string SortingLayer = 8;
    if (has_sortinglayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sortinglayer());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 SortingOrder = 9;
    if (has_sortingorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sortingorder());
    }

    // optional bool WithGuard = 10;
    if (has_withguard()) {
      total_size += 1 + 1;
    }

    // optional .pb.GuardInfo GuardInfo = 11;
    if (has_guardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guardinfo());
    }

    // optional uint32 SpecialStyle = 14;
    if (has_specialstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->specialstyle());
    }

    // optional .pb.PbVector2 Fake3dOffset = 15;
    if (has_fake3doffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fake3doffset());
    }

  }
  // repeated .pb.AttachPoint2 AttachPointArr = 12;
  total_size += 1 * this->attachpointarr_size();
  for (int i = 0; i < this->attachpointarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attachpointarr(i));
  }

  // repeated .pb.PendantInfo PendantInfoArr = 13;
  total_size += 1 * this->pendantinfoarr_size();
  for (int i = 0; i < this->pendantinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pendantinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnimAsset2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnimAsset2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnimAsset2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnimAsset2::MergeFrom(const AnimAsset2& from) {
  GOOGLE_CHECK_NE(&from, this);
  attachpointarr_.MergeFrom(from.attachpointarr_);
  pendantinfoarr_.MergeFrom(from.pendantinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_position()) {
      mutable_position()->::pb::PbVector2::MergeFrom(from.position());
    }
    if (from.has_scale()) {
      mutable_scale()->::pb::PbVector2::MergeFrom(from.scale());
    }
    if (from.has_assetpath()) {
      set_assetpath(from.assetpath());
    }
    if (from.has_defaultanim()) {
      set_defaultanim(from.defaultanim());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_direction()) {
      mutable_direction()->::pb::PbVector2::MergeFrom(from.direction());
    }
    if (from.has_sortinglayer()) {
      set_sortinglayer(from.sortinglayer());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sortingorder()) {
      set_sortingorder(from.sortingorder());
    }
    if (from.has_withguard()) {
      set_withguard(from.withguard());
    }
    if (from.has_guardinfo()) {
      mutable_guardinfo()->::pb::GuardInfo::MergeFrom(from.guardinfo());
    }
    if (from.has_specialstyle()) {
      set_specialstyle(from.specialstyle());
    }
    if (from.has_fake3doffset()) {
      mutable_fake3doffset()->::pb::PbVector2::MergeFrom(from.fake3doffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnimAsset2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimAsset2::CopyFrom(const AnimAsset2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimAsset2::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_scale()) {
    if (!this->scale().IsInitialized()) return false;
  }
  if (has_direction()) {
    if (!this->direction().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->attachpointarr())) return false;
  if (has_fake3doffset()) {
    if (!this->fake3doffset().IsInitialized()) return false;
  }
  return true;
}

void AnimAsset2::Swap(AnimAsset2* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(position_, other->position_);
    std::swap(scale_, other->scale_);
    std::swap(assetpath_, other->assetpath_);
    std::swap(defaultanim_, other->defaultanim_);
    std::swap(visible_, other->visible_);
    std::swap(direction_, other->direction_);
    std::swap(sortinglayer_, other->sortinglayer_);
    std::swap(sortingorder_, other->sortingorder_);
    std::swap(withguard_, other->withguard_);
    std::swap(guardinfo_, other->guardinfo_);
    attachpointarr_.Swap(&other->attachpointarr_);
    pendantinfoarr_.Swap(&other->pendantinfoarr_);
    std::swap(specialstyle_, other->specialstyle_);
    std::swap(fake3doffset_, other->fake3doffset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnimAsset2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnimAsset2_descriptor_;
  metadata.reflection = AnimAsset2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StaticAsset2::kNameFieldNumber;
const int StaticAsset2::kPositionFieldNumber;
const int StaticAsset2::kScaleFieldNumber;
const int StaticAsset2::kAssetPathFieldNumber;
const int StaticAsset2::kVisibleFieldNumber;
const int StaticAsset2::kSortingLayerFieldNumber;
const int StaticAsset2::kSortingOrderFieldNumber;
const int StaticAsset2::kWithGuardFieldNumber;
const int StaticAsset2::kGuardInfoFieldNumber;
const int StaticAsset2::kFake3DOffsetFieldNumber;
#endif  // !_MSC_VER

StaticAsset2::StaticAsset2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.StaticAsset2)
}

void StaticAsset2::InitAsDefaultInstance() {
  position_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
  scale_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
  guardinfo_ = const_cast< ::pb::GuardInfo*>(&::pb::GuardInfo::default_instance());
  fake3doffset_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
}

StaticAsset2::StaticAsset2(const StaticAsset2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.StaticAsset2)
}

void StaticAsset2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = NULL;
  scale_ = NULL;
  assetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visible_ = false;
  sortinglayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sortingorder_ = 0u;
  withguard_ = false;
  guardinfo_ = NULL;
  fake3doffset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StaticAsset2::~StaticAsset2() {
  // @@protoc_insertion_point(destructor:pb.StaticAsset2)
  SharedDtor();
}

void StaticAsset2::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete assetpath_;
  }
  if (sortinglayer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sortinglayer_;
  }
  if (this != default_instance_) {
    delete position_;
    delete scale_;
    delete guardinfo_;
    delete fake3doffset_;
  }
}

void StaticAsset2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaticAsset2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StaticAsset2_descriptor_;
}

const StaticAsset2& StaticAsset2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  return *default_instance_;
}

StaticAsset2* StaticAsset2::default_instance_ = NULL;

StaticAsset2* StaticAsset2::New() const {
  return new StaticAsset2;
}

void StaticAsset2::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StaticAsset2*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(visible_, sortingorder_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::pb::PbVector2::Clear();
    }
    if (has_scale()) {
      if (scale_ != NULL) scale_->::pb::PbVector2::Clear();
    }
    if (has_assetpath()) {
      if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        assetpath_->clear();
      }
    }
    if (has_sortinglayer()) {
      if (sortinglayer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sortinglayer_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_guardinfo()) {
      if (guardinfo_ != NULL) guardinfo_->::pb::GuardInfo::Clear();
    }
    if (has_fake3doffset()) {
      if (fake3doffset_ != NULL) fake3doffset_->::pb::PbVector2::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StaticAsset2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.StaticAsset2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Position;
        break;
      }

      // required .pb.PbVector2 Position = 2;
      case 2: {
        if (tag == 18) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Scale;
        break;
      }

      // required .pb.PbVector2 Scale = 3;
      case 3: {
        if (tag == 26) {
         parse_Scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AssetPath;
        break;
      }

      // required string AssetPath = 4;
      case 4: {
        if (tag == 34) {
         parse_AssetPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assetpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->assetpath().data(), this->assetpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "assetpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Visible;
        break;
      }

      // required bool Visible = 5;
      case 5: {
        if (tag == 40) {
         parse_Visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SortingLayer;
        break;
      }

      // optional string SortingLayer = 6;
      case 6: {
        if (tag == 50) {
         parse_SortingLayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sortinglayer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sortinglayer().data(), this->sortinglayer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sortinglayer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_SortingOrder;
        break;
      }

      // optional uint32 SortingOrder = 7;
      case 7: {
        if (tag == 56) {
         parse_SortingOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sortingorder_)));
          set_has_sortingorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_WithGuard;
        break;
      }

      // optional bool WithGuard = 8;
      case 8: {
        if (tag == 64) {
         parse_WithGuard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &withguard_)));
          set_has_withguard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_GuardInfo;
        break;
      }

      // optional .pb.GuardInfo GuardInfo = 9;
      case 9: {
        if (tag == 74) {
         parse_GuardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Fake3dOffset;
        break;
      }

      // optional .pb.PbVector2 Fake3dOffset = 10;
      case 10: {
        if (tag == 82) {
         parse_Fake3dOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fake3doffset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.StaticAsset2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.StaticAsset2)
  return false;
#undef DO_
}

void StaticAsset2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.StaticAsset2)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .pb.PbVector2 Position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  // required .pb.PbVector2 Scale = 3;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->scale(), output);
  }

  // required string AssetPath = 4;
  if (has_assetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetpath().data(), this->assetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->assetpath(), output);
  }

  // required bool Visible = 5;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->visible(), output);
  }

  // optional string SortingLayer = 6;
  if (has_sortinglayer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sortinglayer().data(), this->sortinglayer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sortinglayer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sortinglayer(), output);
  }

  // optional uint32 SortingOrder = 7;
  if (has_sortingorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sortingorder(), output);
  }

  // optional bool WithGuard = 8;
  if (has_withguard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->withguard(), output);
  }

  // optional .pb.GuardInfo GuardInfo = 9;
  if (has_guardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->guardinfo(), output);
  }

  // optional .pb.PbVector2 Fake3dOffset = 10;
  if (has_fake3doffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->fake3doffset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.StaticAsset2)
}

::google::protobuf::uint8* StaticAsset2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.StaticAsset2)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .pb.PbVector2 Position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  // required .pb.PbVector2 Scale = 3;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->scale(), target);
  }

  // required string AssetPath = 4;
  if (has_assetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetpath().data(), this->assetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->assetpath(), target);
  }

  // required bool Visible = 5;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->visible(), target);
  }

  // optional string SortingLayer = 6;
  if (has_sortinglayer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sortinglayer().data(), this->sortinglayer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sortinglayer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sortinglayer(), target);
  }

  // optional uint32 SortingOrder = 7;
  if (has_sortingorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sortingorder(), target);
  }

  // optional bool WithGuard = 8;
  if (has_withguard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->withguard(), target);
  }

  // optional .pb.GuardInfo GuardInfo = 9;
  if (has_guardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->guardinfo(), target);
  }

  // optional .pb.PbVector2 Fake3dOffset = 10;
  if (has_fake3doffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->fake3doffset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.StaticAsset2)
  return target;
}

int StaticAsset2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .pb.PbVector2 Position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required .pb.PbVector2 Scale = 3;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

    // required string AssetPath = 4;
    if (has_assetpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assetpath());
    }

    // required bool Visible = 5;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional string SortingLayer = 6;
    if (has_sortinglayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sortinglayer());
    }

    // optional uint32 SortingOrder = 7;
    if (has_sortingorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sortingorder());
    }

    // optional bool WithGuard = 8;
    if (has_withguard()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.GuardInfo GuardInfo = 9;
    if (has_guardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guardinfo());
    }

    // optional .pb.PbVector2 Fake3dOffset = 10;
    if (has_fake3doffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fake3doffset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaticAsset2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StaticAsset2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StaticAsset2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StaticAsset2::MergeFrom(const StaticAsset2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_position()) {
      mutable_position()->::pb::PbVector2::MergeFrom(from.position());
    }
    if (from.has_scale()) {
      mutable_scale()->::pb::PbVector2::MergeFrom(from.scale());
    }
    if (from.has_assetpath()) {
      set_assetpath(from.assetpath());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_sortinglayer()) {
      set_sortinglayer(from.sortinglayer());
    }
    if (from.has_sortingorder()) {
      set_sortingorder(from.sortingorder());
    }
    if (from.has_withguard()) {
      set_withguard(from.withguard());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guardinfo()) {
      mutable_guardinfo()->::pb::GuardInfo::MergeFrom(from.guardinfo());
    }
    if (from.has_fake3doffset()) {
      mutable_fake3doffset()->::pb::PbVector2::MergeFrom(from.fake3doffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StaticAsset2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticAsset2::CopyFrom(const StaticAsset2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticAsset2::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_scale()) {
    if (!this->scale().IsInitialized()) return false;
  }
  if (has_fake3doffset()) {
    if (!this->fake3doffset().IsInitialized()) return false;
  }
  return true;
}

void StaticAsset2::Swap(StaticAsset2* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(position_, other->position_);
    std::swap(scale_, other->scale_);
    std::swap(assetpath_, other->assetpath_);
    std::swap(visible_, other->visible_);
    std::swap(sortinglayer_, other->sortinglayer_);
    std::swap(sortingorder_, other->sortingorder_);
    std::swap(withguard_, other->withguard_);
    std::swap(guardinfo_, other->guardinfo_);
    std::swap(fake3doffset_, other->fake3doffset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StaticAsset2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StaticAsset2_descriptor_;
  metadata.reflection = StaticAsset2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EffectAsset2::kNameFieldNumber;
const int EffectAsset2::kPositionFieldNumber;
const int EffectAsset2::kAssetPathFieldNumber;
const int EffectAsset2::kVisibleFieldNumber;
const int EffectAsset2::kSortingLayerFieldNumber;
const int EffectAsset2::kSortingOrderFieldNumber;
const int EffectAsset2::kScaleFieldNumber;
const int EffectAsset2::kFake3DOffsetFieldNumber;
#endif  // !_MSC_VER

EffectAsset2::EffectAsset2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.EffectAsset2)
}

void EffectAsset2::InitAsDefaultInstance() {
  position_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
  fake3doffset_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
}

EffectAsset2::EffectAsset2(const EffectAsset2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.EffectAsset2)
}

void EffectAsset2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = NULL;
  assetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visible_ = false;
  sortinglayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sortingorder_ = 0u;
  scale_ = 0;
  fake3doffset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EffectAsset2::~EffectAsset2() {
  // @@protoc_insertion_point(destructor:pb.EffectAsset2)
  SharedDtor();
}

void EffectAsset2::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete assetpath_;
  }
  if (sortinglayer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sortinglayer_;
  }
  if (this != default_instance_) {
    delete position_;
    delete fake3doffset_;
  }
}

void EffectAsset2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EffectAsset2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EffectAsset2_descriptor_;
}

const EffectAsset2& EffectAsset2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  return *default_instance_;
}

EffectAsset2* EffectAsset2::default_instance_ = NULL;

EffectAsset2* EffectAsset2::New() const {
  return new EffectAsset2;
}

void EffectAsset2::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EffectAsset2*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(visible_, sortingorder_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::pb::PbVector2::Clear();
    }
    if (has_assetpath()) {
      if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        assetpath_->clear();
      }
    }
    if (has_sortinglayer()) {
      if (sortinglayer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sortinglayer_->clear();
      }
    }
    scale_ = 0;
    if (has_fake3doffset()) {
      if (fake3doffset_ != NULL) fake3doffset_->::pb::PbVector2::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EffectAsset2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.EffectAsset2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Position;
        break;
      }

      // required .pb.PbVector2 Position = 2;
      case 2: {
        if (tag == 18) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AssetPath;
        break;
      }

      // required string AssetPath = 3;
      case 3: {
        if (tag == 26) {
         parse_AssetPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assetpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->assetpath().data(), this->assetpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "assetpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Visible;
        break;
      }

      // required bool Visible = 4;
      case 4: {
        if (tag == 32) {
         parse_Visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SortingLayer;
        break;
      }

      // optional string SortingLayer = 5;
      case 5: {
        if (tag == 42) {
         parse_SortingLayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sortinglayer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sortinglayer().data(), this->sortinglayer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sortinglayer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_SortingOrder;
        break;
      }

      // optional uint32 SortingOrder = 6;
      case 6: {
        if (tag == 48) {
         parse_SortingOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sortingorder_)));
          set_has_sortingorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_Scale;
        break;
      }

      // optional float Scale = 7;
      case 7: {
        if (tag == 61) {
         parse_Scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Fake3dOffset;
        break;
      }

      // optional .pb.PbVector2 Fake3dOffset = 8;
      case 8: {
        if (tag == 66) {
         parse_Fake3dOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fake3doffset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.EffectAsset2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.EffectAsset2)
  return false;
#undef DO_
}

void EffectAsset2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.EffectAsset2)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .pb.PbVector2 Position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  // required string AssetPath = 3;
  if (has_assetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetpath().data(), this->assetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->assetpath(), output);
  }

  // required bool Visible = 4;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->visible(), output);
  }

  // optional string SortingLayer = 5;
  if (has_sortinglayer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sortinglayer().data(), this->sortinglayer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sortinglayer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sortinglayer(), output);
  }

  // optional uint32 SortingOrder = 6;
  if (has_sortingorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sortingorder(), output);
  }

  // optional float Scale = 7;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->scale(), output);
  }

  // optional .pb.PbVector2 Fake3dOffset = 8;
  if (has_fake3doffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fake3doffset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.EffectAsset2)
}

::google::protobuf::uint8* EffectAsset2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.EffectAsset2)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .pb.PbVector2 Position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  // required string AssetPath = 3;
  if (has_assetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetpath().data(), this->assetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->assetpath(), target);
  }

  // required bool Visible = 4;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->visible(), target);
  }

  // optional string SortingLayer = 5;
  if (has_sortinglayer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sortinglayer().data(), this->sortinglayer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sortinglayer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sortinglayer(), target);
  }

  // optional uint32 SortingOrder = 6;
  if (has_sortingorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sortingorder(), target);
  }

  // optional float Scale = 7;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->scale(), target);
  }

  // optional .pb.PbVector2 Fake3dOffset = 8;
  if (has_fake3doffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fake3doffset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.EffectAsset2)
  return target;
}

int EffectAsset2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .pb.PbVector2 Position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required string AssetPath = 3;
    if (has_assetpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assetpath());
    }

    // required bool Visible = 4;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional string SortingLayer = 5;
    if (has_sortinglayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sortinglayer());
    }

    // optional uint32 SortingOrder = 6;
    if (has_sortingorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sortingorder());
    }

    // optional float Scale = 7;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional .pb.PbVector2 Fake3dOffset = 8;
    if (has_fake3doffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fake3doffset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectAsset2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EffectAsset2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EffectAsset2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EffectAsset2::MergeFrom(const EffectAsset2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_position()) {
      mutable_position()->::pb::PbVector2::MergeFrom(from.position());
    }
    if (from.has_assetpath()) {
      set_assetpath(from.assetpath());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_sortinglayer()) {
      set_sortinglayer(from.sortinglayer());
    }
    if (from.has_sortingorder()) {
      set_sortingorder(from.sortingorder());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_fake3doffset()) {
      mutable_fake3doffset()->::pb::PbVector2::MergeFrom(from.fake3doffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EffectAsset2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectAsset2::CopyFrom(const EffectAsset2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectAsset2::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_fake3doffset()) {
    if (!this->fake3doffset().IsInitialized()) return false;
  }
  return true;
}

void EffectAsset2::Swap(EffectAsset2* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(position_, other->position_);
    std::swap(assetpath_, other->assetpath_);
    std::swap(visible_, other->visible_);
    std::swap(sortinglayer_, other->sortinglayer_);
    std::swap(sortingorder_, other->sortingorder_);
    std::swap(scale_, other->scale_);
    std::swap(fake3doffset_, other->fake3doffset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EffectAsset2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EffectAsset2_descriptor_;
  metadata.reflection = EffectAsset2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssetGroup::kNameFieldNumber;
const int AssetGroup::kEffectAssetArrFieldNumber;
const int AssetGroup::kAnimAssetArrFieldNumber;
const int AssetGroup::kStaticAssetArrFieldNumber;
#endif  // !_MSC_VER

AssetGroup::AssetGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AssetGroup)
}

void AssetGroup::InitAsDefaultInstance() {
}

AssetGroup::AssetGroup(const AssetGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AssetGroup)
}

void AssetGroup::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssetGroup::~AssetGroup() {
  // @@protoc_insertion_point(destructor:pb.AssetGroup)
  SharedDtor();
}

void AssetGroup::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AssetGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssetGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssetGroup_descriptor_;
}

const AssetGroup& AssetGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  return *default_instance_;
}

AssetGroup* AssetGroup::default_instance_ = NULL;

AssetGroup* AssetGroup::New() const {
  return new AssetGroup;
}

void AssetGroup::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  effectassetarr_.Clear();
  animassetarr_.Clear();
  staticassetarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssetGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AssetGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_EffectAssetArr;
        break;
      }

      // repeated .pb.EffectAsset2 EffectAssetArr = 2;
      case 2: {
        if (tag == 18) {
         parse_EffectAssetArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effectassetarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_EffectAssetArr;
        if (input->ExpectTag(26)) goto parse_AnimAssetArr;
        break;
      }

      // repeated .pb.AnimAsset2 AnimAssetArr = 3;
      case 3: {
        if (tag == 26) {
         parse_AnimAssetArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animassetarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AnimAssetArr;
        if (input->ExpectTag(34)) goto parse_StaticAssetArr;
        break;
      }

      // repeated .pb.StaticAsset2 StaticAssetArr = 4;
      case 4: {
        if (tag == 34) {
         parse_StaticAssetArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_staticassetarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_StaticAssetArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AssetGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AssetGroup)
  return false;
#undef DO_
}

void AssetGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AssetGroup)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .pb.EffectAsset2 EffectAssetArr = 2;
  for (int i = 0; i < this->effectassetarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->effectassetarr(i), output);
  }

  // repeated .pb.AnimAsset2 AnimAssetArr = 3;
  for (int i = 0; i < this->animassetarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->animassetarr(i), output);
  }

  // repeated .pb.StaticAsset2 StaticAssetArr = 4;
  for (int i = 0; i < this->staticassetarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->staticassetarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AssetGroup)
}

::google::protobuf::uint8* AssetGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AssetGroup)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .pb.EffectAsset2 EffectAssetArr = 2;
  for (int i = 0; i < this->effectassetarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->effectassetarr(i), target);
  }

  // repeated .pb.AnimAsset2 AnimAssetArr = 3;
  for (int i = 0; i < this->animassetarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->animassetarr(i), target);
  }

  // repeated .pb.StaticAsset2 StaticAssetArr = 4;
  for (int i = 0; i < this->staticassetarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->staticassetarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AssetGroup)
  return target;
}

int AssetGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .pb.EffectAsset2 EffectAssetArr = 2;
  total_size += 1 * this->effectassetarr_size();
  for (int i = 0; i < this->effectassetarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effectassetarr(i));
  }

  // repeated .pb.AnimAsset2 AnimAssetArr = 3;
  total_size += 1 * this->animassetarr_size();
  for (int i = 0; i < this->animassetarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animassetarr(i));
  }

  // repeated .pb.StaticAsset2 StaticAssetArr = 4;
  total_size += 1 * this->staticassetarr_size();
  for (int i = 0; i < this->staticassetarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->staticassetarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssetGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssetGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssetGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssetGroup::MergeFrom(const AssetGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  effectassetarr_.MergeFrom(from.effectassetarr_);
  animassetarr_.MergeFrom(from.animassetarr_);
  staticassetarr_.MergeFrom(from.staticassetarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssetGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetGroup::CopyFrom(const AssetGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetGroup::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->effectassetarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->animassetarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->staticassetarr())) return false;
  return true;
}

void AssetGroup::Swap(AssetGroup* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    effectassetarr_.Swap(&other->effectassetarr_);
    animassetarr_.Swap(&other->animassetarr_);
    staticassetarr_.Swap(&other->staticassetarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssetGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssetGroup_descriptor_;
  metadata.reflection = AssetGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PatrolPathPoint::kPositionFieldNumber;
const int PatrolPathPoint::kStayTimeFieldNumber;
#endif  // !_MSC_VER

PatrolPathPoint::PatrolPathPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PatrolPathPoint)
}

void PatrolPathPoint::InitAsDefaultInstance() {
  position_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
}

PatrolPathPoint::PatrolPathPoint(const PatrolPathPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PatrolPathPoint)
}

void PatrolPathPoint::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  staytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PatrolPathPoint::~PatrolPathPoint() {
  // @@protoc_insertion_point(destructor:pb.PatrolPathPoint)
  SharedDtor();
}

void PatrolPathPoint::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void PatrolPathPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PatrolPathPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PatrolPathPoint_descriptor_;
}

const PatrolPathPoint& PatrolPathPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  return *default_instance_;
}

PatrolPathPoint* PatrolPathPoint::default_instance_ = NULL;

PatrolPathPoint* PatrolPathPoint::New() const {
  return new PatrolPathPoint;
}

void PatrolPathPoint::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_position()) {
      if (position_ != NULL) position_->::pb::PbVector2::Clear();
    }
    staytime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PatrolPathPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PatrolPathPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.PbVector2 Position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_StayTime;
        break;
      }

      // optional float StayTime = 2;
      case 2: {
        if (tag == 21) {
         parse_StayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &staytime_)));
          set_has_staytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PatrolPathPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PatrolPathPoint)
  return false;
#undef DO_
}

void PatrolPathPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PatrolPathPoint)
  // optional .pb.PbVector2 Position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  // optional float StayTime = 2;
  if (has_staytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->staytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PatrolPathPoint)
}

::google::protobuf::uint8* PatrolPathPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PatrolPathPoint)
  // optional .pb.PbVector2 Position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  // optional float StayTime = 2;
  if (has_staytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->staytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PatrolPathPoint)
  return target;
}

int PatrolPathPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.PbVector2 Position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional float StayTime = 2;
    if (has_staytime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PatrolPathPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PatrolPathPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PatrolPathPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PatrolPathPoint::MergeFrom(const PatrolPathPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::pb::PbVector2::MergeFrom(from.position());
    }
    if (from.has_staytime()) {
      set_staytime(from.staytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PatrolPathPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatrolPathPoint::CopyFrom(const PatrolPathPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatrolPathPoint::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void PatrolPathPoint::Swap(PatrolPathPoint* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(staytime_, other->staytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PatrolPathPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PatrolPathPoint_descriptor_;
  metadata.reflection = PatrolPathPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PatrolPath2::kNameFieldNumber;
const int PatrolPath2::kPointArrFieldNumber;
#endif  // !_MSC_VER

PatrolPath2::PatrolPath2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PatrolPath2)
}

void PatrolPath2::InitAsDefaultInstance() {
}

PatrolPath2::PatrolPath2(const PatrolPath2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PatrolPath2)
}

void PatrolPath2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PatrolPath2::~PatrolPath2() {
  // @@protoc_insertion_point(destructor:pb.PatrolPath2)
  SharedDtor();
}

void PatrolPath2::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PatrolPath2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PatrolPath2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PatrolPath2_descriptor_;
}

const PatrolPath2& PatrolPath2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  return *default_instance_;
}

PatrolPath2* PatrolPath2::default_instance_ = NULL;

PatrolPath2* PatrolPath2::New() const {
  return new PatrolPath2;
}

void PatrolPath2::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  pointarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PatrolPath2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PatrolPath2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PointArr;
        break;
      }

      // repeated .pb.PatrolPathPoint PointArr = 2;
      case 2: {
        if (tag == 18) {
         parse_PointArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PointArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PatrolPath2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PatrolPath2)
  return false;
#undef DO_
}

void PatrolPath2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PatrolPath2)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .pb.PatrolPathPoint PointArr = 2;
  for (int i = 0; i < this->pointarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pointarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PatrolPath2)
}

::google::protobuf::uint8* PatrolPath2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PatrolPath2)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .pb.PatrolPathPoint PointArr = 2;
  for (int i = 0; i < this->pointarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pointarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PatrolPath2)
  return target;
}

int PatrolPath2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .pb.PatrolPathPoint PointArr = 2;
  total_size += 1 * this->pointarr_size();
  for (int i = 0; i < this->pointarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PatrolPath2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PatrolPath2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PatrolPath2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PatrolPath2::MergeFrom(const PatrolPath2& from) {
  GOOGLE_CHECK_NE(&from, this);
  pointarr_.MergeFrom(from.pointarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PatrolPath2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatrolPath2::CopyFrom(const PatrolPath2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatrolPath2::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->pointarr())) return false;
  return true;
}

void PatrolPath2::Swap(PatrolPath2* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    pointarr_.Swap(&other->pointarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PatrolPath2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PatrolPath2_descriptor_;
  metadata.reflection = PatrolPath2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PatrolPathConf::kNameFieldNumber;
const int PatrolPathConf::kPatrolPathNameFieldNumber;
const int PatrolPathConf::kAnimAssetNameFieldNumber;
const int PatrolPathConf::kPatrolTypeFieldNumber;
const int PatrolPathConf::kPatrolSpeedFieldNumber;
const int PatrolPathConf::kPatrolingAnimFieldNumber;
const int PatrolPathConf::kDefaultAnimFieldNumber;
#endif  // !_MSC_VER

PatrolPathConf::PatrolPathConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PatrolPathConf)
}

void PatrolPathConf::InitAsDefaultInstance() {
}

PatrolPathConf::PatrolPathConf(const PatrolPathConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PatrolPathConf)
}

void PatrolPathConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  patrolpathname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  animassetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  patroltype_ = 0u;
  patrolspeed_ = 0;
  patrolinganim_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defaultanim_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PatrolPathConf::~PatrolPathConf() {
  // @@protoc_insertion_point(destructor:pb.PatrolPathConf)
  SharedDtor();
}

void PatrolPathConf::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (patrolpathname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete patrolpathname_;
  }
  if (animassetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete animassetname_;
  }
  if (patrolinganim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete patrolinganim_;
  }
  if (defaultanim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete defaultanim_;
  }
  if (this != default_instance_) {
  }
}

void PatrolPathConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PatrolPathConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PatrolPathConf_descriptor_;
}

const PatrolPathConf& PatrolPathConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  return *default_instance_;
}

PatrolPathConf* PatrolPathConf::default_instance_ = NULL;

PatrolPathConf* PatrolPathConf::New() const {
  return new PatrolPathConf;
}

void PatrolPathConf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PatrolPathConf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(patroltype_, patrolspeed_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_patrolpathname()) {
      if (patrolpathname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        patrolpathname_->clear();
      }
    }
    if (has_animassetname()) {
      if (animassetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        animassetname_->clear();
      }
    }
    if (has_patrolinganim()) {
      if (patrolinganim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        patrolinganim_->clear();
      }
    }
    if (has_defaultanim()) {
      if (defaultanim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        defaultanim_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PatrolPathConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PatrolPathConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PatrolPathName;
        break;
      }

      // required string PatrolPathName = 2;
      case 2: {
        if (tag == 18) {
         parse_PatrolPathName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patrolpathname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->patrolpathname().data(), this->patrolpathname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "patrolpathname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AnimAssetName;
        break;
      }

      // required string AnimAssetName = 3;
      case 3: {
        if (tag == 26) {
         parse_AnimAssetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_animassetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->animassetname().data(), this->animassetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "animassetname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PatrolType;
        break;
      }

      // required uint32 PatrolType = 4;
      case 4: {
        if (tag == 32) {
         parse_PatrolType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &patroltype_)));
          set_has_patroltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_PatrolSpeed;
        break;
      }

      // required float PatrolSpeed = 5;
      case 5: {
        if (tag == 45) {
         parse_PatrolSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &patrolspeed_)));
          set_has_patrolspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_PatrolingAnim;
        break;
      }

      // required string PatrolingAnim = 6;
      case 6: {
        if (tag == 50) {
         parse_PatrolingAnim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patrolinganim()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->patrolinganim().data(), this->patrolinganim().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "patrolinganim");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_DefaultAnim;
        break;
      }

      // required string DefaultAnim = 7;
      case 7: {
        if (tag == 58) {
         parse_DefaultAnim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defaultanim()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->defaultanim().data(), this->defaultanim().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "defaultanim");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PatrolPathConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PatrolPathConf)
  return false;
#undef DO_
}

void PatrolPathConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PatrolPathConf)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string PatrolPathName = 2;
  if (has_patrolpathname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patrolpathname().data(), this->patrolpathname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patrolpathname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->patrolpathname(), output);
  }

  // required string AnimAssetName = 3;
  if (has_animassetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animassetname().data(), this->animassetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animassetname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->animassetname(), output);
  }

  // required uint32 PatrolType = 4;
  if (has_patroltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->patroltype(), output);
  }

  // required float PatrolSpeed = 5;
  if (has_patrolspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->patrolspeed(), output);
  }

  // required string PatrolingAnim = 6;
  if (has_patrolinganim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patrolinganim().data(), this->patrolinganim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patrolinganim");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->patrolinganim(), output);
  }

  // required string DefaultAnim = 7;
  if (has_defaultanim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defaultanim().data(), this->defaultanim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defaultanim");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->defaultanim(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PatrolPathConf)
}

::google::protobuf::uint8* PatrolPathConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PatrolPathConf)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string PatrolPathName = 2;
  if (has_patrolpathname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patrolpathname().data(), this->patrolpathname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patrolpathname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->patrolpathname(), target);
  }

  // required string AnimAssetName = 3;
  if (has_animassetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animassetname().data(), this->animassetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animassetname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->animassetname(), target);
  }

  // required uint32 PatrolType = 4;
  if (has_patroltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->patroltype(), target);
  }

  // required float PatrolSpeed = 5;
  if (has_patrolspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->patrolspeed(), target);
  }

  // required string PatrolingAnim = 6;
  if (has_patrolinganim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patrolinganim().data(), this->patrolinganim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patrolinganim");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->patrolinganim(), target);
  }

  // required string DefaultAnim = 7;
  if (has_defaultanim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defaultanim().data(), this->defaultanim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defaultanim");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->defaultanim(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PatrolPathConf)
  return target;
}

int PatrolPathConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string PatrolPathName = 2;
    if (has_patrolpathname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patrolpathname());
    }

    // required string AnimAssetName = 3;
    if (has_animassetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->animassetname());
    }

    // required uint32 PatrolType = 4;
    if (has_patroltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->patroltype());
    }

    // required float PatrolSpeed = 5;
    if (has_patrolspeed()) {
      total_size += 1 + 4;
    }

    // required string PatrolingAnim = 6;
    if (has_patrolinganim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patrolinganim());
    }

    // required string DefaultAnim = 7;
    if (has_defaultanim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defaultanim());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PatrolPathConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PatrolPathConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PatrolPathConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PatrolPathConf::MergeFrom(const PatrolPathConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_patrolpathname()) {
      set_patrolpathname(from.patrolpathname());
    }
    if (from.has_animassetname()) {
      set_animassetname(from.animassetname());
    }
    if (from.has_patroltype()) {
      set_patroltype(from.patroltype());
    }
    if (from.has_patrolspeed()) {
      set_patrolspeed(from.patrolspeed());
    }
    if (from.has_patrolinganim()) {
      set_patrolinganim(from.patrolinganim());
    }
    if (from.has_defaultanim()) {
      set_defaultanim(from.defaultanim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PatrolPathConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatrolPathConf::CopyFrom(const PatrolPathConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatrolPathConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void PatrolPathConf::Swap(PatrolPathConf* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(patrolpathname_, other->patrolpathname_);
    std::swap(animassetname_, other->animassetname_);
    std::swap(patroltype_, other->patroltype_);
    std::swap(patrolspeed_, other->patrolspeed_);
    std::swap(patrolinganim_, other->patrolinganim_);
    std::swap(defaultanim_, other->defaultanim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PatrolPathConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PatrolPathConf_descriptor_;
  metadata.reflection = PatrolPathConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CarrierEnt2::kNameFieldNumber;
const int CarrierEnt2::kVisibleFieldNumber;
const int CarrierEnt2::kEnterPositionFieldNumber;
const int CarrierEnt2::kExistPositionFieldNumber;
const int CarrierEnt2::kSceneUIPositionFieldNumber;
const int CarrierEnt2::kAssetPathFieldNumber;
const int CarrierEnt2::kFadeInTimeFieldNumber;
const int CarrierEnt2::kSceneUIAssetPathFieldNumber;
const int CarrierEnt2::kWalkAreaNameFieldNumber;
const int CarrierEnt2::kCarrierSpeedFieldNumber;
#endif  // !_MSC_VER

CarrierEnt2::CarrierEnt2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CarrierEnt2)
}

void CarrierEnt2::InitAsDefaultInstance() {
  enterposition_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
  existposition_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
  sceneuiposition_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
}

CarrierEnt2::CarrierEnt2(const CarrierEnt2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.CarrierEnt2)
}

void CarrierEnt2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visible_ = false;
  enterposition_ = NULL;
  existposition_ = NULL;
  sceneuiposition_ = NULL;
  assetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fadeintime_ = 0;
  sceneuiassetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  walkareaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carrierspeed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarrierEnt2::~CarrierEnt2() {
  // @@protoc_insertion_point(destructor:pb.CarrierEnt2)
  SharedDtor();
}

void CarrierEnt2::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete assetpath_;
  }
  if (sceneuiassetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneuiassetpath_;
  }
  if (walkareaname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete walkareaname_;
  }
  if (this != default_instance_) {
    delete enterposition_;
    delete existposition_;
    delete sceneuiposition_;
  }
}

void CarrierEnt2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarrierEnt2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarrierEnt2_descriptor_;
}

const CarrierEnt2& CarrierEnt2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  return *default_instance_;
}

CarrierEnt2* CarrierEnt2::default_instance_ = NULL;

CarrierEnt2* CarrierEnt2::New() const {
  return new CarrierEnt2;
}

void CarrierEnt2::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CarrierEnt2*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(visible_, fadeintime_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_enterposition()) {
      if (enterposition_ != NULL) enterposition_->::pb::PbVector2::Clear();
    }
    if (has_existposition()) {
      if (existposition_ != NULL) existposition_->::pb::PbVector2::Clear();
    }
    if (has_sceneuiposition()) {
      if (sceneuiposition_ != NULL) sceneuiposition_->::pb::PbVector2::Clear();
    }
    if (has_assetpath()) {
      if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        assetpath_->clear();
      }
    }
    if (has_sceneuiassetpath()) {
      if (sceneuiassetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sceneuiassetpath_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_walkareaname()) {
      if (walkareaname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        walkareaname_->clear();
      }
    }
    carrierspeed_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarrierEnt2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CarrierEnt2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Visible;
        break;
      }

      // optional bool Visible = 2;
      case 2: {
        if (tag == 16) {
         parse_Visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_EnterPosition;
        break;
      }

      // optional .pb.PbVector2 EnterPosition = 3;
      case 3: {
        if (tag == 26) {
         parse_EnterPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enterposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ExistPosition;
        break;
      }

      // optional .pb.PbVector2 ExistPosition = 4;
      case 4: {
        if (tag == 34) {
         parse_ExistPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_existposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SceneUIPosition;
        break;
      }

      // optional .pb.PbVector2 SceneUIPosition = 5;
      case 5: {
        if (tag == 42) {
         parse_SceneUIPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sceneuiposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_AssetPath;
        break;
      }

      // optional string AssetPath = 6;
      case 6: {
        if (tag == 50) {
         parse_AssetPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assetpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->assetpath().data(), this->assetpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "assetpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_FadeInTime;
        break;
      }

      // optional float FadeInTime = 7;
      case 7: {
        if (tag == 61) {
         parse_FadeInTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fadeintime_)));
          set_has_fadeintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_SceneUIAssetPath;
        break;
      }

      // optional string SceneUIAssetPath = 8;
      case 8: {
        if (tag == 66) {
         parse_SceneUIAssetPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sceneuiassetpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sceneuiassetpath().data(), this->sceneuiassetpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sceneuiassetpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_WalkAreaName;
        break;
      }

      // optional string WalkAreaName = 9;
      case 9: {
        if (tag == 74) {
         parse_WalkAreaName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_walkareaname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->walkareaname().data(), this->walkareaname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "walkareaname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_CarrierSpeed;
        break;
      }

      // optional float CarrierSpeed = 10;
      case 10: {
        if (tag == 85) {
         parse_CarrierSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrierspeed_)));
          set_has_carrierspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CarrierEnt2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CarrierEnt2)
  return false;
#undef DO_
}

void CarrierEnt2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CarrierEnt2)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool Visible = 2;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->visible(), output);
  }

  // optional .pb.PbVector2 EnterPosition = 3;
  if (has_enterposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->enterposition(), output);
  }

  // optional .pb.PbVector2 ExistPosition = 4;
  if (has_existposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->existposition(), output);
  }

  // optional .pb.PbVector2 SceneUIPosition = 5;
  if (has_sceneuiposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sceneuiposition(), output);
  }

  // optional string AssetPath = 6;
  if (has_assetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetpath().data(), this->assetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->assetpath(), output);
  }

  // optional float FadeInTime = 7;
  if (has_fadeintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fadeintime(), output);
  }

  // optional string SceneUIAssetPath = 8;
  if (has_sceneuiassetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneuiassetpath().data(), this->sceneuiassetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneuiassetpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sceneuiassetpath(), output);
  }

  // optional string WalkAreaName = 9;
  if (has_walkareaname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->walkareaname().data(), this->walkareaname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "walkareaname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->walkareaname(), output);
  }

  // optional float CarrierSpeed = 10;
  if (has_carrierspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->carrierspeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CarrierEnt2)
}

::google::protobuf::uint8* CarrierEnt2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CarrierEnt2)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool Visible = 2;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->visible(), target);
  }

  // optional .pb.PbVector2 EnterPosition = 3;
  if (has_enterposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->enterposition(), target);
  }

  // optional .pb.PbVector2 ExistPosition = 4;
  if (has_existposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->existposition(), target);
  }

  // optional .pb.PbVector2 SceneUIPosition = 5;
  if (has_sceneuiposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sceneuiposition(), target);
  }

  // optional string AssetPath = 6;
  if (has_assetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetpath().data(), this->assetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->assetpath(), target);
  }

  // optional float FadeInTime = 7;
  if (has_fadeintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fadeintime(), target);
  }

  // optional string SceneUIAssetPath = 8;
  if (has_sceneuiassetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneuiassetpath().data(), this->sceneuiassetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneuiassetpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sceneuiassetpath(), target);
  }

  // optional string WalkAreaName = 9;
  if (has_walkareaname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->walkareaname().data(), this->walkareaname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "walkareaname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->walkareaname(), target);
  }

  // optional float CarrierSpeed = 10;
  if (has_carrierspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->carrierspeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CarrierEnt2)
  return target;
}

int CarrierEnt2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool Visible = 2;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional .pb.PbVector2 EnterPosition = 3;
    if (has_enterposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enterposition());
    }

    // optional .pb.PbVector2 ExistPosition = 4;
    if (has_existposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->existposition());
    }

    // optional .pb.PbVector2 SceneUIPosition = 5;
    if (has_sceneuiposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sceneuiposition());
    }

    // optional string AssetPath = 6;
    if (has_assetpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assetpath());
    }

    // optional float FadeInTime = 7;
    if (has_fadeintime()) {
      total_size += 1 + 4;
    }

    // optional string SceneUIAssetPath = 8;
    if (has_sceneuiassetpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sceneuiassetpath());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string WalkAreaName = 9;
    if (has_walkareaname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->walkareaname());
    }

    // optional float CarrierSpeed = 10;
    if (has_carrierspeed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarrierEnt2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarrierEnt2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarrierEnt2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarrierEnt2::MergeFrom(const CarrierEnt2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_enterposition()) {
      mutable_enterposition()->::pb::PbVector2::MergeFrom(from.enterposition());
    }
    if (from.has_existposition()) {
      mutable_existposition()->::pb::PbVector2::MergeFrom(from.existposition());
    }
    if (from.has_sceneuiposition()) {
      mutable_sceneuiposition()->::pb::PbVector2::MergeFrom(from.sceneuiposition());
    }
    if (from.has_assetpath()) {
      set_assetpath(from.assetpath());
    }
    if (from.has_fadeintime()) {
      set_fadeintime(from.fadeintime());
    }
    if (from.has_sceneuiassetpath()) {
      set_sceneuiassetpath(from.sceneuiassetpath());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_walkareaname()) {
      set_walkareaname(from.walkareaname());
    }
    if (from.has_carrierspeed()) {
      set_carrierspeed(from.carrierspeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarrierEnt2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarrierEnt2::CopyFrom(const CarrierEnt2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarrierEnt2::IsInitialized() const {

  if (has_enterposition()) {
    if (!this->enterposition().IsInitialized()) return false;
  }
  if (has_existposition()) {
    if (!this->existposition().IsInitialized()) return false;
  }
  if (has_sceneuiposition()) {
    if (!this->sceneuiposition().IsInitialized()) return false;
  }
  return true;
}

void CarrierEnt2::Swap(CarrierEnt2* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(visible_, other->visible_);
    std::swap(enterposition_, other->enterposition_);
    std::swap(existposition_, other->existposition_);
    std::swap(sceneuiposition_, other->sceneuiposition_);
    std::swap(assetpath_, other->assetpath_);
    std::swap(fadeintime_, other->fadeintime_);
    std::swap(sceneuiassetpath_, other->sceneuiassetpath_);
    std::swap(walkareaname_, other->walkareaname_);
    std::swap(carrierspeed_, other->carrierspeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarrierEnt2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarrierEnt2_descriptor_;
  metadata.reflection = CarrierEnt2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeatureEntrance::kInteractableFieldNumber;
const int FeatureEntrance::kFeatureEntranceIdFieldNumber;
const int FeatureEntrance::kPositionFieldNumber;
const int FeatureEntrance::kEventFuncIdFieldNumber;
const int FeatureEntrance::kParamsFieldNumber;
const int FeatureEntrance::kScaleFieldNumber;
const int FeatureEntrance::kSortedLayerFieldNumber;
const int FeatureEntrance::kOrderInLayerFieldNumber;
const int FeatureEntrance::kAttachPointArrFieldNumber;
const int FeatureEntrance::kAssetPathFieldNumber;
const int FeatureEntrance::kSwitchConfIdFieldNumber;
const int FeatureEntrance::kPressScaleFieldNumber;
const int FeatureEntrance::kFake3DOffsetFieldNumber;
const int FeatureEntrance::kEntranceNameFieldNumber;
#endif  // !_MSC_VER

FeatureEntrance::FeatureEntrance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.FeatureEntrance)
}

void FeatureEntrance::InitAsDefaultInstance() {
  position_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
  scale_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
  fake3doffset_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
}

FeatureEntrance::FeatureEntrance(const FeatureEntrance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.FeatureEntrance)
}

void FeatureEntrance::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  interactable_ = false;
  featureentranceid_ = 0;
  position_ = NULL;
  eventfuncid_ = 0;
  params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_ = NULL;
  sortedlayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderinlayer_ = 0u;
  assetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  switchconfid_ = 0u;
  pressscale_ = 0;
  fake3doffset_ = NULL;
  entrancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureEntrance::~FeatureEntrance() {
  // @@protoc_insertion_point(destructor:pb.FeatureEntrance)
  SharedDtor();
}

void FeatureEntrance::SharedDtor() {
  if (params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete params_;
  }
  if (sortedlayer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sortedlayer_;
  }
  if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete assetpath_;
  }
  if (entrancename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete entrancename_;
  }
  if (this != default_instance_) {
    delete position_;
    delete scale_;
    delete fake3doffset_;
  }
}

void FeatureEntrance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureEntrance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureEntrance_descriptor_;
}

const FeatureEntrance& FeatureEntrance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  return *default_instance_;
}

FeatureEntrance* FeatureEntrance::default_instance_ = NULL;

FeatureEntrance* FeatureEntrance::New() const {
  return new FeatureEntrance;
}

void FeatureEntrance::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FeatureEntrance*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(interactable_, featureentranceid_);
    ZR_(eventfuncid_, orderinlayer_);
    if (has_position()) {
      if (position_ != NULL) position_->::pb::PbVector2::Clear();
    }
    if (has_params()) {
      if (params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        params_->clear();
      }
    }
    if (has_scale()) {
      if (scale_ != NULL) scale_->::pb::PbVector2::Clear();
    }
    if (has_sortedlayer()) {
      if (sortedlayer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sortedlayer_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 15872) {
    ZR_(switchconfid_, pressscale_);
    if (has_assetpath()) {
      if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        assetpath_->clear();
      }
    }
    if (has_fake3doffset()) {
      if (fake3doffset_ != NULL) fake3doffset_->::pb::PbVector2::Clear();
    }
    if (has_entrancename()) {
      if (entrancename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        entrancename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attachpointarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeatureEntrance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.FeatureEntrance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Interactable = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &interactable_)));
          set_has_interactable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FeatureEntranceId;
        break;
      }

      // optional int32 FeatureEntranceId = 2;
      case 2: {
        if (tag == 16) {
         parse_FeatureEntranceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &featureentranceid_)));
          set_has_featureentranceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Position;
        break;
      }

      // optional .pb.PbVector2 Position = 3;
      case 3: {
        if (tag == 26) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_EventFuncId;
        break;
      }

      // optional int32 EventFuncId = 4;
      case 4: {
        if (tag == 32) {
         parse_EventFuncId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventfuncid_)));
          set_has_eventfuncid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Params;
        break;
      }

      // optional string Params = 5;
      case 5: {
        if (tag == 42) {
         parse_Params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->params().data(), this->params().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "params");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Scale;
        break;
      }

      // optional .pb.PbVector2 Scale = 6;
      case 6: {
        if (tag == 50) {
         parse_Scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_SortedLayer;
        break;
      }

      // optional string SortedLayer = 7;
      case 7: {
        if (tag == 58) {
         parse_SortedLayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sortedlayer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sortedlayer().data(), this->sortedlayer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sortedlayer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_OrderInLayer;
        break;
      }

      // optional uint32 OrderInLayer = 8;
      case 8: {
        if (tag == 64) {
         parse_OrderInLayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orderinlayer_)));
          set_has_orderinlayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_AttachPointArr;
        break;
      }

      // repeated .pb.AttachPoint2 AttachPointArr = 9;
      case 9: {
        if (tag == 74) {
         parse_AttachPointArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachpointarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_AttachPointArr;
        if (input->ExpectTag(82)) goto parse_AssetPath;
        break;
      }

      // optional string AssetPath = 10;
      case 10: {
        if (tag == 82) {
         parse_AssetPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assetpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->assetpath().data(), this->assetpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "assetpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_SwitchConfId;
        break;
      }

      // optional uint32 SwitchConfId = 11;
      case 11: {
        if (tag == 88) {
         parse_SwitchConfId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &switchconfid_)));
          set_has_switchconfid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_PressScale;
        break;
      }

      // optional float PressScale = 12;
      case 12: {
        if (tag == 101) {
         parse_PressScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pressscale_)));
          set_has_pressscale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_Fake3dOffset;
        break;
      }

      // optional .pb.PbVector2 Fake3dOffset = 13;
      case 13: {
        if (tag == 106) {
         parse_Fake3dOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fake3doffset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_EntranceName;
        break;
      }

      // optional string EntranceName = 14;
      case 14: {
        if (tag == 114) {
         parse_EntranceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entrancename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entrancename().data(), this->entrancename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "entrancename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.FeatureEntrance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.FeatureEntrance)
  return false;
#undef DO_
}

void FeatureEntrance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.FeatureEntrance)
  // optional bool Interactable = 1;
  if (has_interactable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->interactable(), output);
  }

  // optional int32 FeatureEntranceId = 2;
  if (has_featureentranceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->featureentranceid(), output);
  }

  // optional .pb.PbVector2 Position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  // optional int32 EventFuncId = 4;
  if (has_eventfuncid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->eventfuncid(), output);
  }

  // optional string Params = 5;
  if (has_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params().data(), this->params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "params");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->params(), output);
  }

  // optional .pb.PbVector2 Scale = 6;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->scale(), output);
  }

  // optional string SortedLayer = 7;
  if (has_sortedlayer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sortedlayer().data(), this->sortedlayer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sortedlayer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sortedlayer(), output);
  }

  // optional uint32 OrderInLayer = 8;
  if (has_orderinlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->orderinlayer(), output);
  }

  // repeated .pb.AttachPoint2 AttachPointArr = 9;
  for (int i = 0; i < this->attachpointarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->attachpointarr(i), output);
  }

  // optional string AssetPath = 10;
  if (has_assetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetpath().data(), this->assetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->assetpath(), output);
  }

  // optional uint32 SwitchConfId = 11;
  if (has_switchconfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->switchconfid(), output);
  }

  // optional float PressScale = 12;
  if (has_pressscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->pressscale(), output);
  }

  // optional .pb.PbVector2 Fake3dOffset = 13;
  if (has_fake3doffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->fake3doffset(), output);
  }

  // optional string EntranceName = 14;
  if (has_entrancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entrancename().data(), this->entrancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "entrancename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->entrancename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.FeatureEntrance)
}

::google::protobuf::uint8* FeatureEntrance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.FeatureEntrance)
  // optional bool Interactable = 1;
  if (has_interactable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->interactable(), target);
  }

  // optional int32 FeatureEntranceId = 2;
  if (has_featureentranceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->featureentranceid(), target);
  }

  // optional .pb.PbVector2 Position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  // optional int32 EventFuncId = 4;
  if (has_eventfuncid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->eventfuncid(), target);
  }

  // optional string Params = 5;
  if (has_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params().data(), this->params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "params");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->params(), target);
  }

  // optional .pb.PbVector2 Scale = 6;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->scale(), target);
  }

  // optional string SortedLayer = 7;
  if (has_sortedlayer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sortedlayer().data(), this->sortedlayer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sortedlayer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sortedlayer(), target);
  }

  // optional uint32 OrderInLayer = 8;
  if (has_orderinlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->orderinlayer(), target);
  }

  // repeated .pb.AttachPoint2 AttachPointArr = 9;
  for (int i = 0; i < this->attachpointarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->attachpointarr(i), target);
  }

  // optional string AssetPath = 10;
  if (has_assetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetpath().data(), this->assetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->assetpath(), target);
  }

  // optional uint32 SwitchConfId = 11;
  if (has_switchconfid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->switchconfid(), target);
  }

  // optional float PressScale = 12;
  if (has_pressscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->pressscale(), target);
  }

  // optional .pb.PbVector2 Fake3dOffset = 13;
  if (has_fake3doffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->fake3doffset(), target);
  }

  // optional string EntranceName = 14;
  if (has_entrancename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entrancename().data(), this->entrancename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "entrancename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->entrancename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.FeatureEntrance)
  return target;
}

int FeatureEntrance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Interactable = 1;
    if (has_interactable()) {
      total_size += 1 + 1;
    }

    // optional int32 FeatureEntranceId = 2;
    if (has_featureentranceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->featureentranceid());
    }

    // optional .pb.PbVector2 Position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional int32 EventFuncId = 4;
    if (has_eventfuncid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventfuncid());
    }

    // optional string Params = 5;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->params());
    }

    // optional .pb.PbVector2 Scale = 6;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

    // optional string SortedLayer = 7;
    if (has_sortedlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sortedlayer());
    }

    // optional uint32 OrderInLayer = 8;
    if (has_orderinlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orderinlayer());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional string AssetPath = 10;
    if (has_assetpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assetpath());
    }

    // optional uint32 SwitchConfId = 11;
    if (has_switchconfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->switchconfid());
    }

    // optional float PressScale = 12;
    if (has_pressscale()) {
      total_size += 1 + 4;
    }

    // optional .pb.PbVector2 Fake3dOffset = 13;
    if (has_fake3doffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fake3doffset());
    }

    // optional string EntranceName = 14;
    if (has_entrancename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entrancename());
    }

  }
  // repeated .pb.AttachPoint2 AttachPointArr = 9;
  total_size += 1 * this->attachpointarr_size();
  for (int i = 0; i < this->attachpointarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attachpointarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureEntrance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeatureEntrance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeatureEntrance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureEntrance::MergeFrom(const FeatureEntrance& from) {
  GOOGLE_CHECK_NE(&from, this);
  attachpointarr_.MergeFrom(from.attachpointarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_interactable()) {
      set_interactable(from.interactable());
    }
    if (from.has_featureentranceid()) {
      set_featureentranceid(from.featureentranceid());
    }
    if (from.has_position()) {
      mutable_position()->::pb::PbVector2::MergeFrom(from.position());
    }
    if (from.has_eventfuncid()) {
      set_eventfuncid(from.eventfuncid());
    }
    if (from.has_params()) {
      set_params(from.params());
    }
    if (from.has_scale()) {
      mutable_scale()->::pb::PbVector2::MergeFrom(from.scale());
    }
    if (from.has_sortedlayer()) {
      set_sortedlayer(from.sortedlayer());
    }
    if (from.has_orderinlayer()) {
      set_orderinlayer(from.orderinlayer());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_assetpath()) {
      set_assetpath(from.assetpath());
    }
    if (from.has_switchconfid()) {
      set_switchconfid(from.switchconfid());
    }
    if (from.has_pressscale()) {
      set_pressscale(from.pressscale());
    }
    if (from.has_fake3doffset()) {
      mutable_fake3doffset()->::pb::PbVector2::MergeFrom(from.fake3doffset());
    }
    if (from.has_entrancename()) {
      set_entrancename(from.entrancename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeatureEntrance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureEntrance::CopyFrom(const FeatureEntrance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureEntrance::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_scale()) {
    if (!this->scale().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->attachpointarr())) return false;
  if (has_fake3doffset()) {
    if (!this->fake3doffset().IsInitialized()) return false;
  }
  return true;
}

void FeatureEntrance::Swap(FeatureEntrance* other) {
  if (other != this) {
    std::swap(interactable_, other->interactable_);
    std::swap(featureentranceid_, other->featureentranceid_);
    std::swap(position_, other->position_);
    std::swap(eventfuncid_, other->eventfuncid_);
    std::swap(params_, other->params_);
    std::swap(scale_, other->scale_);
    std::swap(sortedlayer_, other->sortedlayer_);
    std::swap(orderinlayer_, other->orderinlayer_);
    attachpointarr_.Swap(&other->attachpointarr_);
    std::swap(assetpath_, other->assetpath_);
    std::swap(switchconfid_, other->switchconfid_);
    std::swap(pressscale_, other->pressscale_);
    std::swap(fake3doffset_, other->fake3doffset_);
    std::swap(entrancename_, other->entrancename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeatureEntrance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureEntrance_descriptor_;
  metadata.reflection = FeatureEntrance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneChunkInfo::kCoordinateOriginFieldNumber;
const int SceneChunkInfo::kUnitChunkInfoFieldNumber;
#endif  // !_MSC_VER

SceneChunkInfo::SceneChunkInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SceneChunkInfo)
}

void SceneChunkInfo::InitAsDefaultInstance() {
  coordinateorigin_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
  unitchunkinfo_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
}

SceneChunkInfo::SceneChunkInfo(const SceneChunkInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SceneChunkInfo)
}

void SceneChunkInfo::SharedCtor() {
  _cached_size_ = 0;
  coordinateorigin_ = NULL;
  unitchunkinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneChunkInfo::~SceneChunkInfo() {
  // @@protoc_insertion_point(destructor:pb.SceneChunkInfo)
  SharedDtor();
}

void SceneChunkInfo::SharedDtor() {
  if (this != default_instance_) {
    delete coordinateorigin_;
    delete unitchunkinfo_;
  }
}

void SceneChunkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneChunkInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneChunkInfo_descriptor_;
}

const SceneChunkInfo& SceneChunkInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  return *default_instance_;
}

SceneChunkInfo* SceneChunkInfo::default_instance_ = NULL;

SceneChunkInfo* SceneChunkInfo::New() const {
  return new SceneChunkInfo;
}

void SceneChunkInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_coordinateorigin()) {
      if (coordinateorigin_ != NULL) coordinateorigin_->::pb::PbVector2::Clear();
    }
    if (has_unitchunkinfo()) {
      if (unitchunkinfo_ != NULL) unitchunkinfo_->::pb::PbVector2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneChunkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SceneChunkInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.PbVector2 CoordinateOrigin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinateorigin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UnitChunkInfo;
        break;
      }

      // required .pb.PbVector2 UnitChunkInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_UnitChunkInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unitchunkinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SceneChunkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SceneChunkInfo)
  return false;
#undef DO_
}

void SceneChunkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SceneChunkInfo)
  // required .pb.PbVector2 CoordinateOrigin = 1;
  if (has_coordinateorigin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->coordinateorigin(), output);
  }

  // required .pb.PbVector2 UnitChunkInfo = 2;
  if (has_unitchunkinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unitchunkinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SceneChunkInfo)
}

::google::protobuf::uint8* SceneChunkInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SceneChunkInfo)
  // required .pb.PbVector2 CoordinateOrigin = 1;
  if (has_coordinateorigin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->coordinateorigin(), target);
  }

  // required .pb.PbVector2 UnitChunkInfo = 2;
  if (has_unitchunkinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unitchunkinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SceneChunkInfo)
  return target;
}

int SceneChunkInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.PbVector2 CoordinateOrigin = 1;
    if (has_coordinateorigin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinateorigin());
    }

    // required .pb.PbVector2 UnitChunkInfo = 2;
    if (has_unitchunkinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unitchunkinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneChunkInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneChunkInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneChunkInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneChunkInfo::MergeFrom(const SceneChunkInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coordinateorigin()) {
      mutable_coordinateorigin()->::pb::PbVector2::MergeFrom(from.coordinateorigin());
    }
    if (from.has_unitchunkinfo()) {
      mutable_unitchunkinfo()->::pb::PbVector2::MergeFrom(from.unitchunkinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneChunkInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneChunkInfo::CopyFrom(const SceneChunkInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneChunkInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_coordinateorigin()) {
    if (!this->coordinateorigin().IsInitialized()) return false;
  }
  if (has_unitchunkinfo()) {
    if (!this->unitchunkinfo().IsInitialized()) return false;
  }
  return true;
}

void SceneChunkInfo::Swap(SceneChunkInfo* other) {
  if (other != this) {
    std::swap(coordinateorigin_, other->coordinateorigin_);
    std::swap(unitchunkinfo_, other->unitchunkinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneChunkInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneChunkInfo_descriptor_;
  metadata.reflection = SceneChunkInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Obstacle::kNameFieldNumber;
const int Obstacle::kVisibleFieldNumber;
#endif  // !_MSC_VER

Obstacle::Obstacle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Obstacle)
}

void Obstacle::InitAsDefaultInstance() {
}

Obstacle::Obstacle(const Obstacle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Obstacle)
}

void Obstacle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visible_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Obstacle::~Obstacle() {
  // @@protoc_insertion_point(destructor:pb.Obstacle)
  SharedDtor();
}

void Obstacle::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Obstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Obstacle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Obstacle_descriptor_;
}

const Obstacle& Obstacle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  return *default_instance_;
}

Obstacle* Obstacle::default_instance_ = NULL;

Obstacle* Obstacle::New() const {
  return new Obstacle;
}

void Obstacle::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    visible_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Obstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Obstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Visible;
        break;
      }

      // optional bool Visible = 2;
      case 2: {
        if (tag == 16) {
         parse_Visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Obstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Obstacle)
  return false;
#undef DO_
}

void Obstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Obstacle)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool Visible = 2;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->visible(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Obstacle)
}

::google::protobuf::uint8* Obstacle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Obstacle)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool Visible = 2;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->visible(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Obstacle)
  return target;
}

int Obstacle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool Visible = 2;
    if (has_visible()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Obstacle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Obstacle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Obstacle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Obstacle::MergeFrom(const Obstacle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Obstacle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle::CopyFrom(const Obstacle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle::IsInitialized() const {

  return true;
}

void Obstacle::Swap(Obstacle* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(visible_, other->visible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Obstacle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Obstacle_descriptor_;
  metadata.reflection = Obstacle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
