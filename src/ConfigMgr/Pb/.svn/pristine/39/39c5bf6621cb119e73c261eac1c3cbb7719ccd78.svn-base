// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActPictureScroll.proto

#ifndef PROTOBUF_net_2fActPictureScroll_2eproto__INCLUDED
#define PROTOBUF_net_2fActPictureScroll_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/OpenActivity.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActPictureScroll_2eproto();
void protobuf_AssignDesc_net_2fActPictureScroll_2eproto();
void protobuf_ShutdownFile_net_2fActPictureScroll_2eproto();

class TActPictureScrollGetPropsInfoRsp;
class TActPictureScrollSingleLayer;
class TActPictureScrollLightUpPropsReq;
class TActPictureScrollGetLightUpPropsReq;
class TActPictureScrollGetLightUpPropsRsp;
class TActPictureScrollGetTaskWeightsInfoRsp;
class TActPictureScrollTaskWeights;
class TActPictureScrollGetTaskInfoRsp;
class TActPictureScrollGetTaskInfo;
class TActPictureScrollGetTaskRewardReq;
class TActPictureScrollGetTaskRewardRsp;
class TActPictureScrollLotteryReq;
class TActPictureScrollLotteryRsp;
class TActPictureScrollTransformPropsReq;
class TActPictureScrollTransformPropsRsp;
class TActPictureScrollNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActPictureScrollGetPropsInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPictureScroll.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPictureScrollGetPropsInfoRsp : public ::google::protobuf::Message {
 public:
  TActPictureScrollGetPropsInfoRsp();
  virtual ~TActPictureScrollGetPropsInfoRsp();

  TActPictureScrollGetPropsInfoRsp(const TActPictureScrollGetPropsInfoRsp& from);

  inline TActPictureScrollGetPropsInfoRsp& operator=(const TActPictureScrollGetPropsInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPictureScrollGetPropsInfoRsp& default_instance();

  void Swap(TActPictureScrollGetPropsInfoRsp* other);

  // implements Message ----------------------------------------------

  TActPictureScrollGetPropsInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPictureScrollGetPropsInfoRsp& from);
  void MergeFrom(const TActPictureScrollGetPropsInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActPictureScrollSingleLayer PropsInfo = 1;
  inline int propsinfo_size() const;
  inline void clear_propsinfo();
  static const int kPropsInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollGetPropsInfoRsp</name>
  	<Function>
  		<name>propsinfo</name>
  		<replaceName>PropsInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_propsinfo</name>
  		<replaceName>PropsInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_propsinfo</name>
  		<replaceName>PropsInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_propsinfo</name>
  		<replaceName>PropsInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>propsinfo_size</name>
  		<replaceName>PropsInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActPictureScrollSingleLayer& propsinfo(int index) const;
  inline ::pb::TActPictureScrollSingleLayer* mutable_propsinfo(int index);
  inline ::pb::TActPictureScrollSingleLayer* add_propsinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollSingleLayer >&
      propsinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollSingleLayer >*
      mutable_propsinfo();

  // repeated .pb.TActivityRewardInfo ScoreRewardInfo = 2;
  inline int scorerewardinfo_size() const;
  inline void clear_scorerewardinfo();
  static const int kScoreRewardInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollGetPropsInfoRsp</name>
  	<Function>
  		<name>scorerewardinfo</name>
  		<replaceName>ScoreRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_scorerewardinfo</name>
  		<replaceName>ScoreRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_scorerewardinfo</name>
  		<replaceName>ScoreRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scorerewardinfo</name>
  		<replaceName>ScoreRewardInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>scorerewardinfo_size</name>
  		<replaceName>ScoreRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityRewardInfo& scorerewardinfo(int index) const;
  inline ::pb::TActivityRewardInfo* mutable_scorerewardinfo(int index);
  inline ::pb::TActivityRewardInfo* add_scorerewardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
      scorerewardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
      mutable_scorerewardinfo();

  // @@protoc_insertion_point(class_scope:pb.TActPictureScrollGetPropsInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollSingleLayer > propsinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo > scorerewardinfo_;
  friend void  protobuf_AddDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_AssignDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPictureScroll_2eproto();

  void InitAsDefaultInstance();
  static TActPictureScrollGetPropsInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPictureScrollSingleLayer</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPictureScroll.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPictureScrollSingleLayer : public ::google::protobuf::Message {
 public:
  TActPictureScrollSingleLayer();
  virtual ~TActPictureScrollSingleLayer();

  TActPictureScrollSingleLayer(const TActPictureScrollSingleLayer& from);

  inline TActPictureScrollSingleLayer& operator=(const TActPictureScrollSingleLayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPictureScrollSingleLayer& default_instance();

  void Swap(TActPictureScrollSingleLayer* other);

  // implements Message ----------------------------------------------

  TActPictureScrollSingleLayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPictureScrollSingleLayer& from);
  void MergeFrom(const TActPictureScrollSingleLayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollSingleLayer</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 LightUpTime = 2;
  inline bool has_lightuptime() const;
  inline void clear_lightuptime();
  static const int kLightUpTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollSingleLayer</name>
  	<Function>
  		<name>lightuptime</name>
  		<replaceName>LightUpTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lightuptime</name>
  		<replaceName>LightUpTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lightuptime</name>
  		<replaceName>LightUpTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 lightuptime() const;
  inline void set_lightuptime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActPictureScrollSingleLayer)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lightuptime();
  inline void clear_has_lightuptime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 lightuptime_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_AssignDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPictureScroll_2eproto();

  void InitAsDefaultInstance();
  static TActPictureScrollSingleLayer* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPictureScrollLightUpPropsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPictureScroll.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPictureScrollLightUpPropsReq : public ::google::protobuf::Message {
 public:
  TActPictureScrollLightUpPropsReq();
  virtual ~TActPictureScrollLightUpPropsReq();

  TActPictureScrollLightUpPropsReq(const TActPictureScrollLightUpPropsReq& from);

  inline TActPictureScrollLightUpPropsReq& operator=(const TActPictureScrollLightUpPropsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPictureScrollLightUpPropsReq& default_instance();

  void Swap(TActPictureScrollLightUpPropsReq* other);

  // implements Message ----------------------------------------------

  TActPictureScrollLightUpPropsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPictureScrollLightUpPropsReq& from);
  void MergeFrom(const TActPictureScrollLightUpPropsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollLightUpPropsReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActPictureScrollLightUpPropsReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_AssignDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPictureScroll_2eproto();

  void InitAsDefaultInstance();
  static TActPictureScrollLightUpPropsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPictureScrollGetLightUpPropsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPictureScroll.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPictureScrollGetLightUpPropsReq : public ::google::protobuf::Message {
 public:
  TActPictureScrollGetLightUpPropsReq();
  virtual ~TActPictureScrollGetLightUpPropsReq();

  TActPictureScrollGetLightUpPropsReq(const TActPictureScrollGetLightUpPropsReq& from);

  inline TActPictureScrollGetLightUpPropsReq& operator=(const TActPictureScrollGetLightUpPropsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPictureScrollGetLightUpPropsReq& default_instance();

  void Swap(TActPictureScrollGetLightUpPropsReq* other);

  // implements Message ----------------------------------------------

  TActPictureScrollGetLightUpPropsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPictureScrollGetLightUpPropsReq& from);
  void MergeFrom(const TActPictureScrollGetLightUpPropsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollGetLightUpPropsReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActPictureScrollGetLightUpPropsReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_AssignDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPictureScroll_2eproto();

  void InitAsDefaultInstance();
  static TActPictureScrollGetLightUpPropsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPictureScrollGetLightUpPropsRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPictureScroll.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPictureScrollGetLightUpPropsRsp : public ::google::protobuf::Message {
 public:
  TActPictureScrollGetLightUpPropsRsp();
  virtual ~TActPictureScrollGetLightUpPropsRsp();

  TActPictureScrollGetLightUpPropsRsp(const TActPictureScrollGetLightUpPropsRsp& from);

  inline TActPictureScrollGetLightUpPropsRsp& operator=(const TActPictureScrollGetLightUpPropsRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPictureScrollGetLightUpPropsRsp& default_instance();

  void Swap(TActPictureScrollGetLightUpPropsRsp* other);

  // implements Message ----------------------------------------------

  TActPictureScrollGetLightUpPropsRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPictureScrollGetLightUpPropsRsp& from);
  void MergeFrom(const TActPictureScrollGetLightUpPropsRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollGetLightUpPropsRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActPictureScrollGetLightUpPropsRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_AssignDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPictureScroll_2eproto();

  void InitAsDefaultInstance();
  static TActPictureScrollGetLightUpPropsRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPictureScrollGetTaskWeightsInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPictureScroll.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPictureScrollGetTaskWeightsInfoRsp : public ::google::protobuf::Message {
 public:
  TActPictureScrollGetTaskWeightsInfoRsp();
  virtual ~TActPictureScrollGetTaskWeightsInfoRsp();

  TActPictureScrollGetTaskWeightsInfoRsp(const TActPictureScrollGetTaskWeightsInfoRsp& from);

  inline TActPictureScrollGetTaskWeightsInfoRsp& operator=(const TActPictureScrollGetTaskWeightsInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPictureScrollGetTaskWeightsInfoRsp& default_instance();

  void Swap(TActPictureScrollGetTaskWeightsInfoRsp* other);

  // implements Message ----------------------------------------------

  TActPictureScrollGetTaskWeightsInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPictureScrollGetTaskWeightsInfoRsp& from);
  void MergeFrom(const TActPictureScrollGetTaskWeightsInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActPictureScrollTaskWeights TaskWeightsInfo = 1;
  inline int taskweightsinfo_size() const;
  inline void clear_taskweightsinfo();
  static const int kTaskWeightsInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollGetTaskWeightsInfoRsp</name>
  	<Function>
  		<name>taskweightsinfo</name>
  		<replaceName>TaskWeightsInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_taskweightsinfo</name>
  		<replaceName>TaskWeightsInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_taskweightsinfo</name>
  		<replaceName>TaskWeightsInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskweightsinfo</name>
  		<replaceName>TaskWeightsInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>taskweightsinfo_size</name>
  		<replaceName>TaskWeightsInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActPictureScrollTaskWeights& taskweightsinfo(int index) const;
  inline ::pb::TActPictureScrollTaskWeights* mutable_taskweightsinfo(int index);
  inline ::pb::TActPictureScrollTaskWeights* add_taskweightsinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollTaskWeights >&
      taskweightsinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollTaskWeights >*
      mutable_taskweightsinfo();

  // @@protoc_insertion_point(class_scope:pb.TActPictureScrollGetTaskWeightsInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollTaskWeights > taskweightsinfo_;
  friend void  protobuf_AddDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_AssignDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPictureScroll_2eproto();

  void InitAsDefaultInstance();
  static TActPictureScrollGetTaskWeightsInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPictureScrollTaskWeights</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPictureScroll.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPictureScrollTaskWeights : public ::google::protobuf::Message {
 public:
  TActPictureScrollTaskWeights();
  virtual ~TActPictureScrollTaskWeights();

  TActPictureScrollTaskWeights(const TActPictureScrollTaskWeights& from);

  inline TActPictureScrollTaskWeights& operator=(const TActPictureScrollTaskWeights& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPictureScrollTaskWeights& default_instance();

  void Swap(TActPictureScrollTaskWeights* other);

  // implements Message ----------------------------------------------

  TActPictureScrollTaskWeights* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPictureScrollTaskWeights& from);
  void MergeFrom(const TActPictureScrollTaskWeights& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollTaskWeights</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActPictureScrollTaskWeights)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_AssignDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPictureScroll_2eproto();

  void InitAsDefaultInstance();
  static TActPictureScrollTaskWeights* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPictureScrollGetTaskInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPictureScroll.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPictureScrollGetTaskInfoRsp : public ::google::protobuf::Message {
 public:
  TActPictureScrollGetTaskInfoRsp();
  virtual ~TActPictureScrollGetTaskInfoRsp();

  TActPictureScrollGetTaskInfoRsp(const TActPictureScrollGetTaskInfoRsp& from);

  inline TActPictureScrollGetTaskInfoRsp& operator=(const TActPictureScrollGetTaskInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPictureScrollGetTaskInfoRsp& default_instance();

  void Swap(TActPictureScrollGetTaskInfoRsp* other);

  // implements Message ----------------------------------------------

  TActPictureScrollGetTaskInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPictureScrollGetTaskInfoRsp& from);
  void MergeFrom(const TActPictureScrollGetTaskInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActPictureScrollGetTaskInfo TaskInfo = 1;
  inline int taskinfo_size() const;
  inline void clear_taskinfo();
  static const int kTaskInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollGetTaskInfoRsp</name>
  	<Function>
  		<name>taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>taskinfo_size</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActPictureScrollGetTaskInfo& taskinfo(int index) const;
  inline ::pb::TActPictureScrollGetTaskInfo* mutable_taskinfo(int index);
  inline ::pb::TActPictureScrollGetTaskInfo* add_taskinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollGetTaskInfo >&
      taskinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollGetTaskInfo >*
      mutable_taskinfo();

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 2;
  inline int arrtaskrewardinfo_size() const;
  inline void clear_arrtaskrewardinfo();
  static const int kArrTaskRewardInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollGetTaskInfoRsp</name>
  	<Function>
  		<name>arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtaskrewardinfo_size</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityRewardInfo& arrtaskrewardinfo(int index) const;
  inline ::pb::TActivityRewardInfo* mutable_arrtaskrewardinfo(int index);
  inline ::pb::TActivityRewardInfo* add_arrtaskrewardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
      arrtaskrewardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
      mutable_arrtaskrewardinfo();

  // @@protoc_insertion_point(class_scope:pb.TActPictureScrollGetTaskInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollGetTaskInfo > taskinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo > arrtaskrewardinfo_;
  friend void  protobuf_AddDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_AssignDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPictureScroll_2eproto();

  void InitAsDefaultInstance();
  static TActPictureScrollGetTaskInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPictureScrollGetTaskInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPictureScroll.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPictureScrollGetTaskInfo : public ::google::protobuf::Message {
 public:
  TActPictureScrollGetTaskInfo();
  virtual ~TActPictureScrollGetTaskInfo();

  TActPictureScrollGetTaskInfo(const TActPictureScrollGetTaskInfo& from);

  inline TActPictureScrollGetTaskInfo& operator=(const TActPictureScrollGetTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPictureScrollGetTaskInfo& default_instance();

  void Swap(TActPictureScrollGetTaskInfo* other);

  // implements Message ----------------------------------------------

  TActPictureScrollGetTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPictureScrollGetTaskInfo& from);
  void MergeFrom(const TActPictureScrollGetTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollGetTaskInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 TaskType = 2;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTaskTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollGetTaskInfo</name>
  	<Function>
  		<name>tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tasktype() const;
  inline void set_tasktype(::google::protobuf::uint32 value);

  // optional uint32 Num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollGetTaskInfo</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActPictureScrollGetTaskInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 tasktype_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_AssignDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPictureScroll_2eproto();

  void InitAsDefaultInstance();
  static TActPictureScrollGetTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPictureScrollGetTaskRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPictureScroll.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPictureScrollGetTaskRewardReq : public ::google::protobuf::Message {
 public:
  TActPictureScrollGetTaskRewardReq();
  virtual ~TActPictureScrollGetTaskRewardReq();

  TActPictureScrollGetTaskRewardReq(const TActPictureScrollGetTaskRewardReq& from);

  inline TActPictureScrollGetTaskRewardReq& operator=(const TActPictureScrollGetTaskRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPictureScrollGetTaskRewardReq& default_instance();

  void Swap(TActPictureScrollGetTaskRewardReq* other);

  // implements Message ----------------------------------------------

  TActPictureScrollGetTaskRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPictureScrollGetTaskRewardReq& from);
  void MergeFrom(const TActPictureScrollGetTaskRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskId = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollGetTaskRewardReq</name>
  	<Function>
  		<name>taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActPictureScrollGetTaskRewardReq)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 taskid_;
  friend void  protobuf_AddDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_AssignDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPictureScroll_2eproto();

  void InitAsDefaultInstance();
  static TActPictureScrollGetTaskRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPictureScrollGetTaskRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPictureScroll.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPictureScrollGetTaskRewardRsp : public ::google::protobuf::Message {
 public:
  TActPictureScrollGetTaskRewardRsp();
  virtual ~TActPictureScrollGetTaskRewardRsp();

  TActPictureScrollGetTaskRewardRsp(const TActPictureScrollGetTaskRewardRsp& from);

  inline TActPictureScrollGetTaskRewardRsp& operator=(const TActPictureScrollGetTaskRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPictureScrollGetTaskRewardRsp& default_instance();

  void Swap(TActPictureScrollGetTaskRewardRsp* other);

  // implements Message ----------------------------------------------

  TActPictureScrollGetTaskRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPictureScrollGetTaskRewardRsp& from);
  void MergeFrom(const TActPictureScrollGetTaskRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollGetTaskRewardRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActPictureScrollGetTaskRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_AssignDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPictureScroll_2eproto();

  void InitAsDefaultInstance();
  static TActPictureScrollGetTaskRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPictureScrollLotteryReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPictureScroll.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPictureScrollLotteryReq : public ::google::protobuf::Message {
 public:
  TActPictureScrollLotteryReq();
  virtual ~TActPictureScrollLotteryReq();

  TActPictureScrollLotteryReq(const TActPictureScrollLotteryReq& from);

  inline TActPictureScrollLotteryReq& operator=(const TActPictureScrollLotteryReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPictureScrollLotteryReq& default_instance();

  void Swap(TActPictureScrollLotteryReq* other);

  // implements Message ----------------------------------------------

  TActPictureScrollLotteryReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPictureScrollLotteryReq& from);
  void MergeFrom(const TActPictureScrollLotteryReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 DrawNum = 1;
  inline bool has_drawnum() const;
  inline void clear_drawnum();
  static const int kDrawNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollLotteryReq</name>
  	<Function>
  		<name>drawnum</name>
  		<replaceName>DrawNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_drawnum</name>
  		<replaceName>DrawNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_drawnum</name>
  		<replaceName>DrawNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 drawnum() const;
  inline void set_drawnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActPictureScrollLotteryReq)
 private:
  inline void set_has_drawnum();
  inline void clear_has_drawnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 drawnum_;
  friend void  protobuf_AddDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_AssignDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPictureScroll_2eproto();

  void InitAsDefaultInstance();
  static TActPictureScrollLotteryReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPictureScrollLotteryRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPictureScroll.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPictureScrollLotteryRsp : public ::google::protobuf::Message {
 public:
  TActPictureScrollLotteryRsp();
  virtual ~TActPictureScrollLotteryRsp();

  TActPictureScrollLotteryRsp(const TActPictureScrollLotteryRsp& from);

  inline TActPictureScrollLotteryRsp& operator=(const TActPictureScrollLotteryRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPictureScrollLotteryRsp& default_instance();

  void Swap(TActPictureScrollLotteryRsp* other);

  // implements Message ----------------------------------------------

  TActPictureScrollLotteryRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPictureScrollLotteryRsp& from);
  void MergeFrom(const TActPictureScrollLotteryRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollLotteryRsp</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward ArrReward = 2;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollLotteryRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActPictureScrollLotteryRsp)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_AssignDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPictureScroll_2eproto();

  void InitAsDefaultInstance();
  static TActPictureScrollLotteryRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPictureScrollTransformPropsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPictureScroll.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPictureScrollTransformPropsReq : public ::google::protobuf::Message {
 public:
  TActPictureScrollTransformPropsReq();
  virtual ~TActPictureScrollTransformPropsReq();

  TActPictureScrollTransformPropsReq(const TActPictureScrollTransformPropsReq& from);

  inline TActPictureScrollTransformPropsReq& operator=(const TActPictureScrollTransformPropsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPictureScrollTransformPropsReq& default_instance();

  void Swap(TActPictureScrollTransformPropsReq* other);

  // implements Message ----------------------------------------------

  TActPictureScrollTransformPropsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPictureScrollTransformPropsReq& from);
  void MergeFrom(const TActPictureScrollTransformPropsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollTransformPropsReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActPictureScrollTransformPropsReq)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_AssignDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPictureScroll_2eproto();

  void InitAsDefaultInstance();
  static TActPictureScrollTransformPropsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPictureScrollTransformPropsRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPictureScroll.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPictureScrollTransformPropsRsp : public ::google::protobuf::Message {
 public:
  TActPictureScrollTransformPropsRsp();
  virtual ~TActPictureScrollTransformPropsRsp();

  TActPictureScrollTransformPropsRsp(const TActPictureScrollTransformPropsRsp& from);

  inline TActPictureScrollTransformPropsRsp& operator=(const TActPictureScrollTransformPropsRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPictureScrollTransformPropsRsp& default_instance();

  void Swap(TActPictureScrollTransformPropsRsp* other);

  // implements Message ----------------------------------------------

  TActPictureScrollTransformPropsRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPictureScrollTransformPropsRsp& from);
  void MergeFrom(const TActPictureScrollTransformPropsRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollTransformPropsRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActPictureScrollTransformPropsRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_AssignDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPictureScroll_2eproto();

  void InitAsDefaultInstance();
  static TActPictureScrollTransformPropsRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPictureScrollNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPictureScroll.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPictureScrollNotify : public ::google::protobuf::Message {
 public:
  TActPictureScrollNotify();
  virtual ~TActPictureScrollNotify();

  TActPictureScrollNotify(const TActPictureScrollNotify& from);

  inline TActPictureScrollNotify& operator=(const TActPictureScrollNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPictureScrollNotify& default_instance();

  void Swap(TActPictureScrollNotify* other);

  // implements Message ----------------------------------------------

  TActPictureScrollNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPictureScrollNotify& from);
  void MergeFrom(const TActPictureScrollNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActPictureScrollGetTaskInfo ArrTaskInfo = 1;
  inline int arrtaskinfo_size() const;
  inline void clear_arrtaskinfo();
  static const int kArrTaskInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPictureScrollNotify</name>
  	<Function>
  		<name>arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtaskinfo_size</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActPictureScrollGetTaskInfo& arrtaskinfo(int index) const;
  inline ::pb::TActPictureScrollGetTaskInfo* mutable_arrtaskinfo(int index);
  inline ::pb::TActPictureScrollGetTaskInfo* add_arrtaskinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollGetTaskInfo >&
      arrtaskinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollGetTaskInfo >*
      mutable_arrtaskinfo();

  // @@protoc_insertion_point(class_scope:pb.TActPictureScrollNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollGetTaskInfo > arrtaskinfo_;
  friend void  protobuf_AddDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_AssignDesc_net_2fActPictureScroll_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPictureScroll_2eproto();

  void InitAsDefaultInstance();
  static TActPictureScrollNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TActPictureScrollGetPropsInfoRsp

// repeated .pb.TActPictureScrollSingleLayer PropsInfo = 1;
inline int TActPictureScrollGetPropsInfoRsp::propsinfo_size() const {
  return propsinfo_.size();
}
inline void TActPictureScrollGetPropsInfoRsp::clear_propsinfo() {
  propsinfo_.Clear();
}
inline const ::pb::TActPictureScrollSingleLayer& TActPictureScrollGetPropsInfoRsp::propsinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollGetPropsInfoRsp.PropsInfo)
  return propsinfo_.Get(index);
}
inline ::pb::TActPictureScrollSingleLayer* TActPictureScrollGetPropsInfoRsp::mutable_propsinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActPictureScrollGetPropsInfoRsp.PropsInfo)
  return propsinfo_.Mutable(index);
}
inline ::pb::TActPictureScrollSingleLayer* TActPictureScrollGetPropsInfoRsp::add_propsinfo() {
  // @@protoc_insertion_point(field_add:pb.TActPictureScrollGetPropsInfoRsp.PropsInfo)
  return propsinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollSingleLayer >&
TActPictureScrollGetPropsInfoRsp::propsinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActPictureScrollGetPropsInfoRsp.PropsInfo)
  return propsinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollSingleLayer >*
TActPictureScrollGetPropsInfoRsp::mutable_propsinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActPictureScrollGetPropsInfoRsp.PropsInfo)
  return &propsinfo_;
}

// repeated .pb.TActivityRewardInfo ScoreRewardInfo = 2;
inline int TActPictureScrollGetPropsInfoRsp::scorerewardinfo_size() const {
  return scorerewardinfo_.size();
}
inline void TActPictureScrollGetPropsInfoRsp::clear_scorerewardinfo() {
  scorerewardinfo_.Clear();
}
inline const ::pb::TActivityRewardInfo& TActPictureScrollGetPropsInfoRsp::scorerewardinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollGetPropsInfoRsp.ScoreRewardInfo)
  return scorerewardinfo_.Get(index);
}
inline ::pb::TActivityRewardInfo* TActPictureScrollGetPropsInfoRsp::mutable_scorerewardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActPictureScrollGetPropsInfoRsp.ScoreRewardInfo)
  return scorerewardinfo_.Mutable(index);
}
inline ::pb::TActivityRewardInfo* TActPictureScrollGetPropsInfoRsp::add_scorerewardinfo() {
  // @@protoc_insertion_point(field_add:pb.TActPictureScrollGetPropsInfoRsp.ScoreRewardInfo)
  return scorerewardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
TActPictureScrollGetPropsInfoRsp::scorerewardinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActPictureScrollGetPropsInfoRsp.ScoreRewardInfo)
  return scorerewardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
TActPictureScrollGetPropsInfoRsp::mutable_scorerewardinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActPictureScrollGetPropsInfoRsp.ScoreRewardInfo)
  return &scorerewardinfo_;
}

// -------------------------------------------------------------------

// TActPictureScrollSingleLayer

// optional uint32 Id = 1;
inline bool TActPictureScrollSingleLayer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActPictureScrollSingleLayer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActPictureScrollSingleLayer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActPictureScrollSingleLayer::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActPictureScrollSingleLayer::id() const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollSingleLayer.Id)
  return id_;
}
inline void TActPictureScrollSingleLayer::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActPictureScrollSingleLayer.Id)
}

// optional uint64 LightUpTime = 2;
inline bool TActPictureScrollSingleLayer::has_lightuptime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActPictureScrollSingleLayer::set_has_lightuptime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActPictureScrollSingleLayer::clear_has_lightuptime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActPictureScrollSingleLayer::clear_lightuptime() {
  lightuptime_ = GOOGLE_ULONGLONG(0);
  clear_has_lightuptime();
}
inline ::google::protobuf::uint64 TActPictureScrollSingleLayer::lightuptime() const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollSingleLayer.LightUpTime)
  return lightuptime_;
}
inline void TActPictureScrollSingleLayer::set_lightuptime(::google::protobuf::uint64 value) {
  set_has_lightuptime();
  lightuptime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActPictureScrollSingleLayer.LightUpTime)
}

// -------------------------------------------------------------------

// TActPictureScrollLightUpPropsReq

// optional uint32 Id = 1;
inline bool TActPictureScrollLightUpPropsReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActPictureScrollLightUpPropsReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActPictureScrollLightUpPropsReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActPictureScrollLightUpPropsReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActPictureScrollLightUpPropsReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollLightUpPropsReq.Id)
  return id_;
}
inline void TActPictureScrollLightUpPropsReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActPictureScrollLightUpPropsReq.Id)
}

// -------------------------------------------------------------------

// TActPictureScrollGetLightUpPropsReq

// optional uint32 Id = 1;
inline bool TActPictureScrollGetLightUpPropsReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActPictureScrollGetLightUpPropsReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActPictureScrollGetLightUpPropsReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActPictureScrollGetLightUpPropsReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActPictureScrollGetLightUpPropsReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollGetLightUpPropsReq.Id)
  return id_;
}
inline void TActPictureScrollGetLightUpPropsReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActPictureScrollGetLightUpPropsReq.Id)
}

// -------------------------------------------------------------------

// TActPictureScrollGetLightUpPropsRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActPictureScrollGetLightUpPropsRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActPictureScrollGetLightUpPropsRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActPictureScrollGetLightUpPropsRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollGetLightUpPropsRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActPictureScrollGetLightUpPropsRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActPictureScrollGetLightUpPropsRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActPictureScrollGetLightUpPropsRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActPictureScrollGetLightUpPropsRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActPictureScrollGetLightUpPropsRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActPictureScrollGetLightUpPropsRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActPictureScrollGetLightUpPropsRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActPictureScrollGetLightUpPropsRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActPictureScrollGetTaskWeightsInfoRsp

// repeated .pb.TActPictureScrollTaskWeights TaskWeightsInfo = 1;
inline int TActPictureScrollGetTaskWeightsInfoRsp::taskweightsinfo_size() const {
  return taskweightsinfo_.size();
}
inline void TActPictureScrollGetTaskWeightsInfoRsp::clear_taskweightsinfo() {
  taskweightsinfo_.Clear();
}
inline const ::pb::TActPictureScrollTaskWeights& TActPictureScrollGetTaskWeightsInfoRsp::taskweightsinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollGetTaskWeightsInfoRsp.TaskWeightsInfo)
  return taskweightsinfo_.Get(index);
}
inline ::pb::TActPictureScrollTaskWeights* TActPictureScrollGetTaskWeightsInfoRsp::mutable_taskweightsinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActPictureScrollGetTaskWeightsInfoRsp.TaskWeightsInfo)
  return taskweightsinfo_.Mutable(index);
}
inline ::pb::TActPictureScrollTaskWeights* TActPictureScrollGetTaskWeightsInfoRsp::add_taskweightsinfo() {
  // @@protoc_insertion_point(field_add:pb.TActPictureScrollGetTaskWeightsInfoRsp.TaskWeightsInfo)
  return taskweightsinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollTaskWeights >&
TActPictureScrollGetTaskWeightsInfoRsp::taskweightsinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActPictureScrollGetTaskWeightsInfoRsp.TaskWeightsInfo)
  return taskweightsinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollTaskWeights >*
TActPictureScrollGetTaskWeightsInfoRsp::mutable_taskweightsinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActPictureScrollGetTaskWeightsInfoRsp.TaskWeightsInfo)
  return &taskweightsinfo_;
}

// -------------------------------------------------------------------

// TActPictureScrollTaskWeights

// optional uint32 Id = 1;
inline bool TActPictureScrollTaskWeights::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActPictureScrollTaskWeights::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActPictureScrollTaskWeights::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActPictureScrollTaskWeights::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActPictureScrollTaskWeights::id() const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollTaskWeights.Id)
  return id_;
}
inline void TActPictureScrollTaskWeights::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActPictureScrollTaskWeights.Id)
}

// -------------------------------------------------------------------

// TActPictureScrollGetTaskInfoRsp

// repeated .pb.TActPictureScrollGetTaskInfo TaskInfo = 1;
inline int TActPictureScrollGetTaskInfoRsp::taskinfo_size() const {
  return taskinfo_.size();
}
inline void TActPictureScrollGetTaskInfoRsp::clear_taskinfo() {
  taskinfo_.Clear();
}
inline const ::pb::TActPictureScrollGetTaskInfo& TActPictureScrollGetTaskInfoRsp::taskinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollGetTaskInfoRsp.TaskInfo)
  return taskinfo_.Get(index);
}
inline ::pb::TActPictureScrollGetTaskInfo* TActPictureScrollGetTaskInfoRsp::mutable_taskinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActPictureScrollGetTaskInfoRsp.TaskInfo)
  return taskinfo_.Mutable(index);
}
inline ::pb::TActPictureScrollGetTaskInfo* TActPictureScrollGetTaskInfoRsp::add_taskinfo() {
  // @@protoc_insertion_point(field_add:pb.TActPictureScrollGetTaskInfoRsp.TaskInfo)
  return taskinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollGetTaskInfo >&
TActPictureScrollGetTaskInfoRsp::taskinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActPictureScrollGetTaskInfoRsp.TaskInfo)
  return taskinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollGetTaskInfo >*
TActPictureScrollGetTaskInfoRsp::mutable_taskinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActPictureScrollGetTaskInfoRsp.TaskInfo)
  return &taskinfo_;
}

// repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 2;
inline int TActPictureScrollGetTaskInfoRsp::arrtaskrewardinfo_size() const {
  return arrtaskrewardinfo_.size();
}
inline void TActPictureScrollGetTaskInfoRsp::clear_arrtaskrewardinfo() {
  arrtaskrewardinfo_.Clear();
}
inline const ::pb::TActivityRewardInfo& TActPictureScrollGetTaskInfoRsp::arrtaskrewardinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollGetTaskInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_.Get(index);
}
inline ::pb::TActivityRewardInfo* TActPictureScrollGetTaskInfoRsp::mutable_arrtaskrewardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActPictureScrollGetTaskInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_.Mutable(index);
}
inline ::pb::TActivityRewardInfo* TActPictureScrollGetTaskInfoRsp::add_arrtaskrewardinfo() {
  // @@protoc_insertion_point(field_add:pb.TActPictureScrollGetTaskInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
TActPictureScrollGetTaskInfoRsp::arrtaskrewardinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActPictureScrollGetTaskInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
TActPictureScrollGetTaskInfoRsp::mutable_arrtaskrewardinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActPictureScrollGetTaskInfoRsp.ArrTaskRewardInfo)
  return &arrtaskrewardinfo_;
}

// -------------------------------------------------------------------

// TActPictureScrollGetTaskInfo

// optional uint32 ID = 1;
inline bool TActPictureScrollGetTaskInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActPictureScrollGetTaskInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActPictureScrollGetTaskInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActPictureScrollGetTaskInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActPictureScrollGetTaskInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollGetTaskInfo.ID)
  return id_;
}
inline void TActPictureScrollGetTaskInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActPictureScrollGetTaskInfo.ID)
}

// optional uint32 TaskType = 2;
inline bool TActPictureScrollGetTaskInfo::has_tasktype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActPictureScrollGetTaskInfo::set_has_tasktype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActPictureScrollGetTaskInfo::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActPictureScrollGetTaskInfo::clear_tasktype() {
  tasktype_ = 0u;
  clear_has_tasktype();
}
inline ::google::protobuf::uint32 TActPictureScrollGetTaskInfo::tasktype() const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollGetTaskInfo.TaskType)
  return tasktype_;
}
inline void TActPictureScrollGetTaskInfo::set_tasktype(::google::protobuf::uint32 value) {
  set_has_tasktype();
  tasktype_ = value;
  // @@protoc_insertion_point(field_set:pb.TActPictureScrollGetTaskInfo.TaskType)
}

// optional uint32 Num = 3;
inline bool TActPictureScrollGetTaskInfo::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActPictureScrollGetTaskInfo::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActPictureScrollGetTaskInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActPictureScrollGetTaskInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActPictureScrollGetTaskInfo::num() const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollGetTaskInfo.Num)
  return num_;
}
inline void TActPictureScrollGetTaskInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActPictureScrollGetTaskInfo.Num)
}

// -------------------------------------------------------------------

// TActPictureScrollGetTaskRewardReq

// optional uint32 TaskId = 1;
inline bool TActPictureScrollGetTaskRewardReq::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActPictureScrollGetTaskRewardReq::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActPictureScrollGetTaskRewardReq::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActPictureScrollGetTaskRewardReq::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 TActPictureScrollGetTaskRewardReq::taskid() const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollGetTaskRewardReq.TaskId)
  return taskid_;
}
inline void TActPictureScrollGetTaskRewardReq::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActPictureScrollGetTaskRewardReq.TaskId)
}

// -------------------------------------------------------------------

// TActPictureScrollGetTaskRewardRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActPictureScrollGetTaskRewardRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActPictureScrollGetTaskRewardRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActPictureScrollGetTaskRewardRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollGetTaskRewardRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActPictureScrollGetTaskRewardRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActPictureScrollGetTaskRewardRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActPictureScrollGetTaskRewardRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActPictureScrollGetTaskRewardRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActPictureScrollGetTaskRewardRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActPictureScrollGetTaskRewardRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActPictureScrollGetTaskRewardRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActPictureScrollGetTaskRewardRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActPictureScrollLotteryReq

// optional uint32 DrawNum = 1;
inline bool TActPictureScrollLotteryReq::has_drawnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActPictureScrollLotteryReq::set_has_drawnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActPictureScrollLotteryReq::clear_has_drawnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActPictureScrollLotteryReq::clear_drawnum() {
  drawnum_ = 0u;
  clear_has_drawnum();
}
inline ::google::protobuf::uint32 TActPictureScrollLotteryReq::drawnum() const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollLotteryReq.DrawNum)
  return drawnum_;
}
inline void TActPictureScrollLotteryReq::set_drawnum(::google::protobuf::uint32 value) {
  set_has_drawnum();
  drawnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActPictureScrollLotteryReq.DrawNum)
}

// -------------------------------------------------------------------

// TActPictureScrollLotteryRsp

// optional uint32 Id = 1;
inline bool TActPictureScrollLotteryRsp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActPictureScrollLotteryRsp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActPictureScrollLotteryRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActPictureScrollLotteryRsp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActPictureScrollLotteryRsp::id() const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollLotteryRsp.Id)
  return id_;
}
inline void TActPictureScrollLotteryRsp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActPictureScrollLotteryRsp.Id)
}

// repeated .pb.TCommonReward ArrReward = 2;
inline int TActPictureScrollLotteryRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActPictureScrollLotteryRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActPictureScrollLotteryRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollLotteryRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActPictureScrollLotteryRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActPictureScrollLotteryRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActPictureScrollLotteryRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActPictureScrollLotteryRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActPictureScrollLotteryRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActPictureScrollLotteryRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActPictureScrollLotteryRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActPictureScrollLotteryRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActPictureScrollTransformPropsReq

// optional uint32 Num = 1;
inline bool TActPictureScrollTransformPropsReq::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActPictureScrollTransformPropsReq::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActPictureScrollTransformPropsReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActPictureScrollTransformPropsReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActPictureScrollTransformPropsReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollTransformPropsReq.Num)
  return num_;
}
inline void TActPictureScrollTransformPropsReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActPictureScrollTransformPropsReq.Num)
}

// -------------------------------------------------------------------

// TActPictureScrollTransformPropsRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActPictureScrollTransformPropsRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActPictureScrollTransformPropsRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActPictureScrollTransformPropsRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollTransformPropsRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActPictureScrollTransformPropsRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActPictureScrollTransformPropsRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActPictureScrollTransformPropsRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActPictureScrollTransformPropsRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActPictureScrollTransformPropsRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActPictureScrollTransformPropsRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActPictureScrollTransformPropsRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActPictureScrollTransformPropsRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActPictureScrollNotify

// repeated .pb.TActPictureScrollGetTaskInfo ArrTaskInfo = 1;
inline int TActPictureScrollNotify::arrtaskinfo_size() const {
  return arrtaskinfo_.size();
}
inline void TActPictureScrollNotify::clear_arrtaskinfo() {
  arrtaskinfo_.Clear();
}
inline const ::pb::TActPictureScrollGetTaskInfo& TActPictureScrollNotify::arrtaskinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActPictureScrollNotify.ArrTaskInfo)
  return arrtaskinfo_.Get(index);
}
inline ::pb::TActPictureScrollGetTaskInfo* TActPictureScrollNotify::mutable_arrtaskinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActPictureScrollNotify.ArrTaskInfo)
  return arrtaskinfo_.Mutable(index);
}
inline ::pb::TActPictureScrollGetTaskInfo* TActPictureScrollNotify::add_arrtaskinfo() {
  // @@protoc_insertion_point(field_add:pb.TActPictureScrollNotify.ArrTaskInfo)
  return arrtaskinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollGetTaskInfo >&
TActPictureScrollNotify::arrtaskinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActPictureScrollNotify.ArrTaskInfo)
  return arrtaskinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActPictureScrollGetTaskInfo >*
TActPictureScrollNotify::mutable_arrtaskinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActPictureScrollNotify.ArrTaskInfo)
  return &arrtaskinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActPictureScroll_2eproto__INCLUDED
