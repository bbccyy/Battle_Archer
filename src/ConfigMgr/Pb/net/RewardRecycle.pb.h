// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/RewardRecycle.proto

#ifndef PROTOBUF_net_2fRewardRecycle_2eproto__INCLUDED
#define PROTOBUF_net_2fRewardRecycle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fRewardRecycle_2eproto();
void protobuf_AssignDesc_net_2fRewardRecycle_2eproto();
void protobuf_ShutdownFile_net_2fRewardRecycle_2eproto();

class TRewardRecycleInfo;
class TRewardRecycleGetRecycleInfoArrRsp;
class TRewardRecycleDoRecycleReq;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TRewardRecycleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RewardRecycle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRewardRecycleInfo : public ::google::protobuf::Message {
 public:
  TRewardRecycleInfo();
  virtual ~TRewardRecycleInfo();

  TRewardRecycleInfo(const TRewardRecycleInfo& from);

  inline TRewardRecycleInfo& operator=(const TRewardRecycleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRewardRecycleInfo& default_instance();

  void Swap(TRewardRecycleInfo* other);

  // implements Message ----------------------------------------------

  TRewardRecycleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRewardRecycleInfo& from);
  void MergeFrom(const TRewardRecycleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 RecycleId = 1;
  inline bool has_recycleid() const;
  inline void clear_recycleid();
  static const int kRecycleIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRewardRecycleInfo</name>
  	<Function>
  		<name>recycleid</name>
  		<replaceName>RecycleId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recycleid</name>
  		<replaceName>RecycleId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recycleid</name>
  		<replaceName>RecycleId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 recycleid() const;
  inline void set_recycleid(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward RewardArr = 2;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRewardRecycleInfo</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // required uint64 RecycleTime = 3;
  inline bool has_recycletime() const;
  inline void clear_recycletime();
  static const int kRecycleTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TRewardRecycleInfo</name>
  	<Function>
  		<name>recycletime</name>
  		<replaceName>RecycleTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recycletime</name>
  		<replaceName>RecycleTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recycletime</name>
  		<replaceName>RecycleTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recycletime() const;
  inline void set_recycletime(::google::protobuf::uint64 value);

  // required uint32 RecycleRound = 4;
  inline bool has_recycleround() const;
  inline void clear_recycleround();
  static const int kRecycleRoundFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TRewardRecycleInfo</name>
  	<Function>
  		<name>recycleround</name>
  		<replaceName>RecycleRound</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recycleround</name>
  		<replaceName>RecycleRound</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recycleround</name>
  		<replaceName>RecycleRound</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 recycleround() const;
  inline void set_recycleround(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TRewardRecycleInfo)
 private:
  inline void set_has_recycleid();
  inline void clear_has_recycleid();
  inline void set_has_recycletime();
  inline void clear_has_recycletime();
  inline void set_has_recycleround();
  inline void clear_has_recycleround();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 recycleid_;
  ::google::protobuf::uint32 recycleround_;
  ::google::protobuf::uint64 recycletime_;
  friend void  protobuf_AddDesc_net_2fRewardRecycle_2eproto();
  friend void protobuf_AssignDesc_net_2fRewardRecycle_2eproto();
  friend void protobuf_ShutdownFile_net_2fRewardRecycle_2eproto();

  void InitAsDefaultInstance();
  static TRewardRecycleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRewardRecycleGetRecycleInfoArrRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RewardRecycle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRewardRecycleGetRecycleInfoArrRsp : public ::google::protobuf::Message {
 public:
  TRewardRecycleGetRecycleInfoArrRsp();
  virtual ~TRewardRecycleGetRecycleInfoArrRsp();

  TRewardRecycleGetRecycleInfoArrRsp(const TRewardRecycleGetRecycleInfoArrRsp& from);

  inline TRewardRecycleGetRecycleInfoArrRsp& operator=(const TRewardRecycleGetRecycleInfoArrRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRewardRecycleGetRecycleInfoArrRsp& default_instance();

  void Swap(TRewardRecycleGetRecycleInfoArrRsp* other);

  // implements Message ----------------------------------------------

  TRewardRecycleGetRecycleInfoArrRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRewardRecycleGetRecycleInfoArrRsp& from);
  void MergeFrom(const TRewardRecycleGetRecycleInfoArrRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TRewardRecycleInfo RecycleInfoArr = 1;
  inline int recycleinfoarr_size() const;
  inline void clear_recycleinfoarr();
  static const int kRecycleInfoArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRewardRecycleGetRecycleInfoArrRsp</name>
  	<Function>
  		<name>recycleinfoarr</name>
  		<replaceName>RecycleInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recycleinfoarr</name>
  		<replaceName>RecycleInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recycleinfoarr</name>
  		<replaceName>RecycleInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recycleinfoarr</name>
  		<replaceName>RecycleInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recycleinfoarr_size</name>
  		<replaceName>RecycleInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRewardRecycleInfo& recycleinfoarr(int index) const;
  inline ::pb::TRewardRecycleInfo* mutable_recycleinfoarr(int index);
  inline ::pb::TRewardRecycleInfo* add_recycleinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TRewardRecycleInfo >&
      recycleinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TRewardRecycleInfo >*
      mutable_recycleinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TRewardRecycleGetRecycleInfoArrRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TRewardRecycleInfo > recycleinfoarr_;
  friend void  protobuf_AddDesc_net_2fRewardRecycle_2eproto();
  friend void protobuf_AssignDesc_net_2fRewardRecycle_2eproto();
  friend void protobuf_ShutdownFile_net_2fRewardRecycle_2eproto();

  void InitAsDefaultInstance();
  static TRewardRecycleGetRecycleInfoArrRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRewardRecycleDoRecycleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RewardRecycle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRewardRecycleDoRecycleReq : public ::google::protobuf::Message {
 public:
  TRewardRecycleDoRecycleReq();
  virtual ~TRewardRecycleDoRecycleReq();

  TRewardRecycleDoRecycleReq(const TRewardRecycleDoRecycleReq& from);

  inline TRewardRecycleDoRecycleReq& operator=(const TRewardRecycleDoRecycleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRewardRecycleDoRecycleReq& default_instance();

  void Swap(TRewardRecycleDoRecycleReq* other);

  // implements Message ----------------------------------------------

  TRewardRecycleDoRecycleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRewardRecycleDoRecycleReq& from);
  void MergeFrom(const TRewardRecycleDoRecycleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 RecycleId = 1;
  inline bool has_recycleid() const;
  inline void clear_recycleid();
  static const int kRecycleIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRewardRecycleDoRecycleReq</name>
  	<Function>
  		<name>recycleid</name>
  		<replaceName>RecycleId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recycleid</name>
  		<replaceName>RecycleId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recycleid</name>
  		<replaceName>RecycleId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 recycleid() const;
  inline void set_recycleid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TRewardRecycleDoRecycleReq)
 private:
  inline void set_has_recycleid();
  inline void clear_has_recycleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 recycleid_;
  friend void  protobuf_AddDesc_net_2fRewardRecycle_2eproto();
  friend void protobuf_AssignDesc_net_2fRewardRecycle_2eproto();
  friend void protobuf_ShutdownFile_net_2fRewardRecycle_2eproto();

  void InitAsDefaultInstance();
  static TRewardRecycleDoRecycleReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TRewardRecycleInfo

// required uint32 RecycleId = 1;
inline bool TRewardRecycleInfo::has_recycleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRewardRecycleInfo::set_has_recycleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRewardRecycleInfo::clear_has_recycleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRewardRecycleInfo::clear_recycleid() {
  recycleid_ = 0u;
  clear_has_recycleid();
}
inline ::google::protobuf::uint32 TRewardRecycleInfo::recycleid() const {
  // @@protoc_insertion_point(field_get:pb.TRewardRecycleInfo.RecycleId)
  return recycleid_;
}
inline void TRewardRecycleInfo::set_recycleid(::google::protobuf::uint32 value) {
  set_has_recycleid();
  recycleid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRewardRecycleInfo.RecycleId)
}

// repeated .pb.TCommonReward RewardArr = 2;
inline int TRewardRecycleInfo::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TRewardRecycleInfo::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TRewardRecycleInfo::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TRewardRecycleInfo.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TRewardRecycleInfo::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TRewardRecycleInfo.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TRewardRecycleInfo::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TRewardRecycleInfo.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TRewardRecycleInfo::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TRewardRecycleInfo.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TRewardRecycleInfo::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TRewardRecycleInfo.RewardArr)
  return &rewardarr_;
}

// required uint64 RecycleTime = 3;
inline bool TRewardRecycleInfo::has_recycletime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TRewardRecycleInfo::set_has_recycletime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TRewardRecycleInfo::clear_has_recycletime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TRewardRecycleInfo::clear_recycletime() {
  recycletime_ = GOOGLE_ULONGLONG(0);
  clear_has_recycletime();
}
inline ::google::protobuf::uint64 TRewardRecycleInfo::recycletime() const {
  // @@protoc_insertion_point(field_get:pb.TRewardRecycleInfo.RecycleTime)
  return recycletime_;
}
inline void TRewardRecycleInfo::set_recycletime(::google::protobuf::uint64 value) {
  set_has_recycletime();
  recycletime_ = value;
  // @@protoc_insertion_point(field_set:pb.TRewardRecycleInfo.RecycleTime)
}

// required uint32 RecycleRound = 4;
inline bool TRewardRecycleInfo::has_recycleround() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TRewardRecycleInfo::set_has_recycleround() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TRewardRecycleInfo::clear_has_recycleround() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TRewardRecycleInfo::clear_recycleround() {
  recycleround_ = 0u;
  clear_has_recycleround();
}
inline ::google::protobuf::uint32 TRewardRecycleInfo::recycleround() const {
  // @@protoc_insertion_point(field_get:pb.TRewardRecycleInfo.RecycleRound)
  return recycleround_;
}
inline void TRewardRecycleInfo::set_recycleround(::google::protobuf::uint32 value) {
  set_has_recycleround();
  recycleround_ = value;
  // @@protoc_insertion_point(field_set:pb.TRewardRecycleInfo.RecycleRound)
}

// -------------------------------------------------------------------

// TRewardRecycleGetRecycleInfoArrRsp

// repeated .pb.TRewardRecycleInfo RecycleInfoArr = 1;
inline int TRewardRecycleGetRecycleInfoArrRsp::recycleinfoarr_size() const {
  return recycleinfoarr_.size();
}
inline void TRewardRecycleGetRecycleInfoArrRsp::clear_recycleinfoarr() {
  recycleinfoarr_.Clear();
}
inline const ::pb::TRewardRecycleInfo& TRewardRecycleGetRecycleInfoArrRsp::recycleinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TRewardRecycleGetRecycleInfoArrRsp.RecycleInfoArr)
  return recycleinfoarr_.Get(index);
}
inline ::pb::TRewardRecycleInfo* TRewardRecycleGetRecycleInfoArrRsp::mutable_recycleinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TRewardRecycleGetRecycleInfoArrRsp.RecycleInfoArr)
  return recycleinfoarr_.Mutable(index);
}
inline ::pb::TRewardRecycleInfo* TRewardRecycleGetRecycleInfoArrRsp::add_recycleinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TRewardRecycleGetRecycleInfoArrRsp.RecycleInfoArr)
  return recycleinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TRewardRecycleInfo >&
TRewardRecycleGetRecycleInfoArrRsp::recycleinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TRewardRecycleGetRecycleInfoArrRsp.RecycleInfoArr)
  return recycleinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TRewardRecycleInfo >*
TRewardRecycleGetRecycleInfoArrRsp::mutable_recycleinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TRewardRecycleGetRecycleInfoArrRsp.RecycleInfoArr)
  return &recycleinfoarr_;
}

// -------------------------------------------------------------------

// TRewardRecycleDoRecycleReq

// required uint32 RecycleId = 1;
inline bool TRewardRecycleDoRecycleReq::has_recycleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRewardRecycleDoRecycleReq::set_has_recycleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRewardRecycleDoRecycleReq::clear_has_recycleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRewardRecycleDoRecycleReq::clear_recycleid() {
  recycleid_ = 0u;
  clear_has_recycleid();
}
inline ::google::protobuf::uint32 TRewardRecycleDoRecycleReq::recycleid() const {
  // @@protoc_insertion_point(field_get:pb.TRewardRecycleDoRecycleReq.RecycleId)
  return recycleid_;
}
inline void TRewardRecycleDoRecycleReq::set_recycleid(::google::protobuf::uint32 value) {
  set_has_recycleid();
  recycleid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRewardRecycleDoRecycleReq.RecycleId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fRewardRecycle_2eproto__INCLUDED
