// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActImperialWar.proto

#ifndef PROTOBUF_net_2fActImperialWar_2eproto__INCLUDED
#define PROTOBUF_net_2fActImperialWar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

class TActImperialWarUserInfoRsp;
class TActImperialWarGetViewRsp;
class TActImperialWarGetInfoRsp;
class TActImperialWarTargetRewardReq;
class TActImperialWarGetTodayRankRsp;
class TActImperialWarGetTotalRankRsp;
class TActImperialWarGetWarInfoRsp;
class TActImperialWarLoveRsp;
class TActImperialWarViewInfo;
class TActImperialWarDailyScoreInfo;
class TActImperialWarTaskCount;
class TActImperialWarTaskInfo;
class TActImperialWarTargetReward;
class TActImperialWarDetailRankInfo;
class TActImperialWarCreateReq;
class TActImperialWarCreateRsp;
class TActImperialWarTeamInfo;
class TActImperialWarGetBattleRetReq;
class TActImperialWarGetBattleRetRsp;
class TActImperialWarEnterWithUserInfoReq;
class TActImperialWarGetBattleScoreReq;
class TActImperialWarGetBattleScoreRsp;
class TActImperialWarBattleInfo;
class TActImperialWarBattleTeamInfo;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActImperialWarUserInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarUserInfoRsp : public ::google::protobuf::Message {
 public:
  TActImperialWarUserInfoRsp();
  virtual ~TActImperialWarUserInfoRsp();

  TActImperialWarUserInfoRsp(const TActImperialWarUserInfoRsp& from);

  inline TActImperialWarUserInfoRsp& operator=(const TActImperialWarUserInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarUserInfoRsp& default_instance();

  void Swap(TActImperialWarUserInfoRsp* other);

  // implements Message ----------------------------------------------

  TActImperialWarUserInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarUserInfoRsp& from);
  void MergeFrom(const TActImperialWarUserInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarUserInfoRsp</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 TotalScore = 2;
  inline bool has_totalscore() const;
  inline void clear_totalscore();
  static const int kTotalScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarUserInfoRsp</name>
  	<Function>
  		<name>totalscore</name>
  		<replaceName>TotalScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalscore</name>
  		<replaceName>TotalScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalscore</name>
  		<replaceName>TotalScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 totalscore() const;
  inline void set_totalscore(::google::protobuf::uint32 value);

  // optional uint32 LoveTimes = 3;
  inline bool has_lovetimes() const;
  inline void clear_lovetimes();
  static const int kLoveTimesFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarUserInfoRsp</name>
  	<Function>
  		<name>lovetimes</name>
  		<replaceName>LoveTimes</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lovetimes</name>
  		<replaceName>LoveTimes</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lovetimes</name>
  		<replaceName>LoveTimes</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 lovetimes() const;
  inline void set_lovetimes(::google::protobuf::uint32 value);

  // repeated .pb.TActImperialWarTaskCount ArrTaskCount = 4;
  inline int arrtaskcount_size() const;
  inline void clear_arrtaskcount();
  static const int kArrTaskCountFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarUserInfoRsp</name>
  	<Function>
  		<name>arrtaskcount</name>
  		<replaceName>ArrTaskCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtaskcount</name>
  		<replaceName>ArrTaskCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtaskcount</name>
  		<replaceName>ArrTaskCount</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtaskcount</name>
  		<replaceName>ArrTaskCount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtaskcount_size</name>
  		<replaceName>ArrTaskCount</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActImperialWarTaskCount& arrtaskcount(int index) const;
  inline ::pb::TActImperialWarTaskCount* mutable_arrtaskcount(int index);
  inline ::pb::TActImperialWarTaskCount* add_arrtaskcount();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskCount >&
      arrtaskcount() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskCount >*
      mutable_arrtaskcount();

  // repeated .pb.TActImperialWarTaskInfo ArrTask = 5;
  inline int arrtask_size() const;
  inline void clear_arrtask();
  static const int kArrTaskFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarUserInfoRsp</name>
  	<Function>
  		<name>arrtask</name>
  		<replaceName>ArrTask</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtask</name>
  		<replaceName>ArrTask</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtask</name>
  		<replaceName>ArrTask</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtask</name>
  		<replaceName>ArrTask</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtask_size</name>
  		<replaceName>ArrTask</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActImperialWarTaskInfo& arrtask(int index) const;
  inline ::pb::TActImperialWarTaskInfo* mutable_arrtask(int index);
  inline ::pb::TActImperialWarTaskInfo* add_arrtask();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskInfo >&
      arrtask() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskInfo >*
      mutable_arrtask();

  // repeated .pb.TActImperialWarTargetReward ArrTargetReward = 6;
  inline int arrtargetreward_size() const;
  inline void clear_arrtargetreward();
  static const int kArrTargetRewardFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarUserInfoRsp</name>
  	<Function>
  		<name>arrtargetreward</name>
  		<replaceName>ArrTargetReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtargetreward</name>
  		<replaceName>ArrTargetReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtargetreward</name>
  		<replaceName>ArrTargetReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtargetreward</name>
  		<replaceName>ArrTargetReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtargetreward_size</name>
  		<replaceName>ArrTargetReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActImperialWarTargetReward& arrtargetreward(int index) const;
  inline ::pb::TActImperialWarTargetReward* mutable_arrtargetreward(int index);
  inline ::pb::TActImperialWarTargetReward* add_arrtargetreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTargetReward >&
      arrtargetreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTargetReward >*
      mutable_arrtargetreward();

  // optional uint32 Status = 7;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarUserInfoRsp</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional uint32 TeamId = 8;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarUserInfoRsp</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarUserInfoRsp)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_totalscore();
  inline void clear_has_totalscore();
  inline void set_has_lovetimes();
  inline void clear_has_lovetimes();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 totalscore_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskCount > arrtaskcount_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskInfo > arrtask_;
  ::google::protobuf::uint32 lovetimes_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTargetReward > arrtargetreward_;
  ::google::protobuf::uint32 teamid_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarUserInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarGetViewRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarGetViewRsp : public ::google::protobuf::Message {
 public:
  TActImperialWarGetViewRsp();
  virtual ~TActImperialWarGetViewRsp();

  TActImperialWarGetViewRsp(const TActImperialWarGetViewRsp& from);

  inline TActImperialWarGetViewRsp& operator=(const TActImperialWarGetViewRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarGetViewRsp& default_instance();

  void Swap(TActImperialWarGetViewRsp* other);

  // implements Message ----------------------------------------------

  TActImperialWarGetViewRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarGetViewRsp& from);
  void MergeFrom(const TActImperialWarGetViewRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TActImperialWarViewInfo LTeam = 1;
  inline bool has_lteam() const;
  inline void clear_lteam();
  static const int kLTeamFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetViewRsp</name>
  	<Function>
  		<name>lteam</name>
  		<replaceName>LTeam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lteam</name>
  		<replaceName>LTeam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_lteam</name>
  		<replaceName>LTeam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lteam</name>
  		<replaceName>LTeam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActImperialWarViewInfo& lteam() const;
  inline ::pb::TActImperialWarViewInfo* mutable_lteam();
  inline ::pb::TActImperialWarViewInfo* release_lteam();
  inline void set_allocated_lteam(::pb::TActImperialWarViewInfo* lteam);

  // optional .pb.TActImperialWarViewInfo RTeam = 2;
  inline bool has_rteam() const;
  inline void clear_rteam();
  static const int kRTeamFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetViewRsp</name>
  	<Function>
  		<name>rteam</name>
  		<replaceName>RTeam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rteam</name>
  		<replaceName>RTeam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_rteam</name>
  		<replaceName>RTeam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rteam</name>
  		<replaceName>RTeam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActImperialWarViewInfo& rteam() const;
  inline ::pb::TActImperialWarViewInfo* mutable_rteam();
  inline ::pb::TActImperialWarViewInfo* release_rteam();
  inline void set_allocated_rteam(::pb::TActImperialWarViewInfo* rteam);

  // optional .pb.TUserSimpleInfo UserData = 3;
  inline bool has_userdata() const;
  inline void clear_userdata();
  static const int kUserDataFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetViewRsp</name>
  	<Function>
  		<name>userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userdata() const;
  inline ::pb::TUserSimpleInfo* mutable_userdata();
  inline ::pb::TUserSimpleInfo* release_userdata();
  inline void set_allocated_userdata(::pb::TUserSimpleInfo* userdata);

  // optional uint32 MvpScore = 4;
  inline bool has_mvpscore() const;
  inline void clear_mvpscore();
  static const int kMvpScoreFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetViewRsp</name>
  	<Function>
  		<name>mvpscore</name>
  		<replaceName>MvpScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mvpscore</name>
  		<replaceName>MvpScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mvpscore</name>
  		<replaceName>MvpScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mvpscore() const;
  inline void set_mvpscore(::google::protobuf::uint32 value);

  // repeated .pb.TActImperialWarDailyScoreInfo DailyScore = 5;
  inline int dailyscore_size() const;
  inline void clear_dailyscore();
  static const int kDailyScoreFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetViewRsp</name>
  	<Function>
  		<name>dailyscore</name>
  		<replaceName>DailyScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_dailyscore</name>
  		<replaceName>DailyScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_dailyscore</name>
  		<replaceName>DailyScore</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dailyscore</name>
  		<replaceName>DailyScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>dailyscore_size</name>
  		<replaceName>DailyScore</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActImperialWarDailyScoreInfo& dailyscore(int index) const;
  inline ::pb::TActImperialWarDailyScoreInfo* mutable_dailyscore(int index);
  inline ::pb::TActImperialWarDailyScoreInfo* add_dailyscore();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarDailyScoreInfo >&
      dailyscore() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarDailyScoreInfo >*
      mutable_dailyscore();

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarGetViewRsp)
 private:
  inline void set_has_lteam();
  inline void clear_has_lteam();
  inline void set_has_rteam();
  inline void clear_has_rteam();
  inline void set_has_userdata();
  inline void clear_has_userdata();
  inline void set_has_mvpscore();
  inline void clear_has_mvpscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TActImperialWarViewInfo* lteam_;
  ::pb::TActImperialWarViewInfo* rteam_;
  ::pb::TUserSimpleInfo* userdata_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarDailyScoreInfo > dailyscore_;
  ::google::protobuf::uint32 mvpscore_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarGetViewRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActImperialWarGetInfoRsp();
  virtual ~TActImperialWarGetInfoRsp();

  TActImperialWarGetInfoRsp(const TActImperialWarGetInfoRsp& from);

  inline TActImperialWarGetInfoRsp& operator=(const TActImperialWarGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarGetInfoRsp& default_instance();

  void Swap(TActImperialWarGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActImperialWarGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarGetInfoRsp& from);
  void MergeFrom(const TActImperialWarGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetInfoRsp</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetInfoRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // repeated .pb.TActImperialWarTaskCount ArrTaskCount = 3;
  inline int arrtaskcount_size() const;
  inline void clear_arrtaskcount();
  static const int kArrTaskCountFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetInfoRsp</name>
  	<Function>
  		<name>arrtaskcount</name>
  		<replaceName>ArrTaskCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtaskcount</name>
  		<replaceName>ArrTaskCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtaskcount</name>
  		<replaceName>ArrTaskCount</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtaskcount</name>
  		<replaceName>ArrTaskCount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtaskcount_size</name>
  		<replaceName>ArrTaskCount</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActImperialWarTaskCount& arrtaskcount(int index) const;
  inline ::pb::TActImperialWarTaskCount* mutable_arrtaskcount(int index);
  inline ::pb::TActImperialWarTaskCount* add_arrtaskcount();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskCount >&
      arrtaskcount() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskCount >*
      mutable_arrtaskcount();

  // repeated .pb.TActImperialWarTaskInfo ArrTask = 4;
  inline int arrtask_size() const;
  inline void clear_arrtask();
  static const int kArrTaskFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetInfoRsp</name>
  	<Function>
  		<name>arrtask</name>
  		<replaceName>ArrTask</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtask</name>
  		<replaceName>ArrTask</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtask</name>
  		<replaceName>ArrTask</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtask</name>
  		<replaceName>ArrTask</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtask_size</name>
  		<replaceName>ArrTask</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActImperialWarTaskInfo& arrtask(int index) const;
  inline ::pb::TActImperialWarTaskInfo* mutable_arrtask(int index);
  inline ::pb::TActImperialWarTaskInfo* add_arrtask();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskInfo >&
      arrtask() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskInfo >*
      mutable_arrtask();

  // repeated .pb.TActImperialWarTargetReward ArrTargetReward = 5;
  inline int arrtargetreward_size() const;
  inline void clear_arrtargetreward();
  static const int kArrTargetRewardFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetInfoRsp</name>
  	<Function>
  		<name>arrtargetreward</name>
  		<replaceName>ArrTargetReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtargetreward</name>
  		<replaceName>ArrTargetReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtargetreward</name>
  		<replaceName>ArrTargetReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtargetreward</name>
  		<replaceName>ArrTargetReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtargetreward_size</name>
  		<replaceName>ArrTargetReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActImperialWarTargetReward& arrtargetreward(int index) const;
  inline ::pb::TActImperialWarTargetReward* mutable_arrtargetreward(int index);
  inline ::pb::TActImperialWarTargetReward* add_arrtargetreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTargetReward >&
      arrtargetreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTargetReward >*
      mutable_arrtargetreward();

  // optional uint32 TotalScore = 6;
  inline bool has_totalscore() const;
  inline void clear_totalscore();
  static const int kTotalScoreFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetInfoRsp</name>
  	<Function>
  		<name>totalscore</name>
  		<replaceName>TotalScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalscore</name>
  		<replaceName>TotalScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalscore</name>
  		<replaceName>TotalScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 totalscore() const;
  inline void set_totalscore(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarGetInfoRsp)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_myrank();
  inline void clear_has_myrank();
  inline void set_has_totalscore();
  inline void clear_has_totalscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 myrank_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskCount > arrtaskcount_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskInfo > arrtask_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTargetReward > arrtargetreward_;
  ::google::protobuf::uint32 totalscore_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarTargetRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarTargetRewardReq : public ::google::protobuf::Message {
 public:
  TActImperialWarTargetRewardReq();
  virtual ~TActImperialWarTargetRewardReq();

  TActImperialWarTargetRewardReq(const TActImperialWarTargetRewardReq& from);

  inline TActImperialWarTargetRewardReq& operator=(const TActImperialWarTargetRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarTargetRewardReq& default_instance();

  void Swap(TActImperialWarTargetRewardReq* other);

  // implements Message ----------------------------------------------

  TActImperialWarTargetRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarTargetRewardReq& from);
  void MergeFrom(const TActImperialWarTargetRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarTargetRewardReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarTargetRewardReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarTargetRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarGetTodayRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarGetTodayRankRsp : public ::google::protobuf::Message {
 public:
  TActImperialWarGetTodayRankRsp();
  virtual ~TActImperialWarGetTodayRankRsp();

  TActImperialWarGetTodayRankRsp(const TActImperialWarGetTodayRankRsp& from);

  inline TActImperialWarGetTodayRankRsp& operator=(const TActImperialWarGetTodayRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarGetTodayRankRsp& default_instance();

  void Swap(TActImperialWarGetTodayRankRsp* other);

  // implements Message ----------------------------------------------

  TActImperialWarGetTodayRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarGetTodayRankRsp& from);
  void MergeFrom(const TActImperialWarGetTodayRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActImperialWarDetailRankInfo ArrRank = 1;
  inline int arrrank_size() const;
  inline void clear_arrrank();
  static const int kArrRankFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetTodayRankRsp</name>
  	<Function>
  		<name>arrrank</name>
  		<replaceName>ArrRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrank</name>
  		<replaceName>ArrRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrank</name>
  		<replaceName>ArrRank</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrank</name>
  		<replaceName>ArrRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrank_size</name>
  		<replaceName>ArrRank</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActImperialWarDetailRankInfo& arrrank(int index) const;
  inline ::pb::TActImperialWarDetailRankInfo* mutable_arrrank(int index);
  inline ::pb::TActImperialWarDetailRankInfo* add_arrrank();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarDetailRankInfo >&
      arrrank() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarDetailRankInfo >*
      mutable_arrrank();

  // optional uint32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetTodayRankRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarGetTodayRankRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarDetailRankInfo > arrrank_;
  ::google::protobuf::uint32 myrank_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarGetTodayRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarGetTotalRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarGetTotalRankRsp : public ::google::protobuf::Message {
 public:
  TActImperialWarGetTotalRankRsp();
  virtual ~TActImperialWarGetTotalRankRsp();

  TActImperialWarGetTotalRankRsp(const TActImperialWarGetTotalRankRsp& from);

  inline TActImperialWarGetTotalRankRsp& operator=(const TActImperialWarGetTotalRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarGetTotalRankRsp& default_instance();

  void Swap(TActImperialWarGetTotalRankRsp* other);

  // implements Message ----------------------------------------------

  TActImperialWarGetTotalRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarGetTotalRankRsp& from);
  void MergeFrom(const TActImperialWarGetTotalRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActImperialWarDetailRankInfo ArrRank = 1;
  inline int arrrank_size() const;
  inline void clear_arrrank();
  static const int kArrRankFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetTotalRankRsp</name>
  	<Function>
  		<name>arrrank</name>
  		<replaceName>ArrRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrank</name>
  		<replaceName>ArrRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrank</name>
  		<replaceName>ArrRank</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrank</name>
  		<replaceName>ArrRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrank_size</name>
  		<replaceName>ArrRank</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActImperialWarDetailRankInfo& arrrank(int index) const;
  inline ::pb::TActImperialWarDetailRankInfo* mutable_arrrank(int index);
  inline ::pb::TActImperialWarDetailRankInfo* add_arrrank();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarDetailRankInfo >&
      arrrank() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarDetailRankInfo >*
      mutable_arrrank();

  // optional uint32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetTotalRankRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarGetTotalRankRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarDetailRankInfo > arrrank_;
  ::google::protobuf::uint32 myrank_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarGetTotalRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarGetWarInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarGetWarInfoRsp : public ::google::protobuf::Message {
 public:
  TActImperialWarGetWarInfoRsp();
  virtual ~TActImperialWarGetWarInfoRsp();

  TActImperialWarGetWarInfoRsp(const TActImperialWarGetWarInfoRsp& from);

  inline TActImperialWarGetWarInfoRsp& operator=(const TActImperialWarGetWarInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarGetWarInfoRsp& default_instance();

  void Swap(TActImperialWarGetWarInfoRsp* other);

  // implements Message ----------------------------------------------

  TActImperialWarGetWarInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarGetWarInfoRsp& from);
  void MergeFrom(const TActImperialWarGetWarInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TActImperialWarViewInfo LTeam = 1;
  inline bool has_lteam() const;
  inline void clear_lteam();
  static const int kLTeamFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetWarInfoRsp</name>
  	<Function>
  		<name>lteam</name>
  		<replaceName>LTeam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lteam</name>
  		<replaceName>LTeam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_lteam</name>
  		<replaceName>LTeam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lteam</name>
  		<replaceName>LTeam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActImperialWarViewInfo& lteam() const;
  inline ::pb::TActImperialWarViewInfo* mutable_lteam();
  inline ::pb::TActImperialWarViewInfo* release_lteam();
  inline void set_allocated_lteam(::pb::TActImperialWarViewInfo* lteam);

  // optional .pb.TActImperialWarViewInfo RTeam = 2;
  inline bool has_rteam() const;
  inline void clear_rteam();
  static const int kRTeamFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetWarInfoRsp</name>
  	<Function>
  		<name>rteam</name>
  		<replaceName>RTeam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rteam</name>
  		<replaceName>RTeam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_rteam</name>
  		<replaceName>RTeam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rteam</name>
  		<replaceName>RTeam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActImperialWarViewInfo& rteam() const;
  inline ::pb::TActImperialWarViewInfo* mutable_rteam();
  inline ::pb::TActImperialWarViewInfo* release_rteam();
  inline void set_allocated_rteam(::pb::TActImperialWarViewInfo* rteam);

  // optional .pb.TUserSimpleInfo UserData = 3;
  inline bool has_userdata() const;
  inline void clear_userdata();
  static const int kUserDataFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetWarInfoRsp</name>
  	<Function>
  		<name>userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userdata() const;
  inline ::pb::TUserSimpleInfo* mutable_userdata();
  inline ::pb::TUserSimpleInfo* release_userdata();
  inline void set_allocated_userdata(::pb::TUserSimpleInfo* userdata);

  // optional uint32 Score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetWarInfoRsp</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 LoveTimes = 5;
  inline bool has_lovetimes() const;
  inline void clear_lovetimes();
  static const int kLoveTimesFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetWarInfoRsp</name>
  	<Function>
  		<name>lovetimes</name>
  		<replaceName>LoveTimes</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lovetimes</name>
  		<replaceName>LoveTimes</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lovetimes</name>
  		<replaceName>LoveTimes</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 lovetimes() const;
  inline void set_lovetimes(::google::protobuf::uint32 value);

  // optional bool CanEnter = 6;
  inline bool has_canenter() const;
  inline void clear_canenter();
  static const int kCanEnterFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetWarInfoRsp</name>
  	<Function>
  		<name>canenter</name>
  		<replaceName>CanEnter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_canenter</name>
  		<replaceName>CanEnter</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_canenter</name>
  		<replaceName>CanEnter</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool canenter() const;
  inline void set_canenter(bool value);

  // optional uint32 TotalLoveTimes = 7;
  inline bool has_totallovetimes() const;
  inline void clear_totallovetimes();
  static const int kTotalLoveTimesFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetWarInfoRsp</name>
  	<Function>
  		<name>totallovetimes</name>
  		<replaceName>TotalLoveTimes</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totallovetimes</name>
  		<replaceName>TotalLoveTimes</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totallovetimes</name>
  		<replaceName>TotalLoveTimes</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 totallovetimes() const;
  inline void set_totallovetimes(::google::protobuf::uint32 value);

  // optional uint32 BattleScore = 8;
  inline bool has_battlescore() const;
  inline void clear_battlescore();
  static const int kBattleScoreFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetWarInfoRsp</name>
  	<Function>
  		<name>battlescore</name>
  		<replaceName>BattleScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlescore</name>
  		<replaceName>BattleScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlescore</name>
  		<replaceName>BattleScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battlescore() const;
  inline void set_battlescore(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarGetWarInfoRsp)
 private:
  inline void set_has_lteam();
  inline void clear_has_lteam();
  inline void set_has_rteam();
  inline void clear_has_rteam();
  inline void set_has_userdata();
  inline void clear_has_userdata();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_lovetimes();
  inline void clear_has_lovetimes();
  inline void set_has_canenter();
  inline void clear_has_canenter();
  inline void set_has_totallovetimes();
  inline void clear_has_totallovetimes();
  inline void set_has_battlescore();
  inline void clear_has_battlescore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TActImperialWarViewInfo* lteam_;
  ::pb::TActImperialWarViewInfo* rteam_;
  ::pb::TUserSimpleInfo* userdata_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 lovetimes_;
  bool canenter_;
  ::google::protobuf::uint32 totallovetimes_;
  ::google::protobuf::uint32 battlescore_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarGetWarInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarLoveRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarLoveRsp : public ::google::protobuf::Message {
 public:
  TActImperialWarLoveRsp();
  virtual ~TActImperialWarLoveRsp();

  TActImperialWarLoveRsp(const TActImperialWarLoveRsp& from);

  inline TActImperialWarLoveRsp& operator=(const TActImperialWarLoveRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarLoveRsp& default_instance();

  void Swap(TActImperialWarLoveRsp* other);

  // implements Message ----------------------------------------------

  TActImperialWarLoveRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarLoveRsp& from);
  void MergeFrom(const TActImperialWarLoveRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TotalLoveTimes = 1;
  inline bool has_totallovetimes() const;
  inline void clear_totallovetimes();
  static const int kTotalLoveTimesFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarLoveRsp</name>
  	<Function>
  		<name>totallovetimes</name>
  		<replaceName>TotalLoveTimes</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totallovetimes</name>
  		<replaceName>TotalLoveTimes</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totallovetimes</name>
  		<replaceName>TotalLoveTimes</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 totallovetimes() const;
  inline void set_totallovetimes(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarLoveRsp)
 private:
  inline void set_has_totallovetimes();
  inline void clear_has_totallovetimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 totallovetimes_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarLoveRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarViewInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarViewInfo : public ::google::protobuf::Message {
 public:
  TActImperialWarViewInfo();
  virtual ~TActImperialWarViewInfo();

  TActImperialWarViewInfo(const TActImperialWarViewInfo& from);

  inline TActImperialWarViewInfo& operator=(const TActImperialWarViewInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarViewInfo& default_instance();

  void Swap(TActImperialWarViewInfo* other);

  // implements Message ----------------------------------------------

  TActImperialWarViewInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarViewInfo& from);
  void MergeFrom(const TActImperialWarViewInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarViewInfo</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // repeated string ArrServer = 2;
  inline int arrserver_size() const;
  inline void clear_arrserver();
  static const int kArrServerFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarViewInfo</name>
  	<Function>
  		<name>arrserver</name>
  		<replaceName>ArrServer</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrserver</name>
  		<replaceName>ArrServer</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrserver</name>
  		<replaceName>ArrServer</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrserver</name>
  		<replaceName>ArrServer</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrserver_size</name>
  		<replaceName>ArrServer</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& arrserver(int index) const;
  inline ::std::string* mutable_arrserver(int index);
  inline void set_arrserver(int index, const ::std::string& value);
  inline void set_arrserver(int index, const char* value);
  inline void set_arrserver(int index, const char* value, size_t size);
  inline ::std::string* add_arrserver();
  inline void add_arrserver(const ::std::string& value);
  inline void add_arrserver(const char* value);
  inline void add_arrserver(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& arrserver() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_arrserver();

  // optional uint32 BattleRet = 3;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarViewInfo</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleret() const;
  inline void set_battleret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarViewInfo)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_battleret();
  inline void clear_has_battleret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> arrserver_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 battleret_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarViewInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarDailyScoreInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarDailyScoreInfo : public ::google::protobuf::Message {
 public:
  TActImperialWarDailyScoreInfo();
  virtual ~TActImperialWarDailyScoreInfo();

  TActImperialWarDailyScoreInfo(const TActImperialWarDailyScoreInfo& from);

  inline TActImperialWarDailyScoreInfo& operator=(const TActImperialWarDailyScoreInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarDailyScoreInfo& default_instance();

  void Swap(TActImperialWarDailyScoreInfo* other);

  // implements Message ----------------------------------------------

  TActImperialWarDailyScoreInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarDailyScoreInfo& from);
  void MergeFrom(const TActImperialWarDailyScoreInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarDailyScoreInfo</name>
  	<Function>
  		<name>day</name>
  		<replaceName>Day</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_day</name>
  		<replaceName>Day</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_day</name>
  		<replaceName>Day</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // optional uint32 LScore = 2;
  inline bool has_lscore() const;
  inline void clear_lscore();
  static const int kLScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarDailyScoreInfo</name>
  	<Function>
  		<name>lscore</name>
  		<replaceName>LScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lscore</name>
  		<replaceName>LScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lscore</name>
  		<replaceName>LScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 lscore() const;
  inline void set_lscore(::google::protobuf::uint32 value);

  // optional uint32 RScore = 3;
  inline bool has_rscore() const;
  inline void clear_rscore();
  static const int kRScoreFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarDailyScoreInfo</name>
  	<Function>
  		<name>rscore</name>
  		<replaceName>RScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rscore</name>
  		<replaceName>RScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rscore</name>
  		<replaceName>RScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rscore() const;
  inline void set_rscore(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarDailyScoreInfo)
 private:
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_lscore();
  inline void clear_has_lscore();
  inline void set_has_rscore();
  inline void clear_has_rscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 day_;
  ::google::protobuf::uint32 lscore_;
  ::google::protobuf::uint32 rscore_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarDailyScoreInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarTaskCount</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarTaskCount : public ::google::protobuf::Message {
 public:
  TActImperialWarTaskCount();
  virtual ~TActImperialWarTaskCount();

  TActImperialWarTaskCount(const TActImperialWarTaskCount& from);

  inline TActImperialWarTaskCount& operator=(const TActImperialWarTaskCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarTaskCount& default_instance();

  void Swap(TActImperialWarTaskCount* other);

  // implements Message ----------------------------------------------

  TActImperialWarTaskCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarTaskCount& from);
  void MergeFrom(const TActImperialWarTaskCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskType = 1;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTaskTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarTaskCount</name>
  	<Function>
  		<name>tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tasktype() const;
  inline void set_tasktype(::google::protobuf::uint32 value);

  // optional uint32 Count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarTaskCount</name>
  	<Function>
  		<name>count</name>
  		<replaceName>Count</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_count</name>
  		<replaceName>Count</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_count</name>
  		<replaceName>Count</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarTaskCount)
 private:
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tasktype_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarTaskCount* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarTaskInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarTaskInfo : public ::google::protobuf::Message {
 public:
  TActImperialWarTaskInfo();
  virtual ~TActImperialWarTaskInfo();

  TActImperialWarTaskInfo(const TActImperialWarTaskInfo& from);

  inline TActImperialWarTaskInfo& operator=(const TActImperialWarTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarTaskInfo& default_instance();

  void Swap(TActImperialWarTaskInfo* other);

  // implements Message ----------------------------------------------

  TActImperialWarTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarTaskInfo& from);
  void MergeFrom(const TActImperialWarTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskId = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarTaskInfo</name>
  	<Function>
  		<name>taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // optional uint64 FinishTime = 2;
  inline bool has_finishtime() const;
  inline void clear_finishtime();
  static const int kFinishTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarTaskInfo</name>
  	<Function>
  		<name>finishtime</name>
  		<replaceName>FinishTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_finishtime</name>
  		<replaceName>FinishTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_finishtime</name>
  		<replaceName>FinishTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 finishtime() const;
  inline void set_finishtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarTaskInfo)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_finishtime();
  inline void clear_has_finishtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 finishtime_;
  ::google::protobuf::uint32 taskid_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarTargetReward</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarTargetReward : public ::google::protobuf::Message {
 public:
  TActImperialWarTargetReward();
  virtual ~TActImperialWarTargetReward();

  TActImperialWarTargetReward(const TActImperialWarTargetReward& from);

  inline TActImperialWarTargetReward& operator=(const TActImperialWarTargetReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarTargetReward& default_instance();

  void Swap(TActImperialWarTargetReward* other);

  // implements Message ----------------------------------------------

  TActImperialWarTargetReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarTargetReward& from);
  void MergeFrom(const TActImperialWarTargetReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarTargetReward</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 RewardTime = 2;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarTargetReward</name>
  	<Function>
  		<name>rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarTargetReward)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rewardtime_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarTargetReward* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarDetailRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarDetailRankInfo : public ::google::protobuf::Message {
 public:
  TActImperialWarDetailRankInfo();
  virtual ~TActImperialWarDetailRankInfo();

  TActImperialWarDetailRankInfo(const TActImperialWarDetailRankInfo& from);

  inline TActImperialWarDetailRankInfo& operator=(const TActImperialWarDetailRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarDetailRankInfo& default_instance();

  void Swap(TActImperialWarDetailRankInfo* other);

  // implements Message ----------------------------------------------

  TActImperialWarDetailRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarDetailRankInfo& from);
  void MergeFrom(const TActImperialWarDetailRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserData = 1;
  inline bool has_userdata() const;
  inline void clear_userdata();
  static const int kUserDataFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarDetailRankInfo</name>
  	<Function>
  		<name>userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userdata() const;
  inline ::pb::TUserSimpleInfo* mutable_userdata();
  inline ::pb::TUserSimpleInfo* release_userdata();
  inline void set_allocated_userdata(::pb::TUserSimpleInfo* userdata);

  // optional uint32 Score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarDetailRankInfo</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 Rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarDetailRankInfo</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarDetailRankInfo)
 private:
  inline void set_has_userdata();
  inline void clear_has_userdata();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userdata_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 rank_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarDetailRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarCreateReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarCreateReq : public ::google::protobuf::Message {
 public:
  TActImperialWarCreateReq();
  virtual ~TActImperialWarCreateReq();

  TActImperialWarCreateReq(const TActImperialWarCreateReq& from);

  inline TActImperialWarCreateReq& operator=(const TActImperialWarCreateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarCreateReq& default_instance();

  void Swap(TActImperialWarCreateReq* other);

  // implements Message ----------------------------------------------

  TActImperialWarCreateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarCreateReq& from);
  void MergeFrom(const TActImperialWarCreateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ServerId = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarCreateReq</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional .pb.TActImperialWarTeamInfo AtkInfo = 2;
  inline bool has_atkinfo() const;
  inline void clear_atkinfo();
  static const int kAtkInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarCreateReq</name>
  	<Function>
  		<name>atkinfo</name>
  		<replaceName>AtkInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkinfo</name>
  		<replaceName>AtkInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_atkinfo</name>
  		<replaceName>AtkInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkinfo</name>
  		<replaceName>AtkInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActImperialWarTeamInfo& atkinfo() const;
  inline ::pb::TActImperialWarTeamInfo* mutable_atkinfo();
  inline ::pb::TActImperialWarTeamInfo* release_atkinfo();
  inline void set_allocated_atkinfo(::pb::TActImperialWarTeamInfo* atkinfo);

  // optional .pb.TActImperialWarTeamInfo DefInfo = 3;
  inline bool has_definfo() const;
  inline void clear_definfo();
  static const int kDefInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarCreateReq</name>
  	<Function>
  		<name>definfo</name>
  		<replaceName>DefInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_definfo</name>
  		<replaceName>DefInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_definfo</name>
  		<replaceName>DefInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_definfo</name>
  		<replaceName>DefInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActImperialWarTeamInfo& definfo() const;
  inline ::pb::TActImperialWarTeamInfo* mutable_definfo();
  inline ::pb::TActImperialWarTeamInfo* release_definfo();
  inline void set_allocated_definfo(::pb::TActImperialWarTeamInfo* definfo);

  // optional uint64 BeginTime = 4;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarCreateReq</name>
  	<Function>
  		<name>begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 begintime() const;
  inline void set_begintime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarCreateReq)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_atkinfo();
  inline void clear_has_atkinfo();
  inline void set_has_definfo();
  inline void clear_has_definfo();
  inline void set_has_begintime();
  inline void clear_has_begintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* serverid_;
  ::pb::TActImperialWarTeamInfo* atkinfo_;
  ::pb::TActImperialWarTeamInfo* definfo_;
  ::google::protobuf::uint64 begintime_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarCreateReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarCreateRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarCreateRsp : public ::google::protobuf::Message {
 public:
  TActImperialWarCreateRsp();
  virtual ~TActImperialWarCreateRsp();

  TActImperialWarCreateRsp(const TActImperialWarCreateRsp& from);

  inline TActImperialWarCreateRsp& operator=(const TActImperialWarCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarCreateRsp& default_instance();

  void Swap(TActImperialWarCreateRsp* other);

  // implements Message ----------------------------------------------

  TActImperialWarCreateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarCreateRsp& from);
  void MergeFrom(const TActImperialWarCreateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarCreateRsp</name>
  	<Function>
  		<name>ret</name>
  		<replaceName>Ret</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ret</name>
  		<replaceName>Ret</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ret</name>
  		<replaceName>Ret</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool ret() const;
  inline void set_ret(bool value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarCreateRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool ret_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarCreateRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarTeamInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarTeamInfo : public ::google::protobuf::Message {
 public:
  TActImperialWarTeamInfo();
  virtual ~TActImperialWarTeamInfo();

  TActImperialWarTeamInfo(const TActImperialWarTeamInfo& from);

  inline TActImperialWarTeamInfo& operator=(const TActImperialWarTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarTeamInfo& default_instance();

  void Swap(TActImperialWarTeamInfo* other);

  // implements Message ----------------------------------------------

  TActImperialWarTeamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarTeamInfo& from);
  void MergeFrom(const TActImperialWarTeamInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 MasterUid = 1;
  inline bool has_masteruid() const;
  inline void clear_masteruid();
  static const int kMasterUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarTeamInfo</name>
  	<Function>
  		<name>masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 masteruid() const;
  inline void set_masteruid(::google::protobuf::uint64 value);

  // optional string MasterSid = 2;
  inline bool has_mastersid() const;
  inline void clear_mastersid();
  static const int kMasterSidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarTeamInfo</name>
  	<Function>
  		<name>mastersid</name>
  		<replaceName>MasterSid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mastersid</name>
  		<replaceName>MasterSid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mastersid</name>
  		<replaceName>MasterSid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& mastersid() const;
  inline void set_mastersid(const ::std::string& value);
  inline void set_mastersid(const char* value);
  inline void set_mastersid(const char* value, size_t size);
  inline ::std::string* mutable_mastersid();
  inline ::std::string* release_mastersid();
  inline void set_allocated_mastersid(::std::string* mastersid);

  // optional uint32 MasterScore = 3;
  inline bool has_masterscore() const;
  inline void clear_masterscore();
  static const int kMasterScoreFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarTeamInfo</name>
  	<Function>
  		<name>masterscore</name>
  		<replaceName>MasterScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_masterscore</name>
  		<replaceName>MasterScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_masterscore</name>
  		<replaceName>MasterScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 masterscore() const;
  inline void set_masterscore(::google::protobuf::uint32 value);

  // repeated string SubTeamInfo = 4;
  inline int subteaminfo_size() const;
  inline void clear_subteaminfo();
  static const int kSubTeamInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarTeamInfo</name>
  	<Function>
  		<name>subteaminfo</name>
  		<replaceName>SubTeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_subteaminfo</name>
  		<replaceName>SubTeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_subteaminfo</name>
  		<replaceName>SubTeamInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_subteaminfo</name>
  		<replaceName>SubTeamInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>subteaminfo_size</name>
  		<replaceName>SubTeamInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& subteaminfo(int index) const;
  inline ::std::string* mutable_subteaminfo(int index);
  inline void set_subteaminfo(int index, const ::std::string& value);
  inline void set_subteaminfo(int index, const char* value);
  inline void set_subteaminfo(int index, const char* value, size_t size);
  inline ::std::string* add_subteaminfo();
  inline void add_subteaminfo(const ::std::string& value);
  inline void add_subteaminfo(const char* value);
  inline void add_subteaminfo(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& subteaminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_subteaminfo();

  // optional string Name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarTeamInfo</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 Score = 6;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarTeamInfo</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // optional int32 LeftRight = 7;
  inline bool has_leftright() const;
  inline void clear_leftright();
  static const int kLeftRightFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarTeamInfo</name>
  	<Function>
  		<name>leftright</name>
  		<replaceName>LeftRight</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leftright</name>
  		<replaceName>LeftRight</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leftright</name>
  		<replaceName>LeftRight</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 leftright() const;
  inline void set_leftright(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarTeamInfo)
 private:
  inline void set_has_masteruid();
  inline void clear_has_masteruid();
  inline void set_has_mastersid();
  inline void clear_has_mastersid();
  inline void set_has_masterscore();
  inline void clear_has_masterscore();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_leftright();
  inline void clear_has_leftright();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 masteruid_;
  ::std::string* mastersid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> subteaminfo_;
  ::std::string* name_;
  ::google::protobuf::uint32 masterscore_;
  ::google::protobuf::int32 leftright_;
  ::google::protobuf::int64 score_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarTeamInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarGetBattleRetReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarGetBattleRetReq : public ::google::protobuf::Message {
 public:
  TActImperialWarGetBattleRetReq();
  virtual ~TActImperialWarGetBattleRetReq();

  TActImperialWarGetBattleRetReq(const TActImperialWarGetBattleRetReq& from);

  inline TActImperialWarGetBattleRetReq& operator=(const TActImperialWarGetBattleRetReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarGetBattleRetReq& default_instance();

  void Swap(TActImperialWarGetBattleRetReq* other);

  // implements Message ----------------------------------------------

  TActImperialWarGetBattleRetReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarGetBattleRetReq& from);
  void MergeFrom(const TActImperialWarGetBattleRetReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ServerId = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetBattleRetReq</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional uint64 MasterUid = 2;
  inline bool has_masteruid() const;
  inline void clear_masteruid();
  static const int kMasterUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetBattleRetReq</name>
  	<Function>
  		<name>masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 masteruid() const;
  inline void set_masteruid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarGetBattleRetReq)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_masteruid();
  inline void clear_has_masteruid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* serverid_;
  ::google::protobuf::uint64 masteruid_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarGetBattleRetReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarGetBattleRetRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarGetBattleRetRsp : public ::google::protobuf::Message {
 public:
  TActImperialWarGetBattleRetRsp();
  virtual ~TActImperialWarGetBattleRetRsp();

  TActImperialWarGetBattleRetRsp(const TActImperialWarGetBattleRetRsp& from);

  inline TActImperialWarGetBattleRetRsp& operator=(const TActImperialWarGetBattleRetRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarGetBattleRetRsp& default_instance();

  void Swap(TActImperialWarGetBattleRetRsp* other);

  // implements Message ----------------------------------------------

  TActImperialWarGetBattleRetRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarGetBattleRetRsp& from);
  void MergeFrom(const TActImperialWarGetBattleRetRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BattleRet = 1;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetBattleRetRsp</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleret() const;
  inline void set_battleret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarGetBattleRetRsp)
 private:
  inline void set_has_battleret();
  inline void clear_has_battleret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 battleret_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarGetBattleRetRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarEnterWithUserInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarEnterWithUserInfoReq : public ::google::protobuf::Message {
 public:
  TActImperialWarEnterWithUserInfoReq();
  virtual ~TActImperialWarEnterWithUserInfoReq();

  TActImperialWarEnterWithUserInfoReq(const TActImperialWarEnterWithUserInfoReq& from);

  inline TActImperialWarEnterWithUserInfoReq& operator=(const TActImperialWarEnterWithUserInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarEnterWithUserInfoReq& default_instance();

  void Swap(TActImperialWarEnterWithUserInfoReq* other);

  // implements Message ----------------------------------------------

  TActImperialWarEnterWithUserInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarEnterWithUserInfoReq& from);
  void MergeFrom(const TActImperialWarEnterWithUserInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarEnterWithUserInfoReq</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 My7Rank = 2;
  inline bool has_my7rank() const;
  inline void clear_my7rank();
  static const int kMy7RankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarEnterWithUserInfoReq</name>
  	<Function>
  		<name>my7rank</name>
  		<replaceName>My7Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_my7rank</name>
  		<replaceName>My7Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_my7rank</name>
  		<replaceName>My7Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 my7rank() const;
  inline void set_my7rank(::google::protobuf::uint32 value);

  // optional uint64 MasterUid = 3;
  inline bool has_masteruid() const;
  inline void clear_masteruid();
  static const int kMasterUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarEnterWithUserInfoReq</name>
  	<Function>
  		<name>masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 masteruid() const;
  inline void set_masteruid(::google::protobuf::uint64 value);

  // optional string ServerId = 4;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarEnterWithUserInfoReq</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarEnterWithUserInfoReq)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_my7rank();
  inline void clear_has_my7rank();
  inline void set_has_masteruid();
  inline void clear_has_masteruid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint64 masteruid_;
  ::std::string* serverid_;
  ::google::protobuf::uint32 my7rank_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarEnterWithUserInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarGetBattleScoreReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarGetBattleScoreReq : public ::google::protobuf::Message {
 public:
  TActImperialWarGetBattleScoreReq();
  virtual ~TActImperialWarGetBattleScoreReq();

  TActImperialWarGetBattleScoreReq(const TActImperialWarGetBattleScoreReq& from);

  inline TActImperialWarGetBattleScoreReq& operator=(const TActImperialWarGetBattleScoreReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarGetBattleScoreReq& default_instance();

  void Swap(TActImperialWarGetBattleScoreReq* other);

  // implements Message ----------------------------------------------

  TActImperialWarGetBattleScoreReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarGetBattleScoreReq& from);
  void MergeFrom(const TActImperialWarGetBattleScoreReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetBattleScoreReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetBattleScoreReq</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarGetBattleScoreReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* serverid_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarGetBattleScoreReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarGetBattleScoreRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarGetBattleScoreRsp : public ::google::protobuf::Message {
 public:
  TActImperialWarGetBattleScoreRsp();
  virtual ~TActImperialWarGetBattleScoreRsp();

  TActImperialWarGetBattleScoreRsp(const TActImperialWarGetBattleScoreRsp& from);

  inline TActImperialWarGetBattleScoreRsp& operator=(const TActImperialWarGetBattleScoreRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarGetBattleScoreRsp& default_instance();

  void Swap(TActImperialWarGetBattleScoreRsp* other);

  // implements Message ----------------------------------------------

  TActImperialWarGetBattleScoreRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarGetBattleScoreRsp& from);
  void MergeFrom(const TActImperialWarGetBattleScoreRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarGetBattleScoreRsp</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarGetBattleScoreRsp)
 private:
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 score_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarGetBattleScoreRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarBattleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarBattleInfo : public ::google::protobuf::Message {
 public:
  TActImperialWarBattleInfo();
  virtual ~TActImperialWarBattleInfo();

  TActImperialWarBattleInfo(const TActImperialWarBattleInfo& from);

  inline TActImperialWarBattleInfo& operator=(const TActImperialWarBattleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarBattleInfo& default_instance();

  void Swap(TActImperialWarBattleInfo* other);

  // implements Message ----------------------------------------------

  TActImperialWarBattleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarBattleInfo& from);
  void MergeFrom(const TActImperialWarBattleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 FieldId = 1;
  inline bool has_fieldid() const;
  inline void clear_fieldid();
  static const int kFieldIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarBattleInfo</name>
  	<Function>
  		<name>fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fieldid() const;
  inline void set_fieldid(::google::protobuf::uint64 value);

  // optional .pb.TActImperialWarBattleTeamInfo AtkInfo = 2;
  inline bool has_atkinfo() const;
  inline void clear_atkinfo();
  static const int kAtkInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarBattleInfo</name>
  	<Function>
  		<name>atkinfo</name>
  		<replaceName>AtkInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkinfo</name>
  		<replaceName>AtkInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_atkinfo</name>
  		<replaceName>AtkInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkinfo</name>
  		<replaceName>AtkInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActImperialWarBattleTeamInfo& atkinfo() const;
  inline ::pb::TActImperialWarBattleTeamInfo* mutable_atkinfo();
  inline ::pb::TActImperialWarBattleTeamInfo* release_atkinfo();
  inline void set_allocated_atkinfo(::pb::TActImperialWarBattleTeamInfo* atkinfo);

  // optional .pb.TActImperialWarBattleTeamInfo DefInfo = 3;
  inline bool has_definfo() const;
  inline void clear_definfo();
  static const int kDefInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarBattleInfo</name>
  	<Function>
  		<name>definfo</name>
  		<replaceName>DefInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_definfo</name>
  		<replaceName>DefInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_definfo</name>
  		<replaceName>DefInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_definfo</name>
  		<replaceName>DefInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActImperialWarBattleTeamInfo& definfo() const;
  inline ::pb::TActImperialWarBattleTeamInfo* mutable_definfo();
  inline ::pb::TActImperialWarBattleTeamInfo* release_definfo();
  inline void set_allocated_definfo(::pb::TActImperialWarBattleTeamInfo* definfo);

  // optional uint32 BattleRet = 4;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarBattleInfo</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleret() const;
  inline void set_battleret(::google::protobuf::uint32 value);

  // optional uint64 UpdateTime = 5;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarBattleInfo</name>
  	<Function>
  		<name>updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 updatetime() const;
  inline void set_updatetime(::google::protobuf::uint64 value);

  // optional uint64 PeriodKey = 6;
  inline bool has_periodkey() const;
  inline void clear_periodkey();
  static const int kPeriodKeyFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarBattleInfo</name>
  	<Function>
  		<name>periodkey</name>
  		<replaceName>PeriodKey</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_periodkey</name>
  		<replaceName>PeriodKey</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_periodkey</name>
  		<replaceName>PeriodKey</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 periodkey() const;
  inline void set_periodkey(::google::protobuf::uint64 value);

  // optional uint32 TeamId = 7;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarBattleInfo</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarBattleInfo)
 private:
  inline void set_has_fieldid();
  inline void clear_has_fieldid();
  inline void set_has_atkinfo();
  inline void clear_has_atkinfo();
  inline void set_has_definfo();
  inline void clear_has_definfo();
  inline void set_has_battleret();
  inline void clear_has_battleret();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_periodkey();
  inline void clear_has_periodkey();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 fieldid_;
  ::pb::TActImperialWarBattleTeamInfo* atkinfo_;
  ::pb::TActImperialWarBattleTeamInfo* definfo_;
  ::google::protobuf::uint64 updatetime_;
  ::google::protobuf::uint32 battleret_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint64 periodkey_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarBattleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActImperialWarBattleTeamInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActImperialWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActImperialWarBattleTeamInfo : public ::google::protobuf::Message {
 public:
  TActImperialWarBattleTeamInfo();
  virtual ~TActImperialWarBattleTeamInfo();

  TActImperialWarBattleTeamInfo(const TActImperialWarBattleTeamInfo& from);

  inline TActImperialWarBattleTeamInfo& operator=(const TActImperialWarBattleTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActImperialWarBattleTeamInfo& default_instance();

  void Swap(TActImperialWarBattleTeamInfo* other);

  // implements Message ----------------------------------------------

  TActImperialWarBattleTeamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActImperialWarBattleTeamInfo& from);
  void MergeFrom(const TActImperialWarBattleTeamInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 MasterUid = 1;
  inline bool has_masteruid() const;
  inline void clear_masteruid();
  static const int kMasterUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarBattleTeamInfo</name>
  	<Function>
  		<name>masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 masteruid() const;
  inline void set_masteruid(::google::protobuf::uint64 value);

  // optional string MasterSid = 2;
  inline bool has_mastersid() const;
  inline void clear_mastersid();
  static const int kMasterSidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarBattleTeamInfo</name>
  	<Function>
  		<name>mastersid</name>
  		<replaceName>MasterSid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mastersid</name>
  		<replaceName>MasterSid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mastersid</name>
  		<replaceName>MasterSid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& mastersid() const;
  inline void set_mastersid(const ::std::string& value);
  inline void set_mastersid(const char* value);
  inline void set_mastersid(const char* value, size_t size);
  inline ::std::string* mutable_mastersid();
  inline ::std::string* release_mastersid();
  inline void set_allocated_mastersid(::std::string* mastersid);

  // optional uint32 MasterScore = 3;
  inline bool has_masterscore() const;
  inline void clear_masterscore();
  static const int kMasterScoreFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarBattleTeamInfo</name>
  	<Function>
  		<name>masterscore</name>
  		<replaceName>MasterScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_masterscore</name>
  		<replaceName>MasterScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_masterscore</name>
  		<replaceName>MasterScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 masterscore() const;
  inline void set_masterscore(::google::protobuf::uint32 value);

  // repeated string SubTeamInfo = 4;
  inline int subteaminfo_size() const;
  inline void clear_subteaminfo();
  static const int kSubTeamInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarBattleTeamInfo</name>
  	<Function>
  		<name>subteaminfo</name>
  		<replaceName>SubTeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_subteaminfo</name>
  		<replaceName>SubTeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_subteaminfo</name>
  		<replaceName>SubTeamInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_subteaminfo</name>
  		<replaceName>SubTeamInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>subteaminfo_size</name>
  		<replaceName>SubTeamInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& subteaminfo(int index) const;
  inline ::std::string* mutable_subteaminfo(int index);
  inline void set_subteaminfo(int index, const ::std::string& value);
  inline void set_subteaminfo(int index, const char* value);
  inline void set_subteaminfo(int index, const char* value, size_t size);
  inline ::std::string* add_subteaminfo();
  inline void add_subteaminfo(const ::std::string& value);
  inline void add_subteaminfo(const char* value);
  inline void add_subteaminfo(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& subteaminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_subteaminfo();

  // optional string Name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarBattleTeamInfo</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 Score = 6;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarBattleTeamInfo</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);

  // optional int32 LeftRight = 7;
  inline bool has_leftright() const;
  inline void clear_leftright();
  static const int kLeftRightFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TActImperialWarBattleTeamInfo</name>
  	<Function>
  		<name>leftright</name>
  		<replaceName>LeftRight</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leftright</name>
  		<replaceName>LeftRight</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leftright</name>
  		<replaceName>LeftRight</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 leftright() const;
  inline void set_leftright(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TActImperialWarBattleTeamInfo)
 private:
  inline void set_has_masteruid();
  inline void clear_has_masteruid();
  inline void set_has_mastersid();
  inline void clear_has_mastersid();
  inline void set_has_masterscore();
  inline void clear_has_masterscore();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_leftright();
  inline void clear_has_leftright();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 masteruid_;
  ::std::string* mastersid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> subteaminfo_;
  ::std::string* name_;
  ::google::protobuf::uint32 masterscore_;
  ::google::protobuf::int32 leftright_;
  ::google::protobuf::int64 score_;
  friend void  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_AssignDesc_net_2fActImperialWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fActImperialWar_2eproto();

  void InitAsDefaultInstance();
  static TActImperialWarBattleTeamInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// TActImperialWarUserInfoRsp

// optional uint32 Score = 1;
inline bool TActImperialWarUserInfoRsp::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarUserInfoRsp::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarUserInfoRsp::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarUserInfoRsp::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TActImperialWarUserInfoRsp::score() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarUserInfoRsp.Score)
  return score_;
}
inline void TActImperialWarUserInfoRsp::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarUserInfoRsp.Score)
}

// optional uint32 TotalScore = 2;
inline bool TActImperialWarUserInfoRsp::has_totalscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarUserInfoRsp::set_has_totalscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarUserInfoRsp::clear_has_totalscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarUserInfoRsp::clear_totalscore() {
  totalscore_ = 0u;
  clear_has_totalscore();
}
inline ::google::protobuf::uint32 TActImperialWarUserInfoRsp::totalscore() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarUserInfoRsp.TotalScore)
  return totalscore_;
}
inline void TActImperialWarUserInfoRsp::set_totalscore(::google::protobuf::uint32 value) {
  set_has_totalscore();
  totalscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarUserInfoRsp.TotalScore)
}

// optional uint32 LoveTimes = 3;
inline bool TActImperialWarUserInfoRsp::has_lovetimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActImperialWarUserInfoRsp::set_has_lovetimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActImperialWarUserInfoRsp::clear_has_lovetimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActImperialWarUserInfoRsp::clear_lovetimes() {
  lovetimes_ = 0u;
  clear_has_lovetimes();
}
inline ::google::protobuf::uint32 TActImperialWarUserInfoRsp::lovetimes() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarUserInfoRsp.LoveTimes)
  return lovetimes_;
}
inline void TActImperialWarUserInfoRsp::set_lovetimes(::google::protobuf::uint32 value) {
  set_has_lovetimes();
  lovetimes_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarUserInfoRsp.LoveTimes)
}

// repeated .pb.TActImperialWarTaskCount ArrTaskCount = 4;
inline int TActImperialWarUserInfoRsp::arrtaskcount_size() const {
  return arrtaskcount_.size();
}
inline void TActImperialWarUserInfoRsp::clear_arrtaskcount() {
  arrtaskcount_.Clear();
}
inline const ::pb::TActImperialWarTaskCount& TActImperialWarUserInfoRsp::arrtaskcount(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarUserInfoRsp.ArrTaskCount)
  return arrtaskcount_.Get(index);
}
inline ::pb::TActImperialWarTaskCount* TActImperialWarUserInfoRsp::mutable_arrtaskcount(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarUserInfoRsp.ArrTaskCount)
  return arrtaskcount_.Mutable(index);
}
inline ::pb::TActImperialWarTaskCount* TActImperialWarUserInfoRsp::add_arrtaskcount() {
  // @@protoc_insertion_point(field_add:pb.TActImperialWarUserInfoRsp.ArrTaskCount)
  return arrtaskcount_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskCount >&
TActImperialWarUserInfoRsp::arrtaskcount() const {
  // @@protoc_insertion_point(field_list:pb.TActImperialWarUserInfoRsp.ArrTaskCount)
  return arrtaskcount_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskCount >*
TActImperialWarUserInfoRsp::mutable_arrtaskcount() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActImperialWarUserInfoRsp.ArrTaskCount)
  return &arrtaskcount_;
}

// repeated .pb.TActImperialWarTaskInfo ArrTask = 5;
inline int TActImperialWarUserInfoRsp::arrtask_size() const {
  return arrtask_.size();
}
inline void TActImperialWarUserInfoRsp::clear_arrtask() {
  arrtask_.Clear();
}
inline const ::pb::TActImperialWarTaskInfo& TActImperialWarUserInfoRsp::arrtask(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarUserInfoRsp.ArrTask)
  return arrtask_.Get(index);
}
inline ::pb::TActImperialWarTaskInfo* TActImperialWarUserInfoRsp::mutable_arrtask(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarUserInfoRsp.ArrTask)
  return arrtask_.Mutable(index);
}
inline ::pb::TActImperialWarTaskInfo* TActImperialWarUserInfoRsp::add_arrtask() {
  // @@protoc_insertion_point(field_add:pb.TActImperialWarUserInfoRsp.ArrTask)
  return arrtask_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskInfo >&
TActImperialWarUserInfoRsp::arrtask() const {
  // @@protoc_insertion_point(field_list:pb.TActImperialWarUserInfoRsp.ArrTask)
  return arrtask_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskInfo >*
TActImperialWarUserInfoRsp::mutable_arrtask() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActImperialWarUserInfoRsp.ArrTask)
  return &arrtask_;
}

// repeated .pb.TActImperialWarTargetReward ArrTargetReward = 6;
inline int TActImperialWarUserInfoRsp::arrtargetreward_size() const {
  return arrtargetreward_.size();
}
inline void TActImperialWarUserInfoRsp::clear_arrtargetreward() {
  arrtargetreward_.Clear();
}
inline const ::pb::TActImperialWarTargetReward& TActImperialWarUserInfoRsp::arrtargetreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarUserInfoRsp.ArrTargetReward)
  return arrtargetreward_.Get(index);
}
inline ::pb::TActImperialWarTargetReward* TActImperialWarUserInfoRsp::mutable_arrtargetreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarUserInfoRsp.ArrTargetReward)
  return arrtargetreward_.Mutable(index);
}
inline ::pb::TActImperialWarTargetReward* TActImperialWarUserInfoRsp::add_arrtargetreward() {
  // @@protoc_insertion_point(field_add:pb.TActImperialWarUserInfoRsp.ArrTargetReward)
  return arrtargetreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTargetReward >&
TActImperialWarUserInfoRsp::arrtargetreward() const {
  // @@protoc_insertion_point(field_list:pb.TActImperialWarUserInfoRsp.ArrTargetReward)
  return arrtargetreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTargetReward >*
TActImperialWarUserInfoRsp::mutable_arrtargetreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActImperialWarUserInfoRsp.ArrTargetReward)
  return &arrtargetreward_;
}

// optional uint32 Status = 7;
inline bool TActImperialWarUserInfoRsp::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TActImperialWarUserInfoRsp::set_has_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TActImperialWarUserInfoRsp::clear_has_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TActImperialWarUserInfoRsp::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 TActImperialWarUserInfoRsp::status() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarUserInfoRsp.Status)
  return status_;
}
inline void TActImperialWarUserInfoRsp::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarUserInfoRsp.Status)
}

// optional uint32 TeamId = 8;
inline bool TActImperialWarUserInfoRsp::has_teamid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TActImperialWarUserInfoRsp::set_has_teamid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TActImperialWarUserInfoRsp::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TActImperialWarUserInfoRsp::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TActImperialWarUserInfoRsp::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarUserInfoRsp.TeamId)
  return teamid_;
}
inline void TActImperialWarUserInfoRsp::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarUserInfoRsp.TeamId)
}

// -------------------------------------------------------------------

// TActImperialWarGetViewRsp

// optional .pb.TActImperialWarViewInfo LTeam = 1;
inline bool TActImperialWarGetViewRsp::has_lteam() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarGetViewRsp::set_has_lteam() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarGetViewRsp::clear_has_lteam() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarGetViewRsp::clear_lteam() {
  if (lteam_ != NULL) lteam_->::pb::TActImperialWarViewInfo::Clear();
  clear_has_lteam();
}
inline const ::pb::TActImperialWarViewInfo& TActImperialWarGetViewRsp::lteam() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetViewRsp.LTeam)
  return lteam_ != NULL ? *lteam_ : *default_instance_->lteam_;
}
inline ::pb::TActImperialWarViewInfo* TActImperialWarGetViewRsp::mutable_lteam() {
  set_has_lteam();
  if (lteam_ == NULL) lteam_ = new ::pb::TActImperialWarViewInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarGetViewRsp.LTeam)
  return lteam_;
}
inline ::pb::TActImperialWarViewInfo* TActImperialWarGetViewRsp::release_lteam() {
  clear_has_lteam();
  ::pb::TActImperialWarViewInfo* temp = lteam_;
  lteam_ = NULL;
  return temp;
}
inline void TActImperialWarGetViewRsp::set_allocated_lteam(::pb::TActImperialWarViewInfo* lteam) {
  delete lteam_;
  lteam_ = lteam;
  if (lteam) {
    set_has_lteam();
  } else {
    clear_has_lteam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarGetViewRsp.LTeam)
}

// optional .pb.TActImperialWarViewInfo RTeam = 2;
inline bool TActImperialWarGetViewRsp::has_rteam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarGetViewRsp::set_has_rteam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarGetViewRsp::clear_has_rteam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarGetViewRsp::clear_rteam() {
  if (rteam_ != NULL) rteam_->::pb::TActImperialWarViewInfo::Clear();
  clear_has_rteam();
}
inline const ::pb::TActImperialWarViewInfo& TActImperialWarGetViewRsp::rteam() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetViewRsp.RTeam)
  return rteam_ != NULL ? *rteam_ : *default_instance_->rteam_;
}
inline ::pb::TActImperialWarViewInfo* TActImperialWarGetViewRsp::mutable_rteam() {
  set_has_rteam();
  if (rteam_ == NULL) rteam_ = new ::pb::TActImperialWarViewInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarGetViewRsp.RTeam)
  return rteam_;
}
inline ::pb::TActImperialWarViewInfo* TActImperialWarGetViewRsp::release_rteam() {
  clear_has_rteam();
  ::pb::TActImperialWarViewInfo* temp = rteam_;
  rteam_ = NULL;
  return temp;
}
inline void TActImperialWarGetViewRsp::set_allocated_rteam(::pb::TActImperialWarViewInfo* rteam) {
  delete rteam_;
  rteam_ = rteam;
  if (rteam) {
    set_has_rteam();
  } else {
    clear_has_rteam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarGetViewRsp.RTeam)
}

// optional .pb.TUserSimpleInfo UserData = 3;
inline bool TActImperialWarGetViewRsp::has_userdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActImperialWarGetViewRsp::set_has_userdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActImperialWarGetViewRsp::clear_has_userdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActImperialWarGetViewRsp::clear_userdata() {
  if (userdata_ != NULL) userdata_->::pb::TUserSimpleInfo::Clear();
  clear_has_userdata();
}
inline const ::pb::TUserSimpleInfo& TActImperialWarGetViewRsp::userdata() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetViewRsp.UserData)
  return userdata_ != NULL ? *userdata_ : *default_instance_->userdata_;
}
inline ::pb::TUserSimpleInfo* TActImperialWarGetViewRsp::mutable_userdata() {
  set_has_userdata();
  if (userdata_ == NULL) userdata_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarGetViewRsp.UserData)
  return userdata_;
}
inline ::pb::TUserSimpleInfo* TActImperialWarGetViewRsp::release_userdata() {
  clear_has_userdata();
  ::pb::TUserSimpleInfo* temp = userdata_;
  userdata_ = NULL;
  return temp;
}
inline void TActImperialWarGetViewRsp::set_allocated_userdata(::pb::TUserSimpleInfo* userdata) {
  delete userdata_;
  userdata_ = userdata;
  if (userdata) {
    set_has_userdata();
  } else {
    clear_has_userdata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarGetViewRsp.UserData)
}

// optional uint32 MvpScore = 4;
inline bool TActImperialWarGetViewRsp::has_mvpscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TActImperialWarGetViewRsp::set_has_mvpscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TActImperialWarGetViewRsp::clear_has_mvpscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TActImperialWarGetViewRsp::clear_mvpscore() {
  mvpscore_ = 0u;
  clear_has_mvpscore();
}
inline ::google::protobuf::uint32 TActImperialWarGetViewRsp::mvpscore() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetViewRsp.MvpScore)
  return mvpscore_;
}
inline void TActImperialWarGetViewRsp::set_mvpscore(::google::protobuf::uint32 value) {
  set_has_mvpscore();
  mvpscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetViewRsp.MvpScore)
}

// repeated .pb.TActImperialWarDailyScoreInfo DailyScore = 5;
inline int TActImperialWarGetViewRsp::dailyscore_size() const {
  return dailyscore_.size();
}
inline void TActImperialWarGetViewRsp::clear_dailyscore() {
  dailyscore_.Clear();
}
inline const ::pb::TActImperialWarDailyScoreInfo& TActImperialWarGetViewRsp::dailyscore(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetViewRsp.DailyScore)
  return dailyscore_.Get(index);
}
inline ::pb::TActImperialWarDailyScoreInfo* TActImperialWarGetViewRsp::mutable_dailyscore(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarGetViewRsp.DailyScore)
  return dailyscore_.Mutable(index);
}
inline ::pb::TActImperialWarDailyScoreInfo* TActImperialWarGetViewRsp::add_dailyscore() {
  // @@protoc_insertion_point(field_add:pb.TActImperialWarGetViewRsp.DailyScore)
  return dailyscore_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarDailyScoreInfo >&
TActImperialWarGetViewRsp::dailyscore() const {
  // @@protoc_insertion_point(field_list:pb.TActImperialWarGetViewRsp.DailyScore)
  return dailyscore_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarDailyScoreInfo >*
TActImperialWarGetViewRsp::mutable_dailyscore() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActImperialWarGetViewRsp.DailyScore)
  return &dailyscore_;
}

// -------------------------------------------------------------------

// TActImperialWarGetInfoRsp

// optional uint32 Score = 1;
inline bool TActImperialWarGetInfoRsp::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarGetInfoRsp::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarGetInfoRsp::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarGetInfoRsp::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TActImperialWarGetInfoRsp::score() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetInfoRsp.Score)
  return score_;
}
inline void TActImperialWarGetInfoRsp::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetInfoRsp.Score)
}

// optional uint32 MyRank = 2;
inline bool TActImperialWarGetInfoRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarGetInfoRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarGetInfoRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarGetInfoRsp::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 TActImperialWarGetInfoRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetInfoRsp.MyRank)
  return myrank_;
}
inline void TActImperialWarGetInfoRsp::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetInfoRsp.MyRank)
}

// repeated .pb.TActImperialWarTaskCount ArrTaskCount = 3;
inline int TActImperialWarGetInfoRsp::arrtaskcount_size() const {
  return arrtaskcount_.size();
}
inline void TActImperialWarGetInfoRsp::clear_arrtaskcount() {
  arrtaskcount_.Clear();
}
inline const ::pb::TActImperialWarTaskCount& TActImperialWarGetInfoRsp::arrtaskcount(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetInfoRsp.ArrTaskCount)
  return arrtaskcount_.Get(index);
}
inline ::pb::TActImperialWarTaskCount* TActImperialWarGetInfoRsp::mutable_arrtaskcount(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarGetInfoRsp.ArrTaskCount)
  return arrtaskcount_.Mutable(index);
}
inline ::pb::TActImperialWarTaskCount* TActImperialWarGetInfoRsp::add_arrtaskcount() {
  // @@protoc_insertion_point(field_add:pb.TActImperialWarGetInfoRsp.ArrTaskCount)
  return arrtaskcount_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskCount >&
TActImperialWarGetInfoRsp::arrtaskcount() const {
  // @@protoc_insertion_point(field_list:pb.TActImperialWarGetInfoRsp.ArrTaskCount)
  return arrtaskcount_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskCount >*
TActImperialWarGetInfoRsp::mutable_arrtaskcount() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActImperialWarGetInfoRsp.ArrTaskCount)
  return &arrtaskcount_;
}

// repeated .pb.TActImperialWarTaskInfo ArrTask = 4;
inline int TActImperialWarGetInfoRsp::arrtask_size() const {
  return arrtask_.size();
}
inline void TActImperialWarGetInfoRsp::clear_arrtask() {
  arrtask_.Clear();
}
inline const ::pb::TActImperialWarTaskInfo& TActImperialWarGetInfoRsp::arrtask(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetInfoRsp.ArrTask)
  return arrtask_.Get(index);
}
inline ::pb::TActImperialWarTaskInfo* TActImperialWarGetInfoRsp::mutable_arrtask(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarGetInfoRsp.ArrTask)
  return arrtask_.Mutable(index);
}
inline ::pb::TActImperialWarTaskInfo* TActImperialWarGetInfoRsp::add_arrtask() {
  // @@protoc_insertion_point(field_add:pb.TActImperialWarGetInfoRsp.ArrTask)
  return arrtask_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskInfo >&
TActImperialWarGetInfoRsp::arrtask() const {
  // @@protoc_insertion_point(field_list:pb.TActImperialWarGetInfoRsp.ArrTask)
  return arrtask_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTaskInfo >*
TActImperialWarGetInfoRsp::mutable_arrtask() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActImperialWarGetInfoRsp.ArrTask)
  return &arrtask_;
}

// repeated .pb.TActImperialWarTargetReward ArrTargetReward = 5;
inline int TActImperialWarGetInfoRsp::arrtargetreward_size() const {
  return arrtargetreward_.size();
}
inline void TActImperialWarGetInfoRsp::clear_arrtargetreward() {
  arrtargetreward_.Clear();
}
inline const ::pb::TActImperialWarTargetReward& TActImperialWarGetInfoRsp::arrtargetreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetInfoRsp.ArrTargetReward)
  return arrtargetreward_.Get(index);
}
inline ::pb::TActImperialWarTargetReward* TActImperialWarGetInfoRsp::mutable_arrtargetreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarGetInfoRsp.ArrTargetReward)
  return arrtargetreward_.Mutable(index);
}
inline ::pb::TActImperialWarTargetReward* TActImperialWarGetInfoRsp::add_arrtargetreward() {
  // @@protoc_insertion_point(field_add:pb.TActImperialWarGetInfoRsp.ArrTargetReward)
  return arrtargetreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTargetReward >&
TActImperialWarGetInfoRsp::arrtargetreward() const {
  // @@protoc_insertion_point(field_list:pb.TActImperialWarGetInfoRsp.ArrTargetReward)
  return arrtargetreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarTargetReward >*
TActImperialWarGetInfoRsp::mutable_arrtargetreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActImperialWarGetInfoRsp.ArrTargetReward)
  return &arrtargetreward_;
}

// optional uint32 TotalScore = 6;
inline bool TActImperialWarGetInfoRsp::has_totalscore() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TActImperialWarGetInfoRsp::set_has_totalscore() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TActImperialWarGetInfoRsp::clear_has_totalscore() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TActImperialWarGetInfoRsp::clear_totalscore() {
  totalscore_ = 0u;
  clear_has_totalscore();
}
inline ::google::protobuf::uint32 TActImperialWarGetInfoRsp::totalscore() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetInfoRsp.TotalScore)
  return totalscore_;
}
inline void TActImperialWarGetInfoRsp::set_totalscore(::google::protobuf::uint32 value) {
  set_has_totalscore();
  totalscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetInfoRsp.TotalScore)
}

// -------------------------------------------------------------------

// TActImperialWarTargetRewardReq

// optional uint32 Id = 1;
inline bool TActImperialWarTargetRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarTargetRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarTargetRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarTargetRewardReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActImperialWarTargetRewardReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarTargetRewardReq.Id)
  return id_;
}
inline void TActImperialWarTargetRewardReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarTargetRewardReq.Id)
}

// -------------------------------------------------------------------

// TActImperialWarGetTodayRankRsp

// repeated .pb.TActImperialWarDetailRankInfo ArrRank = 1;
inline int TActImperialWarGetTodayRankRsp::arrrank_size() const {
  return arrrank_.size();
}
inline void TActImperialWarGetTodayRankRsp::clear_arrrank() {
  arrrank_.Clear();
}
inline const ::pb::TActImperialWarDetailRankInfo& TActImperialWarGetTodayRankRsp::arrrank(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetTodayRankRsp.ArrRank)
  return arrrank_.Get(index);
}
inline ::pb::TActImperialWarDetailRankInfo* TActImperialWarGetTodayRankRsp::mutable_arrrank(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarGetTodayRankRsp.ArrRank)
  return arrrank_.Mutable(index);
}
inline ::pb::TActImperialWarDetailRankInfo* TActImperialWarGetTodayRankRsp::add_arrrank() {
  // @@protoc_insertion_point(field_add:pb.TActImperialWarGetTodayRankRsp.ArrRank)
  return arrrank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarDetailRankInfo >&
TActImperialWarGetTodayRankRsp::arrrank() const {
  // @@protoc_insertion_point(field_list:pb.TActImperialWarGetTodayRankRsp.ArrRank)
  return arrrank_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarDetailRankInfo >*
TActImperialWarGetTodayRankRsp::mutable_arrrank() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActImperialWarGetTodayRankRsp.ArrRank)
  return &arrrank_;
}

// optional uint32 MyRank = 2;
inline bool TActImperialWarGetTodayRankRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarGetTodayRankRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarGetTodayRankRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarGetTodayRankRsp::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 TActImperialWarGetTodayRankRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetTodayRankRsp.MyRank)
  return myrank_;
}
inline void TActImperialWarGetTodayRankRsp::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetTodayRankRsp.MyRank)
}

// -------------------------------------------------------------------

// TActImperialWarGetTotalRankRsp

// repeated .pb.TActImperialWarDetailRankInfo ArrRank = 1;
inline int TActImperialWarGetTotalRankRsp::arrrank_size() const {
  return arrrank_.size();
}
inline void TActImperialWarGetTotalRankRsp::clear_arrrank() {
  arrrank_.Clear();
}
inline const ::pb::TActImperialWarDetailRankInfo& TActImperialWarGetTotalRankRsp::arrrank(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetTotalRankRsp.ArrRank)
  return arrrank_.Get(index);
}
inline ::pb::TActImperialWarDetailRankInfo* TActImperialWarGetTotalRankRsp::mutable_arrrank(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarGetTotalRankRsp.ArrRank)
  return arrrank_.Mutable(index);
}
inline ::pb::TActImperialWarDetailRankInfo* TActImperialWarGetTotalRankRsp::add_arrrank() {
  // @@protoc_insertion_point(field_add:pb.TActImperialWarGetTotalRankRsp.ArrRank)
  return arrrank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarDetailRankInfo >&
TActImperialWarGetTotalRankRsp::arrrank() const {
  // @@protoc_insertion_point(field_list:pb.TActImperialWarGetTotalRankRsp.ArrRank)
  return arrrank_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActImperialWarDetailRankInfo >*
TActImperialWarGetTotalRankRsp::mutable_arrrank() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActImperialWarGetTotalRankRsp.ArrRank)
  return &arrrank_;
}

// optional uint32 MyRank = 2;
inline bool TActImperialWarGetTotalRankRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarGetTotalRankRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarGetTotalRankRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarGetTotalRankRsp::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 TActImperialWarGetTotalRankRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetTotalRankRsp.MyRank)
  return myrank_;
}
inline void TActImperialWarGetTotalRankRsp::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetTotalRankRsp.MyRank)
}

// -------------------------------------------------------------------

// TActImperialWarGetWarInfoRsp

// optional .pb.TActImperialWarViewInfo LTeam = 1;
inline bool TActImperialWarGetWarInfoRsp::has_lteam() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarGetWarInfoRsp::set_has_lteam() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarGetWarInfoRsp::clear_has_lteam() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarGetWarInfoRsp::clear_lteam() {
  if (lteam_ != NULL) lteam_->::pb::TActImperialWarViewInfo::Clear();
  clear_has_lteam();
}
inline const ::pb::TActImperialWarViewInfo& TActImperialWarGetWarInfoRsp::lteam() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetWarInfoRsp.LTeam)
  return lteam_ != NULL ? *lteam_ : *default_instance_->lteam_;
}
inline ::pb::TActImperialWarViewInfo* TActImperialWarGetWarInfoRsp::mutable_lteam() {
  set_has_lteam();
  if (lteam_ == NULL) lteam_ = new ::pb::TActImperialWarViewInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarGetWarInfoRsp.LTeam)
  return lteam_;
}
inline ::pb::TActImperialWarViewInfo* TActImperialWarGetWarInfoRsp::release_lteam() {
  clear_has_lteam();
  ::pb::TActImperialWarViewInfo* temp = lteam_;
  lteam_ = NULL;
  return temp;
}
inline void TActImperialWarGetWarInfoRsp::set_allocated_lteam(::pb::TActImperialWarViewInfo* lteam) {
  delete lteam_;
  lteam_ = lteam;
  if (lteam) {
    set_has_lteam();
  } else {
    clear_has_lteam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarGetWarInfoRsp.LTeam)
}

// optional .pb.TActImperialWarViewInfo RTeam = 2;
inline bool TActImperialWarGetWarInfoRsp::has_rteam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarGetWarInfoRsp::set_has_rteam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarGetWarInfoRsp::clear_has_rteam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarGetWarInfoRsp::clear_rteam() {
  if (rteam_ != NULL) rteam_->::pb::TActImperialWarViewInfo::Clear();
  clear_has_rteam();
}
inline const ::pb::TActImperialWarViewInfo& TActImperialWarGetWarInfoRsp::rteam() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetWarInfoRsp.RTeam)
  return rteam_ != NULL ? *rteam_ : *default_instance_->rteam_;
}
inline ::pb::TActImperialWarViewInfo* TActImperialWarGetWarInfoRsp::mutable_rteam() {
  set_has_rteam();
  if (rteam_ == NULL) rteam_ = new ::pb::TActImperialWarViewInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarGetWarInfoRsp.RTeam)
  return rteam_;
}
inline ::pb::TActImperialWarViewInfo* TActImperialWarGetWarInfoRsp::release_rteam() {
  clear_has_rteam();
  ::pb::TActImperialWarViewInfo* temp = rteam_;
  rteam_ = NULL;
  return temp;
}
inline void TActImperialWarGetWarInfoRsp::set_allocated_rteam(::pb::TActImperialWarViewInfo* rteam) {
  delete rteam_;
  rteam_ = rteam;
  if (rteam) {
    set_has_rteam();
  } else {
    clear_has_rteam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarGetWarInfoRsp.RTeam)
}

// optional .pb.TUserSimpleInfo UserData = 3;
inline bool TActImperialWarGetWarInfoRsp::has_userdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActImperialWarGetWarInfoRsp::set_has_userdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActImperialWarGetWarInfoRsp::clear_has_userdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActImperialWarGetWarInfoRsp::clear_userdata() {
  if (userdata_ != NULL) userdata_->::pb::TUserSimpleInfo::Clear();
  clear_has_userdata();
}
inline const ::pb::TUserSimpleInfo& TActImperialWarGetWarInfoRsp::userdata() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetWarInfoRsp.UserData)
  return userdata_ != NULL ? *userdata_ : *default_instance_->userdata_;
}
inline ::pb::TUserSimpleInfo* TActImperialWarGetWarInfoRsp::mutable_userdata() {
  set_has_userdata();
  if (userdata_ == NULL) userdata_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarGetWarInfoRsp.UserData)
  return userdata_;
}
inline ::pb::TUserSimpleInfo* TActImperialWarGetWarInfoRsp::release_userdata() {
  clear_has_userdata();
  ::pb::TUserSimpleInfo* temp = userdata_;
  userdata_ = NULL;
  return temp;
}
inline void TActImperialWarGetWarInfoRsp::set_allocated_userdata(::pb::TUserSimpleInfo* userdata) {
  delete userdata_;
  userdata_ = userdata;
  if (userdata) {
    set_has_userdata();
  } else {
    clear_has_userdata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarGetWarInfoRsp.UserData)
}

// optional uint32 Score = 4;
inline bool TActImperialWarGetWarInfoRsp::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TActImperialWarGetWarInfoRsp::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TActImperialWarGetWarInfoRsp::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TActImperialWarGetWarInfoRsp::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TActImperialWarGetWarInfoRsp::score() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetWarInfoRsp.Score)
  return score_;
}
inline void TActImperialWarGetWarInfoRsp::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetWarInfoRsp.Score)
}

// optional uint32 LoveTimes = 5;
inline bool TActImperialWarGetWarInfoRsp::has_lovetimes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TActImperialWarGetWarInfoRsp::set_has_lovetimes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TActImperialWarGetWarInfoRsp::clear_has_lovetimes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TActImperialWarGetWarInfoRsp::clear_lovetimes() {
  lovetimes_ = 0u;
  clear_has_lovetimes();
}
inline ::google::protobuf::uint32 TActImperialWarGetWarInfoRsp::lovetimes() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetWarInfoRsp.LoveTimes)
  return lovetimes_;
}
inline void TActImperialWarGetWarInfoRsp::set_lovetimes(::google::protobuf::uint32 value) {
  set_has_lovetimes();
  lovetimes_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetWarInfoRsp.LoveTimes)
}

// optional bool CanEnter = 6;
inline bool TActImperialWarGetWarInfoRsp::has_canenter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TActImperialWarGetWarInfoRsp::set_has_canenter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TActImperialWarGetWarInfoRsp::clear_has_canenter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TActImperialWarGetWarInfoRsp::clear_canenter() {
  canenter_ = false;
  clear_has_canenter();
}
inline bool TActImperialWarGetWarInfoRsp::canenter() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetWarInfoRsp.CanEnter)
  return canenter_;
}
inline void TActImperialWarGetWarInfoRsp::set_canenter(bool value) {
  set_has_canenter();
  canenter_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetWarInfoRsp.CanEnter)
}

// optional uint32 TotalLoveTimes = 7;
inline bool TActImperialWarGetWarInfoRsp::has_totallovetimes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TActImperialWarGetWarInfoRsp::set_has_totallovetimes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TActImperialWarGetWarInfoRsp::clear_has_totallovetimes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TActImperialWarGetWarInfoRsp::clear_totallovetimes() {
  totallovetimes_ = 0u;
  clear_has_totallovetimes();
}
inline ::google::protobuf::uint32 TActImperialWarGetWarInfoRsp::totallovetimes() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetWarInfoRsp.TotalLoveTimes)
  return totallovetimes_;
}
inline void TActImperialWarGetWarInfoRsp::set_totallovetimes(::google::protobuf::uint32 value) {
  set_has_totallovetimes();
  totallovetimes_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetWarInfoRsp.TotalLoveTimes)
}

// optional uint32 BattleScore = 8;
inline bool TActImperialWarGetWarInfoRsp::has_battlescore() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TActImperialWarGetWarInfoRsp::set_has_battlescore() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TActImperialWarGetWarInfoRsp::clear_has_battlescore() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TActImperialWarGetWarInfoRsp::clear_battlescore() {
  battlescore_ = 0u;
  clear_has_battlescore();
}
inline ::google::protobuf::uint32 TActImperialWarGetWarInfoRsp::battlescore() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetWarInfoRsp.BattleScore)
  return battlescore_;
}
inline void TActImperialWarGetWarInfoRsp::set_battlescore(::google::protobuf::uint32 value) {
  set_has_battlescore();
  battlescore_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetWarInfoRsp.BattleScore)
}

// -------------------------------------------------------------------

// TActImperialWarLoveRsp

// optional uint32 TotalLoveTimes = 1;
inline bool TActImperialWarLoveRsp::has_totallovetimes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarLoveRsp::set_has_totallovetimes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarLoveRsp::clear_has_totallovetimes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarLoveRsp::clear_totallovetimes() {
  totallovetimes_ = 0u;
  clear_has_totallovetimes();
}
inline ::google::protobuf::uint32 TActImperialWarLoveRsp::totallovetimes() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarLoveRsp.TotalLoveTimes)
  return totallovetimes_;
}
inline void TActImperialWarLoveRsp::set_totallovetimes(::google::protobuf::uint32 value) {
  set_has_totallovetimes();
  totallovetimes_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarLoveRsp.TotalLoveTimes)
}

// -------------------------------------------------------------------

// TActImperialWarViewInfo

// optional uint32 Score = 1;
inline bool TActImperialWarViewInfo::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarViewInfo::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarViewInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarViewInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TActImperialWarViewInfo::score() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarViewInfo.Score)
  return score_;
}
inline void TActImperialWarViewInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarViewInfo.Score)
}

// repeated string ArrServer = 2;
inline int TActImperialWarViewInfo::arrserver_size() const {
  return arrserver_.size();
}
inline void TActImperialWarViewInfo::clear_arrserver() {
  arrserver_.Clear();
}
inline const ::std::string& TActImperialWarViewInfo::arrserver(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarViewInfo.ArrServer)
  return arrserver_.Get(index);
}
inline ::std::string* TActImperialWarViewInfo::mutable_arrserver(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarViewInfo.ArrServer)
  return arrserver_.Mutable(index);
}
inline void TActImperialWarViewInfo::set_arrserver(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TActImperialWarViewInfo.ArrServer)
  arrserver_.Mutable(index)->assign(value);
}
inline void TActImperialWarViewInfo::set_arrserver(int index, const char* value) {
  arrserver_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActImperialWarViewInfo.ArrServer)
}
inline void TActImperialWarViewInfo::set_arrserver(int index, const char* value, size_t size) {
  arrserver_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActImperialWarViewInfo.ArrServer)
}
inline ::std::string* TActImperialWarViewInfo::add_arrserver() {
  return arrserver_.Add();
}
inline void TActImperialWarViewInfo::add_arrserver(const ::std::string& value) {
  arrserver_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TActImperialWarViewInfo.ArrServer)
}
inline void TActImperialWarViewInfo::add_arrserver(const char* value) {
  arrserver_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TActImperialWarViewInfo.ArrServer)
}
inline void TActImperialWarViewInfo::add_arrserver(const char* value, size_t size) {
  arrserver_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TActImperialWarViewInfo.ArrServer)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TActImperialWarViewInfo::arrserver() const {
  // @@protoc_insertion_point(field_list:pb.TActImperialWarViewInfo.ArrServer)
  return arrserver_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TActImperialWarViewInfo::mutable_arrserver() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActImperialWarViewInfo.ArrServer)
  return &arrserver_;
}

// optional uint32 BattleRet = 3;
inline bool TActImperialWarViewInfo::has_battleret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActImperialWarViewInfo::set_has_battleret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActImperialWarViewInfo::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActImperialWarViewInfo::clear_battleret() {
  battleret_ = 0u;
  clear_has_battleret();
}
inline ::google::protobuf::uint32 TActImperialWarViewInfo::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarViewInfo.BattleRet)
  return battleret_;
}
inline void TActImperialWarViewInfo::set_battleret(::google::protobuf::uint32 value) {
  set_has_battleret();
  battleret_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarViewInfo.BattleRet)
}

// -------------------------------------------------------------------

// TActImperialWarDailyScoreInfo

// optional uint32 Day = 1;
inline bool TActImperialWarDailyScoreInfo::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarDailyScoreInfo::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarDailyScoreInfo::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarDailyScoreInfo::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 TActImperialWarDailyScoreInfo::day() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarDailyScoreInfo.Day)
  return day_;
}
inline void TActImperialWarDailyScoreInfo::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarDailyScoreInfo.Day)
}

// optional uint32 LScore = 2;
inline bool TActImperialWarDailyScoreInfo::has_lscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarDailyScoreInfo::set_has_lscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarDailyScoreInfo::clear_has_lscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarDailyScoreInfo::clear_lscore() {
  lscore_ = 0u;
  clear_has_lscore();
}
inline ::google::protobuf::uint32 TActImperialWarDailyScoreInfo::lscore() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarDailyScoreInfo.LScore)
  return lscore_;
}
inline void TActImperialWarDailyScoreInfo::set_lscore(::google::protobuf::uint32 value) {
  set_has_lscore();
  lscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarDailyScoreInfo.LScore)
}

// optional uint32 RScore = 3;
inline bool TActImperialWarDailyScoreInfo::has_rscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActImperialWarDailyScoreInfo::set_has_rscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActImperialWarDailyScoreInfo::clear_has_rscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActImperialWarDailyScoreInfo::clear_rscore() {
  rscore_ = 0u;
  clear_has_rscore();
}
inline ::google::protobuf::uint32 TActImperialWarDailyScoreInfo::rscore() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarDailyScoreInfo.RScore)
  return rscore_;
}
inline void TActImperialWarDailyScoreInfo::set_rscore(::google::protobuf::uint32 value) {
  set_has_rscore();
  rscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarDailyScoreInfo.RScore)
}

// -------------------------------------------------------------------

// TActImperialWarTaskCount

// optional uint32 TaskType = 1;
inline bool TActImperialWarTaskCount::has_tasktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarTaskCount::set_has_tasktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarTaskCount::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarTaskCount::clear_tasktype() {
  tasktype_ = 0u;
  clear_has_tasktype();
}
inline ::google::protobuf::uint32 TActImperialWarTaskCount::tasktype() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarTaskCount.TaskType)
  return tasktype_;
}
inline void TActImperialWarTaskCount::set_tasktype(::google::protobuf::uint32 value) {
  set_has_tasktype();
  tasktype_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarTaskCount.TaskType)
}

// optional uint32 Count = 2;
inline bool TActImperialWarTaskCount::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarTaskCount::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarTaskCount::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarTaskCount::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 TActImperialWarTaskCount::count() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarTaskCount.Count)
  return count_;
}
inline void TActImperialWarTaskCount::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarTaskCount.Count)
}

// -------------------------------------------------------------------

// TActImperialWarTaskInfo

// optional uint32 TaskId = 1;
inline bool TActImperialWarTaskInfo::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarTaskInfo::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarTaskInfo::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarTaskInfo::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 TActImperialWarTaskInfo::taskid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarTaskInfo.TaskId)
  return taskid_;
}
inline void TActImperialWarTaskInfo::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarTaskInfo.TaskId)
}

// optional uint64 FinishTime = 2;
inline bool TActImperialWarTaskInfo::has_finishtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarTaskInfo::set_has_finishtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarTaskInfo::clear_has_finishtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarTaskInfo::clear_finishtime() {
  finishtime_ = GOOGLE_ULONGLONG(0);
  clear_has_finishtime();
}
inline ::google::protobuf::uint64 TActImperialWarTaskInfo::finishtime() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarTaskInfo.FinishTime)
  return finishtime_;
}
inline void TActImperialWarTaskInfo::set_finishtime(::google::protobuf::uint64 value) {
  set_has_finishtime();
  finishtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarTaskInfo.FinishTime)
}

// -------------------------------------------------------------------

// TActImperialWarTargetReward

// optional uint32 Id = 1;
inline bool TActImperialWarTargetReward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarTargetReward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarTargetReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarTargetReward::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActImperialWarTargetReward::id() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarTargetReward.Id)
  return id_;
}
inline void TActImperialWarTargetReward::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarTargetReward.Id)
}

// optional uint64 RewardTime = 2;
inline bool TActImperialWarTargetReward::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarTargetReward::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarTargetReward::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarTargetReward::clear_rewardtime() {
  rewardtime_ = GOOGLE_ULONGLONG(0);
  clear_has_rewardtime();
}
inline ::google::protobuf::uint64 TActImperialWarTargetReward::rewardtime() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarTargetReward.RewardTime)
  return rewardtime_;
}
inline void TActImperialWarTargetReward::set_rewardtime(::google::protobuf::uint64 value) {
  set_has_rewardtime();
  rewardtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarTargetReward.RewardTime)
}

// -------------------------------------------------------------------

// TActImperialWarDetailRankInfo

// optional .pb.TUserSimpleInfo UserData = 1;
inline bool TActImperialWarDetailRankInfo::has_userdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarDetailRankInfo::set_has_userdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarDetailRankInfo::clear_has_userdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarDetailRankInfo::clear_userdata() {
  if (userdata_ != NULL) userdata_->::pb::TUserSimpleInfo::Clear();
  clear_has_userdata();
}
inline const ::pb::TUserSimpleInfo& TActImperialWarDetailRankInfo::userdata() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarDetailRankInfo.UserData)
  return userdata_ != NULL ? *userdata_ : *default_instance_->userdata_;
}
inline ::pb::TUserSimpleInfo* TActImperialWarDetailRankInfo::mutable_userdata() {
  set_has_userdata();
  if (userdata_ == NULL) userdata_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarDetailRankInfo.UserData)
  return userdata_;
}
inline ::pb::TUserSimpleInfo* TActImperialWarDetailRankInfo::release_userdata() {
  clear_has_userdata();
  ::pb::TUserSimpleInfo* temp = userdata_;
  userdata_ = NULL;
  return temp;
}
inline void TActImperialWarDetailRankInfo::set_allocated_userdata(::pb::TUserSimpleInfo* userdata) {
  delete userdata_;
  userdata_ = userdata;
  if (userdata) {
    set_has_userdata();
  } else {
    clear_has_userdata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarDetailRankInfo.UserData)
}

// optional uint32 Score = 2;
inline bool TActImperialWarDetailRankInfo::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarDetailRankInfo::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarDetailRankInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarDetailRankInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TActImperialWarDetailRankInfo::score() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarDetailRankInfo.Score)
  return score_;
}
inline void TActImperialWarDetailRankInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarDetailRankInfo.Score)
}

// optional uint32 Rank = 3;
inline bool TActImperialWarDetailRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActImperialWarDetailRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActImperialWarDetailRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActImperialWarDetailRankInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TActImperialWarDetailRankInfo::rank() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarDetailRankInfo.Rank)
  return rank_;
}
inline void TActImperialWarDetailRankInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarDetailRankInfo.Rank)
}

// -------------------------------------------------------------------

// TActImperialWarCreateReq

// optional string ServerId = 1;
inline bool TActImperialWarCreateReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarCreateReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarCreateReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarCreateReq::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TActImperialWarCreateReq::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarCreateReq.ServerId)
  return *serverid_;
}
inline void TActImperialWarCreateReq::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActImperialWarCreateReq.ServerId)
}
inline void TActImperialWarCreateReq::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActImperialWarCreateReq.ServerId)
}
inline void TActImperialWarCreateReq::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActImperialWarCreateReq.ServerId)
}
inline ::std::string* TActImperialWarCreateReq::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarCreateReq.ServerId)
  return serverid_;
}
inline ::std::string* TActImperialWarCreateReq::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActImperialWarCreateReq::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarCreateReq.ServerId)
}

// optional .pb.TActImperialWarTeamInfo AtkInfo = 2;
inline bool TActImperialWarCreateReq::has_atkinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarCreateReq::set_has_atkinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarCreateReq::clear_has_atkinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarCreateReq::clear_atkinfo() {
  if (atkinfo_ != NULL) atkinfo_->::pb::TActImperialWarTeamInfo::Clear();
  clear_has_atkinfo();
}
inline const ::pb::TActImperialWarTeamInfo& TActImperialWarCreateReq::atkinfo() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarCreateReq.AtkInfo)
  return atkinfo_ != NULL ? *atkinfo_ : *default_instance_->atkinfo_;
}
inline ::pb::TActImperialWarTeamInfo* TActImperialWarCreateReq::mutable_atkinfo() {
  set_has_atkinfo();
  if (atkinfo_ == NULL) atkinfo_ = new ::pb::TActImperialWarTeamInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarCreateReq.AtkInfo)
  return atkinfo_;
}
inline ::pb::TActImperialWarTeamInfo* TActImperialWarCreateReq::release_atkinfo() {
  clear_has_atkinfo();
  ::pb::TActImperialWarTeamInfo* temp = atkinfo_;
  atkinfo_ = NULL;
  return temp;
}
inline void TActImperialWarCreateReq::set_allocated_atkinfo(::pb::TActImperialWarTeamInfo* atkinfo) {
  delete atkinfo_;
  atkinfo_ = atkinfo;
  if (atkinfo) {
    set_has_atkinfo();
  } else {
    clear_has_atkinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarCreateReq.AtkInfo)
}

// optional .pb.TActImperialWarTeamInfo DefInfo = 3;
inline bool TActImperialWarCreateReq::has_definfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActImperialWarCreateReq::set_has_definfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActImperialWarCreateReq::clear_has_definfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActImperialWarCreateReq::clear_definfo() {
  if (definfo_ != NULL) definfo_->::pb::TActImperialWarTeamInfo::Clear();
  clear_has_definfo();
}
inline const ::pb::TActImperialWarTeamInfo& TActImperialWarCreateReq::definfo() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarCreateReq.DefInfo)
  return definfo_ != NULL ? *definfo_ : *default_instance_->definfo_;
}
inline ::pb::TActImperialWarTeamInfo* TActImperialWarCreateReq::mutable_definfo() {
  set_has_definfo();
  if (definfo_ == NULL) definfo_ = new ::pb::TActImperialWarTeamInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarCreateReq.DefInfo)
  return definfo_;
}
inline ::pb::TActImperialWarTeamInfo* TActImperialWarCreateReq::release_definfo() {
  clear_has_definfo();
  ::pb::TActImperialWarTeamInfo* temp = definfo_;
  definfo_ = NULL;
  return temp;
}
inline void TActImperialWarCreateReq::set_allocated_definfo(::pb::TActImperialWarTeamInfo* definfo) {
  delete definfo_;
  definfo_ = definfo;
  if (definfo) {
    set_has_definfo();
  } else {
    clear_has_definfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarCreateReq.DefInfo)
}

// optional uint64 BeginTime = 4;
inline bool TActImperialWarCreateReq::has_begintime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TActImperialWarCreateReq::set_has_begintime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TActImperialWarCreateReq::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TActImperialWarCreateReq::clear_begintime() {
  begintime_ = GOOGLE_ULONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::uint64 TActImperialWarCreateReq::begintime() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarCreateReq.BeginTime)
  return begintime_;
}
inline void TActImperialWarCreateReq::set_begintime(::google::protobuf::uint64 value) {
  set_has_begintime();
  begintime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarCreateReq.BeginTime)
}

// -------------------------------------------------------------------

// TActImperialWarCreateRsp

// optional bool Ret = 1;
inline bool TActImperialWarCreateRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarCreateRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarCreateRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarCreateRsp::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool TActImperialWarCreateRsp::ret() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarCreateRsp.Ret)
  return ret_;
}
inline void TActImperialWarCreateRsp::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarCreateRsp.Ret)
}

// -------------------------------------------------------------------

// TActImperialWarTeamInfo

// optional uint64 MasterUid = 1;
inline bool TActImperialWarTeamInfo::has_masteruid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarTeamInfo::set_has_masteruid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarTeamInfo::clear_has_masteruid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarTeamInfo::clear_masteruid() {
  masteruid_ = GOOGLE_ULONGLONG(0);
  clear_has_masteruid();
}
inline ::google::protobuf::uint64 TActImperialWarTeamInfo::masteruid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarTeamInfo.MasterUid)
  return masteruid_;
}
inline void TActImperialWarTeamInfo::set_masteruid(::google::protobuf::uint64 value) {
  set_has_masteruid();
  masteruid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarTeamInfo.MasterUid)
}

// optional string MasterSid = 2;
inline bool TActImperialWarTeamInfo::has_mastersid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarTeamInfo::set_has_mastersid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarTeamInfo::clear_has_mastersid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarTeamInfo::clear_mastersid() {
  if (mastersid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastersid_->clear();
  }
  clear_has_mastersid();
}
inline const ::std::string& TActImperialWarTeamInfo::mastersid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarTeamInfo.MasterSid)
  return *mastersid_;
}
inline void TActImperialWarTeamInfo::set_mastersid(const ::std::string& value) {
  set_has_mastersid();
  if (mastersid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastersid_ = new ::std::string;
  }
  mastersid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActImperialWarTeamInfo.MasterSid)
}
inline void TActImperialWarTeamInfo::set_mastersid(const char* value) {
  set_has_mastersid();
  if (mastersid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastersid_ = new ::std::string;
  }
  mastersid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActImperialWarTeamInfo.MasterSid)
}
inline void TActImperialWarTeamInfo::set_mastersid(const char* value, size_t size) {
  set_has_mastersid();
  if (mastersid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastersid_ = new ::std::string;
  }
  mastersid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActImperialWarTeamInfo.MasterSid)
}
inline ::std::string* TActImperialWarTeamInfo::mutable_mastersid() {
  set_has_mastersid();
  if (mastersid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastersid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarTeamInfo.MasterSid)
  return mastersid_;
}
inline ::std::string* TActImperialWarTeamInfo::release_mastersid() {
  clear_has_mastersid();
  if (mastersid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mastersid_;
    mastersid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActImperialWarTeamInfo::set_allocated_mastersid(::std::string* mastersid) {
  if (mastersid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mastersid_;
  }
  if (mastersid) {
    set_has_mastersid();
    mastersid_ = mastersid;
  } else {
    clear_has_mastersid();
    mastersid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarTeamInfo.MasterSid)
}

// optional uint32 MasterScore = 3;
inline bool TActImperialWarTeamInfo::has_masterscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActImperialWarTeamInfo::set_has_masterscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActImperialWarTeamInfo::clear_has_masterscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActImperialWarTeamInfo::clear_masterscore() {
  masterscore_ = 0u;
  clear_has_masterscore();
}
inline ::google::protobuf::uint32 TActImperialWarTeamInfo::masterscore() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarTeamInfo.MasterScore)
  return masterscore_;
}
inline void TActImperialWarTeamInfo::set_masterscore(::google::protobuf::uint32 value) {
  set_has_masterscore();
  masterscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarTeamInfo.MasterScore)
}

// repeated string SubTeamInfo = 4;
inline int TActImperialWarTeamInfo::subteaminfo_size() const {
  return subteaminfo_.size();
}
inline void TActImperialWarTeamInfo::clear_subteaminfo() {
  subteaminfo_.Clear();
}
inline const ::std::string& TActImperialWarTeamInfo::subteaminfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarTeamInfo.SubTeamInfo)
  return subteaminfo_.Get(index);
}
inline ::std::string* TActImperialWarTeamInfo::mutable_subteaminfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarTeamInfo.SubTeamInfo)
  return subteaminfo_.Mutable(index);
}
inline void TActImperialWarTeamInfo::set_subteaminfo(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TActImperialWarTeamInfo.SubTeamInfo)
  subteaminfo_.Mutable(index)->assign(value);
}
inline void TActImperialWarTeamInfo::set_subteaminfo(int index, const char* value) {
  subteaminfo_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActImperialWarTeamInfo.SubTeamInfo)
}
inline void TActImperialWarTeamInfo::set_subteaminfo(int index, const char* value, size_t size) {
  subteaminfo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActImperialWarTeamInfo.SubTeamInfo)
}
inline ::std::string* TActImperialWarTeamInfo::add_subteaminfo() {
  return subteaminfo_.Add();
}
inline void TActImperialWarTeamInfo::add_subteaminfo(const ::std::string& value) {
  subteaminfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TActImperialWarTeamInfo.SubTeamInfo)
}
inline void TActImperialWarTeamInfo::add_subteaminfo(const char* value) {
  subteaminfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TActImperialWarTeamInfo.SubTeamInfo)
}
inline void TActImperialWarTeamInfo::add_subteaminfo(const char* value, size_t size) {
  subteaminfo_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TActImperialWarTeamInfo.SubTeamInfo)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TActImperialWarTeamInfo::subteaminfo() const {
  // @@protoc_insertion_point(field_list:pb.TActImperialWarTeamInfo.SubTeamInfo)
  return subteaminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TActImperialWarTeamInfo::mutable_subteaminfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActImperialWarTeamInfo.SubTeamInfo)
  return &subteaminfo_;
}

// optional string Name = 5;
inline bool TActImperialWarTeamInfo::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TActImperialWarTeamInfo::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TActImperialWarTeamInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TActImperialWarTeamInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TActImperialWarTeamInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarTeamInfo.Name)
  return *name_;
}
inline void TActImperialWarTeamInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActImperialWarTeamInfo.Name)
}
inline void TActImperialWarTeamInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActImperialWarTeamInfo.Name)
}
inline void TActImperialWarTeamInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActImperialWarTeamInfo.Name)
}
inline ::std::string* TActImperialWarTeamInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarTeamInfo.Name)
  return name_;
}
inline ::std::string* TActImperialWarTeamInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActImperialWarTeamInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarTeamInfo.Name)
}

// optional int64 Score = 6;
inline bool TActImperialWarTeamInfo::has_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TActImperialWarTeamInfo::set_has_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TActImperialWarTeamInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TActImperialWarTeamInfo::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 TActImperialWarTeamInfo::score() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarTeamInfo.Score)
  return score_;
}
inline void TActImperialWarTeamInfo::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarTeamInfo.Score)
}

// optional int32 LeftRight = 7;
inline bool TActImperialWarTeamInfo::has_leftright() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TActImperialWarTeamInfo::set_has_leftright() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TActImperialWarTeamInfo::clear_has_leftright() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TActImperialWarTeamInfo::clear_leftright() {
  leftright_ = 0;
  clear_has_leftright();
}
inline ::google::protobuf::int32 TActImperialWarTeamInfo::leftright() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarTeamInfo.LeftRight)
  return leftright_;
}
inline void TActImperialWarTeamInfo::set_leftright(::google::protobuf::int32 value) {
  set_has_leftright();
  leftright_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarTeamInfo.LeftRight)
}

// -------------------------------------------------------------------

// TActImperialWarGetBattleRetReq

// optional string ServerId = 1;
inline bool TActImperialWarGetBattleRetReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarGetBattleRetReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarGetBattleRetReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarGetBattleRetReq::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TActImperialWarGetBattleRetReq::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetBattleRetReq.ServerId)
  return *serverid_;
}
inline void TActImperialWarGetBattleRetReq::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetBattleRetReq.ServerId)
}
inline void TActImperialWarGetBattleRetReq::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActImperialWarGetBattleRetReq.ServerId)
}
inline void TActImperialWarGetBattleRetReq::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActImperialWarGetBattleRetReq.ServerId)
}
inline ::std::string* TActImperialWarGetBattleRetReq::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarGetBattleRetReq.ServerId)
  return serverid_;
}
inline ::std::string* TActImperialWarGetBattleRetReq::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActImperialWarGetBattleRetReq::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarGetBattleRetReq.ServerId)
}

// optional uint64 MasterUid = 2;
inline bool TActImperialWarGetBattleRetReq::has_masteruid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarGetBattleRetReq::set_has_masteruid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarGetBattleRetReq::clear_has_masteruid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarGetBattleRetReq::clear_masteruid() {
  masteruid_ = GOOGLE_ULONGLONG(0);
  clear_has_masteruid();
}
inline ::google::protobuf::uint64 TActImperialWarGetBattleRetReq::masteruid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetBattleRetReq.MasterUid)
  return masteruid_;
}
inline void TActImperialWarGetBattleRetReq::set_masteruid(::google::protobuf::uint64 value) {
  set_has_masteruid();
  masteruid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetBattleRetReq.MasterUid)
}

// -------------------------------------------------------------------

// TActImperialWarGetBattleRetRsp

// optional uint32 BattleRet = 1;
inline bool TActImperialWarGetBattleRetRsp::has_battleret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarGetBattleRetRsp::set_has_battleret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarGetBattleRetRsp::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarGetBattleRetRsp::clear_battleret() {
  battleret_ = 0u;
  clear_has_battleret();
}
inline ::google::protobuf::uint32 TActImperialWarGetBattleRetRsp::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetBattleRetRsp.BattleRet)
  return battleret_;
}
inline void TActImperialWarGetBattleRetRsp::set_battleret(::google::protobuf::uint32 value) {
  set_has_battleret();
  battleret_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetBattleRetRsp.BattleRet)
}

// -------------------------------------------------------------------

// TActImperialWarEnterWithUserInfoReq

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TActImperialWarEnterWithUserInfoReq::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarEnterWithUserInfoReq::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarEnterWithUserInfoReq::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarEnterWithUserInfoReq::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TActImperialWarEnterWithUserInfoReq::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarEnterWithUserInfoReq.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TActImperialWarEnterWithUserInfoReq::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarEnterWithUserInfoReq.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TActImperialWarEnterWithUserInfoReq::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TActImperialWarEnterWithUserInfoReq::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarEnterWithUserInfoReq.UserInfo)
}

// optional uint32 My7Rank = 2;
inline bool TActImperialWarEnterWithUserInfoReq::has_my7rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarEnterWithUserInfoReq::set_has_my7rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarEnterWithUserInfoReq::clear_has_my7rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarEnterWithUserInfoReq::clear_my7rank() {
  my7rank_ = 0u;
  clear_has_my7rank();
}
inline ::google::protobuf::uint32 TActImperialWarEnterWithUserInfoReq::my7rank() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarEnterWithUserInfoReq.My7Rank)
  return my7rank_;
}
inline void TActImperialWarEnterWithUserInfoReq::set_my7rank(::google::protobuf::uint32 value) {
  set_has_my7rank();
  my7rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarEnterWithUserInfoReq.My7Rank)
}

// optional uint64 MasterUid = 3;
inline bool TActImperialWarEnterWithUserInfoReq::has_masteruid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActImperialWarEnterWithUserInfoReq::set_has_masteruid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActImperialWarEnterWithUserInfoReq::clear_has_masteruid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActImperialWarEnterWithUserInfoReq::clear_masteruid() {
  masteruid_ = GOOGLE_ULONGLONG(0);
  clear_has_masteruid();
}
inline ::google::protobuf::uint64 TActImperialWarEnterWithUserInfoReq::masteruid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarEnterWithUserInfoReq.MasterUid)
  return masteruid_;
}
inline void TActImperialWarEnterWithUserInfoReq::set_masteruid(::google::protobuf::uint64 value) {
  set_has_masteruid();
  masteruid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarEnterWithUserInfoReq.MasterUid)
}

// optional string ServerId = 4;
inline bool TActImperialWarEnterWithUserInfoReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TActImperialWarEnterWithUserInfoReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TActImperialWarEnterWithUserInfoReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TActImperialWarEnterWithUserInfoReq::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TActImperialWarEnterWithUserInfoReq::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarEnterWithUserInfoReq.ServerId)
  return *serverid_;
}
inline void TActImperialWarEnterWithUserInfoReq::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActImperialWarEnterWithUserInfoReq.ServerId)
}
inline void TActImperialWarEnterWithUserInfoReq::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActImperialWarEnterWithUserInfoReq.ServerId)
}
inline void TActImperialWarEnterWithUserInfoReq::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActImperialWarEnterWithUserInfoReq.ServerId)
}
inline ::std::string* TActImperialWarEnterWithUserInfoReq::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarEnterWithUserInfoReq.ServerId)
  return serverid_;
}
inline ::std::string* TActImperialWarEnterWithUserInfoReq::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActImperialWarEnterWithUserInfoReq::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarEnterWithUserInfoReq.ServerId)
}

// -------------------------------------------------------------------

// TActImperialWarGetBattleScoreReq

// optional uint64 Uid = 1;
inline bool TActImperialWarGetBattleScoreReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarGetBattleScoreReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarGetBattleScoreReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarGetBattleScoreReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TActImperialWarGetBattleScoreReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetBattleScoreReq.Uid)
  return uid_;
}
inline void TActImperialWarGetBattleScoreReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetBattleScoreReq.Uid)
}

// optional string ServerId = 2;
inline bool TActImperialWarGetBattleScoreReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarGetBattleScoreReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarGetBattleScoreReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarGetBattleScoreReq::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TActImperialWarGetBattleScoreReq::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetBattleScoreReq.ServerId)
  return *serverid_;
}
inline void TActImperialWarGetBattleScoreReq::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetBattleScoreReq.ServerId)
}
inline void TActImperialWarGetBattleScoreReq::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActImperialWarGetBattleScoreReq.ServerId)
}
inline void TActImperialWarGetBattleScoreReq::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActImperialWarGetBattleScoreReq.ServerId)
}
inline ::std::string* TActImperialWarGetBattleScoreReq::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarGetBattleScoreReq.ServerId)
  return serverid_;
}
inline ::std::string* TActImperialWarGetBattleScoreReq::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActImperialWarGetBattleScoreReq::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarGetBattleScoreReq.ServerId)
}

// -------------------------------------------------------------------

// TActImperialWarGetBattleScoreRsp

// optional uint32 Score = 1;
inline bool TActImperialWarGetBattleScoreRsp::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarGetBattleScoreRsp::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarGetBattleScoreRsp::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarGetBattleScoreRsp::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TActImperialWarGetBattleScoreRsp::score() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarGetBattleScoreRsp.Score)
  return score_;
}
inline void TActImperialWarGetBattleScoreRsp::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarGetBattleScoreRsp.Score)
}

// -------------------------------------------------------------------

// TActImperialWarBattleInfo

// optional uint64 FieldId = 1;
inline bool TActImperialWarBattleInfo::has_fieldid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarBattleInfo::set_has_fieldid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarBattleInfo::clear_has_fieldid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarBattleInfo::clear_fieldid() {
  fieldid_ = GOOGLE_ULONGLONG(0);
  clear_has_fieldid();
}
inline ::google::protobuf::uint64 TActImperialWarBattleInfo::fieldid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarBattleInfo.FieldId)
  return fieldid_;
}
inline void TActImperialWarBattleInfo::set_fieldid(::google::protobuf::uint64 value) {
  set_has_fieldid();
  fieldid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarBattleInfo.FieldId)
}

// optional .pb.TActImperialWarBattleTeamInfo AtkInfo = 2;
inline bool TActImperialWarBattleInfo::has_atkinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarBattleInfo::set_has_atkinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarBattleInfo::clear_has_atkinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarBattleInfo::clear_atkinfo() {
  if (atkinfo_ != NULL) atkinfo_->::pb::TActImperialWarBattleTeamInfo::Clear();
  clear_has_atkinfo();
}
inline const ::pb::TActImperialWarBattleTeamInfo& TActImperialWarBattleInfo::atkinfo() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarBattleInfo.AtkInfo)
  return atkinfo_ != NULL ? *atkinfo_ : *default_instance_->atkinfo_;
}
inline ::pb::TActImperialWarBattleTeamInfo* TActImperialWarBattleInfo::mutable_atkinfo() {
  set_has_atkinfo();
  if (atkinfo_ == NULL) atkinfo_ = new ::pb::TActImperialWarBattleTeamInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarBattleInfo.AtkInfo)
  return atkinfo_;
}
inline ::pb::TActImperialWarBattleTeamInfo* TActImperialWarBattleInfo::release_atkinfo() {
  clear_has_atkinfo();
  ::pb::TActImperialWarBattleTeamInfo* temp = atkinfo_;
  atkinfo_ = NULL;
  return temp;
}
inline void TActImperialWarBattleInfo::set_allocated_atkinfo(::pb::TActImperialWarBattleTeamInfo* atkinfo) {
  delete atkinfo_;
  atkinfo_ = atkinfo;
  if (atkinfo) {
    set_has_atkinfo();
  } else {
    clear_has_atkinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarBattleInfo.AtkInfo)
}

// optional .pb.TActImperialWarBattleTeamInfo DefInfo = 3;
inline bool TActImperialWarBattleInfo::has_definfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActImperialWarBattleInfo::set_has_definfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActImperialWarBattleInfo::clear_has_definfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActImperialWarBattleInfo::clear_definfo() {
  if (definfo_ != NULL) definfo_->::pb::TActImperialWarBattleTeamInfo::Clear();
  clear_has_definfo();
}
inline const ::pb::TActImperialWarBattleTeamInfo& TActImperialWarBattleInfo::definfo() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarBattleInfo.DefInfo)
  return definfo_ != NULL ? *definfo_ : *default_instance_->definfo_;
}
inline ::pb::TActImperialWarBattleTeamInfo* TActImperialWarBattleInfo::mutable_definfo() {
  set_has_definfo();
  if (definfo_ == NULL) definfo_ = new ::pb::TActImperialWarBattleTeamInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarBattleInfo.DefInfo)
  return definfo_;
}
inline ::pb::TActImperialWarBattleTeamInfo* TActImperialWarBattleInfo::release_definfo() {
  clear_has_definfo();
  ::pb::TActImperialWarBattleTeamInfo* temp = definfo_;
  definfo_ = NULL;
  return temp;
}
inline void TActImperialWarBattleInfo::set_allocated_definfo(::pb::TActImperialWarBattleTeamInfo* definfo) {
  delete definfo_;
  definfo_ = definfo;
  if (definfo) {
    set_has_definfo();
  } else {
    clear_has_definfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarBattleInfo.DefInfo)
}

// optional uint32 BattleRet = 4;
inline bool TActImperialWarBattleInfo::has_battleret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TActImperialWarBattleInfo::set_has_battleret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TActImperialWarBattleInfo::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TActImperialWarBattleInfo::clear_battleret() {
  battleret_ = 0u;
  clear_has_battleret();
}
inline ::google::protobuf::uint32 TActImperialWarBattleInfo::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarBattleInfo.BattleRet)
  return battleret_;
}
inline void TActImperialWarBattleInfo::set_battleret(::google::protobuf::uint32 value) {
  set_has_battleret();
  battleret_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarBattleInfo.BattleRet)
}

// optional uint64 UpdateTime = 5;
inline bool TActImperialWarBattleInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TActImperialWarBattleInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TActImperialWarBattleInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TActImperialWarBattleInfo::clear_updatetime() {
  updatetime_ = GOOGLE_ULONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::uint64 TActImperialWarBattleInfo::updatetime() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarBattleInfo.UpdateTime)
  return updatetime_;
}
inline void TActImperialWarBattleInfo::set_updatetime(::google::protobuf::uint64 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarBattleInfo.UpdateTime)
}

// optional uint64 PeriodKey = 6;
inline bool TActImperialWarBattleInfo::has_periodkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TActImperialWarBattleInfo::set_has_periodkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TActImperialWarBattleInfo::clear_has_periodkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TActImperialWarBattleInfo::clear_periodkey() {
  periodkey_ = GOOGLE_ULONGLONG(0);
  clear_has_periodkey();
}
inline ::google::protobuf::uint64 TActImperialWarBattleInfo::periodkey() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarBattleInfo.PeriodKey)
  return periodkey_;
}
inline void TActImperialWarBattleInfo::set_periodkey(::google::protobuf::uint64 value) {
  set_has_periodkey();
  periodkey_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarBattleInfo.PeriodKey)
}

// optional uint32 TeamId = 7;
inline bool TActImperialWarBattleInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TActImperialWarBattleInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TActImperialWarBattleInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TActImperialWarBattleInfo::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TActImperialWarBattleInfo::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarBattleInfo.TeamId)
  return teamid_;
}
inline void TActImperialWarBattleInfo::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarBattleInfo.TeamId)
}

// -------------------------------------------------------------------

// TActImperialWarBattleTeamInfo

// optional uint64 MasterUid = 1;
inline bool TActImperialWarBattleTeamInfo::has_masteruid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActImperialWarBattleTeamInfo::set_has_masteruid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActImperialWarBattleTeamInfo::clear_has_masteruid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActImperialWarBattleTeamInfo::clear_masteruid() {
  masteruid_ = GOOGLE_ULONGLONG(0);
  clear_has_masteruid();
}
inline ::google::protobuf::uint64 TActImperialWarBattleTeamInfo::masteruid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarBattleTeamInfo.MasterUid)
  return masteruid_;
}
inline void TActImperialWarBattleTeamInfo::set_masteruid(::google::protobuf::uint64 value) {
  set_has_masteruid();
  masteruid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarBattleTeamInfo.MasterUid)
}

// optional string MasterSid = 2;
inline bool TActImperialWarBattleTeamInfo::has_mastersid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActImperialWarBattleTeamInfo::set_has_mastersid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActImperialWarBattleTeamInfo::clear_has_mastersid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActImperialWarBattleTeamInfo::clear_mastersid() {
  if (mastersid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastersid_->clear();
  }
  clear_has_mastersid();
}
inline const ::std::string& TActImperialWarBattleTeamInfo::mastersid() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarBattleTeamInfo.MasterSid)
  return *mastersid_;
}
inline void TActImperialWarBattleTeamInfo::set_mastersid(const ::std::string& value) {
  set_has_mastersid();
  if (mastersid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastersid_ = new ::std::string;
  }
  mastersid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActImperialWarBattleTeamInfo.MasterSid)
}
inline void TActImperialWarBattleTeamInfo::set_mastersid(const char* value) {
  set_has_mastersid();
  if (mastersid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastersid_ = new ::std::string;
  }
  mastersid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActImperialWarBattleTeamInfo.MasterSid)
}
inline void TActImperialWarBattleTeamInfo::set_mastersid(const char* value, size_t size) {
  set_has_mastersid();
  if (mastersid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastersid_ = new ::std::string;
  }
  mastersid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActImperialWarBattleTeamInfo.MasterSid)
}
inline ::std::string* TActImperialWarBattleTeamInfo::mutable_mastersid() {
  set_has_mastersid();
  if (mastersid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastersid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarBattleTeamInfo.MasterSid)
  return mastersid_;
}
inline ::std::string* TActImperialWarBattleTeamInfo::release_mastersid() {
  clear_has_mastersid();
  if (mastersid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mastersid_;
    mastersid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActImperialWarBattleTeamInfo::set_allocated_mastersid(::std::string* mastersid) {
  if (mastersid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mastersid_;
  }
  if (mastersid) {
    set_has_mastersid();
    mastersid_ = mastersid;
  } else {
    clear_has_mastersid();
    mastersid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarBattleTeamInfo.MasterSid)
}

// optional uint32 MasterScore = 3;
inline bool TActImperialWarBattleTeamInfo::has_masterscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActImperialWarBattleTeamInfo::set_has_masterscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActImperialWarBattleTeamInfo::clear_has_masterscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActImperialWarBattleTeamInfo::clear_masterscore() {
  masterscore_ = 0u;
  clear_has_masterscore();
}
inline ::google::protobuf::uint32 TActImperialWarBattleTeamInfo::masterscore() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarBattleTeamInfo.MasterScore)
  return masterscore_;
}
inline void TActImperialWarBattleTeamInfo::set_masterscore(::google::protobuf::uint32 value) {
  set_has_masterscore();
  masterscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarBattleTeamInfo.MasterScore)
}

// repeated string SubTeamInfo = 4;
inline int TActImperialWarBattleTeamInfo::subteaminfo_size() const {
  return subteaminfo_.size();
}
inline void TActImperialWarBattleTeamInfo::clear_subteaminfo() {
  subteaminfo_.Clear();
}
inline const ::std::string& TActImperialWarBattleTeamInfo::subteaminfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarBattleTeamInfo.SubTeamInfo)
  return subteaminfo_.Get(index);
}
inline ::std::string* TActImperialWarBattleTeamInfo::mutable_subteaminfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarBattleTeamInfo.SubTeamInfo)
  return subteaminfo_.Mutable(index);
}
inline void TActImperialWarBattleTeamInfo::set_subteaminfo(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TActImperialWarBattleTeamInfo.SubTeamInfo)
  subteaminfo_.Mutable(index)->assign(value);
}
inline void TActImperialWarBattleTeamInfo::set_subteaminfo(int index, const char* value) {
  subteaminfo_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActImperialWarBattleTeamInfo.SubTeamInfo)
}
inline void TActImperialWarBattleTeamInfo::set_subteaminfo(int index, const char* value, size_t size) {
  subteaminfo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActImperialWarBattleTeamInfo.SubTeamInfo)
}
inline ::std::string* TActImperialWarBattleTeamInfo::add_subteaminfo() {
  return subteaminfo_.Add();
}
inline void TActImperialWarBattleTeamInfo::add_subteaminfo(const ::std::string& value) {
  subteaminfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TActImperialWarBattleTeamInfo.SubTeamInfo)
}
inline void TActImperialWarBattleTeamInfo::add_subteaminfo(const char* value) {
  subteaminfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TActImperialWarBattleTeamInfo.SubTeamInfo)
}
inline void TActImperialWarBattleTeamInfo::add_subteaminfo(const char* value, size_t size) {
  subteaminfo_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TActImperialWarBattleTeamInfo.SubTeamInfo)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TActImperialWarBattleTeamInfo::subteaminfo() const {
  // @@protoc_insertion_point(field_list:pb.TActImperialWarBattleTeamInfo.SubTeamInfo)
  return subteaminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TActImperialWarBattleTeamInfo::mutable_subteaminfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActImperialWarBattleTeamInfo.SubTeamInfo)
  return &subteaminfo_;
}

// optional string Name = 5;
inline bool TActImperialWarBattleTeamInfo::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TActImperialWarBattleTeamInfo::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TActImperialWarBattleTeamInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TActImperialWarBattleTeamInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TActImperialWarBattleTeamInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarBattleTeamInfo.Name)
  return *name_;
}
inline void TActImperialWarBattleTeamInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActImperialWarBattleTeamInfo.Name)
}
inline void TActImperialWarBattleTeamInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActImperialWarBattleTeamInfo.Name)
}
inline void TActImperialWarBattleTeamInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActImperialWarBattleTeamInfo.Name)
}
inline ::std::string* TActImperialWarBattleTeamInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActImperialWarBattleTeamInfo.Name)
  return name_;
}
inline ::std::string* TActImperialWarBattleTeamInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActImperialWarBattleTeamInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActImperialWarBattleTeamInfo.Name)
}

// optional int64 Score = 6;
inline bool TActImperialWarBattleTeamInfo::has_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TActImperialWarBattleTeamInfo::set_has_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TActImperialWarBattleTeamInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TActImperialWarBattleTeamInfo::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 TActImperialWarBattleTeamInfo::score() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarBattleTeamInfo.Score)
  return score_;
}
inline void TActImperialWarBattleTeamInfo::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarBattleTeamInfo.Score)
}

// optional int32 LeftRight = 7;
inline bool TActImperialWarBattleTeamInfo::has_leftright() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TActImperialWarBattleTeamInfo::set_has_leftright() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TActImperialWarBattleTeamInfo::clear_has_leftright() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TActImperialWarBattleTeamInfo::clear_leftright() {
  leftright_ = 0;
  clear_has_leftright();
}
inline ::google::protobuf::int32 TActImperialWarBattleTeamInfo::leftright() const {
  // @@protoc_insertion_point(field_get:pb.TActImperialWarBattleTeamInfo.LeftRight)
  return leftright_;
}
inline void TActImperialWarBattleTeamInfo::set_leftright(::google::protobuf::int32 value) {
  set_has_leftright();
  leftright_ = value;
  // @@protoc_insertion_point(field_set:pb.TActImperialWarBattleTeamInfo.LeftRight)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActImperialWar_2eproto__INCLUDED
