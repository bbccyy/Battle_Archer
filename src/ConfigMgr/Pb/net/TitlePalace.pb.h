// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/TitlePalace.proto

#ifndef PROTOBUF_net_2fTitlePalace_2eproto__INCLUDED
#define PROTOBUF_net_2fTitlePalace_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fTitlePalace_2eproto();
void protobuf_AssignDesc_net_2fTitlePalace_2eproto();
void protobuf_ShutdownFile_net_2fTitlePalace_2eproto();

class TInTitlePalaceAchievementReward;
class TTitlePalaceUserInfo;
class TTitlePalaceInfo;
class TTitlePalaceGetInfoRsp;
class TTitlePalaceEntryPalaceReq;
class TTitlePalaceEntryPalaceRsp;
class TTitlePalaceProstrateReq;
class TTitlePalaceProstrateRsp;
class TTitlePalaceGetUserInfoRsp;
class TTitlePalaceGetPalaceInfoReq;
class TTitlePalaceGetPalaceInfoRsp;
class TTitlePalaceNotify;
class TTitlePalaceAchievementNotify;
class TInTitlePalaceGetAchievementInfoRsp;
class TTitlePalaceReceiveRewardReq;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TInTitlePalaceAchievementReward</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TitlePalace.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TInTitlePalaceAchievementReward : public ::google::protobuf::Message {
 public:
  TInTitlePalaceAchievementReward();
  virtual ~TInTitlePalaceAchievementReward();

  TInTitlePalaceAchievementReward(const TInTitlePalaceAchievementReward& from);

  inline TInTitlePalaceAchievementReward& operator=(const TInTitlePalaceAchievementReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TInTitlePalaceAchievementReward& default_instance();

  void Swap(TInTitlePalaceAchievementReward* other);

  // implements Message ----------------------------------------------

  TInTitlePalaceAchievementReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TInTitlePalaceAchievementReward& from);
  void MergeFrom(const TInTitlePalaceAchievementReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AchievementId = 1;
  inline bool has_achievementid() const;
  inline void clear_achievementid();
  static const int kAchievementIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TInTitlePalaceAchievementReward</name>
  	<Function>
  		<name>achievementid</name>
  		<replaceName>AchievementId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_achievementid</name>
  		<replaceName>AchievementId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_achievementid</name>
  		<replaceName>AchievementId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 achievementid() const;
  inline void set_achievementid(::google::protobuf::uint32 value);

  // optional uint64 RewardTime = 2;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TInTitlePalaceAchievementReward</name>
  	<Function>
  		<name>rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TInTitlePalaceAchievementReward)
 private:
  inline void set_has_achievementid();
  inline void clear_has_achievementid();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rewardtime_;
  ::google::protobuf::uint32 achievementid_;
  friend void  protobuf_AddDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_AssignDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_ShutdownFile_net_2fTitlePalace_2eproto();

  void InitAsDefaultInstance();
  static TInTitlePalaceAchievementReward* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTitlePalaceUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TitlePalace.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTitlePalaceUserInfo : public ::google::protobuf::Message {
 public:
  TTitlePalaceUserInfo();
  virtual ~TTitlePalaceUserInfo();

  TTitlePalaceUserInfo(const TTitlePalaceUserInfo& from);

  inline TTitlePalaceUserInfo& operator=(const TTitlePalaceUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTitlePalaceUserInfo& default_instance();

  void Swap(TTitlePalaceUserInfo* other);

  // implements Message ----------------------------------------------

  TTitlePalaceUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTitlePalaceUserInfo& from);
  void MergeFrom(const TTitlePalaceUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceUserInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint64 Popularity = 2;
  inline bool has_popularity() const;
  inline void clear_popularity();
  static const int kPopularityFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceUserInfo</name>
  	<Function>
  		<name>popularity</name>
  		<replaceName>Popularity</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_popularity</name>
  		<replaceName>Popularity</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_popularity</name>
  		<replaceName>Popularity</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 popularity() const;
  inline void set_popularity(::google::protobuf::uint64 value);

  // optional uint64 EntryTime = 3;
  inline bool has_entrytime() const;
  inline void clear_entrytime();
  static const int kEntryTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceUserInfo</name>
  	<Function>
  		<name>entrytime</name>
  		<replaceName>EntryTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_entrytime</name>
  		<replaceName>EntryTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_entrytime</name>
  		<replaceName>EntryTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 entrytime() const;
  inline void set_entrytime(::google::protobuf::uint64 value);

  // optional uint64 EndEntryTime = 4;
  inline bool has_endentrytime() const;
  inline void clear_endentrytime();
  static const int kEndEntryTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceUserInfo</name>
  	<Function>
  		<name>endentrytime</name>
  		<replaceName>EndEntryTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endentrytime</name>
  		<replaceName>EndEntryTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endentrytime</name>
  		<replaceName>EndEntryTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endentrytime() const;
  inline void set_endentrytime(::google::protobuf::uint64 value);

  // optional uint64 AllyId = 5;
  inline bool has_allyid() const;
  inline void clear_allyid();
  static const int kAllyIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceUserInfo</name>
  	<Function>
  		<name>allyid</name>
  		<replaceName>AllyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allyid</name>
  		<replaceName>AllyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allyid</name>
  		<replaceName>AllyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 allyid() const;
  inline void set_allyid(::google::protobuf::uint64 value);

  // optional uint32 TitleId = 6;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleIdFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceUserInfo</name>
  	<Function>
  		<name>titleid</name>
  		<replaceName>TitleId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_titleid</name>
  		<replaceName>TitleId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_titleid</name>
  		<replaceName>TitleId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 titleid() const;
  inline void set_titleid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTitlePalaceUserInfo)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_popularity();
  inline void clear_has_popularity();
  inline void set_has_entrytime();
  inline void clear_has_entrytime();
  inline void set_has_endentrytime();
  inline void clear_has_endentrytime();
  inline void set_has_allyid();
  inline void clear_has_allyid();
  inline void set_has_titleid();
  inline void clear_has_titleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint64 popularity_;
  ::google::protobuf::uint64 entrytime_;
  ::google::protobuf::uint64 endentrytime_;
  ::google::protobuf::uint64 allyid_;
  ::google::protobuf::uint32 titleid_;
  friend void  protobuf_AddDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_AssignDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_ShutdownFile_net_2fTitlePalace_2eproto();

  void InitAsDefaultInstance();
  static TTitlePalaceUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTitlePalaceInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TitlePalace.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTitlePalaceInfo : public ::google::protobuf::Message {
 public:
  TTitlePalaceInfo();
  virtual ~TTitlePalaceInfo();

  TTitlePalaceInfo(const TTitlePalaceInfo& from);

  inline TTitlePalaceInfo& operator=(const TTitlePalaceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTitlePalaceInfo& default_instance();

  void Swap(TTitlePalaceInfo* other);

  // implements Message ----------------------------------------------

  TTitlePalaceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTitlePalaceInfo& from);
  void MergeFrom(const TTitlePalaceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 PalaceId = 1;
  inline bool has_palaceid() const;
  inline void clear_palaceid();
  static const int kPalaceIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceInfo</name>
  	<Function>
  		<name>palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 palaceid() const;
  inline void set_palaceid(::google::protobuf::uint64 value);

  // repeated .pb.TTitlePalaceUserInfo PalaceUserInfoArr = 2;
  inline int palaceuserinfoarr_size() const;
  inline void clear_palaceuserinfoarr();
  static const int kPalaceUserInfoArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceInfo</name>
  	<Function>
  		<name>palaceuserinfoarr</name>
  		<replaceName>PalaceUserInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_palaceuserinfoarr</name>
  		<replaceName>PalaceUserInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_palaceuserinfoarr</name>
  		<replaceName>PalaceUserInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_palaceuserinfoarr</name>
  		<replaceName>PalaceUserInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>palaceuserinfoarr_size</name>
  		<replaceName>PalaceUserInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTitlePalaceUserInfo& palaceuserinfoarr(int index) const;
  inline ::pb::TTitlePalaceUserInfo* mutable_palaceuserinfoarr(int index);
  inline ::pb::TTitlePalaceUserInfo* add_palaceuserinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTitlePalaceUserInfo >&
      palaceuserinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTitlePalaceUserInfo >*
      mutable_palaceuserinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TTitlePalaceInfo)
 private:
  inline void set_has_palaceid();
  inline void clear_has_palaceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 palaceid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTitlePalaceUserInfo > palaceuserinfoarr_;
  friend void  protobuf_AddDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_AssignDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_ShutdownFile_net_2fTitlePalace_2eproto();

  void InitAsDefaultInstance();
  static TTitlePalaceInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTitlePalaceGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TitlePalace.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTitlePalaceGetInfoRsp : public ::google::protobuf::Message {
 public:
  TTitlePalaceGetInfoRsp();
  virtual ~TTitlePalaceGetInfoRsp();

  TTitlePalaceGetInfoRsp(const TTitlePalaceGetInfoRsp& from);

  inline TTitlePalaceGetInfoRsp& operator=(const TTitlePalaceGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTitlePalaceGetInfoRsp& default_instance();

  void Swap(TTitlePalaceGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TTitlePalaceGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTitlePalaceGetInfoRsp& from);
  void MergeFrom(const TTitlePalaceGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Popularity = 1;
  inline bool has_popularity() const;
  inline void clear_popularity();
  static const int kPopularityFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceGetInfoRsp</name>
  	<Function>
  		<name>popularity</name>
  		<replaceName>Popularity</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_popularity</name>
  		<replaceName>Popularity</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_popularity</name>
  		<replaceName>Popularity</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 popularity() const;
  inline void set_popularity(::google::protobuf::uint64 value);

  // optional uint32 ProstrateNum = 2;
  inline bool has_prostratenum() const;
  inline void clear_prostratenum();
  static const int kProstrateNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceGetInfoRsp</name>
  	<Function>
  		<name>prostratenum</name>
  		<replaceName>ProstrateNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_prostratenum</name>
  		<replaceName>ProstrateNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_prostratenum</name>
  		<replaceName>ProstrateNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 prostratenum() const;
  inline void set_prostratenum(::google::protobuf::uint32 value);

  // optional uint64 PalaceId = 3;
  inline bool has_palaceid() const;
  inline void clear_palaceid();
  static const int kPalaceIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceGetInfoRsp</name>
  	<Function>
  		<name>palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 palaceid() const;
  inline void set_palaceid(::google::protobuf::uint64 value);

  // optional uint64 EntryTime = 4;
  inline bool has_entrytime() const;
  inline void clear_entrytime();
  static const int kEntryTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceGetInfoRsp</name>
  	<Function>
  		<name>entrytime</name>
  		<replaceName>EntryTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_entrytime</name>
  		<replaceName>EntryTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_entrytime</name>
  		<replaceName>EntryTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 entrytime() const;
  inline void set_entrytime(::google::protobuf::uint64 value);

  // optional uint64 EndEntryTime = 5;
  inline bool has_endentrytime() const;
  inline void clear_endentrytime();
  static const int kEndEntryTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceGetInfoRsp</name>
  	<Function>
  		<name>endentrytime</name>
  		<replaceName>EndEntryTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endentrytime</name>
  		<replaceName>EndEntryTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endentrytime</name>
  		<replaceName>EndEntryTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endentrytime() const;
  inline void set_endentrytime(::google::protobuf::uint64 value);

  // optional uint64 AllyId = 6;
  inline bool has_allyid() const;
  inline void clear_allyid();
  static const int kAllyIdFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceGetInfoRsp</name>
  	<Function>
  		<name>allyid</name>
  		<replaceName>AllyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allyid</name>
  		<replaceName>AllyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allyid</name>
  		<replaceName>AllyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 allyid() const;
  inline void set_allyid(::google::protobuf::uint64 value);

  // repeated .pb.TTitlePalaceInfo TitlePalaceInfoArr = 7;
  inline int titlepalaceinfoarr_size() const;
  inline void clear_titlepalaceinfoarr();
  static const int kTitlePalaceInfoArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceGetInfoRsp</name>
  	<Function>
  		<name>titlepalaceinfoarr</name>
  		<replaceName>TitlePalaceInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_titlepalaceinfoarr</name>
  		<replaceName>TitlePalaceInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_titlepalaceinfoarr</name>
  		<replaceName>TitlePalaceInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_titlepalaceinfoarr</name>
  		<replaceName>TitlePalaceInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>titlepalaceinfoarr_size</name>
  		<replaceName>TitlePalaceInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTitlePalaceInfo& titlepalaceinfoarr(int index) const;
  inline ::pb::TTitlePalaceInfo* mutable_titlepalaceinfoarr(int index);
  inline ::pb::TTitlePalaceInfo* add_titlepalaceinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTitlePalaceInfo >&
      titlepalaceinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTitlePalaceInfo >*
      mutable_titlepalaceinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TTitlePalaceGetInfoRsp)
 private:
  inline void set_has_popularity();
  inline void clear_has_popularity();
  inline void set_has_prostratenum();
  inline void clear_has_prostratenum();
  inline void set_has_palaceid();
  inline void clear_has_palaceid();
  inline void set_has_entrytime();
  inline void clear_has_entrytime();
  inline void set_has_endentrytime();
  inline void clear_has_endentrytime();
  inline void set_has_allyid();
  inline void clear_has_allyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 popularity_;
  ::google::protobuf::uint64 palaceid_;
  ::google::protobuf::uint64 entrytime_;
  ::google::protobuf::uint64 endentrytime_;
  ::google::protobuf::uint64 allyid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTitlePalaceInfo > titlepalaceinfoarr_;
  ::google::protobuf::uint32 prostratenum_;
  friend void  protobuf_AddDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_AssignDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_ShutdownFile_net_2fTitlePalace_2eproto();

  void InitAsDefaultInstance();
  static TTitlePalaceGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTitlePalaceEntryPalaceReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TitlePalace.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTitlePalaceEntryPalaceReq : public ::google::protobuf::Message {
 public:
  TTitlePalaceEntryPalaceReq();
  virtual ~TTitlePalaceEntryPalaceReq();

  TTitlePalaceEntryPalaceReq(const TTitlePalaceEntryPalaceReq& from);

  inline TTitlePalaceEntryPalaceReq& operator=(const TTitlePalaceEntryPalaceReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTitlePalaceEntryPalaceReq& default_instance();

  void Swap(TTitlePalaceEntryPalaceReq* other);

  // implements Message ----------------------------------------------

  TTitlePalaceEntryPalaceReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTitlePalaceEntryPalaceReq& from);
  void MergeFrom(const TTitlePalaceEntryPalaceReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 PalaceId = 1;
  inline bool has_palaceid() const;
  inline void clear_palaceid();
  static const int kPalaceIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceEntryPalaceReq</name>
  	<Function>
  		<name>palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 palaceid() const;
  inline void set_palaceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TTitlePalaceEntryPalaceReq)
 private:
  inline void set_has_palaceid();
  inline void clear_has_palaceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 palaceid_;
  friend void  protobuf_AddDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_AssignDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_ShutdownFile_net_2fTitlePalace_2eproto();

  void InitAsDefaultInstance();
  static TTitlePalaceEntryPalaceReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTitlePalaceEntryPalaceRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TitlePalace.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTitlePalaceEntryPalaceRsp : public ::google::protobuf::Message {
 public:
  TTitlePalaceEntryPalaceRsp();
  virtual ~TTitlePalaceEntryPalaceRsp();

  TTitlePalaceEntryPalaceRsp(const TTitlePalaceEntryPalaceRsp& from);

  inline TTitlePalaceEntryPalaceRsp& operator=(const TTitlePalaceEntryPalaceRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTitlePalaceEntryPalaceRsp& default_instance();

  void Swap(TTitlePalaceEntryPalaceRsp* other);

  // implements Message ----------------------------------------------

  TTitlePalaceEntryPalaceRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTitlePalaceEntryPalaceRsp& from);
  void MergeFrom(const TTitlePalaceEntryPalaceRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 EntryTime = 1;
  inline bool has_entrytime() const;
  inline void clear_entrytime();
  static const int kEntryTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceEntryPalaceRsp</name>
  	<Function>
  		<name>entrytime</name>
  		<replaceName>EntryTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_entrytime</name>
  		<replaceName>EntryTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_entrytime</name>
  		<replaceName>EntryTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 entrytime() const;
  inline void set_entrytime(::google::protobuf::uint64 value);

  // optional uint64 EndEntryTime = 2;
  inline bool has_endentrytime() const;
  inline void clear_endentrytime();
  static const int kEndEntryTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceEntryPalaceRsp</name>
  	<Function>
  		<name>endentrytime</name>
  		<replaceName>EndEntryTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endentrytime</name>
  		<replaceName>EndEntryTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endentrytime</name>
  		<replaceName>EndEntryTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endentrytime() const;
  inline void set_endentrytime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TTitlePalaceEntryPalaceRsp)
 private:
  inline void set_has_entrytime();
  inline void clear_has_entrytime();
  inline void set_has_endentrytime();
  inline void clear_has_endentrytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 entrytime_;
  ::google::protobuf::uint64 endentrytime_;
  friend void  protobuf_AddDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_AssignDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_ShutdownFile_net_2fTitlePalace_2eproto();

  void InitAsDefaultInstance();
  static TTitlePalaceEntryPalaceRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTitlePalaceProstrateReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TitlePalace.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTitlePalaceProstrateReq : public ::google::protobuf::Message {
 public:
  TTitlePalaceProstrateReq();
  virtual ~TTitlePalaceProstrateReq();

  TTitlePalaceProstrateReq(const TTitlePalaceProstrateReq& from);

  inline TTitlePalaceProstrateReq& operator=(const TTitlePalaceProstrateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTitlePalaceProstrateReq& default_instance();

  void Swap(TTitlePalaceProstrateReq* other);

  // implements Message ----------------------------------------------

  TTitlePalaceProstrateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTitlePalaceProstrateReq& from);
  void MergeFrom(const TTitlePalaceProstrateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 PalaceId = 1;
  inline bool has_palaceid() const;
  inline void clear_palaceid();
  static const int kPalaceIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceProstrateReq</name>
  	<Function>
  		<name>palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 palaceid() const;
  inline void set_palaceid(::google::protobuf::uint64 value);

  // optional uint64 Uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceProstrateReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TTitlePalaceProstrateReq)
 private:
  inline void set_has_palaceid();
  inline void clear_has_palaceid();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 palaceid_;
  ::google::protobuf::uint64 uid_;
  friend void  protobuf_AddDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_AssignDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_ShutdownFile_net_2fTitlePalace_2eproto();

  void InitAsDefaultInstance();
  static TTitlePalaceProstrateReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTitlePalaceProstrateRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TitlePalace.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTitlePalaceProstrateRsp : public ::google::protobuf::Message {
 public:
  TTitlePalaceProstrateRsp();
  virtual ~TTitlePalaceProstrateRsp();

  TTitlePalaceProstrateRsp(const TTitlePalaceProstrateRsp& from);

  inline TTitlePalaceProstrateRsp& operator=(const TTitlePalaceProstrateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTitlePalaceProstrateRsp& default_instance();

  void Swap(TTitlePalaceProstrateRsp* other);

  // implements Message ----------------------------------------------

  TTitlePalaceProstrateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTitlePalaceProstrateRsp& from);
  void MergeFrom(const TTitlePalaceProstrateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceProstrateRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TTitlePalaceProstrateRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_AssignDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_ShutdownFile_net_2fTitlePalace_2eproto();

  void InitAsDefaultInstance();
  static TTitlePalaceProstrateRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTitlePalaceGetUserInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TitlePalace.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTitlePalaceGetUserInfoRsp : public ::google::protobuf::Message {
 public:
  TTitlePalaceGetUserInfoRsp();
  virtual ~TTitlePalaceGetUserInfoRsp();

  TTitlePalaceGetUserInfoRsp(const TTitlePalaceGetUserInfoRsp& from);

  inline TTitlePalaceGetUserInfoRsp& operator=(const TTitlePalaceGetUserInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTitlePalaceGetUserInfoRsp& default_instance();

  void Swap(TTitlePalaceGetUserInfoRsp* other);

  // implements Message ----------------------------------------------

  TTitlePalaceGetUserInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTitlePalaceGetUserInfoRsp& from);
  void MergeFrom(const TTitlePalaceGetUserInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ProstrateNum = 1;
  inline bool has_prostratenum() const;
  inline void clear_prostratenum();
  static const int kProstrateNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceGetUserInfoRsp</name>
  	<Function>
  		<name>prostratenum</name>
  		<replaceName>ProstrateNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_prostratenum</name>
  		<replaceName>ProstrateNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_prostratenum</name>
  		<replaceName>ProstrateNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 prostratenum() const;
  inline void set_prostratenum(::google::protobuf::uint32 value);

  // optional uint64 Popularity = 2;
  inline bool has_popularity() const;
  inline void clear_popularity();
  static const int kPopularityFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceGetUserInfoRsp</name>
  	<Function>
  		<name>popularity</name>
  		<replaceName>Popularity</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_popularity</name>
  		<replaceName>Popularity</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_popularity</name>
  		<replaceName>Popularity</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 popularity() const;
  inline void set_popularity(::google::protobuf::uint64 value);

  // optional uint64 PalaceId = 3;
  inline bool has_palaceid() const;
  inline void clear_palaceid();
  static const int kPalaceIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceGetUserInfoRsp</name>
  	<Function>
  		<name>palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 palaceid() const;
  inline void set_palaceid(::google::protobuf::uint64 value);

  // optional uint64 EntryTime = 4;
  inline bool has_entrytime() const;
  inline void clear_entrytime();
  static const int kEntryTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceGetUserInfoRsp</name>
  	<Function>
  		<name>entrytime</name>
  		<replaceName>EntryTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_entrytime</name>
  		<replaceName>EntryTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_entrytime</name>
  		<replaceName>EntryTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 entrytime() const;
  inline void set_entrytime(::google::protobuf::uint64 value);

  // optional uint64 EndEntryTime = 5;
  inline bool has_endentrytime() const;
  inline void clear_endentrytime();
  static const int kEndEntryTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceGetUserInfoRsp</name>
  	<Function>
  		<name>endentrytime</name>
  		<replaceName>EndEntryTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endentrytime</name>
  		<replaceName>EndEntryTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endentrytime</name>
  		<replaceName>EndEntryTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endentrytime() const;
  inline void set_endentrytime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TTitlePalaceGetUserInfoRsp)
 private:
  inline void set_has_prostratenum();
  inline void clear_has_prostratenum();
  inline void set_has_popularity();
  inline void clear_has_popularity();
  inline void set_has_palaceid();
  inline void clear_has_palaceid();
  inline void set_has_entrytime();
  inline void clear_has_entrytime();
  inline void set_has_endentrytime();
  inline void clear_has_endentrytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 popularity_;
  ::google::protobuf::uint64 palaceid_;
  ::google::protobuf::uint64 entrytime_;
  ::google::protobuf::uint64 endentrytime_;
  ::google::protobuf::uint32 prostratenum_;
  friend void  protobuf_AddDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_AssignDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_ShutdownFile_net_2fTitlePalace_2eproto();

  void InitAsDefaultInstance();
  static TTitlePalaceGetUserInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTitlePalaceGetPalaceInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TitlePalace.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTitlePalaceGetPalaceInfoReq : public ::google::protobuf::Message {
 public:
  TTitlePalaceGetPalaceInfoReq();
  virtual ~TTitlePalaceGetPalaceInfoReq();

  TTitlePalaceGetPalaceInfoReq(const TTitlePalaceGetPalaceInfoReq& from);

  inline TTitlePalaceGetPalaceInfoReq& operator=(const TTitlePalaceGetPalaceInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTitlePalaceGetPalaceInfoReq& default_instance();

  void Swap(TTitlePalaceGetPalaceInfoReq* other);

  // implements Message ----------------------------------------------

  TTitlePalaceGetPalaceInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTitlePalaceGetPalaceInfoReq& from);
  void MergeFrom(const TTitlePalaceGetPalaceInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 PalaceId = 1;
  inline bool has_palaceid() const;
  inline void clear_palaceid();
  static const int kPalaceIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceGetPalaceInfoReq</name>
  	<Function>
  		<name>palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 palaceid() const;
  inline void set_palaceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TTitlePalaceGetPalaceInfoReq)
 private:
  inline void set_has_palaceid();
  inline void clear_has_palaceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 palaceid_;
  friend void  protobuf_AddDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_AssignDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_ShutdownFile_net_2fTitlePalace_2eproto();

  void InitAsDefaultInstance();
  static TTitlePalaceGetPalaceInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTitlePalaceGetPalaceInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TitlePalace.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTitlePalaceGetPalaceInfoRsp : public ::google::protobuf::Message {
 public:
  TTitlePalaceGetPalaceInfoRsp();
  virtual ~TTitlePalaceGetPalaceInfoRsp();

  TTitlePalaceGetPalaceInfoRsp(const TTitlePalaceGetPalaceInfoRsp& from);

  inline TTitlePalaceGetPalaceInfoRsp& operator=(const TTitlePalaceGetPalaceInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTitlePalaceGetPalaceInfoRsp& default_instance();

  void Swap(TTitlePalaceGetPalaceInfoRsp* other);

  // implements Message ----------------------------------------------

  TTitlePalaceGetPalaceInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTitlePalaceGetPalaceInfoRsp& from);
  void MergeFrom(const TTitlePalaceGetPalaceInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TTitlePalaceInfo TitlePalaceInfo = 1;
  inline bool has_titlepalaceinfo() const;
  inline void clear_titlepalaceinfo();
  static const int kTitlePalaceInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceGetPalaceInfoRsp</name>
  	<Function>
  		<name>titlepalaceinfo</name>
  		<replaceName>TitlePalaceInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_titlepalaceinfo</name>
  		<replaceName>TitlePalaceInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_titlepalaceinfo</name>
  		<replaceName>TitlePalaceInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_titlepalaceinfo</name>
  		<replaceName>TitlePalaceInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTitlePalaceInfo& titlepalaceinfo() const;
  inline ::pb::TTitlePalaceInfo* mutable_titlepalaceinfo();
  inline ::pb::TTitlePalaceInfo* release_titlepalaceinfo();
  inline void set_allocated_titlepalaceinfo(::pb::TTitlePalaceInfo* titlepalaceinfo);

  // @@protoc_insertion_point(class_scope:pb.TTitlePalaceGetPalaceInfoRsp)
 private:
  inline void set_has_titlepalaceinfo();
  inline void clear_has_titlepalaceinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TTitlePalaceInfo* titlepalaceinfo_;
  friend void  protobuf_AddDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_AssignDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_ShutdownFile_net_2fTitlePalace_2eproto();

  void InitAsDefaultInstance();
  static TTitlePalaceGetPalaceInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTitlePalaceNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TitlePalace.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTitlePalaceNotify : public ::google::protobuf::Message {
 public:
  TTitlePalaceNotify();
  virtual ~TTitlePalaceNotify();

  TTitlePalaceNotify(const TTitlePalaceNotify& from);

  inline TTitlePalaceNotify& operator=(const TTitlePalaceNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTitlePalaceNotify& default_instance();

  void Swap(TTitlePalaceNotify* other);

  // implements Message ----------------------------------------------

  TTitlePalaceNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTitlePalaceNotify& from);
  void MergeFrom(const TTitlePalaceNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 PalaceId = 1;
  inline bool has_palaceid() const;
  inline void clear_palaceid();
  static const int kPalaceIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceNotify</name>
  	<Function>
  		<name>palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_palaceid</name>
  		<replaceName>PalaceId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 palaceid() const;
  inline void set_palaceid(::google::protobuf::uint64 value);

  // optional uint64 Uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceNotify</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 Popularity = 3;
  inline bool has_popularity() const;
  inline void clear_popularity();
  static const int kPopularityFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceNotify</name>
  	<Function>
  		<name>popularity</name>
  		<replaceName>Popularity</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_popularity</name>
  		<replaceName>Popularity</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_popularity</name>
  		<replaceName>Popularity</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 popularity() const;
  inline void set_popularity(::google::protobuf::uint32 value);

  // optional uint32 ProstrateNum = 4;
  inline bool has_prostratenum() const;
  inline void clear_prostratenum();
  static const int kProstrateNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceNotify</name>
  	<Function>
  		<name>prostratenum</name>
  		<replaceName>ProstrateNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_prostratenum</name>
  		<replaceName>ProstrateNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_prostratenum</name>
  		<replaceName>ProstrateNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 prostratenum() const;
  inline void set_prostratenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTitlePalaceNotify)
 private:
  inline void set_has_palaceid();
  inline void clear_has_palaceid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_popularity();
  inline void clear_has_popularity();
  inline void set_has_prostratenum();
  inline void clear_has_prostratenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 palaceid_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 popularity_;
  ::google::protobuf::uint32 prostratenum_;
  friend void  protobuf_AddDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_AssignDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_ShutdownFile_net_2fTitlePalace_2eproto();

  void InitAsDefaultInstance();
  static TTitlePalaceNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTitlePalaceAchievementNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TitlePalace.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTitlePalaceAchievementNotify : public ::google::protobuf::Message {
 public:
  TTitlePalaceAchievementNotify();
  virtual ~TTitlePalaceAchievementNotify();

  TTitlePalaceAchievementNotify(const TTitlePalaceAchievementNotify& from);

  inline TTitlePalaceAchievementNotify& operator=(const TTitlePalaceAchievementNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTitlePalaceAchievementNotify& default_instance();

  void Swap(TTitlePalaceAchievementNotify* other);

  // implements Message ----------------------------------------------

  TTitlePalaceAchievementNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTitlePalaceAchievementNotify& from);
  void MergeFrom(const TTitlePalaceAchievementNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 AchievementIdArr = 1;
  inline int achievementidarr_size() const;
  inline void clear_achievementidarr();
  static const int kAchievementIdArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceAchievementNotify</name>
  	<Function>
  		<name>achievementidarr</name>
  		<replaceName>AchievementIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_achievementidarr</name>
  		<replaceName>AchievementIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_achievementidarr</name>
  		<replaceName>AchievementIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_achievementidarr</name>
  		<replaceName>AchievementIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>achievementidarr_size</name>
  		<replaceName>AchievementIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 achievementidarr(int index) const;
  inline void set_achievementidarr(int index, ::google::protobuf::uint32 value);
  inline void add_achievementidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      achievementidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_achievementidarr();

  // @@protoc_insertion_point(class_scope:pb.TTitlePalaceAchievementNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > achievementidarr_;
  friend void  protobuf_AddDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_AssignDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_ShutdownFile_net_2fTitlePalace_2eproto();

  void InitAsDefaultInstance();
  static TTitlePalaceAchievementNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TInTitlePalaceGetAchievementInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TitlePalace.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TInTitlePalaceGetAchievementInfoRsp : public ::google::protobuf::Message {
 public:
  TInTitlePalaceGetAchievementInfoRsp();
  virtual ~TInTitlePalaceGetAchievementInfoRsp();

  TInTitlePalaceGetAchievementInfoRsp(const TInTitlePalaceGetAchievementInfoRsp& from);

  inline TInTitlePalaceGetAchievementInfoRsp& operator=(const TInTitlePalaceGetAchievementInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TInTitlePalaceGetAchievementInfoRsp& default_instance();

  void Swap(TInTitlePalaceGetAchievementInfoRsp* other);

  // implements Message ----------------------------------------------

  TInTitlePalaceGetAchievementInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TInTitlePalaceGetAchievementInfoRsp& from);
  void MergeFrom(const TInTitlePalaceGetAchievementInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AchievementScore = 1;
  inline bool has_achievementscore() const;
  inline void clear_achievementscore();
  static const int kAchievementScoreFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TInTitlePalaceGetAchievementInfoRsp</name>
  	<Function>
  		<name>achievementscore</name>
  		<replaceName>AchievementScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_achievementscore</name>
  		<replaceName>AchievementScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_achievementscore</name>
  		<replaceName>AchievementScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 achievementscore() const;
  inline void set_achievementscore(::google::protobuf::uint32 value);

  // repeated .pb.TInTitlePalaceAchievementReward RewardArr = 2;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TInTitlePalaceGetAchievementInfoRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TInTitlePalaceAchievementReward& rewardarr(int index) const;
  inline ::pb::TInTitlePalaceAchievementReward* mutable_rewardarr(int index);
  inline ::pb::TInTitlePalaceAchievementReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TInTitlePalaceAchievementReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TInTitlePalaceAchievementReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TInTitlePalaceGetAchievementInfoRsp)
 private:
  inline void set_has_achievementscore();
  inline void clear_has_achievementscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TInTitlePalaceAchievementReward > rewardarr_;
  ::google::protobuf::uint32 achievementscore_;
  friend void  protobuf_AddDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_AssignDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_ShutdownFile_net_2fTitlePalace_2eproto();

  void InitAsDefaultInstance();
  static TInTitlePalaceGetAchievementInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTitlePalaceReceiveRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TitlePalace.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTitlePalaceReceiveRewardReq : public ::google::protobuf::Message {
 public:
  TTitlePalaceReceiveRewardReq();
  virtual ~TTitlePalaceReceiveRewardReq();

  TTitlePalaceReceiveRewardReq(const TTitlePalaceReceiveRewardReq& from);

  inline TTitlePalaceReceiveRewardReq& operator=(const TTitlePalaceReceiveRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTitlePalaceReceiveRewardReq& default_instance();

  void Swap(TTitlePalaceReceiveRewardReq* other);

  // implements Message ----------------------------------------------

  TTitlePalaceReceiveRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTitlePalaceReceiveRewardReq& from);
  void MergeFrom(const TTitlePalaceReceiveRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AchievementId = 1;
  inline bool has_achievementid() const;
  inline void clear_achievementid();
  static const int kAchievementIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTitlePalaceReceiveRewardReq</name>
  	<Function>
  		<name>achievementid</name>
  		<replaceName>AchievementId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_achievementid</name>
  		<replaceName>AchievementId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_achievementid</name>
  		<replaceName>AchievementId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 achievementid() const;
  inline void set_achievementid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTitlePalaceReceiveRewardReq)
 private:
  inline void set_has_achievementid();
  inline void clear_has_achievementid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 achievementid_;
  friend void  protobuf_AddDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_AssignDesc_net_2fTitlePalace_2eproto();
  friend void protobuf_ShutdownFile_net_2fTitlePalace_2eproto();

  void InitAsDefaultInstance();
  static TTitlePalaceReceiveRewardReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TInTitlePalaceAchievementReward

// optional uint32 AchievementId = 1;
inline bool TInTitlePalaceAchievementReward::has_achievementid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TInTitlePalaceAchievementReward::set_has_achievementid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TInTitlePalaceAchievementReward::clear_has_achievementid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TInTitlePalaceAchievementReward::clear_achievementid() {
  achievementid_ = 0u;
  clear_has_achievementid();
}
inline ::google::protobuf::uint32 TInTitlePalaceAchievementReward::achievementid() const {
  // @@protoc_insertion_point(field_get:pb.TInTitlePalaceAchievementReward.AchievementId)
  return achievementid_;
}
inline void TInTitlePalaceAchievementReward::set_achievementid(::google::protobuf::uint32 value) {
  set_has_achievementid();
  achievementid_ = value;
  // @@protoc_insertion_point(field_set:pb.TInTitlePalaceAchievementReward.AchievementId)
}

// optional uint64 RewardTime = 2;
inline bool TInTitlePalaceAchievementReward::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TInTitlePalaceAchievementReward::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TInTitlePalaceAchievementReward::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TInTitlePalaceAchievementReward::clear_rewardtime() {
  rewardtime_ = GOOGLE_ULONGLONG(0);
  clear_has_rewardtime();
}
inline ::google::protobuf::uint64 TInTitlePalaceAchievementReward::rewardtime() const {
  // @@protoc_insertion_point(field_get:pb.TInTitlePalaceAchievementReward.RewardTime)
  return rewardtime_;
}
inline void TInTitlePalaceAchievementReward::set_rewardtime(::google::protobuf::uint64 value) {
  set_has_rewardtime();
  rewardtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TInTitlePalaceAchievementReward.RewardTime)
}

// -------------------------------------------------------------------

// TTitlePalaceUserInfo

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TTitlePalaceUserInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTitlePalaceUserInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTitlePalaceUserInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTitlePalaceUserInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TTitlePalaceUserInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceUserInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TTitlePalaceUserInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TTitlePalaceUserInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TTitlePalaceUserInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TTitlePalaceUserInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTitlePalaceUserInfo.UserInfo)
}

// optional uint64 Popularity = 2;
inline bool TTitlePalaceUserInfo::has_popularity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTitlePalaceUserInfo::set_has_popularity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTitlePalaceUserInfo::clear_has_popularity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTitlePalaceUserInfo::clear_popularity() {
  popularity_ = GOOGLE_ULONGLONG(0);
  clear_has_popularity();
}
inline ::google::protobuf::uint64 TTitlePalaceUserInfo::popularity() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceUserInfo.Popularity)
  return popularity_;
}
inline void TTitlePalaceUserInfo::set_popularity(::google::protobuf::uint64 value) {
  set_has_popularity();
  popularity_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceUserInfo.Popularity)
}

// optional uint64 EntryTime = 3;
inline bool TTitlePalaceUserInfo::has_entrytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTitlePalaceUserInfo::set_has_entrytime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTitlePalaceUserInfo::clear_has_entrytime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTitlePalaceUserInfo::clear_entrytime() {
  entrytime_ = GOOGLE_ULONGLONG(0);
  clear_has_entrytime();
}
inline ::google::protobuf::uint64 TTitlePalaceUserInfo::entrytime() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceUserInfo.EntryTime)
  return entrytime_;
}
inline void TTitlePalaceUserInfo::set_entrytime(::google::protobuf::uint64 value) {
  set_has_entrytime();
  entrytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceUserInfo.EntryTime)
}

// optional uint64 EndEntryTime = 4;
inline bool TTitlePalaceUserInfo::has_endentrytime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTitlePalaceUserInfo::set_has_endentrytime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTitlePalaceUserInfo::clear_has_endentrytime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTitlePalaceUserInfo::clear_endentrytime() {
  endentrytime_ = GOOGLE_ULONGLONG(0);
  clear_has_endentrytime();
}
inline ::google::protobuf::uint64 TTitlePalaceUserInfo::endentrytime() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceUserInfo.EndEntryTime)
  return endentrytime_;
}
inline void TTitlePalaceUserInfo::set_endentrytime(::google::protobuf::uint64 value) {
  set_has_endentrytime();
  endentrytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceUserInfo.EndEntryTime)
}

// optional uint64 AllyId = 5;
inline bool TTitlePalaceUserInfo::has_allyid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TTitlePalaceUserInfo::set_has_allyid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TTitlePalaceUserInfo::clear_has_allyid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TTitlePalaceUserInfo::clear_allyid() {
  allyid_ = GOOGLE_ULONGLONG(0);
  clear_has_allyid();
}
inline ::google::protobuf::uint64 TTitlePalaceUserInfo::allyid() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceUserInfo.AllyId)
  return allyid_;
}
inline void TTitlePalaceUserInfo::set_allyid(::google::protobuf::uint64 value) {
  set_has_allyid();
  allyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceUserInfo.AllyId)
}

// optional uint32 TitleId = 6;
inline bool TTitlePalaceUserInfo::has_titleid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TTitlePalaceUserInfo::set_has_titleid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TTitlePalaceUserInfo::clear_has_titleid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TTitlePalaceUserInfo::clear_titleid() {
  titleid_ = 0u;
  clear_has_titleid();
}
inline ::google::protobuf::uint32 TTitlePalaceUserInfo::titleid() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceUserInfo.TitleId)
  return titleid_;
}
inline void TTitlePalaceUserInfo::set_titleid(::google::protobuf::uint32 value) {
  set_has_titleid();
  titleid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceUserInfo.TitleId)
}

// -------------------------------------------------------------------

// TTitlePalaceInfo

// optional uint64 PalaceId = 1;
inline bool TTitlePalaceInfo::has_palaceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTitlePalaceInfo::set_has_palaceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTitlePalaceInfo::clear_has_palaceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTitlePalaceInfo::clear_palaceid() {
  palaceid_ = GOOGLE_ULONGLONG(0);
  clear_has_palaceid();
}
inline ::google::protobuf::uint64 TTitlePalaceInfo::palaceid() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceInfo.PalaceId)
  return palaceid_;
}
inline void TTitlePalaceInfo::set_palaceid(::google::protobuf::uint64 value) {
  set_has_palaceid();
  palaceid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceInfo.PalaceId)
}

// repeated .pb.TTitlePalaceUserInfo PalaceUserInfoArr = 2;
inline int TTitlePalaceInfo::palaceuserinfoarr_size() const {
  return palaceuserinfoarr_.size();
}
inline void TTitlePalaceInfo::clear_palaceuserinfoarr() {
  palaceuserinfoarr_.Clear();
}
inline const ::pb::TTitlePalaceUserInfo& TTitlePalaceInfo::palaceuserinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceInfo.PalaceUserInfoArr)
  return palaceuserinfoarr_.Get(index);
}
inline ::pb::TTitlePalaceUserInfo* TTitlePalaceInfo::mutable_palaceuserinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTitlePalaceInfo.PalaceUserInfoArr)
  return palaceuserinfoarr_.Mutable(index);
}
inline ::pb::TTitlePalaceUserInfo* TTitlePalaceInfo::add_palaceuserinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TTitlePalaceInfo.PalaceUserInfoArr)
  return palaceuserinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTitlePalaceUserInfo >&
TTitlePalaceInfo::palaceuserinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TTitlePalaceInfo.PalaceUserInfoArr)
  return palaceuserinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTitlePalaceUserInfo >*
TTitlePalaceInfo::mutable_palaceuserinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTitlePalaceInfo.PalaceUserInfoArr)
  return &palaceuserinfoarr_;
}

// -------------------------------------------------------------------

// TTitlePalaceGetInfoRsp

// optional uint64 Popularity = 1;
inline bool TTitlePalaceGetInfoRsp::has_popularity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTitlePalaceGetInfoRsp::set_has_popularity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTitlePalaceGetInfoRsp::clear_has_popularity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTitlePalaceGetInfoRsp::clear_popularity() {
  popularity_ = GOOGLE_ULONGLONG(0);
  clear_has_popularity();
}
inline ::google::protobuf::uint64 TTitlePalaceGetInfoRsp::popularity() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceGetInfoRsp.Popularity)
  return popularity_;
}
inline void TTitlePalaceGetInfoRsp::set_popularity(::google::protobuf::uint64 value) {
  set_has_popularity();
  popularity_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceGetInfoRsp.Popularity)
}

// optional uint32 ProstrateNum = 2;
inline bool TTitlePalaceGetInfoRsp::has_prostratenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTitlePalaceGetInfoRsp::set_has_prostratenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTitlePalaceGetInfoRsp::clear_has_prostratenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTitlePalaceGetInfoRsp::clear_prostratenum() {
  prostratenum_ = 0u;
  clear_has_prostratenum();
}
inline ::google::protobuf::uint32 TTitlePalaceGetInfoRsp::prostratenum() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceGetInfoRsp.ProstrateNum)
  return prostratenum_;
}
inline void TTitlePalaceGetInfoRsp::set_prostratenum(::google::protobuf::uint32 value) {
  set_has_prostratenum();
  prostratenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceGetInfoRsp.ProstrateNum)
}

// optional uint64 PalaceId = 3;
inline bool TTitlePalaceGetInfoRsp::has_palaceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTitlePalaceGetInfoRsp::set_has_palaceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTitlePalaceGetInfoRsp::clear_has_palaceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTitlePalaceGetInfoRsp::clear_palaceid() {
  palaceid_ = GOOGLE_ULONGLONG(0);
  clear_has_palaceid();
}
inline ::google::protobuf::uint64 TTitlePalaceGetInfoRsp::palaceid() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceGetInfoRsp.PalaceId)
  return palaceid_;
}
inline void TTitlePalaceGetInfoRsp::set_palaceid(::google::protobuf::uint64 value) {
  set_has_palaceid();
  palaceid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceGetInfoRsp.PalaceId)
}

// optional uint64 EntryTime = 4;
inline bool TTitlePalaceGetInfoRsp::has_entrytime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTitlePalaceGetInfoRsp::set_has_entrytime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTitlePalaceGetInfoRsp::clear_has_entrytime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTitlePalaceGetInfoRsp::clear_entrytime() {
  entrytime_ = GOOGLE_ULONGLONG(0);
  clear_has_entrytime();
}
inline ::google::protobuf::uint64 TTitlePalaceGetInfoRsp::entrytime() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceGetInfoRsp.EntryTime)
  return entrytime_;
}
inline void TTitlePalaceGetInfoRsp::set_entrytime(::google::protobuf::uint64 value) {
  set_has_entrytime();
  entrytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceGetInfoRsp.EntryTime)
}

// optional uint64 EndEntryTime = 5;
inline bool TTitlePalaceGetInfoRsp::has_endentrytime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TTitlePalaceGetInfoRsp::set_has_endentrytime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TTitlePalaceGetInfoRsp::clear_has_endentrytime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TTitlePalaceGetInfoRsp::clear_endentrytime() {
  endentrytime_ = GOOGLE_ULONGLONG(0);
  clear_has_endentrytime();
}
inline ::google::protobuf::uint64 TTitlePalaceGetInfoRsp::endentrytime() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceGetInfoRsp.EndEntryTime)
  return endentrytime_;
}
inline void TTitlePalaceGetInfoRsp::set_endentrytime(::google::protobuf::uint64 value) {
  set_has_endentrytime();
  endentrytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceGetInfoRsp.EndEntryTime)
}

// optional uint64 AllyId = 6;
inline bool TTitlePalaceGetInfoRsp::has_allyid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TTitlePalaceGetInfoRsp::set_has_allyid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TTitlePalaceGetInfoRsp::clear_has_allyid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TTitlePalaceGetInfoRsp::clear_allyid() {
  allyid_ = GOOGLE_ULONGLONG(0);
  clear_has_allyid();
}
inline ::google::protobuf::uint64 TTitlePalaceGetInfoRsp::allyid() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceGetInfoRsp.AllyId)
  return allyid_;
}
inline void TTitlePalaceGetInfoRsp::set_allyid(::google::protobuf::uint64 value) {
  set_has_allyid();
  allyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceGetInfoRsp.AllyId)
}

// repeated .pb.TTitlePalaceInfo TitlePalaceInfoArr = 7;
inline int TTitlePalaceGetInfoRsp::titlepalaceinfoarr_size() const {
  return titlepalaceinfoarr_.size();
}
inline void TTitlePalaceGetInfoRsp::clear_titlepalaceinfoarr() {
  titlepalaceinfoarr_.Clear();
}
inline const ::pb::TTitlePalaceInfo& TTitlePalaceGetInfoRsp::titlepalaceinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceGetInfoRsp.TitlePalaceInfoArr)
  return titlepalaceinfoarr_.Get(index);
}
inline ::pb::TTitlePalaceInfo* TTitlePalaceGetInfoRsp::mutable_titlepalaceinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTitlePalaceGetInfoRsp.TitlePalaceInfoArr)
  return titlepalaceinfoarr_.Mutable(index);
}
inline ::pb::TTitlePalaceInfo* TTitlePalaceGetInfoRsp::add_titlepalaceinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TTitlePalaceGetInfoRsp.TitlePalaceInfoArr)
  return titlepalaceinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTitlePalaceInfo >&
TTitlePalaceGetInfoRsp::titlepalaceinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TTitlePalaceGetInfoRsp.TitlePalaceInfoArr)
  return titlepalaceinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTitlePalaceInfo >*
TTitlePalaceGetInfoRsp::mutable_titlepalaceinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTitlePalaceGetInfoRsp.TitlePalaceInfoArr)
  return &titlepalaceinfoarr_;
}

// -------------------------------------------------------------------

// TTitlePalaceEntryPalaceReq

// optional uint64 PalaceId = 1;
inline bool TTitlePalaceEntryPalaceReq::has_palaceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTitlePalaceEntryPalaceReq::set_has_palaceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTitlePalaceEntryPalaceReq::clear_has_palaceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTitlePalaceEntryPalaceReq::clear_palaceid() {
  palaceid_ = GOOGLE_ULONGLONG(0);
  clear_has_palaceid();
}
inline ::google::protobuf::uint64 TTitlePalaceEntryPalaceReq::palaceid() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceEntryPalaceReq.PalaceId)
  return palaceid_;
}
inline void TTitlePalaceEntryPalaceReq::set_palaceid(::google::protobuf::uint64 value) {
  set_has_palaceid();
  palaceid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceEntryPalaceReq.PalaceId)
}

// -------------------------------------------------------------------

// TTitlePalaceEntryPalaceRsp

// optional uint64 EntryTime = 1;
inline bool TTitlePalaceEntryPalaceRsp::has_entrytime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTitlePalaceEntryPalaceRsp::set_has_entrytime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTitlePalaceEntryPalaceRsp::clear_has_entrytime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTitlePalaceEntryPalaceRsp::clear_entrytime() {
  entrytime_ = GOOGLE_ULONGLONG(0);
  clear_has_entrytime();
}
inline ::google::protobuf::uint64 TTitlePalaceEntryPalaceRsp::entrytime() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceEntryPalaceRsp.EntryTime)
  return entrytime_;
}
inline void TTitlePalaceEntryPalaceRsp::set_entrytime(::google::protobuf::uint64 value) {
  set_has_entrytime();
  entrytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceEntryPalaceRsp.EntryTime)
}

// optional uint64 EndEntryTime = 2;
inline bool TTitlePalaceEntryPalaceRsp::has_endentrytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTitlePalaceEntryPalaceRsp::set_has_endentrytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTitlePalaceEntryPalaceRsp::clear_has_endentrytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTitlePalaceEntryPalaceRsp::clear_endentrytime() {
  endentrytime_ = GOOGLE_ULONGLONG(0);
  clear_has_endentrytime();
}
inline ::google::protobuf::uint64 TTitlePalaceEntryPalaceRsp::endentrytime() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceEntryPalaceRsp.EndEntryTime)
  return endentrytime_;
}
inline void TTitlePalaceEntryPalaceRsp::set_endentrytime(::google::protobuf::uint64 value) {
  set_has_endentrytime();
  endentrytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceEntryPalaceRsp.EndEntryTime)
}

// -------------------------------------------------------------------

// TTitlePalaceProstrateReq

// optional uint64 PalaceId = 1;
inline bool TTitlePalaceProstrateReq::has_palaceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTitlePalaceProstrateReq::set_has_palaceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTitlePalaceProstrateReq::clear_has_palaceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTitlePalaceProstrateReq::clear_palaceid() {
  palaceid_ = GOOGLE_ULONGLONG(0);
  clear_has_palaceid();
}
inline ::google::protobuf::uint64 TTitlePalaceProstrateReq::palaceid() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceProstrateReq.PalaceId)
  return palaceid_;
}
inline void TTitlePalaceProstrateReq::set_palaceid(::google::protobuf::uint64 value) {
  set_has_palaceid();
  palaceid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceProstrateReq.PalaceId)
}

// optional uint64 Uid = 2;
inline bool TTitlePalaceProstrateReq::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTitlePalaceProstrateReq::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTitlePalaceProstrateReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTitlePalaceProstrateReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TTitlePalaceProstrateReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceProstrateReq.Uid)
  return uid_;
}
inline void TTitlePalaceProstrateReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceProstrateReq.Uid)
}

// -------------------------------------------------------------------

// TTitlePalaceProstrateRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TTitlePalaceProstrateRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TTitlePalaceProstrateRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TTitlePalaceProstrateRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceProstrateRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TTitlePalaceProstrateRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTitlePalaceProstrateRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TTitlePalaceProstrateRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TTitlePalaceProstrateRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTitlePalaceProstrateRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TTitlePalaceProstrateRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTitlePalaceProstrateRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTitlePalaceProstrateRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TTitlePalaceGetUserInfoRsp

// optional uint32 ProstrateNum = 1;
inline bool TTitlePalaceGetUserInfoRsp::has_prostratenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTitlePalaceGetUserInfoRsp::set_has_prostratenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTitlePalaceGetUserInfoRsp::clear_has_prostratenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTitlePalaceGetUserInfoRsp::clear_prostratenum() {
  prostratenum_ = 0u;
  clear_has_prostratenum();
}
inline ::google::protobuf::uint32 TTitlePalaceGetUserInfoRsp::prostratenum() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceGetUserInfoRsp.ProstrateNum)
  return prostratenum_;
}
inline void TTitlePalaceGetUserInfoRsp::set_prostratenum(::google::protobuf::uint32 value) {
  set_has_prostratenum();
  prostratenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceGetUserInfoRsp.ProstrateNum)
}

// optional uint64 Popularity = 2;
inline bool TTitlePalaceGetUserInfoRsp::has_popularity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTitlePalaceGetUserInfoRsp::set_has_popularity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTitlePalaceGetUserInfoRsp::clear_has_popularity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTitlePalaceGetUserInfoRsp::clear_popularity() {
  popularity_ = GOOGLE_ULONGLONG(0);
  clear_has_popularity();
}
inline ::google::protobuf::uint64 TTitlePalaceGetUserInfoRsp::popularity() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceGetUserInfoRsp.Popularity)
  return popularity_;
}
inline void TTitlePalaceGetUserInfoRsp::set_popularity(::google::protobuf::uint64 value) {
  set_has_popularity();
  popularity_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceGetUserInfoRsp.Popularity)
}

// optional uint64 PalaceId = 3;
inline bool TTitlePalaceGetUserInfoRsp::has_palaceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTitlePalaceGetUserInfoRsp::set_has_palaceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTitlePalaceGetUserInfoRsp::clear_has_palaceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTitlePalaceGetUserInfoRsp::clear_palaceid() {
  palaceid_ = GOOGLE_ULONGLONG(0);
  clear_has_palaceid();
}
inline ::google::protobuf::uint64 TTitlePalaceGetUserInfoRsp::palaceid() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceGetUserInfoRsp.PalaceId)
  return palaceid_;
}
inline void TTitlePalaceGetUserInfoRsp::set_palaceid(::google::protobuf::uint64 value) {
  set_has_palaceid();
  palaceid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceGetUserInfoRsp.PalaceId)
}

// optional uint64 EntryTime = 4;
inline bool TTitlePalaceGetUserInfoRsp::has_entrytime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTitlePalaceGetUserInfoRsp::set_has_entrytime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTitlePalaceGetUserInfoRsp::clear_has_entrytime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTitlePalaceGetUserInfoRsp::clear_entrytime() {
  entrytime_ = GOOGLE_ULONGLONG(0);
  clear_has_entrytime();
}
inline ::google::protobuf::uint64 TTitlePalaceGetUserInfoRsp::entrytime() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceGetUserInfoRsp.EntryTime)
  return entrytime_;
}
inline void TTitlePalaceGetUserInfoRsp::set_entrytime(::google::protobuf::uint64 value) {
  set_has_entrytime();
  entrytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceGetUserInfoRsp.EntryTime)
}

// optional uint64 EndEntryTime = 5;
inline bool TTitlePalaceGetUserInfoRsp::has_endentrytime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TTitlePalaceGetUserInfoRsp::set_has_endentrytime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TTitlePalaceGetUserInfoRsp::clear_has_endentrytime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TTitlePalaceGetUserInfoRsp::clear_endentrytime() {
  endentrytime_ = GOOGLE_ULONGLONG(0);
  clear_has_endentrytime();
}
inline ::google::protobuf::uint64 TTitlePalaceGetUserInfoRsp::endentrytime() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceGetUserInfoRsp.EndEntryTime)
  return endentrytime_;
}
inline void TTitlePalaceGetUserInfoRsp::set_endentrytime(::google::protobuf::uint64 value) {
  set_has_endentrytime();
  endentrytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceGetUserInfoRsp.EndEntryTime)
}

// -------------------------------------------------------------------

// TTitlePalaceGetPalaceInfoReq

// optional uint64 PalaceId = 1;
inline bool TTitlePalaceGetPalaceInfoReq::has_palaceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTitlePalaceGetPalaceInfoReq::set_has_palaceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTitlePalaceGetPalaceInfoReq::clear_has_palaceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTitlePalaceGetPalaceInfoReq::clear_palaceid() {
  palaceid_ = GOOGLE_ULONGLONG(0);
  clear_has_palaceid();
}
inline ::google::protobuf::uint64 TTitlePalaceGetPalaceInfoReq::palaceid() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceGetPalaceInfoReq.PalaceId)
  return palaceid_;
}
inline void TTitlePalaceGetPalaceInfoReq::set_palaceid(::google::protobuf::uint64 value) {
  set_has_palaceid();
  palaceid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceGetPalaceInfoReq.PalaceId)
}

// -------------------------------------------------------------------

// TTitlePalaceGetPalaceInfoRsp

// optional .pb.TTitlePalaceInfo TitlePalaceInfo = 1;
inline bool TTitlePalaceGetPalaceInfoRsp::has_titlepalaceinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTitlePalaceGetPalaceInfoRsp::set_has_titlepalaceinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTitlePalaceGetPalaceInfoRsp::clear_has_titlepalaceinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTitlePalaceGetPalaceInfoRsp::clear_titlepalaceinfo() {
  if (titlepalaceinfo_ != NULL) titlepalaceinfo_->::pb::TTitlePalaceInfo::Clear();
  clear_has_titlepalaceinfo();
}
inline const ::pb::TTitlePalaceInfo& TTitlePalaceGetPalaceInfoRsp::titlepalaceinfo() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceGetPalaceInfoRsp.TitlePalaceInfo)
  return titlepalaceinfo_ != NULL ? *titlepalaceinfo_ : *default_instance_->titlepalaceinfo_;
}
inline ::pb::TTitlePalaceInfo* TTitlePalaceGetPalaceInfoRsp::mutable_titlepalaceinfo() {
  set_has_titlepalaceinfo();
  if (titlepalaceinfo_ == NULL) titlepalaceinfo_ = new ::pb::TTitlePalaceInfo;
  // @@protoc_insertion_point(field_mutable:pb.TTitlePalaceGetPalaceInfoRsp.TitlePalaceInfo)
  return titlepalaceinfo_;
}
inline ::pb::TTitlePalaceInfo* TTitlePalaceGetPalaceInfoRsp::release_titlepalaceinfo() {
  clear_has_titlepalaceinfo();
  ::pb::TTitlePalaceInfo* temp = titlepalaceinfo_;
  titlepalaceinfo_ = NULL;
  return temp;
}
inline void TTitlePalaceGetPalaceInfoRsp::set_allocated_titlepalaceinfo(::pb::TTitlePalaceInfo* titlepalaceinfo) {
  delete titlepalaceinfo_;
  titlepalaceinfo_ = titlepalaceinfo;
  if (titlepalaceinfo) {
    set_has_titlepalaceinfo();
  } else {
    clear_has_titlepalaceinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTitlePalaceGetPalaceInfoRsp.TitlePalaceInfo)
}

// -------------------------------------------------------------------

// TTitlePalaceNotify

// optional uint64 PalaceId = 1;
inline bool TTitlePalaceNotify::has_palaceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTitlePalaceNotify::set_has_palaceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTitlePalaceNotify::clear_has_palaceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTitlePalaceNotify::clear_palaceid() {
  palaceid_ = GOOGLE_ULONGLONG(0);
  clear_has_palaceid();
}
inline ::google::protobuf::uint64 TTitlePalaceNotify::palaceid() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceNotify.PalaceId)
  return palaceid_;
}
inline void TTitlePalaceNotify::set_palaceid(::google::protobuf::uint64 value) {
  set_has_palaceid();
  palaceid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceNotify.PalaceId)
}

// optional uint64 Uid = 2;
inline bool TTitlePalaceNotify::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTitlePalaceNotify::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTitlePalaceNotify::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTitlePalaceNotify::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TTitlePalaceNotify::uid() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceNotify.Uid)
  return uid_;
}
inline void TTitlePalaceNotify::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceNotify.Uid)
}

// optional uint32 Popularity = 3;
inline bool TTitlePalaceNotify::has_popularity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTitlePalaceNotify::set_has_popularity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTitlePalaceNotify::clear_has_popularity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTitlePalaceNotify::clear_popularity() {
  popularity_ = 0u;
  clear_has_popularity();
}
inline ::google::protobuf::uint32 TTitlePalaceNotify::popularity() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceNotify.Popularity)
  return popularity_;
}
inline void TTitlePalaceNotify::set_popularity(::google::protobuf::uint32 value) {
  set_has_popularity();
  popularity_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceNotify.Popularity)
}

// optional uint32 ProstrateNum = 4;
inline bool TTitlePalaceNotify::has_prostratenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTitlePalaceNotify::set_has_prostratenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTitlePalaceNotify::clear_has_prostratenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTitlePalaceNotify::clear_prostratenum() {
  prostratenum_ = 0u;
  clear_has_prostratenum();
}
inline ::google::protobuf::uint32 TTitlePalaceNotify::prostratenum() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceNotify.ProstrateNum)
  return prostratenum_;
}
inline void TTitlePalaceNotify::set_prostratenum(::google::protobuf::uint32 value) {
  set_has_prostratenum();
  prostratenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceNotify.ProstrateNum)
}

// -------------------------------------------------------------------

// TTitlePalaceAchievementNotify

// repeated uint32 AchievementIdArr = 1;
inline int TTitlePalaceAchievementNotify::achievementidarr_size() const {
  return achievementidarr_.size();
}
inline void TTitlePalaceAchievementNotify::clear_achievementidarr() {
  achievementidarr_.Clear();
}
inline ::google::protobuf::uint32 TTitlePalaceAchievementNotify::achievementidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceAchievementNotify.AchievementIdArr)
  return achievementidarr_.Get(index);
}
inline void TTitlePalaceAchievementNotify::set_achievementidarr(int index, ::google::protobuf::uint32 value) {
  achievementidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceAchievementNotify.AchievementIdArr)
}
inline void TTitlePalaceAchievementNotify::add_achievementidarr(::google::protobuf::uint32 value) {
  achievementidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TTitlePalaceAchievementNotify.AchievementIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TTitlePalaceAchievementNotify::achievementidarr() const {
  // @@protoc_insertion_point(field_list:pb.TTitlePalaceAchievementNotify.AchievementIdArr)
  return achievementidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TTitlePalaceAchievementNotify::mutable_achievementidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTitlePalaceAchievementNotify.AchievementIdArr)
  return &achievementidarr_;
}

// -------------------------------------------------------------------

// TInTitlePalaceGetAchievementInfoRsp

// optional uint32 AchievementScore = 1;
inline bool TInTitlePalaceGetAchievementInfoRsp::has_achievementscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TInTitlePalaceGetAchievementInfoRsp::set_has_achievementscore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TInTitlePalaceGetAchievementInfoRsp::clear_has_achievementscore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TInTitlePalaceGetAchievementInfoRsp::clear_achievementscore() {
  achievementscore_ = 0u;
  clear_has_achievementscore();
}
inline ::google::protobuf::uint32 TInTitlePalaceGetAchievementInfoRsp::achievementscore() const {
  // @@protoc_insertion_point(field_get:pb.TInTitlePalaceGetAchievementInfoRsp.AchievementScore)
  return achievementscore_;
}
inline void TInTitlePalaceGetAchievementInfoRsp::set_achievementscore(::google::protobuf::uint32 value) {
  set_has_achievementscore();
  achievementscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TInTitlePalaceGetAchievementInfoRsp.AchievementScore)
}

// repeated .pb.TInTitlePalaceAchievementReward RewardArr = 2;
inline int TInTitlePalaceGetAchievementInfoRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TInTitlePalaceGetAchievementInfoRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TInTitlePalaceAchievementReward& TInTitlePalaceGetAchievementInfoRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TInTitlePalaceGetAchievementInfoRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TInTitlePalaceAchievementReward* TInTitlePalaceGetAchievementInfoRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TInTitlePalaceGetAchievementInfoRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TInTitlePalaceAchievementReward* TInTitlePalaceGetAchievementInfoRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TInTitlePalaceGetAchievementInfoRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TInTitlePalaceAchievementReward >&
TInTitlePalaceGetAchievementInfoRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TInTitlePalaceGetAchievementInfoRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TInTitlePalaceAchievementReward >*
TInTitlePalaceGetAchievementInfoRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TInTitlePalaceGetAchievementInfoRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TTitlePalaceReceiveRewardReq

// optional uint32 AchievementId = 1;
inline bool TTitlePalaceReceiveRewardReq::has_achievementid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTitlePalaceReceiveRewardReq::set_has_achievementid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTitlePalaceReceiveRewardReq::clear_has_achievementid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTitlePalaceReceiveRewardReq::clear_achievementid() {
  achievementid_ = 0u;
  clear_has_achievementid();
}
inline ::google::protobuf::uint32 TTitlePalaceReceiveRewardReq::achievementid() const {
  // @@protoc_insertion_point(field_get:pb.TTitlePalaceReceiveRewardReq.AchievementId)
  return achievementid_;
}
inline void TTitlePalaceReceiveRewardReq::set_achievementid(::google::protobuf::uint32 value) {
  set_has_achievementid();
  achievementid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTitlePalaceReceiveRewardReq.AchievementId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fTitlePalace_2eproto__INCLUDED
