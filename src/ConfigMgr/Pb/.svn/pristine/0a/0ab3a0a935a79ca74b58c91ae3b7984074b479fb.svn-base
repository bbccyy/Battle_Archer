// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActWeeklyFund.proto

#ifndef PROTOBUF_net_2fActWeeklyFund_2eproto__INCLUDED
#define PROTOBUF_net_2fActWeeklyFund_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActWeeklyFund_2eproto();
void protobuf_AssignDesc_net_2fActWeeklyFund_2eproto();
void protobuf_ShutdownFile_net_2fActWeeklyFund_2eproto();

class TActWeeklyFundSignInfo;
class TActWeeklyFundGetInfoRsp;
class TActWeeklyFundGetDailyGiftRsp;
class TActWeeklyFundGetTotalUnlockGiftRsp;
class TActWeeklyFundGetRewardReq;
class TActWeeklyFundActIdRewardInfo;
class TActWeeklyFundAutoGetRewardRsp;
class TActWeeklyFundNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActWeeklyFundSignInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActWeeklyFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActWeeklyFundSignInfo : public ::google::protobuf::Message {
 public:
  TActWeeklyFundSignInfo();
  virtual ~TActWeeklyFundSignInfo();

  TActWeeklyFundSignInfo(const TActWeeklyFundSignInfo& from);

  inline TActWeeklyFundSignInfo& operator=(const TActWeeklyFundSignInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActWeeklyFundSignInfo& default_instance();

  void Swap(TActWeeklyFundSignInfo* other);

  // implements Message ----------------------------------------------

  TActWeeklyFundSignInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActWeeklyFundSignInfo& from);
  void MergeFrom(const TActWeeklyFundSignInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActWeeklyFundSignInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 PayTime = 2;
  inline bool has_paytime() const;
  inline void clear_paytime();
  static const int kPayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActWeeklyFundSignInfo</name>
  	<Function>
  		<name>paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 paytime() const;
  inline void set_paytime(::google::protobuf::uint64 value);

  // repeated uint32 RewardIdArr = 3;
  inline int rewardidarr_size() const;
  inline void clear_rewardidarr();
  static const int kRewardIdArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActWeeklyFundSignInfo</name>
  	<Function>
  		<name>rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardidarr_size</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardidarr(int index) const;
  inline void set_rewardidarr(int index, ::google::protobuf::uint32 value);
  inline void add_rewardidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rewardidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rewardidarr();

  // @@protoc_insertion_point(class_scope:pb.TActWeeklyFundSignInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_paytime();
  inline void clear_has_paytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 paytime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rewardidarr_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActWeeklyFund_2eproto();
  friend void protobuf_AssignDesc_net_2fActWeeklyFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fActWeeklyFund_2eproto();

  void InitAsDefaultInstance();
  static TActWeeklyFundSignInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActWeeklyFundGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActWeeklyFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActWeeklyFundGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActWeeklyFundGetInfoRsp();
  virtual ~TActWeeklyFundGetInfoRsp();

  TActWeeklyFundGetInfoRsp(const TActWeeklyFundGetInfoRsp& from);

  inline TActWeeklyFundGetInfoRsp& operator=(const TActWeeklyFundGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActWeeklyFundGetInfoRsp& default_instance();

  void Swap(TActWeeklyFundGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActWeeklyFundGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActWeeklyFundGetInfoRsp& from);
  void MergeFrom(const TActWeeklyFundGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActWeeklyFundSignInfo SignArr = 1;
  inline int signarr_size() const;
  inline void clear_signarr();
  static const int kSignArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActWeeklyFundGetInfoRsp</name>
  	<Function>
  		<name>signarr</name>
  		<replaceName>SignArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_signarr</name>
  		<replaceName>SignArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_signarr</name>
  		<replaceName>SignArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signarr</name>
  		<replaceName>SignArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>signarr_size</name>
  		<replaceName>SignArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActWeeklyFundSignInfo& signarr(int index) const;
  inline ::pb::TActWeeklyFundSignInfo* mutable_signarr(int index);
  inline ::pb::TActWeeklyFundSignInfo* add_signarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActWeeklyFundSignInfo >&
      signarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActWeeklyFundSignInfo >*
      mutable_signarr();

  // optional uint64 DailyGiftGetTime = 2;
  inline bool has_dailygiftgettime() const;
  inline void clear_dailygiftgettime();
  static const int kDailyGiftGetTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActWeeklyFundGetInfoRsp</name>
  	<Function>
  		<name>dailygiftgettime</name>
  		<replaceName>DailyGiftGetTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_dailygiftgettime</name>
  		<replaceName>DailyGiftGetTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dailygiftgettime</name>
  		<replaceName>DailyGiftGetTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 dailygiftgettime() const;
  inline void set_dailygiftgettime(::google::protobuf::uint64 value);

  // optional uint64 TotalUnlockGiftGetTime = 3;
  inline bool has_totalunlockgiftgettime() const;
  inline void clear_totalunlockgiftgettime();
  static const int kTotalUnlockGiftGetTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActWeeklyFundGetInfoRsp</name>
  	<Function>
  		<name>totalunlockgiftgettime</name>
  		<replaceName>TotalUnlockGiftGetTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalunlockgiftgettime</name>
  		<replaceName>TotalUnlockGiftGetTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalunlockgiftgettime</name>
  		<replaceName>TotalUnlockGiftGetTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totalunlockgiftgettime() const;
  inline void set_totalunlockgiftgettime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActWeeklyFundGetInfoRsp)
 private:
  inline void set_has_dailygiftgettime();
  inline void clear_has_dailygiftgettime();
  inline void set_has_totalunlockgiftgettime();
  inline void clear_has_totalunlockgiftgettime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActWeeklyFundSignInfo > signarr_;
  ::google::protobuf::uint64 dailygiftgettime_;
  ::google::protobuf::uint64 totalunlockgiftgettime_;
  friend void  protobuf_AddDesc_net_2fActWeeklyFund_2eproto();
  friend void protobuf_AssignDesc_net_2fActWeeklyFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fActWeeklyFund_2eproto();

  void InitAsDefaultInstance();
  static TActWeeklyFundGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActWeeklyFundGetDailyGiftRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActWeeklyFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActWeeklyFundGetDailyGiftRsp : public ::google::protobuf::Message {
 public:
  TActWeeklyFundGetDailyGiftRsp();
  virtual ~TActWeeklyFundGetDailyGiftRsp();

  TActWeeklyFundGetDailyGiftRsp(const TActWeeklyFundGetDailyGiftRsp& from);

  inline TActWeeklyFundGetDailyGiftRsp& operator=(const TActWeeklyFundGetDailyGiftRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActWeeklyFundGetDailyGiftRsp& default_instance();

  void Swap(TActWeeklyFundGetDailyGiftRsp* other);

  // implements Message ----------------------------------------------

  TActWeeklyFundGetDailyGiftRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActWeeklyFundGetDailyGiftRsp& from);
  void MergeFrom(const TActWeeklyFundGetDailyGiftRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 DailyGiftGetTime = 1;
  inline bool has_dailygiftgettime() const;
  inline void clear_dailygiftgettime();
  static const int kDailyGiftGetTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActWeeklyFundGetDailyGiftRsp</name>
  	<Function>
  		<name>dailygiftgettime</name>
  		<replaceName>DailyGiftGetTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_dailygiftgettime</name>
  		<replaceName>DailyGiftGetTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dailygiftgettime</name>
  		<replaceName>DailyGiftGetTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 dailygiftgettime() const;
  inline void set_dailygiftgettime(::google::protobuf::uint64 value);

  // repeated .pb.TCommonReward DropArr = 2;
  inline int droparr_size() const;
  inline void clear_droparr();
  static const int kDropArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActWeeklyFundGetDailyGiftRsp</name>
  	<Function>
  		<name>droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparr_size</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparr(int index) const;
  inline ::pb::TCommonReward* mutable_droparr(int index);
  inline ::pb::TCommonReward* add_droparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparr();

  // @@protoc_insertion_point(class_scope:pb.TActWeeklyFundGetDailyGiftRsp)
 private:
  inline void set_has_dailygiftgettime();
  inline void clear_has_dailygiftgettime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 dailygiftgettime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparr_;
  friend void  protobuf_AddDesc_net_2fActWeeklyFund_2eproto();
  friend void protobuf_AssignDesc_net_2fActWeeklyFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fActWeeklyFund_2eproto();

  void InitAsDefaultInstance();
  static TActWeeklyFundGetDailyGiftRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActWeeklyFundGetTotalUnlockGiftRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActWeeklyFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActWeeklyFundGetTotalUnlockGiftRsp : public ::google::protobuf::Message {
 public:
  TActWeeklyFundGetTotalUnlockGiftRsp();
  virtual ~TActWeeklyFundGetTotalUnlockGiftRsp();

  TActWeeklyFundGetTotalUnlockGiftRsp(const TActWeeklyFundGetTotalUnlockGiftRsp& from);

  inline TActWeeklyFundGetTotalUnlockGiftRsp& operator=(const TActWeeklyFundGetTotalUnlockGiftRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActWeeklyFundGetTotalUnlockGiftRsp& default_instance();

  void Swap(TActWeeklyFundGetTotalUnlockGiftRsp* other);

  // implements Message ----------------------------------------------

  TActWeeklyFundGetTotalUnlockGiftRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActWeeklyFundGetTotalUnlockGiftRsp& from);
  void MergeFrom(const TActWeeklyFundGetTotalUnlockGiftRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TotalUnlockGiftGetTime = 1;
  inline bool has_totalunlockgiftgettime() const;
  inline void clear_totalunlockgiftgettime();
  static const int kTotalUnlockGiftGetTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActWeeklyFundGetTotalUnlockGiftRsp</name>
  	<Function>
  		<name>totalunlockgiftgettime</name>
  		<replaceName>TotalUnlockGiftGetTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalunlockgiftgettime</name>
  		<replaceName>TotalUnlockGiftGetTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalunlockgiftgettime</name>
  		<replaceName>TotalUnlockGiftGetTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totalunlockgiftgettime() const;
  inline void set_totalunlockgiftgettime(::google::protobuf::uint64 value);

  // repeated .pb.TCommonReward DropArr = 2;
  inline int droparr_size() const;
  inline void clear_droparr();
  static const int kDropArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActWeeklyFundGetTotalUnlockGiftRsp</name>
  	<Function>
  		<name>droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparr_size</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparr(int index) const;
  inline ::pb::TCommonReward* mutable_droparr(int index);
  inline ::pb::TCommonReward* add_droparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparr();

  // @@protoc_insertion_point(class_scope:pb.TActWeeklyFundGetTotalUnlockGiftRsp)
 private:
  inline void set_has_totalunlockgiftgettime();
  inline void clear_has_totalunlockgiftgettime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 totalunlockgiftgettime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparr_;
  friend void  protobuf_AddDesc_net_2fActWeeklyFund_2eproto();
  friend void protobuf_AssignDesc_net_2fActWeeklyFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fActWeeklyFund_2eproto();

  void InitAsDefaultInstance();
  static TActWeeklyFundGetTotalUnlockGiftRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActWeeklyFundGetRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActWeeklyFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActWeeklyFundGetRewardReq : public ::google::protobuf::Message {
 public:
  TActWeeklyFundGetRewardReq();
  virtual ~TActWeeklyFundGetRewardReq();

  TActWeeklyFundGetRewardReq(const TActWeeklyFundGetRewardReq& from);

  inline TActWeeklyFundGetRewardReq& operator=(const TActWeeklyFundGetRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActWeeklyFundGetRewardReq& default_instance();

  void Swap(TActWeeklyFundGetRewardReq* other);

  // implements Message ----------------------------------------------

  TActWeeklyFundGetRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActWeeklyFundGetRewardReq& from);
  void MergeFrom(const TActWeeklyFundGetRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ActId = 1;
  inline bool has_actid() const;
  inline void clear_actid();
  static const int kActIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActWeeklyFundGetRewardReq</name>
  	<Function>
  		<name>actid</name>
  		<replaceName>ActId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_actid</name>
  		<replaceName>ActId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_actid</name>
  		<replaceName>ActId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 actid() const;
  inline void set_actid(::google::protobuf::uint32 value);

  // optional uint32 RewardId = 2;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActWeeklyFundGetRewardReq</name>
  	<Function>
  		<name>rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardid() const;
  inline void set_rewardid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActWeeklyFundGetRewardReq)
 private:
  inline void set_has_actid();
  inline void clear_has_actid();
  inline void set_has_rewardid();
  inline void clear_has_rewardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 actid_;
  ::google::protobuf::uint32 rewardid_;
  friend void  protobuf_AddDesc_net_2fActWeeklyFund_2eproto();
  friend void protobuf_AssignDesc_net_2fActWeeklyFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fActWeeklyFund_2eproto();

  void InitAsDefaultInstance();
  static TActWeeklyFundGetRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActWeeklyFundActIdRewardInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActWeeklyFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActWeeklyFundActIdRewardInfo : public ::google::protobuf::Message {
 public:
  TActWeeklyFundActIdRewardInfo();
  virtual ~TActWeeklyFundActIdRewardInfo();

  TActWeeklyFundActIdRewardInfo(const TActWeeklyFundActIdRewardInfo& from);

  inline TActWeeklyFundActIdRewardInfo& operator=(const TActWeeklyFundActIdRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActWeeklyFundActIdRewardInfo& default_instance();

  void Swap(TActWeeklyFundActIdRewardInfo* other);

  // implements Message ----------------------------------------------

  TActWeeklyFundActIdRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActWeeklyFundActIdRewardInfo& from);
  void MergeFrom(const TActWeeklyFundActIdRewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ActId = 1;
  inline bool has_actid() const;
  inline void clear_actid();
  static const int kActIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActWeeklyFundActIdRewardInfo</name>
  	<Function>
  		<name>actid</name>
  		<replaceName>ActId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_actid</name>
  		<replaceName>ActId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_actid</name>
  		<replaceName>ActId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 actid() const;
  inline void set_actid(::google::protobuf::uint32 value);

  // repeated uint32 RewardIdArr = 2;
  inline int rewardidarr_size() const;
  inline void clear_rewardidarr();
  static const int kRewardIdArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActWeeklyFundActIdRewardInfo</name>
  	<Function>
  		<name>rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardidarr_size</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardidarr(int index) const;
  inline void set_rewardidarr(int index, ::google::protobuf::uint32 value);
  inline void add_rewardidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rewardidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rewardidarr();

  // @@protoc_insertion_point(class_scope:pb.TActWeeklyFundActIdRewardInfo)
 private:
  inline void set_has_actid();
  inline void clear_has_actid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rewardidarr_;
  ::google::protobuf::uint32 actid_;
  friend void  protobuf_AddDesc_net_2fActWeeklyFund_2eproto();
  friend void protobuf_AssignDesc_net_2fActWeeklyFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fActWeeklyFund_2eproto();

  void InitAsDefaultInstance();
  static TActWeeklyFundActIdRewardInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActWeeklyFundAutoGetRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActWeeklyFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActWeeklyFundAutoGetRewardRsp : public ::google::protobuf::Message {
 public:
  TActWeeklyFundAutoGetRewardRsp();
  virtual ~TActWeeklyFundAutoGetRewardRsp();

  TActWeeklyFundAutoGetRewardRsp(const TActWeeklyFundAutoGetRewardRsp& from);

  inline TActWeeklyFundAutoGetRewardRsp& operator=(const TActWeeklyFundAutoGetRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActWeeklyFundAutoGetRewardRsp& default_instance();

  void Swap(TActWeeklyFundAutoGetRewardRsp* other);

  // implements Message ----------------------------------------------

  TActWeeklyFundAutoGetRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActWeeklyFundAutoGetRewardRsp& from);
  void MergeFrom(const TActWeeklyFundAutoGetRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActWeeklyFundActIdRewardInfo ActIdRewardArr = 1;
  inline int actidrewardarr_size() const;
  inline void clear_actidrewardarr();
  static const int kActIdRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActWeeklyFundAutoGetRewardRsp</name>
  	<Function>
  		<name>actidrewardarr</name>
  		<replaceName>ActIdRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_actidrewardarr</name>
  		<replaceName>ActIdRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_actidrewardarr</name>
  		<replaceName>ActIdRewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_actidrewardarr</name>
  		<replaceName>ActIdRewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>actidrewardarr_size</name>
  		<replaceName>ActIdRewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActWeeklyFundActIdRewardInfo& actidrewardarr(int index) const;
  inline ::pb::TActWeeklyFundActIdRewardInfo* mutable_actidrewardarr(int index);
  inline ::pb::TActWeeklyFundActIdRewardInfo* add_actidrewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActWeeklyFundActIdRewardInfo >&
      actidrewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActWeeklyFundActIdRewardInfo >*
      mutable_actidrewardarr();

  // repeated .pb.TCommonReward RewardArr = 3;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActWeeklyFundAutoGetRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TActWeeklyFundAutoGetRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActWeeklyFundActIdRewardInfo > actidrewardarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fActWeeklyFund_2eproto();
  friend void protobuf_AssignDesc_net_2fActWeeklyFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fActWeeklyFund_2eproto();

  void InitAsDefaultInstance();
  static TActWeeklyFundAutoGetRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActWeeklyFundNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActWeeklyFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActWeeklyFundNotify : public ::google::protobuf::Message {
 public:
  TActWeeklyFundNotify();
  virtual ~TActWeeklyFundNotify();

  TActWeeklyFundNotify(const TActWeeklyFundNotify& from);

  inline TActWeeklyFundNotify& operator=(const TActWeeklyFundNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActWeeklyFundNotify& default_instance();

  void Swap(TActWeeklyFundNotify* other);

  // implements Message ----------------------------------------------

  TActWeeklyFundNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActWeeklyFundNotify& from);
  void MergeFrom(const TActWeeklyFundNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TActWeeklyFundSignInfo SignArr = 1;
  inline bool has_signarr() const;
  inline void clear_signarr();
  static const int kSignArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActWeeklyFundNotify</name>
  	<Function>
  		<name>signarr</name>
  		<replaceName>SignArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_signarr</name>
  		<replaceName>SignArr</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_signarr</name>
  		<replaceName>SignArr</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signarr</name>
  		<replaceName>SignArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActWeeklyFundSignInfo& signarr() const;
  inline ::pb::TActWeeklyFundSignInfo* mutable_signarr();
  inline ::pb::TActWeeklyFundSignInfo* release_signarr();
  inline void set_allocated_signarr(::pb::TActWeeklyFundSignInfo* signarr);

  // @@protoc_insertion_point(class_scope:pb.TActWeeklyFundNotify)
 private:
  inline void set_has_signarr();
  inline void clear_has_signarr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TActWeeklyFundSignInfo* signarr_;
  friend void  protobuf_AddDesc_net_2fActWeeklyFund_2eproto();
  friend void protobuf_AssignDesc_net_2fActWeeklyFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fActWeeklyFund_2eproto();

  void InitAsDefaultInstance();
  static TActWeeklyFundNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TActWeeklyFundSignInfo

// optional uint32 Id = 1;
inline bool TActWeeklyFundSignInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActWeeklyFundSignInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActWeeklyFundSignInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActWeeklyFundSignInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActWeeklyFundSignInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TActWeeklyFundSignInfo.Id)
  return id_;
}
inline void TActWeeklyFundSignInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActWeeklyFundSignInfo.Id)
}

// optional uint64 PayTime = 2;
inline bool TActWeeklyFundSignInfo::has_paytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActWeeklyFundSignInfo::set_has_paytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActWeeklyFundSignInfo::clear_has_paytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActWeeklyFundSignInfo::clear_paytime() {
  paytime_ = GOOGLE_ULONGLONG(0);
  clear_has_paytime();
}
inline ::google::protobuf::uint64 TActWeeklyFundSignInfo::paytime() const {
  // @@protoc_insertion_point(field_get:pb.TActWeeklyFundSignInfo.PayTime)
  return paytime_;
}
inline void TActWeeklyFundSignInfo::set_paytime(::google::protobuf::uint64 value) {
  set_has_paytime();
  paytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActWeeklyFundSignInfo.PayTime)
}

// repeated uint32 RewardIdArr = 3;
inline int TActWeeklyFundSignInfo::rewardidarr_size() const {
  return rewardidarr_.size();
}
inline void TActWeeklyFundSignInfo::clear_rewardidarr() {
  rewardidarr_.Clear();
}
inline ::google::protobuf::uint32 TActWeeklyFundSignInfo::rewardidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActWeeklyFundSignInfo.RewardIdArr)
  return rewardidarr_.Get(index);
}
inline void TActWeeklyFundSignInfo::set_rewardidarr(int index, ::google::protobuf::uint32 value) {
  rewardidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActWeeklyFundSignInfo.RewardIdArr)
}
inline void TActWeeklyFundSignInfo::add_rewardidarr(::google::protobuf::uint32 value) {
  rewardidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActWeeklyFundSignInfo.RewardIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActWeeklyFundSignInfo::rewardidarr() const {
  // @@protoc_insertion_point(field_list:pb.TActWeeklyFundSignInfo.RewardIdArr)
  return rewardidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActWeeklyFundSignInfo::mutable_rewardidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActWeeklyFundSignInfo.RewardIdArr)
  return &rewardidarr_;
}

// -------------------------------------------------------------------

// TActWeeklyFundGetInfoRsp

// repeated .pb.TActWeeklyFundSignInfo SignArr = 1;
inline int TActWeeklyFundGetInfoRsp::signarr_size() const {
  return signarr_.size();
}
inline void TActWeeklyFundGetInfoRsp::clear_signarr() {
  signarr_.Clear();
}
inline const ::pb::TActWeeklyFundSignInfo& TActWeeklyFundGetInfoRsp::signarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActWeeklyFundGetInfoRsp.SignArr)
  return signarr_.Get(index);
}
inline ::pb::TActWeeklyFundSignInfo* TActWeeklyFundGetInfoRsp::mutable_signarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActWeeklyFundGetInfoRsp.SignArr)
  return signarr_.Mutable(index);
}
inline ::pb::TActWeeklyFundSignInfo* TActWeeklyFundGetInfoRsp::add_signarr() {
  // @@protoc_insertion_point(field_add:pb.TActWeeklyFundGetInfoRsp.SignArr)
  return signarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActWeeklyFundSignInfo >&
TActWeeklyFundGetInfoRsp::signarr() const {
  // @@protoc_insertion_point(field_list:pb.TActWeeklyFundGetInfoRsp.SignArr)
  return signarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActWeeklyFundSignInfo >*
TActWeeklyFundGetInfoRsp::mutable_signarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActWeeklyFundGetInfoRsp.SignArr)
  return &signarr_;
}

// optional uint64 DailyGiftGetTime = 2;
inline bool TActWeeklyFundGetInfoRsp::has_dailygiftgettime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActWeeklyFundGetInfoRsp::set_has_dailygiftgettime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActWeeklyFundGetInfoRsp::clear_has_dailygiftgettime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActWeeklyFundGetInfoRsp::clear_dailygiftgettime() {
  dailygiftgettime_ = GOOGLE_ULONGLONG(0);
  clear_has_dailygiftgettime();
}
inline ::google::protobuf::uint64 TActWeeklyFundGetInfoRsp::dailygiftgettime() const {
  // @@protoc_insertion_point(field_get:pb.TActWeeklyFundGetInfoRsp.DailyGiftGetTime)
  return dailygiftgettime_;
}
inline void TActWeeklyFundGetInfoRsp::set_dailygiftgettime(::google::protobuf::uint64 value) {
  set_has_dailygiftgettime();
  dailygiftgettime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActWeeklyFundGetInfoRsp.DailyGiftGetTime)
}

// optional uint64 TotalUnlockGiftGetTime = 3;
inline bool TActWeeklyFundGetInfoRsp::has_totalunlockgiftgettime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActWeeklyFundGetInfoRsp::set_has_totalunlockgiftgettime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActWeeklyFundGetInfoRsp::clear_has_totalunlockgiftgettime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActWeeklyFundGetInfoRsp::clear_totalunlockgiftgettime() {
  totalunlockgiftgettime_ = GOOGLE_ULONGLONG(0);
  clear_has_totalunlockgiftgettime();
}
inline ::google::protobuf::uint64 TActWeeklyFundGetInfoRsp::totalunlockgiftgettime() const {
  // @@protoc_insertion_point(field_get:pb.TActWeeklyFundGetInfoRsp.TotalUnlockGiftGetTime)
  return totalunlockgiftgettime_;
}
inline void TActWeeklyFundGetInfoRsp::set_totalunlockgiftgettime(::google::protobuf::uint64 value) {
  set_has_totalunlockgiftgettime();
  totalunlockgiftgettime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActWeeklyFundGetInfoRsp.TotalUnlockGiftGetTime)
}

// -------------------------------------------------------------------

// TActWeeklyFundGetDailyGiftRsp

// optional uint64 DailyGiftGetTime = 1;
inline bool TActWeeklyFundGetDailyGiftRsp::has_dailygiftgettime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActWeeklyFundGetDailyGiftRsp::set_has_dailygiftgettime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActWeeklyFundGetDailyGiftRsp::clear_has_dailygiftgettime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActWeeklyFundGetDailyGiftRsp::clear_dailygiftgettime() {
  dailygiftgettime_ = GOOGLE_ULONGLONG(0);
  clear_has_dailygiftgettime();
}
inline ::google::protobuf::uint64 TActWeeklyFundGetDailyGiftRsp::dailygiftgettime() const {
  // @@protoc_insertion_point(field_get:pb.TActWeeklyFundGetDailyGiftRsp.DailyGiftGetTime)
  return dailygiftgettime_;
}
inline void TActWeeklyFundGetDailyGiftRsp::set_dailygiftgettime(::google::protobuf::uint64 value) {
  set_has_dailygiftgettime();
  dailygiftgettime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActWeeklyFundGetDailyGiftRsp.DailyGiftGetTime)
}

// repeated .pb.TCommonReward DropArr = 2;
inline int TActWeeklyFundGetDailyGiftRsp::droparr_size() const {
  return droparr_.size();
}
inline void TActWeeklyFundGetDailyGiftRsp::clear_droparr() {
  droparr_.Clear();
}
inline const ::pb::TCommonReward& TActWeeklyFundGetDailyGiftRsp::droparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActWeeklyFundGetDailyGiftRsp.DropArr)
  return droparr_.Get(index);
}
inline ::pb::TCommonReward* TActWeeklyFundGetDailyGiftRsp::mutable_droparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActWeeklyFundGetDailyGiftRsp.DropArr)
  return droparr_.Mutable(index);
}
inline ::pb::TCommonReward* TActWeeklyFundGetDailyGiftRsp::add_droparr() {
  // @@protoc_insertion_point(field_add:pb.TActWeeklyFundGetDailyGiftRsp.DropArr)
  return droparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActWeeklyFundGetDailyGiftRsp::droparr() const {
  // @@protoc_insertion_point(field_list:pb.TActWeeklyFundGetDailyGiftRsp.DropArr)
  return droparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActWeeklyFundGetDailyGiftRsp::mutable_droparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActWeeklyFundGetDailyGiftRsp.DropArr)
  return &droparr_;
}

// -------------------------------------------------------------------

// TActWeeklyFundGetTotalUnlockGiftRsp

// optional uint64 TotalUnlockGiftGetTime = 1;
inline bool TActWeeklyFundGetTotalUnlockGiftRsp::has_totalunlockgiftgettime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActWeeklyFundGetTotalUnlockGiftRsp::set_has_totalunlockgiftgettime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActWeeklyFundGetTotalUnlockGiftRsp::clear_has_totalunlockgiftgettime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActWeeklyFundGetTotalUnlockGiftRsp::clear_totalunlockgiftgettime() {
  totalunlockgiftgettime_ = GOOGLE_ULONGLONG(0);
  clear_has_totalunlockgiftgettime();
}
inline ::google::protobuf::uint64 TActWeeklyFundGetTotalUnlockGiftRsp::totalunlockgiftgettime() const {
  // @@protoc_insertion_point(field_get:pb.TActWeeklyFundGetTotalUnlockGiftRsp.TotalUnlockGiftGetTime)
  return totalunlockgiftgettime_;
}
inline void TActWeeklyFundGetTotalUnlockGiftRsp::set_totalunlockgiftgettime(::google::protobuf::uint64 value) {
  set_has_totalunlockgiftgettime();
  totalunlockgiftgettime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActWeeklyFundGetTotalUnlockGiftRsp.TotalUnlockGiftGetTime)
}

// repeated .pb.TCommonReward DropArr = 2;
inline int TActWeeklyFundGetTotalUnlockGiftRsp::droparr_size() const {
  return droparr_.size();
}
inline void TActWeeklyFundGetTotalUnlockGiftRsp::clear_droparr() {
  droparr_.Clear();
}
inline const ::pb::TCommonReward& TActWeeklyFundGetTotalUnlockGiftRsp::droparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActWeeklyFundGetTotalUnlockGiftRsp.DropArr)
  return droparr_.Get(index);
}
inline ::pb::TCommonReward* TActWeeklyFundGetTotalUnlockGiftRsp::mutable_droparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActWeeklyFundGetTotalUnlockGiftRsp.DropArr)
  return droparr_.Mutable(index);
}
inline ::pb::TCommonReward* TActWeeklyFundGetTotalUnlockGiftRsp::add_droparr() {
  // @@protoc_insertion_point(field_add:pb.TActWeeklyFundGetTotalUnlockGiftRsp.DropArr)
  return droparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActWeeklyFundGetTotalUnlockGiftRsp::droparr() const {
  // @@protoc_insertion_point(field_list:pb.TActWeeklyFundGetTotalUnlockGiftRsp.DropArr)
  return droparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActWeeklyFundGetTotalUnlockGiftRsp::mutable_droparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActWeeklyFundGetTotalUnlockGiftRsp.DropArr)
  return &droparr_;
}

// -------------------------------------------------------------------

// TActWeeklyFundGetRewardReq

// optional uint32 ActId = 1;
inline bool TActWeeklyFundGetRewardReq::has_actid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActWeeklyFundGetRewardReq::set_has_actid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActWeeklyFundGetRewardReq::clear_has_actid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActWeeklyFundGetRewardReq::clear_actid() {
  actid_ = 0u;
  clear_has_actid();
}
inline ::google::protobuf::uint32 TActWeeklyFundGetRewardReq::actid() const {
  // @@protoc_insertion_point(field_get:pb.TActWeeklyFundGetRewardReq.ActId)
  return actid_;
}
inline void TActWeeklyFundGetRewardReq::set_actid(::google::protobuf::uint32 value) {
  set_has_actid();
  actid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActWeeklyFundGetRewardReq.ActId)
}

// optional uint32 RewardId = 2;
inline bool TActWeeklyFundGetRewardReq::has_rewardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActWeeklyFundGetRewardReq::set_has_rewardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActWeeklyFundGetRewardReq::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActWeeklyFundGetRewardReq::clear_rewardid() {
  rewardid_ = 0u;
  clear_has_rewardid();
}
inline ::google::protobuf::uint32 TActWeeklyFundGetRewardReq::rewardid() const {
  // @@protoc_insertion_point(field_get:pb.TActWeeklyFundGetRewardReq.RewardId)
  return rewardid_;
}
inline void TActWeeklyFundGetRewardReq::set_rewardid(::google::protobuf::uint32 value) {
  set_has_rewardid();
  rewardid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActWeeklyFundGetRewardReq.RewardId)
}

// -------------------------------------------------------------------

// TActWeeklyFundActIdRewardInfo

// optional uint32 ActId = 1;
inline bool TActWeeklyFundActIdRewardInfo::has_actid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActWeeklyFundActIdRewardInfo::set_has_actid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActWeeklyFundActIdRewardInfo::clear_has_actid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActWeeklyFundActIdRewardInfo::clear_actid() {
  actid_ = 0u;
  clear_has_actid();
}
inline ::google::protobuf::uint32 TActWeeklyFundActIdRewardInfo::actid() const {
  // @@protoc_insertion_point(field_get:pb.TActWeeklyFundActIdRewardInfo.ActId)
  return actid_;
}
inline void TActWeeklyFundActIdRewardInfo::set_actid(::google::protobuf::uint32 value) {
  set_has_actid();
  actid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActWeeklyFundActIdRewardInfo.ActId)
}

// repeated uint32 RewardIdArr = 2;
inline int TActWeeklyFundActIdRewardInfo::rewardidarr_size() const {
  return rewardidarr_.size();
}
inline void TActWeeklyFundActIdRewardInfo::clear_rewardidarr() {
  rewardidarr_.Clear();
}
inline ::google::protobuf::uint32 TActWeeklyFundActIdRewardInfo::rewardidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActWeeklyFundActIdRewardInfo.RewardIdArr)
  return rewardidarr_.Get(index);
}
inline void TActWeeklyFundActIdRewardInfo::set_rewardidarr(int index, ::google::protobuf::uint32 value) {
  rewardidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActWeeklyFundActIdRewardInfo.RewardIdArr)
}
inline void TActWeeklyFundActIdRewardInfo::add_rewardidarr(::google::protobuf::uint32 value) {
  rewardidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActWeeklyFundActIdRewardInfo.RewardIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActWeeklyFundActIdRewardInfo::rewardidarr() const {
  // @@protoc_insertion_point(field_list:pb.TActWeeklyFundActIdRewardInfo.RewardIdArr)
  return rewardidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActWeeklyFundActIdRewardInfo::mutable_rewardidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActWeeklyFundActIdRewardInfo.RewardIdArr)
  return &rewardidarr_;
}

// -------------------------------------------------------------------

// TActWeeklyFundAutoGetRewardRsp

// repeated .pb.TActWeeklyFundActIdRewardInfo ActIdRewardArr = 1;
inline int TActWeeklyFundAutoGetRewardRsp::actidrewardarr_size() const {
  return actidrewardarr_.size();
}
inline void TActWeeklyFundAutoGetRewardRsp::clear_actidrewardarr() {
  actidrewardarr_.Clear();
}
inline const ::pb::TActWeeklyFundActIdRewardInfo& TActWeeklyFundAutoGetRewardRsp::actidrewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActWeeklyFundAutoGetRewardRsp.ActIdRewardArr)
  return actidrewardarr_.Get(index);
}
inline ::pb::TActWeeklyFundActIdRewardInfo* TActWeeklyFundAutoGetRewardRsp::mutable_actidrewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActWeeklyFundAutoGetRewardRsp.ActIdRewardArr)
  return actidrewardarr_.Mutable(index);
}
inline ::pb::TActWeeklyFundActIdRewardInfo* TActWeeklyFundAutoGetRewardRsp::add_actidrewardarr() {
  // @@protoc_insertion_point(field_add:pb.TActWeeklyFundAutoGetRewardRsp.ActIdRewardArr)
  return actidrewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActWeeklyFundActIdRewardInfo >&
TActWeeklyFundAutoGetRewardRsp::actidrewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TActWeeklyFundAutoGetRewardRsp.ActIdRewardArr)
  return actidrewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActWeeklyFundActIdRewardInfo >*
TActWeeklyFundAutoGetRewardRsp::mutable_actidrewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActWeeklyFundAutoGetRewardRsp.ActIdRewardArr)
  return &actidrewardarr_;
}

// repeated .pb.TCommonReward RewardArr = 3;
inline int TActWeeklyFundAutoGetRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TActWeeklyFundAutoGetRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TActWeeklyFundAutoGetRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActWeeklyFundAutoGetRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TActWeeklyFundAutoGetRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActWeeklyFundAutoGetRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TActWeeklyFundAutoGetRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TActWeeklyFundAutoGetRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActWeeklyFundAutoGetRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TActWeeklyFundAutoGetRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActWeeklyFundAutoGetRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActWeeklyFundAutoGetRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TActWeeklyFundNotify

// optional .pb.TActWeeklyFundSignInfo SignArr = 1;
inline bool TActWeeklyFundNotify::has_signarr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActWeeklyFundNotify::set_has_signarr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActWeeklyFundNotify::clear_has_signarr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActWeeklyFundNotify::clear_signarr() {
  if (signarr_ != NULL) signarr_->::pb::TActWeeklyFundSignInfo::Clear();
  clear_has_signarr();
}
inline const ::pb::TActWeeklyFundSignInfo& TActWeeklyFundNotify::signarr() const {
  // @@protoc_insertion_point(field_get:pb.TActWeeklyFundNotify.SignArr)
  return signarr_ != NULL ? *signarr_ : *default_instance_->signarr_;
}
inline ::pb::TActWeeklyFundSignInfo* TActWeeklyFundNotify::mutable_signarr() {
  set_has_signarr();
  if (signarr_ == NULL) signarr_ = new ::pb::TActWeeklyFundSignInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActWeeklyFundNotify.SignArr)
  return signarr_;
}
inline ::pb::TActWeeklyFundSignInfo* TActWeeklyFundNotify::release_signarr() {
  clear_has_signarr();
  ::pb::TActWeeklyFundSignInfo* temp = signarr_;
  signarr_ = NULL;
  return temp;
}
inline void TActWeeklyFundNotify::set_allocated_signarr(::pb::TActWeeklyFundSignInfo* signarr) {
  delete signarr_;
  signarr_ = signarr;
  if (signarr) {
    set_has_signarr();
  } else {
    clear_has_signarr();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActWeeklyFundNotify.SignArr)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActWeeklyFund_2eproto__INCLUDED
