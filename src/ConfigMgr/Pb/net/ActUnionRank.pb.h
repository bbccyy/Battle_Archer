// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActUnionRank.proto

#ifndef PROTOBUF_net_2fActUnionRank_2eproto__INCLUDED
#define PROTOBUF_net_2fActUnionRank_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Alliance.pb.h"
#include "net/CommonReward.pb.h"
#include "net/OpenActivity.pb.h"
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActUnionRank_2eproto();
void protobuf_AssignDesc_net_2fActUnionRank_2eproto();
void protobuf_ShutdownFile_net_2fActUnionRank_2eproto();

class TActUnionRankTaskInfo;
class TActUnionRankInfo;
class TActUnionRankUserInfo;
class TActUnionRankAllianceSimpleInfoWithUser;
class TActUnionRankGetAllRankInfoReq;
class TActUnionRankGetAllRankInfoRsp;
class TActUnionRankGetAllianceMembersInfoRep;
class TActUnionRankGetAllianceMembersInfoRsp;
class TActUnionRankReceiveRewardRsp;
class TActUnionRankGetUserTaskInfoRsp;

enum EActUnionRankRewardType {
  MVP = 1,
  ELITE = 2,
  EXCELLENT = 3,
  MEMBER = 99,
  UNASSIGNED = 0
};
bool EActUnionRankRewardType_IsValid(int value);
const EActUnionRankRewardType EActUnionRankRewardType_MIN = UNASSIGNED;
const EActUnionRankRewardType EActUnionRankRewardType_MAX = MEMBER;
const int EActUnionRankRewardType_ARRAYSIZE = EActUnionRankRewardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EActUnionRankRewardType_descriptor();
inline const ::std::string& EActUnionRankRewardType_Name(EActUnionRankRewardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EActUnionRankRewardType_descriptor(), value);
}
inline bool EActUnionRankRewardType_Parse(
    const ::std::string& name, EActUnionRankRewardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EActUnionRankRewardType>(
    EActUnionRankRewardType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TActUnionRankTaskInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActUnionRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActUnionRankTaskInfo : public ::google::protobuf::Message {
 public:
  TActUnionRankTaskInfo();
  virtual ~TActUnionRankTaskInfo();

  TActUnionRankTaskInfo(const TActUnionRankTaskInfo& from);

  inline TActUnionRankTaskInfo& operator=(const TActUnionRankTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActUnionRankTaskInfo& default_instance();

  void Swap(TActUnionRankTaskInfo* other);

  // implements Message ----------------------------------------------

  TActUnionRankTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActUnionRankTaskInfo& from);
  void MergeFrom(const TActUnionRankTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankTaskInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankTaskInfo</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 num() const;
  inline void set_num(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActUnionRankTaskInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 num_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_AssignDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fActUnionRank_2eproto();

  void InitAsDefaultInstance();
  static TActUnionRankTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActUnionRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActUnionRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActUnionRankInfo : public ::google::protobuf::Message {
 public:
  TActUnionRankInfo();
  virtual ~TActUnionRankInfo();

  TActUnionRankInfo(const TActUnionRankInfo& from);

  inline TActUnionRankInfo& operator=(const TActUnionRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActUnionRankInfo& default_instance();

  void Swap(TActUnionRankInfo* other);

  // implements Message ----------------------------------------------

  TActUnionRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActUnionRankInfo& from);
  void MergeFrom(const TActUnionRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankInfo</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string BannerName = 2;
  inline bool has_bannername() const;
  inline void clear_bannername();
  static const int kBannerNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankInfo</name>
  	<Function>
  		<name>bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& bannername() const;
  inline void set_bannername(const ::std::string& value);
  inline void set_bannername(const char* value);
  inline void set_bannername(const char* value, size_t size);
  inline ::std::string* mutable_bannername();
  inline ::std::string* release_bannername();
  inline void set_allocated_bannername(::std::string* bannername);

  // optional uint32 BannerBase = 3;
  inline bool has_bannerbase() const;
  inline void clear_bannerbase();
  static const int kBannerBaseFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankInfo</name>
  	<Function>
  		<name>bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bannerbase() const;
  inline void set_bannerbase(::google::protobuf::uint32 value);

  // optional uint32 Domain = 4;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankInfo</name>
  	<Function>
  		<name>domain</name>
  		<replaceName>Domain</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_domain</name>
  		<replaceName>Domain</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_domain</name>
  		<replaceName>Domain</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 domain() const;
  inline void set_domain(::google::protobuf::uint32 value);

  // optional uint64 AllyScore = 5;
  inline bool has_allyscore() const;
  inline void clear_allyscore();
  static const int kAllyScoreFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankInfo</name>
  	<Function>
  		<name>allyscore</name>
  		<replaceName>AllyScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allyscore</name>
  		<replaceName>AllyScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allyscore</name>
  		<replaceName>AllyScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 allyscore() const;
  inline void set_allyscore(::google::protobuf::uint64 value);

  // optional uint32 Rank = 6;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankInfo</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActUnionRankInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_bannername();
  inline void clear_has_bannername();
  inline void set_has_bannerbase();
  inline void clear_has_bannerbase();
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_allyscore();
  inline void clear_has_allyscore();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* bannername_;
  ::google::protobuf::uint32 bannerbase_;
  ::google::protobuf::uint32 domain_;
  ::google::protobuf::uint64 allyscore_;
  ::google::protobuf::uint32 rank_;
  friend void  protobuf_AddDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_AssignDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fActUnionRank_2eproto();

  void InitAsDefaultInstance();
  static TActUnionRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActUnionRankUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActUnionRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActUnionRankUserInfo : public ::google::protobuf::Message {
 public:
  TActUnionRankUserInfo();
  virtual ~TActUnionRankUserInfo();

  TActUnionRankUserInfo(const TActUnionRankUserInfo& from);

  inline TActUnionRankUserInfo& operator=(const TActUnionRankUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActUnionRankUserInfo& default_instance();

  void Swap(TActUnionRankUserInfo* other);

  // implements Message ----------------------------------------------

  TActUnionRankUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActUnionRankUserInfo& from);
  void MergeFrom(const TActUnionRankUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankUserInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint64 Score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankUserInfo</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 score() const;
  inline void set_score(::google::protobuf::uint64 value);

  // optional uint32 Rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankUserInfo</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional .pb.EAlliancePost Post = 5;
  inline bool has_post() const;
  inline void clear_post();
  static const int kPostFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankUserInfo</name>
  	<Function>
  		<name>post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAlliancePost post() const;
  inline void set_post(::pb::EAlliancePost value);

  // @@protoc_insertion_point(class_scope:pb.TActUnionRankUserInfo)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_post();
  inline void clear_has_post();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint64 score_;
  ::google::protobuf::uint32 rank_;
  int post_;
  friend void  protobuf_AddDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_AssignDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fActUnionRank_2eproto();

  void InitAsDefaultInstance();
  static TActUnionRankUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActUnionRankAllianceSimpleInfoWithUser</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActUnionRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActUnionRankAllianceSimpleInfoWithUser : public ::google::protobuf::Message {
 public:
  TActUnionRankAllianceSimpleInfoWithUser();
  virtual ~TActUnionRankAllianceSimpleInfoWithUser();

  TActUnionRankAllianceSimpleInfoWithUser(const TActUnionRankAllianceSimpleInfoWithUser& from);

  inline TActUnionRankAllianceSimpleInfoWithUser& operator=(const TActUnionRankAllianceSimpleInfoWithUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActUnionRankAllianceSimpleInfoWithUser& default_instance();

  void Swap(TActUnionRankAllianceSimpleInfoWithUser* other);

  // implements Message ----------------------------------------------

  TActUnionRankAllianceSimpleInfoWithUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActUnionRankAllianceSimpleInfoWithUser& from);
  void MergeFrom(const TActUnionRankAllianceSimpleInfoWithUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
  inline bool has_alliancesimpleinfo() const;
  inline void clear_alliancesimpleinfo();
  static const int kAllianceSimpleInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankAllianceSimpleInfoWithUser</name>
  	<Function>
  		<name>alliancesimpleinfo</name>
  		<replaceName>AllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_alliancesimpleinfo</name>
  		<replaceName>AllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_alliancesimpleinfo</name>
  		<replaceName>AllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_alliancesimpleinfo</name>
  		<replaceName>AllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceSimpleInfo& alliancesimpleinfo() const;
  inline ::pb::TAllianceSimpleInfo* mutable_alliancesimpleinfo();
  inline ::pb::TAllianceSimpleInfo* release_alliancesimpleinfo();
  inline void set_allocated_alliancesimpleinfo(::pb::TAllianceSimpleInfo* alliancesimpleinfo);

  // repeated .pb.TActUnionRankUserInfo ArrUserBaseInfo = 2;
  inline int arruserbaseinfo_size() const;
  inline void clear_arruserbaseinfo();
  static const int kArrUserBaseInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankAllianceSimpleInfoWithUser</name>
  	<Function>
  		<name>arruserbaseinfo</name>
  		<replaceName>ArrUserBaseInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arruserbaseinfo</name>
  		<replaceName>ArrUserBaseInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arruserbaseinfo</name>
  		<replaceName>ArrUserBaseInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arruserbaseinfo</name>
  		<replaceName>ArrUserBaseInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arruserbaseinfo_size</name>
  		<replaceName>ArrUserBaseInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActUnionRankUserInfo& arruserbaseinfo(int index) const;
  inline ::pb::TActUnionRankUserInfo* mutable_arruserbaseinfo(int index);
  inline ::pb::TActUnionRankUserInfo* add_arruserbaseinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankUserInfo >&
      arruserbaseinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankUserInfo >*
      mutable_arruserbaseinfo();

  // @@protoc_insertion_point(class_scope:pb.TActUnionRankAllianceSimpleInfoWithUser)
 private:
  inline void set_has_alliancesimpleinfo();
  inline void clear_has_alliancesimpleinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAllianceSimpleInfo* alliancesimpleinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankUserInfo > arruserbaseinfo_;
  friend void  protobuf_AddDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_AssignDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fActUnionRank_2eproto();

  void InitAsDefaultInstance();
  static TActUnionRankAllianceSimpleInfoWithUser* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActUnionRankGetAllRankInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActUnionRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActUnionRankGetAllRankInfoReq : public ::google::protobuf::Message {
 public:
  TActUnionRankGetAllRankInfoReq();
  virtual ~TActUnionRankGetAllRankInfoReq();

  TActUnionRankGetAllRankInfoReq(const TActUnionRankGetAllRankInfoReq& from);

  inline TActUnionRankGetAllRankInfoReq& operator=(const TActUnionRankGetAllRankInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActUnionRankGetAllRankInfoReq& default_instance();

  void Swap(TActUnionRankGetAllRankInfoReq* other);

  // implements Message ----------------------------------------------

  TActUnionRankGetAllRankInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActUnionRankGetAllRankInfoReq& from);
  void MergeFrom(const TActUnionRankGetAllRankInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankGetAllRankInfoReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankGetAllRankInfoReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActUnionRankGetAllRankInfoReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_AssignDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fActUnionRank_2eproto();

  void InitAsDefaultInstance();
  static TActUnionRankGetAllRankInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActUnionRankGetAllRankInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActUnionRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActUnionRankGetAllRankInfoRsp : public ::google::protobuf::Message {
 public:
  TActUnionRankGetAllRankInfoRsp();
  virtual ~TActUnionRankGetAllRankInfoRsp();

  TActUnionRankGetAllRankInfoRsp(const TActUnionRankGetAllRankInfoRsp& from);

  inline TActUnionRankGetAllRankInfoRsp& operator=(const TActUnionRankGetAllRankInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActUnionRankGetAllRankInfoRsp& default_instance();

  void Swap(TActUnionRankGetAllRankInfoRsp* other);

  // implements Message ----------------------------------------------

  TActUnionRankGetAllRankInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActUnionRankGetAllRankInfoRsp& from);
  void MergeFrom(const TActUnionRankGetAllRankInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TActUnionRankInfo MyAllyRankInfo = 1;
  inline bool has_myallyrankinfo() const;
  inline void clear_myallyrankinfo();
  static const int kMyAllyRankInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankGetAllRankInfoRsp</name>
  	<Function>
  		<name>myallyrankinfo</name>
  		<replaceName>MyAllyRankInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myallyrankinfo</name>
  		<replaceName>MyAllyRankInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_myallyrankinfo</name>
  		<replaceName>MyAllyRankInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myallyrankinfo</name>
  		<replaceName>MyAllyRankInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActUnionRankInfo& myallyrankinfo() const;
  inline ::pb::TActUnionRankInfo* mutable_myallyrankinfo();
  inline ::pb::TActUnionRankInfo* release_myallyrankinfo();
  inline void set_allocated_myallyrankinfo(::pb::TActUnionRankInfo* myallyrankinfo);

  // repeated .pb.TActUnionRankInfo AllRankInfo = 2;
  inline int allrankinfo_size() const;
  inline void clear_allrankinfo();
  static const int kAllRankInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankGetAllRankInfoRsp</name>
  	<Function>
  		<name>allrankinfo</name>
  		<replaceName>AllRankInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_allrankinfo</name>
  		<replaceName>AllRankInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_allrankinfo</name>
  		<replaceName>AllRankInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allrankinfo</name>
  		<replaceName>AllRankInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>allrankinfo_size</name>
  		<replaceName>AllRankInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActUnionRankInfo& allrankinfo(int index) const;
  inline ::pb::TActUnionRankInfo* mutable_allrankinfo(int index);
  inline ::pb::TActUnionRankInfo* add_allrankinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankInfo >&
      allrankinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankInfo >*
      mutable_allrankinfo();

  // @@protoc_insertion_point(class_scope:pb.TActUnionRankGetAllRankInfoRsp)
 private:
  inline void set_has_myallyrankinfo();
  inline void clear_has_myallyrankinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TActUnionRankInfo* myallyrankinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankInfo > allrankinfo_;
  friend void  protobuf_AddDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_AssignDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fActUnionRank_2eproto();

  void InitAsDefaultInstance();
  static TActUnionRankGetAllRankInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActUnionRankGetAllianceMembersInfoRep</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActUnionRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActUnionRankGetAllianceMembersInfoRep : public ::google::protobuf::Message {
 public:
  TActUnionRankGetAllianceMembersInfoRep();
  virtual ~TActUnionRankGetAllianceMembersInfoRep();

  TActUnionRankGetAllianceMembersInfoRep(const TActUnionRankGetAllianceMembersInfoRep& from);

  inline TActUnionRankGetAllianceMembersInfoRep& operator=(const TActUnionRankGetAllianceMembersInfoRep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActUnionRankGetAllianceMembersInfoRep& default_instance();

  void Swap(TActUnionRankGetAllianceMembersInfoRep* other);

  // implements Message ----------------------------------------------

  TActUnionRankGetAllianceMembersInfoRep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActUnionRankGetAllianceMembersInfoRep& from);
  void MergeFrom(const TActUnionRankGetAllianceMembersInfoRep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankGetAllianceMembersInfoRep</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankGetAllianceMembersInfoRep</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActUnionRankGetAllianceMembersInfoRep)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_AssignDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fActUnionRank_2eproto();

  void InitAsDefaultInstance();
  static TActUnionRankGetAllianceMembersInfoRep* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActUnionRankGetAllianceMembersInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActUnionRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActUnionRankGetAllianceMembersInfoRsp : public ::google::protobuf::Message {
 public:
  TActUnionRankGetAllianceMembersInfoRsp();
  virtual ~TActUnionRankGetAllianceMembersInfoRsp();

  TActUnionRankGetAllianceMembersInfoRsp(const TActUnionRankGetAllianceMembersInfoRsp& from);

  inline TActUnionRankGetAllianceMembersInfoRsp& operator=(const TActUnionRankGetAllianceMembersInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActUnionRankGetAllianceMembersInfoRsp& default_instance();

  void Swap(TActUnionRankGetAllianceMembersInfoRsp* other);

  // implements Message ----------------------------------------------

  TActUnionRankGetAllianceMembersInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActUnionRankGetAllianceMembersInfoRsp& from);
  void MergeFrom(const TActUnionRankGetAllianceMembersInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MyRank = 1;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankGetAllianceMembersInfoRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // optional .pb.EActUnionRankRewardType RewardType = 2;
  inline bool has_rewardtype() const;
  inline void clear_rewardtype();
  static const int kRewardTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankGetAllianceMembersInfoRsp</name>
  	<Function>
  		<name>rewardtype</name>
  		<replaceName>RewardType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtype</name>
  		<replaceName>RewardType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtype</name>
  		<replaceName>RewardType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EActUnionRankRewardType rewardtype() const;
  inline void set_rewardtype(::pb::EActUnionRankRewardType value);

  // repeated .pb.TActUnionRankUserInfo AllMembersRank = 3;
  inline int allmembersrank_size() const;
  inline void clear_allmembersrank();
  static const int kAllMembersRankFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankGetAllianceMembersInfoRsp</name>
  	<Function>
  		<name>allmembersrank</name>
  		<replaceName>AllMembersRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_allmembersrank</name>
  		<replaceName>AllMembersRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_allmembersrank</name>
  		<replaceName>AllMembersRank</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allmembersrank</name>
  		<replaceName>AllMembersRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>allmembersrank_size</name>
  		<replaceName>AllMembersRank</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActUnionRankUserInfo& allmembersrank(int index) const;
  inline ::pb::TActUnionRankUserInfo* mutable_allmembersrank(int index);
  inline ::pb::TActUnionRankUserInfo* add_allmembersrank();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankUserInfo >&
      allmembersrank() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankUserInfo >*
      mutable_allmembersrank();

  // @@protoc_insertion_point(class_scope:pb.TActUnionRankGetAllianceMembersInfoRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();
  inline void set_has_rewardtype();
  inline void clear_has_rewardtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 myrank_;
  int rewardtype_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankUserInfo > allmembersrank_;
  friend void  protobuf_AddDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_AssignDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fActUnionRank_2eproto();

  void InitAsDefaultInstance();
  static TActUnionRankGetAllianceMembersInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActUnionRankReceiveRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActUnionRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActUnionRankReceiveRewardRsp : public ::google::protobuf::Message {
 public:
  TActUnionRankReceiveRewardRsp();
  virtual ~TActUnionRankReceiveRewardRsp();

  TActUnionRankReceiveRewardRsp(const TActUnionRankReceiveRewardRsp& from);

  inline TActUnionRankReceiveRewardRsp& operator=(const TActUnionRankReceiveRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActUnionRankReceiveRewardRsp& default_instance();

  void Swap(TActUnionRankReceiveRewardRsp* other);

  // implements Message ----------------------------------------------

  TActUnionRankReceiveRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActUnionRankReceiveRewardRsp& from);
  void MergeFrom(const TActUnionRankReceiveRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankReceiveRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TActUnionRankReceiveRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_AssignDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fActUnionRank_2eproto();

  void InitAsDefaultInstance();
  static TActUnionRankReceiveRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActUnionRankGetUserTaskInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActUnionRank.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActUnionRankGetUserTaskInfoRsp : public ::google::protobuf::Message {
 public:
  TActUnionRankGetUserTaskInfoRsp();
  virtual ~TActUnionRankGetUserTaskInfoRsp();

  TActUnionRankGetUserTaskInfoRsp(const TActUnionRankGetUserTaskInfoRsp& from);

  inline TActUnionRankGetUserTaskInfoRsp& operator=(const TActUnionRankGetUserTaskInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActUnionRankGetUserTaskInfoRsp& default_instance();

  void Swap(TActUnionRankGetUserTaskInfoRsp* other);

  // implements Message ----------------------------------------------

  TActUnionRankGetUserTaskInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActUnionRankGetUserTaskInfoRsp& from);
  void MergeFrom(const TActUnionRankGetUserTaskInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActUnionRankTaskInfo TaskInfo = 1;
  inline int taskinfo_size() const;
  inline void clear_taskinfo();
  static const int kTaskInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActUnionRankGetUserTaskInfoRsp</name>
  	<Function>
  		<name>taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>taskinfo_size</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActUnionRankTaskInfo& taskinfo(int index) const;
  inline ::pb::TActUnionRankTaskInfo* mutable_taskinfo(int index);
  inline ::pb::TActUnionRankTaskInfo* add_taskinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankTaskInfo >&
      taskinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankTaskInfo >*
      mutable_taskinfo();

  // @@protoc_insertion_point(class_scope:pb.TActUnionRankGetUserTaskInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankTaskInfo > taskinfo_;
  friend void  protobuf_AddDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_AssignDesc_net_2fActUnionRank_2eproto();
  friend void protobuf_ShutdownFile_net_2fActUnionRank_2eproto();

  void InitAsDefaultInstance();
  static TActUnionRankGetUserTaskInfoRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TActUnionRankTaskInfo

// optional uint32 Id = 1;
inline bool TActUnionRankTaskInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActUnionRankTaskInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActUnionRankTaskInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActUnionRankTaskInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActUnionRankTaskInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankTaskInfo.Id)
  return id_;
}
inline void TActUnionRankTaskInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActUnionRankTaskInfo.Id)
}

// optional uint64 Num = 2;
inline bool TActUnionRankTaskInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActUnionRankTaskInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActUnionRankTaskInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActUnionRankTaskInfo::clear_num() {
  num_ = GOOGLE_ULONGLONG(0);
  clear_has_num();
}
inline ::google::protobuf::uint64 TActUnionRankTaskInfo::num() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankTaskInfo.Num)
  return num_;
}
inline void TActUnionRankTaskInfo::set_num(::google::protobuf::uint64 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActUnionRankTaskInfo.Num)
}

// -------------------------------------------------------------------

// TActUnionRankInfo

// optional string Name = 1;
inline bool TActUnionRankInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActUnionRankInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActUnionRankInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActUnionRankInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TActUnionRankInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankInfo.Name)
  return *name_;
}
inline void TActUnionRankInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActUnionRankInfo.Name)
}
inline void TActUnionRankInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActUnionRankInfo.Name)
}
inline void TActUnionRankInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActUnionRankInfo.Name)
}
inline ::std::string* TActUnionRankInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActUnionRankInfo.Name)
  return name_;
}
inline ::std::string* TActUnionRankInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActUnionRankInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActUnionRankInfo.Name)
}

// optional string BannerName = 2;
inline bool TActUnionRankInfo::has_bannername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActUnionRankInfo::set_has_bannername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActUnionRankInfo::clear_has_bannername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActUnionRankInfo::clear_bannername() {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_->clear();
  }
  clear_has_bannername();
}
inline const ::std::string& TActUnionRankInfo::bannername() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankInfo.BannerName)
  return *bannername_;
}
inline void TActUnionRankInfo::set_bannername(const ::std::string& value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActUnionRankInfo.BannerName)
}
inline void TActUnionRankInfo::set_bannername(const char* value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActUnionRankInfo.BannerName)
}
inline void TActUnionRankInfo::set_bannername(const char* value, size_t size) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActUnionRankInfo.BannerName)
}
inline ::std::string* TActUnionRankInfo::mutable_bannername() {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActUnionRankInfo.BannerName)
  return bannername_;
}
inline ::std::string* TActUnionRankInfo::release_bannername() {
  clear_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bannername_;
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActUnionRankInfo::set_allocated_bannername(::std::string* bannername) {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (bannername) {
    set_has_bannername();
    bannername_ = bannername;
  } else {
    clear_has_bannername();
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActUnionRankInfo.BannerName)
}

// optional uint32 BannerBase = 3;
inline bool TActUnionRankInfo::has_bannerbase() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActUnionRankInfo::set_has_bannerbase() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActUnionRankInfo::clear_has_bannerbase() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActUnionRankInfo::clear_bannerbase() {
  bannerbase_ = 0u;
  clear_has_bannerbase();
}
inline ::google::protobuf::uint32 TActUnionRankInfo::bannerbase() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankInfo.BannerBase)
  return bannerbase_;
}
inline void TActUnionRankInfo::set_bannerbase(::google::protobuf::uint32 value) {
  set_has_bannerbase();
  bannerbase_ = value;
  // @@protoc_insertion_point(field_set:pb.TActUnionRankInfo.BannerBase)
}

// optional uint32 Domain = 4;
inline bool TActUnionRankInfo::has_domain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TActUnionRankInfo::set_has_domain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TActUnionRankInfo::clear_has_domain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TActUnionRankInfo::clear_domain() {
  domain_ = 0u;
  clear_has_domain();
}
inline ::google::protobuf::uint32 TActUnionRankInfo::domain() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankInfo.Domain)
  return domain_;
}
inline void TActUnionRankInfo::set_domain(::google::protobuf::uint32 value) {
  set_has_domain();
  domain_ = value;
  // @@protoc_insertion_point(field_set:pb.TActUnionRankInfo.Domain)
}

// optional uint64 AllyScore = 5;
inline bool TActUnionRankInfo::has_allyscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TActUnionRankInfo::set_has_allyscore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TActUnionRankInfo::clear_has_allyscore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TActUnionRankInfo::clear_allyscore() {
  allyscore_ = GOOGLE_ULONGLONG(0);
  clear_has_allyscore();
}
inline ::google::protobuf::uint64 TActUnionRankInfo::allyscore() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankInfo.AllyScore)
  return allyscore_;
}
inline void TActUnionRankInfo::set_allyscore(::google::protobuf::uint64 value) {
  set_has_allyscore();
  allyscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TActUnionRankInfo.AllyScore)
}

// optional uint32 Rank = 6;
inline bool TActUnionRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TActUnionRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TActUnionRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TActUnionRankInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TActUnionRankInfo::rank() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankInfo.Rank)
  return rank_;
}
inline void TActUnionRankInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TActUnionRankInfo.Rank)
}

// -------------------------------------------------------------------

// TActUnionRankUserInfo

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TActUnionRankUserInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActUnionRankUserInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActUnionRankUserInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActUnionRankUserInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TActUnionRankUserInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankUserInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TActUnionRankUserInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActUnionRankUserInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TActUnionRankUserInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TActUnionRankUserInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActUnionRankUserInfo.UserInfo)
}

// optional uint64 Score = 2;
inline bool TActUnionRankUserInfo::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActUnionRankUserInfo::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActUnionRankUserInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActUnionRankUserInfo::clear_score() {
  score_ = GOOGLE_ULONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::uint64 TActUnionRankUserInfo::score() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankUserInfo.Score)
  return score_;
}
inline void TActUnionRankUserInfo::set_score(::google::protobuf::uint64 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TActUnionRankUserInfo.Score)
}

// optional uint32 Rank = 3;
inline bool TActUnionRankUserInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActUnionRankUserInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActUnionRankUserInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActUnionRankUserInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TActUnionRankUserInfo::rank() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankUserInfo.Rank)
  return rank_;
}
inline void TActUnionRankUserInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TActUnionRankUserInfo.Rank)
}

// optional .pb.EAlliancePost Post = 5;
inline bool TActUnionRankUserInfo::has_post() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TActUnionRankUserInfo::set_has_post() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TActUnionRankUserInfo::clear_has_post() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TActUnionRankUserInfo::clear_post() {
  post_ = 0;
  clear_has_post();
}
inline ::pb::EAlliancePost TActUnionRankUserInfo::post() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankUserInfo.Post)
  return static_cast< ::pb::EAlliancePost >(post_);
}
inline void TActUnionRankUserInfo::set_post(::pb::EAlliancePost value) {
  assert(::pb::EAlliancePost_IsValid(value));
  set_has_post();
  post_ = value;
  // @@protoc_insertion_point(field_set:pb.TActUnionRankUserInfo.Post)
}

// -------------------------------------------------------------------

// TActUnionRankAllianceSimpleInfoWithUser

// optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
inline bool TActUnionRankAllianceSimpleInfoWithUser::has_alliancesimpleinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActUnionRankAllianceSimpleInfoWithUser::set_has_alliancesimpleinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActUnionRankAllianceSimpleInfoWithUser::clear_has_alliancesimpleinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActUnionRankAllianceSimpleInfoWithUser::clear_alliancesimpleinfo() {
  if (alliancesimpleinfo_ != NULL) alliancesimpleinfo_->::pb::TAllianceSimpleInfo::Clear();
  clear_has_alliancesimpleinfo();
}
inline const ::pb::TAllianceSimpleInfo& TActUnionRankAllianceSimpleInfoWithUser::alliancesimpleinfo() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankAllianceSimpleInfoWithUser.AllianceSimpleInfo)
  return alliancesimpleinfo_ != NULL ? *alliancesimpleinfo_ : *default_instance_->alliancesimpleinfo_;
}
inline ::pb::TAllianceSimpleInfo* TActUnionRankAllianceSimpleInfoWithUser::mutable_alliancesimpleinfo() {
  set_has_alliancesimpleinfo();
  if (alliancesimpleinfo_ == NULL) alliancesimpleinfo_ = new ::pb::TAllianceSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActUnionRankAllianceSimpleInfoWithUser.AllianceSimpleInfo)
  return alliancesimpleinfo_;
}
inline ::pb::TAllianceSimpleInfo* TActUnionRankAllianceSimpleInfoWithUser::release_alliancesimpleinfo() {
  clear_has_alliancesimpleinfo();
  ::pb::TAllianceSimpleInfo* temp = alliancesimpleinfo_;
  alliancesimpleinfo_ = NULL;
  return temp;
}
inline void TActUnionRankAllianceSimpleInfoWithUser::set_allocated_alliancesimpleinfo(::pb::TAllianceSimpleInfo* alliancesimpleinfo) {
  delete alliancesimpleinfo_;
  alliancesimpleinfo_ = alliancesimpleinfo;
  if (alliancesimpleinfo) {
    set_has_alliancesimpleinfo();
  } else {
    clear_has_alliancesimpleinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActUnionRankAllianceSimpleInfoWithUser.AllianceSimpleInfo)
}

// repeated .pb.TActUnionRankUserInfo ArrUserBaseInfo = 2;
inline int TActUnionRankAllianceSimpleInfoWithUser::arruserbaseinfo_size() const {
  return arruserbaseinfo_.size();
}
inline void TActUnionRankAllianceSimpleInfoWithUser::clear_arruserbaseinfo() {
  arruserbaseinfo_.Clear();
}
inline const ::pb::TActUnionRankUserInfo& TActUnionRankAllianceSimpleInfoWithUser::arruserbaseinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankAllianceSimpleInfoWithUser.ArrUserBaseInfo)
  return arruserbaseinfo_.Get(index);
}
inline ::pb::TActUnionRankUserInfo* TActUnionRankAllianceSimpleInfoWithUser::mutable_arruserbaseinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActUnionRankAllianceSimpleInfoWithUser.ArrUserBaseInfo)
  return arruserbaseinfo_.Mutable(index);
}
inline ::pb::TActUnionRankUserInfo* TActUnionRankAllianceSimpleInfoWithUser::add_arruserbaseinfo() {
  // @@protoc_insertion_point(field_add:pb.TActUnionRankAllianceSimpleInfoWithUser.ArrUserBaseInfo)
  return arruserbaseinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankUserInfo >&
TActUnionRankAllianceSimpleInfoWithUser::arruserbaseinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActUnionRankAllianceSimpleInfoWithUser.ArrUserBaseInfo)
  return arruserbaseinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankUserInfo >*
TActUnionRankAllianceSimpleInfoWithUser::mutable_arruserbaseinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActUnionRankAllianceSimpleInfoWithUser.ArrUserBaseInfo)
  return &arruserbaseinfo_;
}

// -------------------------------------------------------------------

// TActUnionRankGetAllRankInfoReq

// optional uint32 Offset = 1;
inline bool TActUnionRankGetAllRankInfoReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActUnionRankGetAllRankInfoReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActUnionRankGetAllRankInfoReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActUnionRankGetAllRankInfoReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TActUnionRankGetAllRankInfoReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankGetAllRankInfoReq.Offset)
  return offset_;
}
inline void TActUnionRankGetAllRankInfoReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TActUnionRankGetAllRankInfoReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TActUnionRankGetAllRankInfoReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActUnionRankGetAllRankInfoReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActUnionRankGetAllRankInfoReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActUnionRankGetAllRankInfoReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TActUnionRankGetAllRankInfoReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankGetAllRankInfoReq.Limit)
  return limit_;
}
inline void TActUnionRankGetAllRankInfoReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TActUnionRankGetAllRankInfoReq.Limit)
}

// -------------------------------------------------------------------

// TActUnionRankGetAllRankInfoRsp

// optional .pb.TActUnionRankInfo MyAllyRankInfo = 1;
inline bool TActUnionRankGetAllRankInfoRsp::has_myallyrankinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActUnionRankGetAllRankInfoRsp::set_has_myallyrankinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActUnionRankGetAllRankInfoRsp::clear_has_myallyrankinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActUnionRankGetAllRankInfoRsp::clear_myallyrankinfo() {
  if (myallyrankinfo_ != NULL) myallyrankinfo_->::pb::TActUnionRankInfo::Clear();
  clear_has_myallyrankinfo();
}
inline const ::pb::TActUnionRankInfo& TActUnionRankGetAllRankInfoRsp::myallyrankinfo() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankGetAllRankInfoRsp.MyAllyRankInfo)
  return myallyrankinfo_ != NULL ? *myallyrankinfo_ : *default_instance_->myallyrankinfo_;
}
inline ::pb::TActUnionRankInfo* TActUnionRankGetAllRankInfoRsp::mutable_myallyrankinfo() {
  set_has_myallyrankinfo();
  if (myallyrankinfo_ == NULL) myallyrankinfo_ = new ::pb::TActUnionRankInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActUnionRankGetAllRankInfoRsp.MyAllyRankInfo)
  return myallyrankinfo_;
}
inline ::pb::TActUnionRankInfo* TActUnionRankGetAllRankInfoRsp::release_myallyrankinfo() {
  clear_has_myallyrankinfo();
  ::pb::TActUnionRankInfo* temp = myallyrankinfo_;
  myallyrankinfo_ = NULL;
  return temp;
}
inline void TActUnionRankGetAllRankInfoRsp::set_allocated_myallyrankinfo(::pb::TActUnionRankInfo* myallyrankinfo) {
  delete myallyrankinfo_;
  myallyrankinfo_ = myallyrankinfo;
  if (myallyrankinfo) {
    set_has_myallyrankinfo();
  } else {
    clear_has_myallyrankinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActUnionRankGetAllRankInfoRsp.MyAllyRankInfo)
}

// repeated .pb.TActUnionRankInfo AllRankInfo = 2;
inline int TActUnionRankGetAllRankInfoRsp::allrankinfo_size() const {
  return allrankinfo_.size();
}
inline void TActUnionRankGetAllRankInfoRsp::clear_allrankinfo() {
  allrankinfo_.Clear();
}
inline const ::pb::TActUnionRankInfo& TActUnionRankGetAllRankInfoRsp::allrankinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankGetAllRankInfoRsp.AllRankInfo)
  return allrankinfo_.Get(index);
}
inline ::pb::TActUnionRankInfo* TActUnionRankGetAllRankInfoRsp::mutable_allrankinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActUnionRankGetAllRankInfoRsp.AllRankInfo)
  return allrankinfo_.Mutable(index);
}
inline ::pb::TActUnionRankInfo* TActUnionRankGetAllRankInfoRsp::add_allrankinfo() {
  // @@protoc_insertion_point(field_add:pb.TActUnionRankGetAllRankInfoRsp.AllRankInfo)
  return allrankinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankInfo >&
TActUnionRankGetAllRankInfoRsp::allrankinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActUnionRankGetAllRankInfoRsp.AllRankInfo)
  return allrankinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankInfo >*
TActUnionRankGetAllRankInfoRsp::mutable_allrankinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActUnionRankGetAllRankInfoRsp.AllRankInfo)
  return &allrankinfo_;
}

// -------------------------------------------------------------------

// TActUnionRankGetAllianceMembersInfoRep

// optional uint32 Offset = 1;
inline bool TActUnionRankGetAllianceMembersInfoRep::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActUnionRankGetAllianceMembersInfoRep::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActUnionRankGetAllianceMembersInfoRep::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActUnionRankGetAllianceMembersInfoRep::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TActUnionRankGetAllianceMembersInfoRep::offset() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankGetAllianceMembersInfoRep.Offset)
  return offset_;
}
inline void TActUnionRankGetAllianceMembersInfoRep::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TActUnionRankGetAllianceMembersInfoRep.Offset)
}

// optional uint32 Limit = 2;
inline bool TActUnionRankGetAllianceMembersInfoRep::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActUnionRankGetAllianceMembersInfoRep::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActUnionRankGetAllianceMembersInfoRep::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActUnionRankGetAllianceMembersInfoRep::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TActUnionRankGetAllianceMembersInfoRep::limit() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankGetAllianceMembersInfoRep.Limit)
  return limit_;
}
inline void TActUnionRankGetAllianceMembersInfoRep::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TActUnionRankGetAllianceMembersInfoRep.Limit)
}

// -------------------------------------------------------------------

// TActUnionRankGetAllianceMembersInfoRsp

// optional uint32 MyRank = 1;
inline bool TActUnionRankGetAllianceMembersInfoRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActUnionRankGetAllianceMembersInfoRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActUnionRankGetAllianceMembersInfoRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActUnionRankGetAllianceMembersInfoRsp::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 TActUnionRankGetAllianceMembersInfoRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankGetAllianceMembersInfoRsp.MyRank)
  return myrank_;
}
inline void TActUnionRankGetAllianceMembersInfoRsp::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TActUnionRankGetAllianceMembersInfoRsp.MyRank)
}

// optional .pb.EActUnionRankRewardType RewardType = 2;
inline bool TActUnionRankGetAllianceMembersInfoRsp::has_rewardtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActUnionRankGetAllianceMembersInfoRsp::set_has_rewardtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActUnionRankGetAllianceMembersInfoRsp::clear_has_rewardtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActUnionRankGetAllianceMembersInfoRsp::clear_rewardtype() {
  rewardtype_ = 1;
  clear_has_rewardtype();
}
inline ::pb::EActUnionRankRewardType TActUnionRankGetAllianceMembersInfoRsp::rewardtype() const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankGetAllianceMembersInfoRsp.RewardType)
  return static_cast< ::pb::EActUnionRankRewardType >(rewardtype_);
}
inline void TActUnionRankGetAllianceMembersInfoRsp::set_rewardtype(::pb::EActUnionRankRewardType value) {
  assert(::pb::EActUnionRankRewardType_IsValid(value));
  set_has_rewardtype();
  rewardtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TActUnionRankGetAllianceMembersInfoRsp.RewardType)
}

// repeated .pb.TActUnionRankUserInfo AllMembersRank = 3;
inline int TActUnionRankGetAllianceMembersInfoRsp::allmembersrank_size() const {
  return allmembersrank_.size();
}
inline void TActUnionRankGetAllianceMembersInfoRsp::clear_allmembersrank() {
  allmembersrank_.Clear();
}
inline const ::pb::TActUnionRankUserInfo& TActUnionRankGetAllianceMembersInfoRsp::allmembersrank(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankGetAllianceMembersInfoRsp.AllMembersRank)
  return allmembersrank_.Get(index);
}
inline ::pb::TActUnionRankUserInfo* TActUnionRankGetAllianceMembersInfoRsp::mutable_allmembersrank(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActUnionRankGetAllianceMembersInfoRsp.AllMembersRank)
  return allmembersrank_.Mutable(index);
}
inline ::pb::TActUnionRankUserInfo* TActUnionRankGetAllianceMembersInfoRsp::add_allmembersrank() {
  // @@protoc_insertion_point(field_add:pb.TActUnionRankGetAllianceMembersInfoRsp.AllMembersRank)
  return allmembersrank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankUserInfo >&
TActUnionRankGetAllianceMembersInfoRsp::allmembersrank() const {
  // @@protoc_insertion_point(field_list:pb.TActUnionRankGetAllianceMembersInfoRsp.AllMembersRank)
  return allmembersrank_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankUserInfo >*
TActUnionRankGetAllianceMembersInfoRsp::mutable_allmembersrank() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActUnionRankGetAllianceMembersInfoRsp.AllMembersRank)
  return &allmembersrank_;
}

// -------------------------------------------------------------------

// TActUnionRankReceiveRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TActUnionRankReceiveRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TActUnionRankReceiveRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TActUnionRankReceiveRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankReceiveRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TActUnionRankReceiveRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActUnionRankReceiveRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TActUnionRankReceiveRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TActUnionRankReceiveRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActUnionRankReceiveRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TActUnionRankReceiveRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActUnionRankReceiveRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActUnionRankReceiveRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TActUnionRankGetUserTaskInfoRsp

// repeated .pb.TActUnionRankTaskInfo TaskInfo = 1;
inline int TActUnionRankGetUserTaskInfoRsp::taskinfo_size() const {
  return taskinfo_.size();
}
inline void TActUnionRankGetUserTaskInfoRsp::clear_taskinfo() {
  taskinfo_.Clear();
}
inline const ::pb::TActUnionRankTaskInfo& TActUnionRankGetUserTaskInfoRsp::taskinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActUnionRankGetUserTaskInfoRsp.TaskInfo)
  return taskinfo_.Get(index);
}
inline ::pb::TActUnionRankTaskInfo* TActUnionRankGetUserTaskInfoRsp::mutable_taskinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActUnionRankGetUserTaskInfoRsp.TaskInfo)
  return taskinfo_.Mutable(index);
}
inline ::pb::TActUnionRankTaskInfo* TActUnionRankGetUserTaskInfoRsp::add_taskinfo() {
  // @@protoc_insertion_point(field_add:pb.TActUnionRankGetUserTaskInfoRsp.TaskInfo)
  return taskinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankTaskInfo >&
TActUnionRankGetUserTaskInfoRsp::taskinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActUnionRankGetUserTaskInfoRsp.TaskInfo)
  return taskinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActUnionRankTaskInfo >*
TActUnionRankGetUserTaskInfoRsp::mutable_taskinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActUnionRankGetUserTaskInfoRsp.TaskInfo)
  return &taskinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EActUnionRankRewardType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EActUnionRankRewardType>() {
  return ::pb::EActUnionRankRewardType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActUnionRank_2eproto__INCLUDED
