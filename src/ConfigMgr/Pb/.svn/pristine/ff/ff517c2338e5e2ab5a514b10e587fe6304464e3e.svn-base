// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SkillBaseData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/SkillBaseData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* SkillBaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillBaseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillSpecialData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillSpecialData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillTargetPriority_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillTargetPriority_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillMoveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillMoveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* HitEffectData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HitEffectData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillCurveAcceleration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillCurveAcceleration_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillCurveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillCurveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillCastType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillCastType_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fSkillBaseData_2eproto() {
  protobuf_AddDesc_module_2fSkillBaseData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/SkillBaseData.proto");
  GOOGLE_CHECK(file != NULL);
  SkillBaseData_descriptor_ = file->message_type(0);
  static const int SkillBaseData_offsets_[75] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, chainskillmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, maintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, normalattackcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, reftargettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, spebuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, reftargetnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, isrealtarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, skillanim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, isplayhitanim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, castrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, needfacetowhencast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, isrecoverfrompause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, isfacetargetduringcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, maxcastcountinonescene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, maxcastcountinonebattle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, islasting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, coolingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, intervaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, normalattackchance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, triggerbuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, triggerbufflayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, iconpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, frontdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, scenepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, skilltunnel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, skilllasteffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, skillshowtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, triggerskillarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, reftargetincludeself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, triggerskillchance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, partofrageskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, skillactionlasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, musoutimeline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, skillpriority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, rageskillspine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, rageskilleffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, rageskillaudio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, deathanim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, skillspecialdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, showrageskilldamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, skillreplace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, ragebonusafterkill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, skillcasttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, musoucameralookatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, refpriority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, spebuffidback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, autorageskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, subragesmoothly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, subrageduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, lasteffforwardself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, localizeskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, sceneposindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, damagespecialtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, issemiautorageskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, semiautoskilltimetolive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, semiautoskillinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, semiautoskillchain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, isblockpriority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, ignoreinterrupteffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, skillenergylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, perfectinterruptduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, skillendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, lockon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, isneedhighligh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, keepdyingduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, interruptbossskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, skipidleonend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, rageskillinterruptable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, armyskillinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, ignorenoskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, reftargetsummontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, levelcoolingtimegrowth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, targetprofessions_),
  };
  SkillBaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillBaseData_descriptor_,
      SkillBaseData::default_instance_,
      SkillBaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillBaseData));
  SkillSpecialData_descriptor_ = file->message_type(1);
  static const int SkillSpecialData_offsets_[40] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, rageskillcameraup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, rageskillcameraupspeedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, rageskillcameradown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, rageskillcameradownspeedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, rageskillcamerarecoverspeedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, rageskillspine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, rageskilleffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, rageskillaudio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, rageskillspineadjust_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, showskilllabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, skilllabelslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, skilllabelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, skilllabelaudio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, nonrageskillcameraupparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, nonrageskillcamerarecoverparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, enemyrageheadershow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, enemyrageskillspineadjust_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, hideunparallelicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, superangericonpath1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, superangericonpath2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, superangericonpath3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, superangerskillnamepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, superangeraudio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, superangerheroarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, groundmeshduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, needshowgroundmesh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, slowstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, slowduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, slowbuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, groundmeshassetpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, slowendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, groundaudioevents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, effectondisappear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, activetextshift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, textshiftskillarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, activehidewhenborn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, awakendatapath1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, bjrageskillspine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, bjrageskillspineadjust_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, bjenemyrageskillspineadjust_),
  };
  SkillSpecialData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillSpecialData_descriptor_,
      SkillSpecialData::default_instance_,
      SkillSpecialData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpecialData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillSpecialData));
  SkillTargetPriority_descriptor_ = file->message_type(2);
  static const int SkillTargetPriority_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTargetPriority, front_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTargetPriority, middle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTargetPriority, back_),
  };
  SkillTargetPriority_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillTargetPriority_descriptor_,
      SkillTargetPriority::default_instance_,
      SkillTargetPriority_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTargetPriority, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTargetPriority, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillTargetPriority));
  SkillMoveData_descriptor_ = file->message_type(3);
  static const int SkillMoveData_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, damagetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, movetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, movetypeparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, moveheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, moveupspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, movedownspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, staytimeonpeak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, canbereftarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, canbeeffecttarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, movedownheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, falltoground_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, moveupacceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, movedownacceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, playfloatawayanim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, allowreplaceanim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, playfloatctrlainm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, animonfloatupandkeep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, animonfloatdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, breakbyobstacle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, moveacceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, tdneedblockbyline_),
  };
  SkillMoveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillMoveData_descriptor_,
      SkillMoveData::default_instance_,
      SkillMoveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMoveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillMoveData));
  HitEffectData_descriptor_ = file->message_type(4);
  static const int HitEffectData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitEffectData, effectparent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitEffectData, hiteffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitEffectData, hitsound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitEffectData, hiteffectfollow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitEffectData, hiteffectflip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitEffectData, hiteffectrotaterandom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitEffectData, hiteffectrotaterangex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitEffectData, hiteffectrotaterangey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitEffectData, hiteffectscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitEffectData, hiteffectscalerange_),
  };
  HitEffectData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HitEffectData_descriptor_,
      HitEffectData::default_instance_,
      HitEffectData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitEffectData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitEffectData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HitEffectData));
  SkillCurveAcceleration_descriptor_ = file->message_type(5);
  static const int SkillCurveAcceleration_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveAcceleration, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveAcceleration, rate_),
  };
  SkillCurveAcceleration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillCurveAcceleration_descriptor_,
      SkillCurveAcceleration::default_instance_,
      SkillCurveAcceleration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveAcceleration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveAcceleration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillCurveAcceleration));
  SkillCurveData_descriptor_ = file->message_type(6);
  static const int SkillCurveData_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, iscurve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, curvetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, curveradiu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, curveparent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, curveeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, nonecurveeffet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, istrackcurve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, isthroughcurve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, maxthroughnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, isdisappearoncollision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, collisiondetectiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, curvespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, curveacceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, iscurveback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, effectonback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, curvebackspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, curvebackacceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, angleoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, controlleroffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, curvelasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, throughcollisiondetectiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, headcurveeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, isfixedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, curveflytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, noverticalmove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, isline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, shapeparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, disappearonreachreftarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, receivercurveparent_),
  };
  SkillCurveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillCurveData_descriptor_,
      SkillCurveData::default_instance_,
      SkillCurveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCurveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillCurveData));
  SkillCastType_descriptor_ = file->message_type(7);
  static const int SkillCastType_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastType, casttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastType, eventmajor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastType, eventrelation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastType, eventsub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastType, triggerbuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastType, triggerbufflayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastType, triggerskillarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastType, triggerchance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastType, eventsubskillarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastType, needinterrupt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastType, recordbuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastType, recordthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastType, eventbuffsubarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastType, triggerchancecoef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastType, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastType, param2_),
  };
  SkillCastType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillCastType_descriptor_,
      SkillCastType::default_instance_,
      SkillCastType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCastType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillCastType));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fSkillBaseData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillBaseData_descriptor_, &SkillBaseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillSpecialData_descriptor_, &SkillSpecialData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillTargetPriority_descriptor_, &SkillTargetPriority::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillMoveData_descriptor_, &SkillMoveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HitEffectData_descriptor_, &HitEffectData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillCurveAcceleration_descriptor_, &SkillCurveAcceleration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillCurveData_descriptor_, &SkillCurveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillCastType_descriptor_, &SkillCastType::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fSkillBaseData_2eproto() {
  delete SkillBaseData::default_instance_;
  delete SkillBaseData_reflection_;
  delete SkillSpecialData::default_instance_;
  delete SkillSpecialData_reflection_;
  delete SkillTargetPriority::default_instance_;
  delete SkillTargetPriority_reflection_;
  delete SkillMoveData::default_instance_;
  delete SkillMoveData_reflection_;
  delete HitEffectData::default_instance_;
  delete HitEffectData_reflection_;
  delete SkillCurveAcceleration::default_instance_;
  delete SkillCurveAcceleration_reflection_;
  delete SkillCurveData::default_instance_;
  delete SkillCurveData_reflection_;
  delete SkillCastType::default_instance_;
  delete SkillCastType_reflection_;
}

void protobuf_AddDesc_module_2fSkillBaseData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032module/SkillBaseData.proto\022\002pb\"\231\017\n\rSki"
    "llBaseData\022\014\n\004Name\030\001 \001(\t\022\026\n\016ChainSkillMa"
    "rk\030\002 \001(\005\022\020\n\010MainType\030\003 \001(\005\022\017\n\007SubType\030\004 "
    "\001(\005\022\031\n\021NormalAttackCount\030\005 \001(\005\022\025\n\rRefTar"
    "getType\030\006 \001(\005\022\021\n\tSpeBuffID\030\007 \001(\005\022\024\n\014RefT"
    "argetNum\030\010 \001(\005\022\024\n\014IsRealTarget\030\t \001(\010\022\021\n\t"
    "SkillAnim\030\n \001(\t\022\025\n\rIsPlayHitAnim\030\013 \001(\010\022\021"
    "\n\tCastRange\030\014 \001(\005\022\032\n\022needFaceToWhenCast\030"
    "\r \001(\005\022\032\n\022IsRecoverFromPause\030\023 \001(\010\022\036\n\026IsF"
    "aceTargetDuringCast\030\026 \001(\010\022\036\n\026MaxCastCoun"
    "tInOneScene\030\027 \001(\005\022\037\n\027MaxCastCountInOneBa"
    "ttle\030\030 \001(\005\022\021\n\tIsLasting\030\032 \001(\010\022\023\n\013Cooling"
    "Time\030\033 \001(\005\022\024\n\014IntervalTime\030\034 \001(\005\022\032\n\022Norm"
    "alAttackChance\030\035 \001(\005\022\025\n\rTriggerBuffID\030\036 "
    "\001(\005\022\030\n\020TriggerBuffLayer\030\037 \001(\005\022\020\n\010IconPat"
    "h\030  \001(\t\022\025\n\rFrontDistance\030$ \001(\005\022\020\n\010SceneP"
    "os\030% \003(\002\022\023\n\013SkillTunnel\030& \001(\005\022\027\n\017SkillLa"
    "stEffect\030\' \001(\t\022\025\n\rSkillShowTime\030( \001(\005\022\027\n"
    "\017TriggerSkillArr\030) \003(\005\022\034\n\024RefTargetInclu"
    "deSelf\030* \001(\010\022\032\n\022TriggerSkillChance\030+ \001(\005"
    "\022\027\n\017PartofRageSkill\030- \001(\010\022\033\n\023SkillAction"
    "LastTime\030. \001(\005\022\025\n\rMusouTimeLine\030/ \001(\t\022\025\n"
    "\rSkillPriority\0300 \001(\005\022\026\n\016RageSkillSpine\0301"
    " \001(\t\022\027\n\017RageSkillEffect\0302 \001(\t\022\026\n\016RageSki"
    "llAudio\0303 \001(\t\022\021\n\tDeathAnim\0304 \001(\t\022.\n\020Skil"
    "lSpecialData\0305 \001(\0132\024.pb.SkillSpecialData"
    "\022\033\n\023ShowRageSkillDamage\0306 \001(\010\022\024\n\014SkillRe"
    "place\0307 \003(\005\022\032\n\022RageBonusAfterKill\0308 \001(\005\022"
    "(\n\rSkillCastType\0309 \001(\0132\021.pb.SkillCastTyp"
    "e\022\035\n\025MusouCameraLookatInfo\030: \003(\t\022,\n\013RefP"
    "riority\030; \001(\0132\027.pb.SkillTargetPriority\022\025"
    "\n\rSpeBuffIDBack\030< \001(\005\022\025\n\rAutoRageSkill\030="
    " \001(\010\022\027\n\017SubRageSmoothly\030> \001(\010\022\027\n\017SubRage"
    "Duration\030\? \001(\005\022\032\n\022LastEffForwardSelf\030@ \001"
    "(\010\022\027\n\017LocalizeSkillId\030A \001(\005\022\025\n\rScenePosI"
    "ndex\030B \003(\005\022\031\n\021DamageSpecialType\030C \001(\005\022\033\n"
    "\023IsSemiAutoRageSkill\030D \001(\010\022\037\n\027SemiAutoSk"
    "illTimeToLive\030E \001(\005\022\035\n\025SemiAutoSkillInte"
    "rval\030F \001(\005\022\032\n\022SemiAutoSkillChain\030G \003(\005\022\027"
    "\n\017IsBlockPriority\030H \001(\010\022\035\n\025IgnoreInterru"
    "ptEffect\030I \001(\010\022\030\n\020SkillEnergyLevel\030J \003(\005"
    "\022 \n\030PerfectInterruptDuration\030K \001(\005\022\024\n\014Sk"
    "illEndTime\030L \001(\005\022\016\n\006Lockon\030M \001(\010\022\026\n\016IsNe"
    "edHighligh\030N \001(\010\022\031\n\021KeepDyingDuration\030O "
    "\001(\005\022\032\n\022InterruptBossSkill\030P \001(\010\022\025\n\rSkipI"
    "dleOnEnd\030Q \001(\010\022\036\n\026RageSkillInterruptable"
    "\030R \001(\010\022\025\n\rArmySkillInfo\030S \003(\005\022\025\n\rIgnoreN"
    "oSkill\030T \001(\010\022\033\n\023RefTargetSummonType\030U \001("
    "\005\022\036\n\026LevelCoolingTimeGrowth\030V \001(\005\022\031\n\021Tar"
    "getProfessions\030W \003(\005\"\377\010\n\020SkillSpecialDat"
    "a\022\031\n\021RageSkillCameraUp\030\001 \003(\005\022\"\n\032RageSkil"
    "lCameraUpSpeedTime\030\002 \003(\005\022\033\n\023RageSkillCam"
    "eraDown\030\003 \003(\005\022$\n\034RageSkillCameraDownSpee"
    "dTime\030\004 \003(\005\022\'\n\037RageSkillCameraRecoverSpe"
    "edTime\030\005 \003(\005\022\026\n\016RageSkillSpine\030\006 \001(\t\022\027\n\017"
    "RageSkillEffect\030\007 \001(\t\022\026\n\016RageSkillAudio\030"
    "\010 \001(\t\022\034\n\024RageSkillSpineAdjust\030\t \003(\002\022\026\n\016S"
    "howSkillLabel\030\n \001(\010\022\026\n\016SkillLabelSlot\030\013 "
    "\001(\t\022\024\n\014SkillLabelId\030\014 \001(\005\022\027\n\017SkillLabelA"
    "udio\030\r \001(\t\022!\n\031NonRageSkillCameraUpParam\030"
    "\016 \003(\005\022&\n\036NonRageSkillCameraRecoverParam\030"
    "\017 \003(\005\022\033\n\023EnemyRageHeaderShow\030\020 \001(\010\022!\n\031En"
    "emyRageSkillSpineAdjust\030\021 \003(\002\022\032\n\022HideUnp"
    "arallelIcon\030\022 \001(\010\022\033\n\023SuperAngerIconPath1"
    "\030\023 \001(\t\022\033\n\023SuperAngerIconPath2\030\024 \001(\t\022\033\n\023S"
    "uperAngerIconPath3\030\025 \001(\t\022\037\n\027SuperAngerSk"
    "illNamePath\030\026 \001(\t\022\027\n\017SuperAngerAudio\030\027 \001"
    "(\t\022\031\n\021SuperAngerHeroArr\030\030 \001(\005\022\032\n\022GroundM"
    "eshDuration\030\031 \001(\005\022\032\n\022NeedShowGroundMesh\030"
    "\032 \001(\010\022\025\n\rSlowStartTime\030\034 \001(\005\022\024\n\014SlowDura"
    "tion\030\035 \001(\005\022\022\n\nSlowBuffId\030\036 \001(\005\022\033\n\023Ground"
    "MeshAssetPath\030\037 \001(\t\022\023\n\013SlowEndTime\030  \001(\005"
    "\022\031\n\021GroundAudioEvents\030! \003(\t\022\031\n\021EffectOnD"
    "isappear\030\" \001(\t\022\027\n\017ActiveTextShift\030# \001(\010\022"
    "\031\n\021TextShiftSkillArr\030$ \003(\005\022\032\n\022ActiveHide"
    "WhenBorn\030% \001(\010\022\027\n\017AwakenDataPath1\030& \001(\t\022"
    "\030\n\020BJRageSkillSpine\030\' \001(\t\022\036\n\026BJRageSkill"
    "SpineAdjust\030( \003(\002\022#\n\033BJEnemyRageSkillSpi"
    "neAdjust\030) \003(\002\"B\n\023SkillTargetPriority\022\r\n"
    "\005Front\030\001 \001(\005\022\016\n\006Middle\030\002 \001(\005\022\014\n\004Back\030\003 \001"
    "(\005\"\337\004\n\rSkillMoveData\022\022\n\nDamageTime\030\001 \001(\005"
    "\022\020\n\010MoveType\030\002 \001(\005\022\025\n\rMoveTypeParam\030\003 \001("
    "\005\022\021\n\tMoveSpeed\030\004 \001(\005\022\022\n\nMoveHeight\030\005 \001(\005"
    "\022\023\n\013MoveUpSpeed\030\006 \001(\005\022\025\n\rMoveDownSpeed\030\007"
    " \001(\005\022\026\n\016StayTimeOnPeak\030\n \001(\005\022\026\n\016CanBeRef"
    "Target\030\013 \001(\010\022\031\n\021CanBeEffectTarget\030\014 \001(\010\022"
    "\026\n\016MoveDownHeight\030\r \001(\005\022\024\n\014FallToGround\030"
    "\016 \001(\010\0226\n\022MoveUpAcceleration\030\017 \001(\0132\032.pb.S"
    "killCurveAcceleration\0228\n\024MoveDownAcceler"
    "ation\030\020 \001(\0132\032.pb.SkillCurveAcceleration\022"
    "\031\n\021PlayFloatAwayAnim\030\021 \001(\010\022\030\n\020AllowRepla"
    "ceAnim\030\022 \001(\010\022\031\n\021PlayFloatCtrlAinm\030\023 \001(\010\022"
    "\034\n\024AnimOnFloatUpAndKeep\030\025 \001(\t\022\027\n\017AnimOnF"
    "loatDown\030\026 \001(\t\022\027\n\017BreakByObstacle\030\027 \001(\010\022"
    "\030\n\020MoveAcceleration\030\030 \001(\005\022\031\n\021TDNeedBlock"
    "ByLine\030\031 \001(\010\"\214\002\n\rHitEffectData\022\024\n\014Effect"
    "Parent\030\001 \001(\005\022\021\n\tHitEffect\030\002 \001(\t\022\020\n\010HitSo"
    "und\030\003 \001(\t\022\027\n\017HitEffectFollow\030\004 \001(\010\022\025\n\rHi"
    "tEffectFlip\030\005 \001(\010\022\035\n\025HitEffectRotateRand"
    "om\030\006 \001(\010\022\035\n\025HitEffectRotateRangeX\030\007 \003(\005\022"
    "\035\n\025HitEffectRotateRangeY\030\010 \003(\005\022\026\n\016HitEff"
    "ectScale\030\t \001(\010\022\033\n\023HitEffectScaleRange\030\n "
    "\003(\005\"5\n\026SkillCurveAcceleration\022\r\n\005Speed\030\001"
    " \001(\005\022\014\n\004Rate\030\002 \001(\005\"\206\006\n\016SkillCurveData\022\017\n"
    "\007IsCurve\030\001 \001(\005\022\021\n\tCurveType\030\002 \001(\005\022\022\n\nCur"
    "veRadiu\030\003 \001(\005\022\023\n\013CurveParent\030\004 \001(\t\022\023\n\013Cu"
    "rveEffect\030\005 \001(\t\022\026\n\016NoneCurveEffet\030\006 \001(\t\022"
    "\024\n\014IsTrackCurve\030\007 \001(\010\022\026\n\016IsThroughCurve\030"
    "\010 \001(\010\022\025\n\rMaxThroughNum\030\t \001(\005\022\036\n\026IsDisapp"
    "earOnCollision\030\n \001(\010\022\036\n\026CollisionDetecti"
    "onType\030\013 \001(\005\022\022\n\nCurveSpeed\030\014 \001(\005\0225\n\021Curv"
    "eAcceleration\030\r \003(\0132\032.pb.SkillCurveAccel"
    "eration\022\023\n\013IsCurveBack\030\016 \001(\010\022\024\n\014EffectOn"
    "Back\030\017 \001(\010\022\026\n\016CurveBackSpeed\030\020 \001(\005\0229\n\025Cu"
    "rveBackAcceleration\030\021 \003(\0132\032.pb.SkillCurv"
    "eAcceleration\022\023\n\013AngleOffset\030\022 \001(\005\022\030\n\020Co"
    "ntrollerOffset\030\023 \003(\005\022\025\n\rCurveLastTime\030\024 "
    "\001(\005\022%\n\035ThroughCollisionDetectionType\030\025 \001"
    "(\005\022\027\n\017HeadCurveEffect\030\026 \001(\t\022\023\n\013IsFixedTi"
    "me\030\027 \001(\010\022\024\n\014CurveFlyTime\030\030 \001(\005\022\026\n\016NoVert"
    "icalMove\030\031 \001(\010\022\016\n\006IsLine\030\032 \001(\010\022\023\n\013ShapeP"
    "aram1\030\033 \001(\005\022!\n\031DisappearOnReachRefTarget"
    "\030\034 \001(\010\022\033\n\023ReceiverCurveParent\030\035 \001(\t\"\363\002\n\r"
    "SkillCastType\022\020\n\010CastType\030\001 \001(\005\022\022\n\nEvent"
    "Major\030\002 \001(\005\022\025\n\rEventRelation\030\003 \001(\005\022\020\n\010Ev"
    "entSub\030\004 \001(\005\022\025\n\rTriggerBuffID\030\005 \001(\005\022\030\n\020T"
    "riggerBuffLayer\030\006 \001(\005\022\027\n\017TriggerSkillArr"
    "\030\007 \003(\005\022\025\n\rTriggerChance\030\010 \001(\005\022\030\n\020EventSu"
    "bSkillArr\030\t \003(\005\022\025\n\rNeedInterrupt\030\n \001(\010\022\024"
    "\n\014RecordBuffId\030\013 \001(\005\022\027\n\017RecordThreshold\030"
    "\014 \001(\005\022\027\n\017EventBuffSubArr\030\r \003(\005\022\031\n\021Trigge"
    "rChanceCoef\030\016 \001(\005\022\016\n\006Param1\030\017 \001(\005\022\016\n\006Par"
    "am2\030\020 \001(\005", 5289);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/SkillBaseData.proto", &protobuf_RegisterTypes);
  SkillBaseData::default_instance_ = new SkillBaseData();
  SkillSpecialData::default_instance_ = new SkillSpecialData();
  SkillTargetPriority::default_instance_ = new SkillTargetPriority();
  SkillMoveData::default_instance_ = new SkillMoveData();
  HitEffectData::default_instance_ = new HitEffectData();
  SkillCurveAcceleration::default_instance_ = new SkillCurveAcceleration();
  SkillCurveData::default_instance_ = new SkillCurveData();
  SkillCastType::default_instance_ = new SkillCastType();
  SkillBaseData::default_instance_->InitAsDefaultInstance();
  SkillSpecialData::default_instance_->InitAsDefaultInstance();
  SkillTargetPriority::default_instance_->InitAsDefaultInstance();
  SkillMoveData::default_instance_->InitAsDefaultInstance();
  HitEffectData::default_instance_->InitAsDefaultInstance();
  SkillCurveAcceleration::default_instance_->InitAsDefaultInstance();
  SkillCurveData::default_instance_->InitAsDefaultInstance();
  SkillCastType::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fSkillBaseData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fSkillBaseData_2eproto {
  StaticDescriptorInitializer_module_2fSkillBaseData_2eproto() {
    protobuf_AddDesc_module_2fSkillBaseData_2eproto();
  }
} static_descriptor_initializer_module_2fSkillBaseData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SkillBaseData::kNameFieldNumber;
const int SkillBaseData::kChainSkillMarkFieldNumber;
const int SkillBaseData::kMainTypeFieldNumber;
const int SkillBaseData::kSubTypeFieldNumber;
const int SkillBaseData::kNormalAttackCountFieldNumber;
const int SkillBaseData::kRefTargetTypeFieldNumber;
const int SkillBaseData::kSpeBuffIDFieldNumber;
const int SkillBaseData::kRefTargetNumFieldNumber;
const int SkillBaseData::kIsRealTargetFieldNumber;
const int SkillBaseData::kSkillAnimFieldNumber;
const int SkillBaseData::kIsPlayHitAnimFieldNumber;
const int SkillBaseData::kCastRangeFieldNumber;
const int SkillBaseData::kNeedFaceToWhenCastFieldNumber;
const int SkillBaseData::kIsRecoverFromPauseFieldNumber;
const int SkillBaseData::kIsFaceTargetDuringCastFieldNumber;
const int SkillBaseData::kMaxCastCountInOneSceneFieldNumber;
const int SkillBaseData::kMaxCastCountInOneBattleFieldNumber;
const int SkillBaseData::kIsLastingFieldNumber;
const int SkillBaseData::kCoolingTimeFieldNumber;
const int SkillBaseData::kIntervalTimeFieldNumber;
const int SkillBaseData::kNormalAttackChanceFieldNumber;
const int SkillBaseData::kTriggerBuffIDFieldNumber;
const int SkillBaseData::kTriggerBuffLayerFieldNumber;
const int SkillBaseData::kIconPathFieldNumber;
const int SkillBaseData::kFrontDistanceFieldNumber;
const int SkillBaseData::kScenePosFieldNumber;
const int SkillBaseData::kSkillTunnelFieldNumber;
const int SkillBaseData::kSkillLastEffectFieldNumber;
const int SkillBaseData::kSkillShowTimeFieldNumber;
const int SkillBaseData::kTriggerSkillArrFieldNumber;
const int SkillBaseData::kRefTargetIncludeSelfFieldNumber;
const int SkillBaseData::kTriggerSkillChanceFieldNumber;
const int SkillBaseData::kPartofRageSkillFieldNumber;
const int SkillBaseData::kSkillActionLastTimeFieldNumber;
const int SkillBaseData::kMusouTimeLineFieldNumber;
const int SkillBaseData::kSkillPriorityFieldNumber;
const int SkillBaseData::kRageSkillSpineFieldNumber;
const int SkillBaseData::kRageSkillEffectFieldNumber;
const int SkillBaseData::kRageSkillAudioFieldNumber;
const int SkillBaseData::kDeathAnimFieldNumber;
const int SkillBaseData::kSkillSpecialDataFieldNumber;
const int SkillBaseData::kShowRageSkillDamageFieldNumber;
const int SkillBaseData::kSkillReplaceFieldNumber;
const int SkillBaseData::kRageBonusAfterKillFieldNumber;
const int SkillBaseData::kSkillCastTypeFieldNumber;
const int SkillBaseData::kMusouCameraLookatInfoFieldNumber;
const int SkillBaseData::kRefPriorityFieldNumber;
const int SkillBaseData::kSpeBuffIDBackFieldNumber;
const int SkillBaseData::kAutoRageSkillFieldNumber;
const int SkillBaseData::kSubRageSmoothlyFieldNumber;
const int SkillBaseData::kSubRageDurationFieldNumber;
const int SkillBaseData::kLastEffForwardSelfFieldNumber;
const int SkillBaseData::kLocalizeSkillIdFieldNumber;
const int SkillBaseData::kScenePosIndexFieldNumber;
const int SkillBaseData::kDamageSpecialTypeFieldNumber;
const int SkillBaseData::kIsSemiAutoRageSkillFieldNumber;
const int SkillBaseData::kSemiAutoSkillTimeToLiveFieldNumber;
const int SkillBaseData::kSemiAutoSkillIntervalFieldNumber;
const int SkillBaseData::kSemiAutoSkillChainFieldNumber;
const int SkillBaseData::kIsBlockPriorityFieldNumber;
const int SkillBaseData::kIgnoreInterruptEffectFieldNumber;
const int SkillBaseData::kSkillEnergyLevelFieldNumber;
const int SkillBaseData::kPerfectInterruptDurationFieldNumber;
const int SkillBaseData::kSkillEndTimeFieldNumber;
const int SkillBaseData::kLockonFieldNumber;
const int SkillBaseData::kIsNeedHighlighFieldNumber;
const int SkillBaseData::kKeepDyingDurationFieldNumber;
const int SkillBaseData::kInterruptBossSkillFieldNumber;
const int SkillBaseData::kSkipIdleOnEndFieldNumber;
const int SkillBaseData::kRageSkillInterruptableFieldNumber;
const int SkillBaseData::kArmySkillInfoFieldNumber;
const int SkillBaseData::kIgnoreNoSkillFieldNumber;
const int SkillBaseData::kRefTargetSummonTypeFieldNumber;
const int SkillBaseData::kLevelCoolingTimeGrowthFieldNumber;
const int SkillBaseData::kTargetProfessionsFieldNumber;
#endif  // !_MSC_VER

SkillBaseData::SkillBaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillBaseData)
}

void SkillBaseData::InitAsDefaultInstance() {
  skillspecialdata_ = const_cast< ::pb::SkillSpecialData*>(&::pb::SkillSpecialData::default_instance());
  skillcasttype_ = const_cast< ::pb::SkillCastType*>(&::pb::SkillCastType::default_instance());
  refpriority_ = const_cast< ::pb::SkillTargetPriority*>(&::pb::SkillTargetPriority::default_instance());
}

SkillBaseData::SkillBaseData(const SkillBaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillBaseData)
}

void SkillBaseData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chainskillmark_ = 0;
  maintype_ = 0;
  subtype_ = 0;
  normalattackcount_ = 0;
  reftargettype_ = 0;
  spebuffid_ = 0;
  reftargetnum_ = 0;
  isrealtarget_ = false;
  skillanim_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isplayhitanim_ = false;
  castrange_ = 0;
  needfacetowhencast_ = 0;
  isrecoverfrompause_ = false;
  isfacetargetduringcast_ = false;
  maxcastcountinonescene_ = 0;
  maxcastcountinonebattle_ = 0;
  islasting_ = false;
  coolingtime_ = 0;
  intervaltime_ = 0;
  normalattackchance_ = 0;
  triggerbuffid_ = 0;
  triggerbufflayer_ = 0;
  iconpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frontdistance_ = 0;
  skilltunnel_ = 0;
  skilllasteffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skillshowtime_ = 0;
  reftargetincludeself_ = false;
  triggerskillchance_ = 0;
  partofrageskill_ = false;
  skillactionlasttime_ = 0;
  musoutimeline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skillpriority_ = 0;
  rageskillspine_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rageskilleffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rageskillaudio_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deathanim_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skillspecialdata_ = NULL;
  showrageskilldamage_ = false;
  ragebonusafterkill_ = 0;
  skillcasttype_ = NULL;
  refpriority_ = NULL;
  spebuffidback_ = 0;
  autorageskill_ = false;
  subragesmoothly_ = false;
  subrageduration_ = 0;
  lasteffforwardself_ = false;
  localizeskillid_ = 0;
  damagespecialtype_ = 0;
  issemiautorageskill_ = false;
  semiautoskilltimetolive_ = 0;
  semiautoskillinterval_ = 0;
  isblockpriority_ = false;
  ignoreinterrupteffect_ = false;
  perfectinterruptduration_ = 0;
  skillendtime_ = 0;
  lockon_ = false;
  isneedhighligh_ = false;
  keepdyingduration_ = 0;
  interruptbossskill_ = false;
  skipidleonend_ = false;
  rageskillinterruptable_ = false;
  ignorenoskill_ = false;
  reftargetsummontype_ = 0;
  levelcoolingtimegrowth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillBaseData::~SkillBaseData() {
  // @@protoc_insertion_point(destructor:pb.SkillBaseData)
  SharedDtor();
}

void SkillBaseData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (skillanim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skillanim_;
  }
  if (iconpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iconpath_;
  }
  if (skilllasteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skilllasteffect_;
  }
  if (musoutimeline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete musoutimeline_;
  }
  if (rageskillspine_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rageskillspine_;
  }
  if (rageskilleffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rageskilleffect_;
  }
  if (rageskillaudio_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rageskillaudio_;
  }
  if (deathanim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deathanim_;
  }
  if (this != default_instance_) {
    delete skillspecialdata_;
    delete skillcasttype_;
    delete refpriority_;
  }
}

void SkillBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillBaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillBaseData_descriptor_;
}

const SkillBaseData& SkillBaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillBaseData_2eproto();
  return *default_instance_;
}

SkillBaseData* SkillBaseData::default_instance_ = NULL;

SkillBaseData* SkillBaseData::New() const {
  return new SkillBaseData;
}

void SkillBaseData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillBaseData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(chainskillmark_, spebuffid_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    reftargetnum_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(castrange_, maxcastcountinonescene_);
    if (has_skillanim()) {
      if (skillanim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        skillanim_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(maxcastcountinonebattle_, triggerbuffid_);
    islasting_ = false;
    triggerbufflayer_ = 0;
    if (has_iconpath()) {
      if (iconpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        iconpath_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 3707764736) {
    ZR_(skilltunnel_, skillshowtime_);
    frontdistance_ = 0;
    if (has_skilllasteffect()) {
      if (skilllasteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        skilllasteffect_->clear();
      }
    }
    reftargetincludeself_ = false;
    triggerskillchance_ = 0;
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(skillactionlasttime_, skillpriority_);
    partofrageskill_ = false;
    if (has_musoutimeline()) {
      if (musoutimeline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        musoutimeline_->clear();
      }
    }
    if (has_rageskillspine()) {
      if (rageskillspine_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rageskillspine_->clear();
      }
    }
    if (has_rageskilleffect()) {
      if (rageskilleffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rageskilleffect_->clear();
      }
    }
    if (has_rageskillaudio()) {
      if (rageskillaudio_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rageskillaudio_->clear();
      }
    }
    if (has_deathanim()) {
      if (deathanim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deathanim_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & 56064) {
    ZR_(ragebonusafterkill_, spebuffidback_);
    if (has_skillspecialdata()) {
      if (skillspecialdata_ != NULL) skillspecialdata_->::pb::SkillSpecialData::Clear();
    }
    showrageskilldamage_ = false;
    if (has_skillcasttype()) {
      if (skillcasttype_ != NULL) skillcasttype_->::pb::SkillCastType::Clear();
    }
    if (has_refpriority()) {
      if (refpriority_ != NULL) refpriority_->::pb::SkillTargetPriority::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 14614528) {
    ZR_(subrageduration_, issemiautorageskill_);
    ZR_(localizeskillid_, damagespecialtype_);
  }
  if (_has_bits_[56 / 32] & 3674210304) {
    ZR_(semiautoskilltimetolive_, semiautoskillinterval_);
    ZR_(perfectinterruptduration_, ignoreinterrupteffect_);
    skillendtime_ = 0;
  }
  if (_has_bits_[64 / 32] & 191) {
    ZR_(lockon_, isneedhighligh_);
    ZR_(keepdyingduration_, ignorenoskill_);
  }
  if (_has_bits_[72 / 32] & 768) {
    reftargetsummontype_ = 0;
    levelcoolingtimegrowth_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  scenepos_.Clear();
  triggerskillarr_.Clear();
  skillreplace_.Clear();
  musoucameralookatinfo_.Clear();
  sceneposindex_.Clear();
  semiautoskillchain_.Clear();
  skillenergylevel_.Clear();
  armyskillinfo_.Clear();
  targetprofessions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillBaseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ChainSkillMark;
        break;
      }

      // optional int32 ChainSkillMark = 2;
      case 2: {
        if (tag == 16) {
         parse_ChainSkillMark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chainskillmark_)));
          set_has_chainskillmark();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MainType;
        break;
      }

      // optional int32 MainType = 3;
      case 3: {
        if (tag == 24) {
         parse_MainType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maintype_)));
          set_has_maintype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SubType;
        break;
      }

      // optional int32 SubType = 4;
      case 4: {
        if (tag == 32) {
         parse_SubType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_NormalAttackCount;
        break;
      }

      // optional int32 NormalAttackCount = 5;
      case 5: {
        if (tag == 40) {
         parse_NormalAttackCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &normalattackcount_)));
          set_has_normalattackcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_RefTargetType;
        break;
      }

      // optional int32 RefTargetType = 6;
      case 6: {
        if (tag == 48) {
         parse_RefTargetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reftargettype_)));
          set_has_reftargettype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_SpeBuffID;
        break;
      }

      // optional int32 SpeBuffID = 7;
      case 7: {
        if (tag == 56) {
         parse_SpeBuffID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spebuffid_)));
          set_has_spebuffid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_RefTargetNum;
        break;
      }

      // optional int32 RefTargetNum = 8;
      case 8: {
        if (tag == 64) {
         parse_RefTargetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reftargetnum_)));
          set_has_reftargetnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_IsRealTarget;
        break;
      }

      // optional bool IsRealTarget = 9;
      case 9: {
        if (tag == 72) {
         parse_IsRealTarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrealtarget_)));
          set_has_isrealtarget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_SkillAnim;
        break;
      }

      // optional string SkillAnim = 10;
      case 10: {
        if (tag == 82) {
         parse_SkillAnim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skillanim()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->skillanim().data(), this->skillanim().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "skillanim");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_IsPlayHitAnim;
        break;
      }

      // optional bool IsPlayHitAnim = 11;
      case 11: {
        if (tag == 88) {
         parse_IsPlayHitAnim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isplayhitanim_)));
          set_has_isplayhitanim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_CastRange;
        break;
      }

      // optional int32 CastRange = 12;
      case 12: {
        if (tag == 96) {
         parse_CastRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &castrange_)));
          set_has_castrange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_needFaceToWhenCast;
        break;
      }

      // optional int32 needFaceToWhenCast = 13;
      case 13: {
        if (tag == 104) {
         parse_needFaceToWhenCast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needfacetowhencast_)));
          set_has_needfacetowhencast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_IsRecoverFromPause;
        break;
      }

      // optional bool IsRecoverFromPause = 19;
      case 19: {
        if (tag == 152) {
         parse_IsRecoverFromPause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrecoverfrompause_)));
          set_has_isrecoverfrompause();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_IsFaceTargetDuringCast;
        break;
      }

      // optional bool IsFaceTargetDuringCast = 22;
      case 22: {
        if (tag == 176) {
         parse_IsFaceTargetDuringCast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfacetargetduringcast_)));
          set_has_isfacetargetduringcast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_MaxCastCountInOneScene;
        break;
      }

      // optional int32 MaxCastCountInOneScene = 23;
      case 23: {
        if (tag == 184) {
         parse_MaxCastCountInOneScene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcastcountinonescene_)));
          set_has_maxcastcountinonescene();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_MaxCastCountInOneBattle;
        break;
      }

      // optional int32 MaxCastCountInOneBattle = 24;
      case 24: {
        if (tag == 192) {
         parse_MaxCastCountInOneBattle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcastcountinonebattle_)));
          set_has_maxcastcountinonebattle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_IsLasting;
        break;
      }

      // optional bool IsLasting = 26;
      case 26: {
        if (tag == 208) {
         parse_IsLasting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islasting_)));
          set_has_islasting();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_CoolingTime;
        break;
      }

      // optional int32 CoolingTime = 27;
      case 27: {
        if (tag == 216) {
         parse_CoolingTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coolingtime_)));
          set_has_coolingtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_IntervalTime;
        break;
      }

      // optional int32 IntervalTime = 28;
      case 28: {
        if (tag == 224) {
         parse_IntervalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intervaltime_)));
          set_has_intervaltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_NormalAttackChance;
        break;
      }

      // optional int32 NormalAttackChance = 29;
      case 29: {
        if (tag == 232) {
         parse_NormalAttackChance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &normalattackchance_)));
          set_has_normalattackchance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_TriggerBuffID;
        break;
      }

      // optional int32 TriggerBuffID = 30;
      case 30: {
        if (tag == 240) {
         parse_TriggerBuffID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggerbuffid_)));
          set_has_triggerbuffid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_TriggerBuffLayer;
        break;
      }

      // optional int32 TriggerBuffLayer = 31;
      case 31: {
        if (tag == 248) {
         parse_TriggerBuffLayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggerbufflayer_)));
          set_has_triggerbufflayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_IconPath;
        break;
      }

      // optional string IconPath = 32;
      case 32: {
        if (tag == 258) {
         parse_IconPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iconpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iconpath().data(), this->iconpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "iconpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_FrontDistance;
        break;
      }

      // optional int32 FrontDistance = 36;
      case 36: {
        if (tag == 288) {
         parse_FrontDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontdistance_)));
          set_has_frontdistance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(301)) goto parse_ScenePos;
        break;
      }

      // repeated float ScenePos = 37;
      case 37: {
        if (tag == 301) {
         parse_ScenePos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 301, input, this->mutable_scenepos())));
        } else if (tag == 298) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_scenepos())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(301)) goto parse_ScenePos;
        if (input->ExpectTag(304)) goto parse_SkillTunnel;
        break;
      }

      // optional int32 SkillTunnel = 38;
      case 38: {
        if (tag == 304) {
         parse_SkillTunnel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilltunnel_)));
          set_has_skilltunnel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_SkillLastEffect;
        break;
      }

      // optional string SkillLastEffect = 39;
      case 39: {
        if (tag == 314) {
         parse_SkillLastEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skilllasteffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->skilllasteffect().data(), this->skilllasteffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "skilllasteffect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_SkillShowTime;
        break;
      }

      // optional int32 SkillShowTime = 40;
      case 40: {
        if (tag == 320) {
         parse_SkillShowTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillshowtime_)));
          set_has_skillshowtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_TriggerSkillArr;
        break;
      }

      // repeated int32 TriggerSkillArr = 41;
      case 41: {
        if (tag == 328) {
         parse_TriggerSkillArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 328, input, this->mutable_triggerskillarr())));
        } else if (tag == 330) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_triggerskillarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_TriggerSkillArr;
        if (input->ExpectTag(336)) goto parse_RefTargetIncludeSelf;
        break;
      }

      // optional bool RefTargetIncludeSelf = 42;
      case 42: {
        if (tag == 336) {
         parse_RefTargetIncludeSelf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reftargetincludeself_)));
          set_has_reftargetincludeself();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_TriggerSkillChance;
        break;
      }

      // optional int32 TriggerSkillChance = 43;
      case 43: {
        if (tag == 344) {
         parse_TriggerSkillChance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggerskillchance_)));
          set_has_triggerskillchance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_PartofRageSkill;
        break;
      }

      // optional bool PartofRageSkill = 45;
      case 45: {
        if (tag == 360) {
         parse_PartofRageSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &partofrageskill_)));
          set_has_partofrageskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_SkillActionLastTime;
        break;
      }

      // optional int32 SkillActionLastTime = 46;
      case 46: {
        if (tag == 368) {
         parse_SkillActionLastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillactionlasttime_)));
          set_has_skillactionlasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_MusouTimeLine;
        break;
      }

      // optional string MusouTimeLine = 47;
      case 47: {
        if (tag == 378) {
         parse_MusouTimeLine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_musoutimeline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->musoutimeline().data(), this->musoutimeline().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "musoutimeline");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_SkillPriority;
        break;
      }

      // optional int32 SkillPriority = 48;
      case 48: {
        if (tag == 384) {
         parse_SkillPriority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillpriority_)));
          set_has_skillpriority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_RageSkillSpine;
        break;
      }

      // optional string RageSkillSpine = 49;
      case 49: {
        if (tag == 394) {
         parse_RageSkillSpine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rageskillspine()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rageskillspine().data(), this->rageskillspine().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rageskillspine");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_RageSkillEffect;
        break;
      }

      // optional string RageSkillEffect = 50;
      case 50: {
        if (tag == 402) {
         parse_RageSkillEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rageskilleffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rageskilleffect().data(), this->rageskilleffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rageskilleffect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_RageSkillAudio;
        break;
      }

      // optional string RageSkillAudio = 51;
      case 51: {
        if (tag == 410) {
         parse_RageSkillAudio:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rageskillaudio()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rageskillaudio().data(), this->rageskillaudio().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rageskillaudio");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_DeathAnim;
        break;
      }

      // optional string DeathAnim = 52;
      case 52: {
        if (tag == 418) {
         parse_DeathAnim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deathanim()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deathanim().data(), this->deathanim().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deathanim");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse_SkillSpecialData;
        break;
      }

      // optional .pb.SkillSpecialData SkillSpecialData = 53;
      case 53: {
        if (tag == 426) {
         parse_SkillSpecialData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skillspecialdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_ShowRageSkillDamage;
        break;
      }

      // optional bool ShowRageSkillDamage = 54;
      case 54: {
        if (tag == 432) {
         parse_ShowRageSkillDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showrageskilldamage_)));
          set_has_showrageskilldamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_SkillReplace;
        break;
      }

      // repeated int32 SkillReplace = 55;
      case 55: {
        if (tag == 440) {
         parse_SkillReplace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 440, input, this->mutable_skillreplace())));
        } else if (tag == 442) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skillreplace())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_SkillReplace;
        if (input->ExpectTag(448)) goto parse_RageBonusAfterKill;
        break;
      }

      // optional int32 RageBonusAfterKill = 56;
      case 56: {
        if (tag == 448) {
         parse_RageBonusAfterKill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ragebonusafterkill_)));
          set_has_ragebonusafterkill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(458)) goto parse_SkillCastType;
        break;
      }

      // optional .pb.SkillCastType SkillCastType = 57;
      case 57: {
        if (tag == 458) {
         parse_SkillCastType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skillcasttype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_MusouCameraLookatInfo;
        break;
      }

      // repeated string MusouCameraLookatInfo = 58;
      case 58: {
        if (tag == 466) {
         parse_MusouCameraLookatInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_musoucameralookatinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->musoucameralookatinfo(this->musoucameralookatinfo_size() - 1).data(),
            this->musoucameralookatinfo(this->musoucameralookatinfo_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "musoucameralookatinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_MusouCameraLookatInfo;
        if (input->ExpectTag(474)) goto parse_RefPriority;
        break;
      }

      // optional .pb.SkillTargetPriority RefPriority = 59;
      case 59: {
        if (tag == 474) {
         parse_RefPriority:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_refpriority()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_SpeBuffIDBack;
        break;
      }

      // optional int32 SpeBuffIDBack = 60;
      case 60: {
        if (tag == 480) {
         parse_SpeBuffIDBack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spebuffidback_)));
          set_has_spebuffidback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_AutoRageSkill;
        break;
      }

      // optional bool AutoRageSkill = 61;
      case 61: {
        if (tag == 488) {
         parse_AutoRageSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autorageskill_)));
          set_has_autorageskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_SubRageSmoothly;
        break;
      }

      // optional bool SubRageSmoothly = 62;
      case 62: {
        if (tag == 496) {
         parse_SubRageSmoothly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subragesmoothly_)));
          set_has_subragesmoothly();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_SubRageDuration;
        break;
      }

      // optional int32 SubRageDuration = 63;
      case 63: {
        if (tag == 504) {
         parse_SubRageDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subrageduration_)));
          set_has_subrageduration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_LastEffForwardSelf;
        break;
      }

      // optional bool LastEffForwardSelf = 64;
      case 64: {
        if (tag == 512) {
         parse_LastEffForwardSelf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lasteffforwardself_)));
          set_has_lasteffforwardself();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_LocalizeSkillId;
        break;
      }

      // optional int32 LocalizeSkillId = 65;
      case 65: {
        if (tag == 520) {
         parse_LocalizeSkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &localizeskillid_)));
          set_has_localizeskillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(528)) goto parse_ScenePosIndex;
        break;
      }

      // repeated int32 ScenePosIndex = 66;
      case 66: {
        if (tag == 528) {
         parse_ScenePosIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 528, input, this->mutable_sceneposindex())));
        } else if (tag == 530) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sceneposindex())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(528)) goto parse_ScenePosIndex;
        if (input->ExpectTag(536)) goto parse_DamageSpecialType;
        break;
      }

      // optional int32 DamageSpecialType = 67;
      case 67: {
        if (tag == 536) {
         parse_DamageSpecialType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damagespecialtype_)));
          set_has_damagespecialtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(544)) goto parse_IsSemiAutoRageSkill;
        break;
      }

      // optional bool IsSemiAutoRageSkill = 68;
      case 68: {
        if (tag == 544) {
         parse_IsSemiAutoRageSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issemiautorageskill_)));
          set_has_issemiautorageskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(552)) goto parse_SemiAutoSkillTimeToLive;
        break;
      }

      // optional int32 SemiAutoSkillTimeToLive = 69;
      case 69: {
        if (tag == 552) {
         parse_SemiAutoSkillTimeToLive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &semiautoskilltimetolive_)));
          set_has_semiautoskilltimetolive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(560)) goto parse_SemiAutoSkillInterval;
        break;
      }

      // optional int32 SemiAutoSkillInterval = 70;
      case 70: {
        if (tag == 560) {
         parse_SemiAutoSkillInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &semiautoskillinterval_)));
          set_has_semiautoskillinterval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_SemiAutoSkillChain;
        break;
      }

      // repeated int32 SemiAutoSkillChain = 71;
      case 71: {
        if (tag == 568) {
         parse_SemiAutoSkillChain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 568, input, this->mutable_semiautoskillchain())));
        } else if (tag == 570) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_semiautoskillchain())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_SemiAutoSkillChain;
        if (input->ExpectTag(576)) goto parse_IsBlockPriority;
        break;
      }

      // optional bool IsBlockPriority = 72;
      case 72: {
        if (tag == 576) {
         parse_IsBlockPriority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isblockpriority_)));
          set_has_isblockpriority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(584)) goto parse_IgnoreInterruptEffect;
        break;
      }

      // optional bool IgnoreInterruptEffect = 73;
      case 73: {
        if (tag == 584) {
         parse_IgnoreInterruptEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignoreinterrupteffect_)));
          set_has_ignoreinterrupteffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(592)) goto parse_SkillEnergyLevel;
        break;
      }

      // repeated int32 SkillEnergyLevel = 74;
      case 74: {
        if (tag == 592) {
         parse_SkillEnergyLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 592, input, this->mutable_skillenergylevel())));
        } else if (tag == 594) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skillenergylevel())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(592)) goto parse_SkillEnergyLevel;
        if (input->ExpectTag(600)) goto parse_PerfectInterruptDuration;
        break;
      }

      // optional int32 PerfectInterruptDuration = 75;
      case 75: {
        if (tag == 600) {
         parse_PerfectInterruptDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &perfectinterruptduration_)));
          set_has_perfectinterruptduration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(608)) goto parse_SkillEndTime;
        break;
      }

      // optional int32 SkillEndTime = 76;
      case 76: {
        if (tag == 608) {
         parse_SkillEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillendtime_)));
          set_has_skillendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(616)) goto parse_Lockon;
        break;
      }

      // optional bool Lockon = 77;
      case 77: {
        if (tag == 616) {
         parse_Lockon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lockon_)));
          set_has_lockon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(624)) goto parse_IsNeedHighligh;
        break;
      }

      // optional bool IsNeedHighligh = 78;
      case 78: {
        if (tag == 624) {
         parse_IsNeedHighligh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isneedhighligh_)));
          set_has_isneedhighligh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(632)) goto parse_KeepDyingDuration;
        break;
      }

      // optional int32 KeepDyingDuration = 79;
      case 79: {
        if (tag == 632) {
         parse_KeepDyingDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keepdyingduration_)));
          set_has_keepdyingduration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(640)) goto parse_InterruptBossSkill;
        break;
      }

      // optional bool InterruptBossSkill = 80;
      case 80: {
        if (tag == 640) {
         parse_InterruptBossSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &interruptbossskill_)));
          set_has_interruptbossskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(648)) goto parse_SkipIdleOnEnd;
        break;
      }

      // optional bool SkipIdleOnEnd = 81;
      case 81: {
        if (tag == 648) {
         parse_SkipIdleOnEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skipidleonend_)));
          set_has_skipidleonend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(656)) goto parse_RageSkillInterruptable;
        break;
      }

      // optional bool RageSkillInterruptable = 82;
      case 82: {
        if (tag == 656) {
         parse_RageSkillInterruptable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rageskillinterruptable_)));
          set_has_rageskillinterruptable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(664)) goto parse_ArmySkillInfo;
        break;
      }

      // repeated int32 ArmySkillInfo = 83;
      case 83: {
        if (tag == 664) {
         parse_ArmySkillInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 664, input, this->mutable_armyskillinfo())));
        } else if (tag == 666) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_armyskillinfo())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(664)) goto parse_ArmySkillInfo;
        if (input->ExpectTag(672)) goto parse_IgnoreNoSkill;
        break;
      }

      // optional bool IgnoreNoSkill = 84;
      case 84: {
        if (tag == 672) {
         parse_IgnoreNoSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignorenoskill_)));
          set_has_ignorenoskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(680)) goto parse_RefTargetSummonType;
        break;
      }

      // optional int32 RefTargetSummonType = 85;
      case 85: {
        if (tag == 680) {
         parse_RefTargetSummonType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reftargetsummontype_)));
          set_has_reftargetsummontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(688)) goto parse_LevelCoolingTimeGrowth;
        break;
      }

      // optional int32 LevelCoolingTimeGrowth = 86;
      case 86: {
        if (tag == 688) {
         parse_LevelCoolingTimeGrowth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelcoolingtimegrowth_)));
          set_has_levelcoolingtimegrowth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(696)) goto parse_TargetProfessions;
        break;
      }

      // repeated int32 TargetProfessions = 87;
      case 87: {
        if (tag == 696) {
         parse_TargetProfessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 696, input, this->mutable_targetprofessions())));
        } else if (tag == 698) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_targetprofessions())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(696)) goto parse_TargetProfessions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillBaseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillBaseData)
  return false;
#undef DO_
}

void SkillBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillBaseData)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 ChainSkillMark = 2;
  if (has_chainskillmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chainskillmark(), output);
  }

  // optional int32 MainType = 3;
  if (has_maintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maintype(), output);
  }

  // optional int32 SubType = 4;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->subtype(), output);
  }

  // optional int32 NormalAttackCount = 5;
  if (has_normalattackcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->normalattackcount(), output);
  }

  // optional int32 RefTargetType = 6;
  if (has_reftargettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reftargettype(), output);
  }

  // optional int32 SpeBuffID = 7;
  if (has_spebuffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->spebuffid(), output);
  }

  // optional int32 RefTargetNum = 8;
  if (has_reftargetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->reftargetnum(), output);
  }

  // optional bool IsRealTarget = 9;
  if (has_isrealtarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isrealtarget(), output);
  }

  // optional string SkillAnim = 10;
  if (has_skillanim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skillanim().data(), this->skillanim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skillanim");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->skillanim(), output);
  }

  // optional bool IsPlayHitAnim = 11;
  if (has_isplayhitanim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isplayhitanim(), output);
  }

  // optional int32 CastRange = 12;
  if (has_castrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->castrange(), output);
  }

  // optional int32 needFaceToWhenCast = 13;
  if (has_needfacetowhencast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->needfacetowhencast(), output);
  }

  // optional bool IsRecoverFromPause = 19;
  if (has_isrecoverfrompause()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->isrecoverfrompause(), output);
  }

  // optional bool IsFaceTargetDuringCast = 22;
  if (has_isfacetargetduringcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->isfacetargetduringcast(), output);
  }

  // optional int32 MaxCastCountInOneScene = 23;
  if (has_maxcastcountinonescene()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->maxcastcountinonescene(), output);
  }

  // optional int32 MaxCastCountInOneBattle = 24;
  if (has_maxcastcountinonebattle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->maxcastcountinonebattle(), output);
  }

  // optional bool IsLasting = 26;
  if (has_islasting()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->islasting(), output);
  }

  // optional int32 CoolingTime = 27;
  if (has_coolingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->coolingtime(), output);
  }

  // optional int32 IntervalTime = 28;
  if (has_intervaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->intervaltime(), output);
  }

  // optional int32 NormalAttackChance = 29;
  if (has_normalattackchance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->normalattackchance(), output);
  }

  // optional int32 TriggerBuffID = 30;
  if (has_triggerbuffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->triggerbuffid(), output);
  }

  // optional int32 TriggerBuffLayer = 31;
  if (has_triggerbufflayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->triggerbufflayer(), output);
  }

  // optional string IconPath = 32;
  if (has_iconpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iconpath().data(), this->iconpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iconpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->iconpath(), output);
  }

  // optional int32 FrontDistance = 36;
  if (has_frontdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->frontdistance(), output);
  }

  // repeated float ScenePos = 37;
  for (int i = 0; i < this->scenepos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      37, this->scenepos(i), output);
  }

  // optional int32 SkillTunnel = 38;
  if (has_skilltunnel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->skilltunnel(), output);
  }

  // optional string SkillLastEffect = 39;
  if (has_skilllasteffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skilllasteffect().data(), this->skilllasteffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skilllasteffect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      39, this->skilllasteffect(), output);
  }

  // optional int32 SkillShowTime = 40;
  if (has_skillshowtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->skillshowtime(), output);
  }

  // repeated int32 TriggerSkillArr = 41;
  for (int i = 0; i < this->triggerskillarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      41, this->triggerskillarr(i), output);
  }

  // optional bool RefTargetIncludeSelf = 42;
  if (has_reftargetincludeself()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->reftargetincludeself(), output);
  }

  // optional int32 TriggerSkillChance = 43;
  if (has_triggerskillchance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->triggerskillchance(), output);
  }

  // optional bool PartofRageSkill = 45;
  if (has_partofrageskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->partofrageskill(), output);
  }

  // optional int32 SkillActionLastTime = 46;
  if (has_skillactionlasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->skillactionlasttime(), output);
  }

  // optional string MusouTimeLine = 47;
  if (has_musoutimeline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->musoutimeline().data(), this->musoutimeline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "musoutimeline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      47, this->musoutimeline(), output);
  }

  // optional int32 SkillPriority = 48;
  if (has_skillpriority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->skillpriority(), output);
  }

  // optional string RageSkillSpine = 49;
  if (has_rageskillspine()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rageskillspine().data(), this->rageskillspine().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rageskillspine");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      49, this->rageskillspine(), output);
  }

  // optional string RageSkillEffect = 50;
  if (has_rageskilleffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rageskilleffect().data(), this->rageskilleffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rageskilleffect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->rageskilleffect(), output);
  }

  // optional string RageSkillAudio = 51;
  if (has_rageskillaudio()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rageskillaudio().data(), this->rageskillaudio().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rageskillaudio");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      51, this->rageskillaudio(), output);
  }

  // optional string DeathAnim = 52;
  if (has_deathanim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deathanim().data(), this->deathanim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deathanim");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      52, this->deathanim(), output);
  }

  // optional .pb.SkillSpecialData SkillSpecialData = 53;
  if (has_skillspecialdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->skillspecialdata(), output);
  }

  // optional bool ShowRageSkillDamage = 54;
  if (has_showrageskilldamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(54, this->showrageskilldamage(), output);
  }

  // repeated int32 SkillReplace = 55;
  for (int i = 0; i < this->skillreplace_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      55, this->skillreplace(i), output);
  }

  // optional int32 RageBonusAfterKill = 56;
  if (has_ragebonusafterkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->ragebonusafterkill(), output);
  }

  // optional .pb.SkillCastType SkillCastType = 57;
  if (has_skillcasttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->skillcasttype(), output);
  }

  // repeated string MusouCameraLookatInfo = 58;
  for (int i = 0; i < this->musoucameralookatinfo_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->musoucameralookatinfo(i).data(), this->musoucameralookatinfo(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "musoucameralookatinfo");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      58, this->musoucameralookatinfo(i), output);
  }

  // optional .pb.SkillTargetPriority RefPriority = 59;
  if (has_refpriority()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->refpriority(), output);
  }

  // optional int32 SpeBuffIDBack = 60;
  if (has_spebuffidback()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->spebuffidback(), output);
  }

  // optional bool AutoRageSkill = 61;
  if (has_autorageskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(61, this->autorageskill(), output);
  }

  // optional bool SubRageSmoothly = 62;
  if (has_subragesmoothly()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(62, this->subragesmoothly(), output);
  }

  // optional int32 SubRageDuration = 63;
  if (has_subrageduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->subrageduration(), output);
  }

  // optional bool LastEffForwardSelf = 64;
  if (has_lasteffforwardself()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(64, this->lasteffforwardself(), output);
  }

  // optional int32 LocalizeSkillId = 65;
  if (has_localizeskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->localizeskillid(), output);
  }

  // repeated int32 ScenePosIndex = 66;
  for (int i = 0; i < this->sceneposindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      66, this->sceneposindex(i), output);
  }

  // optional int32 DamageSpecialType = 67;
  if (has_damagespecialtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->damagespecialtype(), output);
  }

  // optional bool IsSemiAutoRageSkill = 68;
  if (has_issemiautorageskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(68, this->issemiautorageskill(), output);
  }

  // optional int32 SemiAutoSkillTimeToLive = 69;
  if (has_semiautoskilltimetolive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->semiautoskilltimetolive(), output);
  }

  // optional int32 SemiAutoSkillInterval = 70;
  if (has_semiautoskillinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->semiautoskillinterval(), output);
  }

  // repeated int32 SemiAutoSkillChain = 71;
  for (int i = 0; i < this->semiautoskillchain_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      71, this->semiautoskillchain(i), output);
  }

  // optional bool IsBlockPriority = 72;
  if (has_isblockpriority()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(72, this->isblockpriority(), output);
  }

  // optional bool IgnoreInterruptEffect = 73;
  if (has_ignoreinterrupteffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(73, this->ignoreinterrupteffect(), output);
  }

  // repeated int32 SkillEnergyLevel = 74;
  for (int i = 0; i < this->skillenergylevel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      74, this->skillenergylevel(i), output);
  }

  // optional int32 PerfectInterruptDuration = 75;
  if (has_perfectinterruptduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(75, this->perfectinterruptduration(), output);
  }

  // optional int32 SkillEndTime = 76;
  if (has_skillendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(76, this->skillendtime(), output);
  }

  // optional bool Lockon = 77;
  if (has_lockon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(77, this->lockon(), output);
  }

  // optional bool IsNeedHighligh = 78;
  if (has_isneedhighligh()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(78, this->isneedhighligh(), output);
  }

  // optional int32 KeepDyingDuration = 79;
  if (has_keepdyingduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(79, this->keepdyingduration(), output);
  }

  // optional bool InterruptBossSkill = 80;
  if (has_interruptbossskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(80, this->interruptbossskill(), output);
  }

  // optional bool SkipIdleOnEnd = 81;
  if (has_skipidleonend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(81, this->skipidleonend(), output);
  }

  // optional bool RageSkillInterruptable = 82;
  if (has_rageskillinterruptable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(82, this->rageskillinterruptable(), output);
  }

  // repeated int32 ArmySkillInfo = 83;
  for (int i = 0; i < this->armyskillinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      83, this->armyskillinfo(i), output);
  }

  // optional bool IgnoreNoSkill = 84;
  if (has_ignorenoskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(84, this->ignorenoskill(), output);
  }

  // optional int32 RefTargetSummonType = 85;
  if (has_reftargetsummontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(85, this->reftargetsummontype(), output);
  }

  // optional int32 LevelCoolingTimeGrowth = 86;
  if (has_levelcoolingtimegrowth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(86, this->levelcoolingtimegrowth(), output);
  }

  // repeated int32 TargetProfessions = 87;
  for (int i = 0; i < this->targetprofessions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      87, this->targetprofessions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillBaseData)
}

::google::protobuf::uint8* SkillBaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillBaseData)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 ChainSkillMark = 2;
  if (has_chainskillmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chainskillmark(), target);
  }

  // optional int32 MainType = 3;
  if (has_maintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maintype(), target);
  }

  // optional int32 SubType = 4;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->subtype(), target);
  }

  // optional int32 NormalAttackCount = 5;
  if (has_normalattackcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->normalattackcount(), target);
  }

  // optional int32 RefTargetType = 6;
  if (has_reftargettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reftargettype(), target);
  }

  // optional int32 SpeBuffID = 7;
  if (has_spebuffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->spebuffid(), target);
  }

  // optional int32 RefTargetNum = 8;
  if (has_reftargetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->reftargetnum(), target);
  }

  // optional bool IsRealTarget = 9;
  if (has_isrealtarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isrealtarget(), target);
  }

  // optional string SkillAnim = 10;
  if (has_skillanim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skillanim().data(), this->skillanim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skillanim");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->skillanim(), target);
  }

  // optional bool IsPlayHitAnim = 11;
  if (has_isplayhitanim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isplayhitanim(), target);
  }

  // optional int32 CastRange = 12;
  if (has_castrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->castrange(), target);
  }

  // optional int32 needFaceToWhenCast = 13;
  if (has_needfacetowhencast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->needfacetowhencast(), target);
  }

  // optional bool IsRecoverFromPause = 19;
  if (has_isrecoverfrompause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->isrecoverfrompause(), target);
  }

  // optional bool IsFaceTargetDuringCast = 22;
  if (has_isfacetargetduringcast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->isfacetargetduringcast(), target);
  }

  // optional int32 MaxCastCountInOneScene = 23;
  if (has_maxcastcountinonescene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->maxcastcountinonescene(), target);
  }

  // optional int32 MaxCastCountInOneBattle = 24;
  if (has_maxcastcountinonebattle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->maxcastcountinonebattle(), target);
  }

  // optional bool IsLasting = 26;
  if (has_islasting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->islasting(), target);
  }

  // optional int32 CoolingTime = 27;
  if (has_coolingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->coolingtime(), target);
  }

  // optional int32 IntervalTime = 28;
  if (has_intervaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->intervaltime(), target);
  }

  // optional int32 NormalAttackChance = 29;
  if (has_normalattackchance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->normalattackchance(), target);
  }

  // optional int32 TriggerBuffID = 30;
  if (has_triggerbuffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->triggerbuffid(), target);
  }

  // optional int32 TriggerBuffLayer = 31;
  if (has_triggerbufflayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->triggerbufflayer(), target);
  }

  // optional string IconPath = 32;
  if (has_iconpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iconpath().data(), this->iconpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iconpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->iconpath(), target);
  }

  // optional int32 FrontDistance = 36;
  if (has_frontdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->frontdistance(), target);
  }

  // repeated float ScenePos = 37;
  for (int i = 0; i < this->scenepos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(37, this->scenepos(i), target);
  }

  // optional int32 SkillTunnel = 38;
  if (has_skilltunnel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->skilltunnel(), target);
  }

  // optional string SkillLastEffect = 39;
  if (has_skilllasteffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skilllasteffect().data(), this->skilllasteffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skilllasteffect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->skilllasteffect(), target);
  }

  // optional int32 SkillShowTime = 40;
  if (has_skillshowtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->skillshowtime(), target);
  }

  // repeated int32 TriggerSkillArr = 41;
  for (int i = 0; i < this->triggerskillarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(41, this->triggerskillarr(i), target);
  }

  // optional bool RefTargetIncludeSelf = 42;
  if (has_reftargetincludeself()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->reftargetincludeself(), target);
  }

  // optional int32 TriggerSkillChance = 43;
  if (has_triggerskillchance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->triggerskillchance(), target);
  }

  // optional bool PartofRageSkill = 45;
  if (has_partofrageskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->partofrageskill(), target);
  }

  // optional int32 SkillActionLastTime = 46;
  if (has_skillactionlasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->skillactionlasttime(), target);
  }

  // optional string MusouTimeLine = 47;
  if (has_musoutimeline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->musoutimeline().data(), this->musoutimeline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "musoutimeline");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->musoutimeline(), target);
  }

  // optional int32 SkillPriority = 48;
  if (has_skillpriority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->skillpriority(), target);
  }

  // optional string RageSkillSpine = 49;
  if (has_rageskillspine()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rageskillspine().data(), this->rageskillspine().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rageskillspine");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        49, this->rageskillspine(), target);
  }

  // optional string RageSkillEffect = 50;
  if (has_rageskilleffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rageskilleffect().data(), this->rageskilleffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rageskilleffect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->rageskilleffect(), target);
  }

  // optional string RageSkillAudio = 51;
  if (has_rageskillaudio()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rageskillaudio().data(), this->rageskillaudio().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rageskillaudio");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->rageskillaudio(), target);
  }

  // optional string DeathAnim = 52;
  if (has_deathanim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deathanim().data(), this->deathanim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deathanim");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        52, this->deathanim(), target);
  }

  // optional .pb.SkillSpecialData SkillSpecialData = 53;
  if (has_skillspecialdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->skillspecialdata(), target);
  }

  // optional bool ShowRageSkillDamage = 54;
  if (has_showrageskilldamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(54, this->showrageskilldamage(), target);
  }

  // repeated int32 SkillReplace = 55;
  for (int i = 0; i < this->skillreplace_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(55, this->skillreplace(i), target);
  }

  // optional int32 RageBonusAfterKill = 56;
  if (has_ragebonusafterkill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->ragebonusafterkill(), target);
  }

  // optional .pb.SkillCastType SkillCastType = 57;
  if (has_skillcasttype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->skillcasttype(), target);
  }

  // repeated string MusouCameraLookatInfo = 58;
  for (int i = 0; i < this->musoucameralookatinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->musoucameralookatinfo(i).data(), this->musoucameralookatinfo(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "musoucameralookatinfo");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(58, this->musoucameralookatinfo(i), target);
  }

  // optional .pb.SkillTargetPriority RefPriority = 59;
  if (has_refpriority()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->refpriority(), target);
  }

  // optional int32 SpeBuffIDBack = 60;
  if (has_spebuffidback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->spebuffidback(), target);
  }

  // optional bool AutoRageSkill = 61;
  if (has_autorageskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(61, this->autorageskill(), target);
  }

  // optional bool SubRageSmoothly = 62;
  if (has_subragesmoothly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(62, this->subragesmoothly(), target);
  }

  // optional int32 SubRageDuration = 63;
  if (has_subrageduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->subrageduration(), target);
  }

  // optional bool LastEffForwardSelf = 64;
  if (has_lasteffforwardself()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(64, this->lasteffforwardself(), target);
  }

  // optional int32 LocalizeSkillId = 65;
  if (has_localizeskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->localizeskillid(), target);
  }

  // repeated int32 ScenePosIndex = 66;
  for (int i = 0; i < this->sceneposindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(66, this->sceneposindex(i), target);
  }

  // optional int32 DamageSpecialType = 67;
  if (has_damagespecialtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->damagespecialtype(), target);
  }

  // optional bool IsSemiAutoRageSkill = 68;
  if (has_issemiautorageskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(68, this->issemiautorageskill(), target);
  }

  // optional int32 SemiAutoSkillTimeToLive = 69;
  if (has_semiautoskilltimetolive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->semiautoskilltimetolive(), target);
  }

  // optional int32 SemiAutoSkillInterval = 70;
  if (has_semiautoskillinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->semiautoskillinterval(), target);
  }

  // repeated int32 SemiAutoSkillChain = 71;
  for (int i = 0; i < this->semiautoskillchain_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(71, this->semiautoskillchain(i), target);
  }

  // optional bool IsBlockPriority = 72;
  if (has_isblockpriority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(72, this->isblockpriority(), target);
  }

  // optional bool IgnoreInterruptEffect = 73;
  if (has_ignoreinterrupteffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(73, this->ignoreinterrupteffect(), target);
  }

  // repeated int32 SkillEnergyLevel = 74;
  for (int i = 0; i < this->skillenergylevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(74, this->skillenergylevel(i), target);
  }

  // optional int32 PerfectInterruptDuration = 75;
  if (has_perfectinterruptduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(75, this->perfectinterruptduration(), target);
  }

  // optional int32 SkillEndTime = 76;
  if (has_skillendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(76, this->skillendtime(), target);
  }

  // optional bool Lockon = 77;
  if (has_lockon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(77, this->lockon(), target);
  }

  // optional bool IsNeedHighligh = 78;
  if (has_isneedhighligh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(78, this->isneedhighligh(), target);
  }

  // optional int32 KeepDyingDuration = 79;
  if (has_keepdyingduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(79, this->keepdyingduration(), target);
  }

  // optional bool InterruptBossSkill = 80;
  if (has_interruptbossskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(80, this->interruptbossskill(), target);
  }

  // optional bool SkipIdleOnEnd = 81;
  if (has_skipidleonend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(81, this->skipidleonend(), target);
  }

  // optional bool RageSkillInterruptable = 82;
  if (has_rageskillinterruptable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(82, this->rageskillinterruptable(), target);
  }

  // repeated int32 ArmySkillInfo = 83;
  for (int i = 0; i < this->armyskillinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(83, this->armyskillinfo(i), target);
  }

  // optional bool IgnoreNoSkill = 84;
  if (has_ignorenoskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(84, this->ignorenoskill(), target);
  }

  // optional int32 RefTargetSummonType = 85;
  if (has_reftargetsummontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(85, this->reftargetsummontype(), target);
  }

  // optional int32 LevelCoolingTimeGrowth = 86;
  if (has_levelcoolingtimegrowth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(86, this->levelcoolingtimegrowth(), target);
  }

  // repeated int32 TargetProfessions = 87;
  for (int i = 0; i < this->targetprofessions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(87, this->targetprofessions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillBaseData)
  return target;
}

int SkillBaseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 ChainSkillMark = 2;
    if (has_chainskillmark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chainskillmark());
    }

    // optional int32 MainType = 3;
    if (has_maintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maintype());
    }

    // optional int32 SubType = 4;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subtype());
    }

    // optional int32 NormalAttackCount = 5;
    if (has_normalattackcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->normalattackcount());
    }

    // optional int32 RefTargetType = 6;
    if (has_reftargettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reftargettype());
    }

    // optional int32 SpeBuffID = 7;
    if (has_spebuffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spebuffid());
    }

    // optional int32 RefTargetNum = 8;
    if (has_reftargetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reftargetnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool IsRealTarget = 9;
    if (has_isrealtarget()) {
      total_size += 1 + 1;
    }

    // optional string SkillAnim = 10;
    if (has_skillanim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skillanim());
    }

    // optional bool IsPlayHitAnim = 11;
    if (has_isplayhitanim()) {
      total_size += 1 + 1;
    }

    // optional int32 CastRange = 12;
    if (has_castrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->castrange());
    }

    // optional int32 needFaceToWhenCast = 13;
    if (has_needfacetowhencast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needfacetowhencast());
    }

    // optional bool IsRecoverFromPause = 19;
    if (has_isrecoverfrompause()) {
      total_size += 2 + 1;
    }

    // optional bool IsFaceTargetDuringCast = 22;
    if (has_isfacetargetduringcast()) {
      total_size += 2 + 1;
    }

    // optional int32 MaxCastCountInOneScene = 23;
    if (has_maxcastcountinonescene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcastcountinonescene());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 MaxCastCountInOneBattle = 24;
    if (has_maxcastcountinonebattle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcastcountinonebattle());
    }

    // optional bool IsLasting = 26;
    if (has_islasting()) {
      total_size += 2 + 1;
    }

    // optional int32 CoolingTime = 27;
    if (has_coolingtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coolingtime());
    }

    // optional int32 IntervalTime = 28;
    if (has_intervaltime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intervaltime());
    }

    // optional int32 NormalAttackChance = 29;
    if (has_normalattackchance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->normalattackchance());
    }

    // optional int32 TriggerBuffID = 30;
    if (has_triggerbuffid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggerbuffid());
    }

    // optional int32 TriggerBuffLayer = 31;
    if (has_triggerbufflayer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggerbufflayer());
    }

    // optional string IconPath = 32;
    if (has_iconpath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iconpath());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 FrontDistance = 36;
    if (has_frontdistance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frontdistance());
    }

    // optional int32 SkillTunnel = 38;
    if (has_skilltunnel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilltunnel());
    }

    // optional string SkillLastEffect = 39;
    if (has_skilllasteffect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skilllasteffect());
    }

    // optional int32 SkillShowTime = 40;
    if (has_skillshowtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillshowtime());
    }

    // optional bool RefTargetIncludeSelf = 42;
    if (has_reftargetincludeself()) {
      total_size += 2 + 1;
    }

    // optional int32 TriggerSkillChance = 43;
    if (has_triggerskillchance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggerskillchance());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool PartofRageSkill = 45;
    if (has_partofrageskill()) {
      total_size += 2 + 1;
    }

    // optional int32 SkillActionLastTime = 46;
    if (has_skillactionlasttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillactionlasttime());
    }

    // optional string MusouTimeLine = 47;
    if (has_musoutimeline()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->musoutimeline());
    }

    // optional int32 SkillPriority = 48;
    if (has_skillpriority()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillpriority());
    }

    // optional string RageSkillSpine = 49;
    if (has_rageskillspine()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rageskillspine());
    }

    // optional string RageSkillEffect = 50;
    if (has_rageskilleffect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rageskilleffect());
    }

    // optional string RageSkillAudio = 51;
    if (has_rageskillaudio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rageskillaudio());
    }

    // optional string DeathAnim = 52;
    if (has_deathanim()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deathanim());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .pb.SkillSpecialData SkillSpecialData = 53;
    if (has_skillspecialdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skillspecialdata());
    }

    // optional bool ShowRageSkillDamage = 54;
    if (has_showrageskilldamage()) {
      total_size += 2 + 1;
    }

    // optional int32 RageBonusAfterKill = 56;
    if (has_ragebonusafterkill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ragebonusafterkill());
    }

    // optional .pb.SkillCastType SkillCastType = 57;
    if (has_skillcasttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skillcasttype());
    }

    // optional .pb.SkillTargetPriority RefPriority = 59;
    if (has_refpriority()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->refpriority());
    }

    // optional int32 SpeBuffIDBack = 60;
    if (has_spebuffidback()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spebuffidback());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional bool AutoRageSkill = 61;
    if (has_autorageskill()) {
      total_size += 2 + 1;
    }

    // optional bool SubRageSmoothly = 62;
    if (has_subragesmoothly()) {
      total_size += 2 + 1;
    }

    // optional int32 SubRageDuration = 63;
    if (has_subrageduration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subrageduration());
    }

    // optional bool LastEffForwardSelf = 64;
    if (has_lasteffforwardself()) {
      total_size += 2 + 1;
    }

    // optional int32 LocalizeSkillId = 65;
    if (has_localizeskillid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->localizeskillid());
    }

    // optional int32 DamageSpecialType = 67;
    if (has_damagespecialtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damagespecialtype());
    }

    // optional bool IsSemiAutoRageSkill = 68;
    if (has_issemiautorageskill()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional int32 SemiAutoSkillTimeToLive = 69;
    if (has_semiautoskilltimetolive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->semiautoskilltimetolive());
    }

    // optional int32 SemiAutoSkillInterval = 70;
    if (has_semiautoskillinterval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->semiautoskillinterval());
    }

    // optional bool IsBlockPriority = 72;
    if (has_isblockpriority()) {
      total_size += 2 + 1;
    }

    // optional bool IgnoreInterruptEffect = 73;
    if (has_ignoreinterrupteffect()) {
      total_size += 2 + 1;
    }

    // optional int32 PerfectInterruptDuration = 75;
    if (has_perfectinterruptduration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->perfectinterruptduration());
    }

    // optional int32 SkillEndTime = 76;
    if (has_skillendtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillendtime());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional bool Lockon = 77;
    if (has_lockon()) {
      total_size += 2 + 1;
    }

    // optional bool IsNeedHighligh = 78;
    if (has_isneedhighligh()) {
      total_size += 2 + 1;
    }

    // optional int32 KeepDyingDuration = 79;
    if (has_keepdyingduration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keepdyingduration());
    }

    // optional bool InterruptBossSkill = 80;
    if (has_interruptbossskill()) {
      total_size += 2 + 1;
    }

    // optional bool SkipIdleOnEnd = 81;
    if (has_skipidleonend()) {
      total_size += 2 + 1;
    }

    // optional bool RageSkillInterruptable = 82;
    if (has_rageskillinterruptable()) {
      total_size += 2 + 1;
    }

    // optional bool IgnoreNoSkill = 84;
    if (has_ignorenoskill()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional int32 RefTargetSummonType = 85;
    if (has_reftargetsummontype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reftargetsummontype());
    }

    // optional int32 LevelCoolingTimeGrowth = 86;
    if (has_levelcoolingtimegrowth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelcoolingtimegrowth());
    }

  }
  // repeated float ScenePos = 37;
  {
    int data_size = 0;
    data_size = 4 * this->scenepos_size();
    total_size += 2 * this->scenepos_size() + data_size;
  }

  // repeated int32 TriggerSkillArr = 41;
  {
    int data_size = 0;
    for (int i = 0; i < this->triggerskillarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->triggerskillarr(i));
    }
    total_size += 2 * this->triggerskillarr_size() + data_size;
  }

  // repeated int32 SkillReplace = 55;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillreplace_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skillreplace(i));
    }
    total_size += 2 * this->skillreplace_size() + data_size;
  }

  // repeated string MusouCameraLookatInfo = 58;
  total_size += 2 * this->musoucameralookatinfo_size();
  for (int i = 0; i < this->musoucameralookatinfo_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->musoucameralookatinfo(i));
  }

  // repeated int32 ScenePosIndex = 66;
  {
    int data_size = 0;
    for (int i = 0; i < this->sceneposindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->sceneposindex(i));
    }
    total_size += 2 * this->sceneposindex_size() + data_size;
  }

  // repeated int32 SemiAutoSkillChain = 71;
  {
    int data_size = 0;
    for (int i = 0; i < this->semiautoskillchain_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->semiautoskillchain(i));
    }
    total_size += 2 * this->semiautoskillchain_size() + data_size;
  }

  // repeated int32 SkillEnergyLevel = 74;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillenergylevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skillenergylevel(i));
    }
    total_size += 2 * this->skillenergylevel_size() + data_size;
  }

  // repeated int32 ArmySkillInfo = 83;
  {
    int data_size = 0;
    for (int i = 0; i < this->armyskillinfo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->armyskillinfo(i));
    }
    total_size += 2 * this->armyskillinfo_size() + data_size;
  }

  // repeated int32 TargetProfessions = 87;
  {
    int data_size = 0;
    for (int i = 0; i < this->targetprofessions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->targetprofessions(i));
    }
    total_size += 2 * this->targetprofessions_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillBaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillBaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillBaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillBaseData::MergeFrom(const SkillBaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  scenepos_.MergeFrom(from.scenepos_);
  triggerskillarr_.MergeFrom(from.triggerskillarr_);
  skillreplace_.MergeFrom(from.skillreplace_);
  musoucameralookatinfo_.MergeFrom(from.musoucameralookatinfo_);
  sceneposindex_.MergeFrom(from.sceneposindex_);
  semiautoskillchain_.MergeFrom(from.semiautoskillchain_);
  skillenergylevel_.MergeFrom(from.skillenergylevel_);
  armyskillinfo_.MergeFrom(from.armyskillinfo_);
  targetprofessions_.MergeFrom(from.targetprofessions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_chainskillmark()) {
      set_chainskillmark(from.chainskillmark());
    }
    if (from.has_maintype()) {
      set_maintype(from.maintype());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_normalattackcount()) {
      set_normalattackcount(from.normalattackcount());
    }
    if (from.has_reftargettype()) {
      set_reftargettype(from.reftargettype());
    }
    if (from.has_spebuffid()) {
      set_spebuffid(from.spebuffid());
    }
    if (from.has_reftargetnum()) {
      set_reftargetnum(from.reftargetnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isrealtarget()) {
      set_isrealtarget(from.isrealtarget());
    }
    if (from.has_skillanim()) {
      set_skillanim(from.skillanim());
    }
    if (from.has_isplayhitanim()) {
      set_isplayhitanim(from.isplayhitanim());
    }
    if (from.has_castrange()) {
      set_castrange(from.castrange());
    }
    if (from.has_needfacetowhencast()) {
      set_needfacetowhencast(from.needfacetowhencast());
    }
    if (from.has_isrecoverfrompause()) {
      set_isrecoverfrompause(from.isrecoverfrompause());
    }
    if (from.has_isfacetargetduringcast()) {
      set_isfacetargetduringcast(from.isfacetargetduringcast());
    }
    if (from.has_maxcastcountinonescene()) {
      set_maxcastcountinonescene(from.maxcastcountinonescene());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_maxcastcountinonebattle()) {
      set_maxcastcountinonebattle(from.maxcastcountinonebattle());
    }
    if (from.has_islasting()) {
      set_islasting(from.islasting());
    }
    if (from.has_coolingtime()) {
      set_coolingtime(from.coolingtime());
    }
    if (from.has_intervaltime()) {
      set_intervaltime(from.intervaltime());
    }
    if (from.has_normalattackchance()) {
      set_normalattackchance(from.normalattackchance());
    }
    if (from.has_triggerbuffid()) {
      set_triggerbuffid(from.triggerbuffid());
    }
    if (from.has_triggerbufflayer()) {
      set_triggerbufflayer(from.triggerbufflayer());
    }
    if (from.has_iconpath()) {
      set_iconpath(from.iconpath());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_frontdistance()) {
      set_frontdistance(from.frontdistance());
    }
    if (from.has_skilltunnel()) {
      set_skilltunnel(from.skilltunnel());
    }
    if (from.has_skilllasteffect()) {
      set_skilllasteffect(from.skilllasteffect());
    }
    if (from.has_skillshowtime()) {
      set_skillshowtime(from.skillshowtime());
    }
    if (from.has_reftargetincludeself()) {
      set_reftargetincludeself(from.reftargetincludeself());
    }
    if (from.has_triggerskillchance()) {
      set_triggerskillchance(from.triggerskillchance());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_partofrageskill()) {
      set_partofrageskill(from.partofrageskill());
    }
    if (from.has_skillactionlasttime()) {
      set_skillactionlasttime(from.skillactionlasttime());
    }
    if (from.has_musoutimeline()) {
      set_musoutimeline(from.musoutimeline());
    }
    if (from.has_skillpriority()) {
      set_skillpriority(from.skillpriority());
    }
    if (from.has_rageskillspine()) {
      set_rageskillspine(from.rageskillspine());
    }
    if (from.has_rageskilleffect()) {
      set_rageskilleffect(from.rageskilleffect());
    }
    if (from.has_rageskillaudio()) {
      set_rageskillaudio(from.rageskillaudio());
    }
    if (from.has_deathanim()) {
      set_deathanim(from.deathanim());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_skillspecialdata()) {
      mutable_skillspecialdata()->::pb::SkillSpecialData::MergeFrom(from.skillspecialdata());
    }
    if (from.has_showrageskilldamage()) {
      set_showrageskilldamage(from.showrageskilldamage());
    }
    if (from.has_ragebonusafterkill()) {
      set_ragebonusafterkill(from.ragebonusafterkill());
    }
    if (from.has_skillcasttype()) {
      mutable_skillcasttype()->::pb::SkillCastType::MergeFrom(from.skillcasttype());
    }
    if (from.has_refpriority()) {
      mutable_refpriority()->::pb::SkillTargetPriority::MergeFrom(from.refpriority());
    }
    if (from.has_spebuffidback()) {
      set_spebuffidback(from.spebuffidback());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_autorageskill()) {
      set_autorageskill(from.autorageskill());
    }
    if (from.has_subragesmoothly()) {
      set_subragesmoothly(from.subragesmoothly());
    }
    if (from.has_subrageduration()) {
      set_subrageduration(from.subrageduration());
    }
    if (from.has_lasteffforwardself()) {
      set_lasteffforwardself(from.lasteffforwardself());
    }
    if (from.has_localizeskillid()) {
      set_localizeskillid(from.localizeskillid());
    }
    if (from.has_damagespecialtype()) {
      set_damagespecialtype(from.damagespecialtype());
    }
    if (from.has_issemiautorageskill()) {
      set_issemiautorageskill(from.issemiautorageskill());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_semiautoskilltimetolive()) {
      set_semiautoskilltimetolive(from.semiautoskilltimetolive());
    }
    if (from.has_semiautoskillinterval()) {
      set_semiautoskillinterval(from.semiautoskillinterval());
    }
    if (from.has_isblockpriority()) {
      set_isblockpriority(from.isblockpriority());
    }
    if (from.has_ignoreinterrupteffect()) {
      set_ignoreinterrupteffect(from.ignoreinterrupteffect());
    }
    if (from.has_perfectinterruptduration()) {
      set_perfectinterruptduration(from.perfectinterruptduration());
    }
    if (from.has_skillendtime()) {
      set_skillendtime(from.skillendtime());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_lockon()) {
      set_lockon(from.lockon());
    }
    if (from.has_isneedhighligh()) {
      set_isneedhighligh(from.isneedhighligh());
    }
    if (from.has_keepdyingduration()) {
      set_keepdyingduration(from.keepdyingduration());
    }
    if (from.has_interruptbossskill()) {
      set_interruptbossskill(from.interruptbossskill());
    }
    if (from.has_skipidleonend()) {
      set_skipidleonend(from.skipidleonend());
    }
    if (from.has_rageskillinterruptable()) {
      set_rageskillinterruptable(from.rageskillinterruptable());
    }
    if (from.has_ignorenoskill()) {
      set_ignorenoskill(from.ignorenoskill());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_reftargetsummontype()) {
      set_reftargetsummontype(from.reftargetsummontype());
    }
    if (from.has_levelcoolingtimegrowth()) {
      set_levelcoolingtimegrowth(from.levelcoolingtimegrowth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillBaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillBaseData::CopyFrom(const SkillBaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillBaseData::IsInitialized() const {

  return true;
}

void SkillBaseData::Swap(SkillBaseData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(chainskillmark_, other->chainskillmark_);
    std::swap(maintype_, other->maintype_);
    std::swap(subtype_, other->subtype_);
    std::swap(normalattackcount_, other->normalattackcount_);
    std::swap(reftargettype_, other->reftargettype_);
    std::swap(spebuffid_, other->spebuffid_);
    std::swap(reftargetnum_, other->reftargetnum_);
    std::swap(isrealtarget_, other->isrealtarget_);
    std::swap(skillanim_, other->skillanim_);
    std::swap(isplayhitanim_, other->isplayhitanim_);
    std::swap(castrange_, other->castrange_);
    std::swap(needfacetowhencast_, other->needfacetowhencast_);
    std::swap(isrecoverfrompause_, other->isrecoverfrompause_);
    std::swap(isfacetargetduringcast_, other->isfacetargetduringcast_);
    std::swap(maxcastcountinonescene_, other->maxcastcountinonescene_);
    std::swap(maxcastcountinonebattle_, other->maxcastcountinonebattle_);
    std::swap(islasting_, other->islasting_);
    std::swap(coolingtime_, other->coolingtime_);
    std::swap(intervaltime_, other->intervaltime_);
    std::swap(normalattackchance_, other->normalattackchance_);
    std::swap(triggerbuffid_, other->triggerbuffid_);
    std::swap(triggerbufflayer_, other->triggerbufflayer_);
    std::swap(iconpath_, other->iconpath_);
    std::swap(frontdistance_, other->frontdistance_);
    scenepos_.Swap(&other->scenepos_);
    std::swap(skilltunnel_, other->skilltunnel_);
    std::swap(skilllasteffect_, other->skilllasteffect_);
    std::swap(skillshowtime_, other->skillshowtime_);
    triggerskillarr_.Swap(&other->triggerskillarr_);
    std::swap(reftargetincludeself_, other->reftargetincludeself_);
    std::swap(triggerskillchance_, other->triggerskillchance_);
    std::swap(partofrageskill_, other->partofrageskill_);
    std::swap(skillactionlasttime_, other->skillactionlasttime_);
    std::swap(musoutimeline_, other->musoutimeline_);
    std::swap(skillpriority_, other->skillpriority_);
    std::swap(rageskillspine_, other->rageskillspine_);
    std::swap(rageskilleffect_, other->rageskilleffect_);
    std::swap(rageskillaudio_, other->rageskillaudio_);
    std::swap(deathanim_, other->deathanim_);
    std::swap(skillspecialdata_, other->skillspecialdata_);
    std::swap(showrageskilldamage_, other->showrageskilldamage_);
    skillreplace_.Swap(&other->skillreplace_);
    std::swap(ragebonusafterkill_, other->ragebonusafterkill_);
    std::swap(skillcasttype_, other->skillcasttype_);
    musoucameralookatinfo_.Swap(&other->musoucameralookatinfo_);
    std::swap(refpriority_, other->refpriority_);
    std::swap(spebuffidback_, other->spebuffidback_);
    std::swap(autorageskill_, other->autorageskill_);
    std::swap(subragesmoothly_, other->subragesmoothly_);
    std::swap(subrageduration_, other->subrageduration_);
    std::swap(lasteffforwardself_, other->lasteffforwardself_);
    std::swap(localizeskillid_, other->localizeskillid_);
    sceneposindex_.Swap(&other->sceneposindex_);
    std::swap(damagespecialtype_, other->damagespecialtype_);
    std::swap(issemiautorageskill_, other->issemiautorageskill_);
    std::swap(semiautoskilltimetolive_, other->semiautoskilltimetolive_);
    std::swap(semiautoskillinterval_, other->semiautoskillinterval_);
    semiautoskillchain_.Swap(&other->semiautoskillchain_);
    std::swap(isblockpriority_, other->isblockpriority_);
    std::swap(ignoreinterrupteffect_, other->ignoreinterrupteffect_);
    skillenergylevel_.Swap(&other->skillenergylevel_);
    std::swap(perfectinterruptduration_, other->perfectinterruptduration_);
    std::swap(skillendtime_, other->skillendtime_);
    std::swap(lockon_, other->lockon_);
    std::swap(isneedhighligh_, other->isneedhighligh_);
    std::swap(keepdyingduration_, other->keepdyingduration_);
    std::swap(interruptbossskill_, other->interruptbossskill_);
    std::swap(skipidleonend_, other->skipidleonend_);
    std::swap(rageskillinterruptable_, other->rageskillinterruptable_);
    armyskillinfo_.Swap(&other->armyskillinfo_);
    std::swap(ignorenoskill_, other->ignorenoskill_);
    std::swap(reftargetsummontype_, other->reftargetsummontype_);
    std::swap(levelcoolingtimegrowth_, other->levelcoolingtimegrowth_);
    targetprofessions_.Swap(&other->targetprofessions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillBaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillBaseData_descriptor_;
  metadata.reflection = SkillBaseData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillSpecialData::kRageSkillCameraUpFieldNumber;
const int SkillSpecialData::kRageSkillCameraUpSpeedTimeFieldNumber;
const int SkillSpecialData::kRageSkillCameraDownFieldNumber;
const int SkillSpecialData::kRageSkillCameraDownSpeedTimeFieldNumber;
const int SkillSpecialData::kRageSkillCameraRecoverSpeedTimeFieldNumber;
const int SkillSpecialData::kRageSkillSpineFieldNumber;
const int SkillSpecialData::kRageSkillEffectFieldNumber;
const int SkillSpecialData::kRageSkillAudioFieldNumber;
const int SkillSpecialData::kRageSkillSpineAdjustFieldNumber;
const int SkillSpecialData::kShowSkillLabelFieldNumber;
const int SkillSpecialData::kSkillLabelSlotFieldNumber;
const int SkillSpecialData::kSkillLabelIdFieldNumber;
const int SkillSpecialData::kSkillLabelAudioFieldNumber;
const int SkillSpecialData::kNonRageSkillCameraUpParamFieldNumber;
const int SkillSpecialData::kNonRageSkillCameraRecoverParamFieldNumber;
const int SkillSpecialData::kEnemyRageHeaderShowFieldNumber;
const int SkillSpecialData::kEnemyRageSkillSpineAdjustFieldNumber;
const int SkillSpecialData::kHideUnparallelIconFieldNumber;
const int SkillSpecialData::kSuperAngerIconPath1FieldNumber;
const int SkillSpecialData::kSuperAngerIconPath2FieldNumber;
const int SkillSpecialData::kSuperAngerIconPath3FieldNumber;
const int SkillSpecialData::kSuperAngerSkillNamePathFieldNumber;
const int SkillSpecialData::kSuperAngerAudioFieldNumber;
const int SkillSpecialData::kSuperAngerHeroArrFieldNumber;
const int SkillSpecialData::kGroundMeshDurationFieldNumber;
const int SkillSpecialData::kNeedShowGroundMeshFieldNumber;
const int SkillSpecialData::kSlowStartTimeFieldNumber;
const int SkillSpecialData::kSlowDurationFieldNumber;
const int SkillSpecialData::kSlowBuffIdFieldNumber;
const int SkillSpecialData::kGroundMeshAssetPathFieldNumber;
const int SkillSpecialData::kSlowEndTimeFieldNumber;
const int SkillSpecialData::kGroundAudioEventsFieldNumber;
const int SkillSpecialData::kEffectOnDisappearFieldNumber;
const int SkillSpecialData::kActiveTextShiftFieldNumber;
const int SkillSpecialData::kTextShiftSkillArrFieldNumber;
const int SkillSpecialData::kActiveHideWhenBornFieldNumber;
const int SkillSpecialData::kAwakenDataPath1FieldNumber;
const int SkillSpecialData::kBJRageSkillSpineFieldNumber;
const int SkillSpecialData::kBJRageSkillSpineAdjustFieldNumber;
const int SkillSpecialData::kBJEnemyRageSkillSpineAdjustFieldNumber;
#endif  // !_MSC_VER

SkillSpecialData::SkillSpecialData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillSpecialData)
}

void SkillSpecialData::InitAsDefaultInstance() {
}

SkillSpecialData::SkillSpecialData(const SkillSpecialData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillSpecialData)
}

void SkillSpecialData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rageskillspine_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rageskilleffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rageskillaudio_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  showskilllabel_ = false;
  skilllabelslot_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skilllabelid_ = 0;
  skilllabelaudio_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enemyrageheadershow_ = false;
  hideunparallelicon_ = false;
  superangericonpath1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  superangericonpath2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  superangericonpath3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  superangerskillnamepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  superangeraudio_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  superangerheroarr_ = 0;
  groundmeshduration_ = 0;
  needshowgroundmesh_ = false;
  slowstarttime_ = 0;
  slowduration_ = 0;
  slowbuffid_ = 0;
  groundmeshassetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slowendtime_ = 0;
  effectondisappear_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activetextshift_ = false;
  activehidewhenborn_ = false;
  awakendatapath1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bjrageskillspine_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillSpecialData::~SkillSpecialData() {
  // @@protoc_insertion_point(destructor:pb.SkillSpecialData)
  SharedDtor();
}

void SkillSpecialData::SharedDtor() {
  if (rageskillspine_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rageskillspine_;
  }
  if (rageskilleffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rageskilleffect_;
  }
  if (rageskillaudio_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rageskillaudio_;
  }
  if (skilllabelslot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skilllabelslot_;
  }
  if (skilllabelaudio_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skilllabelaudio_;
  }
  if (superangericonpath1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete superangericonpath1_;
  }
  if (superangericonpath2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete superangericonpath2_;
  }
  if (superangericonpath3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete superangericonpath3_;
  }
  if (superangerskillnamepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete superangerskillnamepath_;
  }
  if (superangeraudio_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete superangeraudio_;
  }
  if (groundmeshassetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groundmeshassetpath_;
  }
  if (effectondisappear_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete effectondisappear_;
  }
  if (awakendatapath1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete awakendatapath1_;
  }
  if (bjrageskillspine_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bjrageskillspine_;
  }
  if (this != default_instance_) {
  }
}

void SkillSpecialData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillSpecialData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillSpecialData_descriptor_;
}

const SkillSpecialData& SkillSpecialData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillBaseData_2eproto();
  return *default_instance_;
}

SkillSpecialData* SkillSpecialData::default_instance_ = NULL;

SkillSpecialData* SkillSpecialData::New() const {
  return new SkillSpecialData;
}

void SkillSpecialData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillSpecialData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 224) {
    if (has_rageskillspine()) {
      if (rageskillspine_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rageskillspine_->clear();
      }
    }
    if (has_rageskilleffect()) {
      if (rageskilleffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rageskilleffect_->clear();
      }
    }
    if (has_rageskillaudio()) {
      if (rageskillaudio_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rageskillaudio_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 40448) {
    ZR_(skilllabelid_, enemyrageheadershow_);
    if (has_skilllabelslot()) {
      if (skilllabelslot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        skilllabelslot_->clear();
      }
    }
    if (has_skilllabelaudio()) {
      if (skilllabelaudio_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        skilllabelaudio_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16646144) {
    hideunparallelicon_ = false;
    if (has_superangericonpath1()) {
      if (superangericonpath1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        superangericonpath1_->clear();
      }
    }
    if (has_superangericonpath2()) {
      if (superangericonpath2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        superangericonpath2_->clear();
      }
    }
    if (has_superangericonpath3()) {
      if (superangericonpath3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        superangericonpath3_->clear();
      }
    }
    if (has_superangerskillnamepath()) {
      if (superangerskillnamepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        superangerskillnamepath_->clear();
      }
    }
    if (has_superangeraudio()) {
      if (superangeraudio_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        superangeraudio_->clear();
      }
    }
    superangerheroarr_ = 0;
  }
  if (_has_bits_[24 / 32] & 2130706432) {
    ZR_(groundmeshduration_, slowduration_);
    ZR_(slowbuffid_, slowendtime_);
    needshowgroundmesh_ = false;
    if (has_groundmeshassetpath()) {
      if (groundmeshassetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        groundmeshassetpath_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & 59) {
    ZR_(activetextshift_, activehidewhenborn_);
    if (has_effectondisappear()) {
      if (effectondisappear_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        effectondisappear_->clear();
      }
    }
    if (has_awakendatapath1()) {
      if (awakendatapath1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        awakendatapath1_->clear();
      }
    }
    if (has_bjrageskillspine()) {
      if (bjrageskillspine_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bjrageskillspine_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rageskillcameraup_.Clear();
  rageskillcameraupspeedtime_.Clear();
  rageskillcameradown_.Clear();
  rageskillcameradownspeedtime_.Clear();
  rageskillcamerarecoverspeedtime_.Clear();
  rageskillspineadjust_.Clear();
  nonrageskillcameraupparam_.Clear();
  nonrageskillcamerarecoverparam_.Clear();
  enemyrageskillspineadjust_.Clear();
  groundaudioevents_.Clear();
  textshiftskillarr_.Clear();
  bjrageskillspineadjust_.Clear();
  bjenemyrageskillspineadjust_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillSpecialData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillSpecialData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 RageSkillCameraUp = 1;
      case 1: {
        if (tag == 8) {
         parse_RageSkillCameraUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_rageskillcameraup())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rageskillcameraup())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_RageSkillCameraUp;
        if (input->ExpectTag(16)) goto parse_RageSkillCameraUpSpeedTime;
        break;
      }

      // repeated int32 RageSkillCameraUpSpeedTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RageSkillCameraUpSpeedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_rageskillcameraupspeedtime())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rageskillcameraupspeedtime())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RageSkillCameraUpSpeedTime;
        if (input->ExpectTag(24)) goto parse_RageSkillCameraDown;
        break;
      }

      // repeated int32 RageSkillCameraDown = 3;
      case 3: {
        if (tag == 24) {
         parse_RageSkillCameraDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_rageskillcameradown())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rageskillcameradown())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RageSkillCameraDown;
        if (input->ExpectTag(32)) goto parse_RageSkillCameraDownSpeedTime;
        break;
      }

      // repeated int32 RageSkillCameraDownSpeedTime = 4;
      case 4: {
        if (tag == 32) {
         parse_RageSkillCameraDownSpeedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_rageskillcameradownspeedtime())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rageskillcameradownspeedtime())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RageSkillCameraDownSpeedTime;
        if (input->ExpectTag(40)) goto parse_RageSkillCameraRecoverSpeedTime;
        break;
      }

      // repeated int32 RageSkillCameraRecoverSpeedTime = 5;
      case 5: {
        if (tag == 40) {
         parse_RageSkillCameraRecoverSpeedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_rageskillcamerarecoverspeedtime())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rageskillcamerarecoverspeedtime())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_RageSkillCameraRecoverSpeedTime;
        if (input->ExpectTag(50)) goto parse_RageSkillSpine;
        break;
      }

      // optional string RageSkillSpine = 6;
      case 6: {
        if (tag == 50) {
         parse_RageSkillSpine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rageskillspine()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rageskillspine().data(), this->rageskillspine().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rageskillspine");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_RageSkillEffect;
        break;
      }

      // optional string RageSkillEffect = 7;
      case 7: {
        if (tag == 58) {
         parse_RageSkillEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rageskilleffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rageskilleffect().data(), this->rageskilleffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rageskilleffect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_RageSkillAudio;
        break;
      }

      // optional string RageSkillAudio = 8;
      case 8: {
        if (tag == 66) {
         parse_RageSkillAudio:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rageskillaudio()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rageskillaudio().data(), this->rageskillaudio().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rageskillaudio");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_RageSkillSpineAdjust;
        break;
      }

      // repeated float RageSkillSpineAdjust = 9;
      case 9: {
        if (tag == 77) {
         parse_RageSkillSpineAdjust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77, input, this->mutable_rageskillspineadjust())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_rageskillspineadjust())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_RageSkillSpineAdjust;
        if (input->ExpectTag(80)) goto parse_ShowSkillLabel;
        break;
      }

      // optional bool ShowSkillLabel = 10;
      case 10: {
        if (tag == 80) {
         parse_ShowSkillLabel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showskilllabel_)));
          set_has_showskilllabel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_SkillLabelSlot;
        break;
      }

      // optional string SkillLabelSlot = 11;
      case 11: {
        if (tag == 90) {
         parse_SkillLabelSlot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skilllabelslot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->skilllabelslot().data(), this->skilllabelslot().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "skilllabelslot");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_SkillLabelId;
        break;
      }

      // optional int32 SkillLabelId = 12;
      case 12: {
        if (tag == 96) {
         parse_SkillLabelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilllabelid_)));
          set_has_skilllabelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_SkillLabelAudio;
        break;
      }

      // optional string SkillLabelAudio = 13;
      case 13: {
        if (tag == 106) {
         parse_SkillLabelAudio:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skilllabelaudio()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->skilllabelaudio().data(), this->skilllabelaudio().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "skilllabelaudio");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_NonRageSkillCameraUpParam;
        break;
      }

      // repeated int32 NonRageSkillCameraUpParam = 14;
      case 14: {
        if (tag == 112) {
         parse_NonRageSkillCameraUpParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_nonrageskillcameraupparam())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nonrageskillcameraupparam())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_NonRageSkillCameraUpParam;
        if (input->ExpectTag(120)) goto parse_NonRageSkillCameraRecoverParam;
        break;
      }

      // repeated int32 NonRageSkillCameraRecoverParam = 15;
      case 15: {
        if (tag == 120) {
         parse_NonRageSkillCameraRecoverParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_nonrageskillcamerarecoverparam())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nonrageskillcamerarecoverparam())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_NonRageSkillCameraRecoverParam;
        if (input->ExpectTag(128)) goto parse_EnemyRageHeaderShow;
        break;
      }

      // optional bool EnemyRageHeaderShow = 16;
      case 16: {
        if (tag == 128) {
         parse_EnemyRageHeaderShow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enemyrageheadershow_)));
          set_has_enemyrageheadershow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_EnemyRageSkillSpineAdjust;
        break;
      }

      // repeated float EnemyRageSkillSpineAdjust = 17;
      case 17: {
        if (tag == 141) {
         parse_EnemyRageSkillSpineAdjust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 141, input, this->mutable_enemyrageskillspineadjust())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_enemyrageskillspineadjust())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_EnemyRageSkillSpineAdjust;
        if (input->ExpectTag(144)) goto parse_HideUnparallelIcon;
        break;
      }

      // optional bool HideUnparallelIcon = 18;
      case 18: {
        if (tag == 144) {
         parse_HideUnparallelIcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hideunparallelicon_)));
          set_has_hideunparallelicon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_SuperAngerIconPath1;
        break;
      }

      // optional string SuperAngerIconPath1 = 19;
      case 19: {
        if (tag == 154) {
         parse_SuperAngerIconPath1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_superangericonpath1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->superangericonpath1().data(), this->superangericonpath1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "superangericonpath1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_SuperAngerIconPath2;
        break;
      }

      // optional string SuperAngerIconPath2 = 20;
      case 20: {
        if (tag == 162) {
         parse_SuperAngerIconPath2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_superangericonpath2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->superangericonpath2().data(), this->superangericonpath2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "superangericonpath2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_SuperAngerIconPath3;
        break;
      }

      // optional string SuperAngerIconPath3 = 21;
      case 21: {
        if (tag == 170) {
         parse_SuperAngerIconPath3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_superangericonpath3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->superangericonpath3().data(), this->superangericonpath3().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "superangericonpath3");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_SuperAngerSkillNamePath;
        break;
      }

      // optional string SuperAngerSkillNamePath = 22;
      case 22: {
        if (tag == 178) {
         parse_SuperAngerSkillNamePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_superangerskillnamepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->superangerskillnamepath().data(), this->superangerskillnamepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "superangerskillnamepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_SuperAngerAudio;
        break;
      }

      // optional string SuperAngerAudio = 23;
      case 23: {
        if (tag == 186) {
         parse_SuperAngerAudio:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_superangeraudio()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->superangeraudio().data(), this->superangeraudio().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "superangeraudio");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_SuperAngerHeroArr;
        break;
      }

      // optional int32 SuperAngerHeroArr = 24;
      case 24: {
        if (tag == 192) {
         parse_SuperAngerHeroArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &superangerheroarr_)));
          set_has_superangerheroarr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_GroundMeshDuration;
        break;
      }

      // optional int32 GroundMeshDuration = 25;
      case 25: {
        if (tag == 200) {
         parse_GroundMeshDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groundmeshduration_)));
          set_has_groundmeshduration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_NeedShowGroundMesh;
        break;
      }

      // optional bool NeedShowGroundMesh = 26;
      case 26: {
        if (tag == 208) {
         parse_NeedShowGroundMesh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needshowgroundmesh_)));
          set_has_needshowgroundmesh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_SlowStartTime;
        break;
      }

      // optional int32 SlowStartTime = 28;
      case 28: {
        if (tag == 224) {
         parse_SlowStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slowstarttime_)));
          set_has_slowstarttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_SlowDuration;
        break;
      }

      // optional int32 SlowDuration = 29;
      case 29: {
        if (tag == 232) {
         parse_SlowDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slowduration_)));
          set_has_slowduration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_SlowBuffId;
        break;
      }

      // optional int32 SlowBuffId = 30;
      case 30: {
        if (tag == 240) {
         parse_SlowBuffId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slowbuffid_)));
          set_has_slowbuffid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_GroundMeshAssetPath;
        break;
      }

      // optional string GroundMeshAssetPath = 31;
      case 31: {
        if (tag == 250) {
         parse_GroundMeshAssetPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groundmeshassetpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groundmeshassetpath().data(), this->groundmeshassetpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "groundmeshassetpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_SlowEndTime;
        break;
      }

      // optional int32 SlowEndTime = 32;
      case 32: {
        if (tag == 256) {
         parse_SlowEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slowendtime_)));
          set_has_slowendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_GroundAudioEvents;
        break;
      }

      // repeated string GroundAudioEvents = 33;
      case 33: {
        if (tag == 266) {
         parse_GroundAudioEvents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_groundaudioevents()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groundaudioevents(this->groundaudioevents_size() - 1).data(),
            this->groundaudioevents(this->groundaudioevents_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "groundaudioevents");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_GroundAudioEvents;
        if (input->ExpectTag(274)) goto parse_EffectOnDisappear;
        break;
      }

      // optional string EffectOnDisappear = 34;
      case 34: {
        if (tag == 274) {
         parse_EffectOnDisappear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effectondisappear()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->effectondisappear().data(), this->effectondisappear().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "effectondisappear");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_ActiveTextShift;
        break;
      }

      // optional bool ActiveTextShift = 35;
      case 35: {
        if (tag == 280) {
         parse_ActiveTextShift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activetextshift_)));
          set_has_activetextshift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_TextShiftSkillArr;
        break;
      }

      // repeated int32 TextShiftSkillArr = 36;
      case 36: {
        if (tag == 288) {
         parse_TextShiftSkillArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 288, input, this->mutable_textshiftskillarr())));
        } else if (tag == 290) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_textshiftskillarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_TextShiftSkillArr;
        if (input->ExpectTag(296)) goto parse_ActiveHideWhenBorn;
        break;
      }

      // optional bool ActiveHideWhenBorn = 37;
      case 37: {
        if (tag == 296) {
         parse_ActiveHideWhenBorn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activehidewhenborn_)));
          set_has_activehidewhenborn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_AwakenDataPath1;
        break;
      }

      // optional string AwakenDataPath1 = 38;
      case 38: {
        if (tag == 306) {
         parse_AwakenDataPath1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_awakendatapath1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->awakendatapath1().data(), this->awakendatapath1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "awakendatapath1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_BJRageSkillSpine;
        break;
      }

      // optional string BJRageSkillSpine = 39;
      case 39: {
        if (tag == 314) {
         parse_BJRageSkillSpine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bjrageskillspine()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bjrageskillspine().data(), this->bjrageskillspine().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bjrageskillspine");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(325)) goto parse_BJRageSkillSpineAdjust;
        break;
      }

      // repeated float BJRageSkillSpineAdjust = 40;
      case 40: {
        if (tag == 325) {
         parse_BJRageSkillSpineAdjust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 325, input, this->mutable_bjrageskillspineadjust())));
        } else if (tag == 322) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_bjrageskillspineadjust())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(325)) goto parse_BJRageSkillSpineAdjust;
        if (input->ExpectTag(333)) goto parse_BJEnemyRageSkillSpineAdjust;
        break;
      }

      // repeated float BJEnemyRageSkillSpineAdjust = 41;
      case 41: {
        if (tag == 333) {
         parse_BJEnemyRageSkillSpineAdjust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 333, input, this->mutable_bjenemyrageskillspineadjust())));
        } else if (tag == 330) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_bjenemyrageskillspineadjust())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(333)) goto parse_BJEnemyRageSkillSpineAdjust;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillSpecialData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillSpecialData)
  return false;
#undef DO_
}

void SkillSpecialData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillSpecialData)
  // repeated int32 RageSkillCameraUp = 1;
  for (int i = 0; i < this->rageskillcameraup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->rageskillcameraup(i), output);
  }

  // repeated int32 RageSkillCameraUpSpeedTime = 2;
  for (int i = 0; i < this->rageskillcameraupspeedtime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->rageskillcameraupspeedtime(i), output);
  }

  // repeated int32 RageSkillCameraDown = 3;
  for (int i = 0; i < this->rageskillcameradown_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->rageskillcameradown(i), output);
  }

  // repeated int32 RageSkillCameraDownSpeedTime = 4;
  for (int i = 0; i < this->rageskillcameradownspeedtime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->rageskillcameradownspeedtime(i), output);
  }

  // repeated int32 RageSkillCameraRecoverSpeedTime = 5;
  for (int i = 0; i < this->rageskillcamerarecoverspeedtime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->rageskillcamerarecoverspeedtime(i), output);
  }

  // optional string RageSkillSpine = 6;
  if (has_rageskillspine()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rageskillspine().data(), this->rageskillspine().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rageskillspine");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->rageskillspine(), output);
  }

  // optional string RageSkillEffect = 7;
  if (has_rageskilleffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rageskilleffect().data(), this->rageskilleffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rageskilleffect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->rageskilleffect(), output);
  }

  // optional string RageSkillAudio = 8;
  if (has_rageskillaudio()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rageskillaudio().data(), this->rageskillaudio().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rageskillaudio");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->rageskillaudio(), output);
  }

  // repeated float RageSkillSpineAdjust = 9;
  for (int i = 0; i < this->rageskillspineadjust_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      9, this->rageskillspineadjust(i), output);
  }

  // optional bool ShowSkillLabel = 10;
  if (has_showskilllabel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->showskilllabel(), output);
  }

  // optional string SkillLabelSlot = 11;
  if (has_skilllabelslot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skilllabelslot().data(), this->skilllabelslot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skilllabelslot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->skilllabelslot(), output);
  }

  // optional int32 SkillLabelId = 12;
  if (has_skilllabelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->skilllabelid(), output);
  }

  // optional string SkillLabelAudio = 13;
  if (has_skilllabelaudio()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skilllabelaudio().data(), this->skilllabelaudio().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skilllabelaudio");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->skilllabelaudio(), output);
  }

  // repeated int32 NonRageSkillCameraUpParam = 14;
  for (int i = 0; i < this->nonrageskillcameraupparam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->nonrageskillcameraupparam(i), output);
  }

  // repeated int32 NonRageSkillCameraRecoverParam = 15;
  for (int i = 0; i < this->nonrageskillcamerarecoverparam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->nonrageskillcamerarecoverparam(i), output);
  }

  // optional bool EnemyRageHeaderShow = 16;
  if (has_enemyrageheadershow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->enemyrageheadershow(), output);
  }

  // repeated float EnemyRageSkillSpineAdjust = 17;
  for (int i = 0; i < this->enemyrageskillspineadjust_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      17, this->enemyrageskillspineadjust(i), output);
  }

  // optional bool HideUnparallelIcon = 18;
  if (has_hideunparallelicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->hideunparallelicon(), output);
  }

  // optional string SuperAngerIconPath1 = 19;
  if (has_superangericonpath1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->superangericonpath1().data(), this->superangericonpath1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "superangericonpath1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->superangericonpath1(), output);
  }

  // optional string SuperAngerIconPath2 = 20;
  if (has_superangericonpath2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->superangericonpath2().data(), this->superangericonpath2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "superangericonpath2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->superangericonpath2(), output);
  }

  // optional string SuperAngerIconPath3 = 21;
  if (has_superangericonpath3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->superangericonpath3().data(), this->superangericonpath3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "superangericonpath3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->superangericonpath3(), output);
  }

  // optional string SuperAngerSkillNamePath = 22;
  if (has_superangerskillnamepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->superangerskillnamepath().data(), this->superangerskillnamepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "superangerskillnamepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->superangerskillnamepath(), output);
  }

  // optional string SuperAngerAudio = 23;
  if (has_superangeraudio()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->superangeraudio().data(), this->superangeraudio().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "superangeraudio");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->superangeraudio(), output);
  }

  // optional int32 SuperAngerHeroArr = 24;
  if (has_superangerheroarr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->superangerheroarr(), output);
  }

  // optional int32 GroundMeshDuration = 25;
  if (has_groundmeshduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->groundmeshduration(), output);
  }

  // optional bool NeedShowGroundMesh = 26;
  if (has_needshowgroundmesh()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->needshowgroundmesh(), output);
  }

  // optional int32 SlowStartTime = 28;
  if (has_slowstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->slowstarttime(), output);
  }

  // optional int32 SlowDuration = 29;
  if (has_slowduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->slowduration(), output);
  }

  // optional int32 SlowBuffId = 30;
  if (has_slowbuffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->slowbuffid(), output);
  }

  // optional string GroundMeshAssetPath = 31;
  if (has_groundmeshassetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groundmeshassetpath().data(), this->groundmeshassetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groundmeshassetpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->groundmeshassetpath(), output);
  }

  // optional int32 SlowEndTime = 32;
  if (has_slowendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->slowendtime(), output);
  }

  // repeated string GroundAudioEvents = 33;
  for (int i = 0; i < this->groundaudioevents_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->groundaudioevents(i).data(), this->groundaudioevents(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "groundaudioevents");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->groundaudioevents(i), output);
  }

  // optional string EffectOnDisappear = 34;
  if (has_effectondisappear()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effectondisappear().data(), this->effectondisappear().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "effectondisappear");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->effectondisappear(), output);
  }

  // optional bool ActiveTextShift = 35;
  if (has_activetextshift()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->activetextshift(), output);
  }

  // repeated int32 TextShiftSkillArr = 36;
  for (int i = 0; i < this->textshiftskillarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      36, this->textshiftskillarr(i), output);
  }

  // optional bool ActiveHideWhenBorn = 37;
  if (has_activehidewhenborn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->activehidewhenborn(), output);
  }

  // optional string AwakenDataPath1 = 38;
  if (has_awakendatapath1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->awakendatapath1().data(), this->awakendatapath1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "awakendatapath1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->awakendatapath1(), output);
  }

  // optional string BJRageSkillSpine = 39;
  if (has_bjrageskillspine()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bjrageskillspine().data(), this->bjrageskillspine().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bjrageskillspine");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      39, this->bjrageskillspine(), output);
  }

  // repeated float BJRageSkillSpineAdjust = 40;
  for (int i = 0; i < this->bjrageskillspineadjust_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      40, this->bjrageskillspineadjust(i), output);
  }

  // repeated float BJEnemyRageSkillSpineAdjust = 41;
  for (int i = 0; i < this->bjenemyrageskillspineadjust_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      41, this->bjenemyrageskillspineadjust(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillSpecialData)
}

::google::protobuf::uint8* SkillSpecialData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillSpecialData)
  // repeated int32 RageSkillCameraUp = 1;
  for (int i = 0; i < this->rageskillcameraup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->rageskillcameraup(i), target);
  }

  // repeated int32 RageSkillCameraUpSpeedTime = 2;
  for (int i = 0; i < this->rageskillcameraupspeedtime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->rageskillcameraupspeedtime(i), target);
  }

  // repeated int32 RageSkillCameraDown = 3;
  for (int i = 0; i < this->rageskillcameradown_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->rageskillcameradown(i), target);
  }

  // repeated int32 RageSkillCameraDownSpeedTime = 4;
  for (int i = 0; i < this->rageskillcameradownspeedtime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->rageskillcameradownspeedtime(i), target);
  }

  // repeated int32 RageSkillCameraRecoverSpeedTime = 5;
  for (int i = 0; i < this->rageskillcamerarecoverspeedtime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->rageskillcamerarecoverspeedtime(i), target);
  }

  // optional string RageSkillSpine = 6;
  if (has_rageskillspine()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rageskillspine().data(), this->rageskillspine().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rageskillspine");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->rageskillspine(), target);
  }

  // optional string RageSkillEffect = 7;
  if (has_rageskilleffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rageskilleffect().data(), this->rageskilleffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rageskilleffect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->rageskilleffect(), target);
  }

  // optional string RageSkillAudio = 8;
  if (has_rageskillaudio()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rageskillaudio().data(), this->rageskillaudio().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rageskillaudio");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rageskillaudio(), target);
  }

  // repeated float RageSkillSpineAdjust = 9;
  for (int i = 0; i < this->rageskillspineadjust_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(9, this->rageskillspineadjust(i), target);
  }

  // optional bool ShowSkillLabel = 10;
  if (has_showskilllabel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->showskilllabel(), target);
  }

  // optional string SkillLabelSlot = 11;
  if (has_skilllabelslot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skilllabelslot().data(), this->skilllabelslot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skilllabelslot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->skilllabelslot(), target);
  }

  // optional int32 SkillLabelId = 12;
  if (has_skilllabelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->skilllabelid(), target);
  }

  // optional string SkillLabelAudio = 13;
  if (has_skilllabelaudio()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skilllabelaudio().data(), this->skilllabelaudio().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skilllabelaudio");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->skilllabelaudio(), target);
  }

  // repeated int32 NonRageSkillCameraUpParam = 14;
  for (int i = 0; i < this->nonrageskillcameraupparam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->nonrageskillcameraupparam(i), target);
  }

  // repeated int32 NonRageSkillCameraRecoverParam = 15;
  for (int i = 0; i < this->nonrageskillcamerarecoverparam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->nonrageskillcamerarecoverparam(i), target);
  }

  // optional bool EnemyRageHeaderShow = 16;
  if (has_enemyrageheadershow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->enemyrageheadershow(), target);
  }

  // repeated float EnemyRageSkillSpineAdjust = 17;
  for (int i = 0; i < this->enemyrageskillspineadjust_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(17, this->enemyrageskillspineadjust(i), target);
  }

  // optional bool HideUnparallelIcon = 18;
  if (has_hideunparallelicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->hideunparallelicon(), target);
  }

  // optional string SuperAngerIconPath1 = 19;
  if (has_superangericonpath1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->superangericonpath1().data(), this->superangericonpath1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "superangericonpath1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->superangericonpath1(), target);
  }

  // optional string SuperAngerIconPath2 = 20;
  if (has_superangericonpath2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->superangericonpath2().data(), this->superangericonpath2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "superangericonpath2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->superangericonpath2(), target);
  }

  // optional string SuperAngerIconPath3 = 21;
  if (has_superangericonpath3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->superangericonpath3().data(), this->superangericonpath3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "superangericonpath3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->superangericonpath3(), target);
  }

  // optional string SuperAngerSkillNamePath = 22;
  if (has_superangerskillnamepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->superangerskillnamepath().data(), this->superangerskillnamepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "superangerskillnamepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->superangerskillnamepath(), target);
  }

  // optional string SuperAngerAudio = 23;
  if (has_superangeraudio()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->superangeraudio().data(), this->superangeraudio().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "superangeraudio");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->superangeraudio(), target);
  }

  // optional int32 SuperAngerHeroArr = 24;
  if (has_superangerheroarr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->superangerheroarr(), target);
  }

  // optional int32 GroundMeshDuration = 25;
  if (has_groundmeshduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->groundmeshduration(), target);
  }

  // optional bool NeedShowGroundMesh = 26;
  if (has_needshowgroundmesh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->needshowgroundmesh(), target);
  }

  // optional int32 SlowStartTime = 28;
  if (has_slowstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->slowstarttime(), target);
  }

  // optional int32 SlowDuration = 29;
  if (has_slowduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->slowduration(), target);
  }

  // optional int32 SlowBuffId = 30;
  if (has_slowbuffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->slowbuffid(), target);
  }

  // optional string GroundMeshAssetPath = 31;
  if (has_groundmeshassetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groundmeshassetpath().data(), this->groundmeshassetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groundmeshassetpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->groundmeshassetpath(), target);
  }

  // optional int32 SlowEndTime = 32;
  if (has_slowendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->slowendtime(), target);
  }

  // repeated string GroundAudioEvents = 33;
  for (int i = 0; i < this->groundaudioevents_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groundaudioevents(i).data(), this->groundaudioevents(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groundaudioevents");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(33, this->groundaudioevents(i), target);
  }

  // optional string EffectOnDisappear = 34;
  if (has_effectondisappear()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effectondisappear().data(), this->effectondisappear().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "effectondisappear");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->effectondisappear(), target);
  }

  // optional bool ActiveTextShift = 35;
  if (has_activetextshift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->activetextshift(), target);
  }

  // repeated int32 TextShiftSkillArr = 36;
  for (int i = 0; i < this->textshiftskillarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(36, this->textshiftskillarr(i), target);
  }

  // optional bool ActiveHideWhenBorn = 37;
  if (has_activehidewhenborn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->activehidewhenborn(), target);
  }

  // optional string AwakenDataPath1 = 38;
  if (has_awakendatapath1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->awakendatapath1().data(), this->awakendatapath1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "awakendatapath1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->awakendatapath1(), target);
  }

  // optional string BJRageSkillSpine = 39;
  if (has_bjrageskillspine()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bjrageskillspine().data(), this->bjrageskillspine().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bjrageskillspine");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->bjrageskillspine(), target);
  }

  // repeated float BJRageSkillSpineAdjust = 40;
  for (int i = 0; i < this->bjrageskillspineadjust_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(40, this->bjrageskillspineadjust(i), target);
  }

  // repeated float BJEnemyRageSkillSpineAdjust = 41;
  for (int i = 0; i < this->bjenemyrageskillspineadjust_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(41, this->bjenemyrageskillspineadjust(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillSpecialData)
  return target;
}

int SkillSpecialData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    // optional string RageSkillSpine = 6;
    if (has_rageskillspine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rageskillspine());
    }

    // optional string RageSkillEffect = 7;
    if (has_rageskilleffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rageskilleffect());
    }

    // optional string RageSkillAudio = 8;
    if (has_rageskillaudio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rageskillaudio());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bool ShowSkillLabel = 10;
    if (has_showskilllabel()) {
      total_size += 1 + 1;
    }

    // optional string SkillLabelSlot = 11;
    if (has_skilllabelslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skilllabelslot());
    }

    // optional int32 SkillLabelId = 12;
    if (has_skilllabelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilllabelid());
    }

    // optional string SkillLabelAudio = 13;
    if (has_skilllabelaudio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skilllabelaudio());
    }

    // optional bool EnemyRageHeaderShow = 16;
    if (has_enemyrageheadershow()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional bool HideUnparallelIcon = 18;
    if (has_hideunparallelicon()) {
      total_size += 2 + 1;
    }

    // optional string SuperAngerIconPath1 = 19;
    if (has_superangericonpath1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->superangericonpath1());
    }

    // optional string SuperAngerIconPath2 = 20;
    if (has_superangericonpath2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->superangericonpath2());
    }

    // optional string SuperAngerIconPath3 = 21;
    if (has_superangericonpath3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->superangericonpath3());
    }

    // optional string SuperAngerSkillNamePath = 22;
    if (has_superangerskillnamepath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->superangerskillnamepath());
    }

    // optional string SuperAngerAudio = 23;
    if (has_superangeraudio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->superangeraudio());
    }

    // optional int32 SuperAngerHeroArr = 24;
    if (has_superangerheroarr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->superangerheroarr());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 GroundMeshDuration = 25;
    if (has_groundmeshduration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groundmeshduration());
    }

    // optional bool NeedShowGroundMesh = 26;
    if (has_needshowgroundmesh()) {
      total_size += 2 + 1;
    }

    // optional int32 SlowStartTime = 28;
    if (has_slowstarttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slowstarttime());
    }

    // optional int32 SlowDuration = 29;
    if (has_slowduration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slowduration());
    }

    // optional int32 SlowBuffId = 30;
    if (has_slowbuffid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slowbuffid());
    }

    // optional string GroundMeshAssetPath = 31;
    if (has_groundmeshassetpath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groundmeshassetpath());
    }

    // optional int32 SlowEndTime = 32;
    if (has_slowendtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slowendtime());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string EffectOnDisappear = 34;
    if (has_effectondisappear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effectondisappear());
    }

    // optional bool ActiveTextShift = 35;
    if (has_activetextshift()) {
      total_size += 2 + 1;
    }

    // optional bool ActiveHideWhenBorn = 37;
    if (has_activehidewhenborn()) {
      total_size += 2 + 1;
    }

    // optional string AwakenDataPath1 = 38;
    if (has_awakendatapath1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->awakendatapath1());
    }

    // optional string BJRageSkillSpine = 39;
    if (has_bjrageskillspine()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bjrageskillspine());
    }

  }
  // repeated int32 RageSkillCameraUp = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->rageskillcameraup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rageskillcameraup(i));
    }
    total_size += 1 * this->rageskillcameraup_size() + data_size;
  }

  // repeated int32 RageSkillCameraUpSpeedTime = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->rageskillcameraupspeedtime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rageskillcameraupspeedtime(i));
    }
    total_size += 1 * this->rageskillcameraupspeedtime_size() + data_size;
  }

  // repeated int32 RageSkillCameraDown = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->rageskillcameradown_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rageskillcameradown(i));
    }
    total_size += 1 * this->rageskillcameradown_size() + data_size;
  }

  // repeated int32 RageSkillCameraDownSpeedTime = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->rageskillcameradownspeedtime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rageskillcameradownspeedtime(i));
    }
    total_size += 1 * this->rageskillcameradownspeedtime_size() + data_size;
  }

  // repeated int32 RageSkillCameraRecoverSpeedTime = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->rageskillcamerarecoverspeedtime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rageskillcamerarecoverspeedtime(i));
    }
    total_size += 1 * this->rageskillcamerarecoverspeedtime_size() + data_size;
  }

  // repeated float RageSkillSpineAdjust = 9;
  {
    int data_size = 0;
    data_size = 4 * this->rageskillspineadjust_size();
    total_size += 1 * this->rageskillspineadjust_size() + data_size;
  }

  // repeated int32 NonRageSkillCameraUpParam = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->nonrageskillcameraupparam_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nonrageskillcameraupparam(i));
    }
    total_size += 1 * this->nonrageskillcameraupparam_size() + data_size;
  }

  // repeated int32 NonRageSkillCameraRecoverParam = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->nonrageskillcamerarecoverparam_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nonrageskillcamerarecoverparam(i));
    }
    total_size += 1 * this->nonrageskillcamerarecoverparam_size() + data_size;
  }

  // repeated float EnemyRageSkillSpineAdjust = 17;
  {
    int data_size = 0;
    data_size = 4 * this->enemyrageskillspineadjust_size();
    total_size += 2 * this->enemyrageskillspineadjust_size() + data_size;
  }

  // repeated string GroundAudioEvents = 33;
  total_size += 2 * this->groundaudioevents_size();
  for (int i = 0; i < this->groundaudioevents_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->groundaudioevents(i));
  }

  // repeated int32 TextShiftSkillArr = 36;
  {
    int data_size = 0;
    for (int i = 0; i < this->textshiftskillarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->textshiftskillarr(i));
    }
    total_size += 2 * this->textshiftskillarr_size() + data_size;
  }

  // repeated float BJRageSkillSpineAdjust = 40;
  {
    int data_size = 0;
    data_size = 4 * this->bjrageskillspineadjust_size();
    total_size += 2 * this->bjrageskillspineadjust_size() + data_size;
  }

  // repeated float BJEnemyRageSkillSpineAdjust = 41;
  {
    int data_size = 0;
    data_size = 4 * this->bjenemyrageskillspineadjust_size();
    total_size += 2 * this->bjenemyrageskillspineadjust_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillSpecialData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillSpecialData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillSpecialData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillSpecialData::MergeFrom(const SkillSpecialData& from) {
  GOOGLE_CHECK_NE(&from, this);
  rageskillcameraup_.MergeFrom(from.rageskillcameraup_);
  rageskillcameraupspeedtime_.MergeFrom(from.rageskillcameraupspeedtime_);
  rageskillcameradown_.MergeFrom(from.rageskillcameradown_);
  rageskillcameradownspeedtime_.MergeFrom(from.rageskillcameradownspeedtime_);
  rageskillcamerarecoverspeedtime_.MergeFrom(from.rageskillcamerarecoverspeedtime_);
  rageskillspineadjust_.MergeFrom(from.rageskillspineadjust_);
  nonrageskillcameraupparam_.MergeFrom(from.nonrageskillcameraupparam_);
  nonrageskillcamerarecoverparam_.MergeFrom(from.nonrageskillcamerarecoverparam_);
  enemyrageskillspineadjust_.MergeFrom(from.enemyrageskillspineadjust_);
  groundaudioevents_.MergeFrom(from.groundaudioevents_);
  textshiftskillarr_.MergeFrom(from.textshiftskillarr_);
  bjrageskillspineadjust_.MergeFrom(from.bjrageskillspineadjust_);
  bjenemyrageskillspineadjust_.MergeFrom(from.bjenemyrageskillspineadjust_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from.has_rageskillspine()) {
      set_rageskillspine(from.rageskillspine());
    }
    if (from.has_rageskilleffect()) {
      set_rageskilleffect(from.rageskilleffect());
    }
    if (from.has_rageskillaudio()) {
      set_rageskillaudio(from.rageskillaudio());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_showskilllabel()) {
      set_showskilllabel(from.showskilllabel());
    }
    if (from.has_skilllabelslot()) {
      set_skilllabelslot(from.skilllabelslot());
    }
    if (from.has_skilllabelid()) {
      set_skilllabelid(from.skilllabelid());
    }
    if (from.has_skilllabelaudio()) {
      set_skilllabelaudio(from.skilllabelaudio());
    }
    if (from.has_enemyrageheadershow()) {
      set_enemyrageheadershow(from.enemyrageheadershow());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_hideunparallelicon()) {
      set_hideunparallelicon(from.hideunparallelicon());
    }
    if (from.has_superangericonpath1()) {
      set_superangericonpath1(from.superangericonpath1());
    }
    if (from.has_superangericonpath2()) {
      set_superangericonpath2(from.superangericonpath2());
    }
    if (from.has_superangericonpath3()) {
      set_superangericonpath3(from.superangericonpath3());
    }
    if (from.has_superangerskillnamepath()) {
      set_superangerskillnamepath(from.superangerskillnamepath());
    }
    if (from.has_superangeraudio()) {
      set_superangeraudio(from.superangeraudio());
    }
    if (from.has_superangerheroarr()) {
      set_superangerheroarr(from.superangerheroarr());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_groundmeshduration()) {
      set_groundmeshduration(from.groundmeshduration());
    }
    if (from.has_needshowgroundmesh()) {
      set_needshowgroundmesh(from.needshowgroundmesh());
    }
    if (from.has_slowstarttime()) {
      set_slowstarttime(from.slowstarttime());
    }
    if (from.has_slowduration()) {
      set_slowduration(from.slowduration());
    }
    if (from.has_slowbuffid()) {
      set_slowbuffid(from.slowbuffid());
    }
    if (from.has_groundmeshassetpath()) {
      set_groundmeshassetpath(from.groundmeshassetpath());
    }
    if (from.has_slowendtime()) {
      set_slowendtime(from.slowendtime());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_effectondisappear()) {
      set_effectondisappear(from.effectondisappear());
    }
    if (from.has_activetextshift()) {
      set_activetextshift(from.activetextshift());
    }
    if (from.has_activehidewhenborn()) {
      set_activehidewhenborn(from.activehidewhenborn());
    }
    if (from.has_awakendatapath1()) {
      set_awakendatapath1(from.awakendatapath1());
    }
    if (from.has_bjrageskillspine()) {
      set_bjrageskillspine(from.bjrageskillspine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillSpecialData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillSpecialData::CopyFrom(const SkillSpecialData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillSpecialData::IsInitialized() const {

  return true;
}

void SkillSpecialData::Swap(SkillSpecialData* other) {
  if (other != this) {
    rageskillcameraup_.Swap(&other->rageskillcameraup_);
    rageskillcameraupspeedtime_.Swap(&other->rageskillcameraupspeedtime_);
    rageskillcameradown_.Swap(&other->rageskillcameradown_);
    rageskillcameradownspeedtime_.Swap(&other->rageskillcameradownspeedtime_);
    rageskillcamerarecoverspeedtime_.Swap(&other->rageskillcamerarecoverspeedtime_);
    std::swap(rageskillspine_, other->rageskillspine_);
    std::swap(rageskilleffect_, other->rageskilleffect_);
    std::swap(rageskillaudio_, other->rageskillaudio_);
    rageskillspineadjust_.Swap(&other->rageskillspineadjust_);
    std::swap(showskilllabel_, other->showskilllabel_);
    std::swap(skilllabelslot_, other->skilllabelslot_);
    std::swap(skilllabelid_, other->skilllabelid_);
    std::swap(skilllabelaudio_, other->skilllabelaudio_);
    nonrageskillcameraupparam_.Swap(&other->nonrageskillcameraupparam_);
    nonrageskillcamerarecoverparam_.Swap(&other->nonrageskillcamerarecoverparam_);
    std::swap(enemyrageheadershow_, other->enemyrageheadershow_);
    enemyrageskillspineadjust_.Swap(&other->enemyrageskillspineadjust_);
    std::swap(hideunparallelicon_, other->hideunparallelicon_);
    std::swap(superangericonpath1_, other->superangericonpath1_);
    std::swap(superangericonpath2_, other->superangericonpath2_);
    std::swap(superangericonpath3_, other->superangericonpath3_);
    std::swap(superangerskillnamepath_, other->superangerskillnamepath_);
    std::swap(superangeraudio_, other->superangeraudio_);
    std::swap(superangerheroarr_, other->superangerheroarr_);
    std::swap(groundmeshduration_, other->groundmeshduration_);
    std::swap(needshowgroundmesh_, other->needshowgroundmesh_);
    std::swap(slowstarttime_, other->slowstarttime_);
    std::swap(slowduration_, other->slowduration_);
    std::swap(slowbuffid_, other->slowbuffid_);
    std::swap(groundmeshassetpath_, other->groundmeshassetpath_);
    std::swap(slowendtime_, other->slowendtime_);
    groundaudioevents_.Swap(&other->groundaudioevents_);
    std::swap(effectondisappear_, other->effectondisappear_);
    std::swap(activetextshift_, other->activetextshift_);
    textshiftskillarr_.Swap(&other->textshiftskillarr_);
    std::swap(activehidewhenborn_, other->activehidewhenborn_);
    std::swap(awakendatapath1_, other->awakendatapath1_);
    std::swap(bjrageskillspine_, other->bjrageskillspine_);
    bjrageskillspineadjust_.Swap(&other->bjrageskillspineadjust_);
    bjenemyrageskillspineadjust_.Swap(&other->bjenemyrageskillspineadjust_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillSpecialData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillSpecialData_descriptor_;
  metadata.reflection = SkillSpecialData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillTargetPriority::kFrontFieldNumber;
const int SkillTargetPriority::kMiddleFieldNumber;
const int SkillTargetPriority::kBackFieldNumber;
#endif  // !_MSC_VER

SkillTargetPriority::SkillTargetPriority()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillTargetPriority)
}

void SkillTargetPriority::InitAsDefaultInstance() {
}

SkillTargetPriority::SkillTargetPriority(const SkillTargetPriority& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillTargetPriority)
}

void SkillTargetPriority::SharedCtor() {
  _cached_size_ = 0;
  front_ = 0;
  middle_ = 0;
  back_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillTargetPriority::~SkillTargetPriority() {
  // @@protoc_insertion_point(destructor:pb.SkillTargetPriority)
  SharedDtor();
}

void SkillTargetPriority::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillTargetPriority::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillTargetPriority::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillTargetPriority_descriptor_;
}

const SkillTargetPriority& SkillTargetPriority::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillBaseData_2eproto();
  return *default_instance_;
}

SkillTargetPriority* SkillTargetPriority::default_instance_ = NULL;

SkillTargetPriority* SkillTargetPriority::New() const {
  return new SkillTargetPriority;
}

void SkillTargetPriority::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillTargetPriority*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(front_, back_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillTargetPriority::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillTargetPriority)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Front = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_)));
          set_has_front();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Middle;
        break;
      }

      // optional int32 Middle = 2;
      case 2: {
        if (tag == 16) {
         parse_Middle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &middle_)));
          set_has_middle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Back;
        break;
      }

      // optional int32 Back = 3;
      case 3: {
        if (tag == 24) {
         parse_Back:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &back_)));
          set_has_back();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillTargetPriority)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillTargetPriority)
  return false;
#undef DO_
}

void SkillTargetPriority::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillTargetPriority)
  // optional int32 Front = 1;
  if (has_front()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->front(), output);
  }

  // optional int32 Middle = 2;
  if (has_middle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->middle(), output);
  }

  // optional int32 Back = 3;
  if (has_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->back(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillTargetPriority)
}

::google::protobuf::uint8* SkillTargetPriority::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillTargetPriority)
  // optional int32 Front = 1;
  if (has_front()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->front(), target);
  }

  // optional int32 Middle = 2;
  if (has_middle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->middle(), target);
  }

  // optional int32 Back = 3;
  if (has_back()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->back(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillTargetPriority)
  return target;
}

int SkillTargetPriority::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Front = 1;
    if (has_front()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->front());
    }

    // optional int32 Middle = 2;
    if (has_middle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->middle());
    }

    // optional int32 Back = 3;
    if (has_back()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->back());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillTargetPriority::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillTargetPriority* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillTargetPriority*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillTargetPriority::MergeFrom(const SkillTargetPriority& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_front()) {
      set_front(from.front());
    }
    if (from.has_middle()) {
      set_middle(from.middle());
    }
    if (from.has_back()) {
      set_back(from.back());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillTargetPriority::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillTargetPriority::CopyFrom(const SkillTargetPriority& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillTargetPriority::IsInitialized() const {

  return true;
}

void SkillTargetPriority::Swap(SkillTargetPriority* other) {
  if (other != this) {
    std::swap(front_, other->front_);
    std::swap(middle_, other->middle_);
    std::swap(back_, other->back_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillTargetPriority::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillTargetPriority_descriptor_;
  metadata.reflection = SkillTargetPriority_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillMoveData::kDamageTimeFieldNumber;
const int SkillMoveData::kMoveTypeFieldNumber;
const int SkillMoveData::kMoveTypeParamFieldNumber;
const int SkillMoveData::kMoveSpeedFieldNumber;
const int SkillMoveData::kMoveHeightFieldNumber;
const int SkillMoveData::kMoveUpSpeedFieldNumber;
const int SkillMoveData::kMoveDownSpeedFieldNumber;
const int SkillMoveData::kStayTimeOnPeakFieldNumber;
const int SkillMoveData::kCanBeRefTargetFieldNumber;
const int SkillMoveData::kCanBeEffectTargetFieldNumber;
const int SkillMoveData::kMoveDownHeightFieldNumber;
const int SkillMoveData::kFallToGroundFieldNumber;
const int SkillMoveData::kMoveUpAccelerationFieldNumber;
const int SkillMoveData::kMoveDownAccelerationFieldNumber;
const int SkillMoveData::kPlayFloatAwayAnimFieldNumber;
const int SkillMoveData::kAllowReplaceAnimFieldNumber;
const int SkillMoveData::kPlayFloatCtrlAinmFieldNumber;
const int SkillMoveData::kAnimOnFloatUpAndKeepFieldNumber;
const int SkillMoveData::kAnimOnFloatDownFieldNumber;
const int SkillMoveData::kBreakByObstacleFieldNumber;
const int SkillMoveData::kMoveAccelerationFieldNumber;
const int SkillMoveData::kTDNeedBlockByLineFieldNumber;
#endif  // !_MSC_VER

SkillMoveData::SkillMoveData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillMoveData)
}

void SkillMoveData::InitAsDefaultInstance() {
  moveupacceleration_ = const_cast< ::pb::SkillCurveAcceleration*>(&::pb::SkillCurveAcceleration::default_instance());
  movedownacceleration_ = const_cast< ::pb::SkillCurveAcceleration*>(&::pb::SkillCurveAcceleration::default_instance());
}

SkillMoveData::SkillMoveData(const SkillMoveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillMoveData)
}

void SkillMoveData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  damagetime_ = 0;
  movetype_ = 0;
  movetypeparam_ = 0;
  movespeed_ = 0;
  moveheight_ = 0;
  moveupspeed_ = 0;
  movedownspeed_ = 0;
  staytimeonpeak_ = 0;
  canbereftarget_ = false;
  canbeeffecttarget_ = false;
  movedownheight_ = 0;
  falltoground_ = false;
  moveupacceleration_ = NULL;
  movedownacceleration_ = NULL;
  playfloatawayanim_ = false;
  allowreplaceanim_ = false;
  playfloatctrlainm_ = false;
  animonfloatupandkeep_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  animonfloatdown_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  breakbyobstacle_ = false;
  moveacceleration_ = 0;
  tdneedblockbyline_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillMoveData::~SkillMoveData() {
  // @@protoc_insertion_point(destructor:pb.SkillMoveData)
  SharedDtor();
}

void SkillMoveData::SharedDtor() {
  if (animonfloatupandkeep_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete animonfloatupandkeep_;
  }
  if (animonfloatdown_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete animonfloatdown_;
  }
  if (this != default_instance_) {
    delete moveupacceleration_;
    delete movedownacceleration_;
  }
}

void SkillMoveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillMoveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillMoveData_descriptor_;
}

const SkillMoveData& SkillMoveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillBaseData_2eproto();
  return *default_instance_;
}

SkillMoveData* SkillMoveData::default_instance_ = NULL;

SkillMoveData* SkillMoveData::New() const {
  return new SkillMoveData;
}

void SkillMoveData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillMoveData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(damagetime_, staytimeonpeak_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(movedownheight_, playfloatawayanim_);
    if (has_moveupacceleration()) {
      if (moveupacceleration_ != NULL) moveupacceleration_->::pb::SkillCurveAcceleration::Clear();
    }
    if (has_movedownacceleration()) {
      if (movedownacceleration_ != NULL) movedownacceleration_->::pb::SkillCurveAcceleration::Clear();
    }
    allowreplaceanim_ = false;
  }
  if (_has_bits_[16 / 32] & 4128768) {
    ZR_(playfloatctrlainm_, moveacceleration_);
    if (has_animonfloatupandkeep()) {
      if (animonfloatupandkeep_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        animonfloatupandkeep_->clear();
      }
    }
    if (has_animonfloatdown()) {
      if (animonfloatdown_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        animonfloatdown_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillMoveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillMoveData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 DamageTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damagetime_)));
          set_has_damagetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MoveType;
        break;
      }

      // optional int32 MoveType = 2;
      case 2: {
        if (tag == 16) {
         parse_MoveType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movetype_)));
          set_has_movetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MoveTypeParam;
        break;
      }

      // optional int32 MoveTypeParam = 3;
      case 3: {
        if (tag == 24) {
         parse_MoveTypeParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movetypeparam_)));
          set_has_movetypeparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MoveSpeed;
        break;
      }

      // optional int32 MoveSpeed = 4;
      case 4: {
        if (tag == 32) {
         parse_MoveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MoveHeight;
        break;
      }

      // optional int32 MoveHeight = 5;
      case 5: {
        if (tag == 40) {
         parse_MoveHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moveheight_)));
          set_has_moveheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_MoveUpSpeed;
        break;
      }

      // optional int32 MoveUpSpeed = 6;
      case 6: {
        if (tag == 48) {
         parse_MoveUpSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moveupspeed_)));
          set_has_moveupspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_MoveDownSpeed;
        break;
      }

      // optional int32 MoveDownSpeed = 7;
      case 7: {
        if (tag == 56) {
         parse_MoveDownSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movedownspeed_)));
          set_has_movedownspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_StayTimeOnPeak;
        break;
      }

      // optional int32 StayTimeOnPeak = 10;
      case 10: {
        if (tag == 80) {
         parse_StayTimeOnPeak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &staytimeonpeak_)));
          set_has_staytimeonpeak();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_CanBeRefTarget;
        break;
      }

      // optional bool CanBeRefTarget = 11;
      case 11: {
        if (tag == 88) {
         parse_CanBeRefTarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canbereftarget_)));
          set_has_canbereftarget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_CanBeEffectTarget;
        break;
      }

      // optional bool CanBeEffectTarget = 12;
      case 12: {
        if (tag == 96) {
         parse_CanBeEffectTarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canbeeffecttarget_)));
          set_has_canbeeffecttarget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_MoveDownHeight;
        break;
      }

      // optional int32 MoveDownHeight = 13;
      case 13: {
        if (tag == 104) {
         parse_MoveDownHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movedownheight_)));
          set_has_movedownheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_FallToGround;
        break;
      }

      // optional bool FallToGround = 14;
      case 14: {
        if (tag == 112) {
         parse_FallToGround:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &falltoground_)));
          set_has_falltoground();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_MoveUpAcceleration;
        break;
      }

      // optional .pb.SkillCurveAcceleration MoveUpAcceleration = 15;
      case 15: {
        if (tag == 122) {
         parse_MoveUpAcceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_moveupacceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_MoveDownAcceleration;
        break;
      }

      // optional .pb.SkillCurveAcceleration MoveDownAcceleration = 16;
      case 16: {
        if (tag == 130) {
         parse_MoveDownAcceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movedownacceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_PlayFloatAwayAnim;
        break;
      }

      // optional bool PlayFloatAwayAnim = 17;
      case 17: {
        if (tag == 136) {
         parse_PlayFloatAwayAnim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &playfloatawayanim_)));
          set_has_playfloatawayanim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_AllowReplaceAnim;
        break;
      }

      // optional bool AllowReplaceAnim = 18;
      case 18: {
        if (tag == 144) {
         parse_AllowReplaceAnim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowreplaceanim_)));
          set_has_allowreplaceanim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_PlayFloatCtrlAinm;
        break;
      }

      // optional bool PlayFloatCtrlAinm = 19;
      case 19: {
        if (tag == 152) {
         parse_PlayFloatCtrlAinm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &playfloatctrlainm_)));
          set_has_playfloatctrlainm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_AnimOnFloatUpAndKeep;
        break;
      }

      // optional string AnimOnFloatUpAndKeep = 21;
      case 21: {
        if (tag == 170) {
         parse_AnimOnFloatUpAndKeep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_animonfloatupandkeep()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->animonfloatupandkeep().data(), this->animonfloatupandkeep().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "animonfloatupandkeep");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_AnimOnFloatDown;
        break;
      }

      // optional string AnimOnFloatDown = 22;
      case 22: {
        if (tag == 178) {
         parse_AnimOnFloatDown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_animonfloatdown()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->animonfloatdown().data(), this->animonfloatdown().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "animonfloatdown");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_BreakByObstacle;
        break;
      }

      // optional bool BreakByObstacle = 23;
      case 23: {
        if (tag == 184) {
         parse_BreakByObstacle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &breakbyobstacle_)));
          set_has_breakbyobstacle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_MoveAcceleration;
        break;
      }

      // optional int32 MoveAcceleration = 24;
      case 24: {
        if (tag == 192) {
         parse_MoveAcceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moveacceleration_)));
          set_has_moveacceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_TDNeedBlockByLine;
        break;
      }

      // optional bool TDNeedBlockByLine = 25;
      case 25: {
        if (tag == 200) {
         parse_TDNeedBlockByLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tdneedblockbyline_)));
          set_has_tdneedblockbyline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillMoveData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillMoveData)
  return false;
#undef DO_
}

void SkillMoveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillMoveData)
  // optional int32 DamageTime = 1;
  if (has_damagetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->damagetime(), output);
  }

  // optional int32 MoveType = 2;
  if (has_movetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->movetype(), output);
  }

  // optional int32 MoveTypeParam = 3;
  if (has_movetypeparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->movetypeparam(), output);
  }

  // optional int32 MoveSpeed = 4;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->movespeed(), output);
  }

  // optional int32 MoveHeight = 5;
  if (has_moveheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->moveheight(), output);
  }

  // optional int32 MoveUpSpeed = 6;
  if (has_moveupspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->moveupspeed(), output);
  }

  // optional int32 MoveDownSpeed = 7;
  if (has_movedownspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->movedownspeed(), output);
  }

  // optional int32 StayTimeOnPeak = 10;
  if (has_staytimeonpeak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->staytimeonpeak(), output);
  }

  // optional bool CanBeRefTarget = 11;
  if (has_canbereftarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->canbereftarget(), output);
  }

  // optional bool CanBeEffectTarget = 12;
  if (has_canbeeffecttarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->canbeeffecttarget(), output);
  }

  // optional int32 MoveDownHeight = 13;
  if (has_movedownheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->movedownheight(), output);
  }

  // optional bool FallToGround = 14;
  if (has_falltoground()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->falltoground(), output);
  }

  // optional .pb.SkillCurveAcceleration MoveUpAcceleration = 15;
  if (has_moveupacceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->moveupacceleration(), output);
  }

  // optional .pb.SkillCurveAcceleration MoveDownAcceleration = 16;
  if (has_movedownacceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->movedownacceleration(), output);
  }

  // optional bool PlayFloatAwayAnim = 17;
  if (has_playfloatawayanim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->playfloatawayanim(), output);
  }

  // optional bool AllowReplaceAnim = 18;
  if (has_allowreplaceanim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->allowreplaceanim(), output);
  }

  // optional bool PlayFloatCtrlAinm = 19;
  if (has_playfloatctrlainm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->playfloatctrlainm(), output);
  }

  // optional string AnimOnFloatUpAndKeep = 21;
  if (has_animonfloatupandkeep()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animonfloatupandkeep().data(), this->animonfloatupandkeep().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animonfloatupandkeep");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->animonfloatupandkeep(), output);
  }

  // optional string AnimOnFloatDown = 22;
  if (has_animonfloatdown()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animonfloatdown().data(), this->animonfloatdown().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animonfloatdown");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->animonfloatdown(), output);
  }

  // optional bool BreakByObstacle = 23;
  if (has_breakbyobstacle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->breakbyobstacle(), output);
  }

  // optional int32 MoveAcceleration = 24;
  if (has_moveacceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->moveacceleration(), output);
  }

  // optional bool TDNeedBlockByLine = 25;
  if (has_tdneedblockbyline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->tdneedblockbyline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillMoveData)
}

::google::protobuf::uint8* SkillMoveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillMoveData)
  // optional int32 DamageTime = 1;
  if (has_damagetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->damagetime(), target);
  }

  // optional int32 MoveType = 2;
  if (has_movetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->movetype(), target);
  }

  // optional int32 MoveTypeParam = 3;
  if (has_movetypeparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->movetypeparam(), target);
  }

  // optional int32 MoveSpeed = 4;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->movespeed(), target);
  }

  // optional int32 MoveHeight = 5;
  if (has_moveheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->moveheight(), target);
  }

  // optional int32 MoveUpSpeed = 6;
  if (has_moveupspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->moveupspeed(), target);
  }

  // optional int32 MoveDownSpeed = 7;
  if (has_movedownspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->movedownspeed(), target);
  }

  // optional int32 StayTimeOnPeak = 10;
  if (has_staytimeonpeak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->staytimeonpeak(), target);
  }

  // optional bool CanBeRefTarget = 11;
  if (has_canbereftarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->canbereftarget(), target);
  }

  // optional bool CanBeEffectTarget = 12;
  if (has_canbeeffecttarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->canbeeffecttarget(), target);
  }

  // optional int32 MoveDownHeight = 13;
  if (has_movedownheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->movedownheight(), target);
  }

  // optional bool FallToGround = 14;
  if (has_falltoground()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->falltoground(), target);
  }

  // optional .pb.SkillCurveAcceleration MoveUpAcceleration = 15;
  if (has_moveupacceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->moveupacceleration(), target);
  }

  // optional .pb.SkillCurveAcceleration MoveDownAcceleration = 16;
  if (has_movedownacceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->movedownacceleration(), target);
  }

  // optional bool PlayFloatAwayAnim = 17;
  if (has_playfloatawayanim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->playfloatawayanim(), target);
  }

  // optional bool AllowReplaceAnim = 18;
  if (has_allowreplaceanim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->allowreplaceanim(), target);
  }

  // optional bool PlayFloatCtrlAinm = 19;
  if (has_playfloatctrlainm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->playfloatctrlainm(), target);
  }

  // optional string AnimOnFloatUpAndKeep = 21;
  if (has_animonfloatupandkeep()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animonfloatupandkeep().data(), this->animonfloatupandkeep().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animonfloatupandkeep");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->animonfloatupandkeep(), target);
  }

  // optional string AnimOnFloatDown = 22;
  if (has_animonfloatdown()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animonfloatdown().data(), this->animonfloatdown().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animonfloatdown");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->animonfloatdown(), target);
  }

  // optional bool BreakByObstacle = 23;
  if (has_breakbyobstacle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->breakbyobstacle(), target);
  }

  // optional int32 MoveAcceleration = 24;
  if (has_moveacceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->moveacceleration(), target);
  }

  // optional bool TDNeedBlockByLine = 25;
  if (has_tdneedblockbyline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->tdneedblockbyline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillMoveData)
  return target;
}

int SkillMoveData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 DamageTime = 1;
    if (has_damagetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damagetime());
    }

    // optional int32 MoveType = 2;
    if (has_movetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movetype());
    }

    // optional int32 MoveTypeParam = 3;
    if (has_movetypeparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movetypeparam());
    }

    // optional int32 MoveSpeed = 4;
    if (has_movespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }

    // optional int32 MoveHeight = 5;
    if (has_moveheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moveheight());
    }

    // optional int32 MoveUpSpeed = 6;
    if (has_moveupspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moveupspeed());
    }

    // optional int32 MoveDownSpeed = 7;
    if (has_movedownspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movedownspeed());
    }

    // optional int32 StayTimeOnPeak = 10;
    if (has_staytimeonpeak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->staytimeonpeak());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool CanBeRefTarget = 11;
    if (has_canbereftarget()) {
      total_size += 1 + 1;
    }

    // optional bool CanBeEffectTarget = 12;
    if (has_canbeeffecttarget()) {
      total_size += 1 + 1;
    }

    // optional int32 MoveDownHeight = 13;
    if (has_movedownheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movedownheight());
    }

    // optional bool FallToGround = 14;
    if (has_falltoground()) {
      total_size += 1 + 1;
    }

    // optional .pb.SkillCurveAcceleration MoveUpAcceleration = 15;
    if (has_moveupacceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->moveupacceleration());
    }

    // optional .pb.SkillCurveAcceleration MoveDownAcceleration = 16;
    if (has_movedownacceleration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movedownacceleration());
    }

    // optional bool PlayFloatAwayAnim = 17;
    if (has_playfloatawayanim()) {
      total_size += 2 + 1;
    }

    // optional bool AllowReplaceAnim = 18;
    if (has_allowreplaceanim()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool PlayFloatCtrlAinm = 19;
    if (has_playfloatctrlainm()) {
      total_size += 2 + 1;
    }

    // optional string AnimOnFloatUpAndKeep = 21;
    if (has_animonfloatupandkeep()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->animonfloatupandkeep());
    }

    // optional string AnimOnFloatDown = 22;
    if (has_animonfloatdown()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->animonfloatdown());
    }

    // optional bool BreakByObstacle = 23;
    if (has_breakbyobstacle()) {
      total_size += 2 + 1;
    }

    // optional int32 MoveAcceleration = 24;
    if (has_moveacceleration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moveacceleration());
    }

    // optional bool TDNeedBlockByLine = 25;
    if (has_tdneedblockbyline()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillMoveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillMoveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillMoveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillMoveData::MergeFrom(const SkillMoveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_damagetime()) {
      set_damagetime(from.damagetime());
    }
    if (from.has_movetype()) {
      set_movetype(from.movetype());
    }
    if (from.has_movetypeparam()) {
      set_movetypeparam(from.movetypeparam());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_moveheight()) {
      set_moveheight(from.moveheight());
    }
    if (from.has_moveupspeed()) {
      set_moveupspeed(from.moveupspeed());
    }
    if (from.has_movedownspeed()) {
      set_movedownspeed(from.movedownspeed());
    }
    if (from.has_staytimeonpeak()) {
      set_staytimeonpeak(from.staytimeonpeak());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_canbereftarget()) {
      set_canbereftarget(from.canbereftarget());
    }
    if (from.has_canbeeffecttarget()) {
      set_canbeeffecttarget(from.canbeeffecttarget());
    }
    if (from.has_movedownheight()) {
      set_movedownheight(from.movedownheight());
    }
    if (from.has_falltoground()) {
      set_falltoground(from.falltoground());
    }
    if (from.has_moveupacceleration()) {
      mutable_moveupacceleration()->::pb::SkillCurveAcceleration::MergeFrom(from.moveupacceleration());
    }
    if (from.has_movedownacceleration()) {
      mutable_movedownacceleration()->::pb::SkillCurveAcceleration::MergeFrom(from.movedownacceleration());
    }
    if (from.has_playfloatawayanim()) {
      set_playfloatawayanim(from.playfloatawayanim());
    }
    if (from.has_allowreplaceanim()) {
      set_allowreplaceanim(from.allowreplaceanim());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_playfloatctrlainm()) {
      set_playfloatctrlainm(from.playfloatctrlainm());
    }
    if (from.has_animonfloatupandkeep()) {
      set_animonfloatupandkeep(from.animonfloatupandkeep());
    }
    if (from.has_animonfloatdown()) {
      set_animonfloatdown(from.animonfloatdown());
    }
    if (from.has_breakbyobstacle()) {
      set_breakbyobstacle(from.breakbyobstacle());
    }
    if (from.has_moveacceleration()) {
      set_moveacceleration(from.moveacceleration());
    }
    if (from.has_tdneedblockbyline()) {
      set_tdneedblockbyline(from.tdneedblockbyline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillMoveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillMoveData::CopyFrom(const SkillMoveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillMoveData::IsInitialized() const {

  return true;
}

void SkillMoveData::Swap(SkillMoveData* other) {
  if (other != this) {
    std::swap(damagetime_, other->damagetime_);
    std::swap(movetype_, other->movetype_);
    std::swap(movetypeparam_, other->movetypeparam_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(moveheight_, other->moveheight_);
    std::swap(moveupspeed_, other->moveupspeed_);
    std::swap(movedownspeed_, other->movedownspeed_);
    std::swap(staytimeonpeak_, other->staytimeonpeak_);
    std::swap(canbereftarget_, other->canbereftarget_);
    std::swap(canbeeffecttarget_, other->canbeeffecttarget_);
    std::swap(movedownheight_, other->movedownheight_);
    std::swap(falltoground_, other->falltoground_);
    std::swap(moveupacceleration_, other->moveupacceleration_);
    std::swap(movedownacceleration_, other->movedownacceleration_);
    std::swap(playfloatawayanim_, other->playfloatawayanim_);
    std::swap(allowreplaceanim_, other->allowreplaceanim_);
    std::swap(playfloatctrlainm_, other->playfloatctrlainm_);
    std::swap(animonfloatupandkeep_, other->animonfloatupandkeep_);
    std::swap(animonfloatdown_, other->animonfloatdown_);
    std::swap(breakbyobstacle_, other->breakbyobstacle_);
    std::swap(moveacceleration_, other->moveacceleration_);
    std::swap(tdneedblockbyline_, other->tdneedblockbyline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillMoveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillMoveData_descriptor_;
  metadata.reflection = SkillMoveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HitEffectData::kEffectParentFieldNumber;
const int HitEffectData::kHitEffectFieldNumber;
const int HitEffectData::kHitSoundFieldNumber;
const int HitEffectData::kHitEffectFollowFieldNumber;
const int HitEffectData::kHitEffectFlipFieldNumber;
const int HitEffectData::kHitEffectRotateRandomFieldNumber;
const int HitEffectData::kHitEffectRotateRangeXFieldNumber;
const int HitEffectData::kHitEffectRotateRangeYFieldNumber;
const int HitEffectData::kHitEffectScaleFieldNumber;
const int HitEffectData::kHitEffectScaleRangeFieldNumber;
#endif  // !_MSC_VER

HitEffectData::HitEffectData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.HitEffectData)
}

void HitEffectData::InitAsDefaultInstance() {
}

HitEffectData::HitEffectData(const HitEffectData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.HitEffectData)
}

void HitEffectData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  effectparent_ = 0;
  hiteffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hitsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hiteffectfollow_ = false;
  hiteffectflip_ = false;
  hiteffectrotaterandom_ = false;
  hiteffectscale_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HitEffectData::~HitEffectData() {
  // @@protoc_insertion_point(destructor:pb.HitEffectData)
  SharedDtor();
}

void HitEffectData::SharedDtor() {
  if (hiteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hiteffect_;
  }
  if (hitsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hitsound_;
  }
  if (this != default_instance_) {
  }
}

void HitEffectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HitEffectData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HitEffectData_descriptor_;
}

const HitEffectData& HitEffectData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillBaseData_2eproto();
  return *default_instance_;
}

HitEffectData* HitEffectData::default_instance_ = NULL;

HitEffectData* HitEffectData::New() const {
  return new HitEffectData;
}

void HitEffectData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HitEffectData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(effectparent_, hiteffectrotaterandom_);
    if (has_hiteffect()) {
      if (hiteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hiteffect_->clear();
      }
    }
    if (has_hitsound()) {
      if (hitsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hitsound_->clear();
      }
    }
  }
  hiteffectscale_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  hiteffectrotaterangex_.Clear();
  hiteffectrotaterangey_.Clear();
  hiteffectscalerange_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HitEffectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.HitEffectData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 EffectParent = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectparent_)));
          set_has_effectparent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_HitEffect;
        break;
      }

      // optional string HitEffect = 2;
      case 2: {
        if (tag == 18) {
         parse_HitEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hiteffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hiteffect().data(), this->hiteffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hiteffect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_HitSound;
        break;
      }

      // optional string HitSound = 3;
      case 3: {
        if (tag == 26) {
         parse_HitSound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hitsound()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hitsound().data(), this->hitsound().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hitsound");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_HitEffectFollow;
        break;
      }

      // optional bool HitEffectFollow = 4;
      case 4: {
        if (tag == 32) {
         parse_HitEffectFollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hiteffectfollow_)));
          set_has_hiteffectfollow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_HitEffectFlip;
        break;
      }

      // optional bool HitEffectFlip = 5;
      case 5: {
        if (tag == 40) {
         parse_HitEffectFlip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hiteffectflip_)));
          set_has_hiteffectflip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_HitEffectRotateRandom;
        break;
      }

      // optional bool HitEffectRotateRandom = 6;
      case 6: {
        if (tag == 48) {
         parse_HitEffectRotateRandom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hiteffectrotaterandom_)));
          set_has_hiteffectrotaterandom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_HitEffectRotateRangeX;
        break;
      }

      // repeated int32 HitEffectRotateRangeX = 7;
      case 7: {
        if (tag == 56) {
         parse_HitEffectRotateRangeX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_hiteffectrotaterangex())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hiteffectrotaterangex())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_HitEffectRotateRangeX;
        if (input->ExpectTag(64)) goto parse_HitEffectRotateRangeY;
        break;
      }

      // repeated int32 HitEffectRotateRangeY = 8;
      case 8: {
        if (tag == 64) {
         parse_HitEffectRotateRangeY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_hiteffectrotaterangey())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hiteffectrotaterangey())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_HitEffectRotateRangeY;
        if (input->ExpectTag(72)) goto parse_HitEffectScale;
        break;
      }

      // optional bool HitEffectScale = 9;
      case 9: {
        if (tag == 72) {
         parse_HitEffectScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hiteffectscale_)));
          set_has_hiteffectscale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_HitEffectScaleRange;
        break;
      }

      // repeated int32 HitEffectScaleRange = 10;
      case 10: {
        if (tag == 80) {
         parse_HitEffectScaleRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_hiteffectscalerange())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hiteffectscalerange())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_HitEffectScaleRange;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.HitEffectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.HitEffectData)
  return false;
#undef DO_
}

void HitEffectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.HitEffectData)
  // optional int32 EffectParent = 1;
  if (has_effectparent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->effectparent(), output);
  }

  // optional string HitEffect = 2;
  if (has_hiteffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hiteffect().data(), this->hiteffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hiteffect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hiteffect(), output);
  }

  // optional string HitSound = 3;
  if (has_hitsound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hitsound().data(), this->hitsound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hitsound");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hitsound(), output);
  }

  // optional bool HitEffectFollow = 4;
  if (has_hiteffectfollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hiteffectfollow(), output);
  }

  // optional bool HitEffectFlip = 5;
  if (has_hiteffectflip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hiteffectflip(), output);
  }

  // optional bool HitEffectRotateRandom = 6;
  if (has_hiteffectrotaterandom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->hiteffectrotaterandom(), output);
  }

  // repeated int32 HitEffectRotateRangeX = 7;
  for (int i = 0; i < this->hiteffectrotaterangex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->hiteffectrotaterangex(i), output);
  }

  // repeated int32 HitEffectRotateRangeY = 8;
  for (int i = 0; i < this->hiteffectrotaterangey_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->hiteffectrotaterangey(i), output);
  }

  // optional bool HitEffectScale = 9;
  if (has_hiteffectscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->hiteffectscale(), output);
  }

  // repeated int32 HitEffectScaleRange = 10;
  for (int i = 0; i < this->hiteffectscalerange_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->hiteffectscalerange(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.HitEffectData)
}

::google::protobuf::uint8* HitEffectData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.HitEffectData)
  // optional int32 EffectParent = 1;
  if (has_effectparent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->effectparent(), target);
  }

  // optional string HitEffect = 2;
  if (has_hiteffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hiteffect().data(), this->hiteffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hiteffect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hiteffect(), target);
  }

  // optional string HitSound = 3;
  if (has_hitsound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hitsound().data(), this->hitsound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hitsound");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hitsound(), target);
  }

  // optional bool HitEffectFollow = 4;
  if (has_hiteffectfollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hiteffectfollow(), target);
  }

  // optional bool HitEffectFlip = 5;
  if (has_hiteffectflip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hiteffectflip(), target);
  }

  // optional bool HitEffectRotateRandom = 6;
  if (has_hiteffectrotaterandom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->hiteffectrotaterandom(), target);
  }

  // repeated int32 HitEffectRotateRangeX = 7;
  for (int i = 0; i < this->hiteffectrotaterangex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->hiteffectrotaterangex(i), target);
  }

  // repeated int32 HitEffectRotateRangeY = 8;
  for (int i = 0; i < this->hiteffectrotaterangey_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->hiteffectrotaterangey(i), target);
  }

  // optional bool HitEffectScale = 9;
  if (has_hiteffectscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->hiteffectscale(), target);
  }

  // repeated int32 HitEffectScaleRange = 10;
  for (int i = 0; i < this->hiteffectscalerange_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->hiteffectscalerange(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.HitEffectData)
  return target;
}

int HitEffectData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 EffectParent = 1;
    if (has_effectparent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectparent());
    }

    // optional string HitEffect = 2;
    if (has_hiteffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hiteffect());
    }

    // optional string HitSound = 3;
    if (has_hitsound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hitsound());
    }

    // optional bool HitEffectFollow = 4;
    if (has_hiteffectfollow()) {
      total_size += 1 + 1;
    }

    // optional bool HitEffectFlip = 5;
    if (has_hiteffectflip()) {
      total_size += 1 + 1;
    }

    // optional bool HitEffectRotateRandom = 6;
    if (has_hiteffectrotaterandom()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool HitEffectScale = 9;
    if (has_hiteffectscale()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 HitEffectRotateRangeX = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->hiteffectrotaterangex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hiteffectrotaterangex(i));
    }
    total_size += 1 * this->hiteffectrotaterangex_size() + data_size;
  }

  // repeated int32 HitEffectRotateRangeY = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->hiteffectrotaterangey_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hiteffectrotaterangey(i));
    }
    total_size += 1 * this->hiteffectrotaterangey_size() + data_size;
  }

  // repeated int32 HitEffectScaleRange = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->hiteffectscalerange_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hiteffectscalerange(i));
    }
    total_size += 1 * this->hiteffectscalerange_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HitEffectData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HitEffectData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HitEffectData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HitEffectData::MergeFrom(const HitEffectData& from) {
  GOOGLE_CHECK_NE(&from, this);
  hiteffectrotaterangex_.MergeFrom(from.hiteffectrotaterangex_);
  hiteffectrotaterangey_.MergeFrom(from.hiteffectrotaterangey_);
  hiteffectscalerange_.MergeFrom(from.hiteffectscalerange_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_effectparent()) {
      set_effectparent(from.effectparent());
    }
    if (from.has_hiteffect()) {
      set_hiteffect(from.hiteffect());
    }
    if (from.has_hitsound()) {
      set_hitsound(from.hitsound());
    }
    if (from.has_hiteffectfollow()) {
      set_hiteffectfollow(from.hiteffectfollow());
    }
    if (from.has_hiteffectflip()) {
      set_hiteffectflip(from.hiteffectflip());
    }
    if (from.has_hiteffectrotaterandom()) {
      set_hiteffectrotaterandom(from.hiteffectrotaterandom());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hiteffectscale()) {
      set_hiteffectscale(from.hiteffectscale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HitEffectData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HitEffectData::CopyFrom(const HitEffectData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitEffectData::IsInitialized() const {

  return true;
}

void HitEffectData::Swap(HitEffectData* other) {
  if (other != this) {
    std::swap(effectparent_, other->effectparent_);
    std::swap(hiteffect_, other->hiteffect_);
    std::swap(hitsound_, other->hitsound_);
    std::swap(hiteffectfollow_, other->hiteffectfollow_);
    std::swap(hiteffectflip_, other->hiteffectflip_);
    std::swap(hiteffectrotaterandom_, other->hiteffectrotaterandom_);
    hiteffectrotaterangex_.Swap(&other->hiteffectrotaterangex_);
    hiteffectrotaterangey_.Swap(&other->hiteffectrotaterangey_);
    std::swap(hiteffectscale_, other->hiteffectscale_);
    hiteffectscalerange_.Swap(&other->hiteffectscalerange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HitEffectData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HitEffectData_descriptor_;
  metadata.reflection = HitEffectData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillCurveAcceleration::kSpeedFieldNumber;
const int SkillCurveAcceleration::kRateFieldNumber;
#endif  // !_MSC_VER

SkillCurveAcceleration::SkillCurveAcceleration()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillCurveAcceleration)
}

void SkillCurveAcceleration::InitAsDefaultInstance() {
}

SkillCurveAcceleration::SkillCurveAcceleration(const SkillCurveAcceleration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillCurveAcceleration)
}

void SkillCurveAcceleration::SharedCtor() {
  _cached_size_ = 0;
  speed_ = 0;
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillCurveAcceleration::~SkillCurveAcceleration() {
  // @@protoc_insertion_point(destructor:pb.SkillCurveAcceleration)
  SharedDtor();
}

void SkillCurveAcceleration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillCurveAcceleration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillCurveAcceleration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillCurveAcceleration_descriptor_;
}

const SkillCurveAcceleration& SkillCurveAcceleration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillBaseData_2eproto();
  return *default_instance_;
}

SkillCurveAcceleration* SkillCurveAcceleration::default_instance_ = NULL;

SkillCurveAcceleration* SkillCurveAcceleration::New() const {
  return new SkillCurveAcceleration;
}

void SkillCurveAcceleration::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillCurveAcceleration*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(speed_, rate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillCurveAcceleration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillCurveAcceleration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Speed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Rate;
        break;
      }

      // optional int32 Rate = 2;
      case 2: {
        if (tag == 16) {
         parse_Rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillCurveAcceleration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillCurveAcceleration)
  return false;
#undef DO_
}

void SkillCurveAcceleration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillCurveAcceleration)
  // optional int32 Speed = 1;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->speed(), output);
  }

  // optional int32 Rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillCurveAcceleration)
}

::google::protobuf::uint8* SkillCurveAcceleration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillCurveAcceleration)
  // optional int32 Speed = 1;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->speed(), target);
  }

  // optional int32 Rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillCurveAcceleration)
  return target;
}

int SkillCurveAcceleration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Speed = 1;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 Rate = 2;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillCurveAcceleration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillCurveAcceleration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillCurveAcceleration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillCurveAcceleration::MergeFrom(const SkillCurveAcceleration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillCurveAcceleration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillCurveAcceleration::CopyFrom(const SkillCurveAcceleration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillCurveAcceleration::IsInitialized() const {

  return true;
}

void SkillCurveAcceleration::Swap(SkillCurveAcceleration* other) {
  if (other != this) {
    std::swap(speed_, other->speed_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillCurveAcceleration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillCurveAcceleration_descriptor_;
  metadata.reflection = SkillCurveAcceleration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillCurveData::kIsCurveFieldNumber;
const int SkillCurveData::kCurveTypeFieldNumber;
const int SkillCurveData::kCurveRadiuFieldNumber;
const int SkillCurveData::kCurveParentFieldNumber;
const int SkillCurveData::kCurveEffectFieldNumber;
const int SkillCurveData::kNoneCurveEffetFieldNumber;
const int SkillCurveData::kIsTrackCurveFieldNumber;
const int SkillCurveData::kIsThroughCurveFieldNumber;
const int SkillCurveData::kMaxThroughNumFieldNumber;
const int SkillCurveData::kIsDisappearOnCollisionFieldNumber;
const int SkillCurveData::kCollisionDetectionTypeFieldNumber;
const int SkillCurveData::kCurveSpeedFieldNumber;
const int SkillCurveData::kCurveAccelerationFieldNumber;
const int SkillCurveData::kIsCurveBackFieldNumber;
const int SkillCurveData::kEffectOnBackFieldNumber;
const int SkillCurveData::kCurveBackSpeedFieldNumber;
const int SkillCurveData::kCurveBackAccelerationFieldNumber;
const int SkillCurveData::kAngleOffsetFieldNumber;
const int SkillCurveData::kControllerOffsetFieldNumber;
const int SkillCurveData::kCurveLastTimeFieldNumber;
const int SkillCurveData::kThroughCollisionDetectionTypeFieldNumber;
const int SkillCurveData::kHeadCurveEffectFieldNumber;
const int SkillCurveData::kIsFixedTimeFieldNumber;
const int SkillCurveData::kCurveFlyTimeFieldNumber;
const int SkillCurveData::kNoVerticalMoveFieldNumber;
const int SkillCurveData::kIsLineFieldNumber;
const int SkillCurveData::kShapeParam1FieldNumber;
const int SkillCurveData::kDisappearOnReachRefTargetFieldNumber;
const int SkillCurveData::kReceiverCurveParentFieldNumber;
#endif  // !_MSC_VER

SkillCurveData::SkillCurveData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillCurveData)
}

void SkillCurveData::InitAsDefaultInstance() {
}

SkillCurveData::SkillCurveData(const SkillCurveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillCurveData)
}

void SkillCurveData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  iscurve_ = 0;
  curvetype_ = 0;
  curveradiu_ = 0;
  curveparent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curveeffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonecurveeffet_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  istrackcurve_ = false;
  isthroughcurve_ = false;
  maxthroughnum_ = 0;
  isdisappearoncollision_ = false;
  collisiondetectiontype_ = 0;
  curvespeed_ = 0;
  iscurveback_ = false;
  effectonback_ = false;
  curvebackspeed_ = 0;
  angleoffset_ = 0;
  curvelasttime_ = 0;
  throughcollisiondetectiontype_ = 0;
  headcurveeffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isfixedtime_ = false;
  curveflytime_ = 0;
  noverticalmove_ = false;
  isline_ = false;
  shapeparam1_ = 0;
  disappearonreachreftarget_ = false;
  receivercurveparent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillCurveData::~SkillCurveData() {
  // @@protoc_insertion_point(destructor:pb.SkillCurveData)
  SharedDtor();
}

void SkillCurveData::SharedDtor() {
  if (curveparent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete curveparent_;
  }
  if (curveeffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete curveeffect_;
  }
  if (nonecurveeffet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nonecurveeffet_;
  }
  if (headcurveeffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete headcurveeffect_;
  }
  if (receivercurveparent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receivercurveparent_;
  }
  if (this != default_instance_) {
  }
}

void SkillCurveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillCurveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillCurveData_descriptor_;
}

const SkillCurveData& SkillCurveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillBaseData_2eproto();
  return *default_instance_;
}

SkillCurveData* SkillCurveData::default_instance_ = NULL;

SkillCurveData* SkillCurveData::New() const {
  return new SkillCurveData;
}

void SkillCurveData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillCurveData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(iscurve_, curvetype_);
    ZR_(istrackcurve_, isthroughcurve_);
    curveradiu_ = 0;
    if (has_curveparent()) {
      if (curveparent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        curveparent_->clear();
      }
    }
    if (has_curveeffect()) {
      if (curveeffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        curveeffect_->clear();
      }
    }
    if (has_nonecurveeffet()) {
      if (nonecurveeffet_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nonecurveeffet_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 61184) {
    ZR_(isdisappearoncollision_, collisiondetectiontype_);
    ZR_(curvespeed_, curvebackspeed_);
    maxthroughnum_ = 0;
    effectonback_ = false;
  }
  if (_has_bits_[16 / 32] & 16384000) {
    ZR_(angleoffset_, curvelasttime_);
    throughcollisiondetectiontype_ = 0;
    if (has_headcurveeffect()) {
      if (headcurveeffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        headcurveeffect_->clear();
      }
    }
    isfixedtime_ = false;
    curveflytime_ = 0;
  }
  if (_has_bits_[24 / 32] & 520093696) {
    ZR_(noverticalmove_, isline_);
    shapeparam1_ = 0;
    disappearonreachreftarget_ = false;
    if (has_receivercurveparent()) {
      if (receivercurveparent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        receivercurveparent_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  curveacceleration_.Clear();
  curvebackacceleration_.Clear();
  controlleroffset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillCurveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillCurveData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 IsCurve = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscurve_)));
          set_has_iscurve();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CurveType;
        break;
      }

      // optional int32 CurveType = 2;
      case 2: {
        if (tag == 16) {
         parse_CurveType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curvetype_)));
          set_has_curvetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CurveRadiu;
        break;
      }

      // optional int32 CurveRadiu = 3;
      case 3: {
        if (tag == 24) {
         parse_CurveRadiu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curveradiu_)));
          set_has_curveradiu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CurveParent;
        break;
      }

      // optional string CurveParent = 4;
      case 4: {
        if (tag == 34) {
         parse_CurveParent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_curveparent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->curveparent().data(), this->curveparent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curveparent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_CurveEffect;
        break;
      }

      // optional string CurveEffect = 5;
      case 5: {
        if (tag == 42) {
         parse_CurveEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_curveeffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->curveeffect().data(), this->curveeffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curveeffect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_NoneCurveEffet;
        break;
      }

      // optional string NoneCurveEffet = 6;
      case 6: {
        if (tag == 50) {
         parse_NoneCurveEffet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nonecurveeffet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nonecurveeffet().data(), this->nonecurveeffet().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nonecurveeffet");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_IsTrackCurve;
        break;
      }

      // optional bool IsTrackCurve = 7;
      case 7: {
        if (tag == 56) {
         parse_IsTrackCurve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrackcurve_)));
          set_has_istrackcurve();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_IsThroughCurve;
        break;
      }

      // optional bool IsThroughCurve = 8;
      case 8: {
        if (tag == 64) {
         parse_IsThroughCurve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isthroughcurve_)));
          set_has_isthroughcurve();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_MaxThroughNum;
        break;
      }

      // optional int32 MaxThroughNum = 9;
      case 9: {
        if (tag == 72) {
         parse_MaxThroughNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxthroughnum_)));
          set_has_maxthroughnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_IsDisappearOnCollision;
        break;
      }

      // optional bool IsDisappearOnCollision = 10;
      case 10: {
        if (tag == 80) {
         parse_IsDisappearOnCollision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdisappearoncollision_)));
          set_has_isdisappearoncollision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_CollisionDetectionType;
        break;
      }

      // optional int32 CollisionDetectionType = 11;
      case 11: {
        if (tag == 88) {
         parse_CollisionDetectionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collisiondetectiontype_)));
          set_has_collisiondetectiontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_CurveSpeed;
        break;
      }

      // optional int32 CurveSpeed = 12;
      case 12: {
        if (tag == 96) {
         parse_CurveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curvespeed_)));
          set_has_curvespeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_CurveAcceleration;
        break;
      }

      // repeated .pb.SkillCurveAcceleration CurveAcceleration = 13;
      case 13: {
        if (tag == 106) {
         parse_CurveAcceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_curveacceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_CurveAcceleration;
        if (input->ExpectTag(112)) goto parse_IsCurveBack;
        break;
      }

      // optional bool IsCurveBack = 14;
      case 14: {
        if (tag == 112) {
         parse_IsCurveBack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscurveback_)));
          set_has_iscurveback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_EffectOnBack;
        break;
      }

      // optional bool EffectOnBack = 15;
      case 15: {
        if (tag == 120) {
         parse_EffectOnBack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &effectonback_)));
          set_has_effectonback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_CurveBackSpeed;
        break;
      }

      // optional int32 CurveBackSpeed = 16;
      case 16: {
        if (tag == 128) {
         parse_CurveBackSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curvebackspeed_)));
          set_has_curvebackspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_CurveBackAcceleration;
        break;
      }

      // repeated .pb.SkillCurveAcceleration CurveBackAcceleration = 17;
      case 17: {
        if (tag == 138) {
         parse_CurveBackAcceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_curvebackacceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_CurveBackAcceleration;
        if (input->ExpectTag(144)) goto parse_AngleOffset;
        break;
      }

      // optional int32 AngleOffset = 18;
      case 18: {
        if (tag == 144) {
         parse_AngleOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angleoffset_)));
          set_has_angleoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_ControllerOffset;
        break;
      }

      // repeated int32 ControllerOffset = 19;
      case 19: {
        if (tag == 152) {
         parse_ControllerOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_controlleroffset())));
        } else if (tag == 154) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_controlleroffset())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_ControllerOffset;
        if (input->ExpectTag(160)) goto parse_CurveLastTime;
        break;
      }

      // optional int32 CurveLastTime = 20;
      case 20: {
        if (tag == 160) {
         parse_CurveLastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curvelasttime_)));
          set_has_curvelasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_ThroughCollisionDetectionType;
        break;
      }

      // optional int32 ThroughCollisionDetectionType = 21;
      case 21: {
        if (tag == 168) {
         parse_ThroughCollisionDetectionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &throughcollisiondetectiontype_)));
          set_has_throughcollisiondetectiontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_HeadCurveEffect;
        break;
      }

      // optional string HeadCurveEffect = 22;
      case 22: {
        if (tag == 178) {
         parse_HeadCurveEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headcurveeffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headcurveeffect().data(), this->headcurveeffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "headcurveeffect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_IsFixedTime;
        break;
      }

      // optional bool IsFixedTime = 23;
      case 23: {
        if (tag == 184) {
         parse_IsFixedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfixedtime_)));
          set_has_isfixedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_CurveFlyTime;
        break;
      }

      // optional int32 CurveFlyTime = 24;
      case 24: {
        if (tag == 192) {
         parse_CurveFlyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curveflytime_)));
          set_has_curveflytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_NoVerticalMove;
        break;
      }

      // optional bool NoVerticalMove = 25;
      case 25: {
        if (tag == 200) {
         parse_NoVerticalMove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &noverticalmove_)));
          set_has_noverticalmove();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_IsLine;
        break;
      }

      // optional bool IsLine = 26;
      case 26: {
        if (tag == 208) {
         parse_IsLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isline_)));
          set_has_isline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_ShapeParam1;
        break;
      }

      // optional int32 ShapeParam1 = 27;
      case 27: {
        if (tag == 216) {
         parse_ShapeParam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shapeparam1_)));
          set_has_shapeparam1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_DisappearOnReachRefTarget;
        break;
      }

      // optional bool DisappearOnReachRefTarget = 28;
      case 28: {
        if (tag == 224) {
         parse_DisappearOnReachRefTarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disappearonreachreftarget_)));
          set_has_disappearonreachreftarget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_ReceiverCurveParent;
        break;
      }

      // optional string ReceiverCurveParent = 29;
      case 29: {
        if (tag == 234) {
         parse_ReceiverCurveParent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receivercurveparent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->receivercurveparent().data(), this->receivercurveparent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "receivercurveparent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillCurveData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillCurveData)
  return false;
#undef DO_
}

void SkillCurveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillCurveData)
  // optional int32 IsCurve = 1;
  if (has_iscurve()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iscurve(), output);
  }

  // optional int32 CurveType = 2;
  if (has_curvetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curvetype(), output);
  }

  // optional int32 CurveRadiu = 3;
  if (has_curveradiu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curveradiu(), output);
  }

  // optional string CurveParent = 4;
  if (has_curveparent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curveparent().data(), this->curveparent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curveparent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->curveparent(), output);
  }

  // optional string CurveEffect = 5;
  if (has_curveeffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curveeffect().data(), this->curveeffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curveeffect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->curveeffect(), output);
  }

  // optional string NoneCurveEffet = 6;
  if (has_nonecurveeffet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nonecurveeffet().data(), this->nonecurveeffet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nonecurveeffet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->nonecurveeffet(), output);
  }

  // optional bool IsTrackCurve = 7;
  if (has_istrackcurve()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->istrackcurve(), output);
  }

  // optional bool IsThroughCurve = 8;
  if (has_isthroughcurve()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isthroughcurve(), output);
  }

  // optional int32 MaxThroughNum = 9;
  if (has_maxthroughnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->maxthroughnum(), output);
  }

  // optional bool IsDisappearOnCollision = 10;
  if (has_isdisappearoncollision()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isdisappearoncollision(), output);
  }

  // optional int32 CollisionDetectionType = 11;
  if (has_collisiondetectiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->collisiondetectiontype(), output);
  }

  // optional int32 CurveSpeed = 12;
  if (has_curvespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->curvespeed(), output);
  }

  // repeated .pb.SkillCurveAcceleration CurveAcceleration = 13;
  for (int i = 0; i < this->curveacceleration_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->curveacceleration(i), output);
  }

  // optional bool IsCurveBack = 14;
  if (has_iscurveback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->iscurveback(), output);
  }

  // optional bool EffectOnBack = 15;
  if (has_effectonback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->effectonback(), output);
  }

  // optional int32 CurveBackSpeed = 16;
  if (has_curvebackspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->curvebackspeed(), output);
  }

  // repeated .pb.SkillCurveAcceleration CurveBackAcceleration = 17;
  for (int i = 0; i < this->curvebackacceleration_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->curvebackacceleration(i), output);
  }

  // optional int32 AngleOffset = 18;
  if (has_angleoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->angleoffset(), output);
  }

  // repeated int32 ControllerOffset = 19;
  for (int i = 0; i < this->controlleroffset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->controlleroffset(i), output);
  }

  // optional int32 CurveLastTime = 20;
  if (has_curvelasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->curvelasttime(), output);
  }

  // optional int32 ThroughCollisionDetectionType = 21;
  if (has_throughcollisiondetectiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->throughcollisiondetectiontype(), output);
  }

  // optional string HeadCurveEffect = 22;
  if (has_headcurveeffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headcurveeffect().data(), this->headcurveeffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "headcurveeffect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->headcurveeffect(), output);
  }

  // optional bool IsFixedTime = 23;
  if (has_isfixedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->isfixedtime(), output);
  }

  // optional int32 CurveFlyTime = 24;
  if (has_curveflytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->curveflytime(), output);
  }

  // optional bool NoVerticalMove = 25;
  if (has_noverticalmove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->noverticalmove(), output);
  }

  // optional bool IsLine = 26;
  if (has_isline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->isline(), output);
  }

  // optional int32 ShapeParam1 = 27;
  if (has_shapeparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->shapeparam1(), output);
  }

  // optional bool DisappearOnReachRefTarget = 28;
  if (has_disappearonreachreftarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->disappearonreachreftarget(), output);
  }

  // optional string ReceiverCurveParent = 29;
  if (has_receivercurveparent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receivercurveparent().data(), this->receivercurveparent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "receivercurveparent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->receivercurveparent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillCurveData)
}

::google::protobuf::uint8* SkillCurveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillCurveData)
  // optional int32 IsCurve = 1;
  if (has_iscurve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iscurve(), target);
  }

  // optional int32 CurveType = 2;
  if (has_curvetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curvetype(), target);
  }

  // optional int32 CurveRadiu = 3;
  if (has_curveradiu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curveradiu(), target);
  }

  // optional string CurveParent = 4;
  if (has_curveparent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curveparent().data(), this->curveparent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curveparent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->curveparent(), target);
  }

  // optional string CurveEffect = 5;
  if (has_curveeffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curveeffect().data(), this->curveeffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curveeffect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->curveeffect(), target);
  }

  // optional string NoneCurveEffet = 6;
  if (has_nonecurveeffet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nonecurveeffet().data(), this->nonecurveeffet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nonecurveeffet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nonecurveeffet(), target);
  }

  // optional bool IsTrackCurve = 7;
  if (has_istrackcurve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->istrackcurve(), target);
  }

  // optional bool IsThroughCurve = 8;
  if (has_isthroughcurve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isthroughcurve(), target);
  }

  // optional int32 MaxThroughNum = 9;
  if (has_maxthroughnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->maxthroughnum(), target);
  }

  // optional bool IsDisappearOnCollision = 10;
  if (has_isdisappearoncollision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isdisappearoncollision(), target);
  }

  // optional int32 CollisionDetectionType = 11;
  if (has_collisiondetectiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->collisiondetectiontype(), target);
  }

  // optional int32 CurveSpeed = 12;
  if (has_curvespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->curvespeed(), target);
  }

  // repeated .pb.SkillCurveAcceleration CurveAcceleration = 13;
  for (int i = 0; i < this->curveacceleration_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->curveacceleration(i), target);
  }

  // optional bool IsCurveBack = 14;
  if (has_iscurveback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->iscurveback(), target);
  }

  // optional bool EffectOnBack = 15;
  if (has_effectonback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->effectonback(), target);
  }

  // optional int32 CurveBackSpeed = 16;
  if (has_curvebackspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->curvebackspeed(), target);
  }

  // repeated .pb.SkillCurveAcceleration CurveBackAcceleration = 17;
  for (int i = 0; i < this->curvebackacceleration_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->curvebackacceleration(i), target);
  }

  // optional int32 AngleOffset = 18;
  if (has_angleoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->angleoffset(), target);
  }

  // repeated int32 ControllerOffset = 19;
  for (int i = 0; i < this->controlleroffset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->controlleroffset(i), target);
  }

  // optional int32 CurveLastTime = 20;
  if (has_curvelasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->curvelasttime(), target);
  }

  // optional int32 ThroughCollisionDetectionType = 21;
  if (has_throughcollisiondetectiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->throughcollisiondetectiontype(), target);
  }

  // optional string HeadCurveEffect = 22;
  if (has_headcurveeffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headcurveeffect().data(), this->headcurveeffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "headcurveeffect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->headcurveeffect(), target);
  }

  // optional bool IsFixedTime = 23;
  if (has_isfixedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->isfixedtime(), target);
  }

  // optional int32 CurveFlyTime = 24;
  if (has_curveflytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->curveflytime(), target);
  }

  // optional bool NoVerticalMove = 25;
  if (has_noverticalmove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->noverticalmove(), target);
  }

  // optional bool IsLine = 26;
  if (has_isline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->isline(), target);
  }

  // optional int32 ShapeParam1 = 27;
  if (has_shapeparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->shapeparam1(), target);
  }

  // optional bool DisappearOnReachRefTarget = 28;
  if (has_disappearonreachreftarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->disappearonreachreftarget(), target);
  }

  // optional string ReceiverCurveParent = 29;
  if (has_receivercurveparent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receivercurveparent().data(), this->receivercurveparent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "receivercurveparent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->receivercurveparent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillCurveData)
  return target;
}

int SkillCurveData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 IsCurve = 1;
    if (has_iscurve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscurve());
    }

    // optional int32 CurveType = 2;
    if (has_curvetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curvetype());
    }

    // optional int32 CurveRadiu = 3;
    if (has_curveradiu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curveradiu());
    }

    // optional string CurveParent = 4;
    if (has_curveparent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->curveparent());
    }

    // optional string CurveEffect = 5;
    if (has_curveeffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->curveeffect());
    }

    // optional string NoneCurveEffet = 6;
    if (has_nonecurveeffet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nonecurveeffet());
    }

    // optional bool IsTrackCurve = 7;
    if (has_istrackcurve()) {
      total_size += 1 + 1;
    }

    // optional bool IsThroughCurve = 8;
    if (has_isthroughcurve()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 MaxThroughNum = 9;
    if (has_maxthroughnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxthroughnum());
    }

    // optional bool IsDisappearOnCollision = 10;
    if (has_isdisappearoncollision()) {
      total_size += 1 + 1;
    }

    // optional int32 CollisionDetectionType = 11;
    if (has_collisiondetectiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collisiondetectiontype());
    }

    // optional int32 CurveSpeed = 12;
    if (has_curvespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curvespeed());
    }

    // optional bool IsCurveBack = 14;
    if (has_iscurveback()) {
      total_size += 1 + 1;
    }

    // optional bool EffectOnBack = 15;
    if (has_effectonback()) {
      total_size += 1 + 1;
    }

    // optional int32 CurveBackSpeed = 16;
    if (has_curvebackspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curvebackspeed());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional int32 AngleOffset = 18;
    if (has_angleoffset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angleoffset());
    }

    // optional int32 CurveLastTime = 20;
    if (has_curvelasttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curvelasttime());
    }

    // optional int32 ThroughCollisionDetectionType = 21;
    if (has_throughcollisiondetectiontype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->throughcollisiondetectiontype());
    }

    // optional string HeadCurveEffect = 22;
    if (has_headcurveeffect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headcurveeffect());
    }

    // optional bool IsFixedTime = 23;
    if (has_isfixedtime()) {
      total_size += 2 + 1;
    }

    // optional int32 CurveFlyTime = 24;
    if (has_curveflytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curveflytime());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool NoVerticalMove = 25;
    if (has_noverticalmove()) {
      total_size += 2 + 1;
    }

    // optional bool IsLine = 26;
    if (has_isline()) {
      total_size += 2 + 1;
    }

    // optional int32 ShapeParam1 = 27;
    if (has_shapeparam1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shapeparam1());
    }

    // optional bool DisappearOnReachRefTarget = 28;
    if (has_disappearonreachreftarget()) {
      total_size += 2 + 1;
    }

    // optional string ReceiverCurveParent = 29;
    if (has_receivercurveparent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receivercurveparent());
    }

  }
  // repeated .pb.SkillCurveAcceleration CurveAcceleration = 13;
  total_size += 1 * this->curveacceleration_size();
  for (int i = 0; i < this->curveacceleration_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->curveacceleration(i));
  }

  // repeated .pb.SkillCurveAcceleration CurveBackAcceleration = 17;
  total_size += 2 * this->curvebackacceleration_size();
  for (int i = 0; i < this->curvebackacceleration_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->curvebackacceleration(i));
  }

  // repeated int32 ControllerOffset = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->controlleroffset_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->controlleroffset(i));
    }
    total_size += 2 * this->controlleroffset_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillCurveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillCurveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillCurveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillCurveData::MergeFrom(const SkillCurveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  curveacceleration_.MergeFrom(from.curveacceleration_);
  curvebackacceleration_.MergeFrom(from.curvebackacceleration_);
  controlleroffset_.MergeFrom(from.controlleroffset_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iscurve()) {
      set_iscurve(from.iscurve());
    }
    if (from.has_curvetype()) {
      set_curvetype(from.curvetype());
    }
    if (from.has_curveradiu()) {
      set_curveradiu(from.curveradiu());
    }
    if (from.has_curveparent()) {
      set_curveparent(from.curveparent());
    }
    if (from.has_curveeffect()) {
      set_curveeffect(from.curveeffect());
    }
    if (from.has_nonecurveeffet()) {
      set_nonecurveeffet(from.nonecurveeffet());
    }
    if (from.has_istrackcurve()) {
      set_istrackcurve(from.istrackcurve());
    }
    if (from.has_isthroughcurve()) {
      set_isthroughcurve(from.isthroughcurve());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxthroughnum()) {
      set_maxthroughnum(from.maxthroughnum());
    }
    if (from.has_isdisappearoncollision()) {
      set_isdisappearoncollision(from.isdisappearoncollision());
    }
    if (from.has_collisiondetectiontype()) {
      set_collisiondetectiontype(from.collisiondetectiontype());
    }
    if (from.has_curvespeed()) {
      set_curvespeed(from.curvespeed());
    }
    if (from.has_iscurveback()) {
      set_iscurveback(from.iscurveback());
    }
    if (from.has_effectonback()) {
      set_effectonback(from.effectonback());
    }
    if (from.has_curvebackspeed()) {
      set_curvebackspeed(from.curvebackspeed());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_angleoffset()) {
      set_angleoffset(from.angleoffset());
    }
    if (from.has_curvelasttime()) {
      set_curvelasttime(from.curvelasttime());
    }
    if (from.has_throughcollisiondetectiontype()) {
      set_throughcollisiondetectiontype(from.throughcollisiondetectiontype());
    }
    if (from.has_headcurveeffect()) {
      set_headcurveeffect(from.headcurveeffect());
    }
    if (from.has_isfixedtime()) {
      set_isfixedtime(from.isfixedtime());
    }
    if (from.has_curveflytime()) {
      set_curveflytime(from.curveflytime());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_noverticalmove()) {
      set_noverticalmove(from.noverticalmove());
    }
    if (from.has_isline()) {
      set_isline(from.isline());
    }
    if (from.has_shapeparam1()) {
      set_shapeparam1(from.shapeparam1());
    }
    if (from.has_disappearonreachreftarget()) {
      set_disappearonreachreftarget(from.disappearonreachreftarget());
    }
    if (from.has_receivercurveparent()) {
      set_receivercurveparent(from.receivercurveparent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillCurveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillCurveData::CopyFrom(const SkillCurveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillCurveData::IsInitialized() const {

  return true;
}

void SkillCurveData::Swap(SkillCurveData* other) {
  if (other != this) {
    std::swap(iscurve_, other->iscurve_);
    std::swap(curvetype_, other->curvetype_);
    std::swap(curveradiu_, other->curveradiu_);
    std::swap(curveparent_, other->curveparent_);
    std::swap(curveeffect_, other->curveeffect_);
    std::swap(nonecurveeffet_, other->nonecurveeffet_);
    std::swap(istrackcurve_, other->istrackcurve_);
    std::swap(isthroughcurve_, other->isthroughcurve_);
    std::swap(maxthroughnum_, other->maxthroughnum_);
    std::swap(isdisappearoncollision_, other->isdisappearoncollision_);
    std::swap(collisiondetectiontype_, other->collisiondetectiontype_);
    std::swap(curvespeed_, other->curvespeed_);
    curveacceleration_.Swap(&other->curveacceleration_);
    std::swap(iscurveback_, other->iscurveback_);
    std::swap(effectonback_, other->effectonback_);
    std::swap(curvebackspeed_, other->curvebackspeed_);
    curvebackacceleration_.Swap(&other->curvebackacceleration_);
    std::swap(angleoffset_, other->angleoffset_);
    controlleroffset_.Swap(&other->controlleroffset_);
    std::swap(curvelasttime_, other->curvelasttime_);
    std::swap(throughcollisiondetectiontype_, other->throughcollisiondetectiontype_);
    std::swap(headcurveeffect_, other->headcurveeffect_);
    std::swap(isfixedtime_, other->isfixedtime_);
    std::swap(curveflytime_, other->curveflytime_);
    std::swap(noverticalmove_, other->noverticalmove_);
    std::swap(isline_, other->isline_);
    std::swap(shapeparam1_, other->shapeparam1_);
    std::swap(disappearonreachreftarget_, other->disappearonreachreftarget_);
    std::swap(receivercurveparent_, other->receivercurveparent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillCurveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillCurveData_descriptor_;
  metadata.reflection = SkillCurveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillCastType::kCastTypeFieldNumber;
const int SkillCastType::kEventMajorFieldNumber;
const int SkillCastType::kEventRelationFieldNumber;
const int SkillCastType::kEventSubFieldNumber;
const int SkillCastType::kTriggerBuffIDFieldNumber;
const int SkillCastType::kTriggerBuffLayerFieldNumber;
const int SkillCastType::kTriggerSkillArrFieldNumber;
const int SkillCastType::kTriggerChanceFieldNumber;
const int SkillCastType::kEventSubSkillArrFieldNumber;
const int SkillCastType::kNeedInterruptFieldNumber;
const int SkillCastType::kRecordBuffIdFieldNumber;
const int SkillCastType::kRecordThresholdFieldNumber;
const int SkillCastType::kEventBuffSubArrFieldNumber;
const int SkillCastType::kTriggerChanceCoefFieldNumber;
const int SkillCastType::kParam1FieldNumber;
const int SkillCastType::kParam2FieldNumber;
#endif  // !_MSC_VER

SkillCastType::SkillCastType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillCastType)
}

void SkillCastType::InitAsDefaultInstance() {
}

SkillCastType::SkillCastType(const SkillCastType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillCastType)
}

void SkillCastType::SharedCtor() {
  _cached_size_ = 0;
  casttype_ = 0;
  eventmajor_ = 0;
  eventrelation_ = 0;
  eventsub_ = 0;
  triggerbuffid_ = 0;
  triggerbufflayer_ = 0;
  triggerchance_ = 0;
  needinterrupt_ = false;
  recordbuffid_ = 0;
  recordthreshold_ = 0;
  triggerchancecoef_ = 0;
  param1_ = 0;
  param2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillCastType::~SkillCastType() {
  // @@protoc_insertion_point(destructor:pb.SkillCastType)
  SharedDtor();
}

void SkillCastType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillCastType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillCastType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillCastType_descriptor_;
}

const SkillCastType& SkillCastType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillBaseData_2eproto();
  return *default_instance_;
}

SkillCastType* SkillCastType::default_instance_ = NULL;

SkillCastType* SkillCastType::New() const {
  return new SkillCastType;
}

void SkillCastType::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillCastType*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(casttype_, triggerbufflayer_);
    triggerchance_ = 0;
  }
  if (_has_bits_[8 / 32] & 60928) {
    ZR_(needinterrupt_, recordthreshold_);
    ZR_(triggerchancecoef_, param2_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  triggerskillarr_.Clear();
  eventsubskillarr_.Clear();
  eventbuffsubarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillCastType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillCastType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CastType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &casttype_)));
          set_has_casttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EventMajor;
        break;
      }

      // optional int32 EventMajor = 2;
      case 2: {
        if (tag == 16) {
         parse_EventMajor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventmajor_)));
          set_has_eventmajor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EventRelation;
        break;
      }

      // optional int32 EventRelation = 3;
      case 3: {
        if (tag == 24) {
         parse_EventRelation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventrelation_)));
          set_has_eventrelation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_EventSub;
        break;
      }

      // optional int32 EventSub = 4;
      case 4: {
        if (tag == 32) {
         parse_EventSub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventsub_)));
          set_has_eventsub();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_TriggerBuffID;
        break;
      }

      // optional int32 TriggerBuffID = 5;
      case 5: {
        if (tag == 40) {
         parse_TriggerBuffID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggerbuffid_)));
          set_has_triggerbuffid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_TriggerBuffLayer;
        break;
      }

      // optional int32 TriggerBuffLayer = 6;
      case 6: {
        if (tag == 48) {
         parse_TriggerBuffLayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggerbufflayer_)));
          set_has_triggerbufflayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_TriggerSkillArr;
        break;
      }

      // repeated int32 TriggerSkillArr = 7;
      case 7: {
        if (tag == 56) {
         parse_TriggerSkillArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_triggerskillarr())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_triggerskillarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_TriggerSkillArr;
        if (input->ExpectTag(64)) goto parse_TriggerChance;
        break;
      }

      // optional int32 TriggerChance = 8;
      case 8: {
        if (tag == 64) {
         parse_TriggerChance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggerchance_)));
          set_has_triggerchance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_EventSubSkillArr;
        break;
      }

      // repeated int32 EventSubSkillArr = 9;
      case 9: {
        if (tag == 72) {
         parse_EventSubSkillArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_eventsubskillarr())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_eventsubskillarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_EventSubSkillArr;
        if (input->ExpectTag(80)) goto parse_NeedInterrupt;
        break;
      }

      // optional bool NeedInterrupt = 10;
      case 10: {
        if (tag == 80) {
         parse_NeedInterrupt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needinterrupt_)));
          set_has_needinterrupt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_RecordBuffId;
        break;
      }

      // optional int32 RecordBuffId = 11;
      case 11: {
        if (tag == 88) {
         parse_RecordBuffId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recordbuffid_)));
          set_has_recordbuffid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_RecordThreshold;
        break;
      }

      // optional int32 RecordThreshold = 12;
      case 12: {
        if (tag == 96) {
         parse_RecordThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recordthreshold_)));
          set_has_recordthreshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_EventBuffSubArr;
        break;
      }

      // repeated int32 EventBuffSubArr = 13;
      case 13: {
        if (tag == 104) {
         parse_EventBuffSubArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_eventbuffsubarr())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_eventbuffsubarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_EventBuffSubArr;
        if (input->ExpectTag(112)) goto parse_TriggerChanceCoef;
        break;
      }

      // optional int32 TriggerChanceCoef = 14;
      case 14: {
        if (tag == 112) {
         parse_TriggerChanceCoef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggerchancecoef_)));
          set_has_triggerchancecoef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_Param1;
        break;
      }

      // optional int32 Param1 = 15;
      case 15: {
        if (tag == 120) {
         parse_Param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_Param2;
        break;
      }

      // optional int32 Param2 = 16;
      case 16: {
        if (tag == 128) {
         parse_Param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillCastType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillCastType)
  return false;
#undef DO_
}

void SkillCastType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillCastType)
  // optional int32 CastType = 1;
  if (has_casttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->casttype(), output);
  }

  // optional int32 EventMajor = 2;
  if (has_eventmajor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eventmajor(), output);
  }

  // optional int32 EventRelation = 3;
  if (has_eventrelation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eventrelation(), output);
  }

  // optional int32 EventSub = 4;
  if (has_eventsub()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->eventsub(), output);
  }

  // optional int32 TriggerBuffID = 5;
  if (has_triggerbuffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->triggerbuffid(), output);
  }

  // optional int32 TriggerBuffLayer = 6;
  if (has_triggerbufflayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->triggerbufflayer(), output);
  }

  // repeated int32 TriggerSkillArr = 7;
  for (int i = 0; i < this->triggerskillarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->triggerskillarr(i), output);
  }

  // optional int32 TriggerChance = 8;
  if (has_triggerchance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->triggerchance(), output);
  }

  // repeated int32 EventSubSkillArr = 9;
  for (int i = 0; i < this->eventsubskillarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->eventsubskillarr(i), output);
  }

  // optional bool NeedInterrupt = 10;
  if (has_needinterrupt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->needinterrupt(), output);
  }

  // optional int32 RecordBuffId = 11;
  if (has_recordbuffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->recordbuffid(), output);
  }

  // optional int32 RecordThreshold = 12;
  if (has_recordthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->recordthreshold(), output);
  }

  // repeated int32 EventBuffSubArr = 13;
  for (int i = 0; i < this->eventbuffsubarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->eventbuffsubarr(i), output);
  }

  // optional int32 TriggerChanceCoef = 14;
  if (has_triggerchancecoef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->triggerchancecoef(), output);
  }

  // optional int32 Param1 = 15;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->param1(), output);
  }

  // optional int32 Param2 = 16;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->param2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillCastType)
}

::google::protobuf::uint8* SkillCastType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillCastType)
  // optional int32 CastType = 1;
  if (has_casttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->casttype(), target);
  }

  // optional int32 EventMajor = 2;
  if (has_eventmajor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eventmajor(), target);
  }

  // optional int32 EventRelation = 3;
  if (has_eventrelation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->eventrelation(), target);
  }

  // optional int32 EventSub = 4;
  if (has_eventsub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->eventsub(), target);
  }

  // optional int32 TriggerBuffID = 5;
  if (has_triggerbuffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->triggerbuffid(), target);
  }

  // optional int32 TriggerBuffLayer = 6;
  if (has_triggerbufflayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->triggerbufflayer(), target);
  }

  // repeated int32 TriggerSkillArr = 7;
  for (int i = 0; i < this->triggerskillarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->triggerskillarr(i), target);
  }

  // optional int32 TriggerChance = 8;
  if (has_triggerchance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->triggerchance(), target);
  }

  // repeated int32 EventSubSkillArr = 9;
  for (int i = 0; i < this->eventsubskillarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->eventsubskillarr(i), target);
  }

  // optional bool NeedInterrupt = 10;
  if (has_needinterrupt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->needinterrupt(), target);
  }

  // optional int32 RecordBuffId = 11;
  if (has_recordbuffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->recordbuffid(), target);
  }

  // optional int32 RecordThreshold = 12;
  if (has_recordthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->recordthreshold(), target);
  }

  // repeated int32 EventBuffSubArr = 13;
  for (int i = 0; i < this->eventbuffsubarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->eventbuffsubarr(i), target);
  }

  // optional int32 TriggerChanceCoef = 14;
  if (has_triggerchancecoef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->triggerchancecoef(), target);
  }

  // optional int32 Param1 = 15;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->param1(), target);
  }

  // optional int32 Param2 = 16;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->param2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillCastType)
  return target;
}

int SkillCastType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CastType = 1;
    if (has_casttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->casttype());
    }

    // optional int32 EventMajor = 2;
    if (has_eventmajor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventmajor());
    }

    // optional int32 EventRelation = 3;
    if (has_eventrelation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventrelation());
    }

    // optional int32 EventSub = 4;
    if (has_eventsub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventsub());
    }

    // optional int32 TriggerBuffID = 5;
    if (has_triggerbuffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggerbuffid());
    }

    // optional int32 TriggerBuffLayer = 6;
    if (has_triggerbufflayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggerbufflayer());
    }

    // optional int32 TriggerChance = 8;
    if (has_triggerchance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggerchance());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bool NeedInterrupt = 10;
    if (has_needinterrupt()) {
      total_size += 1 + 1;
    }

    // optional int32 RecordBuffId = 11;
    if (has_recordbuffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recordbuffid());
    }

    // optional int32 RecordThreshold = 12;
    if (has_recordthreshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recordthreshold());
    }

    // optional int32 TriggerChanceCoef = 14;
    if (has_triggerchancecoef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggerchancecoef());
    }

    // optional int32 Param1 = 15;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param1());
    }

    // optional int32 Param2 = 16;
    if (has_param2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param2());
    }

  }
  // repeated int32 TriggerSkillArr = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->triggerskillarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->triggerskillarr(i));
    }
    total_size += 1 * this->triggerskillarr_size() + data_size;
  }

  // repeated int32 EventSubSkillArr = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->eventsubskillarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->eventsubskillarr(i));
    }
    total_size += 1 * this->eventsubskillarr_size() + data_size;
  }

  // repeated int32 EventBuffSubArr = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->eventbuffsubarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->eventbuffsubarr(i));
    }
    total_size += 1 * this->eventbuffsubarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillCastType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillCastType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillCastType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillCastType::MergeFrom(const SkillCastType& from) {
  GOOGLE_CHECK_NE(&from, this);
  triggerskillarr_.MergeFrom(from.triggerskillarr_);
  eventsubskillarr_.MergeFrom(from.eventsubskillarr_);
  eventbuffsubarr_.MergeFrom(from.eventbuffsubarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_casttype()) {
      set_casttype(from.casttype());
    }
    if (from.has_eventmajor()) {
      set_eventmajor(from.eventmajor());
    }
    if (from.has_eventrelation()) {
      set_eventrelation(from.eventrelation());
    }
    if (from.has_eventsub()) {
      set_eventsub(from.eventsub());
    }
    if (from.has_triggerbuffid()) {
      set_triggerbuffid(from.triggerbuffid());
    }
    if (from.has_triggerbufflayer()) {
      set_triggerbufflayer(from.triggerbufflayer());
    }
    if (from.has_triggerchance()) {
      set_triggerchance(from.triggerchance());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_needinterrupt()) {
      set_needinterrupt(from.needinterrupt());
    }
    if (from.has_recordbuffid()) {
      set_recordbuffid(from.recordbuffid());
    }
    if (from.has_recordthreshold()) {
      set_recordthreshold(from.recordthreshold());
    }
    if (from.has_triggerchancecoef()) {
      set_triggerchancecoef(from.triggerchancecoef());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillCastType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillCastType::CopyFrom(const SkillCastType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillCastType::IsInitialized() const {

  return true;
}

void SkillCastType::Swap(SkillCastType* other) {
  if (other != this) {
    std::swap(casttype_, other->casttype_);
    std::swap(eventmajor_, other->eventmajor_);
    std::swap(eventrelation_, other->eventrelation_);
    std::swap(eventsub_, other->eventsub_);
    std::swap(triggerbuffid_, other->triggerbuffid_);
    std::swap(triggerbufflayer_, other->triggerbufflayer_);
    triggerskillarr_.Swap(&other->triggerskillarr_);
    std::swap(triggerchance_, other->triggerchance_);
    eventsubskillarr_.Swap(&other->eventsubskillarr_);
    std::swap(needinterrupt_, other->needinterrupt_);
    std::swap(recordbuffid_, other->recordbuffid_);
    std::swap(recordthreshold_, other->recordthreshold_);
    eventbuffsubarr_.Swap(&other->eventbuffsubarr_);
    std::swap(triggerchancecoef_, other->triggerchancecoef_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillCastType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillCastType_descriptor_;
  metadata.reflection = SkillCastType_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
