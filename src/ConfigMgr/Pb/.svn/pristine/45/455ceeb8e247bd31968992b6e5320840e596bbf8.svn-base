// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Guidance.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Guidance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TGuidanceInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuidanceInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuidanceStartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuidanceStartReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuidanceEndReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuidanceEndReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuidanceFinishParagraphReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuidanceFinishParagraphReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuidanceFinishParagraphRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuidanceFinishParagraphRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuidanceSignSwitchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuidanceSignSwitchReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fGuidance_2eproto() {
  protobuf_AddDesc_net_2fGuidance_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Guidance.proto");
  GOOGLE_CHECK(file != NULL);
  TGuidanceInfoRsp_descriptor_ = file->message_type(0);
  static const int TGuidanceInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceInfoRsp, startarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceInfoRsp, endarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceInfoRsp, switchidarr_),
  };
  TGuidanceInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuidanceInfoRsp_descriptor_,
      TGuidanceInfoRsp::default_instance_,
      TGuidanceInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuidanceInfoRsp));
  TGuidanceStartReq_descriptor_ = file->message_type(1);
  static const int TGuidanceStartReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceStartReq, key_),
  };
  TGuidanceStartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuidanceStartReq_descriptor_,
      TGuidanceStartReq::default_instance_,
      TGuidanceStartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceStartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceStartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuidanceStartReq));
  TGuidanceEndReq_descriptor_ = file->message_type(2);
  static const int TGuidanceEndReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceEndReq, key_),
  };
  TGuidanceEndReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuidanceEndReq_descriptor_,
      TGuidanceEndReq::default_instance_,
      TGuidanceEndReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceEndReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceEndReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuidanceEndReq));
  TGuidanceFinishParagraphReq_descriptor_ = file->message_type(3);
  static const int TGuidanceFinishParagraphReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceFinishParagraphReq, guidetid_),
  };
  TGuidanceFinishParagraphReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuidanceFinishParagraphReq_descriptor_,
      TGuidanceFinishParagraphReq::default_instance_,
      TGuidanceFinishParagraphReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceFinishParagraphReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceFinishParagraphReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuidanceFinishParagraphReq));
  TGuidanceFinishParagraphRsp_descriptor_ = file->message_type(4);
  static const int TGuidanceFinishParagraphRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceFinishParagraphRsp, endarr_),
  };
  TGuidanceFinishParagraphRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuidanceFinishParagraphRsp_descriptor_,
      TGuidanceFinishParagraphRsp::default_instance_,
      TGuidanceFinishParagraphRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceFinishParagraphRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceFinishParagraphRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuidanceFinishParagraphRsp));
  TGuidanceSignSwitchReq_descriptor_ = file->message_type(5);
  static const int TGuidanceSignSwitchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceSignSwitchReq, switchid_),
  };
  TGuidanceSignSwitchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuidanceSignSwitchReq_descriptor_,
      TGuidanceSignSwitchReq::default_instance_,
      TGuidanceSignSwitchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceSignSwitchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuidanceSignSwitchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuidanceSignSwitchReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fGuidance_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuidanceInfoRsp_descriptor_, &TGuidanceInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuidanceStartReq_descriptor_, &TGuidanceStartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuidanceEndReq_descriptor_, &TGuidanceEndReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuidanceFinishParagraphReq_descriptor_, &TGuidanceFinishParagraphReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuidanceFinishParagraphRsp_descriptor_, &TGuidanceFinishParagraphRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuidanceSignSwitchReq_descriptor_, &TGuidanceSignSwitchReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fGuidance_2eproto() {
  delete TGuidanceInfoRsp::default_instance_;
  delete TGuidanceInfoRsp_reflection_;
  delete TGuidanceStartReq::default_instance_;
  delete TGuidanceStartReq_reflection_;
  delete TGuidanceEndReq::default_instance_;
  delete TGuidanceEndReq_reflection_;
  delete TGuidanceFinishParagraphReq::default_instance_;
  delete TGuidanceFinishParagraphReq_reflection_;
  delete TGuidanceFinishParagraphRsp::default_instance_;
  delete TGuidanceFinishParagraphRsp_reflection_;
  delete TGuidanceSignSwitchReq::default_instance_;
  delete TGuidanceSignSwitchReq_reflection_;
}

void protobuf_AddDesc_net_2fGuidance_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022net/Guidance.proto\022\002pb\"I\n\020TGuidanceInf"
    "oRsp\022\020\n\010StartArr\030\001 \003(\r\022\016\n\006EndArr\030\002 \003(\r\022\023"
    "\n\013SwitchIdArr\030\003 \003(\r\" \n\021TGuidanceStartReq"
    "\022\013\n\003Key\030\001 \001(\r\"\036\n\017TGuidanceEndReq\022\013\n\003Key\030"
    "\001 \001(\r\"/\n\033TGuidanceFinishParagraphReq\022\020\n\010"
    "GuideTid\030\001 \001(\r\"-\n\033TGuidanceFinishParagra"
    "phRsp\022\016\n\006EndArr\030\002 \003(\r\"*\n\026TGuidanceSignSw"
    "itchReq\022\020\n\010SwitchId\030\001 \001(\r", 305);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Guidance.proto", &protobuf_RegisterTypes);
  TGuidanceInfoRsp::default_instance_ = new TGuidanceInfoRsp();
  TGuidanceStartReq::default_instance_ = new TGuidanceStartReq();
  TGuidanceEndReq::default_instance_ = new TGuidanceEndReq();
  TGuidanceFinishParagraphReq::default_instance_ = new TGuidanceFinishParagraphReq();
  TGuidanceFinishParagraphRsp::default_instance_ = new TGuidanceFinishParagraphRsp();
  TGuidanceSignSwitchReq::default_instance_ = new TGuidanceSignSwitchReq();
  TGuidanceInfoRsp::default_instance_->InitAsDefaultInstance();
  TGuidanceStartReq::default_instance_->InitAsDefaultInstance();
  TGuidanceEndReq::default_instance_->InitAsDefaultInstance();
  TGuidanceFinishParagraphReq::default_instance_->InitAsDefaultInstance();
  TGuidanceFinishParagraphRsp::default_instance_->InitAsDefaultInstance();
  TGuidanceSignSwitchReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fGuidance_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fGuidance_2eproto {
  StaticDescriptorInitializer_net_2fGuidance_2eproto() {
    protobuf_AddDesc_net_2fGuidance_2eproto();
  }
} static_descriptor_initializer_net_2fGuidance_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TGuidanceInfoRsp::kStartArrFieldNumber;
const int TGuidanceInfoRsp::kEndArrFieldNumber;
const int TGuidanceInfoRsp::kSwitchIdArrFieldNumber;
#endif  // !_MSC_VER

TGuidanceInfoRsp::TGuidanceInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuidanceInfoRsp)
}

void TGuidanceInfoRsp::InitAsDefaultInstance() {
}

TGuidanceInfoRsp::TGuidanceInfoRsp(const TGuidanceInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuidanceInfoRsp)
}

void TGuidanceInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuidanceInfoRsp::~TGuidanceInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuidanceInfoRsp)
  SharedDtor();
}

void TGuidanceInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuidanceInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuidanceInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuidanceInfoRsp_descriptor_;
}

const TGuidanceInfoRsp& TGuidanceInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuidance_2eproto();
  return *default_instance_;
}

TGuidanceInfoRsp* TGuidanceInfoRsp::default_instance_ = NULL;

TGuidanceInfoRsp* TGuidanceInfoRsp::New() const {
  return new TGuidanceInfoRsp;
}

void TGuidanceInfoRsp::Clear() {
  startarr_.Clear();
  endarr_.Clear();
  switchidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuidanceInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuidanceInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 StartArr = 1;
      case 1: {
        if (tag == 8) {
         parse_StartArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_startarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_startarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_StartArr;
        if (input->ExpectTag(16)) goto parse_EndArr;
        break;
      }

      // repeated uint32 EndArr = 2;
      case 2: {
        if (tag == 16) {
         parse_EndArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_endarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_endarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EndArr;
        if (input->ExpectTag(24)) goto parse_SwitchIdArr;
        break;
      }

      // repeated uint32 SwitchIdArr = 3;
      case 3: {
        if (tag == 24) {
         parse_SwitchIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_switchidarr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_switchidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SwitchIdArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuidanceInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuidanceInfoRsp)
  return false;
#undef DO_
}

void TGuidanceInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuidanceInfoRsp)
  // repeated uint32 StartArr = 1;
  for (int i = 0; i < this->startarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->startarr(i), output);
  }

  // repeated uint32 EndArr = 2;
  for (int i = 0; i < this->endarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->endarr(i), output);
  }

  // repeated uint32 SwitchIdArr = 3;
  for (int i = 0; i < this->switchidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->switchidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuidanceInfoRsp)
}

::google::protobuf::uint8* TGuidanceInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuidanceInfoRsp)
  // repeated uint32 StartArr = 1;
  for (int i = 0; i < this->startarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->startarr(i), target);
  }

  // repeated uint32 EndArr = 2;
  for (int i = 0; i < this->endarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->endarr(i), target);
  }

  // repeated uint32 SwitchIdArr = 3;
  for (int i = 0; i < this->switchidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->switchidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuidanceInfoRsp)
  return target;
}

int TGuidanceInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 StartArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->startarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->startarr(i));
    }
    total_size += 1 * this->startarr_size() + data_size;
  }

  // repeated uint32 EndArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->endarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->endarr(i));
    }
    total_size += 1 * this->endarr_size() + data_size;
  }

  // repeated uint32 SwitchIdArr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->switchidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->switchidarr(i));
    }
    total_size += 1 * this->switchidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuidanceInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuidanceInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuidanceInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuidanceInfoRsp::MergeFrom(const TGuidanceInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  startarr_.MergeFrom(from.startarr_);
  endarr_.MergeFrom(from.endarr_);
  switchidarr_.MergeFrom(from.switchidarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuidanceInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuidanceInfoRsp::CopyFrom(const TGuidanceInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuidanceInfoRsp::IsInitialized() const {

  return true;
}

void TGuidanceInfoRsp::Swap(TGuidanceInfoRsp* other) {
  if (other != this) {
    startarr_.Swap(&other->startarr_);
    endarr_.Swap(&other->endarr_);
    switchidarr_.Swap(&other->switchidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuidanceInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuidanceInfoRsp_descriptor_;
  metadata.reflection = TGuidanceInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuidanceStartReq::kKeyFieldNumber;
#endif  // !_MSC_VER

TGuidanceStartReq::TGuidanceStartReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuidanceStartReq)
}

void TGuidanceStartReq::InitAsDefaultInstance() {
}

TGuidanceStartReq::TGuidanceStartReq(const TGuidanceStartReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuidanceStartReq)
}

void TGuidanceStartReq::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuidanceStartReq::~TGuidanceStartReq() {
  // @@protoc_insertion_point(destructor:pb.TGuidanceStartReq)
  SharedDtor();
}

void TGuidanceStartReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuidanceStartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuidanceStartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuidanceStartReq_descriptor_;
}

const TGuidanceStartReq& TGuidanceStartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuidance_2eproto();
  return *default_instance_;
}

TGuidanceStartReq* TGuidanceStartReq::default_instance_ = NULL;

TGuidanceStartReq* TGuidanceStartReq::New() const {
  return new TGuidanceStartReq;
}

void TGuidanceStartReq::Clear() {
  key_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuidanceStartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuidanceStartReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuidanceStartReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuidanceStartReq)
  return false;
#undef DO_
}

void TGuidanceStartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuidanceStartReq)
  // optional uint32 Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuidanceStartReq)
}

::google::protobuf::uint8* TGuidanceStartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuidanceStartReq)
  // optional uint32 Key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuidanceStartReq)
  return target;
}

int TGuidanceStartReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuidanceStartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuidanceStartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuidanceStartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuidanceStartReq::MergeFrom(const TGuidanceStartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuidanceStartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuidanceStartReq::CopyFrom(const TGuidanceStartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuidanceStartReq::IsInitialized() const {

  return true;
}

void TGuidanceStartReq::Swap(TGuidanceStartReq* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuidanceStartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuidanceStartReq_descriptor_;
  metadata.reflection = TGuidanceStartReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuidanceEndReq::kKeyFieldNumber;
#endif  // !_MSC_VER

TGuidanceEndReq::TGuidanceEndReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuidanceEndReq)
}

void TGuidanceEndReq::InitAsDefaultInstance() {
}

TGuidanceEndReq::TGuidanceEndReq(const TGuidanceEndReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuidanceEndReq)
}

void TGuidanceEndReq::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuidanceEndReq::~TGuidanceEndReq() {
  // @@protoc_insertion_point(destructor:pb.TGuidanceEndReq)
  SharedDtor();
}

void TGuidanceEndReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuidanceEndReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuidanceEndReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuidanceEndReq_descriptor_;
}

const TGuidanceEndReq& TGuidanceEndReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuidance_2eproto();
  return *default_instance_;
}

TGuidanceEndReq* TGuidanceEndReq::default_instance_ = NULL;

TGuidanceEndReq* TGuidanceEndReq::New() const {
  return new TGuidanceEndReq;
}

void TGuidanceEndReq::Clear() {
  key_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuidanceEndReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuidanceEndReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuidanceEndReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuidanceEndReq)
  return false;
#undef DO_
}

void TGuidanceEndReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuidanceEndReq)
  // optional uint32 Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuidanceEndReq)
}

::google::protobuf::uint8* TGuidanceEndReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuidanceEndReq)
  // optional uint32 Key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuidanceEndReq)
  return target;
}

int TGuidanceEndReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuidanceEndReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuidanceEndReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuidanceEndReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuidanceEndReq::MergeFrom(const TGuidanceEndReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuidanceEndReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuidanceEndReq::CopyFrom(const TGuidanceEndReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuidanceEndReq::IsInitialized() const {

  return true;
}

void TGuidanceEndReq::Swap(TGuidanceEndReq* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuidanceEndReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuidanceEndReq_descriptor_;
  metadata.reflection = TGuidanceEndReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuidanceFinishParagraphReq::kGuideTidFieldNumber;
#endif  // !_MSC_VER

TGuidanceFinishParagraphReq::TGuidanceFinishParagraphReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuidanceFinishParagraphReq)
}

void TGuidanceFinishParagraphReq::InitAsDefaultInstance() {
}

TGuidanceFinishParagraphReq::TGuidanceFinishParagraphReq(const TGuidanceFinishParagraphReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuidanceFinishParagraphReq)
}

void TGuidanceFinishParagraphReq::SharedCtor() {
  _cached_size_ = 0;
  guidetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuidanceFinishParagraphReq::~TGuidanceFinishParagraphReq() {
  // @@protoc_insertion_point(destructor:pb.TGuidanceFinishParagraphReq)
  SharedDtor();
}

void TGuidanceFinishParagraphReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuidanceFinishParagraphReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuidanceFinishParagraphReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuidanceFinishParagraphReq_descriptor_;
}

const TGuidanceFinishParagraphReq& TGuidanceFinishParagraphReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuidance_2eproto();
  return *default_instance_;
}

TGuidanceFinishParagraphReq* TGuidanceFinishParagraphReq::default_instance_ = NULL;

TGuidanceFinishParagraphReq* TGuidanceFinishParagraphReq::New() const {
  return new TGuidanceFinishParagraphReq;
}

void TGuidanceFinishParagraphReq::Clear() {
  guidetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuidanceFinishParagraphReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuidanceFinishParagraphReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GuideTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guidetid_)));
          set_has_guidetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuidanceFinishParagraphReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuidanceFinishParagraphReq)
  return false;
#undef DO_
}

void TGuidanceFinishParagraphReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuidanceFinishParagraphReq)
  // optional uint32 GuideTid = 1;
  if (has_guidetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guidetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuidanceFinishParagraphReq)
}

::google::protobuf::uint8* TGuidanceFinishParagraphReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuidanceFinishParagraphReq)
  // optional uint32 GuideTid = 1;
  if (has_guidetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guidetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuidanceFinishParagraphReq)
  return target;
}

int TGuidanceFinishParagraphReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GuideTid = 1;
    if (has_guidetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guidetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuidanceFinishParagraphReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuidanceFinishParagraphReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuidanceFinishParagraphReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuidanceFinishParagraphReq::MergeFrom(const TGuidanceFinishParagraphReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guidetid()) {
      set_guidetid(from.guidetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuidanceFinishParagraphReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuidanceFinishParagraphReq::CopyFrom(const TGuidanceFinishParagraphReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuidanceFinishParagraphReq::IsInitialized() const {

  return true;
}

void TGuidanceFinishParagraphReq::Swap(TGuidanceFinishParagraphReq* other) {
  if (other != this) {
    std::swap(guidetid_, other->guidetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuidanceFinishParagraphReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuidanceFinishParagraphReq_descriptor_;
  metadata.reflection = TGuidanceFinishParagraphReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuidanceFinishParagraphRsp::kEndArrFieldNumber;
#endif  // !_MSC_VER

TGuidanceFinishParagraphRsp::TGuidanceFinishParagraphRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuidanceFinishParagraphRsp)
}

void TGuidanceFinishParagraphRsp::InitAsDefaultInstance() {
}

TGuidanceFinishParagraphRsp::TGuidanceFinishParagraphRsp(const TGuidanceFinishParagraphRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuidanceFinishParagraphRsp)
}

void TGuidanceFinishParagraphRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuidanceFinishParagraphRsp::~TGuidanceFinishParagraphRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuidanceFinishParagraphRsp)
  SharedDtor();
}

void TGuidanceFinishParagraphRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuidanceFinishParagraphRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuidanceFinishParagraphRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuidanceFinishParagraphRsp_descriptor_;
}

const TGuidanceFinishParagraphRsp& TGuidanceFinishParagraphRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuidance_2eproto();
  return *default_instance_;
}

TGuidanceFinishParagraphRsp* TGuidanceFinishParagraphRsp::default_instance_ = NULL;

TGuidanceFinishParagraphRsp* TGuidanceFinishParagraphRsp::New() const {
  return new TGuidanceFinishParagraphRsp;
}

void TGuidanceFinishParagraphRsp::Clear() {
  endarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuidanceFinishParagraphRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuidanceFinishParagraphRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 EndArr = 2;
      case 2: {
        if (tag == 16) {
         parse_EndArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_endarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_endarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EndArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuidanceFinishParagraphRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuidanceFinishParagraphRsp)
  return false;
#undef DO_
}

void TGuidanceFinishParagraphRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuidanceFinishParagraphRsp)
  // repeated uint32 EndArr = 2;
  for (int i = 0; i < this->endarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->endarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuidanceFinishParagraphRsp)
}

::google::protobuf::uint8* TGuidanceFinishParagraphRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuidanceFinishParagraphRsp)
  // repeated uint32 EndArr = 2;
  for (int i = 0; i < this->endarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->endarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuidanceFinishParagraphRsp)
  return target;
}

int TGuidanceFinishParagraphRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 EndArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->endarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->endarr(i));
    }
    total_size += 1 * this->endarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuidanceFinishParagraphRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuidanceFinishParagraphRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuidanceFinishParagraphRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuidanceFinishParagraphRsp::MergeFrom(const TGuidanceFinishParagraphRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  endarr_.MergeFrom(from.endarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuidanceFinishParagraphRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuidanceFinishParagraphRsp::CopyFrom(const TGuidanceFinishParagraphRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuidanceFinishParagraphRsp::IsInitialized() const {

  return true;
}

void TGuidanceFinishParagraphRsp::Swap(TGuidanceFinishParagraphRsp* other) {
  if (other != this) {
    endarr_.Swap(&other->endarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuidanceFinishParagraphRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuidanceFinishParagraphRsp_descriptor_;
  metadata.reflection = TGuidanceFinishParagraphRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuidanceSignSwitchReq::kSwitchIdFieldNumber;
#endif  // !_MSC_VER

TGuidanceSignSwitchReq::TGuidanceSignSwitchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuidanceSignSwitchReq)
}

void TGuidanceSignSwitchReq::InitAsDefaultInstance() {
}

TGuidanceSignSwitchReq::TGuidanceSignSwitchReq(const TGuidanceSignSwitchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuidanceSignSwitchReq)
}

void TGuidanceSignSwitchReq::SharedCtor() {
  _cached_size_ = 0;
  switchid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuidanceSignSwitchReq::~TGuidanceSignSwitchReq() {
  // @@protoc_insertion_point(destructor:pb.TGuidanceSignSwitchReq)
  SharedDtor();
}

void TGuidanceSignSwitchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuidanceSignSwitchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuidanceSignSwitchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuidanceSignSwitchReq_descriptor_;
}

const TGuidanceSignSwitchReq& TGuidanceSignSwitchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuidance_2eproto();
  return *default_instance_;
}

TGuidanceSignSwitchReq* TGuidanceSignSwitchReq::default_instance_ = NULL;

TGuidanceSignSwitchReq* TGuidanceSignSwitchReq::New() const {
  return new TGuidanceSignSwitchReq;
}

void TGuidanceSignSwitchReq::Clear() {
  switchid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuidanceSignSwitchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuidanceSignSwitchReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SwitchId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &switchid_)));
          set_has_switchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuidanceSignSwitchReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuidanceSignSwitchReq)
  return false;
#undef DO_
}

void TGuidanceSignSwitchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuidanceSignSwitchReq)
  // optional uint32 SwitchId = 1;
  if (has_switchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->switchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuidanceSignSwitchReq)
}

::google::protobuf::uint8* TGuidanceSignSwitchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuidanceSignSwitchReq)
  // optional uint32 SwitchId = 1;
  if (has_switchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->switchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuidanceSignSwitchReq)
  return target;
}

int TGuidanceSignSwitchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SwitchId = 1;
    if (has_switchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->switchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuidanceSignSwitchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuidanceSignSwitchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuidanceSignSwitchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuidanceSignSwitchReq::MergeFrom(const TGuidanceSignSwitchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_switchid()) {
      set_switchid(from.switchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuidanceSignSwitchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuidanceSignSwitchReq::CopyFrom(const TGuidanceSignSwitchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuidanceSignSwitchReq::IsInitialized() const {

  return true;
}

void TGuidanceSignSwitchReq::Swap(TGuidanceSignSwitchReq* other) {
  if (other != this) {
    std::swap(switchid_, other->switchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuidanceSignSwitchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuidanceSignSwitchReq_descriptor_;
  metadata.reflection = TGuidanceSignSwitchReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
