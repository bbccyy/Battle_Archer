// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/AdventureNotify.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/AdventureNotify.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TAdventureUserStatusChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureUserStatusChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureMateAnswerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureMateAnswerNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureAnswerEndNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureAnswerEndNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventurePassBlockNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventurePassBlockNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTeamChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTeamChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEventStatusChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEventStatusChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTeamRecordNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTeamRecordNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventurePosNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventurePosNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureAddMapRewardNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureAddMapRewardNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureMysteryDoorOpenNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureMysteryDoorOpenNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureAddObjectNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureAddObjectNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureCalledNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureCalledNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureRecvCompleteRewardNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureRecvCompleteRewardNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureMonsterHpNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureMonsterHpNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureQuitTeamMapNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureQuitTeamMapNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fAdventureNotify_2eproto() {
  protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/AdventureNotify.proto");
  GOOGLE_CHECK(file != NULL);
  TAdventureUserStatusChangeNotify_descriptor_ = file->message_type(0);
  static const int TAdventureUserStatusChangeNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserStatusChangeNotify, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserStatusChangeNotify, userstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserStatusChangeNotify, battleobjectindex_),
  };
  TAdventureUserStatusChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureUserStatusChangeNotify_descriptor_,
      TAdventureUserStatusChangeNotify::default_instance_,
      TAdventureUserStatusChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserStatusChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserStatusChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureUserStatusChangeNotify));
  TAdventureMateAnswerNotify_descriptor_ = file->message_type(1);
  static const int TAdventureMateAnswerNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMateAnswerNotify, layerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMateAnswerNotify, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMateAnswerNotify, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMateAnswerNotify, choseindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMateAnswerNotify, mateuid_),
  };
  TAdventureMateAnswerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureMateAnswerNotify_descriptor_,
      TAdventureMateAnswerNotify::default_instance_,
      TAdventureMateAnswerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMateAnswerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMateAnswerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureMateAnswerNotify));
  TAdventureAnswerEndNotify_descriptor_ = file->message_type(2);
  static const int TAdventureAnswerEndNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerEndNotify, layerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerEndNotify, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerEndNotify, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerEndNotify, keyindex_),
  };
  TAdventureAnswerEndNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureAnswerEndNotify_descriptor_,
      TAdventureAnswerEndNotify::default_instance_,
      TAdventureAnswerEndNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerEndNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerEndNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureAnswerEndNotify));
  TAdventurePassBlockNotify_descriptor_ = file->message_type(3);
  static const int TAdventurePassBlockNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventurePassBlockNotify, blockarr_),
  };
  TAdventurePassBlockNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventurePassBlockNotify_descriptor_,
      TAdventurePassBlockNotify::default_instance_,
      TAdventurePassBlockNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventurePassBlockNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventurePassBlockNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventurePassBlockNotify));
  TAdventureTeamChangeNotify_descriptor_ = file->message_type(4);
  static const int TAdventureTeamChangeNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamChangeNotify, changtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamChangeNotify, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamChangeNotify, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamChangeNotify, memberuidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamChangeNotify, curleader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamChangeNotify, addenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamChangeNotify, teammode_),
  };
  TAdventureTeamChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTeamChangeNotify_descriptor_,
      TAdventureTeamChangeNotify::default_instance_,
      TAdventureTeamChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTeamChangeNotify));
  TAdventureEventStatusChangeNotify_descriptor_ = file->message_type(5);
  static const int TAdventureEventStatusChangeNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEventStatusChangeNotify, mateuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEventStatusChangeNotify, layerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEventStatusChangeNotify, objectposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEventStatusChangeNotify, objectposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEventStatusChangeNotify, eventinfo_),
  };
  TAdventureEventStatusChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEventStatusChangeNotify_descriptor_,
      TAdventureEventStatusChangeNotify::default_instance_,
      TAdventureEventStatusChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEventStatusChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEventStatusChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEventStatusChangeNotify));
  TAdventureTeamRecordNotify_descriptor_ = file->message_type(6);
  static const int TAdventureTeamRecordNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamRecordNotify, recordarr_),
  };
  TAdventureTeamRecordNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTeamRecordNotify_descriptor_,
      TAdventureTeamRecordNotify::default_instance_,
      TAdventureTeamRecordNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamRecordNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamRecordNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTeamRecordNotify));
  TAdventurePosNotify_descriptor_ = file->message_type(7);
  static const int TAdventurePosNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventurePosNotify, poschangetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventurePosNotify, mateuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventurePosNotify, layerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventurePosNotify, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventurePosNotify, posy_),
  };
  TAdventurePosNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventurePosNotify_descriptor_,
      TAdventurePosNotify::default_instance_,
      TAdventurePosNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventurePosNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventurePosNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventurePosNotify));
  TAdventureAddMapRewardNotify_descriptor_ = file->message_type(8);
  static const int TAdventureAddMapRewardNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAddMapRewardNotify, rewardarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAddMapRewardNotify, rewarduid_),
  };
  TAdventureAddMapRewardNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureAddMapRewardNotify_descriptor_,
      TAdventureAddMapRewardNotify::default_instance_,
      TAdventureAddMapRewardNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAddMapRewardNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAddMapRewardNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureAddMapRewardNotify));
  TAdventureMysteryDoorOpenNotify_descriptor_ = file->message_type(9);
  static const int TAdventureMysteryDoorOpenNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMysteryDoorOpenNotify, layerindex_),
  };
  TAdventureMysteryDoorOpenNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureMysteryDoorOpenNotify_descriptor_,
      TAdventureMysteryDoorOpenNotify::default_instance_,
      TAdventureMysteryDoorOpenNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMysteryDoorOpenNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMysteryDoorOpenNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureMysteryDoorOpenNotify));
  TAdventureAddObjectNotify_descriptor_ = file->message_type(10);
  static const int TAdventureAddObjectNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAddObjectNotify, layerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAddObjectNotify, centerposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAddObjectNotify, centerposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAddObjectNotify, objectarray_),
  };
  TAdventureAddObjectNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureAddObjectNotify_descriptor_,
      TAdventureAddObjectNotify::default_instance_,
      TAdventureAddObjectNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAddObjectNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAddObjectNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureAddObjectNotify));
  TAdventureCalledNotify_descriptor_ = file->message_type(11);
  static const int TAdventureCalledNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCalledNotify, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCalledNotify, mateuid_),
  };
  TAdventureCalledNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureCalledNotify_descriptor_,
      TAdventureCalledNotify::default_instance_,
      TAdventureCalledNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCalledNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCalledNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureCalledNotify));
  TAdventureRecvCompleteRewardNotify_descriptor_ = file->message_type(12);
  static const int TAdventureRecvCompleteRewardNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureRecvCompleteRewardNotify, recvuid_),
  };
  TAdventureRecvCompleteRewardNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureRecvCompleteRewardNotify_descriptor_,
      TAdventureRecvCompleteRewardNotify::default_instance_,
      TAdventureRecvCompleteRewardNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureRecvCompleteRewardNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureRecvCompleteRewardNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureRecvCompleteRewardNotify));
  TAdventureMonsterHpNotify_descriptor_ = file->message_type(13);
  static const int TAdventureMonsterHpNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMonsterHpNotify, monsterinfo_),
  };
  TAdventureMonsterHpNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureMonsterHpNotify_descriptor_,
      TAdventureMonsterHpNotify::default_instance_,
      TAdventureMonsterHpNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMonsterHpNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMonsterHpNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureMonsterHpNotify));
  TAdventureQuitTeamMapNotify_descriptor_ = file->message_type(14);
  static const int TAdventureQuitTeamMapNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureQuitTeamMapNotify, teamid_),
  };
  TAdventureQuitTeamMapNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureQuitTeamMapNotify_descriptor_,
      TAdventureQuitTeamMapNotify::default_instance_,
      TAdventureQuitTeamMapNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureQuitTeamMapNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureQuitTeamMapNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureQuitTeamMapNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fAdventureNotify_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureUserStatusChangeNotify_descriptor_, &TAdventureUserStatusChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureMateAnswerNotify_descriptor_, &TAdventureMateAnswerNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureAnswerEndNotify_descriptor_, &TAdventureAnswerEndNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventurePassBlockNotify_descriptor_, &TAdventurePassBlockNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTeamChangeNotify_descriptor_, &TAdventureTeamChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEventStatusChangeNotify_descriptor_, &TAdventureEventStatusChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTeamRecordNotify_descriptor_, &TAdventureTeamRecordNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventurePosNotify_descriptor_, &TAdventurePosNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureAddMapRewardNotify_descriptor_, &TAdventureAddMapRewardNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureMysteryDoorOpenNotify_descriptor_, &TAdventureMysteryDoorOpenNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureAddObjectNotify_descriptor_, &TAdventureAddObjectNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureCalledNotify_descriptor_, &TAdventureCalledNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureRecvCompleteRewardNotify_descriptor_, &TAdventureRecvCompleteRewardNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureMonsterHpNotify_descriptor_, &TAdventureMonsterHpNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureQuitTeamMapNotify_descriptor_, &TAdventureQuitTeamMapNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fAdventureNotify_2eproto() {
  delete TAdventureUserStatusChangeNotify::default_instance_;
  delete TAdventureUserStatusChangeNotify_reflection_;
  delete TAdventureMateAnswerNotify::default_instance_;
  delete TAdventureMateAnswerNotify_reflection_;
  delete TAdventureAnswerEndNotify::default_instance_;
  delete TAdventureAnswerEndNotify_reflection_;
  delete TAdventurePassBlockNotify::default_instance_;
  delete TAdventurePassBlockNotify_reflection_;
  delete TAdventureTeamChangeNotify::default_instance_;
  delete TAdventureTeamChangeNotify_reflection_;
  delete TAdventureEventStatusChangeNotify::default_instance_;
  delete TAdventureEventStatusChangeNotify_reflection_;
  delete TAdventureTeamRecordNotify::default_instance_;
  delete TAdventureTeamRecordNotify_reflection_;
  delete TAdventurePosNotify::default_instance_;
  delete TAdventurePosNotify_reflection_;
  delete TAdventureAddMapRewardNotify::default_instance_;
  delete TAdventureAddMapRewardNotify_reflection_;
  delete TAdventureMysteryDoorOpenNotify::default_instance_;
  delete TAdventureMysteryDoorOpenNotify_reflection_;
  delete TAdventureAddObjectNotify::default_instance_;
  delete TAdventureAddObjectNotify_reflection_;
  delete TAdventureCalledNotify::default_instance_;
  delete TAdventureCalledNotify_reflection_;
  delete TAdventureRecvCompleteRewardNotify::default_instance_;
  delete TAdventureRecvCompleteRewardNotify_reflection_;
  delete TAdventureMonsterHpNotify::default_instance_;
  delete TAdventureMonsterHpNotify_reflection_;
  delete TAdventureQuitTeamMapNotify::default_instance_;
  delete TAdventureQuitTeamMapNotify_reflection_;
}

void protobuf_AddDesc_net_2fAdventureNotify_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fAdventureBase_2eproto();
  ::pb::protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  ::pb::protobuf_AddDesc_module_2fAdventureMap_2eproto();
  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031net/AdventureNotify.proto\022\002pb\032\027net/Adv"
    "entureBase.proto\032\027net/AdventureTeam.prot"
    "o\032\031module/AdventureMap.proto\032\016net/User.p"
    "roto\032\026net/CommonReward.proto\"u\n TAdventu"
    "reUserStatusChangeNotify\022\016\n\006UserId\030\001 \001(\004"
    "\022&\n\nUserStatus\030\002 \001(\0162\022.pb.EMapUserStatus"
    "\022\031\n\021BattleObjectIndex\030\003 \001(\005\"k\n\032TAdventur"
    "eMateAnswerNotify\022\022\n\nLayerIndex\030\001 \001(\r\022\t\n"
    "\001X\030\002 \001(\005\022\t\n\001Y\030\003 \001(\005\022\022\n\nChoseIndex\030\004 \001(\r\022"
    "\017\n\007MateUid\030\005 \001(\004\"W\n\031TAdventureAnswerEndN"
    "otify\022\022\n\nLayerIndex\030\001 \001(\r\022\t\n\001X\030\002 \001(\005\022\t\n\001"
    "Y\030\003 \001(\005\022\020\n\010KeyIndex\030\004 \001(\r\"F\n\031TAdventureP"
    "assBlockNotify\022)\n\010BlockArr\030\001 \003(\0132\027.pb.TA"
    "dventurePassBlock\"\341\001\n\032TAdventureTeamChan"
    "geNotify\022&\n\tChangType\030\001 \001(\0162\023.pb.ETeamCh"
    "angeType\022\016\n\006TeamId\030\002 \001(\004\022.\n\010UserInfo\030\003 \001"
    "(\0132\034.pb.TAdventureUserSimpleInfo\022\024\n\014Memb"
    "erUidArr\030\004 \003(\004\022\021\n\tCurLeader\030\005 \001(\004\022\021\n\tAdd"
    "Energy\030\006 \001(\r\022\037\n\010TeamMode\030\007 \001(\0162\r.pb.ETea"
    "mMode\"\227\001\n!TAdventureEventStatusChangeNot"
    "ify\022\017\n\007MateUid\030\001 \001(\004\022\022\n\nLayerIndex\030\002 \001(\r"
    "\022\022\n\nObjectPosX\030\003 \001(\005\022\022\n\nObjectPosY\030\004 \001(\005"
    "\022%\n\tEventInfo\030\005 \001(\0132\022.pb.AdventureEvent\""
    "I\n\032TAdventureTeamRecordNotify\022+\n\tRecordA"
    "rr\030\001 \003(\0132\030.pb.TAdventureTeamRecord\"\212\001\n\023T"
    "AdventurePosNotify\0222\n\rPosChangeType\030\001 \001("
    "\0162\033.pb.EAdventurePosChangeType\022\017\n\007MateUi"
    "d\030\002 \001(\004\022\022\n\nLayerIndex\030\003 \001(\r\022\014\n\004PosX\030\004 \001("
    "\005\022\014\n\004PosY\030\005 \001(\005\"Y\n\034TAdventureAddMapRewar"
    "dNotify\022&\n\013RewardArray\030\001 \003(\0132\021.pb.TCommo"
    "nReward\022\021\n\tRewardUid\030\002 \001(\004\"5\n\037TAdventure"
    "MysteryDoorOpenNotify\022\022\n\nLayerIndex\030\001 \001("
    "\r\"\201\001\n\031TAdventureAddObjectNotify\022\022\n\nLayer"
    "Index\030\001 \001(\r\022\022\n\nCenterPosX\030\002 \001(\005\022\022\n\nCente"
    "rPosY\030\003 \001(\005\022(\n\013ObjectArray\030\004 \003(\0132\023.pb.Ad"
    "ventureObject\"9\n\026TAdventureCalledNotify\022"
    "\016\n\006TeamId\030\001 \001(\004\022\017\n\007MateUid\030\002 \001(\004\"5\n\"TAdv"
    "entureRecvCompleteRewardNotify\022\017\n\007RecvUi"
    "d\030\001 \001(\004\"K\n\031TAdventureMonsterHpNotify\022.\n\013"
    "MonsterInfo\030\001 \001(\0132\031.pb.TAdventureMonster"
    "Info\"-\n\033TAdventureQuitTeamMapNotify\022\016\n\006T"
    "eamId\030\001 \001(\004", 1651);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/AdventureNotify.proto", &protobuf_RegisterTypes);
  TAdventureUserStatusChangeNotify::default_instance_ = new TAdventureUserStatusChangeNotify();
  TAdventureMateAnswerNotify::default_instance_ = new TAdventureMateAnswerNotify();
  TAdventureAnswerEndNotify::default_instance_ = new TAdventureAnswerEndNotify();
  TAdventurePassBlockNotify::default_instance_ = new TAdventurePassBlockNotify();
  TAdventureTeamChangeNotify::default_instance_ = new TAdventureTeamChangeNotify();
  TAdventureEventStatusChangeNotify::default_instance_ = new TAdventureEventStatusChangeNotify();
  TAdventureTeamRecordNotify::default_instance_ = new TAdventureTeamRecordNotify();
  TAdventurePosNotify::default_instance_ = new TAdventurePosNotify();
  TAdventureAddMapRewardNotify::default_instance_ = new TAdventureAddMapRewardNotify();
  TAdventureMysteryDoorOpenNotify::default_instance_ = new TAdventureMysteryDoorOpenNotify();
  TAdventureAddObjectNotify::default_instance_ = new TAdventureAddObjectNotify();
  TAdventureCalledNotify::default_instance_ = new TAdventureCalledNotify();
  TAdventureRecvCompleteRewardNotify::default_instance_ = new TAdventureRecvCompleteRewardNotify();
  TAdventureMonsterHpNotify::default_instance_ = new TAdventureMonsterHpNotify();
  TAdventureQuitTeamMapNotify::default_instance_ = new TAdventureQuitTeamMapNotify();
  TAdventureUserStatusChangeNotify::default_instance_->InitAsDefaultInstance();
  TAdventureMateAnswerNotify::default_instance_->InitAsDefaultInstance();
  TAdventureAnswerEndNotify::default_instance_->InitAsDefaultInstance();
  TAdventurePassBlockNotify::default_instance_->InitAsDefaultInstance();
  TAdventureTeamChangeNotify::default_instance_->InitAsDefaultInstance();
  TAdventureEventStatusChangeNotify::default_instance_->InitAsDefaultInstance();
  TAdventureTeamRecordNotify::default_instance_->InitAsDefaultInstance();
  TAdventurePosNotify::default_instance_->InitAsDefaultInstance();
  TAdventureAddMapRewardNotify::default_instance_->InitAsDefaultInstance();
  TAdventureMysteryDoorOpenNotify::default_instance_->InitAsDefaultInstance();
  TAdventureAddObjectNotify::default_instance_->InitAsDefaultInstance();
  TAdventureCalledNotify::default_instance_->InitAsDefaultInstance();
  TAdventureRecvCompleteRewardNotify::default_instance_->InitAsDefaultInstance();
  TAdventureMonsterHpNotify::default_instance_->InitAsDefaultInstance();
  TAdventureQuitTeamMapNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fAdventureNotify_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fAdventureNotify_2eproto {
  StaticDescriptorInitializer_net_2fAdventureNotify_2eproto() {
    protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  }
} static_descriptor_initializer_net_2fAdventureNotify_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TAdventureUserStatusChangeNotify::kUserIdFieldNumber;
const int TAdventureUserStatusChangeNotify::kUserStatusFieldNumber;
const int TAdventureUserStatusChangeNotify::kBattleObjectIndexFieldNumber;
#endif  // !_MSC_VER

TAdventureUserStatusChangeNotify::TAdventureUserStatusChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureUserStatusChangeNotify)
}

void TAdventureUserStatusChangeNotify::InitAsDefaultInstance() {
}

TAdventureUserStatusChangeNotify::TAdventureUserStatusChangeNotify(const TAdventureUserStatusChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureUserStatusChangeNotify)
}

void TAdventureUserStatusChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  userstatus_ = 2;
  battleobjectindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureUserStatusChangeNotify::~TAdventureUserStatusChangeNotify() {
  // @@protoc_insertion_point(destructor:pb.TAdventureUserStatusChangeNotify)
  SharedDtor();
}

void TAdventureUserStatusChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureUserStatusChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureUserStatusChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureUserStatusChangeNotify_descriptor_;
}

const TAdventureUserStatusChangeNotify& TAdventureUserStatusChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  return *default_instance_;
}

TAdventureUserStatusChangeNotify* TAdventureUserStatusChangeNotify::default_instance_ = NULL;

TAdventureUserStatusChangeNotify* TAdventureUserStatusChangeNotify::New() const {
  return new TAdventureUserStatusChangeNotify;
}

void TAdventureUserStatusChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    userid_ = GOOGLE_ULONGLONG(0);
    userstatus_ = 2;
    battleobjectindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureUserStatusChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureUserStatusChangeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 UserId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UserStatus;
        break;
      }

      // optional .pb.EMapUserStatus UserStatus = 2;
      case 2: {
        if (tag == 16) {
         parse_UserStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EMapUserStatus_IsValid(value)) {
            set_userstatus(static_cast< ::pb::EMapUserStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BattleObjectIndex;
        break;
      }

      // optional int32 BattleObjectIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_BattleObjectIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleobjectindex_)));
          set_has_battleobjectindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureUserStatusChangeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureUserStatusChangeNotify)
  return false;
#undef DO_
}

void TAdventureUserStatusChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureUserStatusChangeNotify)
  // optional uint64 UserId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  // optional .pb.EMapUserStatus UserStatus = 2;
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->userstatus(), output);
  }

  // optional int32 BattleObjectIndex = 3;
  if (has_battleobjectindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battleobjectindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureUserStatusChangeNotify)
}

::google::protobuf::uint8* TAdventureUserStatusChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureUserStatusChangeNotify)
  // optional uint64 UserId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  // optional .pb.EMapUserStatus UserStatus = 2;
  if (has_userstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->userstatus(), target);
  }

  // optional int32 BattleObjectIndex = 3;
  if (has_battleobjectindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->battleobjectindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureUserStatusChangeNotify)
  return target;
}

int TAdventureUserStatusChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 UserId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional .pb.EMapUserStatus UserStatus = 2;
    if (has_userstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->userstatus());
    }

    // optional int32 BattleObjectIndex = 3;
    if (has_battleobjectindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleobjectindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureUserStatusChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureUserStatusChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureUserStatusChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureUserStatusChangeNotify::MergeFrom(const TAdventureUserStatusChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_userstatus()) {
      set_userstatus(from.userstatus());
    }
    if (from.has_battleobjectindex()) {
      set_battleobjectindex(from.battleobjectindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureUserStatusChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureUserStatusChangeNotify::CopyFrom(const TAdventureUserStatusChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureUserStatusChangeNotify::IsInitialized() const {

  return true;
}

void TAdventureUserStatusChangeNotify::Swap(TAdventureUserStatusChangeNotify* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(battleobjectindex_, other->battleobjectindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureUserStatusChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureUserStatusChangeNotify_descriptor_;
  metadata.reflection = TAdventureUserStatusChangeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureMateAnswerNotify::kLayerIndexFieldNumber;
const int TAdventureMateAnswerNotify::kXFieldNumber;
const int TAdventureMateAnswerNotify::kYFieldNumber;
const int TAdventureMateAnswerNotify::kChoseIndexFieldNumber;
const int TAdventureMateAnswerNotify::kMateUidFieldNumber;
#endif  // !_MSC_VER

TAdventureMateAnswerNotify::TAdventureMateAnswerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureMateAnswerNotify)
}

void TAdventureMateAnswerNotify::InitAsDefaultInstance() {
}

TAdventureMateAnswerNotify::TAdventureMateAnswerNotify(const TAdventureMateAnswerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureMateAnswerNotify)
}

void TAdventureMateAnswerNotify::SharedCtor() {
  _cached_size_ = 0;
  layerindex_ = 0u;
  x_ = 0;
  y_ = 0;
  choseindex_ = 0u;
  mateuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureMateAnswerNotify::~TAdventureMateAnswerNotify() {
  // @@protoc_insertion_point(destructor:pb.TAdventureMateAnswerNotify)
  SharedDtor();
}

void TAdventureMateAnswerNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureMateAnswerNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureMateAnswerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureMateAnswerNotify_descriptor_;
}

const TAdventureMateAnswerNotify& TAdventureMateAnswerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  return *default_instance_;
}

TAdventureMateAnswerNotify* TAdventureMateAnswerNotify::default_instance_ = NULL;

TAdventureMateAnswerNotify* TAdventureMateAnswerNotify::New() const {
  return new TAdventureMateAnswerNotify;
}

void TAdventureMateAnswerNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureMateAnswerNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(layerindex_, mateuid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureMateAnswerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureMateAnswerNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerindex_)));
          set_has_layerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_X;
        break;
      }

      // optional int32 X = 2;
      case 2: {
        if (tag == 16) {
         parse_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Y;
        break;
      }

      // optional int32 Y = 3;
      case 3: {
        if (tag == 24) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ChoseIndex;
        break;
      }

      // optional uint32 ChoseIndex = 4;
      case 4: {
        if (tag == 32) {
         parse_ChoseIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &choseindex_)));
          set_has_choseindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MateUid;
        break;
      }

      // optional uint64 MateUid = 5;
      case 5: {
        if (tag == 40) {
         parse_MateUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mateuid_)));
          set_has_mateuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureMateAnswerNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureMateAnswerNotify)
  return false;
#undef DO_
}

void TAdventureMateAnswerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureMateAnswerNotify)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerindex(), output);
  }

  // optional int32 X = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 Y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // optional uint32 ChoseIndex = 4;
  if (has_choseindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->choseindex(), output);
  }

  // optional uint64 MateUid = 5;
  if (has_mateuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->mateuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureMateAnswerNotify)
}

::google::protobuf::uint8* TAdventureMateAnswerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureMateAnswerNotify)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerindex(), target);
  }

  // optional int32 X = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 Y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // optional uint32 ChoseIndex = 4;
  if (has_choseindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->choseindex(), target);
  }

  // optional uint64 MateUid = 5;
  if (has_mateuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->mateuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureMateAnswerNotify)
  return target;
}

int TAdventureMateAnswerNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerIndex = 1;
    if (has_layerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerindex());
    }

    // optional int32 X = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 Y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional uint32 ChoseIndex = 4;
    if (has_choseindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->choseindex());
    }

    // optional uint64 MateUid = 5;
    if (has_mateuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mateuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureMateAnswerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureMateAnswerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureMateAnswerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureMateAnswerNotify::MergeFrom(const TAdventureMateAnswerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerindex()) {
      set_layerindex(from.layerindex());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_choseindex()) {
      set_choseindex(from.choseindex());
    }
    if (from.has_mateuid()) {
      set_mateuid(from.mateuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureMateAnswerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureMateAnswerNotify::CopyFrom(const TAdventureMateAnswerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureMateAnswerNotify::IsInitialized() const {

  return true;
}

void TAdventureMateAnswerNotify::Swap(TAdventureMateAnswerNotify* other) {
  if (other != this) {
    std::swap(layerindex_, other->layerindex_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(choseindex_, other->choseindex_);
    std::swap(mateuid_, other->mateuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureMateAnswerNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureMateAnswerNotify_descriptor_;
  metadata.reflection = TAdventureMateAnswerNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureAnswerEndNotify::kLayerIndexFieldNumber;
const int TAdventureAnswerEndNotify::kXFieldNumber;
const int TAdventureAnswerEndNotify::kYFieldNumber;
const int TAdventureAnswerEndNotify::kKeyIndexFieldNumber;
#endif  // !_MSC_VER

TAdventureAnswerEndNotify::TAdventureAnswerEndNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureAnswerEndNotify)
}

void TAdventureAnswerEndNotify::InitAsDefaultInstance() {
}

TAdventureAnswerEndNotify::TAdventureAnswerEndNotify(const TAdventureAnswerEndNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureAnswerEndNotify)
}

void TAdventureAnswerEndNotify::SharedCtor() {
  _cached_size_ = 0;
  layerindex_ = 0u;
  x_ = 0;
  y_ = 0;
  keyindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureAnswerEndNotify::~TAdventureAnswerEndNotify() {
  // @@protoc_insertion_point(destructor:pb.TAdventureAnswerEndNotify)
  SharedDtor();
}

void TAdventureAnswerEndNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureAnswerEndNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureAnswerEndNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureAnswerEndNotify_descriptor_;
}

const TAdventureAnswerEndNotify& TAdventureAnswerEndNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  return *default_instance_;
}

TAdventureAnswerEndNotify* TAdventureAnswerEndNotify::default_instance_ = NULL;

TAdventureAnswerEndNotify* TAdventureAnswerEndNotify::New() const {
  return new TAdventureAnswerEndNotify;
}

void TAdventureAnswerEndNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureAnswerEndNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(layerindex_, keyindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureAnswerEndNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureAnswerEndNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerindex_)));
          set_has_layerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_X;
        break;
      }

      // optional int32 X = 2;
      case 2: {
        if (tag == 16) {
         parse_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Y;
        break;
      }

      // optional int32 Y = 3;
      case 3: {
        if (tag == 24) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_KeyIndex;
        break;
      }

      // optional uint32 KeyIndex = 4;
      case 4: {
        if (tag == 32) {
         parse_KeyIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keyindex_)));
          set_has_keyindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureAnswerEndNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureAnswerEndNotify)
  return false;
#undef DO_
}

void TAdventureAnswerEndNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureAnswerEndNotify)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerindex(), output);
  }

  // optional int32 X = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 Y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // optional uint32 KeyIndex = 4;
  if (has_keyindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->keyindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureAnswerEndNotify)
}

::google::protobuf::uint8* TAdventureAnswerEndNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureAnswerEndNotify)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerindex(), target);
  }

  // optional int32 X = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 Y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // optional uint32 KeyIndex = 4;
  if (has_keyindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->keyindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureAnswerEndNotify)
  return target;
}

int TAdventureAnswerEndNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerIndex = 1;
    if (has_layerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerindex());
    }

    // optional int32 X = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 Y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional uint32 KeyIndex = 4;
    if (has_keyindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keyindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureAnswerEndNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureAnswerEndNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureAnswerEndNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureAnswerEndNotify::MergeFrom(const TAdventureAnswerEndNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerindex()) {
      set_layerindex(from.layerindex());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_keyindex()) {
      set_keyindex(from.keyindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureAnswerEndNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureAnswerEndNotify::CopyFrom(const TAdventureAnswerEndNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureAnswerEndNotify::IsInitialized() const {

  return true;
}

void TAdventureAnswerEndNotify::Swap(TAdventureAnswerEndNotify* other) {
  if (other != this) {
    std::swap(layerindex_, other->layerindex_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(keyindex_, other->keyindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureAnswerEndNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureAnswerEndNotify_descriptor_;
  metadata.reflection = TAdventureAnswerEndNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventurePassBlockNotify::kBlockArrFieldNumber;
#endif  // !_MSC_VER

TAdventurePassBlockNotify::TAdventurePassBlockNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventurePassBlockNotify)
}

void TAdventurePassBlockNotify::InitAsDefaultInstance() {
}

TAdventurePassBlockNotify::TAdventurePassBlockNotify(const TAdventurePassBlockNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventurePassBlockNotify)
}

void TAdventurePassBlockNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventurePassBlockNotify::~TAdventurePassBlockNotify() {
  // @@protoc_insertion_point(destructor:pb.TAdventurePassBlockNotify)
  SharedDtor();
}

void TAdventurePassBlockNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventurePassBlockNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventurePassBlockNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventurePassBlockNotify_descriptor_;
}

const TAdventurePassBlockNotify& TAdventurePassBlockNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  return *default_instance_;
}

TAdventurePassBlockNotify* TAdventurePassBlockNotify::default_instance_ = NULL;

TAdventurePassBlockNotify* TAdventurePassBlockNotify::New() const {
  return new TAdventurePassBlockNotify;
}

void TAdventurePassBlockNotify::Clear() {
  blockarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventurePassBlockNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventurePassBlockNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TAdventurePassBlock BlockArr = 1;
      case 1: {
        if (tag == 10) {
         parse_BlockArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blockarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_BlockArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventurePassBlockNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventurePassBlockNotify)
  return false;
#undef DO_
}

void TAdventurePassBlockNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventurePassBlockNotify)
  // repeated .pb.TAdventurePassBlock BlockArr = 1;
  for (int i = 0; i < this->blockarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blockarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventurePassBlockNotify)
}

::google::protobuf::uint8* TAdventurePassBlockNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventurePassBlockNotify)
  // repeated .pb.TAdventurePassBlock BlockArr = 1;
  for (int i = 0; i < this->blockarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blockarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventurePassBlockNotify)
  return target;
}

int TAdventurePassBlockNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TAdventurePassBlock BlockArr = 1;
  total_size += 1 * this->blockarr_size();
  for (int i = 0; i < this->blockarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blockarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventurePassBlockNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventurePassBlockNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventurePassBlockNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventurePassBlockNotify::MergeFrom(const TAdventurePassBlockNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  blockarr_.MergeFrom(from.blockarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventurePassBlockNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventurePassBlockNotify::CopyFrom(const TAdventurePassBlockNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventurePassBlockNotify::IsInitialized() const {

  return true;
}

void TAdventurePassBlockNotify::Swap(TAdventurePassBlockNotify* other) {
  if (other != this) {
    blockarr_.Swap(&other->blockarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventurePassBlockNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventurePassBlockNotify_descriptor_;
  metadata.reflection = TAdventurePassBlockNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTeamChangeNotify::kChangTypeFieldNumber;
const int TAdventureTeamChangeNotify::kTeamIdFieldNumber;
const int TAdventureTeamChangeNotify::kUserInfoFieldNumber;
const int TAdventureTeamChangeNotify::kMemberUidArrFieldNumber;
const int TAdventureTeamChangeNotify::kCurLeaderFieldNumber;
const int TAdventureTeamChangeNotify::kAddEnergyFieldNumber;
const int TAdventureTeamChangeNotify::kTeamModeFieldNumber;
#endif  // !_MSC_VER

TAdventureTeamChangeNotify::TAdventureTeamChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTeamChangeNotify)
}

void TAdventureTeamChangeNotify::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TAdventureUserSimpleInfo*>(&::pb::TAdventureUserSimpleInfo::default_instance());
}

TAdventureTeamChangeNotify::TAdventureTeamChangeNotify(const TAdventureTeamChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTeamChangeNotify)
}

void TAdventureTeamChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  changtype_ = 1;
  teamid_ = GOOGLE_ULONGLONG(0);
  userinfo_ = NULL;
  curleader_ = GOOGLE_ULONGLONG(0);
  addenergy_ = 0u;
  teammode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTeamChangeNotify::~TAdventureTeamChangeNotify() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTeamChangeNotify)
  SharedDtor();
}

void TAdventureTeamChangeNotify::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TAdventureTeamChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTeamChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTeamChangeNotify_descriptor_;
}

const TAdventureTeamChangeNotify& TAdventureTeamChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  return *default_instance_;
}

TAdventureTeamChangeNotify* TAdventureTeamChangeNotify::default_instance_ = NULL;

TAdventureTeamChangeNotify* TAdventureTeamChangeNotify::New() const {
  return new TAdventureTeamChangeNotify;
}

void TAdventureTeamChangeNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureTeamChangeNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 119) {
    ZR_(curleader_, teammode_);
    changtype_ = 1;
    teamid_ = GOOGLE_ULONGLONG(0);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TAdventureUserSimpleInfo::Clear();
    }
    addenergy_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  memberuidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTeamChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTeamChangeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ETeamChangeType ChangType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETeamChangeType_IsValid(value)) {
            set_changtype(static_cast< ::pb::ETeamChangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TAdventureUserSimpleInfo UserInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MemberUidArr;
        break;
      }

      // repeated uint64 MemberUidArr = 4;
      case 4: {
        if (tag == 32) {
         parse_MemberUidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_memberuidarr())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_memberuidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MemberUidArr;
        if (input->ExpectTag(40)) goto parse_CurLeader;
        break;
      }

      // optional uint64 CurLeader = 5;
      case 5: {
        if (tag == 40) {
         parse_CurLeader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curleader_)));
          set_has_curleader();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_AddEnergy;
        break;
      }

      // optional uint32 AddEnergy = 6;
      case 6: {
        if (tag == 48) {
         parse_AddEnergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addenergy_)));
          set_has_addenergy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_TeamMode;
        break;
      }

      // optional .pb.ETeamMode TeamMode = 7;
      case 7: {
        if (tag == 56) {
         parse_TeamMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETeamMode_IsValid(value)) {
            set_teammode(static_cast< ::pb::ETeamMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTeamChangeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTeamChangeNotify)
  return false;
#undef DO_
}

void TAdventureTeamChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTeamChangeNotify)
  // optional .pb.ETeamChangeType ChangType = 1;
  if (has_changtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->changtype(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional .pb.TAdventureUserSimpleInfo UserInfo = 3;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfo(), output);
  }

  // repeated uint64 MemberUidArr = 4;
  for (int i = 0; i < this->memberuidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->memberuidarr(i), output);
  }

  // optional uint64 CurLeader = 5;
  if (has_curleader()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->curleader(), output);
  }

  // optional uint32 AddEnergy = 6;
  if (has_addenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->addenergy(), output);
  }

  // optional .pb.ETeamMode TeamMode = 7;
  if (has_teammode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->teammode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTeamChangeNotify)
}

::google::protobuf::uint8* TAdventureTeamChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTeamChangeNotify)
  // optional .pb.ETeamChangeType ChangType = 1;
  if (has_changtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->changtype(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional .pb.TAdventureUserSimpleInfo UserInfo = 3;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfo(), target);
  }

  // repeated uint64 MemberUidArr = 4;
  for (int i = 0; i < this->memberuidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->memberuidarr(i), target);
  }

  // optional uint64 CurLeader = 5;
  if (has_curleader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->curleader(), target);
  }

  // optional uint32 AddEnergy = 6;
  if (has_addenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->addenergy(), target);
  }

  // optional .pb.ETeamMode TeamMode = 7;
  if (has_teammode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->teammode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTeamChangeNotify)
  return target;
}

int TAdventureTeamChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ETeamChangeType ChangType = 1;
    if (has_changtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->changtype());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.TAdventureUserSimpleInfo UserInfo = 3;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint64 CurLeader = 5;
    if (has_curleader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curleader());
    }

    // optional uint32 AddEnergy = 6;
    if (has_addenergy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addenergy());
    }

    // optional .pb.ETeamMode TeamMode = 7;
    if (has_teammode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teammode());
    }

  }
  // repeated uint64 MemberUidArr = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->memberuidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->memberuidarr(i));
    }
    total_size += 1 * this->memberuidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTeamChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTeamChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTeamChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTeamChangeNotify::MergeFrom(const TAdventureTeamChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberuidarr_.MergeFrom(from.memberuidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_changtype()) {
      set_changtype(from.changtype());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TAdventureUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_curleader()) {
      set_curleader(from.curleader());
    }
    if (from.has_addenergy()) {
      set_addenergy(from.addenergy());
    }
    if (from.has_teammode()) {
      set_teammode(from.teammode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTeamChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTeamChangeNotify::CopyFrom(const TAdventureTeamChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTeamChangeNotify::IsInitialized() const {

  return true;
}

void TAdventureTeamChangeNotify::Swap(TAdventureTeamChangeNotify* other) {
  if (other != this) {
    std::swap(changtype_, other->changtype_);
    std::swap(teamid_, other->teamid_);
    std::swap(userinfo_, other->userinfo_);
    memberuidarr_.Swap(&other->memberuidarr_);
    std::swap(curleader_, other->curleader_);
    std::swap(addenergy_, other->addenergy_);
    std::swap(teammode_, other->teammode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTeamChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTeamChangeNotify_descriptor_;
  metadata.reflection = TAdventureTeamChangeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEventStatusChangeNotify::kMateUidFieldNumber;
const int TAdventureEventStatusChangeNotify::kLayerIndexFieldNumber;
const int TAdventureEventStatusChangeNotify::kObjectPosXFieldNumber;
const int TAdventureEventStatusChangeNotify::kObjectPosYFieldNumber;
const int TAdventureEventStatusChangeNotify::kEventInfoFieldNumber;
#endif  // !_MSC_VER

TAdventureEventStatusChangeNotify::TAdventureEventStatusChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEventStatusChangeNotify)
}

void TAdventureEventStatusChangeNotify::InitAsDefaultInstance() {
  eventinfo_ = const_cast< ::pb::AdventureEvent*>(&::pb::AdventureEvent::default_instance());
}

TAdventureEventStatusChangeNotify::TAdventureEventStatusChangeNotify(const TAdventureEventStatusChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEventStatusChangeNotify)
}

void TAdventureEventStatusChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  mateuid_ = GOOGLE_ULONGLONG(0);
  layerindex_ = 0u;
  objectposx_ = 0;
  objectposy_ = 0;
  eventinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEventStatusChangeNotify::~TAdventureEventStatusChangeNotify() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEventStatusChangeNotify)
  SharedDtor();
}

void TAdventureEventStatusChangeNotify::SharedDtor() {
  if (this != default_instance_) {
    delete eventinfo_;
  }
}

void TAdventureEventStatusChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEventStatusChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEventStatusChangeNotify_descriptor_;
}

const TAdventureEventStatusChangeNotify& TAdventureEventStatusChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  return *default_instance_;
}

TAdventureEventStatusChangeNotify* TAdventureEventStatusChangeNotify::default_instance_ = NULL;

TAdventureEventStatusChangeNotify* TAdventureEventStatusChangeNotify::New() const {
  return new TAdventureEventStatusChangeNotify;
}

void TAdventureEventStatusChangeNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureEventStatusChangeNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(mateuid_, objectposx_);
    objectposy_ = 0;
    if (has_eventinfo()) {
      if (eventinfo_ != NULL) eventinfo_->::pb::AdventureEvent::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEventStatusChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEventStatusChangeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 MateUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mateuid_)));
          set_has_mateuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LayerIndex;
        break;
      }

      // optional uint32 LayerIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_LayerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerindex_)));
          set_has_layerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ObjectPosX;
        break;
      }

      // optional int32 ObjectPosX = 3;
      case 3: {
        if (tag == 24) {
         parse_ObjectPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectposx_)));
          set_has_objectposx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ObjectPosY;
        break;
      }

      // optional int32 ObjectPosY = 4;
      case 4: {
        if (tag == 32) {
         parse_ObjectPosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectposy_)));
          set_has_objectposy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_EventInfo;
        break;
      }

      // optional .pb.AdventureEvent EventInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_EventInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eventinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEventStatusChangeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEventStatusChangeNotify)
  return false;
#undef DO_
}

void TAdventureEventStatusChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEventStatusChangeNotify)
  // optional uint64 MateUid = 1;
  if (has_mateuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mateuid(), output);
  }

  // optional uint32 LayerIndex = 2;
  if (has_layerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layerindex(), output);
  }

  // optional int32 ObjectPosX = 3;
  if (has_objectposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->objectposx(), output);
  }

  // optional int32 ObjectPosY = 4;
  if (has_objectposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->objectposy(), output);
  }

  // optional .pb.AdventureEvent EventInfo = 5;
  if (has_eventinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->eventinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEventStatusChangeNotify)
}

::google::protobuf::uint8* TAdventureEventStatusChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEventStatusChangeNotify)
  // optional uint64 MateUid = 1;
  if (has_mateuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mateuid(), target);
  }

  // optional uint32 LayerIndex = 2;
  if (has_layerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->layerindex(), target);
  }

  // optional int32 ObjectPosX = 3;
  if (has_objectposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->objectposx(), target);
  }

  // optional int32 ObjectPosY = 4;
  if (has_objectposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->objectposy(), target);
  }

  // optional .pb.AdventureEvent EventInfo = 5;
  if (has_eventinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->eventinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEventStatusChangeNotify)
  return target;
}

int TAdventureEventStatusChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 MateUid = 1;
    if (has_mateuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mateuid());
    }

    // optional uint32 LayerIndex = 2;
    if (has_layerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerindex());
    }

    // optional int32 ObjectPosX = 3;
    if (has_objectposx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectposx());
    }

    // optional int32 ObjectPosY = 4;
    if (has_objectposy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectposy());
    }

    // optional .pb.AdventureEvent EventInfo = 5;
    if (has_eventinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eventinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEventStatusChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEventStatusChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEventStatusChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEventStatusChangeNotify::MergeFrom(const TAdventureEventStatusChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mateuid()) {
      set_mateuid(from.mateuid());
    }
    if (from.has_layerindex()) {
      set_layerindex(from.layerindex());
    }
    if (from.has_objectposx()) {
      set_objectposx(from.objectposx());
    }
    if (from.has_objectposy()) {
      set_objectposy(from.objectposy());
    }
    if (from.has_eventinfo()) {
      mutable_eventinfo()->::pb::AdventureEvent::MergeFrom(from.eventinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEventStatusChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEventStatusChangeNotify::CopyFrom(const TAdventureEventStatusChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEventStatusChangeNotify::IsInitialized() const {

  return true;
}

void TAdventureEventStatusChangeNotify::Swap(TAdventureEventStatusChangeNotify* other) {
  if (other != this) {
    std::swap(mateuid_, other->mateuid_);
    std::swap(layerindex_, other->layerindex_);
    std::swap(objectposx_, other->objectposx_);
    std::swap(objectposy_, other->objectposy_);
    std::swap(eventinfo_, other->eventinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEventStatusChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEventStatusChangeNotify_descriptor_;
  metadata.reflection = TAdventureEventStatusChangeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTeamRecordNotify::kRecordArrFieldNumber;
#endif  // !_MSC_VER

TAdventureTeamRecordNotify::TAdventureTeamRecordNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTeamRecordNotify)
}

void TAdventureTeamRecordNotify::InitAsDefaultInstance() {
}

TAdventureTeamRecordNotify::TAdventureTeamRecordNotify(const TAdventureTeamRecordNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTeamRecordNotify)
}

void TAdventureTeamRecordNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTeamRecordNotify::~TAdventureTeamRecordNotify() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTeamRecordNotify)
  SharedDtor();
}

void TAdventureTeamRecordNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureTeamRecordNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTeamRecordNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTeamRecordNotify_descriptor_;
}

const TAdventureTeamRecordNotify& TAdventureTeamRecordNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  return *default_instance_;
}

TAdventureTeamRecordNotify* TAdventureTeamRecordNotify::default_instance_ = NULL;

TAdventureTeamRecordNotify* TAdventureTeamRecordNotify::New() const {
  return new TAdventureTeamRecordNotify;
}

void TAdventureTeamRecordNotify::Clear() {
  recordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTeamRecordNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTeamRecordNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TAdventureTeamRecord RecordArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTeamRecordNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTeamRecordNotify)
  return false;
#undef DO_
}

void TAdventureTeamRecordNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTeamRecordNotify)
  // repeated .pb.TAdventureTeamRecord RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTeamRecordNotify)
}

::google::protobuf::uint8* TAdventureTeamRecordNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTeamRecordNotify)
  // repeated .pb.TAdventureTeamRecord RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTeamRecordNotify)
  return target;
}

int TAdventureTeamRecordNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TAdventureTeamRecord RecordArr = 1;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTeamRecordNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTeamRecordNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTeamRecordNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTeamRecordNotify::MergeFrom(const TAdventureTeamRecordNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarr_.MergeFrom(from.recordarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTeamRecordNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTeamRecordNotify::CopyFrom(const TAdventureTeamRecordNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTeamRecordNotify::IsInitialized() const {

  return true;
}

void TAdventureTeamRecordNotify::Swap(TAdventureTeamRecordNotify* other) {
  if (other != this) {
    recordarr_.Swap(&other->recordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTeamRecordNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTeamRecordNotify_descriptor_;
  metadata.reflection = TAdventureTeamRecordNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventurePosNotify::kPosChangeTypeFieldNumber;
const int TAdventurePosNotify::kMateUidFieldNumber;
const int TAdventurePosNotify::kLayerIndexFieldNumber;
const int TAdventurePosNotify::kPosXFieldNumber;
const int TAdventurePosNotify::kPosYFieldNumber;
#endif  // !_MSC_VER

TAdventurePosNotify::TAdventurePosNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventurePosNotify)
}

void TAdventurePosNotify::InitAsDefaultInstance() {
}

TAdventurePosNotify::TAdventurePosNotify(const TAdventurePosNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventurePosNotify)
}

void TAdventurePosNotify::SharedCtor() {
  _cached_size_ = 0;
  poschangetype_ = 1;
  mateuid_ = GOOGLE_ULONGLONG(0);
  layerindex_ = 0u;
  posx_ = 0;
  posy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventurePosNotify::~TAdventurePosNotify() {
  // @@protoc_insertion_point(destructor:pb.TAdventurePosNotify)
  SharedDtor();
}

void TAdventurePosNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventurePosNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventurePosNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventurePosNotify_descriptor_;
}

const TAdventurePosNotify& TAdventurePosNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  return *default_instance_;
}

TAdventurePosNotify* TAdventurePosNotify::default_instance_ = NULL;

TAdventurePosNotify* TAdventurePosNotify::New() const {
  return new TAdventurePosNotify;
}

void TAdventurePosNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventurePosNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(layerindex_, posy_);
    poschangetype_ = 1;
    mateuid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventurePosNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventurePosNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EAdventurePosChangeType PosChangeType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAdventurePosChangeType_IsValid(value)) {
            set_poschangetype(static_cast< ::pb::EAdventurePosChangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MateUid;
        break;
      }

      // optional uint64 MateUid = 2;
      case 2: {
        if (tag == 16) {
         parse_MateUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mateuid_)));
          set_has_mateuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LayerIndex;
        break;
      }

      // optional uint32 LayerIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_LayerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerindex_)));
          set_has_layerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PosX;
        break;
      }

      // optional int32 PosX = 4;
      case 4: {
        if (tag == 32) {
         parse_PosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_PosY;
        break;
      }

      // optional int32 PosY = 5;
      case 5: {
        if (tag == 40) {
         parse_PosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventurePosNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventurePosNotify)
  return false;
#undef DO_
}

void TAdventurePosNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventurePosNotify)
  // optional .pb.EAdventurePosChangeType PosChangeType = 1;
  if (has_poschangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->poschangetype(), output);
  }

  // optional uint64 MateUid = 2;
  if (has_mateuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mateuid(), output);
  }

  // optional uint32 LayerIndex = 3;
  if (has_layerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->layerindex(), output);
  }

  // optional int32 PosX = 4;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posx(), output);
  }

  // optional int32 PosY = 5;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->posy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventurePosNotify)
}

::google::protobuf::uint8* TAdventurePosNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventurePosNotify)
  // optional .pb.EAdventurePosChangeType PosChangeType = 1;
  if (has_poschangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->poschangetype(), target);
  }

  // optional uint64 MateUid = 2;
  if (has_mateuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mateuid(), target);
  }

  // optional uint32 LayerIndex = 3;
  if (has_layerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->layerindex(), target);
  }

  // optional int32 PosX = 4;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posx(), target);
  }

  // optional int32 PosY = 5;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->posy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventurePosNotify)
  return target;
}

int TAdventurePosNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EAdventurePosChangeType PosChangeType = 1;
    if (has_poschangetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->poschangetype());
    }

    // optional uint64 MateUid = 2;
    if (has_mateuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mateuid());
    }

    // optional uint32 LayerIndex = 3;
    if (has_layerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerindex());
    }

    // optional int32 PosX = 4;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 PosY = 5;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventurePosNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventurePosNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventurePosNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventurePosNotify::MergeFrom(const TAdventurePosNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poschangetype()) {
      set_poschangetype(from.poschangetype());
    }
    if (from.has_mateuid()) {
      set_mateuid(from.mateuid());
    }
    if (from.has_layerindex()) {
      set_layerindex(from.layerindex());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventurePosNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventurePosNotify::CopyFrom(const TAdventurePosNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventurePosNotify::IsInitialized() const {

  return true;
}

void TAdventurePosNotify::Swap(TAdventurePosNotify* other) {
  if (other != this) {
    std::swap(poschangetype_, other->poschangetype_);
    std::swap(mateuid_, other->mateuid_);
    std::swap(layerindex_, other->layerindex_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventurePosNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventurePosNotify_descriptor_;
  metadata.reflection = TAdventurePosNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureAddMapRewardNotify::kRewardArrayFieldNumber;
const int TAdventureAddMapRewardNotify::kRewardUidFieldNumber;
#endif  // !_MSC_VER

TAdventureAddMapRewardNotify::TAdventureAddMapRewardNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureAddMapRewardNotify)
}

void TAdventureAddMapRewardNotify::InitAsDefaultInstance() {
}

TAdventureAddMapRewardNotify::TAdventureAddMapRewardNotify(const TAdventureAddMapRewardNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureAddMapRewardNotify)
}

void TAdventureAddMapRewardNotify::SharedCtor() {
  _cached_size_ = 0;
  rewarduid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureAddMapRewardNotify::~TAdventureAddMapRewardNotify() {
  // @@protoc_insertion_point(destructor:pb.TAdventureAddMapRewardNotify)
  SharedDtor();
}

void TAdventureAddMapRewardNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureAddMapRewardNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureAddMapRewardNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureAddMapRewardNotify_descriptor_;
}

const TAdventureAddMapRewardNotify& TAdventureAddMapRewardNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  return *default_instance_;
}

TAdventureAddMapRewardNotify* TAdventureAddMapRewardNotify::default_instance_ = NULL;

TAdventureAddMapRewardNotify* TAdventureAddMapRewardNotify::New() const {
  return new TAdventureAddMapRewardNotify;
}

void TAdventureAddMapRewardNotify::Clear() {
  rewarduid_ = GOOGLE_ULONGLONG(0);
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureAddMapRewardNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureAddMapRewardNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectTag(16)) goto parse_RewardUid;
        break;
      }

      // optional uint64 RewardUid = 2;
      case 2: {
        if (tag == 16) {
         parse_RewardUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rewarduid_)));
          set_has_rewarduid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureAddMapRewardNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureAddMapRewardNotify)
  return false;
#undef DO_
}

void TAdventureAddMapRewardNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureAddMapRewardNotify)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  // optional uint64 RewardUid = 2;
  if (has_rewarduid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rewarduid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureAddMapRewardNotify)
}

::google::protobuf::uint8* TAdventureAddMapRewardNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureAddMapRewardNotify)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  // optional uint64 RewardUid = 2;
  if (has_rewarduid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rewarduid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureAddMapRewardNotify)
  return target;
}

int TAdventureAddMapRewardNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 RewardUid = 2;
    if (has_rewarduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rewarduid());
    }

  }
  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureAddMapRewardNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureAddMapRewardNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureAddMapRewardNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureAddMapRewardNotify::MergeFrom(const TAdventureAddMapRewardNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_rewarduid()) {
      set_rewarduid(from.rewarduid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureAddMapRewardNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureAddMapRewardNotify::CopyFrom(const TAdventureAddMapRewardNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureAddMapRewardNotify::IsInitialized() const {

  return true;
}

void TAdventureAddMapRewardNotify::Swap(TAdventureAddMapRewardNotify* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(rewarduid_, other->rewarduid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureAddMapRewardNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureAddMapRewardNotify_descriptor_;
  metadata.reflection = TAdventureAddMapRewardNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureMysteryDoorOpenNotify::kLayerIndexFieldNumber;
#endif  // !_MSC_VER

TAdventureMysteryDoorOpenNotify::TAdventureMysteryDoorOpenNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureMysteryDoorOpenNotify)
}

void TAdventureMysteryDoorOpenNotify::InitAsDefaultInstance() {
}

TAdventureMysteryDoorOpenNotify::TAdventureMysteryDoorOpenNotify(const TAdventureMysteryDoorOpenNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureMysteryDoorOpenNotify)
}

void TAdventureMysteryDoorOpenNotify::SharedCtor() {
  _cached_size_ = 0;
  layerindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureMysteryDoorOpenNotify::~TAdventureMysteryDoorOpenNotify() {
  // @@protoc_insertion_point(destructor:pb.TAdventureMysteryDoorOpenNotify)
  SharedDtor();
}

void TAdventureMysteryDoorOpenNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureMysteryDoorOpenNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureMysteryDoorOpenNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureMysteryDoorOpenNotify_descriptor_;
}

const TAdventureMysteryDoorOpenNotify& TAdventureMysteryDoorOpenNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  return *default_instance_;
}

TAdventureMysteryDoorOpenNotify* TAdventureMysteryDoorOpenNotify::default_instance_ = NULL;

TAdventureMysteryDoorOpenNotify* TAdventureMysteryDoorOpenNotify::New() const {
  return new TAdventureMysteryDoorOpenNotify;
}

void TAdventureMysteryDoorOpenNotify::Clear() {
  layerindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureMysteryDoorOpenNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureMysteryDoorOpenNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerindex_)));
          set_has_layerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureMysteryDoorOpenNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureMysteryDoorOpenNotify)
  return false;
#undef DO_
}

void TAdventureMysteryDoorOpenNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureMysteryDoorOpenNotify)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureMysteryDoorOpenNotify)
}

::google::protobuf::uint8* TAdventureMysteryDoorOpenNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureMysteryDoorOpenNotify)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureMysteryDoorOpenNotify)
  return target;
}

int TAdventureMysteryDoorOpenNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerIndex = 1;
    if (has_layerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureMysteryDoorOpenNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureMysteryDoorOpenNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureMysteryDoorOpenNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureMysteryDoorOpenNotify::MergeFrom(const TAdventureMysteryDoorOpenNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerindex()) {
      set_layerindex(from.layerindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureMysteryDoorOpenNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureMysteryDoorOpenNotify::CopyFrom(const TAdventureMysteryDoorOpenNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureMysteryDoorOpenNotify::IsInitialized() const {

  return true;
}

void TAdventureMysteryDoorOpenNotify::Swap(TAdventureMysteryDoorOpenNotify* other) {
  if (other != this) {
    std::swap(layerindex_, other->layerindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureMysteryDoorOpenNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureMysteryDoorOpenNotify_descriptor_;
  metadata.reflection = TAdventureMysteryDoorOpenNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureAddObjectNotify::kLayerIndexFieldNumber;
const int TAdventureAddObjectNotify::kCenterPosXFieldNumber;
const int TAdventureAddObjectNotify::kCenterPosYFieldNumber;
const int TAdventureAddObjectNotify::kObjectArrayFieldNumber;
#endif  // !_MSC_VER

TAdventureAddObjectNotify::TAdventureAddObjectNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureAddObjectNotify)
}

void TAdventureAddObjectNotify::InitAsDefaultInstance() {
}

TAdventureAddObjectNotify::TAdventureAddObjectNotify(const TAdventureAddObjectNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureAddObjectNotify)
}

void TAdventureAddObjectNotify::SharedCtor() {
  _cached_size_ = 0;
  layerindex_ = 0u;
  centerposx_ = 0;
  centerposy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureAddObjectNotify::~TAdventureAddObjectNotify() {
  // @@protoc_insertion_point(destructor:pb.TAdventureAddObjectNotify)
  SharedDtor();
}

void TAdventureAddObjectNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureAddObjectNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureAddObjectNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureAddObjectNotify_descriptor_;
}

const TAdventureAddObjectNotify& TAdventureAddObjectNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  return *default_instance_;
}

TAdventureAddObjectNotify* TAdventureAddObjectNotify::default_instance_ = NULL;

TAdventureAddObjectNotify* TAdventureAddObjectNotify::New() const {
  return new TAdventureAddObjectNotify;
}

void TAdventureAddObjectNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureAddObjectNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(layerindex_, centerposx_);
    centerposy_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  objectarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureAddObjectNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureAddObjectNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerindex_)));
          set_has_layerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CenterPosX;
        break;
      }

      // optional int32 CenterPosX = 2;
      case 2: {
        if (tag == 16) {
         parse_CenterPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &centerposx_)));
          set_has_centerposx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CenterPosY;
        break;
      }

      // optional int32 CenterPosY = 3;
      case 3: {
        if (tag == 24) {
         parse_CenterPosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &centerposy_)));
          set_has_centerposy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ObjectArray;
        break;
      }

      // repeated .pb.AdventureObject ObjectArray = 4;
      case 4: {
        if (tag == 34) {
         parse_ObjectArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objectarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ObjectArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureAddObjectNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureAddObjectNotify)
  return false;
#undef DO_
}

void TAdventureAddObjectNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureAddObjectNotify)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerindex(), output);
  }

  // optional int32 CenterPosX = 2;
  if (has_centerposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->centerposx(), output);
  }

  // optional int32 CenterPosY = 3;
  if (has_centerposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->centerposy(), output);
  }

  // repeated .pb.AdventureObject ObjectArray = 4;
  for (int i = 0; i < this->objectarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->objectarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureAddObjectNotify)
}

::google::protobuf::uint8* TAdventureAddObjectNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureAddObjectNotify)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerindex(), target);
  }

  // optional int32 CenterPosX = 2;
  if (has_centerposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->centerposx(), target);
  }

  // optional int32 CenterPosY = 3;
  if (has_centerposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->centerposy(), target);
  }

  // repeated .pb.AdventureObject ObjectArray = 4;
  for (int i = 0; i < this->objectarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->objectarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureAddObjectNotify)
  return target;
}

int TAdventureAddObjectNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerIndex = 1;
    if (has_layerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerindex());
    }

    // optional int32 CenterPosX = 2;
    if (has_centerposx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->centerposx());
    }

    // optional int32 CenterPosY = 3;
    if (has_centerposy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->centerposy());
    }

  }
  // repeated .pb.AdventureObject ObjectArray = 4;
  total_size += 1 * this->objectarray_size();
  for (int i = 0; i < this->objectarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objectarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureAddObjectNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureAddObjectNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureAddObjectNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureAddObjectNotify::MergeFrom(const TAdventureAddObjectNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  objectarray_.MergeFrom(from.objectarray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerindex()) {
      set_layerindex(from.layerindex());
    }
    if (from.has_centerposx()) {
      set_centerposx(from.centerposx());
    }
    if (from.has_centerposy()) {
      set_centerposy(from.centerposy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureAddObjectNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureAddObjectNotify::CopyFrom(const TAdventureAddObjectNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureAddObjectNotify::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->objectarray())) return false;
  return true;
}

void TAdventureAddObjectNotify::Swap(TAdventureAddObjectNotify* other) {
  if (other != this) {
    std::swap(layerindex_, other->layerindex_);
    std::swap(centerposx_, other->centerposx_);
    std::swap(centerposy_, other->centerposy_);
    objectarray_.Swap(&other->objectarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureAddObjectNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureAddObjectNotify_descriptor_;
  metadata.reflection = TAdventureAddObjectNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureCalledNotify::kTeamIdFieldNumber;
const int TAdventureCalledNotify::kMateUidFieldNumber;
#endif  // !_MSC_VER

TAdventureCalledNotify::TAdventureCalledNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureCalledNotify)
}

void TAdventureCalledNotify::InitAsDefaultInstance() {
}

TAdventureCalledNotify::TAdventureCalledNotify(const TAdventureCalledNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureCalledNotify)
}

void TAdventureCalledNotify::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  mateuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureCalledNotify::~TAdventureCalledNotify() {
  // @@protoc_insertion_point(destructor:pb.TAdventureCalledNotify)
  SharedDtor();
}

void TAdventureCalledNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureCalledNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureCalledNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureCalledNotify_descriptor_;
}

const TAdventureCalledNotify& TAdventureCalledNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  return *default_instance_;
}

TAdventureCalledNotify* TAdventureCalledNotify::default_instance_ = NULL;

TAdventureCalledNotify* TAdventureCalledNotify::New() const {
  return new TAdventureCalledNotify;
}

void TAdventureCalledNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureCalledNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, mateuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureCalledNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureCalledNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MateUid;
        break;
      }

      // optional uint64 MateUid = 2;
      case 2: {
        if (tag == 16) {
         parse_MateUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mateuid_)));
          set_has_mateuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureCalledNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureCalledNotify)
  return false;
#undef DO_
}

void TAdventureCalledNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureCalledNotify)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint64 MateUid = 2;
  if (has_mateuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mateuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureCalledNotify)
}

::google::protobuf::uint8* TAdventureCalledNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureCalledNotify)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint64 MateUid = 2;
  if (has_mateuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mateuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureCalledNotify)
  return target;
}

int TAdventureCalledNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 MateUid = 2;
    if (has_mateuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mateuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureCalledNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureCalledNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureCalledNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureCalledNotify::MergeFrom(const TAdventureCalledNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_mateuid()) {
      set_mateuid(from.mateuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureCalledNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureCalledNotify::CopyFrom(const TAdventureCalledNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureCalledNotify::IsInitialized() const {

  return true;
}

void TAdventureCalledNotify::Swap(TAdventureCalledNotify* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(mateuid_, other->mateuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureCalledNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureCalledNotify_descriptor_;
  metadata.reflection = TAdventureCalledNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureRecvCompleteRewardNotify::kRecvUidFieldNumber;
#endif  // !_MSC_VER

TAdventureRecvCompleteRewardNotify::TAdventureRecvCompleteRewardNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureRecvCompleteRewardNotify)
}

void TAdventureRecvCompleteRewardNotify::InitAsDefaultInstance() {
}

TAdventureRecvCompleteRewardNotify::TAdventureRecvCompleteRewardNotify(const TAdventureRecvCompleteRewardNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureRecvCompleteRewardNotify)
}

void TAdventureRecvCompleteRewardNotify::SharedCtor() {
  _cached_size_ = 0;
  recvuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureRecvCompleteRewardNotify::~TAdventureRecvCompleteRewardNotify() {
  // @@protoc_insertion_point(destructor:pb.TAdventureRecvCompleteRewardNotify)
  SharedDtor();
}

void TAdventureRecvCompleteRewardNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureRecvCompleteRewardNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureRecvCompleteRewardNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureRecvCompleteRewardNotify_descriptor_;
}

const TAdventureRecvCompleteRewardNotify& TAdventureRecvCompleteRewardNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  return *default_instance_;
}

TAdventureRecvCompleteRewardNotify* TAdventureRecvCompleteRewardNotify::default_instance_ = NULL;

TAdventureRecvCompleteRewardNotify* TAdventureRecvCompleteRewardNotify::New() const {
  return new TAdventureRecvCompleteRewardNotify;
}

void TAdventureRecvCompleteRewardNotify::Clear() {
  recvuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureRecvCompleteRewardNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureRecvCompleteRewardNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RecvUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recvuid_)));
          set_has_recvuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureRecvCompleteRewardNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureRecvCompleteRewardNotify)
  return false;
#undef DO_
}

void TAdventureRecvCompleteRewardNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureRecvCompleteRewardNotify)
  // optional uint64 RecvUid = 1;
  if (has_recvuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->recvuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureRecvCompleteRewardNotify)
}

::google::protobuf::uint8* TAdventureRecvCompleteRewardNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureRecvCompleteRewardNotify)
  // optional uint64 RecvUid = 1;
  if (has_recvuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->recvuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureRecvCompleteRewardNotify)
  return target;
}

int TAdventureRecvCompleteRewardNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RecvUid = 1;
    if (has_recvuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recvuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureRecvCompleteRewardNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureRecvCompleteRewardNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureRecvCompleteRewardNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureRecvCompleteRewardNotify::MergeFrom(const TAdventureRecvCompleteRewardNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recvuid()) {
      set_recvuid(from.recvuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureRecvCompleteRewardNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureRecvCompleteRewardNotify::CopyFrom(const TAdventureRecvCompleteRewardNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureRecvCompleteRewardNotify::IsInitialized() const {

  return true;
}

void TAdventureRecvCompleteRewardNotify::Swap(TAdventureRecvCompleteRewardNotify* other) {
  if (other != this) {
    std::swap(recvuid_, other->recvuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureRecvCompleteRewardNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureRecvCompleteRewardNotify_descriptor_;
  metadata.reflection = TAdventureRecvCompleteRewardNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureMonsterHpNotify::kMonsterInfoFieldNumber;
#endif  // !_MSC_VER

TAdventureMonsterHpNotify::TAdventureMonsterHpNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureMonsterHpNotify)
}

void TAdventureMonsterHpNotify::InitAsDefaultInstance() {
  monsterinfo_ = const_cast< ::pb::TAdventureMonsterInfo*>(&::pb::TAdventureMonsterInfo::default_instance());
}

TAdventureMonsterHpNotify::TAdventureMonsterHpNotify(const TAdventureMonsterHpNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureMonsterHpNotify)
}

void TAdventureMonsterHpNotify::SharedCtor() {
  _cached_size_ = 0;
  monsterinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureMonsterHpNotify::~TAdventureMonsterHpNotify() {
  // @@protoc_insertion_point(destructor:pb.TAdventureMonsterHpNotify)
  SharedDtor();
}

void TAdventureMonsterHpNotify::SharedDtor() {
  if (this != default_instance_) {
    delete monsterinfo_;
  }
}

void TAdventureMonsterHpNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureMonsterHpNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureMonsterHpNotify_descriptor_;
}

const TAdventureMonsterHpNotify& TAdventureMonsterHpNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  return *default_instance_;
}

TAdventureMonsterHpNotify* TAdventureMonsterHpNotify::default_instance_ = NULL;

TAdventureMonsterHpNotify* TAdventureMonsterHpNotify::New() const {
  return new TAdventureMonsterHpNotify;
}

void TAdventureMonsterHpNotify::Clear() {
  if (has_monsterinfo()) {
    if (monsterinfo_ != NULL) monsterinfo_->::pb::TAdventureMonsterInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureMonsterHpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureMonsterHpNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAdventureMonsterInfo MonsterInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monsterinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureMonsterHpNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureMonsterHpNotify)
  return false;
#undef DO_
}

void TAdventureMonsterHpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureMonsterHpNotify)
  // optional .pb.TAdventureMonsterInfo MonsterInfo = 1;
  if (has_monsterinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsterinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureMonsterHpNotify)
}

::google::protobuf::uint8* TAdventureMonsterHpNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureMonsterHpNotify)
  // optional .pb.TAdventureMonsterInfo MonsterInfo = 1;
  if (has_monsterinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsterinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureMonsterHpNotify)
  return target;
}

int TAdventureMonsterHpNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAdventureMonsterInfo MonsterInfo = 1;
    if (has_monsterinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monsterinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureMonsterHpNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureMonsterHpNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureMonsterHpNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureMonsterHpNotify::MergeFrom(const TAdventureMonsterHpNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterinfo()) {
      mutable_monsterinfo()->::pb::TAdventureMonsterInfo::MergeFrom(from.monsterinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureMonsterHpNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureMonsterHpNotify::CopyFrom(const TAdventureMonsterHpNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureMonsterHpNotify::IsInitialized() const {

  return true;
}

void TAdventureMonsterHpNotify::Swap(TAdventureMonsterHpNotify* other) {
  if (other != this) {
    std::swap(monsterinfo_, other->monsterinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureMonsterHpNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureMonsterHpNotify_descriptor_;
  metadata.reflection = TAdventureMonsterHpNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureQuitTeamMapNotify::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TAdventureQuitTeamMapNotify::TAdventureQuitTeamMapNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureQuitTeamMapNotify)
}

void TAdventureQuitTeamMapNotify::InitAsDefaultInstance() {
}

TAdventureQuitTeamMapNotify::TAdventureQuitTeamMapNotify(const TAdventureQuitTeamMapNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureQuitTeamMapNotify)
}

void TAdventureQuitTeamMapNotify::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureQuitTeamMapNotify::~TAdventureQuitTeamMapNotify() {
  // @@protoc_insertion_point(destructor:pb.TAdventureQuitTeamMapNotify)
  SharedDtor();
}

void TAdventureQuitTeamMapNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureQuitTeamMapNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureQuitTeamMapNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureQuitTeamMapNotify_descriptor_;
}

const TAdventureQuitTeamMapNotify& TAdventureQuitTeamMapNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  return *default_instance_;
}

TAdventureQuitTeamMapNotify* TAdventureQuitTeamMapNotify::default_instance_ = NULL;

TAdventureQuitTeamMapNotify* TAdventureQuitTeamMapNotify::New() const {
  return new TAdventureQuitTeamMapNotify;
}

void TAdventureQuitTeamMapNotify::Clear() {
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureQuitTeamMapNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureQuitTeamMapNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureQuitTeamMapNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureQuitTeamMapNotify)
  return false;
#undef DO_
}

void TAdventureQuitTeamMapNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureQuitTeamMapNotify)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureQuitTeamMapNotify)
}

::google::protobuf::uint8* TAdventureQuitTeamMapNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureQuitTeamMapNotify)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureQuitTeamMapNotify)
  return target;
}

int TAdventureQuitTeamMapNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureQuitTeamMapNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureQuitTeamMapNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureQuitTeamMapNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureQuitTeamMapNotify::MergeFrom(const TAdventureQuitTeamMapNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureQuitTeamMapNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureQuitTeamMapNotify::CopyFrom(const TAdventureQuitTeamMapNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureQuitTeamMapNotify::IsInitialized() const {

  return true;
}

void TAdventureQuitTeamMapNotify::Swap(TAdventureQuitTeamMapNotify* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureQuitTeamMapNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureQuitTeamMapNotify_descriptor_;
  metadata.reflection = TAdventureQuitTeamMapNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
