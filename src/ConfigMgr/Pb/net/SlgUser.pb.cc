// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/SlgUser.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/SlgUser.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TSlgUserGetUserDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgUserGetUserDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgUserBaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgUserBaseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgUserGetUserDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgUserGetUserDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserRecoverDataSlg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserRecoverDataSlg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgUserResourceData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgUserResourceData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgUserDataNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgUserDataNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgUserGetOtherUserInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgUserGetOtherUserInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgUserGetOtherUserInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgUserGetOtherUserInfoRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fSlgUser_2eproto() {
  protobuf_AddDesc_net_2fSlgUser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/SlgUser.proto");
  GOOGLE_CHECK(file != NULL);
  TSlgUserGetUserDataReq_descriptor_ = file->message_type(0);
  static const int TSlgUserGetUserDataReq_offsets_[1] = {
  };
  TSlgUserGetUserDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgUserGetUserDataReq_descriptor_,
      TSlgUserGetUserDataReq::default_instance_,
      TSlgUserGetUserDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserGetUserDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserGetUserDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgUserGetUserDataReq));
  TSlgUserBaseData_descriptor_ = file->message_type(1);
  static const int TSlgUserBaseData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserBaseData, recoverarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserBaseData, resourcedataarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserBaseData, coin_),
  };
  TSlgUserBaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgUserBaseData_descriptor_,
      TSlgUserBaseData::default_instance_,
      TSlgUserBaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserBaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserBaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgUserBaseData));
  TSlgUserGetUserDataRsp_descriptor_ = file->message_type(2);
  static const int TSlgUserGetUserDataRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserGetUserDataRsp, userdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserGetUserDataRsp, servertime_),
  };
  TSlgUserGetUserDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgUserGetUserDataRsp_descriptor_,
      TSlgUserGetUserDataRsp::default_instance_,
      TSlgUserGetUserDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserGetUserDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserGetUserDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgUserGetUserDataRsp));
  TUserRecoverDataSlg_descriptor_ = file->message_type(3);
  static const int TUserRecoverDataSlg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserRecoverDataSlg, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserRecoverDataSlg, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserRecoverDataSlg, recovertime_),
  };
  TUserRecoverDataSlg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserRecoverDataSlg_descriptor_,
      TUserRecoverDataSlg::default_instance_,
      TUserRecoverDataSlg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserRecoverDataSlg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserRecoverDataSlg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserRecoverDataSlg));
  TSlgUserResourceData_descriptor_ = file->message_type(4);
  static const int TSlgUserResourceData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserResourceData, resourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserResourceData, resourcenum_),
  };
  TSlgUserResourceData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgUserResourceData_descriptor_,
      TSlgUserResourceData::default_instance_,
      TSlgUserResourceData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserResourceData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserResourceData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgUserResourceData));
  TSlgUserDataNotify_descriptor_ = file->message_type(5);
  static const int TSlgUserDataNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserDataNotify, userdata_),
  };
  TSlgUserDataNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgUserDataNotify_descriptor_,
      TSlgUserDataNotify::default_instance_,
      TSlgUserDataNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserDataNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserDataNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgUserDataNotify));
  TSlgUserGetOtherUserInfoReq_descriptor_ = file->message_type(6);
  static const int TSlgUserGetOtherUserInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserGetOtherUserInfoReq, otheruid_),
  };
  TSlgUserGetOtherUserInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgUserGetOtherUserInfoReq_descriptor_,
      TSlgUserGetOtherUserInfoReq::default_instance_,
      TSlgUserGetOtherUserInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserGetOtherUserInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserGetOtherUserInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgUserGetOtherUserInfoReq));
  TSlgUserGetOtherUserInfoRsp_descriptor_ = file->message_type(7);
  static const int TSlgUserGetOtherUserInfoRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserGetOtherUserInfoRsp, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserGetOtherUserInfoRsp, mastercitylv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserGetOtherUserInfoRsp, masterherotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserGetOtherUserInfoRsp, investigation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserGetOtherUserInfoRsp, userlv_),
  };
  TSlgUserGetOtherUserInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgUserGetOtherUserInfoRsp_descriptor_,
      TSlgUserGetOtherUserInfoRsp::default_instance_,
      TSlgUserGetOtherUserInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserGetOtherUserInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgUserGetOtherUserInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgUserGetOtherUserInfoRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fSlgUser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgUserGetUserDataReq_descriptor_, &TSlgUserGetUserDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgUserBaseData_descriptor_, &TSlgUserBaseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgUserGetUserDataRsp_descriptor_, &TSlgUserGetUserDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserRecoverDataSlg_descriptor_, &TUserRecoverDataSlg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgUserResourceData_descriptor_, &TSlgUserResourceData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgUserDataNotify_descriptor_, &TSlgUserDataNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgUserGetOtherUserInfoReq_descriptor_, &TSlgUserGetOtherUserInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgUserGetOtherUserInfoRsp_descriptor_, &TSlgUserGetOtherUserInfoRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fSlgUser_2eproto() {
  delete TSlgUserGetUserDataReq::default_instance_;
  delete TSlgUserGetUserDataReq_reflection_;
  delete TSlgUserBaseData::default_instance_;
  delete TSlgUserBaseData_reflection_;
  delete TSlgUserGetUserDataRsp::default_instance_;
  delete TSlgUserGetUserDataRsp_reflection_;
  delete TUserRecoverDataSlg::default_instance_;
  delete TUserRecoverDataSlg_reflection_;
  delete TSlgUserResourceData::default_instance_;
  delete TSlgUserResourceData_reflection_;
  delete TSlgUserDataNotify::default_instance_;
  delete TSlgUserDataNotify_reflection_;
  delete TSlgUserGetOtherUserInfoReq::default_instance_;
  delete TSlgUserGetOtherUserInfoReq_reflection_;
  delete TSlgUserGetOtherUserInfoRsp::default_instance_;
  delete TSlgUserGetOtherUserInfoRsp_reflection_;
}

void protobuf_AddDesc_net_2fSlgUser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021net/SlgUser.proto\022\002pb\"\030\n\026TSlgUserGetUs"
    "erDataReq\"\202\001\n\020TSlgUserBaseData\022+\n\nRecove"
    "rArr\030\001 \003(\0132\027.pb.TUserRecoverDataSlg\0223\n\021R"
    "esourceDataArray\030\002 \003(\0132\030.pb.TSlgUserReso"
    "urceData\022\014\n\004Coin\030\003 \001(\r\"T\n\026TSlgUserGetUse"
    "rDataRsp\022&\n\010UserData\030\001 \001(\0132\024.pb.TSlgUser"
    "BaseData\022\022\n\nServerTime\030\002 \001(\003\"F\n\023TUserRec"
    "overDataSlg\022\013\n\003Tid\030\001 \001(\005\022\r\n\005Value\030\002 \001(\005\022"
    "\023\n\013RecoverTime\030\003 \001(\003\"A\n\024TSlgUserResource"
    "Data\022\024\n\014ResourceType\030\001 \001(\r\022\023\n\013ResourceNu"
    "m\030\002 \001(\r\"<\n\022TSlgUserDataNotify\022&\n\010UserDat"
    "a\030\001 \001(\0132\024.pb.TSlgUserBaseData\"/\n\033TSlgUse"
    "rGetOtherUserInfoReq\022\020\n\010OtherUid\030\001 \001(\004\"\200"
    "\001\n\033TSlgUserGetOtherUserInfoRsp\022\r\n\005Uname\030"
    "\001 \001(\t\022\024\n\014MasterCityLv\030\002 \001(\r\022\025\n\rMasterHer"
    "oTid\030\003 \001(\r\022\025\n\rInvestigation\030\004 \001(\r\022\016\n\006Use"
    "rLv\030\005 \001(\r", 649);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/SlgUser.proto", &protobuf_RegisterTypes);
  TSlgUserGetUserDataReq::default_instance_ = new TSlgUserGetUserDataReq();
  TSlgUserBaseData::default_instance_ = new TSlgUserBaseData();
  TSlgUserGetUserDataRsp::default_instance_ = new TSlgUserGetUserDataRsp();
  TUserRecoverDataSlg::default_instance_ = new TUserRecoverDataSlg();
  TSlgUserResourceData::default_instance_ = new TSlgUserResourceData();
  TSlgUserDataNotify::default_instance_ = new TSlgUserDataNotify();
  TSlgUserGetOtherUserInfoReq::default_instance_ = new TSlgUserGetOtherUserInfoReq();
  TSlgUserGetOtherUserInfoRsp::default_instance_ = new TSlgUserGetOtherUserInfoRsp();
  TSlgUserGetUserDataReq::default_instance_->InitAsDefaultInstance();
  TSlgUserBaseData::default_instance_->InitAsDefaultInstance();
  TSlgUserGetUserDataRsp::default_instance_->InitAsDefaultInstance();
  TUserRecoverDataSlg::default_instance_->InitAsDefaultInstance();
  TSlgUserResourceData::default_instance_->InitAsDefaultInstance();
  TSlgUserDataNotify::default_instance_->InitAsDefaultInstance();
  TSlgUserGetOtherUserInfoReq::default_instance_->InitAsDefaultInstance();
  TSlgUserGetOtherUserInfoRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fSlgUser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fSlgUser_2eproto {
  StaticDescriptorInitializer_net_2fSlgUser_2eproto() {
    protobuf_AddDesc_net_2fSlgUser_2eproto();
  }
} static_descriptor_initializer_net_2fSlgUser_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TSlgUserGetUserDataReq::TSlgUserGetUserDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgUserGetUserDataReq)
}

void TSlgUserGetUserDataReq::InitAsDefaultInstance() {
}

TSlgUserGetUserDataReq::TSlgUserGetUserDataReq(const TSlgUserGetUserDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgUserGetUserDataReq)
}

void TSlgUserGetUserDataReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgUserGetUserDataReq::~TSlgUserGetUserDataReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgUserGetUserDataReq)
  SharedDtor();
}

void TSlgUserGetUserDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgUserGetUserDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgUserGetUserDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgUserGetUserDataReq_descriptor_;
}

const TSlgUserGetUserDataReq& TSlgUserGetUserDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgUser_2eproto();
  return *default_instance_;
}

TSlgUserGetUserDataReq* TSlgUserGetUserDataReq::default_instance_ = NULL;

TSlgUserGetUserDataReq* TSlgUserGetUserDataReq::New() const {
  return new TSlgUserGetUserDataReq;
}

void TSlgUserGetUserDataReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgUserGetUserDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgUserGetUserDataReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgUserGetUserDataReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgUserGetUserDataReq)
  return false;
#undef DO_
}

void TSlgUserGetUserDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgUserGetUserDataReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgUserGetUserDataReq)
}

::google::protobuf::uint8* TSlgUserGetUserDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgUserGetUserDataReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgUserGetUserDataReq)
  return target;
}

int TSlgUserGetUserDataReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgUserGetUserDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgUserGetUserDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgUserGetUserDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgUserGetUserDataReq::MergeFrom(const TSlgUserGetUserDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgUserGetUserDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgUserGetUserDataReq::CopyFrom(const TSlgUserGetUserDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgUserGetUserDataReq::IsInitialized() const {

  return true;
}

void TSlgUserGetUserDataReq::Swap(TSlgUserGetUserDataReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgUserGetUserDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgUserGetUserDataReq_descriptor_;
  metadata.reflection = TSlgUserGetUserDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgUserBaseData::kRecoverArrFieldNumber;
const int TSlgUserBaseData::kResourceDataArrayFieldNumber;
const int TSlgUserBaseData::kCoinFieldNumber;
#endif  // !_MSC_VER

TSlgUserBaseData::TSlgUserBaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgUserBaseData)
}

void TSlgUserBaseData::InitAsDefaultInstance() {
}

TSlgUserBaseData::TSlgUserBaseData(const TSlgUserBaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgUserBaseData)
}

void TSlgUserBaseData::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgUserBaseData::~TSlgUserBaseData() {
  // @@protoc_insertion_point(destructor:pb.TSlgUserBaseData)
  SharedDtor();
}

void TSlgUserBaseData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgUserBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgUserBaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgUserBaseData_descriptor_;
}

const TSlgUserBaseData& TSlgUserBaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgUser_2eproto();
  return *default_instance_;
}

TSlgUserBaseData* TSlgUserBaseData::default_instance_ = NULL;

TSlgUserBaseData* TSlgUserBaseData::New() const {
  return new TSlgUserBaseData;
}

void TSlgUserBaseData::Clear() {
  coin_ = 0u;
  recoverarr_.Clear();
  resourcedataarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgUserBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgUserBaseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUserRecoverDataSlg RecoverArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RecoverArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recoverarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RecoverArr;
        if (input->ExpectTag(18)) goto parse_ResourceDataArray;
        break;
      }

      // repeated .pb.TSlgUserResourceData ResourceDataArray = 2;
      case 2: {
        if (tag == 18) {
         parse_ResourceDataArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resourcedataarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ResourceDataArray;
        if (input->ExpectTag(24)) goto parse_Coin;
        break;
      }

      // optional uint32 Coin = 3;
      case 3: {
        if (tag == 24) {
         parse_Coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgUserBaseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgUserBaseData)
  return false;
#undef DO_
}

void TSlgUserBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgUserBaseData)
  // repeated .pb.TUserRecoverDataSlg RecoverArr = 1;
  for (int i = 0; i < this->recoverarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recoverarr(i), output);
  }

  // repeated .pb.TSlgUserResourceData ResourceDataArray = 2;
  for (int i = 0; i < this->resourcedataarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resourcedataarray(i), output);
  }

  // optional uint32 Coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgUserBaseData)
}

::google::protobuf::uint8* TSlgUserBaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgUserBaseData)
  // repeated .pb.TUserRecoverDataSlg RecoverArr = 1;
  for (int i = 0; i < this->recoverarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recoverarr(i), target);
  }

  // repeated .pb.TSlgUserResourceData ResourceDataArray = 2;
  for (int i = 0; i < this->resourcedataarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resourcedataarray(i), target);
  }

  // optional uint32 Coin = 3;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgUserBaseData)
  return target;
}

int TSlgUserBaseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 Coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

  }
  // repeated .pb.TUserRecoverDataSlg RecoverArr = 1;
  total_size += 1 * this->recoverarr_size();
  for (int i = 0; i < this->recoverarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recoverarr(i));
  }

  // repeated .pb.TSlgUserResourceData ResourceDataArray = 2;
  total_size += 1 * this->resourcedataarray_size();
  for (int i = 0; i < this->resourcedataarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resourcedataarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgUserBaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgUserBaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgUserBaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgUserBaseData::MergeFrom(const TSlgUserBaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  recoverarr_.MergeFrom(from.recoverarr_);
  resourcedataarray_.MergeFrom(from.resourcedataarray_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgUserBaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgUserBaseData::CopyFrom(const TSlgUserBaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgUserBaseData::IsInitialized() const {

  return true;
}

void TSlgUserBaseData::Swap(TSlgUserBaseData* other) {
  if (other != this) {
    recoverarr_.Swap(&other->recoverarr_);
    resourcedataarray_.Swap(&other->resourcedataarray_);
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgUserBaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgUserBaseData_descriptor_;
  metadata.reflection = TSlgUserBaseData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgUserGetUserDataRsp::kUserDataFieldNumber;
const int TSlgUserGetUserDataRsp::kServerTimeFieldNumber;
#endif  // !_MSC_VER

TSlgUserGetUserDataRsp::TSlgUserGetUserDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgUserGetUserDataRsp)
}

void TSlgUserGetUserDataRsp::InitAsDefaultInstance() {
  userdata_ = const_cast< ::pb::TSlgUserBaseData*>(&::pb::TSlgUserBaseData::default_instance());
}

TSlgUserGetUserDataRsp::TSlgUserGetUserDataRsp(const TSlgUserGetUserDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgUserGetUserDataRsp)
}

void TSlgUserGetUserDataRsp::SharedCtor() {
  _cached_size_ = 0;
  userdata_ = NULL;
  servertime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgUserGetUserDataRsp::~TSlgUserGetUserDataRsp() {
  // @@protoc_insertion_point(destructor:pb.TSlgUserGetUserDataRsp)
  SharedDtor();
}

void TSlgUserGetUserDataRsp::SharedDtor() {
  if (this != default_instance_) {
    delete userdata_;
  }
}

void TSlgUserGetUserDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgUserGetUserDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgUserGetUserDataRsp_descriptor_;
}

const TSlgUserGetUserDataRsp& TSlgUserGetUserDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgUser_2eproto();
  return *default_instance_;
}

TSlgUserGetUserDataRsp* TSlgUserGetUserDataRsp::default_instance_ = NULL;

TSlgUserGetUserDataRsp* TSlgUserGetUserDataRsp::New() const {
  return new TSlgUserGetUserDataRsp;
}

void TSlgUserGetUserDataRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_userdata()) {
      if (userdata_ != NULL) userdata_->::pb::TSlgUserBaseData::Clear();
    }
    servertime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgUserGetUserDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgUserGetUserDataRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TSlgUserBaseData UserData = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ServerTime;
        break;
      }

      // optional int64 ServerTime = 2;
      case 2: {
        if (tag == 16) {
         parse_ServerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgUserGetUserDataRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgUserGetUserDataRsp)
  return false;
#undef DO_
}

void TSlgUserGetUserDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgUserGetUserDataRsp)
  // optional .pb.TSlgUserBaseData UserData = 1;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userdata(), output);
  }

  // optional int64 ServerTime = 2;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->servertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgUserGetUserDataRsp)
}

::google::protobuf::uint8* TSlgUserGetUserDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgUserGetUserDataRsp)
  // optional .pb.TSlgUserBaseData UserData = 1;
  if (has_userdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userdata(), target);
  }

  // optional int64 ServerTime = 2;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->servertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgUserGetUserDataRsp)
  return target;
}

int TSlgUserGetUserDataRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TSlgUserBaseData UserData = 1;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdata());
    }

    // optional int64 ServerTime = 2;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgUserGetUserDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgUserGetUserDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgUserGetUserDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgUserGetUserDataRsp::MergeFrom(const TSlgUserGetUserDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userdata()) {
      mutable_userdata()->::pb::TSlgUserBaseData::MergeFrom(from.userdata());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgUserGetUserDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgUserGetUserDataRsp::CopyFrom(const TSlgUserGetUserDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgUserGetUserDataRsp::IsInitialized() const {

  return true;
}

void TSlgUserGetUserDataRsp::Swap(TSlgUserGetUserDataRsp* other) {
  if (other != this) {
    std::swap(userdata_, other->userdata_);
    std::swap(servertime_, other->servertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgUserGetUserDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgUserGetUserDataRsp_descriptor_;
  metadata.reflection = TSlgUserGetUserDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserRecoverDataSlg::kTidFieldNumber;
const int TUserRecoverDataSlg::kValueFieldNumber;
const int TUserRecoverDataSlg::kRecoverTimeFieldNumber;
#endif  // !_MSC_VER

TUserRecoverDataSlg::TUserRecoverDataSlg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserRecoverDataSlg)
}

void TUserRecoverDataSlg::InitAsDefaultInstance() {
}

TUserRecoverDataSlg::TUserRecoverDataSlg(const TUserRecoverDataSlg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserRecoverDataSlg)
}

void TUserRecoverDataSlg::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0;
  value_ = 0;
  recovertime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserRecoverDataSlg::~TUserRecoverDataSlg() {
  // @@protoc_insertion_point(destructor:pb.TUserRecoverDataSlg)
  SharedDtor();
}

void TUserRecoverDataSlg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserRecoverDataSlg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserRecoverDataSlg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserRecoverDataSlg_descriptor_;
}

const TUserRecoverDataSlg& TUserRecoverDataSlg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgUser_2eproto();
  return *default_instance_;
}

TUserRecoverDataSlg* TUserRecoverDataSlg::default_instance_ = NULL;

TUserRecoverDataSlg* TUserRecoverDataSlg::New() const {
  return new TUserRecoverDataSlg;
}

void TUserRecoverDataSlg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUserRecoverDataSlg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tid_, recovertime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserRecoverDataSlg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserRecoverDataSlg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int32 Value = 2;
      case 2: {
        if (tag == 16) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RecoverTime;
        break;
      }

      // optional int64 RecoverTime = 3;
      case 3: {
        if (tag == 24) {
         parse_RecoverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recovertime_)));
          set_has_recovertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserRecoverDataSlg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserRecoverDataSlg)
  return false;
#undef DO_
}

void TUserRecoverDataSlg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserRecoverDataSlg)
  // optional int32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // optional int64 RecoverTime = 3;
  if (has_recovertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->recovertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserRecoverDataSlg)
}

::google::protobuf::uint8* TUserRecoverDataSlg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserRecoverDataSlg)
  // optional int32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // optional int64 RecoverTime = 3;
  if (has_recovertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->recovertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserRecoverDataSlg)
  return target;
}

int TUserRecoverDataSlg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional int64 RecoverTime = 3;
    if (has_recovertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recovertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserRecoverDataSlg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserRecoverDataSlg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserRecoverDataSlg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserRecoverDataSlg::MergeFrom(const TUserRecoverDataSlg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_recovertime()) {
      set_recovertime(from.recovertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserRecoverDataSlg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserRecoverDataSlg::CopyFrom(const TUserRecoverDataSlg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserRecoverDataSlg::IsInitialized() const {

  return true;
}

void TUserRecoverDataSlg::Swap(TUserRecoverDataSlg* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(value_, other->value_);
    std::swap(recovertime_, other->recovertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserRecoverDataSlg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserRecoverDataSlg_descriptor_;
  metadata.reflection = TUserRecoverDataSlg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgUserResourceData::kResourceTypeFieldNumber;
const int TSlgUserResourceData::kResourceNumFieldNumber;
#endif  // !_MSC_VER

TSlgUserResourceData::TSlgUserResourceData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgUserResourceData)
}

void TSlgUserResourceData::InitAsDefaultInstance() {
}

TSlgUserResourceData::TSlgUserResourceData(const TSlgUserResourceData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgUserResourceData)
}

void TSlgUserResourceData::SharedCtor() {
  _cached_size_ = 0;
  resourcetype_ = 0u;
  resourcenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgUserResourceData::~TSlgUserResourceData() {
  // @@protoc_insertion_point(destructor:pb.TSlgUserResourceData)
  SharedDtor();
}

void TSlgUserResourceData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgUserResourceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgUserResourceData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgUserResourceData_descriptor_;
}

const TSlgUserResourceData& TSlgUserResourceData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgUser_2eproto();
  return *default_instance_;
}

TSlgUserResourceData* TSlgUserResourceData::default_instance_ = NULL;

TSlgUserResourceData* TSlgUserResourceData::New() const {
  return new TSlgUserResourceData;
}

void TSlgUserResourceData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSlgUserResourceData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(resourcetype_, resourcenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgUserResourceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgUserResourceData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ResourceType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resourcetype_)));
          set_has_resourcetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ResourceNum;
        break;
      }

      // optional uint32 ResourceNum = 2;
      case 2: {
        if (tag == 16) {
         parse_ResourceNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resourcenum_)));
          set_has_resourcenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgUserResourceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgUserResourceData)
  return false;
#undef DO_
}

void TSlgUserResourceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgUserResourceData)
  // optional uint32 ResourceType = 1;
  if (has_resourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resourcetype(), output);
  }

  // optional uint32 ResourceNum = 2;
  if (has_resourcenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resourcenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgUserResourceData)
}

::google::protobuf::uint8* TSlgUserResourceData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgUserResourceData)
  // optional uint32 ResourceType = 1;
  if (has_resourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resourcetype(), target);
  }

  // optional uint32 ResourceNum = 2;
  if (has_resourcenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resourcenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgUserResourceData)
  return target;
}

int TSlgUserResourceData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ResourceType = 1;
    if (has_resourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resourcetype());
    }

    // optional uint32 ResourceNum = 2;
    if (has_resourcenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resourcenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgUserResourceData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgUserResourceData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgUserResourceData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgUserResourceData::MergeFrom(const TSlgUserResourceData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resourcetype()) {
      set_resourcetype(from.resourcetype());
    }
    if (from.has_resourcenum()) {
      set_resourcenum(from.resourcenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgUserResourceData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgUserResourceData::CopyFrom(const TSlgUserResourceData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgUserResourceData::IsInitialized() const {

  return true;
}

void TSlgUserResourceData::Swap(TSlgUserResourceData* other) {
  if (other != this) {
    std::swap(resourcetype_, other->resourcetype_);
    std::swap(resourcenum_, other->resourcenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgUserResourceData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgUserResourceData_descriptor_;
  metadata.reflection = TSlgUserResourceData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgUserDataNotify::kUserDataFieldNumber;
#endif  // !_MSC_VER

TSlgUserDataNotify::TSlgUserDataNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgUserDataNotify)
}

void TSlgUserDataNotify::InitAsDefaultInstance() {
  userdata_ = const_cast< ::pb::TSlgUserBaseData*>(&::pb::TSlgUserBaseData::default_instance());
}

TSlgUserDataNotify::TSlgUserDataNotify(const TSlgUserDataNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgUserDataNotify)
}

void TSlgUserDataNotify::SharedCtor() {
  _cached_size_ = 0;
  userdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgUserDataNotify::~TSlgUserDataNotify() {
  // @@protoc_insertion_point(destructor:pb.TSlgUserDataNotify)
  SharedDtor();
}

void TSlgUserDataNotify::SharedDtor() {
  if (this != default_instance_) {
    delete userdata_;
  }
}

void TSlgUserDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgUserDataNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgUserDataNotify_descriptor_;
}

const TSlgUserDataNotify& TSlgUserDataNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgUser_2eproto();
  return *default_instance_;
}

TSlgUserDataNotify* TSlgUserDataNotify::default_instance_ = NULL;

TSlgUserDataNotify* TSlgUserDataNotify::New() const {
  return new TSlgUserDataNotify;
}

void TSlgUserDataNotify::Clear() {
  if (has_userdata()) {
    if (userdata_ != NULL) userdata_->::pb::TSlgUserBaseData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgUserDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgUserDataNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TSlgUserBaseData UserData = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgUserDataNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgUserDataNotify)
  return false;
#undef DO_
}

void TSlgUserDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgUserDataNotify)
  // optional .pb.TSlgUserBaseData UserData = 1;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgUserDataNotify)
}

::google::protobuf::uint8* TSlgUserDataNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgUserDataNotify)
  // optional .pb.TSlgUserBaseData UserData = 1;
  if (has_userdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgUserDataNotify)
  return target;
}

int TSlgUserDataNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TSlgUserBaseData UserData = 1;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgUserDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgUserDataNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgUserDataNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgUserDataNotify::MergeFrom(const TSlgUserDataNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userdata()) {
      mutable_userdata()->::pb::TSlgUserBaseData::MergeFrom(from.userdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgUserDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgUserDataNotify::CopyFrom(const TSlgUserDataNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgUserDataNotify::IsInitialized() const {

  return true;
}

void TSlgUserDataNotify::Swap(TSlgUserDataNotify* other) {
  if (other != this) {
    std::swap(userdata_, other->userdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgUserDataNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgUserDataNotify_descriptor_;
  metadata.reflection = TSlgUserDataNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgUserGetOtherUserInfoReq::kOtherUidFieldNumber;
#endif  // !_MSC_VER

TSlgUserGetOtherUserInfoReq::TSlgUserGetOtherUserInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgUserGetOtherUserInfoReq)
}

void TSlgUserGetOtherUserInfoReq::InitAsDefaultInstance() {
}

TSlgUserGetOtherUserInfoReq::TSlgUserGetOtherUserInfoReq(const TSlgUserGetOtherUserInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgUserGetOtherUserInfoReq)
}

void TSlgUserGetOtherUserInfoReq::SharedCtor() {
  _cached_size_ = 0;
  otheruid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgUserGetOtherUserInfoReq::~TSlgUserGetOtherUserInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgUserGetOtherUserInfoReq)
  SharedDtor();
}

void TSlgUserGetOtherUserInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgUserGetOtherUserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgUserGetOtherUserInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgUserGetOtherUserInfoReq_descriptor_;
}

const TSlgUserGetOtherUserInfoReq& TSlgUserGetOtherUserInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgUser_2eproto();
  return *default_instance_;
}

TSlgUserGetOtherUserInfoReq* TSlgUserGetOtherUserInfoReq::default_instance_ = NULL;

TSlgUserGetOtherUserInfoReq* TSlgUserGetOtherUserInfoReq::New() const {
  return new TSlgUserGetOtherUserInfoReq;
}

void TSlgUserGetOtherUserInfoReq::Clear() {
  otheruid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgUserGetOtherUserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgUserGetOtherUserInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 OtherUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &otheruid_)));
          set_has_otheruid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgUserGetOtherUserInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgUserGetOtherUserInfoReq)
  return false;
#undef DO_
}

void TSlgUserGetOtherUserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgUserGetOtherUserInfoReq)
  // optional uint64 OtherUid = 1;
  if (has_otheruid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->otheruid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgUserGetOtherUserInfoReq)
}

::google::protobuf::uint8* TSlgUserGetOtherUserInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgUserGetOtherUserInfoReq)
  // optional uint64 OtherUid = 1;
  if (has_otheruid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->otheruid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgUserGetOtherUserInfoReq)
  return target;
}

int TSlgUserGetOtherUserInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 OtherUid = 1;
    if (has_otheruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->otheruid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgUserGetOtherUserInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgUserGetOtherUserInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgUserGetOtherUserInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgUserGetOtherUserInfoReq::MergeFrom(const TSlgUserGetOtherUserInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_otheruid()) {
      set_otheruid(from.otheruid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgUserGetOtherUserInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgUserGetOtherUserInfoReq::CopyFrom(const TSlgUserGetOtherUserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgUserGetOtherUserInfoReq::IsInitialized() const {

  return true;
}

void TSlgUserGetOtherUserInfoReq::Swap(TSlgUserGetOtherUserInfoReq* other) {
  if (other != this) {
    std::swap(otheruid_, other->otheruid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgUserGetOtherUserInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgUserGetOtherUserInfoReq_descriptor_;
  metadata.reflection = TSlgUserGetOtherUserInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgUserGetOtherUserInfoRsp::kUnameFieldNumber;
const int TSlgUserGetOtherUserInfoRsp::kMasterCityLvFieldNumber;
const int TSlgUserGetOtherUserInfoRsp::kMasterHeroTidFieldNumber;
const int TSlgUserGetOtherUserInfoRsp::kInvestigationFieldNumber;
const int TSlgUserGetOtherUserInfoRsp::kUserLvFieldNumber;
#endif  // !_MSC_VER

TSlgUserGetOtherUserInfoRsp::TSlgUserGetOtherUserInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgUserGetOtherUserInfoRsp)
}

void TSlgUserGetOtherUserInfoRsp::InitAsDefaultInstance() {
}

TSlgUserGetOtherUserInfoRsp::TSlgUserGetOtherUserInfoRsp(const TSlgUserGetOtherUserInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgUserGetOtherUserInfoRsp)
}

void TSlgUserGetOtherUserInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mastercitylv_ = 0u;
  masterherotid_ = 0u;
  investigation_ = 0u;
  userlv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgUserGetOtherUserInfoRsp::~TSlgUserGetOtherUserInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TSlgUserGetOtherUserInfoRsp)
  SharedDtor();
}

void TSlgUserGetOtherUserInfoRsp::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (this != default_instance_) {
  }
}

void TSlgUserGetOtherUserInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgUserGetOtherUserInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgUserGetOtherUserInfoRsp_descriptor_;
}

const TSlgUserGetOtherUserInfoRsp& TSlgUserGetOtherUserInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgUser_2eproto();
  return *default_instance_;
}

TSlgUserGetOtherUserInfoRsp* TSlgUserGetOtherUserInfoRsp::default_instance_ = NULL;

TSlgUserGetOtherUserInfoRsp* TSlgUserGetOtherUserInfoRsp::New() const {
  return new TSlgUserGetOtherUserInfoRsp;
}

void TSlgUserGetOtherUserInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSlgUserGetOtherUserInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(mastercitylv_, userlv_);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgUserGetOtherUserInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgUserGetOtherUserInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Uname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MasterCityLv;
        break;
      }

      // optional uint32 MasterCityLv = 2;
      case 2: {
        if (tag == 16) {
         parse_MasterCityLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mastercitylv_)));
          set_has_mastercitylv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MasterHeroTid;
        break;
      }

      // optional uint32 MasterHeroTid = 3;
      case 3: {
        if (tag == 24) {
         parse_MasterHeroTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &masterherotid_)));
          set_has_masterherotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Investigation;
        break;
      }

      // optional uint32 Investigation = 4;
      case 4: {
        if (tag == 32) {
         parse_Investigation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &investigation_)));
          set_has_investigation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_UserLv;
        break;
      }

      // optional uint32 UserLv = 5;
      case 5: {
        if (tag == 40) {
         parse_UserLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userlv_)));
          set_has_userlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgUserGetOtherUserInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgUserGetOtherUserInfoRsp)
  return false;
#undef DO_
}

void TSlgUserGetOtherUserInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgUserGetOtherUserInfoRsp)
  // optional string Uname = 1;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uname(), output);
  }

  // optional uint32 MasterCityLv = 2;
  if (has_mastercitylv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mastercitylv(), output);
  }

  // optional uint32 MasterHeroTid = 3;
  if (has_masterherotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->masterherotid(), output);
  }

  // optional uint32 Investigation = 4;
  if (has_investigation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->investigation(), output);
  }

  // optional uint32 UserLv = 5;
  if (has_userlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->userlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgUserGetOtherUserInfoRsp)
}

::google::protobuf::uint8* TSlgUserGetOtherUserInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgUserGetOtherUserInfoRsp)
  // optional string Uname = 1;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uname(), target);
  }

  // optional uint32 MasterCityLv = 2;
  if (has_mastercitylv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mastercitylv(), target);
  }

  // optional uint32 MasterHeroTid = 3;
  if (has_masterherotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->masterherotid(), target);
  }

  // optional uint32 Investigation = 4;
  if (has_investigation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->investigation(), target);
  }

  // optional uint32 UserLv = 5;
  if (has_userlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->userlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgUserGetOtherUserInfoRsp)
  return target;
}

int TSlgUserGetOtherUserInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Uname = 1;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint32 MasterCityLv = 2;
    if (has_mastercitylv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mastercitylv());
    }

    // optional uint32 MasterHeroTid = 3;
    if (has_masterherotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->masterherotid());
    }

    // optional uint32 Investigation = 4;
    if (has_investigation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->investigation());
    }

    // optional uint32 UserLv = 5;
    if (has_userlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userlv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgUserGetOtherUserInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgUserGetOtherUserInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgUserGetOtherUserInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgUserGetOtherUserInfoRsp::MergeFrom(const TSlgUserGetOtherUserInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_mastercitylv()) {
      set_mastercitylv(from.mastercitylv());
    }
    if (from.has_masterherotid()) {
      set_masterherotid(from.masterherotid());
    }
    if (from.has_investigation()) {
      set_investigation(from.investigation());
    }
    if (from.has_userlv()) {
      set_userlv(from.userlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgUserGetOtherUserInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgUserGetOtherUserInfoRsp::CopyFrom(const TSlgUserGetOtherUserInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgUserGetOtherUserInfoRsp::IsInitialized() const {

  return true;
}

void TSlgUserGetOtherUserInfoRsp::Swap(TSlgUserGetOtherUserInfoRsp* other) {
  if (other != this) {
    std::swap(uname_, other->uname_);
    std::swap(mastercitylv_, other->mastercitylv_);
    std::swap(masterherotid_, other->masterherotid_);
    std::swap(investigation_, other->investigation_);
    std::swap(userlv_, other->userlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgUserGetOtherUserInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgUserGetOtherUserInfoRsp_descriptor_;
  metadata.reflection = TSlgUserGetOtherUserInfoRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
