// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossPlatformSiegeFlag.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/CrossPlatformSiegeFlag.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TPlatformSiegeFlagAllyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagAllyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformSiegeFlagUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformSiegeFlagStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformSiegeFlagGetBaseInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagGetBaseInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformSiegeFlagSignRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagSignRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformSiegeFlagMoveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagMoveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformSiegeFlagAttackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagAttackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformSiegeFlagTouchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagTouchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformSiegeFlagSetUserOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagSetUserOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformSiegeFlagSetArmyOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagSetArmyOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformSiegeFlagAllyRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagAllyRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformSiegeFlagGetAllyRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagGetAllyRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformSiegeFlagGetAllyRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagGetAllyRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformSiegeFlagUserRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagUserRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformSiegeFlagGetRankListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagGetRankListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformSiegeFlagGetRankListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagGetRankListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformSiegeFlagBuyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagBuyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformSiegeFlagServerGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagServerGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformSiegeFlagServerBuyGoodsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagServerBuyGoodsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformSiegeFlagServerNodify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformSiegeFlagServerNodify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSiegeFlagAllyBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSiegeFlagAllyBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSiegeFlagUserBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSiegeFlagUserBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSiegeFlagGuildContriInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSiegeFlagGuildContriInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSiegeFlagAllianceSimpleInfoWithUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSiegeFlagAllianceSimpleInfoWithUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSiegeFlagBattleEndNodify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSiegeFlagBattleEndNodify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EPlatformSiegeFlagStage_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto() {
  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/CrossPlatformSiegeFlag.proto");
  GOOGLE_CHECK(file != NULL);
  TPlatformSiegeFlagAllyInfo_descriptor_ = file->message_type(0);
  static const int TPlatformSiegeFlagAllyInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagAllyInfo, allyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagAllyInfo, currentfieldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagAllyInfo, fieldallyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagAllyInfo, teamscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagAllyInfo, fielddonetime_),
  };
  TPlatformSiegeFlagAllyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagAllyInfo_descriptor_,
      TPlatformSiegeFlagAllyInfo::default_instance_,
      TPlatformSiegeFlagAllyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagAllyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagAllyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagAllyInfo));
  TPlatformSiegeFlagUserInfo_descriptor_ = file->message_type(1);
  static const int TPlatformSiegeFlagUserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagUserInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagUserInfo, isjoin_),
  };
  TPlatformSiegeFlagUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagUserInfo_descriptor_,
      TPlatformSiegeFlagUserInfo::default_instance_,
      TPlatformSiegeFlagUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagUserInfo));
  TPlatformSiegeFlagStage_descriptor_ = file->message_type(2);
  static const int TPlatformSiegeFlagStage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagStage, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagStage, matchtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagStage, matchshowtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagStage, atkbegintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagStage, showtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagStage, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagStage, stage_),
  };
  TPlatformSiegeFlagStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagStage_descriptor_,
      TPlatformSiegeFlagStage::default_instance_,
      TPlatformSiegeFlagStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagStage));
  TPlatformSiegeFlagGetBaseInfoRsp_descriptor_ = file->message_type(3);
  static const int TPlatformSiegeFlagGetBaseInfoRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetBaseInfoRsp, funcopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetBaseInfoRsp, allyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetBaseInfoRsp, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetBaseInfoRsp, realprogress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetBaseInfoRsp, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetBaseInfoRsp, seasonbegintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetBaseInfoRsp, seasonendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetBaseInfoRsp, signtime_),
  };
  TPlatformSiegeFlagGetBaseInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagGetBaseInfoRsp_descriptor_,
      TPlatformSiegeFlagGetBaseInfoRsp::default_instance_,
      TPlatformSiegeFlagGetBaseInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetBaseInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetBaseInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagGetBaseInfoRsp));
  TPlatformSiegeFlagSignRsp_descriptor_ = file->message_type(4);
  static const int TPlatformSiegeFlagSignRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagSignRsp, signtime_),
  };
  TPlatformSiegeFlagSignRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagSignRsp_descriptor_,
      TPlatformSiegeFlagSignRsp::default_instance_,
      TPlatformSiegeFlagSignRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagSignRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagSignRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagSignRsp));
  TPlatformSiegeFlagMoveReq_descriptor_ = file->message_type(5);
  static const int TPlatformSiegeFlagMoveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagMoveReq, targetpos_),
  };
  TPlatformSiegeFlagMoveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagMoveReq_descriptor_,
      TPlatformSiegeFlagMoveReq::default_instance_,
      TPlatformSiegeFlagMoveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagMoveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagMoveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagMoveReq));
  TPlatformSiegeFlagAttackReq_descriptor_ = file->message_type(6);
  static const int TPlatformSiegeFlagAttackReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagAttackReq, targetid_),
  };
  TPlatformSiegeFlagAttackReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagAttackReq_descriptor_,
      TPlatformSiegeFlagAttackReq::default_instance_,
      TPlatformSiegeFlagAttackReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagAttackReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagAttackReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagAttackReq));
  TPlatformSiegeFlagTouchReq_descriptor_ = file->message_type(7);
  static const int TPlatformSiegeFlagTouchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagTouchReq, targetbid_),
  };
  TPlatformSiegeFlagTouchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagTouchReq_descriptor_,
      TPlatformSiegeFlagTouchReq::default_instance_,
      TPlatformSiegeFlagTouchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagTouchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagTouchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagTouchReq));
  TPlatformSiegeFlagSetUserOptReq_descriptor_ = file->message_type(8);
  static const int TPlatformSiegeFlagSetUserOptReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagSetUserOptReq, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagSetUserOptReq, autoattack_),
  };
  TPlatformSiegeFlagSetUserOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagSetUserOptReq_descriptor_,
      TPlatformSiegeFlagSetUserOptReq::default_instance_,
      TPlatformSiegeFlagSetUserOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagSetUserOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagSetUserOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagSetUserOptReq));
  TPlatformSiegeFlagSetArmyOptReq_descriptor_ = file->message_type(9);
  static const int TPlatformSiegeFlagSetArmyOptReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagSetArmyOptReq, goalid_),
  };
  TPlatformSiegeFlagSetArmyOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagSetArmyOptReq_descriptor_,
      TPlatformSiegeFlagSetArmyOptReq::default_instance_,
      TPlatformSiegeFlagSetArmyOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagSetArmyOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagSetArmyOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagSetArmyOptReq));
  TPlatformSiegeFlagAllyRankInfo_descriptor_ = file->message_type(10);
  static const int TPlatformSiegeFlagAllyRankInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagAllyRankInfo, allyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagAllyRankInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagAllyRankInfo, rank_),
  };
  TPlatformSiegeFlagAllyRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagAllyRankInfo_descriptor_,
      TPlatformSiegeFlagAllyRankInfo::default_instance_,
      TPlatformSiegeFlagAllyRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagAllyRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagAllyRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagAllyRankInfo));
  TPlatformSiegeFlagGetAllyRankReq_descriptor_ = file->message_type(11);
  static const int TPlatformSiegeFlagGetAllyRankReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetAllyRankReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetAllyRankReq, limit_),
  };
  TPlatformSiegeFlagGetAllyRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagGetAllyRankReq_descriptor_,
      TPlatformSiegeFlagGetAllyRankReq::default_instance_,
      TPlatformSiegeFlagGetAllyRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetAllyRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetAllyRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagGetAllyRankReq));
  TPlatformSiegeFlagGetAllyRankRsp_descriptor_ = file->message_type(12);
  static const int TPlatformSiegeFlagGetAllyRankRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetAllyRankRsp, rankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetAllyRankRsp, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetAllyRankRsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetAllyRankRsp, leaderuid_),
  };
  TPlatformSiegeFlagGetAllyRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagGetAllyRankRsp_descriptor_,
      TPlatformSiegeFlagGetAllyRankRsp::default_instance_,
      TPlatformSiegeFlagGetAllyRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetAllyRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetAllyRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagGetAllyRankRsp));
  TPlatformSiegeFlagUserRankInfo_descriptor_ = file->message_type(13);
  static const int TPlatformSiegeFlagUserRankInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagUserRankInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagUserRankInfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagUserRankInfo, imagehtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagUserRankInfo, imageframetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagUserRankInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagUserRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagUserRankInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagUserRankInfo, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagUserRankInfo, devote_),
  };
  TPlatformSiegeFlagUserRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagUserRankInfo_descriptor_,
      TPlatformSiegeFlagUserRankInfo::default_instance_,
      TPlatformSiegeFlagUserRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagUserRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagUserRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagUserRankInfo));
  TPlatformSiegeFlagGetRankListReq_descriptor_ = file->message_type(14);
  static const int TPlatformSiegeFlagGetRankListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetRankListReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetRankListReq, limit_),
  };
  TPlatformSiegeFlagGetRankListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagGetRankListReq_descriptor_,
      TPlatformSiegeFlagGetRankListReq::default_instance_,
      TPlatformSiegeFlagGetRankListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetRankListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetRankListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagGetRankListReq));
  TPlatformSiegeFlagGetRankListRsp_descriptor_ = file->message_type(15);
  static const int TPlatformSiegeFlagGetRankListRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetRankListRsp, rankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetRankListRsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetRankListRsp, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetRankListRsp, killcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetRankListRsp, devote_),
  };
  TPlatformSiegeFlagGetRankListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagGetRankListRsp_descriptor_,
      TPlatformSiegeFlagGetRankListRsp::default_instance_,
      TPlatformSiegeFlagGetRankListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetRankListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagGetRankListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagGetRankListRsp));
  TPlatformSiegeFlagBuyInfo_descriptor_ = file->message_type(16);
  static const int TPlatformSiegeFlagBuyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagBuyInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagBuyInfo, buynum_),
  };
  TPlatformSiegeFlagBuyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagBuyInfo_descriptor_,
      TPlatformSiegeFlagBuyInfo::default_instance_,
      TPlatformSiegeFlagBuyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagBuyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagBuyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagBuyInfo));
  TPlatformSiegeFlagServerGetInfoRsp_descriptor_ = file->message_type(17);
  static const int TPlatformSiegeFlagServerGetInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagServerGetInfoRsp, canenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagServerGetInfoRsp, arrinfo_),
  };
  TPlatformSiegeFlagServerGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagServerGetInfoRsp_descriptor_,
      TPlatformSiegeFlagServerGetInfoRsp::default_instance_,
      TPlatformSiegeFlagServerGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagServerGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagServerGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagServerGetInfoRsp));
  TPlatformSiegeFlagServerBuyGoodsReq_descriptor_ = file->message_type(18);
  static const int TPlatformSiegeFlagServerBuyGoodsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagServerBuyGoodsReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagServerBuyGoodsReq, num_),
  };
  TPlatformSiegeFlagServerBuyGoodsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagServerBuyGoodsReq_descriptor_,
      TPlatformSiegeFlagServerBuyGoodsReq::default_instance_,
      TPlatformSiegeFlagServerBuyGoodsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagServerBuyGoodsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagServerBuyGoodsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagServerBuyGoodsReq));
  TPlatformSiegeFlagServerNodify_descriptor_ = file->message_type(19);
  static const int TPlatformSiegeFlagServerNodify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagServerNodify, arrinfo_),
  };
  TPlatformSiegeFlagServerNodify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformSiegeFlagServerNodify_descriptor_,
      TPlatformSiegeFlagServerNodify::default_instance_,
      TPlatformSiegeFlagServerNodify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagServerNodify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformSiegeFlagServerNodify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformSiegeFlagServerNodify));
  TSiegeFlagAllyBaseInfo_descriptor_ = file->message_type(20);
  static const int TSiegeFlagAllyBaseInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagAllyBaseInfo, allyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagAllyBaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagAllyBaseInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagAllyBaseInfo, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagAllyBaseInfo, bannerbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagAllyBaseInfo, bannername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagAllyBaseInfo, bannerfigure_),
  };
  TSiegeFlagAllyBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSiegeFlagAllyBaseInfo_descriptor_,
      TSiegeFlagAllyBaseInfo::default_instance_,
      TSiegeFlagAllyBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagAllyBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagAllyBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSiegeFlagAllyBaseInfo));
  TSiegeFlagUserBaseInfo_descriptor_ = file->message_type(21);
  static const int TSiegeFlagUserBaseInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagUserBaseInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagUserBaseInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagUserBaseInfo, post_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagUserBaseInfo, userinfo_),
  };
  TSiegeFlagUserBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSiegeFlagUserBaseInfo_descriptor_,
      TSiegeFlagUserBaseInfo::default_instance_,
      TSiegeFlagUserBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagUserBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagUserBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSiegeFlagUserBaseInfo));
  TSiegeFlagGuildContriInfo_descriptor_ = file->message_type(22);
  static const int TSiegeFlagGuildContriInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagGuildContriInfo, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagGuildContriInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagGuildContriInfo, contrinum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagGuildContriInfo, guildinfo_),
  };
  TSiegeFlagGuildContriInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSiegeFlagGuildContriInfo_descriptor_,
      TSiegeFlagGuildContriInfo::default_instance_,
      TSiegeFlagGuildContriInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagGuildContriInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagGuildContriInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSiegeFlagGuildContriInfo));
  TSiegeFlagAllianceSimpleInfoWithUser_descriptor_ = file->message_type(23);
  static const int TSiegeFlagAllianceSimpleInfoWithUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagAllianceSimpleInfoWithUser, alliancesimpleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagAllianceSimpleInfoWithUser, arruserbaseinfo_),
  };
  TSiegeFlagAllianceSimpleInfoWithUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSiegeFlagAllianceSimpleInfoWithUser_descriptor_,
      TSiegeFlagAllianceSimpleInfoWithUser::default_instance_,
      TSiegeFlagAllianceSimpleInfoWithUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagAllianceSimpleInfoWithUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagAllianceSimpleInfoWithUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSiegeFlagAllianceSimpleInfoWithUser));
  TSiegeFlagBattleEndNodify_descriptor_ = file->message_type(24);
  static const int TSiegeFlagBattleEndNodify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagBattleEndNodify, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagBattleEndNodify, teamscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagBattleEndNodify, fielddonetime_),
  };
  TSiegeFlagBattleEndNodify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSiegeFlagBattleEndNodify_descriptor_,
      TSiegeFlagBattleEndNodify::default_instance_,
      TSiegeFlagBattleEndNodify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagBattleEndNodify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSiegeFlagBattleEndNodify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSiegeFlagBattleEndNodify));
  EPlatformSiegeFlagStage_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagAllyInfo_descriptor_, &TPlatformSiegeFlagAllyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagUserInfo_descriptor_, &TPlatformSiegeFlagUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagStage_descriptor_, &TPlatformSiegeFlagStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagGetBaseInfoRsp_descriptor_, &TPlatformSiegeFlagGetBaseInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagSignRsp_descriptor_, &TPlatformSiegeFlagSignRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagMoveReq_descriptor_, &TPlatformSiegeFlagMoveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagAttackReq_descriptor_, &TPlatformSiegeFlagAttackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagTouchReq_descriptor_, &TPlatformSiegeFlagTouchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagSetUserOptReq_descriptor_, &TPlatformSiegeFlagSetUserOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagSetArmyOptReq_descriptor_, &TPlatformSiegeFlagSetArmyOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagAllyRankInfo_descriptor_, &TPlatformSiegeFlagAllyRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagGetAllyRankReq_descriptor_, &TPlatformSiegeFlagGetAllyRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagGetAllyRankRsp_descriptor_, &TPlatformSiegeFlagGetAllyRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagUserRankInfo_descriptor_, &TPlatformSiegeFlagUserRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagGetRankListReq_descriptor_, &TPlatformSiegeFlagGetRankListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagGetRankListRsp_descriptor_, &TPlatformSiegeFlagGetRankListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagBuyInfo_descriptor_, &TPlatformSiegeFlagBuyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagServerGetInfoRsp_descriptor_, &TPlatformSiegeFlagServerGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagServerBuyGoodsReq_descriptor_, &TPlatformSiegeFlagServerBuyGoodsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformSiegeFlagServerNodify_descriptor_, &TPlatformSiegeFlagServerNodify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSiegeFlagAllyBaseInfo_descriptor_, &TSiegeFlagAllyBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSiegeFlagUserBaseInfo_descriptor_, &TSiegeFlagUserBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSiegeFlagGuildContriInfo_descriptor_, &TSiegeFlagGuildContriInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSiegeFlagAllianceSimpleInfoWithUser_descriptor_, &TSiegeFlagAllianceSimpleInfoWithUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSiegeFlagBattleEndNodify_descriptor_, &TSiegeFlagBattleEndNodify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto() {
  delete TPlatformSiegeFlagAllyInfo::default_instance_;
  delete TPlatformSiegeFlagAllyInfo_reflection_;
  delete TPlatformSiegeFlagUserInfo::default_instance_;
  delete TPlatformSiegeFlagUserInfo_reflection_;
  delete TPlatformSiegeFlagStage::default_instance_;
  delete TPlatformSiegeFlagStage_reflection_;
  delete TPlatformSiegeFlagGetBaseInfoRsp::default_instance_;
  delete TPlatformSiegeFlagGetBaseInfoRsp_reflection_;
  delete TPlatformSiegeFlagSignRsp::default_instance_;
  delete TPlatformSiegeFlagSignRsp_reflection_;
  delete TPlatformSiegeFlagMoveReq::default_instance_;
  delete TPlatformSiegeFlagMoveReq_reflection_;
  delete TPlatformSiegeFlagAttackReq::default_instance_;
  delete TPlatformSiegeFlagAttackReq_reflection_;
  delete TPlatformSiegeFlagTouchReq::default_instance_;
  delete TPlatformSiegeFlagTouchReq_reflection_;
  delete TPlatformSiegeFlagSetUserOptReq::default_instance_;
  delete TPlatformSiegeFlagSetUserOptReq_reflection_;
  delete TPlatformSiegeFlagSetArmyOptReq::default_instance_;
  delete TPlatformSiegeFlagSetArmyOptReq_reflection_;
  delete TPlatformSiegeFlagAllyRankInfo::default_instance_;
  delete TPlatformSiegeFlagAllyRankInfo_reflection_;
  delete TPlatformSiegeFlagGetAllyRankReq::default_instance_;
  delete TPlatformSiegeFlagGetAllyRankReq_reflection_;
  delete TPlatformSiegeFlagGetAllyRankRsp::default_instance_;
  delete TPlatformSiegeFlagGetAllyRankRsp_reflection_;
  delete TPlatformSiegeFlagUserRankInfo::default_instance_;
  delete TPlatformSiegeFlagUserRankInfo_reflection_;
  delete TPlatformSiegeFlagGetRankListReq::default_instance_;
  delete TPlatformSiegeFlagGetRankListReq_reflection_;
  delete TPlatformSiegeFlagGetRankListRsp::default_instance_;
  delete TPlatformSiegeFlagGetRankListRsp_reflection_;
  delete TPlatformSiegeFlagBuyInfo::default_instance_;
  delete TPlatformSiegeFlagBuyInfo_reflection_;
  delete TPlatformSiegeFlagServerGetInfoRsp::default_instance_;
  delete TPlatformSiegeFlagServerGetInfoRsp_reflection_;
  delete TPlatformSiegeFlagServerBuyGoodsReq::default_instance_;
  delete TPlatformSiegeFlagServerBuyGoodsReq_reflection_;
  delete TPlatformSiegeFlagServerNodify::default_instance_;
  delete TPlatformSiegeFlagServerNodify_reflection_;
  delete TSiegeFlagAllyBaseInfo::default_instance_;
  delete TSiegeFlagAllyBaseInfo_reflection_;
  delete TSiegeFlagUserBaseInfo::default_instance_;
  delete TSiegeFlagUserBaseInfo_reflection_;
  delete TSiegeFlagGuildContriInfo::default_instance_;
  delete TSiegeFlagGuildContriInfo_reflection_;
  delete TSiegeFlagAllianceSimpleInfoWithUser::default_instance_;
  delete TSiegeFlagAllianceSimpleInfoWithUser_reflection_;
  delete TSiegeFlagBattleEndNodify::default_instance_;
  delete TSiegeFlagBattleEndNodify_reflection_;
}

void protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fUtil_2eproto();
  ::pb::protobuf_AddDesc_net_2fAlliance_2eproto();
  ::pb::protobuf_AddDesc_net_2fShop_2eproto();
  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n net/CrossPlatformSiegeFlag.proto\022\002pb\032\021"
    "module/Util.proto\032\022net/Alliance.proto\032\016n"
    "et/Shop.proto\032\016net/User.proto\"\236\001\n\032TPlatf"
    "ormSiegeFlagAllyInfo\022\016\n\006AllyId\030\001 \001(\004\022\026\n\016"
    "CurrentFieldId\030\002 \001(\004\022.\n\rFieldAllyInfo\030\003 "
    "\003(\0132\027.pb.TAllianceSimpleInfo\022\021\n\tTeamScor"
    "e\030\004 \001(\r\022\025\n\rFieldDoneTime\030\005 \001(\004\";\n\032TPlatf"
    "ormSiegeFlagUserInfo\022\r\n\005Score\030\001 \001(\r\022\016\n\006I"
    "sJoin\030\002 \001(\010\"\273\001\n\027TPlatformSiegeFlagStage\022"
    "\021\n\tBeginTime\030\001 \001(\004\022\021\n\tMatchTime\030\002 \001(\004\022\025\n"
    "\rMatchShowTime\030\003 \001(\004\022\024\n\014AtkBeginTime\030\004 \001"
    "(\004\022\020\n\010ShowTime\030\005 \001(\004\022\017\n\007EndTime\030\006 \001(\004\022*\n"
    "\005Stage\030\007 \001(\0162\033.pb.EPlatformSiegeFlagStag"
    "e\"\234\002\n TPlatformSiegeFlagGetBaseInfoRsp\022\020"
    "\n\010FuncOpen\030\001 \001(\010\0220\n\010AllyInfo\030\002 \001(\0132\036.pb."
    "TPlatformSiegeFlagAllyInfo\0220\n\010UserInfo\030\003"
    " \001(\0132\036.pb.TPlatformSiegeFlagUserInfo\0221\n\014"
    "RealProgress\030\004 \001(\0132\033.pb.TPlatformSiegeFl"
    "agStage\022\r\n\005Round\030\005 \001(\r\022\027\n\017SeasonBeginTim"
    "e\030\006 \001(\004\022\025\n\rSeasonEndTime\030\007 \001(\004\022\020\n\010SignTi"
    "me\030\010 \001(\004\"-\n\031TPlatformSiegeFlagSignRsp\022\020\n"
    "\010SignTime\030\001 \001(\004\"A\n\031TPlatformSiegeFlagMov"
    "eReq\022$\n\tTargetPos\030\001 \001(\0132\021.pb.PbVector2_I"
    "nt\"/\n\033TPlatformSiegeFlagAttackReq\022\020\n\010Tar"
    "getId\030\001 \001(\004\"/\n\032TPlatformSiegeFlagTouchRe"
    "q\022\021\n\tTargetBid\030\001 \001(\004\"G\n\037TPlatformSiegeFl"
    "agSetUserOptReq\022\020\n\010TargetId\030\001 \001(\004\022\022\n\nAut"
    "oAttack\030\002 \001(\010\"1\n\037TPlatformSiegeFlagSetAr"
    "myOptReq\022\016\n\006GoalId\030\001 \001(\r\"h\n\036TPlatformSie"
    "geFlagAllyRankInfo\022)\n\010AllyInfo\030\001 \001(\0132\027.p"
    "b.TAllianceSimpleInfo\022\r\n\005Score\030\002 \001(\r\022\014\n\004"
    "Rank\030\003 \001(\r\"A\n TPlatformSiegeFlagGetAllyR"
    "ankReq\022\016\n\006Offset\030\001 \001(\r\022\r\n\005Limit\030\002 \001(\r\"\207\001"
    "\n TPlatformSiegeFlagGetAllyRankRsp\0223\n\007Ra"
    "nkArr\030\001 \003(\0132\".pb.TPlatformSiegeFlagAllyR"
    "ankInfo\022\r\n\005Score\030\002 \001(\r\022\014\n\004Rank\030\003 \001(\r\022\021\n\t"
    "LeaderUid\030\004 \001(\004\"\263\001\n\036TPlatformSiegeFlagUs"
    "erRankInfo\022\013\n\003Uid\030\001 \001(\004\022\r\n\005Uname\030\002 \001(\t\022\021"
    "\n\tImageHtid\030\003 \001(\r\022\025\n\rImageFrameTid\030\004 \001(\r"
    "\022\r\n\005Title\030\005 \001(\r\022\014\n\004Rank\030\n \001(\r\022\r\n\005Score\030\013"
    " \001(\r\022\017\n\007KillNum\030\014 \001(\r\022\016\n\006Devote\030\r \001(\r\"A\n"
    " TPlatformSiegeFlagGetRankListReq\022\016\n\006Off"
    "set\030\001 \001(\r\022\r\n\005Limit\030\002 \001(\r\"\225\001\n TPlatformSi"
    "egeFlagGetRankListRsp\0223\n\007RankArr\030\001 \003(\0132\""
    ".pb.TPlatformSiegeFlagUserRankInfo\022\014\n\004Ra"
    "nk\030\002 \001(\r\022\r\n\005Score\030\003 \001(\r\022\017\n\007KillCnt\030\004 \001(\r"
    "\022\016\n\006Devote\030\005 \001(\r\"7\n\031TPlatformSiegeFlagBu"
    "yInfo\022\n\n\002Id\030\001 \001(\r\022\016\n\006BuyNum\030\002 \001(\r\"f\n\"TPl"
    "atformSiegeFlagServerGetInfoRsp\022\020\n\010CanEn"
    "ter\030\001 \001(\010\022.\n\007ArrInfo\030\002 \003(\0132\035.pb.TPlatfor"
    "mSiegeFlagBuyInfo\">\n#TPlatformSiegeFlagS"
    "erverBuyGoodsReq\022\n\n\002Id\030\001 \001(\r\022\013\n\003Num\030\002 \001("
    "\004\"P\n\036TPlatformSiegeFlagServerNodify\022.\n\007A"
    "rrInfo\030\001 \003(\0132\035.pb.TPlatformSiegeFlagBuyI"
    "nfo\"\227\001\n\026TSiegeFlagAllyBaseInfo\022\016\n\006AllyId"
    "\030\001 \001(\004\022\r\n\005Level\030\002 \001(\r\022\014\n\004Name\030\003 \001(\t\022\022\n\nF"
    "ightForce\030\004 \001(\004\022\022\n\nBannerBase\030\005 \001(\r\022\022\n\nB"
    "annerName\030\006 \001(\t\022\024\n\014BannerFigure\030\007 \001(\r\"\177\n"
    "\026TSiegeFlagUserBaseInfo\022\013\n\003Uid\030\001 \001(\004\022\020\n\010"
    "ServerId\030\002 \001(\t\022\037\n\004Post\030\003 \001(\0162\021.pb.EAllia"
    "ncePost\022%\n\010UserInfo\030\004 \001(\0132\023.pb.TUserSimp"
    "leInfo\"~\n\031TSiegeFlagGuildContriInfo\022\013\n\003G"
    "id\030\001 \001(\004\022\020\n\010ServerId\030\002 \001(\t\022\021\n\tContriNum\030"
    "\003 \001(\r\022/\n\tGuildInfo\030\004 \001(\0132\034.pb.TAllianceG"
    "uildMemberInfo\"\220\001\n$TSiegeFlagAllianceSim"
    "pleInfoWithUser\0223\n\022AllianceSimpleInfo\030\001 "
    "\001(\0132\027.pb.TAllianceSimpleInfo\0223\n\017ArrUserB"
    "aseInfo\030\002 \003(\0132\032.pb.TSiegeFlagUserBaseInf"
    "o\"U\n\031TSiegeFlagBattleEndNodify\022\016\n\006TeamId"
    "\030\001 \001(\004\022\021\n\tTeamScore\030\002 \001(\r\022\025\n\rFieldDoneTi"
    "me\030\003 \001(\004*\314\001\n\027EPlatformSiegeFlagStage\022\035\n\031"
    "PLATFORMSIEGEFLAG_INVALID\020\000\022\032\n\026PLATFORMS"
    "IEGEFLAG_SIGN\020\001\022\033\n\027PLATFORMSIEGEFLAG_MAT"
    "CH\020\002\022\037\n\033PLATFORMSIEGEFLAG_MATCHSHOW\020\003\022\034\n"
    "\030PLATFORMSIEGEFLAG_BATTLE\020\004\022\032\n\026PLATFORMS"
    "IEGEFLAG_SHOW\020\005", 3015);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/CrossPlatformSiegeFlag.proto", &protobuf_RegisterTypes);
  TPlatformSiegeFlagAllyInfo::default_instance_ = new TPlatformSiegeFlagAllyInfo();
  TPlatformSiegeFlagUserInfo::default_instance_ = new TPlatformSiegeFlagUserInfo();
  TPlatformSiegeFlagStage::default_instance_ = new TPlatformSiegeFlagStage();
  TPlatformSiegeFlagGetBaseInfoRsp::default_instance_ = new TPlatformSiegeFlagGetBaseInfoRsp();
  TPlatformSiegeFlagSignRsp::default_instance_ = new TPlatformSiegeFlagSignRsp();
  TPlatformSiegeFlagMoveReq::default_instance_ = new TPlatformSiegeFlagMoveReq();
  TPlatformSiegeFlagAttackReq::default_instance_ = new TPlatformSiegeFlagAttackReq();
  TPlatformSiegeFlagTouchReq::default_instance_ = new TPlatformSiegeFlagTouchReq();
  TPlatformSiegeFlagSetUserOptReq::default_instance_ = new TPlatformSiegeFlagSetUserOptReq();
  TPlatformSiegeFlagSetArmyOptReq::default_instance_ = new TPlatformSiegeFlagSetArmyOptReq();
  TPlatformSiegeFlagAllyRankInfo::default_instance_ = new TPlatformSiegeFlagAllyRankInfo();
  TPlatformSiegeFlagGetAllyRankReq::default_instance_ = new TPlatformSiegeFlagGetAllyRankReq();
  TPlatformSiegeFlagGetAllyRankRsp::default_instance_ = new TPlatformSiegeFlagGetAllyRankRsp();
  TPlatformSiegeFlagUserRankInfo::default_instance_ = new TPlatformSiegeFlagUserRankInfo();
  TPlatformSiegeFlagGetRankListReq::default_instance_ = new TPlatformSiegeFlagGetRankListReq();
  TPlatformSiegeFlagGetRankListRsp::default_instance_ = new TPlatformSiegeFlagGetRankListRsp();
  TPlatformSiegeFlagBuyInfo::default_instance_ = new TPlatformSiegeFlagBuyInfo();
  TPlatformSiegeFlagServerGetInfoRsp::default_instance_ = new TPlatformSiegeFlagServerGetInfoRsp();
  TPlatformSiegeFlagServerBuyGoodsReq::default_instance_ = new TPlatformSiegeFlagServerBuyGoodsReq();
  TPlatformSiegeFlagServerNodify::default_instance_ = new TPlatformSiegeFlagServerNodify();
  TSiegeFlagAllyBaseInfo::default_instance_ = new TSiegeFlagAllyBaseInfo();
  TSiegeFlagUserBaseInfo::default_instance_ = new TSiegeFlagUserBaseInfo();
  TSiegeFlagGuildContriInfo::default_instance_ = new TSiegeFlagGuildContriInfo();
  TSiegeFlagAllianceSimpleInfoWithUser::default_instance_ = new TSiegeFlagAllianceSimpleInfoWithUser();
  TSiegeFlagBattleEndNodify::default_instance_ = new TSiegeFlagBattleEndNodify();
  TPlatformSiegeFlagAllyInfo::default_instance_->InitAsDefaultInstance();
  TPlatformSiegeFlagUserInfo::default_instance_->InitAsDefaultInstance();
  TPlatformSiegeFlagStage::default_instance_->InitAsDefaultInstance();
  TPlatformSiegeFlagGetBaseInfoRsp::default_instance_->InitAsDefaultInstance();
  TPlatformSiegeFlagSignRsp::default_instance_->InitAsDefaultInstance();
  TPlatformSiegeFlagMoveReq::default_instance_->InitAsDefaultInstance();
  TPlatformSiegeFlagAttackReq::default_instance_->InitAsDefaultInstance();
  TPlatformSiegeFlagTouchReq::default_instance_->InitAsDefaultInstance();
  TPlatformSiegeFlagSetUserOptReq::default_instance_->InitAsDefaultInstance();
  TPlatformSiegeFlagSetArmyOptReq::default_instance_->InitAsDefaultInstance();
  TPlatformSiegeFlagAllyRankInfo::default_instance_->InitAsDefaultInstance();
  TPlatformSiegeFlagGetAllyRankReq::default_instance_->InitAsDefaultInstance();
  TPlatformSiegeFlagGetAllyRankRsp::default_instance_->InitAsDefaultInstance();
  TPlatformSiegeFlagUserRankInfo::default_instance_->InitAsDefaultInstance();
  TPlatformSiegeFlagGetRankListReq::default_instance_->InitAsDefaultInstance();
  TPlatformSiegeFlagGetRankListRsp::default_instance_->InitAsDefaultInstance();
  TPlatformSiegeFlagBuyInfo::default_instance_->InitAsDefaultInstance();
  TPlatformSiegeFlagServerGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TPlatformSiegeFlagServerBuyGoodsReq::default_instance_->InitAsDefaultInstance();
  TPlatformSiegeFlagServerNodify::default_instance_->InitAsDefaultInstance();
  TSiegeFlagAllyBaseInfo::default_instance_->InitAsDefaultInstance();
  TSiegeFlagUserBaseInfo::default_instance_->InitAsDefaultInstance();
  TSiegeFlagGuildContriInfo::default_instance_->InitAsDefaultInstance();
  TSiegeFlagAllianceSimpleInfoWithUser::default_instance_->InitAsDefaultInstance();
  TSiegeFlagBattleEndNodify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fCrossPlatformSiegeFlag_2eproto {
  StaticDescriptorInitializer_net_2fCrossPlatformSiegeFlag_2eproto() {
    protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  }
} static_descriptor_initializer_net_2fCrossPlatformSiegeFlag_2eproto_;
const ::google::protobuf::EnumDescriptor* EPlatformSiegeFlagStage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPlatformSiegeFlagStage_descriptor_;
}
bool EPlatformSiegeFlagStage_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagAllyInfo::kAllyIdFieldNumber;
const int TPlatformSiegeFlagAllyInfo::kCurrentFieldIdFieldNumber;
const int TPlatformSiegeFlagAllyInfo::kFieldAllyInfoFieldNumber;
const int TPlatformSiegeFlagAllyInfo::kTeamScoreFieldNumber;
const int TPlatformSiegeFlagAllyInfo::kFieldDoneTimeFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagAllyInfo::TPlatformSiegeFlagAllyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagAllyInfo)
}

void TPlatformSiegeFlagAllyInfo::InitAsDefaultInstance() {
}

TPlatformSiegeFlagAllyInfo::TPlatformSiegeFlagAllyInfo(const TPlatformSiegeFlagAllyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagAllyInfo)
}

void TPlatformSiegeFlagAllyInfo::SharedCtor() {
  _cached_size_ = 0;
  allyid_ = GOOGLE_ULONGLONG(0);
  currentfieldid_ = GOOGLE_ULONGLONG(0);
  teamscore_ = 0u;
  fielddonetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagAllyInfo::~TPlatformSiegeFlagAllyInfo() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagAllyInfo)
  SharedDtor();
}

void TPlatformSiegeFlagAllyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformSiegeFlagAllyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagAllyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagAllyInfo_descriptor_;
}

const TPlatformSiegeFlagAllyInfo& TPlatformSiegeFlagAllyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagAllyInfo* TPlatformSiegeFlagAllyInfo::default_instance_ = NULL;

TPlatformSiegeFlagAllyInfo* TPlatformSiegeFlagAllyInfo::New() const {
  return new TPlatformSiegeFlagAllyInfo;
}

void TPlatformSiegeFlagAllyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformSiegeFlagAllyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(allyid_, currentfieldid_);
  ZR_(fielddonetime_, teamscore_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  fieldallyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagAllyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagAllyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 AllyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &allyid_)));
          set_has_allyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CurrentFieldId;
        break;
      }

      // optional uint64 CurrentFieldId = 2;
      case 2: {
        if (tag == 16) {
         parse_CurrentFieldId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &currentfieldid_)));
          set_has_currentfieldid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FieldAllyInfo;
        break;
      }

      // repeated .pb.TAllianceSimpleInfo FieldAllyInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_FieldAllyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldallyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FieldAllyInfo;
        if (input->ExpectTag(32)) goto parse_TeamScore;
        break;
      }

      // optional uint32 TeamScore = 4;
      case 4: {
        if (tag == 32) {
         parse_TeamScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamscore_)));
          set_has_teamscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_FieldDoneTime;
        break;
      }

      // optional uint64 FieldDoneTime = 5;
      case 5: {
        if (tag == 40) {
         parse_FieldDoneTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fielddonetime_)));
          set_has_fielddonetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagAllyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagAllyInfo)
  return false;
#undef DO_
}

void TPlatformSiegeFlagAllyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagAllyInfo)
  // optional uint64 AllyId = 1;
  if (has_allyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->allyid(), output);
  }

  // optional uint64 CurrentFieldId = 2;
  if (has_currentfieldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->currentfieldid(), output);
  }

  // repeated .pb.TAllianceSimpleInfo FieldAllyInfo = 3;
  for (int i = 0; i < this->fieldallyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fieldallyinfo(i), output);
  }

  // optional uint32 TeamScore = 4;
  if (has_teamscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->teamscore(), output);
  }

  // optional uint64 FieldDoneTime = 5;
  if (has_fielddonetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fielddonetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagAllyInfo)
}

::google::protobuf::uint8* TPlatformSiegeFlagAllyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagAllyInfo)
  // optional uint64 AllyId = 1;
  if (has_allyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->allyid(), target);
  }

  // optional uint64 CurrentFieldId = 2;
  if (has_currentfieldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->currentfieldid(), target);
  }

  // repeated .pb.TAllianceSimpleInfo FieldAllyInfo = 3;
  for (int i = 0; i < this->fieldallyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fieldallyinfo(i), target);
  }

  // optional uint32 TeamScore = 4;
  if (has_teamscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->teamscore(), target);
  }

  // optional uint64 FieldDoneTime = 5;
  if (has_fielddonetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fielddonetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagAllyInfo)
  return target;
}

int TPlatformSiegeFlagAllyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 AllyId = 1;
    if (has_allyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->allyid());
    }

    // optional uint64 CurrentFieldId = 2;
    if (has_currentfieldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->currentfieldid());
    }

    // optional uint32 TeamScore = 4;
    if (has_teamscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamscore());
    }

    // optional uint64 FieldDoneTime = 5;
    if (has_fielddonetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fielddonetime());
    }

  }
  // repeated .pb.TAllianceSimpleInfo FieldAllyInfo = 3;
  total_size += 1 * this->fieldallyinfo_size();
  for (int i = 0; i < this->fieldallyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldallyinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagAllyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagAllyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagAllyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagAllyInfo::MergeFrom(const TPlatformSiegeFlagAllyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldallyinfo_.MergeFrom(from.fieldallyinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allyid()) {
      set_allyid(from.allyid());
    }
    if (from.has_currentfieldid()) {
      set_currentfieldid(from.currentfieldid());
    }
    if (from.has_teamscore()) {
      set_teamscore(from.teamscore());
    }
    if (from.has_fielddonetime()) {
      set_fielddonetime(from.fielddonetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagAllyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagAllyInfo::CopyFrom(const TPlatformSiegeFlagAllyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagAllyInfo::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagAllyInfo::Swap(TPlatformSiegeFlagAllyInfo* other) {
  if (other != this) {
    std::swap(allyid_, other->allyid_);
    std::swap(currentfieldid_, other->currentfieldid_);
    fieldallyinfo_.Swap(&other->fieldallyinfo_);
    std::swap(teamscore_, other->teamscore_);
    std::swap(fielddonetime_, other->fielddonetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagAllyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagAllyInfo_descriptor_;
  metadata.reflection = TPlatformSiegeFlagAllyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagUserInfo::kScoreFieldNumber;
const int TPlatformSiegeFlagUserInfo::kIsJoinFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagUserInfo::TPlatformSiegeFlagUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagUserInfo)
}

void TPlatformSiegeFlagUserInfo::InitAsDefaultInstance() {
}

TPlatformSiegeFlagUserInfo::TPlatformSiegeFlagUserInfo(const TPlatformSiegeFlagUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagUserInfo)
}

void TPlatformSiegeFlagUserInfo::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  isjoin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagUserInfo::~TPlatformSiegeFlagUserInfo() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagUserInfo)
  SharedDtor();
}

void TPlatformSiegeFlagUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformSiegeFlagUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagUserInfo_descriptor_;
}

const TPlatformSiegeFlagUserInfo& TPlatformSiegeFlagUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagUserInfo* TPlatformSiegeFlagUserInfo::default_instance_ = NULL;

TPlatformSiegeFlagUserInfo* TPlatformSiegeFlagUserInfo::New() const {
  return new TPlatformSiegeFlagUserInfo;
}

void TPlatformSiegeFlagUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformSiegeFlagUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(score_, isjoin_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsJoin;
        break;
      }

      // optional bool IsJoin = 2;
      case 2: {
        if (tag == 16) {
         parse_IsJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isjoin_)));
          set_has_isjoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagUserInfo)
  return false;
#undef DO_
}

void TPlatformSiegeFlagUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagUserInfo)
  // optional uint32 Score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  // optional bool IsJoin = 2;
  if (has_isjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isjoin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagUserInfo)
}

::google::protobuf::uint8* TPlatformSiegeFlagUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagUserInfo)
  // optional uint32 Score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->score(), target);
  }

  // optional bool IsJoin = 2;
  if (has_isjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isjoin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagUserInfo)
  return target;
}

int TPlatformSiegeFlagUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional bool IsJoin = 2;
    if (has_isjoin()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagUserInfo::MergeFrom(const TPlatformSiegeFlagUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_isjoin()) {
      set_isjoin(from.isjoin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagUserInfo::CopyFrom(const TPlatformSiegeFlagUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagUserInfo::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagUserInfo::Swap(TPlatformSiegeFlagUserInfo* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(isjoin_, other->isjoin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagUserInfo_descriptor_;
  metadata.reflection = TPlatformSiegeFlagUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagStage::kBeginTimeFieldNumber;
const int TPlatformSiegeFlagStage::kMatchTimeFieldNumber;
const int TPlatformSiegeFlagStage::kMatchShowTimeFieldNumber;
const int TPlatformSiegeFlagStage::kAtkBeginTimeFieldNumber;
const int TPlatformSiegeFlagStage::kShowTimeFieldNumber;
const int TPlatformSiegeFlagStage::kEndTimeFieldNumber;
const int TPlatformSiegeFlagStage::kStageFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagStage::TPlatformSiegeFlagStage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagStage)
}

void TPlatformSiegeFlagStage::InitAsDefaultInstance() {
}

TPlatformSiegeFlagStage::TPlatformSiegeFlagStage(const TPlatformSiegeFlagStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagStage)
}

void TPlatformSiegeFlagStage::SharedCtor() {
  _cached_size_ = 0;
  begintime_ = GOOGLE_ULONGLONG(0);
  matchtime_ = GOOGLE_ULONGLONG(0);
  matchshowtime_ = GOOGLE_ULONGLONG(0);
  atkbegintime_ = GOOGLE_ULONGLONG(0);
  showtime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  stage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagStage::~TPlatformSiegeFlagStage() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagStage)
  SharedDtor();
}

void TPlatformSiegeFlagStage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformSiegeFlagStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagStage_descriptor_;
}

const TPlatformSiegeFlagStage& TPlatformSiegeFlagStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagStage* TPlatformSiegeFlagStage::default_instance_ = NULL;

TPlatformSiegeFlagStage* TPlatformSiegeFlagStage::New() const {
  return new TPlatformSiegeFlagStage;
}

void TPlatformSiegeFlagStage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformSiegeFlagStage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(begintime_, stage_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagStage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 BeginTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MatchTime;
        break;
      }

      // optional uint64 MatchTime = 2;
      case 2: {
        if (tag == 16) {
         parse_MatchTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchtime_)));
          set_has_matchtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MatchShowTime;
        break;
      }

      // optional uint64 MatchShowTime = 3;
      case 3: {
        if (tag == 24) {
         parse_MatchShowTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchshowtime_)));
          set_has_matchshowtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AtkBeginTime;
        break;
      }

      // optional uint64 AtkBeginTime = 4;
      case 4: {
        if (tag == 32) {
         parse_AtkBeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &atkbegintime_)));
          set_has_atkbegintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ShowTime;
        break;
      }

      // optional uint64 ShowTime = 5;
      case 5: {
        if (tag == 40) {
         parse_ShowTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &showtime_)));
          set_has_showtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 6;
      case 6: {
        if (tag == 48) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Stage;
        break;
      }

      // optional .pb.EPlatformSiegeFlagStage Stage = 7;
      case 7: {
        if (tag == 56) {
         parse_Stage:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EPlatformSiegeFlagStage_IsValid(value)) {
            set_stage(static_cast< ::pb::EPlatformSiegeFlagStage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagStage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagStage)
  return false;
#undef DO_
}

void TPlatformSiegeFlagStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagStage)
  // optional uint64 BeginTime = 1;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->begintime(), output);
  }

  // optional uint64 MatchTime = 2;
  if (has_matchtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->matchtime(), output);
  }

  // optional uint64 MatchShowTime = 3;
  if (has_matchshowtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->matchshowtime(), output);
  }

  // optional uint64 AtkBeginTime = 4;
  if (has_atkbegintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->atkbegintime(), output);
  }

  // optional uint64 ShowTime = 5;
  if (has_showtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->showtime(), output);
  }

  // optional uint64 EndTime = 6;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->endtime(), output);
  }

  // optional .pb.EPlatformSiegeFlagStage Stage = 7;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagStage)
}

::google::protobuf::uint8* TPlatformSiegeFlagStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagStage)
  // optional uint64 BeginTime = 1;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->begintime(), target);
  }

  // optional uint64 MatchTime = 2;
  if (has_matchtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->matchtime(), target);
  }

  // optional uint64 MatchShowTime = 3;
  if (has_matchshowtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->matchshowtime(), target);
  }

  // optional uint64 AtkBeginTime = 4;
  if (has_atkbegintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->atkbegintime(), target);
  }

  // optional uint64 ShowTime = 5;
  if (has_showtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->showtime(), target);
  }

  // optional uint64 EndTime = 6;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->endtime(), target);
  }

  // optional .pb.EPlatformSiegeFlagStage Stage = 7;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagStage)
  return target;
}

int TPlatformSiegeFlagStage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 BeginTime = 1;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begintime());
    }

    // optional uint64 MatchTime = 2;
    if (has_matchtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchtime());
    }

    // optional uint64 MatchShowTime = 3;
    if (has_matchshowtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchshowtime());
    }

    // optional uint64 AtkBeginTime = 4;
    if (has_atkbegintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->atkbegintime());
    }

    // optional uint64 ShowTime = 5;
    if (has_showtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->showtime());
    }

    // optional uint64 EndTime = 6;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional .pb.EPlatformSiegeFlagStage Stage = 7;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagStage::MergeFrom(const TPlatformSiegeFlagStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_matchtime()) {
      set_matchtime(from.matchtime());
    }
    if (from.has_matchshowtime()) {
      set_matchshowtime(from.matchshowtime());
    }
    if (from.has_atkbegintime()) {
      set_atkbegintime(from.atkbegintime());
    }
    if (from.has_showtime()) {
      set_showtime(from.showtime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagStage::CopyFrom(const TPlatformSiegeFlagStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagStage::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagStage::Swap(TPlatformSiegeFlagStage* other) {
  if (other != this) {
    std::swap(begintime_, other->begintime_);
    std::swap(matchtime_, other->matchtime_);
    std::swap(matchshowtime_, other->matchshowtime_);
    std::swap(atkbegintime_, other->atkbegintime_);
    std::swap(showtime_, other->showtime_);
    std::swap(endtime_, other->endtime_);
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagStage_descriptor_;
  metadata.reflection = TPlatformSiegeFlagStage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagGetBaseInfoRsp::kFuncOpenFieldNumber;
const int TPlatformSiegeFlagGetBaseInfoRsp::kAllyInfoFieldNumber;
const int TPlatformSiegeFlagGetBaseInfoRsp::kUserInfoFieldNumber;
const int TPlatformSiegeFlagGetBaseInfoRsp::kRealProgressFieldNumber;
const int TPlatformSiegeFlagGetBaseInfoRsp::kRoundFieldNumber;
const int TPlatformSiegeFlagGetBaseInfoRsp::kSeasonBeginTimeFieldNumber;
const int TPlatformSiegeFlagGetBaseInfoRsp::kSeasonEndTimeFieldNumber;
const int TPlatformSiegeFlagGetBaseInfoRsp::kSignTimeFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagGetBaseInfoRsp::TPlatformSiegeFlagGetBaseInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagGetBaseInfoRsp)
}

void TPlatformSiegeFlagGetBaseInfoRsp::InitAsDefaultInstance() {
  allyinfo_ = const_cast< ::pb::TPlatformSiegeFlagAllyInfo*>(&::pb::TPlatformSiegeFlagAllyInfo::default_instance());
  userinfo_ = const_cast< ::pb::TPlatformSiegeFlagUserInfo*>(&::pb::TPlatformSiegeFlagUserInfo::default_instance());
  realprogress_ = const_cast< ::pb::TPlatformSiegeFlagStage*>(&::pb::TPlatformSiegeFlagStage::default_instance());
}

TPlatformSiegeFlagGetBaseInfoRsp::TPlatformSiegeFlagGetBaseInfoRsp(const TPlatformSiegeFlagGetBaseInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagGetBaseInfoRsp)
}

void TPlatformSiegeFlagGetBaseInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  funcopen_ = false;
  allyinfo_ = NULL;
  userinfo_ = NULL;
  realprogress_ = NULL;
  round_ = 0u;
  seasonbegintime_ = GOOGLE_ULONGLONG(0);
  seasonendtime_ = GOOGLE_ULONGLONG(0);
  signtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagGetBaseInfoRsp::~TPlatformSiegeFlagGetBaseInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagGetBaseInfoRsp)
  SharedDtor();
}

void TPlatformSiegeFlagGetBaseInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete allyinfo_;
    delete userinfo_;
    delete realprogress_;
  }
}

void TPlatformSiegeFlagGetBaseInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagGetBaseInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagGetBaseInfoRsp_descriptor_;
}

const TPlatformSiegeFlagGetBaseInfoRsp& TPlatformSiegeFlagGetBaseInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagGetBaseInfoRsp* TPlatformSiegeFlagGetBaseInfoRsp::default_instance_ = NULL;

TPlatformSiegeFlagGetBaseInfoRsp* TPlatformSiegeFlagGetBaseInfoRsp::New() const {
  return new TPlatformSiegeFlagGetBaseInfoRsp;
}

void TPlatformSiegeFlagGetBaseInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformSiegeFlagGetBaseInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(funcopen_, round_);
    ZR_(seasonbegintime_, signtime_);
    if (has_allyinfo()) {
      if (allyinfo_ != NULL) allyinfo_->::pb::TPlatformSiegeFlagAllyInfo::Clear();
    }
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TPlatformSiegeFlagUserInfo::Clear();
    }
    if (has_realprogress()) {
      if (realprogress_ != NULL) realprogress_->::pb::TPlatformSiegeFlagStage::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagGetBaseInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagGetBaseInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool FuncOpen = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &funcopen_)));
          set_has_funcopen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AllyInfo;
        break;
      }

      // optional .pb.TPlatformSiegeFlagAllyInfo AllyInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_AllyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_allyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TPlatformSiegeFlagUserInfo UserInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RealProgress;
        break;
      }

      // optional .pb.TPlatformSiegeFlagStage RealProgress = 4;
      case 4: {
        if (tag == 34) {
         parse_RealProgress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_realprogress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Round;
        break;
      }

      // optional uint32 Round = 5;
      case 5: {
        if (tag == 40) {
         parse_Round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_SeasonBeginTime;
        break;
      }

      // optional uint64 SeasonBeginTime = 6;
      case 6: {
        if (tag == 48) {
         parse_SeasonBeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seasonbegintime_)));
          set_has_seasonbegintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_SeasonEndTime;
        break;
      }

      // optional uint64 SeasonEndTime = 7;
      case 7: {
        if (tag == 56) {
         parse_SeasonEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seasonendtime_)));
          set_has_seasonendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_SignTime;
        break;
      }

      // optional uint64 SignTime = 8;
      case 8: {
        if (tag == 64) {
         parse_SignTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signtime_)));
          set_has_signtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagGetBaseInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagGetBaseInfoRsp)
  return false;
#undef DO_
}

void TPlatformSiegeFlagGetBaseInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagGetBaseInfoRsp)
  // optional bool FuncOpen = 1;
  if (has_funcopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->funcopen(), output);
  }

  // optional .pb.TPlatformSiegeFlagAllyInfo AllyInfo = 2;
  if (has_allyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->allyinfo(), output);
  }

  // optional .pb.TPlatformSiegeFlagUserInfo UserInfo = 3;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfo(), output);
  }

  // optional .pb.TPlatformSiegeFlagStage RealProgress = 4;
  if (has_realprogress()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->realprogress(), output);
  }

  // optional uint32 Round = 5;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->round(), output);
  }

  // optional uint64 SeasonBeginTime = 6;
  if (has_seasonbegintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->seasonbegintime(), output);
  }

  // optional uint64 SeasonEndTime = 7;
  if (has_seasonendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->seasonendtime(), output);
  }

  // optional uint64 SignTime = 8;
  if (has_signtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->signtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagGetBaseInfoRsp)
}

::google::protobuf::uint8* TPlatformSiegeFlagGetBaseInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagGetBaseInfoRsp)
  // optional bool FuncOpen = 1;
  if (has_funcopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->funcopen(), target);
  }

  // optional .pb.TPlatformSiegeFlagAllyInfo AllyInfo = 2;
  if (has_allyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->allyinfo(), target);
  }

  // optional .pb.TPlatformSiegeFlagUserInfo UserInfo = 3;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfo(), target);
  }

  // optional .pb.TPlatformSiegeFlagStage RealProgress = 4;
  if (has_realprogress()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->realprogress(), target);
  }

  // optional uint32 Round = 5;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->round(), target);
  }

  // optional uint64 SeasonBeginTime = 6;
  if (has_seasonbegintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->seasonbegintime(), target);
  }

  // optional uint64 SeasonEndTime = 7;
  if (has_seasonendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->seasonendtime(), target);
  }

  // optional uint64 SignTime = 8;
  if (has_signtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->signtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagGetBaseInfoRsp)
  return target;
}

int TPlatformSiegeFlagGetBaseInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool FuncOpen = 1;
    if (has_funcopen()) {
      total_size += 1 + 1;
    }

    // optional .pb.TPlatformSiegeFlagAllyInfo AllyInfo = 2;
    if (has_allyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->allyinfo());
    }

    // optional .pb.TPlatformSiegeFlagUserInfo UserInfo = 3;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional .pb.TPlatformSiegeFlagStage RealProgress = 4;
    if (has_realprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->realprogress());
    }

    // optional uint32 Round = 5;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->round());
    }

    // optional uint64 SeasonBeginTime = 6;
    if (has_seasonbegintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seasonbegintime());
    }

    // optional uint64 SeasonEndTime = 7;
    if (has_seasonendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seasonendtime());
    }

    // optional uint64 SignTime = 8;
    if (has_signtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagGetBaseInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagGetBaseInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagGetBaseInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagGetBaseInfoRsp::MergeFrom(const TPlatformSiegeFlagGetBaseInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_funcopen()) {
      set_funcopen(from.funcopen());
    }
    if (from.has_allyinfo()) {
      mutable_allyinfo()->::pb::TPlatformSiegeFlagAllyInfo::MergeFrom(from.allyinfo());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TPlatformSiegeFlagUserInfo::MergeFrom(from.userinfo());
    }
    if (from.has_realprogress()) {
      mutable_realprogress()->::pb::TPlatformSiegeFlagStage::MergeFrom(from.realprogress());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_seasonbegintime()) {
      set_seasonbegintime(from.seasonbegintime());
    }
    if (from.has_seasonendtime()) {
      set_seasonendtime(from.seasonendtime());
    }
    if (from.has_signtime()) {
      set_signtime(from.signtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagGetBaseInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagGetBaseInfoRsp::CopyFrom(const TPlatformSiegeFlagGetBaseInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagGetBaseInfoRsp::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagGetBaseInfoRsp::Swap(TPlatformSiegeFlagGetBaseInfoRsp* other) {
  if (other != this) {
    std::swap(funcopen_, other->funcopen_);
    std::swap(allyinfo_, other->allyinfo_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(realprogress_, other->realprogress_);
    std::swap(round_, other->round_);
    std::swap(seasonbegintime_, other->seasonbegintime_);
    std::swap(seasonendtime_, other->seasonendtime_);
    std::swap(signtime_, other->signtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagGetBaseInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagGetBaseInfoRsp_descriptor_;
  metadata.reflection = TPlatformSiegeFlagGetBaseInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagSignRsp::kSignTimeFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagSignRsp::TPlatformSiegeFlagSignRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagSignRsp)
}

void TPlatformSiegeFlagSignRsp::InitAsDefaultInstance() {
}

TPlatformSiegeFlagSignRsp::TPlatformSiegeFlagSignRsp(const TPlatformSiegeFlagSignRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagSignRsp)
}

void TPlatformSiegeFlagSignRsp::SharedCtor() {
  _cached_size_ = 0;
  signtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagSignRsp::~TPlatformSiegeFlagSignRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagSignRsp)
  SharedDtor();
}

void TPlatformSiegeFlagSignRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformSiegeFlagSignRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagSignRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagSignRsp_descriptor_;
}

const TPlatformSiegeFlagSignRsp& TPlatformSiegeFlagSignRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagSignRsp* TPlatformSiegeFlagSignRsp::default_instance_ = NULL;

TPlatformSiegeFlagSignRsp* TPlatformSiegeFlagSignRsp::New() const {
  return new TPlatformSiegeFlagSignRsp;
}

void TPlatformSiegeFlagSignRsp::Clear() {
  signtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagSignRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagSignRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 SignTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signtime_)));
          set_has_signtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagSignRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagSignRsp)
  return false;
#undef DO_
}

void TPlatformSiegeFlagSignRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagSignRsp)
  // optional uint64 SignTime = 1;
  if (has_signtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->signtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagSignRsp)
}

::google::protobuf::uint8* TPlatformSiegeFlagSignRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagSignRsp)
  // optional uint64 SignTime = 1;
  if (has_signtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->signtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagSignRsp)
  return target;
}

int TPlatformSiegeFlagSignRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 SignTime = 1;
    if (has_signtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagSignRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagSignRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagSignRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagSignRsp::MergeFrom(const TPlatformSiegeFlagSignRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signtime()) {
      set_signtime(from.signtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagSignRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagSignRsp::CopyFrom(const TPlatformSiegeFlagSignRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagSignRsp::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagSignRsp::Swap(TPlatformSiegeFlagSignRsp* other) {
  if (other != this) {
    std::swap(signtime_, other->signtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagSignRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagSignRsp_descriptor_;
  metadata.reflection = TPlatformSiegeFlagSignRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagMoveReq::kTargetPosFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagMoveReq::TPlatformSiegeFlagMoveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagMoveReq)
}

void TPlatformSiegeFlagMoveReq::InitAsDefaultInstance() {
  targetpos_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
}

TPlatformSiegeFlagMoveReq::TPlatformSiegeFlagMoveReq(const TPlatformSiegeFlagMoveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagMoveReq)
}

void TPlatformSiegeFlagMoveReq::SharedCtor() {
  _cached_size_ = 0;
  targetpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagMoveReq::~TPlatformSiegeFlagMoveReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagMoveReq)
  SharedDtor();
}

void TPlatformSiegeFlagMoveReq::SharedDtor() {
  if (this != default_instance_) {
    delete targetpos_;
  }
}

void TPlatformSiegeFlagMoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagMoveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagMoveReq_descriptor_;
}

const TPlatformSiegeFlagMoveReq& TPlatformSiegeFlagMoveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagMoveReq* TPlatformSiegeFlagMoveReq::default_instance_ = NULL;

TPlatformSiegeFlagMoveReq* TPlatformSiegeFlagMoveReq::New() const {
  return new TPlatformSiegeFlagMoveReq;
}

void TPlatformSiegeFlagMoveReq::Clear() {
  if (has_targetpos()) {
    if (targetpos_ != NULL) targetpos_->::pb::PbVector2_Int::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagMoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagMoveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.PbVector2_Int TargetPos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagMoveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagMoveReq)
  return false;
#undef DO_
}

void TPlatformSiegeFlagMoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagMoveReq)
  // optional .pb.PbVector2_Int TargetPos = 1;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->targetpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagMoveReq)
}

::google::protobuf::uint8* TPlatformSiegeFlagMoveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagMoveReq)
  // optional .pb.PbVector2_Int TargetPos = 1;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->targetpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagMoveReq)
  return target;
}

int TPlatformSiegeFlagMoveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.PbVector2_Int TargetPos = 1;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagMoveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagMoveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagMoveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagMoveReq::MergeFrom(const TPlatformSiegeFlagMoveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetpos()) {
      mutable_targetpos()->::pb::PbVector2_Int::MergeFrom(from.targetpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagMoveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagMoveReq::CopyFrom(const TPlatformSiegeFlagMoveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagMoveReq::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagMoveReq::Swap(TPlatformSiegeFlagMoveReq* other) {
  if (other != this) {
    std::swap(targetpos_, other->targetpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagMoveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagMoveReq_descriptor_;
  metadata.reflection = TPlatformSiegeFlagMoveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagAttackReq::kTargetIdFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagAttackReq::TPlatformSiegeFlagAttackReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagAttackReq)
}

void TPlatformSiegeFlagAttackReq::InitAsDefaultInstance() {
}

TPlatformSiegeFlagAttackReq::TPlatformSiegeFlagAttackReq(const TPlatformSiegeFlagAttackReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagAttackReq)
}

void TPlatformSiegeFlagAttackReq::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagAttackReq::~TPlatformSiegeFlagAttackReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagAttackReq)
  SharedDtor();
}

void TPlatformSiegeFlagAttackReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformSiegeFlagAttackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagAttackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagAttackReq_descriptor_;
}

const TPlatformSiegeFlagAttackReq& TPlatformSiegeFlagAttackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagAttackReq* TPlatformSiegeFlagAttackReq::default_instance_ = NULL;

TPlatformSiegeFlagAttackReq* TPlatformSiegeFlagAttackReq::New() const {
  return new TPlatformSiegeFlagAttackReq;
}

void TPlatformSiegeFlagAttackReq::Clear() {
  targetid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagAttackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagAttackReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TargetId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagAttackReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagAttackReq)
  return false;
#undef DO_
}

void TPlatformSiegeFlagAttackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagAttackReq)
  // optional uint64 TargetId = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagAttackReq)
}

::google::protobuf::uint8* TPlatformSiegeFlagAttackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagAttackReq)
  // optional uint64 TargetId = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagAttackReq)
  return target;
}

int TPlatformSiegeFlagAttackReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TargetId = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagAttackReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagAttackReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagAttackReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagAttackReq::MergeFrom(const TPlatformSiegeFlagAttackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagAttackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagAttackReq::CopyFrom(const TPlatformSiegeFlagAttackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagAttackReq::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagAttackReq::Swap(TPlatformSiegeFlagAttackReq* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagAttackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagAttackReq_descriptor_;
  metadata.reflection = TPlatformSiegeFlagAttackReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagTouchReq::kTargetBidFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagTouchReq::TPlatformSiegeFlagTouchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagTouchReq)
}

void TPlatformSiegeFlagTouchReq::InitAsDefaultInstance() {
}

TPlatformSiegeFlagTouchReq::TPlatformSiegeFlagTouchReq(const TPlatformSiegeFlagTouchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagTouchReq)
}

void TPlatformSiegeFlagTouchReq::SharedCtor() {
  _cached_size_ = 0;
  targetbid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagTouchReq::~TPlatformSiegeFlagTouchReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagTouchReq)
  SharedDtor();
}

void TPlatformSiegeFlagTouchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformSiegeFlagTouchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagTouchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagTouchReq_descriptor_;
}

const TPlatformSiegeFlagTouchReq& TPlatformSiegeFlagTouchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagTouchReq* TPlatformSiegeFlagTouchReq::default_instance_ = NULL;

TPlatformSiegeFlagTouchReq* TPlatformSiegeFlagTouchReq::New() const {
  return new TPlatformSiegeFlagTouchReq;
}

void TPlatformSiegeFlagTouchReq::Clear() {
  targetbid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagTouchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagTouchReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TargetBid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetbid_)));
          set_has_targetbid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagTouchReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagTouchReq)
  return false;
#undef DO_
}

void TPlatformSiegeFlagTouchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagTouchReq)
  // optional uint64 TargetBid = 1;
  if (has_targetbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->targetbid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagTouchReq)
}

::google::protobuf::uint8* TPlatformSiegeFlagTouchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagTouchReq)
  // optional uint64 TargetBid = 1;
  if (has_targetbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->targetbid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagTouchReq)
  return target;
}

int TPlatformSiegeFlagTouchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TargetBid = 1;
    if (has_targetbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetbid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagTouchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagTouchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagTouchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagTouchReq::MergeFrom(const TPlatformSiegeFlagTouchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetbid()) {
      set_targetbid(from.targetbid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagTouchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagTouchReq::CopyFrom(const TPlatformSiegeFlagTouchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagTouchReq::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagTouchReq::Swap(TPlatformSiegeFlagTouchReq* other) {
  if (other != this) {
    std::swap(targetbid_, other->targetbid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagTouchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagTouchReq_descriptor_;
  metadata.reflection = TPlatformSiegeFlagTouchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagSetUserOptReq::kTargetIdFieldNumber;
const int TPlatformSiegeFlagSetUserOptReq::kAutoAttackFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagSetUserOptReq::TPlatformSiegeFlagSetUserOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagSetUserOptReq)
}

void TPlatformSiegeFlagSetUserOptReq::InitAsDefaultInstance() {
}

TPlatformSiegeFlagSetUserOptReq::TPlatformSiegeFlagSetUserOptReq(const TPlatformSiegeFlagSetUserOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagSetUserOptReq)
}

void TPlatformSiegeFlagSetUserOptReq::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = GOOGLE_ULONGLONG(0);
  autoattack_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagSetUserOptReq::~TPlatformSiegeFlagSetUserOptReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagSetUserOptReq)
  SharedDtor();
}

void TPlatformSiegeFlagSetUserOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformSiegeFlagSetUserOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagSetUserOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagSetUserOptReq_descriptor_;
}

const TPlatformSiegeFlagSetUserOptReq& TPlatformSiegeFlagSetUserOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagSetUserOptReq* TPlatformSiegeFlagSetUserOptReq::default_instance_ = NULL;

TPlatformSiegeFlagSetUserOptReq* TPlatformSiegeFlagSetUserOptReq::New() const {
  return new TPlatformSiegeFlagSetUserOptReq;
}

void TPlatformSiegeFlagSetUserOptReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformSiegeFlagSetUserOptReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(targetid_, autoattack_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagSetUserOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagSetUserOptReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TargetId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AutoAttack;
        break;
      }

      // optional bool AutoAttack = 2;
      case 2: {
        if (tag == 16) {
         parse_AutoAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoattack_)));
          set_has_autoattack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagSetUserOptReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagSetUserOptReq)
  return false;
#undef DO_
}

void TPlatformSiegeFlagSetUserOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagSetUserOptReq)
  // optional uint64 TargetId = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->targetid(), output);
  }

  // optional bool AutoAttack = 2;
  if (has_autoattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->autoattack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagSetUserOptReq)
}

::google::protobuf::uint8* TPlatformSiegeFlagSetUserOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagSetUserOptReq)
  // optional uint64 TargetId = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->targetid(), target);
  }

  // optional bool AutoAttack = 2;
  if (has_autoattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->autoattack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagSetUserOptReq)
  return target;
}

int TPlatformSiegeFlagSetUserOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TargetId = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

    // optional bool AutoAttack = 2;
    if (has_autoattack()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagSetUserOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagSetUserOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagSetUserOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagSetUserOptReq::MergeFrom(const TPlatformSiegeFlagSetUserOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_autoattack()) {
      set_autoattack(from.autoattack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagSetUserOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagSetUserOptReq::CopyFrom(const TPlatformSiegeFlagSetUserOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagSetUserOptReq::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagSetUserOptReq::Swap(TPlatformSiegeFlagSetUserOptReq* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(autoattack_, other->autoattack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagSetUserOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagSetUserOptReq_descriptor_;
  metadata.reflection = TPlatformSiegeFlagSetUserOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagSetArmyOptReq::kGoalIdFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagSetArmyOptReq::TPlatformSiegeFlagSetArmyOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagSetArmyOptReq)
}

void TPlatformSiegeFlagSetArmyOptReq::InitAsDefaultInstance() {
}

TPlatformSiegeFlagSetArmyOptReq::TPlatformSiegeFlagSetArmyOptReq(const TPlatformSiegeFlagSetArmyOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagSetArmyOptReq)
}

void TPlatformSiegeFlagSetArmyOptReq::SharedCtor() {
  _cached_size_ = 0;
  goalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagSetArmyOptReq::~TPlatformSiegeFlagSetArmyOptReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagSetArmyOptReq)
  SharedDtor();
}

void TPlatformSiegeFlagSetArmyOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformSiegeFlagSetArmyOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagSetArmyOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagSetArmyOptReq_descriptor_;
}

const TPlatformSiegeFlagSetArmyOptReq& TPlatformSiegeFlagSetArmyOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagSetArmyOptReq* TPlatformSiegeFlagSetArmyOptReq::default_instance_ = NULL;

TPlatformSiegeFlagSetArmyOptReq* TPlatformSiegeFlagSetArmyOptReq::New() const {
  return new TPlatformSiegeFlagSetArmyOptReq;
}

void TPlatformSiegeFlagSetArmyOptReq::Clear() {
  goalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagSetArmyOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagSetArmyOptReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GoalId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goalid_)));
          set_has_goalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagSetArmyOptReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagSetArmyOptReq)
  return false;
#undef DO_
}

void TPlatformSiegeFlagSetArmyOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagSetArmyOptReq)
  // optional uint32 GoalId = 1;
  if (has_goalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagSetArmyOptReq)
}

::google::protobuf::uint8* TPlatformSiegeFlagSetArmyOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagSetArmyOptReq)
  // optional uint32 GoalId = 1;
  if (has_goalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagSetArmyOptReq)
  return target;
}

int TPlatformSiegeFlagSetArmyOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GoalId = 1;
    if (has_goalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagSetArmyOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagSetArmyOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagSetArmyOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagSetArmyOptReq::MergeFrom(const TPlatformSiegeFlagSetArmyOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goalid()) {
      set_goalid(from.goalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagSetArmyOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagSetArmyOptReq::CopyFrom(const TPlatformSiegeFlagSetArmyOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagSetArmyOptReq::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagSetArmyOptReq::Swap(TPlatformSiegeFlagSetArmyOptReq* other) {
  if (other != this) {
    std::swap(goalid_, other->goalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagSetArmyOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagSetArmyOptReq_descriptor_;
  metadata.reflection = TPlatformSiegeFlagSetArmyOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagAllyRankInfo::kAllyInfoFieldNumber;
const int TPlatformSiegeFlagAllyRankInfo::kScoreFieldNumber;
const int TPlatformSiegeFlagAllyRankInfo::kRankFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagAllyRankInfo::TPlatformSiegeFlagAllyRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagAllyRankInfo)
}

void TPlatformSiegeFlagAllyRankInfo::InitAsDefaultInstance() {
  allyinfo_ = const_cast< ::pb::TAllianceSimpleInfo*>(&::pb::TAllianceSimpleInfo::default_instance());
}

TPlatformSiegeFlagAllyRankInfo::TPlatformSiegeFlagAllyRankInfo(const TPlatformSiegeFlagAllyRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagAllyRankInfo)
}

void TPlatformSiegeFlagAllyRankInfo::SharedCtor() {
  _cached_size_ = 0;
  allyinfo_ = NULL;
  score_ = 0u;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagAllyRankInfo::~TPlatformSiegeFlagAllyRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagAllyRankInfo)
  SharedDtor();
}

void TPlatformSiegeFlagAllyRankInfo::SharedDtor() {
  if (this != default_instance_) {
    delete allyinfo_;
  }
}

void TPlatformSiegeFlagAllyRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagAllyRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagAllyRankInfo_descriptor_;
}

const TPlatformSiegeFlagAllyRankInfo& TPlatformSiegeFlagAllyRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagAllyRankInfo* TPlatformSiegeFlagAllyRankInfo::default_instance_ = NULL;

TPlatformSiegeFlagAllyRankInfo* TPlatformSiegeFlagAllyRankInfo::New() const {
  return new TPlatformSiegeFlagAllyRankInfo;
}

void TPlatformSiegeFlagAllyRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformSiegeFlagAllyRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(score_, rank_);
    if (has_allyinfo()) {
      if (allyinfo_ != NULL) allyinfo_->::pb::TAllianceSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagAllyRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagAllyRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAllianceSimpleInfo AllyInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_allyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 2;
      case 2: {
        if (tag == 16) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 3;
      case 3: {
        if (tag == 24) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagAllyRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagAllyRankInfo)
  return false;
#undef DO_
}

void TPlatformSiegeFlagAllyRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagAllyRankInfo)
  // optional .pb.TAllianceSimpleInfo AllyInfo = 1;
  if (has_allyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allyinfo(), output);
  }

  // optional uint32 Score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // optional uint32 Rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagAllyRankInfo)
}

::google::protobuf::uint8* TPlatformSiegeFlagAllyRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagAllyRankInfo)
  // optional .pb.TAllianceSimpleInfo AllyInfo = 1;
  if (has_allyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allyinfo(), target);
  }

  // optional uint32 Score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // optional uint32 Rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagAllyRankInfo)
  return target;
}

int TPlatformSiegeFlagAllyRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAllianceSimpleInfo AllyInfo = 1;
    if (has_allyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->allyinfo());
    }

    // optional uint32 Score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 Rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagAllyRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagAllyRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagAllyRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagAllyRankInfo::MergeFrom(const TPlatformSiegeFlagAllyRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allyinfo()) {
      mutable_allyinfo()->::pb::TAllianceSimpleInfo::MergeFrom(from.allyinfo());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagAllyRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagAllyRankInfo::CopyFrom(const TPlatformSiegeFlagAllyRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagAllyRankInfo::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagAllyRankInfo::Swap(TPlatformSiegeFlagAllyRankInfo* other) {
  if (other != this) {
    std::swap(allyinfo_, other->allyinfo_);
    std::swap(score_, other->score_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagAllyRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagAllyRankInfo_descriptor_;
  metadata.reflection = TPlatformSiegeFlagAllyRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagGetAllyRankReq::kOffsetFieldNumber;
const int TPlatformSiegeFlagGetAllyRankReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagGetAllyRankReq::TPlatformSiegeFlagGetAllyRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagGetAllyRankReq)
}

void TPlatformSiegeFlagGetAllyRankReq::InitAsDefaultInstance() {
}

TPlatformSiegeFlagGetAllyRankReq::TPlatformSiegeFlagGetAllyRankReq(const TPlatformSiegeFlagGetAllyRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagGetAllyRankReq)
}

void TPlatformSiegeFlagGetAllyRankReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagGetAllyRankReq::~TPlatformSiegeFlagGetAllyRankReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagGetAllyRankReq)
  SharedDtor();
}

void TPlatformSiegeFlagGetAllyRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformSiegeFlagGetAllyRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagGetAllyRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagGetAllyRankReq_descriptor_;
}

const TPlatformSiegeFlagGetAllyRankReq& TPlatformSiegeFlagGetAllyRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagGetAllyRankReq* TPlatformSiegeFlagGetAllyRankReq::default_instance_ = NULL;

TPlatformSiegeFlagGetAllyRankReq* TPlatformSiegeFlagGetAllyRankReq::New() const {
  return new TPlatformSiegeFlagGetAllyRankReq;
}

void TPlatformSiegeFlagGetAllyRankReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformSiegeFlagGetAllyRankReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagGetAllyRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagGetAllyRankReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagGetAllyRankReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagGetAllyRankReq)
  return false;
#undef DO_
}

void TPlatformSiegeFlagGetAllyRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagGetAllyRankReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagGetAllyRankReq)
}

::google::protobuf::uint8* TPlatformSiegeFlagGetAllyRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagGetAllyRankReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagGetAllyRankReq)
  return target;
}

int TPlatformSiegeFlagGetAllyRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagGetAllyRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagGetAllyRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagGetAllyRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagGetAllyRankReq::MergeFrom(const TPlatformSiegeFlagGetAllyRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagGetAllyRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagGetAllyRankReq::CopyFrom(const TPlatformSiegeFlagGetAllyRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagGetAllyRankReq::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagGetAllyRankReq::Swap(TPlatformSiegeFlagGetAllyRankReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagGetAllyRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagGetAllyRankReq_descriptor_;
  metadata.reflection = TPlatformSiegeFlagGetAllyRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagGetAllyRankRsp::kRankArrFieldNumber;
const int TPlatformSiegeFlagGetAllyRankRsp::kScoreFieldNumber;
const int TPlatformSiegeFlagGetAllyRankRsp::kRankFieldNumber;
const int TPlatformSiegeFlagGetAllyRankRsp::kLeaderUidFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagGetAllyRankRsp::TPlatformSiegeFlagGetAllyRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagGetAllyRankRsp)
}

void TPlatformSiegeFlagGetAllyRankRsp::InitAsDefaultInstance() {
}

TPlatformSiegeFlagGetAllyRankRsp::TPlatformSiegeFlagGetAllyRankRsp(const TPlatformSiegeFlagGetAllyRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagGetAllyRankRsp)
}

void TPlatformSiegeFlagGetAllyRankRsp::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  rank_ = 0u;
  leaderuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagGetAllyRankRsp::~TPlatformSiegeFlagGetAllyRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagGetAllyRankRsp)
  SharedDtor();
}

void TPlatformSiegeFlagGetAllyRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformSiegeFlagGetAllyRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagGetAllyRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagGetAllyRankRsp_descriptor_;
}

const TPlatformSiegeFlagGetAllyRankRsp& TPlatformSiegeFlagGetAllyRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagGetAllyRankRsp* TPlatformSiegeFlagGetAllyRankRsp::default_instance_ = NULL;

TPlatformSiegeFlagGetAllyRankRsp* TPlatformSiegeFlagGetAllyRankRsp::New() const {
  return new TPlatformSiegeFlagGetAllyRankRsp;
}

void TPlatformSiegeFlagGetAllyRankRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformSiegeFlagGetAllyRankRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(score_, leaderuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagGetAllyRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagGetAllyRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPlatformSiegeFlagAllyRankInfo RankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankArr;
        if (input->ExpectTag(16)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 2;
      case 2: {
        if (tag == 16) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 3;
      case 3: {
        if (tag == 24) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_LeaderUid;
        break;
      }

      // optional uint64 LeaderUid = 4;
      case 4: {
        if (tag == 32) {
         parse_LeaderUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderuid_)));
          set_has_leaderuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagGetAllyRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagGetAllyRankRsp)
  return false;
#undef DO_
}

void TPlatformSiegeFlagGetAllyRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagGetAllyRankRsp)
  // repeated .pb.TPlatformSiegeFlagAllyRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankarr(i), output);
  }

  // optional uint32 Score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // optional uint32 Rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // optional uint64 LeaderUid = 4;
  if (has_leaderuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->leaderuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagGetAllyRankRsp)
}

::google::protobuf::uint8* TPlatformSiegeFlagGetAllyRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagGetAllyRankRsp)
  // repeated .pb.TPlatformSiegeFlagAllyRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankarr(i), target);
  }

  // optional uint32 Score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // optional uint32 Rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // optional uint64 LeaderUid = 4;
  if (has_leaderuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->leaderuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagGetAllyRankRsp)
  return target;
}

int TPlatformSiegeFlagGetAllyRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 Score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 Rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint64 LeaderUid = 4;
    if (has_leaderuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderuid());
    }

  }
  // repeated .pb.TPlatformSiegeFlagAllyRankInfo RankArr = 1;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagGetAllyRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagGetAllyRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagGetAllyRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagGetAllyRankRsp::MergeFrom(const TPlatformSiegeFlagGetAllyRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankarr_.MergeFrom(from.rankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_leaderuid()) {
      set_leaderuid(from.leaderuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagGetAllyRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagGetAllyRankRsp::CopyFrom(const TPlatformSiegeFlagGetAllyRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagGetAllyRankRsp::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagGetAllyRankRsp::Swap(TPlatformSiegeFlagGetAllyRankRsp* other) {
  if (other != this) {
    rankarr_.Swap(&other->rankarr_);
    std::swap(score_, other->score_);
    std::swap(rank_, other->rank_);
    std::swap(leaderuid_, other->leaderuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagGetAllyRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagGetAllyRankRsp_descriptor_;
  metadata.reflection = TPlatformSiegeFlagGetAllyRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagUserRankInfo::kUidFieldNumber;
const int TPlatformSiegeFlagUserRankInfo::kUnameFieldNumber;
const int TPlatformSiegeFlagUserRankInfo::kImageHtidFieldNumber;
const int TPlatformSiegeFlagUserRankInfo::kImageFrameTidFieldNumber;
const int TPlatformSiegeFlagUserRankInfo::kTitleFieldNumber;
const int TPlatformSiegeFlagUserRankInfo::kRankFieldNumber;
const int TPlatformSiegeFlagUserRankInfo::kScoreFieldNumber;
const int TPlatformSiegeFlagUserRankInfo::kKillNumFieldNumber;
const int TPlatformSiegeFlagUserRankInfo::kDevoteFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagUserRankInfo::TPlatformSiegeFlagUserRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagUserRankInfo)
}

void TPlatformSiegeFlagUserRankInfo::InitAsDefaultInstance() {
}

TPlatformSiegeFlagUserRankInfo::TPlatformSiegeFlagUserRankInfo(const TPlatformSiegeFlagUserRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagUserRankInfo)
}

void TPlatformSiegeFlagUserRankInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagehtid_ = 0u;
  imageframetid_ = 0u;
  title_ = 0u;
  rank_ = 0u;
  score_ = 0u;
  killnum_ = 0u;
  devote_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagUserRankInfo::~TPlatformSiegeFlagUserRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagUserRankInfo)
  SharedDtor();
}

void TPlatformSiegeFlagUserRankInfo::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (this != default_instance_) {
  }
}

void TPlatformSiegeFlagUserRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagUserRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagUserRankInfo_descriptor_;
}

const TPlatformSiegeFlagUserRankInfo& TPlatformSiegeFlagUserRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagUserRankInfo* TPlatformSiegeFlagUserRankInfo::default_instance_ = NULL;

TPlatformSiegeFlagUserRankInfo* TPlatformSiegeFlagUserRankInfo::New() const {
  return new TPlatformSiegeFlagUserRankInfo;
}

void TPlatformSiegeFlagUserRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformSiegeFlagUserRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(imagehtid_, killnum_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
  }
  devote_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagUserRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagUserRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Uname;
        break;
      }

      // optional string Uname = 2;
      case 2: {
        if (tag == 18) {
         parse_Uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ImageHtid;
        break;
      }

      // optional uint32 ImageHtid = 3;
      case 3: {
        if (tag == 24) {
         parse_ImageHtid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagehtid_)));
          set_has_imagehtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ImageFrameTid;
        break;
      }

      // optional uint32 ImageFrameTid = 4;
      case 4: {
        if (tag == 32) {
         parse_ImageFrameTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imageframetid_)));
          set_has_imageframetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Title;
        break;
      }

      // optional uint32 Title = 5;
      case 5: {
        if (tag == 40) {
         parse_Title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 10;
      case 10: {
        if (tag == 80) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 11;
      case 11: {
        if (tag == 88) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_KillNum;
        break;
      }

      // optional uint32 KillNum = 12;
      case 12: {
        if (tag == 96) {
         parse_KillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_Devote;
        break;
      }

      // optional uint32 Devote = 13;
      case 13: {
        if (tag == 104) {
         parse_Devote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devote_)));
          set_has_devote();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagUserRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagUserRankInfo)
  return false;
#undef DO_
}

void TPlatformSiegeFlagUserRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagUserRankInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uname(), output);
  }

  // optional uint32 ImageHtid = 3;
  if (has_imagehtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->imagehtid(), output);
  }

  // optional uint32 ImageFrameTid = 4;
  if (has_imageframetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->imageframetid(), output);
  }

  // optional uint32 Title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->title(), output);
  }

  // optional uint32 Rank = 10;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->rank(), output);
  }

  // optional uint32 Score = 11;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->score(), output);
  }

  // optional uint32 KillNum = 12;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->killnum(), output);
  }

  // optional uint32 Devote = 13;
  if (has_devote()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->devote(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagUserRankInfo)
}

::google::protobuf::uint8* TPlatformSiegeFlagUserRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagUserRankInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uname(), target);
  }

  // optional uint32 ImageHtid = 3;
  if (has_imagehtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->imagehtid(), target);
  }

  // optional uint32 ImageFrameTid = 4;
  if (has_imageframetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->imageframetid(), target);
  }

  // optional uint32 Title = 5;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->title(), target);
  }

  // optional uint32 Rank = 10;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->rank(), target);
  }

  // optional uint32 Score = 11;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->score(), target);
  }

  // optional uint32 KillNum = 12;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->killnum(), target);
  }

  // optional uint32 Devote = 13;
  if (has_devote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->devote(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagUserRankInfo)
  return target;
}

int TPlatformSiegeFlagUserRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string Uname = 2;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint32 ImageHtid = 3;
    if (has_imagehtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imagehtid());
    }

    // optional uint32 ImageFrameTid = 4;
    if (has_imageframetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imageframetid());
    }

    // optional uint32 Title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->title());
    }

    // optional uint32 Rank = 10;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 Score = 11;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 KillNum = 12;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Devote = 13;
    if (has_devote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->devote());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagUserRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagUserRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagUserRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagUserRankInfo::MergeFrom(const TPlatformSiegeFlagUserRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_imagehtid()) {
      set_imagehtid(from.imagehtid());
    }
    if (from.has_imageframetid()) {
      set_imageframetid(from.imageframetid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_devote()) {
      set_devote(from.devote());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagUserRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagUserRankInfo::CopyFrom(const TPlatformSiegeFlagUserRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagUserRankInfo::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagUserRankInfo::Swap(TPlatformSiegeFlagUserRankInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(uname_, other->uname_);
    std::swap(imagehtid_, other->imagehtid_);
    std::swap(imageframetid_, other->imageframetid_);
    std::swap(title_, other->title_);
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(killnum_, other->killnum_);
    std::swap(devote_, other->devote_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagUserRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagUserRankInfo_descriptor_;
  metadata.reflection = TPlatformSiegeFlagUserRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagGetRankListReq::kOffsetFieldNumber;
const int TPlatformSiegeFlagGetRankListReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagGetRankListReq::TPlatformSiegeFlagGetRankListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagGetRankListReq)
}

void TPlatformSiegeFlagGetRankListReq::InitAsDefaultInstance() {
}

TPlatformSiegeFlagGetRankListReq::TPlatformSiegeFlagGetRankListReq(const TPlatformSiegeFlagGetRankListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagGetRankListReq)
}

void TPlatformSiegeFlagGetRankListReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagGetRankListReq::~TPlatformSiegeFlagGetRankListReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagGetRankListReq)
  SharedDtor();
}

void TPlatformSiegeFlagGetRankListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformSiegeFlagGetRankListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagGetRankListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagGetRankListReq_descriptor_;
}

const TPlatformSiegeFlagGetRankListReq& TPlatformSiegeFlagGetRankListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagGetRankListReq* TPlatformSiegeFlagGetRankListReq::default_instance_ = NULL;

TPlatformSiegeFlagGetRankListReq* TPlatformSiegeFlagGetRankListReq::New() const {
  return new TPlatformSiegeFlagGetRankListReq;
}

void TPlatformSiegeFlagGetRankListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformSiegeFlagGetRankListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagGetRankListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagGetRankListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagGetRankListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagGetRankListReq)
  return false;
#undef DO_
}

void TPlatformSiegeFlagGetRankListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagGetRankListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagGetRankListReq)
}

::google::protobuf::uint8* TPlatformSiegeFlagGetRankListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagGetRankListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagGetRankListReq)
  return target;
}

int TPlatformSiegeFlagGetRankListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagGetRankListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagGetRankListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagGetRankListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagGetRankListReq::MergeFrom(const TPlatformSiegeFlagGetRankListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagGetRankListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagGetRankListReq::CopyFrom(const TPlatformSiegeFlagGetRankListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagGetRankListReq::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagGetRankListReq::Swap(TPlatformSiegeFlagGetRankListReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagGetRankListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagGetRankListReq_descriptor_;
  metadata.reflection = TPlatformSiegeFlagGetRankListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagGetRankListRsp::kRankArrFieldNumber;
const int TPlatformSiegeFlagGetRankListRsp::kRankFieldNumber;
const int TPlatformSiegeFlagGetRankListRsp::kScoreFieldNumber;
const int TPlatformSiegeFlagGetRankListRsp::kKillCntFieldNumber;
const int TPlatformSiegeFlagGetRankListRsp::kDevoteFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagGetRankListRsp::TPlatformSiegeFlagGetRankListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagGetRankListRsp)
}

void TPlatformSiegeFlagGetRankListRsp::InitAsDefaultInstance() {
}

TPlatformSiegeFlagGetRankListRsp::TPlatformSiegeFlagGetRankListRsp(const TPlatformSiegeFlagGetRankListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagGetRankListRsp)
}

void TPlatformSiegeFlagGetRankListRsp::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  score_ = 0u;
  killcnt_ = 0u;
  devote_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagGetRankListRsp::~TPlatformSiegeFlagGetRankListRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagGetRankListRsp)
  SharedDtor();
}

void TPlatformSiegeFlagGetRankListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformSiegeFlagGetRankListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagGetRankListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagGetRankListRsp_descriptor_;
}

const TPlatformSiegeFlagGetRankListRsp& TPlatformSiegeFlagGetRankListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagGetRankListRsp* TPlatformSiegeFlagGetRankListRsp::default_instance_ = NULL;

TPlatformSiegeFlagGetRankListRsp* TPlatformSiegeFlagGetRankListRsp::New() const {
  return new TPlatformSiegeFlagGetRankListRsp;
}

void TPlatformSiegeFlagGetRankListRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformSiegeFlagGetRankListRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rank_, devote_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagGetRankListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagGetRankListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPlatformSiegeFlagUserRankInfo RankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankArr;
        if (input->ExpectTag(16)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 2;
      case 2: {
        if (tag == 16) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 3;
      case 3: {
        if (tag == 24) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_KillCnt;
        break;
      }

      // optional uint32 KillCnt = 4;
      case 4: {
        if (tag == 32) {
         parse_KillCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killcnt_)));
          set_has_killcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Devote;
        break;
      }

      // optional uint32 Devote = 5;
      case 5: {
        if (tag == 40) {
         parse_Devote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devote_)));
          set_has_devote();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagGetRankListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagGetRankListRsp)
  return false;
#undef DO_
}

void TPlatformSiegeFlagGetRankListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagGetRankListRsp)
  // repeated .pb.TPlatformSiegeFlagUserRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankarr(i), output);
  }

  // optional uint32 Rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // optional uint32 Score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  // optional uint32 KillCnt = 4;
  if (has_killcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->killcnt(), output);
  }

  // optional uint32 Devote = 5;
  if (has_devote()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->devote(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagGetRankListRsp)
}

::google::protobuf::uint8* TPlatformSiegeFlagGetRankListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagGetRankListRsp)
  // repeated .pb.TPlatformSiegeFlagUserRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankarr(i), target);
  }

  // optional uint32 Rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // optional uint32 Score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  // optional uint32 KillCnt = 4;
  if (has_killcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->killcnt(), target);
  }

  // optional uint32 Devote = 5;
  if (has_devote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->devote(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagGetRankListRsp)
  return target;
}

int TPlatformSiegeFlagGetRankListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 Rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 Score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 KillCnt = 4;
    if (has_killcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killcnt());
    }

    // optional uint32 Devote = 5;
    if (has_devote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->devote());
    }

  }
  // repeated .pb.TPlatformSiegeFlagUserRankInfo RankArr = 1;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagGetRankListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagGetRankListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagGetRankListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagGetRankListRsp::MergeFrom(const TPlatformSiegeFlagGetRankListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankarr_.MergeFrom(from.rankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_killcnt()) {
      set_killcnt(from.killcnt());
    }
    if (from.has_devote()) {
      set_devote(from.devote());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagGetRankListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagGetRankListRsp::CopyFrom(const TPlatformSiegeFlagGetRankListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagGetRankListRsp::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagGetRankListRsp::Swap(TPlatformSiegeFlagGetRankListRsp* other) {
  if (other != this) {
    rankarr_.Swap(&other->rankarr_);
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(killcnt_, other->killcnt_);
    std::swap(devote_, other->devote_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagGetRankListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagGetRankListRsp_descriptor_;
  metadata.reflection = TPlatformSiegeFlagGetRankListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagBuyInfo::kIdFieldNumber;
const int TPlatformSiegeFlagBuyInfo::kBuyNumFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagBuyInfo::TPlatformSiegeFlagBuyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagBuyInfo)
}

void TPlatformSiegeFlagBuyInfo::InitAsDefaultInstance() {
}

TPlatformSiegeFlagBuyInfo::TPlatformSiegeFlagBuyInfo(const TPlatformSiegeFlagBuyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagBuyInfo)
}

void TPlatformSiegeFlagBuyInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagBuyInfo::~TPlatformSiegeFlagBuyInfo() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagBuyInfo)
  SharedDtor();
}

void TPlatformSiegeFlagBuyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformSiegeFlagBuyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagBuyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagBuyInfo_descriptor_;
}

const TPlatformSiegeFlagBuyInfo& TPlatformSiegeFlagBuyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagBuyInfo* TPlatformSiegeFlagBuyInfo::default_instance_ = NULL;

TPlatformSiegeFlagBuyInfo* TPlatformSiegeFlagBuyInfo::New() const {
  return new TPlatformSiegeFlagBuyInfo;
}

void TPlatformSiegeFlagBuyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformSiegeFlagBuyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, buynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagBuyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagBuyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyNum;
        break;
      }

      // optional uint32 BuyNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagBuyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagBuyInfo)
  return false;
#undef DO_
}

void TPlatformSiegeFlagBuyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagBuyInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagBuyInfo)
}

::google::protobuf::uint8* TPlatformSiegeFlagBuyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagBuyInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagBuyInfo)
  return target;
}

int TPlatformSiegeFlagBuyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 BuyNum = 2;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagBuyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagBuyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagBuyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagBuyInfo::MergeFrom(const TPlatformSiegeFlagBuyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagBuyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagBuyInfo::CopyFrom(const TPlatformSiegeFlagBuyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagBuyInfo::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagBuyInfo::Swap(TPlatformSiegeFlagBuyInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagBuyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagBuyInfo_descriptor_;
  metadata.reflection = TPlatformSiegeFlagBuyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagServerGetInfoRsp::kCanEnterFieldNumber;
const int TPlatformSiegeFlagServerGetInfoRsp::kArrInfoFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagServerGetInfoRsp::TPlatformSiegeFlagServerGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagServerGetInfoRsp)
}

void TPlatformSiegeFlagServerGetInfoRsp::InitAsDefaultInstance() {
}

TPlatformSiegeFlagServerGetInfoRsp::TPlatformSiegeFlagServerGetInfoRsp(const TPlatformSiegeFlagServerGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagServerGetInfoRsp)
}

void TPlatformSiegeFlagServerGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  canenter_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagServerGetInfoRsp::~TPlatformSiegeFlagServerGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagServerGetInfoRsp)
  SharedDtor();
}

void TPlatformSiegeFlagServerGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformSiegeFlagServerGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagServerGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagServerGetInfoRsp_descriptor_;
}

const TPlatformSiegeFlagServerGetInfoRsp& TPlatformSiegeFlagServerGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagServerGetInfoRsp* TPlatformSiegeFlagServerGetInfoRsp::default_instance_ = NULL;

TPlatformSiegeFlagServerGetInfoRsp* TPlatformSiegeFlagServerGetInfoRsp::New() const {
  return new TPlatformSiegeFlagServerGetInfoRsp;
}

void TPlatformSiegeFlagServerGetInfoRsp::Clear() {
  canenter_ = false;
  arrinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagServerGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagServerGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool CanEnter = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canenter_)));
          set_has_canenter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrInfo;
        break;
      }

      // repeated .pb.TPlatformSiegeFlagBuyInfo ArrInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagServerGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagServerGetInfoRsp)
  return false;
#undef DO_
}

void TPlatformSiegeFlagServerGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagServerGetInfoRsp)
  // optional bool CanEnter = 1;
  if (has_canenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->canenter(), output);
  }

  // repeated .pb.TPlatformSiegeFlagBuyInfo ArrInfo = 2;
  for (int i = 0; i < this->arrinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagServerGetInfoRsp)
}

::google::protobuf::uint8* TPlatformSiegeFlagServerGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagServerGetInfoRsp)
  // optional bool CanEnter = 1;
  if (has_canenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->canenter(), target);
  }

  // repeated .pb.TPlatformSiegeFlagBuyInfo ArrInfo = 2;
  for (int i = 0; i < this->arrinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagServerGetInfoRsp)
  return target;
}

int TPlatformSiegeFlagServerGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool CanEnter = 1;
    if (has_canenter()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb.TPlatformSiegeFlagBuyInfo ArrInfo = 2;
  total_size += 1 * this->arrinfo_size();
  for (int i = 0; i < this->arrinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagServerGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagServerGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagServerGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagServerGetInfoRsp::MergeFrom(const TPlatformSiegeFlagServerGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrinfo_.MergeFrom(from.arrinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_canenter()) {
      set_canenter(from.canenter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagServerGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagServerGetInfoRsp::CopyFrom(const TPlatformSiegeFlagServerGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagServerGetInfoRsp::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagServerGetInfoRsp::Swap(TPlatformSiegeFlagServerGetInfoRsp* other) {
  if (other != this) {
    std::swap(canenter_, other->canenter_);
    arrinfo_.Swap(&other->arrinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagServerGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagServerGetInfoRsp_descriptor_;
  metadata.reflection = TPlatformSiegeFlagServerGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagServerBuyGoodsReq::kIdFieldNumber;
const int TPlatformSiegeFlagServerBuyGoodsReq::kNumFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagServerBuyGoodsReq::TPlatformSiegeFlagServerBuyGoodsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagServerBuyGoodsReq)
}

void TPlatformSiegeFlagServerBuyGoodsReq::InitAsDefaultInstance() {
}

TPlatformSiegeFlagServerBuyGoodsReq::TPlatformSiegeFlagServerBuyGoodsReq(const TPlatformSiegeFlagServerBuyGoodsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagServerBuyGoodsReq)
}

void TPlatformSiegeFlagServerBuyGoodsReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagServerBuyGoodsReq::~TPlatformSiegeFlagServerBuyGoodsReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagServerBuyGoodsReq)
  SharedDtor();
}

void TPlatformSiegeFlagServerBuyGoodsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformSiegeFlagServerBuyGoodsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagServerBuyGoodsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagServerBuyGoodsReq_descriptor_;
}

const TPlatformSiegeFlagServerBuyGoodsReq& TPlatformSiegeFlagServerBuyGoodsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagServerBuyGoodsReq* TPlatformSiegeFlagServerBuyGoodsReq::default_instance_ = NULL;

TPlatformSiegeFlagServerBuyGoodsReq* TPlatformSiegeFlagServerBuyGoodsReq::New() const {
  return new TPlatformSiegeFlagServerBuyGoodsReq;
}

void TPlatformSiegeFlagServerBuyGoodsReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformSiegeFlagServerBuyGoodsReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(num_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagServerBuyGoodsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagServerBuyGoodsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint64 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagServerBuyGoodsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagServerBuyGoodsReq)
  return false;
#undef DO_
}

void TPlatformSiegeFlagServerBuyGoodsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagServerBuyGoodsReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagServerBuyGoodsReq)
}

::google::protobuf::uint8* TPlatformSiegeFlagServerBuyGoodsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagServerBuyGoodsReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagServerBuyGoodsReq)
  return target;
}

int TPlatformSiegeFlagServerBuyGoodsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagServerBuyGoodsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagServerBuyGoodsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagServerBuyGoodsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagServerBuyGoodsReq::MergeFrom(const TPlatformSiegeFlagServerBuyGoodsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagServerBuyGoodsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagServerBuyGoodsReq::CopyFrom(const TPlatformSiegeFlagServerBuyGoodsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagServerBuyGoodsReq::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagServerBuyGoodsReq::Swap(TPlatformSiegeFlagServerBuyGoodsReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagServerBuyGoodsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagServerBuyGoodsReq_descriptor_;
  metadata.reflection = TPlatformSiegeFlagServerBuyGoodsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformSiegeFlagServerNodify::kArrInfoFieldNumber;
#endif  // !_MSC_VER

TPlatformSiegeFlagServerNodify::TPlatformSiegeFlagServerNodify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformSiegeFlagServerNodify)
}

void TPlatformSiegeFlagServerNodify::InitAsDefaultInstance() {
}

TPlatformSiegeFlagServerNodify::TPlatformSiegeFlagServerNodify(const TPlatformSiegeFlagServerNodify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformSiegeFlagServerNodify)
}

void TPlatformSiegeFlagServerNodify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformSiegeFlagServerNodify::~TPlatformSiegeFlagServerNodify() {
  // @@protoc_insertion_point(destructor:pb.TPlatformSiegeFlagServerNodify)
  SharedDtor();
}

void TPlatformSiegeFlagServerNodify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformSiegeFlagServerNodify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformSiegeFlagServerNodify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformSiegeFlagServerNodify_descriptor_;
}

const TPlatformSiegeFlagServerNodify& TPlatformSiegeFlagServerNodify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TPlatformSiegeFlagServerNodify* TPlatformSiegeFlagServerNodify::default_instance_ = NULL;

TPlatformSiegeFlagServerNodify* TPlatformSiegeFlagServerNodify::New() const {
  return new TPlatformSiegeFlagServerNodify;
}

void TPlatformSiegeFlagServerNodify::Clear() {
  arrinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformSiegeFlagServerNodify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformSiegeFlagServerNodify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPlatformSiegeFlagBuyInfo ArrInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformSiegeFlagServerNodify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformSiegeFlagServerNodify)
  return false;
#undef DO_
}

void TPlatformSiegeFlagServerNodify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformSiegeFlagServerNodify)
  // repeated .pb.TPlatformSiegeFlagBuyInfo ArrInfo = 1;
  for (int i = 0; i < this->arrinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformSiegeFlagServerNodify)
}

::google::protobuf::uint8* TPlatformSiegeFlagServerNodify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformSiegeFlagServerNodify)
  // repeated .pb.TPlatformSiegeFlagBuyInfo ArrInfo = 1;
  for (int i = 0; i < this->arrinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformSiegeFlagServerNodify)
  return target;
}

int TPlatformSiegeFlagServerNodify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TPlatformSiegeFlagBuyInfo ArrInfo = 1;
  total_size += 1 * this->arrinfo_size();
  for (int i = 0; i < this->arrinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformSiegeFlagServerNodify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformSiegeFlagServerNodify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformSiegeFlagServerNodify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformSiegeFlagServerNodify::MergeFrom(const TPlatformSiegeFlagServerNodify& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrinfo_.MergeFrom(from.arrinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformSiegeFlagServerNodify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformSiegeFlagServerNodify::CopyFrom(const TPlatformSiegeFlagServerNodify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformSiegeFlagServerNodify::IsInitialized() const {

  return true;
}

void TPlatformSiegeFlagServerNodify::Swap(TPlatformSiegeFlagServerNodify* other) {
  if (other != this) {
    arrinfo_.Swap(&other->arrinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformSiegeFlagServerNodify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformSiegeFlagServerNodify_descriptor_;
  metadata.reflection = TPlatformSiegeFlagServerNodify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSiegeFlagAllyBaseInfo::kAllyIdFieldNumber;
const int TSiegeFlagAllyBaseInfo::kLevelFieldNumber;
const int TSiegeFlagAllyBaseInfo::kNameFieldNumber;
const int TSiegeFlagAllyBaseInfo::kFightForceFieldNumber;
const int TSiegeFlagAllyBaseInfo::kBannerBaseFieldNumber;
const int TSiegeFlagAllyBaseInfo::kBannerNameFieldNumber;
const int TSiegeFlagAllyBaseInfo::kBannerFigureFieldNumber;
#endif  // !_MSC_VER

TSiegeFlagAllyBaseInfo::TSiegeFlagAllyBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSiegeFlagAllyBaseInfo)
}

void TSiegeFlagAllyBaseInfo::InitAsDefaultInstance() {
}

TSiegeFlagAllyBaseInfo::TSiegeFlagAllyBaseInfo(const TSiegeFlagAllyBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSiegeFlagAllyBaseInfo)
}

void TSiegeFlagAllyBaseInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  allyid_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fightforce_ = GOOGLE_ULONGLONG(0);
  bannerbase_ = 0u;
  bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannerfigure_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSiegeFlagAllyBaseInfo::~TSiegeFlagAllyBaseInfo() {
  // @@protoc_insertion_point(destructor:pb.TSiegeFlagAllyBaseInfo)
  SharedDtor();
}

void TSiegeFlagAllyBaseInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (this != default_instance_) {
  }
}

void TSiegeFlagAllyBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSiegeFlagAllyBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSiegeFlagAllyBaseInfo_descriptor_;
}

const TSiegeFlagAllyBaseInfo& TSiegeFlagAllyBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TSiegeFlagAllyBaseInfo* TSiegeFlagAllyBaseInfo::default_instance_ = NULL;

TSiegeFlagAllyBaseInfo* TSiegeFlagAllyBaseInfo::New() const {
  return new TSiegeFlagAllyBaseInfo;
}

void TSiegeFlagAllyBaseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSiegeFlagAllyBaseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(level_, fightforce_);
    allyid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_bannername()) {
      if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bannername_->clear();
      }
    }
    bannerfigure_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSiegeFlagAllyBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSiegeFlagAllyBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 AllyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &allyid_)));
          set_has_allyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 2;
      case 2: {
        if (tag == 16) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }

      // optional string Name = 3;
      case 3: {
        if (tag == 26) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 4;
      case 4: {
        if (tag == 32) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BannerBase;
        break;
      }

      // optional uint32 BannerBase = 5;
      case 5: {
        if (tag == 40) {
         parse_BannerBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bannerbase_)));
          set_has_bannerbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_BannerName;
        break;
      }

      // optional string BannerName = 6;
      case 6: {
        if (tag == 50) {
         parse_BannerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bannername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bannername().data(), this->bannername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bannername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_BannerFigure;
        break;
      }

      // optional uint32 BannerFigure = 7;
      case 7: {
        if (tag == 56) {
         parse_BannerFigure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bannerfigure_)));
          set_has_bannerfigure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSiegeFlagAllyBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSiegeFlagAllyBaseInfo)
  return false;
#undef DO_
}

void TSiegeFlagAllyBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSiegeFlagAllyBaseInfo)
  // optional uint64 AllyId = 1;
  if (has_allyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->allyid(), output);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint64 FightForce = 4;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fightforce(), output);
  }

  // optional uint32 BannerBase = 5;
  if (has_bannerbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bannerbase(), output);
  }

  // optional string BannerName = 6;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bannername(), output);
  }

  // optional uint32 BannerFigure = 7;
  if (has_bannerfigure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bannerfigure(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSiegeFlagAllyBaseInfo)
}

::google::protobuf::uint8* TSiegeFlagAllyBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSiegeFlagAllyBaseInfo)
  // optional uint64 AllyId = 1;
  if (has_allyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->allyid(), target);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint64 FightForce = 4;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fightforce(), target);
  }

  // optional uint32 BannerBase = 5;
  if (has_bannerbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bannerbase(), target);
  }

  // optional string BannerName = 6;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bannername(), target);
  }

  // optional uint32 BannerFigure = 7;
  if (has_bannerfigure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bannerfigure(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSiegeFlagAllyBaseInfo)
  return target;
}

int TSiegeFlagAllyBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 AllyId = 1;
    if (has_allyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->allyid());
    }

    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 FightForce = 4;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional uint32 BannerBase = 5;
    if (has_bannerbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bannerbase());
    }

    // optional string BannerName = 6;
    if (has_bannername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bannername());
    }

    // optional uint32 BannerFigure = 7;
    if (has_bannerfigure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bannerfigure());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSiegeFlagAllyBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSiegeFlagAllyBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSiegeFlagAllyBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSiegeFlagAllyBaseInfo::MergeFrom(const TSiegeFlagAllyBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allyid()) {
      set_allyid(from.allyid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_bannerbase()) {
      set_bannerbase(from.bannerbase());
    }
    if (from.has_bannername()) {
      set_bannername(from.bannername());
    }
    if (from.has_bannerfigure()) {
      set_bannerfigure(from.bannerfigure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSiegeFlagAllyBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSiegeFlagAllyBaseInfo::CopyFrom(const TSiegeFlagAllyBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSiegeFlagAllyBaseInfo::IsInitialized() const {

  return true;
}

void TSiegeFlagAllyBaseInfo::Swap(TSiegeFlagAllyBaseInfo* other) {
  if (other != this) {
    std::swap(allyid_, other->allyid_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(bannerbase_, other->bannerbase_);
    std::swap(bannername_, other->bannername_);
    std::swap(bannerfigure_, other->bannerfigure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSiegeFlagAllyBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSiegeFlagAllyBaseInfo_descriptor_;
  metadata.reflection = TSiegeFlagAllyBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSiegeFlagUserBaseInfo::kUidFieldNumber;
const int TSiegeFlagUserBaseInfo::kServerIdFieldNumber;
const int TSiegeFlagUserBaseInfo::kPostFieldNumber;
const int TSiegeFlagUserBaseInfo::kUserInfoFieldNumber;
#endif  // !_MSC_VER

TSiegeFlagUserBaseInfo::TSiegeFlagUserBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSiegeFlagUserBaseInfo)
}

void TSiegeFlagUserBaseInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TSiegeFlagUserBaseInfo::TSiegeFlagUserBaseInfo(const TSiegeFlagUserBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSiegeFlagUserBaseInfo)
}

void TSiegeFlagUserBaseInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  post_ = 0;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSiegeFlagUserBaseInfo::~TSiegeFlagUserBaseInfo() {
  // @@protoc_insertion_point(destructor:pb.TSiegeFlagUserBaseInfo)
  SharedDtor();
}

void TSiegeFlagUserBaseInfo::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TSiegeFlagUserBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSiegeFlagUserBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSiegeFlagUserBaseInfo_descriptor_;
}

const TSiegeFlagUserBaseInfo& TSiegeFlagUserBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TSiegeFlagUserBaseInfo* TSiegeFlagUserBaseInfo::default_instance_ = NULL;

TSiegeFlagUserBaseInfo* TSiegeFlagUserBaseInfo::New() const {
  return new TSiegeFlagUserBaseInfo;
}

void TSiegeFlagUserBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
    post_ = 0;
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSiegeFlagUserBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSiegeFlagUserBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Post;
        break;
      }

      // optional .pb.EAlliancePost Post = 3;
      case 3: {
        if (tag == 24) {
         parse_Post:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAlliancePost_IsValid(value)) {
            set_post(static_cast< ::pb::EAlliancePost >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo UserInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSiegeFlagUserBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSiegeFlagUserBaseInfo)
  return false;
#undef DO_
}

void TSiegeFlagUserBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSiegeFlagUserBaseInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  // optional .pb.EAlliancePost Post = 3;
  if (has_post()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->post(), output);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 4;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSiegeFlagUserBaseInfo)
}

::google::protobuf::uint8* TSiegeFlagUserBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSiegeFlagUserBaseInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  // optional .pb.EAlliancePost Post = 3;
  if (has_post()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->post(), target);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 4;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSiegeFlagUserBaseInfo)
  return target;
}

int TSiegeFlagUserBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional .pb.EAlliancePost Post = 3;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->post());
    }

    // optional .pb.TUserSimpleInfo UserInfo = 4;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSiegeFlagUserBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSiegeFlagUserBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSiegeFlagUserBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSiegeFlagUserBaseInfo::MergeFrom(const TSiegeFlagUserBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_post()) {
      set_post(from.post());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSiegeFlagUserBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSiegeFlagUserBaseInfo::CopyFrom(const TSiegeFlagUserBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSiegeFlagUserBaseInfo::IsInitialized() const {

  return true;
}

void TSiegeFlagUserBaseInfo::Swap(TSiegeFlagUserBaseInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(serverid_, other->serverid_);
    std::swap(post_, other->post_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSiegeFlagUserBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSiegeFlagUserBaseInfo_descriptor_;
  metadata.reflection = TSiegeFlagUserBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSiegeFlagGuildContriInfo::kGidFieldNumber;
const int TSiegeFlagGuildContriInfo::kServerIdFieldNumber;
const int TSiegeFlagGuildContriInfo::kContriNumFieldNumber;
const int TSiegeFlagGuildContriInfo::kGuildInfoFieldNumber;
#endif  // !_MSC_VER

TSiegeFlagGuildContriInfo::TSiegeFlagGuildContriInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSiegeFlagGuildContriInfo)
}

void TSiegeFlagGuildContriInfo::InitAsDefaultInstance() {
  guildinfo_ = const_cast< ::pb::TAllianceGuildMemberInfo*>(&::pb::TAllianceGuildMemberInfo::default_instance());
}

TSiegeFlagGuildContriInfo::TSiegeFlagGuildContriInfo(const TSiegeFlagGuildContriInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSiegeFlagGuildContriInfo)
}

void TSiegeFlagGuildContriInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gid_ = GOOGLE_ULONGLONG(0);
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contrinum_ = 0u;
  guildinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSiegeFlagGuildContriInfo::~TSiegeFlagGuildContriInfo() {
  // @@protoc_insertion_point(destructor:pb.TSiegeFlagGuildContriInfo)
  SharedDtor();
}

void TSiegeFlagGuildContriInfo::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
    delete guildinfo_;
  }
}

void TSiegeFlagGuildContriInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSiegeFlagGuildContriInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSiegeFlagGuildContriInfo_descriptor_;
}

const TSiegeFlagGuildContriInfo& TSiegeFlagGuildContriInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TSiegeFlagGuildContriInfo* TSiegeFlagGuildContriInfo::default_instance_ = NULL;

TSiegeFlagGuildContriInfo* TSiegeFlagGuildContriInfo::New() const {
  return new TSiegeFlagGuildContriInfo;
}

void TSiegeFlagGuildContriInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    gid_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
    contrinum_ = 0u;
    if (has_guildinfo()) {
      if (guildinfo_ != NULL) guildinfo_->::pb::TAllianceGuildMemberInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSiegeFlagGuildContriInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSiegeFlagGuildContriInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Gid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ContriNum;
        break;
      }

      // optional uint32 ContriNum = 3;
      case 3: {
        if (tag == 24) {
         parse_ContriNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contrinum_)));
          set_has_contrinum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_GuildInfo;
        break;
      }

      // optional .pb.TAllianceGuildMemberInfo GuildInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_GuildInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSiegeFlagGuildContriInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSiegeFlagGuildContriInfo)
  return false;
#undef DO_
}

void TSiegeFlagGuildContriInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSiegeFlagGuildContriInfo)
  // optional uint64 Gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gid(), output);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  // optional uint32 ContriNum = 3;
  if (has_contrinum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->contrinum(), output);
  }

  // optional .pb.TAllianceGuildMemberInfo GuildInfo = 4;
  if (has_guildinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->guildinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSiegeFlagGuildContriInfo)
}

::google::protobuf::uint8* TSiegeFlagGuildContriInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSiegeFlagGuildContriInfo)
  // optional uint64 Gid = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gid(), target);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  // optional uint32 ContriNum = 3;
  if (has_contrinum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->contrinum(), target);
  }

  // optional .pb.TAllianceGuildMemberInfo GuildInfo = 4;
  if (has_guildinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->guildinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSiegeFlagGuildContriInfo)
  return target;
}

int TSiegeFlagGuildContriInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid());
    }

    // optional string ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional uint32 ContriNum = 3;
    if (has_contrinum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contrinum());
    }

    // optional .pb.TAllianceGuildMemberInfo GuildInfo = 4;
    if (has_guildinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSiegeFlagGuildContriInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSiegeFlagGuildContriInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSiegeFlagGuildContriInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSiegeFlagGuildContriInfo::MergeFrom(const TSiegeFlagGuildContriInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_contrinum()) {
      set_contrinum(from.contrinum());
    }
    if (from.has_guildinfo()) {
      mutable_guildinfo()->::pb::TAllianceGuildMemberInfo::MergeFrom(from.guildinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSiegeFlagGuildContriInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSiegeFlagGuildContriInfo::CopyFrom(const TSiegeFlagGuildContriInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSiegeFlagGuildContriInfo::IsInitialized() const {

  return true;
}

void TSiegeFlagGuildContriInfo::Swap(TSiegeFlagGuildContriInfo* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(serverid_, other->serverid_);
    std::swap(contrinum_, other->contrinum_);
    std::swap(guildinfo_, other->guildinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSiegeFlagGuildContriInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSiegeFlagGuildContriInfo_descriptor_;
  metadata.reflection = TSiegeFlagGuildContriInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSiegeFlagAllianceSimpleInfoWithUser::kAllianceSimpleInfoFieldNumber;
const int TSiegeFlagAllianceSimpleInfoWithUser::kArrUserBaseInfoFieldNumber;
#endif  // !_MSC_VER

TSiegeFlagAllianceSimpleInfoWithUser::TSiegeFlagAllianceSimpleInfoWithUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSiegeFlagAllianceSimpleInfoWithUser)
}

void TSiegeFlagAllianceSimpleInfoWithUser::InitAsDefaultInstance() {
  alliancesimpleinfo_ = const_cast< ::pb::TAllianceSimpleInfo*>(&::pb::TAllianceSimpleInfo::default_instance());
}

TSiegeFlagAllianceSimpleInfoWithUser::TSiegeFlagAllianceSimpleInfoWithUser(const TSiegeFlagAllianceSimpleInfoWithUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSiegeFlagAllianceSimpleInfoWithUser)
}

void TSiegeFlagAllianceSimpleInfoWithUser::SharedCtor() {
  _cached_size_ = 0;
  alliancesimpleinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSiegeFlagAllianceSimpleInfoWithUser::~TSiegeFlagAllianceSimpleInfoWithUser() {
  // @@protoc_insertion_point(destructor:pb.TSiegeFlagAllianceSimpleInfoWithUser)
  SharedDtor();
}

void TSiegeFlagAllianceSimpleInfoWithUser::SharedDtor() {
  if (this != default_instance_) {
    delete alliancesimpleinfo_;
  }
}

void TSiegeFlagAllianceSimpleInfoWithUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSiegeFlagAllianceSimpleInfoWithUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSiegeFlagAllianceSimpleInfoWithUser_descriptor_;
}

const TSiegeFlagAllianceSimpleInfoWithUser& TSiegeFlagAllianceSimpleInfoWithUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TSiegeFlagAllianceSimpleInfoWithUser* TSiegeFlagAllianceSimpleInfoWithUser::default_instance_ = NULL;

TSiegeFlagAllianceSimpleInfoWithUser* TSiegeFlagAllianceSimpleInfoWithUser::New() const {
  return new TSiegeFlagAllianceSimpleInfoWithUser;
}

void TSiegeFlagAllianceSimpleInfoWithUser::Clear() {
  if (has_alliancesimpleinfo()) {
    if (alliancesimpleinfo_ != NULL) alliancesimpleinfo_->::pb::TAllianceSimpleInfo::Clear();
  }
  arruserbaseinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSiegeFlagAllianceSimpleInfoWithUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSiegeFlagAllianceSimpleInfoWithUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliancesimpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrUserBaseInfo;
        break;
      }

      // repeated .pb.TSiegeFlagUserBaseInfo ArrUserBaseInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrUserBaseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arruserbaseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrUserBaseInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSiegeFlagAllianceSimpleInfoWithUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSiegeFlagAllianceSimpleInfoWithUser)
  return false;
#undef DO_
}

void TSiegeFlagAllianceSimpleInfoWithUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSiegeFlagAllianceSimpleInfoWithUser)
  // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
  if (has_alliancesimpleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alliancesimpleinfo(), output);
  }

  // repeated .pb.TSiegeFlagUserBaseInfo ArrUserBaseInfo = 2;
  for (int i = 0; i < this->arruserbaseinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arruserbaseinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSiegeFlagAllianceSimpleInfoWithUser)
}

::google::protobuf::uint8* TSiegeFlagAllianceSimpleInfoWithUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSiegeFlagAllianceSimpleInfoWithUser)
  // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
  if (has_alliancesimpleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alliancesimpleinfo(), target);
  }

  // repeated .pb.TSiegeFlagUserBaseInfo ArrUserBaseInfo = 2;
  for (int i = 0; i < this->arruserbaseinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arruserbaseinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSiegeFlagAllianceSimpleInfoWithUser)
  return target;
}

int TSiegeFlagAllianceSimpleInfoWithUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
    if (has_alliancesimpleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliancesimpleinfo());
    }

  }
  // repeated .pb.TSiegeFlagUserBaseInfo ArrUserBaseInfo = 2;
  total_size += 1 * this->arruserbaseinfo_size();
  for (int i = 0; i < this->arruserbaseinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arruserbaseinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSiegeFlagAllianceSimpleInfoWithUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSiegeFlagAllianceSimpleInfoWithUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSiegeFlagAllianceSimpleInfoWithUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSiegeFlagAllianceSimpleInfoWithUser::MergeFrom(const TSiegeFlagAllianceSimpleInfoWithUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  arruserbaseinfo_.MergeFrom(from.arruserbaseinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alliancesimpleinfo()) {
      mutable_alliancesimpleinfo()->::pb::TAllianceSimpleInfo::MergeFrom(from.alliancesimpleinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSiegeFlagAllianceSimpleInfoWithUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSiegeFlagAllianceSimpleInfoWithUser::CopyFrom(const TSiegeFlagAllianceSimpleInfoWithUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSiegeFlagAllianceSimpleInfoWithUser::IsInitialized() const {

  return true;
}

void TSiegeFlagAllianceSimpleInfoWithUser::Swap(TSiegeFlagAllianceSimpleInfoWithUser* other) {
  if (other != this) {
    std::swap(alliancesimpleinfo_, other->alliancesimpleinfo_);
    arruserbaseinfo_.Swap(&other->arruserbaseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSiegeFlagAllianceSimpleInfoWithUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSiegeFlagAllianceSimpleInfoWithUser_descriptor_;
  metadata.reflection = TSiegeFlagAllianceSimpleInfoWithUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSiegeFlagBattleEndNodify::kTeamIdFieldNumber;
const int TSiegeFlagBattleEndNodify::kTeamScoreFieldNumber;
const int TSiegeFlagBattleEndNodify::kFieldDoneTimeFieldNumber;
#endif  // !_MSC_VER

TSiegeFlagBattleEndNodify::TSiegeFlagBattleEndNodify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSiegeFlagBattleEndNodify)
}

void TSiegeFlagBattleEndNodify::InitAsDefaultInstance() {
}

TSiegeFlagBattleEndNodify::TSiegeFlagBattleEndNodify(const TSiegeFlagBattleEndNodify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSiegeFlagBattleEndNodify)
}

void TSiegeFlagBattleEndNodify::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  teamscore_ = 0u;
  fielddonetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSiegeFlagBattleEndNodify::~TSiegeFlagBattleEndNodify() {
  // @@protoc_insertion_point(destructor:pb.TSiegeFlagBattleEndNodify)
  SharedDtor();
}

void TSiegeFlagBattleEndNodify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSiegeFlagBattleEndNodify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSiegeFlagBattleEndNodify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSiegeFlagBattleEndNodify_descriptor_;
}

const TSiegeFlagBattleEndNodify& TSiegeFlagBattleEndNodify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  return *default_instance_;
}

TSiegeFlagBattleEndNodify* TSiegeFlagBattleEndNodify::default_instance_ = NULL;

TSiegeFlagBattleEndNodify* TSiegeFlagBattleEndNodify::New() const {
  return new TSiegeFlagBattleEndNodify;
}

void TSiegeFlagBattleEndNodify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSiegeFlagBattleEndNodify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, teamscore_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSiegeFlagBattleEndNodify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSiegeFlagBattleEndNodify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamScore;
        break;
      }

      // optional uint32 TeamScore = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamscore_)));
          set_has_teamscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FieldDoneTime;
        break;
      }

      // optional uint64 FieldDoneTime = 3;
      case 3: {
        if (tag == 24) {
         parse_FieldDoneTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fielddonetime_)));
          set_has_fielddonetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSiegeFlagBattleEndNodify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSiegeFlagBattleEndNodify)
  return false;
#undef DO_
}

void TSiegeFlagBattleEndNodify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSiegeFlagBattleEndNodify)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint32 TeamScore = 2;
  if (has_teamscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamscore(), output);
  }

  // optional uint64 FieldDoneTime = 3;
  if (has_fielddonetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fielddonetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSiegeFlagBattleEndNodify)
}

::google::protobuf::uint8* TSiegeFlagBattleEndNodify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSiegeFlagBattleEndNodify)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint32 TeamScore = 2;
  if (has_teamscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamscore(), target);
  }

  // optional uint64 FieldDoneTime = 3;
  if (has_fielddonetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fielddonetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSiegeFlagBattleEndNodify)
  return target;
}

int TSiegeFlagBattleEndNodify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 TeamScore = 2;
    if (has_teamscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamscore());
    }

    // optional uint64 FieldDoneTime = 3;
    if (has_fielddonetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fielddonetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSiegeFlagBattleEndNodify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSiegeFlagBattleEndNodify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSiegeFlagBattleEndNodify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSiegeFlagBattleEndNodify::MergeFrom(const TSiegeFlagBattleEndNodify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teamscore()) {
      set_teamscore(from.teamscore());
    }
    if (from.has_fielddonetime()) {
      set_fielddonetime(from.fielddonetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSiegeFlagBattleEndNodify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSiegeFlagBattleEndNodify::CopyFrom(const TSiegeFlagBattleEndNodify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSiegeFlagBattleEndNodify::IsInitialized() const {

  return true;
}

void TSiegeFlagBattleEndNodify::Swap(TSiegeFlagBattleEndNodify* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(teamscore_, other->teamscore_);
    std::swap(fielddonetime_, other->fielddonetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSiegeFlagBattleEndNodify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSiegeFlagBattleEndNodify_descriptor_;
  metadata.reflection = TSiegeFlagBattleEndNodify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
