// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/AdventureResConf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/AdventureResConf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* NameMapping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameMapping_reflection_ = NULL;
const ::google::protobuf::Descriptor* TemplateConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TemplateConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdventureResConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdventureResConf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fAdventureResConf_2eproto() {
  protobuf_AddDesc_module_2fAdventureResConf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/AdventureResConf.proto");
  GOOGLE_CHECK(file != NULL);
  NameMapping_descriptor_ = file->message_type(0);
  static const int NameMapping_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameMapping, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameMapping, index_),
  };
  NameMapping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameMapping_descriptor_,
      NameMapping::default_instance_,
      NameMapping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameMapping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameMapping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameMapping));
  TemplateConf_descriptor_ = file->message_type(1);
  static const int TemplateConf_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateConf, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateConf, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateConf, artrestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateConf, artrespath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateConf, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateConf, pivot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateConf, occupationgridarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateConf, eventtriggergridarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateConf, widandlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateConf, defaultanimname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateConf, defaultanimdirectionindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateConf, effectassetarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateConf, attachpointarr_),
  };
  TemplateConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TemplateConf_descriptor_,
      TemplateConf::default_instance_,
      TemplateConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TemplateConf));
  AdventureResConf_descriptor_ = file->message_type(2);
  static const int AdventureResConf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureResConf, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureResConf, terraincellsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureResConf, templateconfarr_),
  };
  AdventureResConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdventureResConf_descriptor_,
      AdventureResConf::default_instance_,
      AdventureResConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureResConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureResConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdventureResConf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fAdventureResConf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameMapping_descriptor_, &NameMapping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TemplateConf_descriptor_, &TemplateConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdventureResConf_descriptor_, &AdventureResConf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fAdventureResConf_2eproto() {
  delete NameMapping::default_instance_;
  delete NameMapping_reflection_;
  delete TemplateConf::default_instance_;
  delete TemplateConf_reflection_;
  delete AdventureResConf::default_instance_;
  delete AdventureResConf_reflection_;
}

void protobuf_AddDesc_module_2fAdventureResConf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fUtil_2eproto();
  ::pb::protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  ::pb::protobuf_AddDesc_module_2fSceneElementDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035module/AdventureResConf.proto\022\002pb\032\021mod"
    "ule/Util.proto\032\030module/SceneConf2d.proto"
    "\032\037module/SceneElementDefine.proto\"*\n\013Nam"
    "eMapping\022\014\n\004Name\030\001 \001(\t\022\r\n\005Index\030\002 \001(\005\"\234\003"
    "\n\014TemplateConf\022\n\n\002Id\030\001 \001(\005\022\014\n\004Name\030\002 \001(\t"
    "\022\"\n\nArtResType\030\003 \001(\0162\016.pb.EAssetType\022\022\n\n"
    "ArtResPath\030\004 \001(\t\022\014\n\004Type\030\005 \001(\005\022\034\n\005Pivot\030"
    "\006 \001(\0132\r.pb.PbVector2\022,\n\021OccupationGridAr"
    "r\030\007 \003(\0132\021.pb.PbVector2_Int\022.\n\023EventTrigg"
    "erGridArr\030\010 \003(\0132\021.pb.PbVector2_Int\022 \n\tWi"
    "dAndLen\030\t \001(\0132\r.pb.PbVector2\022\027\n\017DefaultA"
    "nimName\030\n \001(\t\022!\n\031DefaultAnimDirectionInd"
    "ex\030\013 \001(\005\022(\n\016EffectAssetArr\030\014 \003(\0132\020.pb.Ef"
    "fectAsset2\022(\n\016AttachPointArr\030\r \003(\0132\020.pb."
    "AttachPoint2\"q\n\020AdventureResConf\022\n\n\002Id\030\001"
    " \001(\005\022&\n\017TerrainCellSize\030\002 \001(\0132\r.pb.PbVec"
    "tor2\022)\n\017TemplateConfArr\030\003 \003(\0132\020.pb.Templ"
    "ateConf", 687);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/AdventureResConf.proto", &protobuf_RegisterTypes);
  NameMapping::default_instance_ = new NameMapping();
  TemplateConf::default_instance_ = new TemplateConf();
  AdventureResConf::default_instance_ = new AdventureResConf();
  NameMapping::default_instance_->InitAsDefaultInstance();
  TemplateConf::default_instance_->InitAsDefaultInstance();
  AdventureResConf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fAdventureResConf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fAdventureResConf_2eproto {
  StaticDescriptorInitializer_module_2fAdventureResConf_2eproto() {
    protobuf_AddDesc_module_2fAdventureResConf_2eproto();
  }
} static_descriptor_initializer_module_2fAdventureResConf_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NameMapping::kNameFieldNumber;
const int NameMapping::kIndexFieldNumber;
#endif  // !_MSC_VER

NameMapping::NameMapping()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.NameMapping)
}

void NameMapping::InitAsDefaultInstance() {
}

NameMapping::NameMapping(const NameMapping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.NameMapping)
}

void NameMapping::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameMapping::~NameMapping() {
  // @@protoc_insertion_point(destructor:pb.NameMapping)
  SharedDtor();
}

void NameMapping::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NameMapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameMapping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameMapping_descriptor_;
}

const NameMapping& NameMapping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAdventureResConf_2eproto();
  return *default_instance_;
}

NameMapping* NameMapping::default_instance_ = NULL;

NameMapping* NameMapping::New() const {
  return new NameMapping;
}

void NameMapping::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameMapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.NameMapping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Index;
        break;
      }

      // optional int32 Index = 2;
      case 2: {
        if (tag == 16) {
         parse_Index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.NameMapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.NameMapping)
  return false;
#undef DO_
}

void NameMapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.NameMapping)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 Index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.NameMapping)
}

::google::protobuf::uint8* NameMapping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.NameMapping)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 Index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.NameMapping)
  return target;
}

int NameMapping::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 Index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameMapping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameMapping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameMapping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameMapping::MergeFrom(const NameMapping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameMapping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameMapping::CopyFrom(const NameMapping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameMapping::IsInitialized() const {

  return true;
}

void NameMapping::Swap(NameMapping* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameMapping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameMapping_descriptor_;
  metadata.reflection = NameMapping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TemplateConf::kIdFieldNumber;
const int TemplateConf::kNameFieldNumber;
const int TemplateConf::kArtResTypeFieldNumber;
const int TemplateConf::kArtResPathFieldNumber;
const int TemplateConf::kTypeFieldNumber;
const int TemplateConf::kPivotFieldNumber;
const int TemplateConf::kOccupationGridArrFieldNumber;
const int TemplateConf::kEventTriggerGridArrFieldNumber;
const int TemplateConf::kWidAndLenFieldNumber;
const int TemplateConf::kDefaultAnimNameFieldNumber;
const int TemplateConf::kDefaultAnimDirectionIndexFieldNumber;
const int TemplateConf::kEffectAssetArrFieldNumber;
const int TemplateConf::kAttachPointArrFieldNumber;
#endif  // !_MSC_VER

TemplateConf::TemplateConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TemplateConf)
}

void TemplateConf::InitAsDefaultInstance() {
  pivot_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
  widandlen_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
}

TemplateConf::TemplateConf(const TemplateConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TemplateConf)
}

void TemplateConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artrestype_ = 1;
  artrespath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  pivot_ = NULL;
  widandlen_ = NULL;
  defaultanimname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defaultanimdirectionindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TemplateConf::~TemplateConf() {
  // @@protoc_insertion_point(destructor:pb.TemplateConf)
  SharedDtor();
}

void TemplateConf::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (artrespath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete artrespath_;
  }
  if (defaultanimname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete defaultanimname_;
  }
  if (this != default_instance_) {
    delete pivot_;
    delete widandlen_;
  }
}

void TemplateConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TemplateConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TemplateConf_descriptor_;
}

const TemplateConf& TemplateConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAdventureResConf_2eproto();
  return *default_instance_;
}

TemplateConf* TemplateConf::default_instance_ = NULL;

TemplateConf* TemplateConf::New() const {
  return new TemplateConf;
}

void TemplateConf::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    artrestype_ = 1;
    if (has_artrespath()) {
      if (artrespath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        artrespath_->clear();
      }
    }
    type_ = 0;
    if (has_pivot()) {
      if (pivot_ != NULL) pivot_->::pb::PbVector2::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_widandlen()) {
      if (widandlen_ != NULL) widandlen_->::pb::PbVector2::Clear();
    }
    if (has_defaultanimname()) {
      if (defaultanimname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        defaultanimname_->clear();
      }
    }
    defaultanimdirectionindex_ = 0;
  }
  occupationgridarr_.Clear();
  eventtriggergridarr_.Clear();
  effectassetarr_.Clear();
  attachpointarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TemplateConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TemplateConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ArtResType;
        break;
      }

      // optional .pb.EAssetType ArtResType = 3;
      case 3: {
        if (tag == 24) {
         parse_ArtResType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAssetType_IsValid(value)) {
            set_artrestype(static_cast< ::pb::EAssetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArtResPath;
        break;
      }

      // optional string ArtResPath = 4;
      case 4: {
        if (tag == 34) {
         parse_ArtResPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artrespath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->artrespath().data(), this->artrespath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artrespath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Type;
        break;
      }

      // optional int32 Type = 5;
      case 5: {
        if (tag == 40) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Pivot;
        break;
      }

      // optional .pb.PbVector2 Pivot = 6;
      case 6: {
        if (tag == 50) {
         parse_Pivot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pivot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_OccupationGridArr;
        break;
      }

      // repeated .pb.PbVector2_Int OccupationGridArr = 7;
      case 7: {
        if (tag == 58) {
         parse_OccupationGridArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_occupationgridarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_OccupationGridArr;
        if (input->ExpectTag(66)) goto parse_EventTriggerGridArr;
        break;
      }

      // repeated .pb.PbVector2_Int EventTriggerGridArr = 8;
      case 8: {
        if (tag == 66) {
         parse_EventTriggerGridArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eventtriggergridarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_EventTriggerGridArr;
        if (input->ExpectTag(74)) goto parse_WidAndLen;
        break;
      }

      // optional .pb.PbVector2 WidAndLen = 9;
      case 9: {
        if (tag == 74) {
         parse_WidAndLen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_widandlen()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_DefaultAnimName;
        break;
      }

      // optional string DefaultAnimName = 10;
      case 10: {
        if (tag == 82) {
         parse_DefaultAnimName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defaultanimname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->defaultanimname().data(), this->defaultanimname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "defaultanimname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_DefaultAnimDirectionIndex;
        break;
      }

      // optional int32 DefaultAnimDirectionIndex = 11;
      case 11: {
        if (tag == 88) {
         parse_DefaultAnimDirectionIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defaultanimdirectionindex_)));
          set_has_defaultanimdirectionindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_EffectAssetArr;
        break;
      }

      // repeated .pb.EffectAsset2 EffectAssetArr = 12;
      case 12: {
        if (tag == 98) {
         parse_EffectAssetArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effectassetarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_EffectAssetArr;
        if (input->ExpectTag(106)) goto parse_AttachPointArr;
        break;
      }

      // repeated .pb.AttachPoint2 AttachPointArr = 13;
      case 13: {
        if (tag == 106) {
         parse_AttachPointArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachpointarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_AttachPointArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TemplateConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TemplateConf)
  return false;
#undef DO_
}

void TemplateConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TemplateConf)
  // optional int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .pb.EAssetType ArtResType = 3;
  if (has_artrestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->artrestype(), output);
  }

  // optional string ArtResPath = 4;
  if (has_artrespath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artrespath().data(), this->artrespath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artrespath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->artrespath(), output);
  }

  // optional int32 Type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional .pb.PbVector2 Pivot = 6;
  if (has_pivot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pivot(), output);
  }

  // repeated .pb.PbVector2_Int OccupationGridArr = 7;
  for (int i = 0; i < this->occupationgridarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->occupationgridarr(i), output);
  }

  // repeated .pb.PbVector2_Int EventTriggerGridArr = 8;
  for (int i = 0; i < this->eventtriggergridarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->eventtriggergridarr(i), output);
  }

  // optional .pb.PbVector2 WidAndLen = 9;
  if (has_widandlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->widandlen(), output);
  }

  // optional string DefaultAnimName = 10;
  if (has_defaultanimname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defaultanimname().data(), this->defaultanimname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defaultanimname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->defaultanimname(), output);
  }

  // optional int32 DefaultAnimDirectionIndex = 11;
  if (has_defaultanimdirectionindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->defaultanimdirectionindex(), output);
  }

  // repeated .pb.EffectAsset2 EffectAssetArr = 12;
  for (int i = 0; i < this->effectassetarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->effectassetarr(i), output);
  }

  // repeated .pb.AttachPoint2 AttachPointArr = 13;
  for (int i = 0; i < this->attachpointarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->attachpointarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TemplateConf)
}

::google::protobuf::uint8* TemplateConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TemplateConf)
  // optional int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .pb.EAssetType ArtResType = 3;
  if (has_artrestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->artrestype(), target);
  }

  // optional string ArtResPath = 4;
  if (has_artrespath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artrespath().data(), this->artrespath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artrespath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->artrespath(), target);
  }

  // optional int32 Type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional .pb.PbVector2 Pivot = 6;
  if (has_pivot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pivot(), target);
  }

  // repeated .pb.PbVector2_Int OccupationGridArr = 7;
  for (int i = 0; i < this->occupationgridarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->occupationgridarr(i), target);
  }

  // repeated .pb.PbVector2_Int EventTriggerGridArr = 8;
  for (int i = 0; i < this->eventtriggergridarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->eventtriggergridarr(i), target);
  }

  // optional .pb.PbVector2 WidAndLen = 9;
  if (has_widandlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->widandlen(), target);
  }

  // optional string DefaultAnimName = 10;
  if (has_defaultanimname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defaultanimname().data(), this->defaultanimname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defaultanimname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->defaultanimname(), target);
  }

  // optional int32 DefaultAnimDirectionIndex = 11;
  if (has_defaultanimdirectionindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->defaultanimdirectionindex(), target);
  }

  // repeated .pb.EffectAsset2 EffectAssetArr = 12;
  for (int i = 0; i < this->effectassetarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->effectassetarr(i), target);
  }

  // repeated .pb.AttachPoint2 AttachPointArr = 13;
  for (int i = 0; i < this->attachpointarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->attachpointarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TemplateConf)
  return target;
}

int TemplateConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .pb.EAssetType ArtResType = 3;
    if (has_artrestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->artrestype());
    }

    // optional string ArtResPath = 4;
    if (has_artrespath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artrespath());
    }

    // optional int32 Type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .pb.PbVector2 Pivot = 6;
    if (has_pivot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pivot());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.PbVector2 WidAndLen = 9;
    if (has_widandlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->widandlen());
    }

    // optional string DefaultAnimName = 10;
    if (has_defaultanimname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defaultanimname());
    }

    // optional int32 DefaultAnimDirectionIndex = 11;
    if (has_defaultanimdirectionindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defaultanimdirectionindex());
    }

  }
  // repeated .pb.PbVector2_Int OccupationGridArr = 7;
  total_size += 1 * this->occupationgridarr_size();
  for (int i = 0; i < this->occupationgridarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->occupationgridarr(i));
  }

  // repeated .pb.PbVector2_Int EventTriggerGridArr = 8;
  total_size += 1 * this->eventtriggergridarr_size();
  for (int i = 0; i < this->eventtriggergridarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eventtriggergridarr(i));
  }

  // repeated .pb.EffectAsset2 EffectAssetArr = 12;
  total_size += 1 * this->effectassetarr_size();
  for (int i = 0; i < this->effectassetarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effectassetarr(i));
  }

  // repeated .pb.AttachPoint2 AttachPointArr = 13;
  total_size += 1 * this->attachpointarr_size();
  for (int i = 0; i < this->attachpointarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attachpointarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TemplateConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TemplateConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TemplateConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TemplateConf::MergeFrom(const TemplateConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  occupationgridarr_.MergeFrom(from.occupationgridarr_);
  eventtriggergridarr_.MergeFrom(from.eventtriggergridarr_);
  effectassetarr_.MergeFrom(from.effectassetarr_);
  attachpointarr_.MergeFrom(from.attachpointarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_artrestype()) {
      set_artrestype(from.artrestype());
    }
    if (from.has_artrespath()) {
      set_artrespath(from.artrespath());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pivot()) {
      mutable_pivot()->::pb::PbVector2::MergeFrom(from.pivot());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_widandlen()) {
      mutable_widandlen()->::pb::PbVector2::MergeFrom(from.widandlen());
    }
    if (from.has_defaultanimname()) {
      set_defaultanimname(from.defaultanimname());
    }
    if (from.has_defaultanimdirectionindex()) {
      set_defaultanimdirectionindex(from.defaultanimdirectionindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TemplateConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemplateConf::CopyFrom(const TemplateConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemplateConf::IsInitialized() const {

  if (has_pivot()) {
    if (!this->pivot().IsInitialized()) return false;
  }
  if (has_widandlen()) {
    if (!this->widandlen().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->effectassetarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attachpointarr())) return false;
  return true;
}

void TemplateConf::Swap(TemplateConf* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(artrestype_, other->artrestype_);
    std::swap(artrespath_, other->artrespath_);
    std::swap(type_, other->type_);
    std::swap(pivot_, other->pivot_);
    occupationgridarr_.Swap(&other->occupationgridarr_);
    eventtriggergridarr_.Swap(&other->eventtriggergridarr_);
    std::swap(widandlen_, other->widandlen_);
    std::swap(defaultanimname_, other->defaultanimname_);
    std::swap(defaultanimdirectionindex_, other->defaultanimdirectionindex_);
    effectassetarr_.Swap(&other->effectassetarr_);
    attachpointarr_.Swap(&other->attachpointarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TemplateConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TemplateConf_descriptor_;
  metadata.reflection = TemplateConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdventureResConf::kIdFieldNumber;
const int AdventureResConf::kTerrainCellSizeFieldNumber;
const int AdventureResConf::kTemplateConfArrFieldNumber;
#endif  // !_MSC_VER

AdventureResConf::AdventureResConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AdventureResConf)
}

void AdventureResConf::InitAsDefaultInstance() {
  terraincellsize_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
}

AdventureResConf::AdventureResConf(const AdventureResConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AdventureResConf)
}

void AdventureResConf::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  terraincellsize_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdventureResConf::~AdventureResConf() {
  // @@protoc_insertion_point(destructor:pb.AdventureResConf)
  SharedDtor();
}

void AdventureResConf::SharedDtor() {
  if (this != default_instance_) {
    delete terraincellsize_;
  }
}

void AdventureResConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdventureResConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdventureResConf_descriptor_;
}

const AdventureResConf& AdventureResConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAdventureResConf_2eproto();
  return *default_instance_;
}

AdventureResConf* AdventureResConf::default_instance_ = NULL;

AdventureResConf* AdventureResConf::New() const {
  return new AdventureResConf;
}

void AdventureResConf::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_terraincellsize()) {
      if (terraincellsize_ != NULL) terraincellsize_->::pb::PbVector2::Clear();
    }
  }
  templateconfarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdventureResConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AdventureResConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TerrainCellSize;
        break;
      }

      // optional .pb.PbVector2 TerrainCellSize = 2;
      case 2: {
        if (tag == 18) {
         parse_TerrainCellSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_terraincellsize()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TemplateConfArr;
        break;
      }

      // repeated .pb.TemplateConf TemplateConfArr = 3;
      case 3: {
        if (tag == 26) {
         parse_TemplateConfArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_templateconfarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TemplateConfArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AdventureResConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AdventureResConf)
  return false;
#undef DO_
}

void AdventureResConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AdventureResConf)
  // optional int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .pb.PbVector2 TerrainCellSize = 2;
  if (has_terraincellsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->terraincellsize(), output);
  }

  // repeated .pb.TemplateConf TemplateConfArr = 3;
  for (int i = 0; i < this->templateconfarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->templateconfarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AdventureResConf)
}

::google::protobuf::uint8* AdventureResConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AdventureResConf)
  // optional int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .pb.PbVector2 TerrainCellSize = 2;
  if (has_terraincellsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->terraincellsize(), target);
  }

  // repeated .pb.TemplateConf TemplateConfArr = 3;
  for (int i = 0; i < this->templateconfarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->templateconfarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AdventureResConf)
  return target;
}

int AdventureResConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .pb.PbVector2 TerrainCellSize = 2;
    if (has_terraincellsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->terraincellsize());
    }

  }
  // repeated .pb.TemplateConf TemplateConfArr = 3;
  total_size += 1 * this->templateconfarr_size();
  for (int i = 0; i < this->templateconfarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->templateconfarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdventureResConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdventureResConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdventureResConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdventureResConf::MergeFrom(const AdventureResConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  templateconfarr_.MergeFrom(from.templateconfarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_terraincellsize()) {
      mutable_terraincellsize()->::pb::PbVector2::MergeFrom(from.terraincellsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdventureResConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdventureResConf::CopyFrom(const AdventureResConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdventureResConf::IsInitialized() const {

  if (has_terraincellsize()) {
    if (!this->terraincellsize().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->templateconfarr())) return false;
  return true;
}

void AdventureResConf::Swap(AdventureResConf* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(terraincellsize_, other->terraincellsize_);
    templateconfarr_.Swap(&other->templateconfarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdventureResConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdventureResConf_descriptor_;
  metadata.reflection = AdventureResConf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
