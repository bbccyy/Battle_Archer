// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/BeastInstance.proto

#ifndef PROTOBUF_net_2fBeastInstance_2eproto__INCLUDED
#define PROTOBUF_net_2fBeastInstance_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
#include "net/Battle.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fBeastInstance_2eproto();
void protobuf_AssignDesc_net_2fBeastInstance_2eproto();
void protobuf_ShutdownFile_net_2fBeastInstance_2eproto();

class TBeastInstanceStrongholdInfo;
class TBeastInstanceChapterInfo;
class TBeastInstanceAchievementRewardInfo;
class TBeastInstanceAchievementInfo;
class TBeastInstanceGetBeastInstanceInfoRsp;
class TBeastInstanceDoBattleReq;
class TBeastInstanceDoBattleRsp;
class TBeastInstanceRaidStrongholdReq;
class TBeastInstanceRaidStrongholdRsp;
class TBeastInstanceReportBattleReq;
class TBeastInstanceReportBattleRsp;
class TBeastInstanceReceiveChapterRewardReq;
class TBeastInstanceReceiveChapterRewardRsp;
class TBeastInstanceBuyChallengeNumReq;
class TBeastInstanceReceiveAchievementRewardReq;
class TBeastInstanceReceiveAchievementRewardRsp;
class TBeastInstanceInfoNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TBeastInstanceStrongholdInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastInstanceStrongholdInfo : public ::google::protobuf::Message {
 public:
  TBeastInstanceStrongholdInfo();
  virtual ~TBeastInstanceStrongholdInfo();

  TBeastInstanceStrongholdInfo(const TBeastInstanceStrongholdInfo& from);

  inline TBeastInstanceStrongholdInfo& operator=(const TBeastInstanceStrongholdInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastInstanceStrongholdInfo& default_instance();

  void Swap(TBeastInstanceStrongholdInfo* other);

  // implements Message ----------------------------------------------

  TBeastInstanceStrongholdInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastInstanceStrongholdInfo& from);
  void MergeFrom(const TBeastInstanceStrongholdInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 StrongholdId = 1;
  inline bool has_strongholdid() const;
  inline void clear_strongholdid();
  static const int kStrongholdIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceStrongholdInfo</name>
  	<Function>
  		<name>strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 strongholdid() const;
  inline void set_strongholdid(::google::protobuf::uint32 value);

  // optional uint32 StarNum = 2;
  inline bool has_starnum() const;
  inline void clear_starnum();
  static const int kStarNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceStrongholdInfo</name>
  	<Function>
  		<name>starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starnum() const;
  inline void set_starnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastInstanceStrongholdInfo)
 private:
  inline void set_has_strongholdid();
  inline void clear_has_strongholdid();
  inline void set_has_starnum();
  inline void clear_has_starnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 strongholdid_;
  ::google::protobuf::uint32 starnum_;
  friend void  protobuf_AddDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastInstance_2eproto();

  void InitAsDefaultInstance();
  static TBeastInstanceStrongholdInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastInstanceChapterInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastInstanceChapterInfo : public ::google::protobuf::Message {
 public:
  TBeastInstanceChapterInfo();
  virtual ~TBeastInstanceChapterInfo();

  TBeastInstanceChapterInfo(const TBeastInstanceChapterInfo& from);

  inline TBeastInstanceChapterInfo& operator=(const TBeastInstanceChapterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastInstanceChapterInfo& default_instance();

  void Swap(TBeastInstanceChapterInfo* other);

  // implements Message ----------------------------------------------

  TBeastInstanceChapterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastInstanceChapterInfo& from);
  void MergeFrom(const TBeastInstanceChapterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ChapterId = 1;
  inline bool has_chapterid() const;
  inline void clear_chapterid();
  static const int kChapterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceChapterInfo</name>
  	<Function>
  		<name>chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chapterid() const;
  inline void set_chapterid(::google::protobuf::uint32 value);

  // optional bool IsPass = 2;
  inline bool has_ispass() const;
  inline void clear_ispass();
  static const int kIsPassFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceChapterInfo</name>
  	<Function>
  		<name>ispass</name>
  		<replaceName>IsPass</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ispass</name>
  		<replaceName>IsPass</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ispass</name>
  		<replaceName>IsPass</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool ispass() const;
  inline void set_ispass(bool value);

  // optional uint64 RewardTime = 3;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceChapterInfo</name>
  	<Function>
  		<name>rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::uint64 value);

  // optional uint32 MaxStrongholdId = 4;
  inline bool has_maxstrongholdid() const;
  inline void clear_maxstrongholdid();
  static const int kMaxStrongholdIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceChapterInfo</name>
  	<Function>
  		<name>maxstrongholdid</name>
  		<replaceName>MaxStrongholdId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxstrongholdid</name>
  		<replaceName>MaxStrongholdId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxstrongholdid</name>
  		<replaceName>MaxStrongholdId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxstrongholdid() const;
  inline void set_maxstrongholdid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastInstanceChapterInfo)
 private:
  inline void set_has_chapterid();
  inline void clear_has_chapterid();
  inline void set_has_ispass();
  inline void clear_has_ispass();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();
  inline void set_has_maxstrongholdid();
  inline void clear_has_maxstrongholdid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 chapterid_;
  bool ispass_;
  ::google::protobuf::uint64 rewardtime_;
  ::google::protobuf::uint32 maxstrongholdid_;
  friend void  protobuf_AddDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastInstance_2eproto();

  void InitAsDefaultInstance();
  static TBeastInstanceChapterInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastInstanceAchievementRewardInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastInstanceAchievementRewardInfo : public ::google::protobuf::Message {
 public:
  TBeastInstanceAchievementRewardInfo();
  virtual ~TBeastInstanceAchievementRewardInfo();

  TBeastInstanceAchievementRewardInfo(const TBeastInstanceAchievementRewardInfo& from);

  inline TBeastInstanceAchievementRewardInfo& operator=(const TBeastInstanceAchievementRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastInstanceAchievementRewardInfo& default_instance();

  void Swap(TBeastInstanceAchievementRewardInfo* other);

  // implements Message ----------------------------------------------

  TBeastInstanceAchievementRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastInstanceAchievementRewardInfo& from);
  void MergeFrom(const TBeastInstanceAchievementRewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceAchievementRewardInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 RewardTime = 2;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceAchievementRewardInfo</name>
  	<Function>
  		<name>rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastInstanceAchievementRewardInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rewardtime_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastInstance_2eproto();

  void InitAsDefaultInstance();
  static TBeastInstanceAchievementRewardInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastInstanceAchievementInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastInstanceAchievementInfo : public ::google::protobuf::Message {
 public:
  TBeastInstanceAchievementInfo();
  virtual ~TBeastInstanceAchievementInfo();

  TBeastInstanceAchievementInfo(const TBeastInstanceAchievementInfo& from);

  inline TBeastInstanceAchievementInfo& operator=(const TBeastInstanceAchievementInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastInstanceAchievementInfo& default_instance();

  void Swap(TBeastInstanceAchievementInfo* other);

  // implements Message ----------------------------------------------

  TBeastInstanceAchievementInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastInstanceAchievementInfo& from);
  void MergeFrom(const TBeastInstanceAchievementInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TotalChallengeNum = 1;
  inline bool has_totalchallengenum() const;
  inline void clear_totalchallengenum();
  static const int kTotalChallengeNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceAchievementInfo</name>
  	<Function>
  		<name>totalchallengenum</name>
  		<replaceName>TotalChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalchallengenum</name>
  		<replaceName>TotalChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalchallengenum</name>
  		<replaceName>TotalChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 totalchallengenum() const;
  inline void set_totalchallengenum(::google::protobuf::uint32 value);

  // repeated .pb.TBeastInstanceAchievementRewardInfo RewardInfoArray = 2;
  inline int rewardinfoarray_size() const;
  inline void clear_rewardinfoarray();
  static const int kRewardInfoArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceAchievementInfo</name>
  	<Function>
  		<name>rewardinfoarray</name>
  		<replaceName>RewardInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardinfoarray</name>
  		<replaceName>RewardInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardinfoarray</name>
  		<replaceName>RewardInfoArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardinfoarray</name>
  		<replaceName>RewardInfoArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardinfoarray_size</name>
  		<replaceName>RewardInfoArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastInstanceAchievementRewardInfo& rewardinfoarray(int index) const;
  inline ::pb::TBeastInstanceAchievementRewardInfo* mutable_rewardinfoarray(int index);
  inline ::pb::TBeastInstanceAchievementRewardInfo* add_rewardinfoarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastInstanceAchievementRewardInfo >&
      rewardinfoarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastInstanceAchievementRewardInfo >*
      mutable_rewardinfoarray();

  // @@protoc_insertion_point(class_scope:pb.TBeastInstanceAchievementInfo)
 private:
  inline void set_has_totalchallengenum();
  inline void clear_has_totalchallengenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeastInstanceAchievementRewardInfo > rewardinfoarray_;
  ::google::protobuf::uint32 totalchallengenum_;
  friend void  protobuf_AddDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastInstance_2eproto();

  void InitAsDefaultInstance();
  static TBeastInstanceAchievementInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastInstanceGetBeastInstanceInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastInstanceGetBeastInstanceInfoRsp : public ::google::protobuf::Message {
 public:
  TBeastInstanceGetBeastInstanceInfoRsp();
  virtual ~TBeastInstanceGetBeastInstanceInfoRsp();

  TBeastInstanceGetBeastInstanceInfoRsp(const TBeastInstanceGetBeastInstanceInfoRsp& from);

  inline TBeastInstanceGetBeastInstanceInfoRsp& operator=(const TBeastInstanceGetBeastInstanceInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastInstanceGetBeastInstanceInfoRsp& default_instance();

  void Swap(TBeastInstanceGetBeastInstanceInfoRsp* other);

  // implements Message ----------------------------------------------

  TBeastInstanceGetBeastInstanceInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastInstanceGetBeastInstanceInfoRsp& from);
  void MergeFrom(const TBeastInstanceGetBeastInstanceInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBeastInstanceChapterInfo ChapterInfoArray = 1;
  inline int chapterinfoarray_size() const;
  inline void clear_chapterinfoarray();
  static const int kChapterInfoArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceGetBeastInstanceInfoRsp</name>
  	<Function>
  		<name>chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>chapterinfoarray_size</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastInstanceChapterInfo& chapterinfoarray(int index) const;
  inline ::pb::TBeastInstanceChapterInfo* mutable_chapterinfoarray(int index);
  inline ::pb::TBeastInstanceChapterInfo* add_chapterinfoarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastInstanceChapterInfo >&
      chapterinfoarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastInstanceChapterInfo >*
      mutable_chapterinfoarray();

  // optional uint32 ChallengeNum = 2;
  inline bool has_challengenum() const;
  inline void clear_challengenum();
  static const int kChallengeNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceGetBeastInstanceInfoRsp</name>
  	<Function>
  		<name>challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 challengenum() const;
  inline void set_challengenum(::google::protobuf::uint32 value);

  // optional uint32 BuyChallengeNum = 3;
  inline bool has_buychallengenum() const;
  inline void clear_buychallengenum();
  static const int kBuyChallengeNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceGetBeastInstanceInfoRsp</name>
  	<Function>
  		<name>buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buychallengenum() const;
  inline void set_buychallengenum(::google::protobuf::uint32 value);

  // optional uint64 RefreshTime = 4;
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceGetBeastInstanceInfoRsp</name>
  	<Function>
  		<name>refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::uint64 value);

  // optional .pb.TBeastInstanceAchievementInfo AchievementInfo = 5;
  inline bool has_achievementinfo() const;
  inline void clear_achievementinfo();
  static const int kAchievementInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceGetBeastInstanceInfoRsp</name>
  	<Function>
  		<name>achievementinfo</name>
  		<replaceName>AchievementInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_achievementinfo</name>
  		<replaceName>AchievementInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_achievementinfo</name>
  		<replaceName>AchievementInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_achievementinfo</name>
  		<replaceName>AchievementInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastInstanceAchievementInfo& achievementinfo() const;
  inline ::pb::TBeastInstanceAchievementInfo* mutable_achievementinfo();
  inline ::pb::TBeastInstanceAchievementInfo* release_achievementinfo();
  inline void set_allocated_achievementinfo(::pb::TBeastInstanceAchievementInfo* achievementinfo);

  // @@protoc_insertion_point(class_scope:pb.TBeastInstanceGetBeastInstanceInfoRsp)
 private:
  inline void set_has_challengenum();
  inline void clear_has_challengenum();
  inline void set_has_buychallengenum();
  inline void clear_has_buychallengenum();
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();
  inline void set_has_achievementinfo();
  inline void clear_has_achievementinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeastInstanceChapterInfo > chapterinfoarray_;
  ::google::protobuf::uint32 challengenum_;
  ::google::protobuf::uint32 buychallengenum_;
  ::google::protobuf::uint64 refreshtime_;
  ::pb::TBeastInstanceAchievementInfo* achievementinfo_;
  friend void  protobuf_AddDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastInstance_2eproto();

  void InitAsDefaultInstance();
  static TBeastInstanceGetBeastInstanceInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastInstanceDoBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastInstanceDoBattleReq : public ::google::protobuf::Message {
 public:
  TBeastInstanceDoBattleReq();
  virtual ~TBeastInstanceDoBattleReq();

  TBeastInstanceDoBattleReq(const TBeastInstanceDoBattleReq& from);

  inline TBeastInstanceDoBattleReq& operator=(const TBeastInstanceDoBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastInstanceDoBattleReq& default_instance();

  void Swap(TBeastInstanceDoBattleReq* other);

  // implements Message ----------------------------------------------

  TBeastInstanceDoBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastInstanceDoBattleReq& from);
  void MergeFrom(const TBeastInstanceDoBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ChapterId = 1;
  inline bool has_chapterid() const;
  inline void clear_chapterid();
  static const int kChapterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceDoBattleReq</name>
  	<Function>
  		<name>chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chapterid() const;
  inline void set_chapterid(::google::protobuf::uint32 value);

  // optional uint32 StrongholdId = 2;
  inline bool has_strongholdid() const;
  inline void clear_strongholdid();
  static const int kStrongholdIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceDoBattleReq</name>
  	<Function>
  		<name>strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 strongholdid() const;
  inline void set_strongholdid(::google::protobuf::uint32 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 4;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceDoBattleReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TBeastInstanceDoBattleReq)
 private:
  inline void set_has_chapterid();
  inline void clear_has_chapterid();
  inline void set_has_strongholdid();
  inline void clear_has_strongholdid();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 chapterid_;
  ::google::protobuf::uint32 strongholdid_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  friend void  protobuf_AddDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastInstance_2eproto();

  void InitAsDefaultInstance();
  static TBeastInstanceDoBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastInstanceDoBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastInstanceDoBattleRsp : public ::google::protobuf::Message {
 public:
  TBeastInstanceDoBattleRsp();
  virtual ~TBeastInstanceDoBattleRsp();

  TBeastInstanceDoBattleRsp(const TBeastInstanceDoBattleRsp& from);

  inline TBeastInstanceDoBattleRsp& operator=(const TBeastInstanceDoBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastInstanceDoBattleRsp& default_instance();

  void Swap(TBeastInstanceDoBattleRsp* other);

  // implements Message ----------------------------------------------

  TBeastInstanceDoBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastInstanceDoBattleRsp& from);
  void MergeFrom(const TBeastInstanceDoBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArray = 1;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceDoBattleRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // optional .pb.TBattleArgs BattleArgs = 2;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceDoBattleRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // @@protoc_insertion_point(class_scope:pb.TBeastInstanceDoBattleRsp)
 private:
  inline void set_has_battleargs();
  inline void clear_has_battleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  ::pb::TBattleArgs* battleargs_;
  friend void  protobuf_AddDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastInstance_2eproto();

  void InitAsDefaultInstance();
  static TBeastInstanceDoBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastInstanceRaidStrongholdReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastInstanceRaidStrongholdReq : public ::google::protobuf::Message {
 public:
  TBeastInstanceRaidStrongholdReq();
  virtual ~TBeastInstanceRaidStrongholdReq();

  TBeastInstanceRaidStrongholdReq(const TBeastInstanceRaidStrongholdReq& from);

  inline TBeastInstanceRaidStrongholdReq& operator=(const TBeastInstanceRaidStrongholdReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastInstanceRaidStrongholdReq& default_instance();

  void Swap(TBeastInstanceRaidStrongholdReq* other);

  // implements Message ----------------------------------------------

  TBeastInstanceRaidStrongholdReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastInstanceRaidStrongholdReq& from);
  void MergeFrom(const TBeastInstanceRaidStrongholdReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ChapterId = 1;
  inline bool has_chapterid() const;
  inline void clear_chapterid();
  static const int kChapterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceRaidStrongholdReq</name>
  	<Function>
  		<name>chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chapterid() const;
  inline void set_chapterid(::google::protobuf::uint32 value);

  // optional uint32 StrongholdId = 2;
  inline bool has_strongholdid() const;
  inline void clear_strongholdid();
  static const int kStrongholdIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceRaidStrongholdReq</name>
  	<Function>
  		<name>strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 strongholdid() const;
  inline void set_strongholdid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastInstanceRaidStrongholdReq)
 private:
  inline void set_has_chapterid();
  inline void clear_has_chapterid();
  inline void set_has_strongholdid();
  inline void clear_has_strongholdid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 chapterid_;
  ::google::protobuf::uint32 strongholdid_;
  friend void  protobuf_AddDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastInstance_2eproto();

  void InitAsDefaultInstance();
  static TBeastInstanceRaidStrongholdReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastInstanceRaidStrongholdRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastInstanceRaidStrongholdRsp : public ::google::protobuf::Message {
 public:
  TBeastInstanceRaidStrongholdRsp();
  virtual ~TBeastInstanceRaidStrongholdRsp();

  TBeastInstanceRaidStrongholdRsp(const TBeastInstanceRaidStrongholdRsp& from);

  inline TBeastInstanceRaidStrongholdRsp& operator=(const TBeastInstanceRaidStrongholdRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastInstanceRaidStrongholdRsp& default_instance();

  void Swap(TBeastInstanceRaidStrongholdRsp* other);

  // implements Message ----------------------------------------------

  TBeastInstanceRaidStrongholdRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastInstanceRaidStrongholdRsp& from);
  void MergeFrom(const TBeastInstanceRaidStrongholdRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArray = 1;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceRaidStrongholdRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // @@protoc_insertion_point(class_scope:pb.TBeastInstanceRaidStrongholdRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  friend void  protobuf_AddDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastInstance_2eproto();

  void InitAsDefaultInstance();
  static TBeastInstanceRaidStrongholdRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastInstanceReportBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastInstanceReportBattleReq : public ::google::protobuf::Message {
 public:
  TBeastInstanceReportBattleReq();
  virtual ~TBeastInstanceReportBattleReq();

  TBeastInstanceReportBattleReq(const TBeastInstanceReportBattleReq& from);

  inline TBeastInstanceReportBattleReq& operator=(const TBeastInstanceReportBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastInstanceReportBattleReq& default_instance();

  void Swap(TBeastInstanceReportBattleReq* other);

  // implements Message ----------------------------------------------

  TBeastInstanceReportBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastInstanceReportBattleReq& from);
  void MergeFrom(const TBeastInstanceReportBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ChapterId = 1;
  inline bool has_chapterid() const;
  inline void clear_chapterid();
  static const int kChapterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceReportBattleReq</name>
  	<Function>
  		<name>chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chapterid() const;
  inline void set_chapterid(::google::protobuf::uint32 value);

  // optional uint32 StrongholdId = 2;
  inline bool has_strongholdid() const;
  inline void clear_strongholdid();
  static const int kStrongholdIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceReportBattleReq</name>
  	<Function>
  		<name>strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 strongholdid() const;
  inline void set_strongholdid(::google::protobuf::uint32 value);

  // optional .pb.TBattleResult BattleRet = 3;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceReportBattleReq</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& battleret() const;
  inline ::pb::TBattleResult* mutable_battleret();
  inline ::pb::TBattleResult* release_battleret();
  inline void set_allocated_battleret(::pb::TBattleResult* battleret);

  // optional bytes BattleResultBytes = 4;
  inline bool has_battleresultbytes() const;
  inline void clear_battleresultbytes();
  static const int kBattleResultBytesFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceReportBattleReq</name>
  	<Function>
  		<name>battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleresultbytes() const;
  inline void set_battleresultbytes(const ::std::string& value);
  inline void set_battleresultbytes(const char* value);
  inline void set_battleresultbytes(const void* value, size_t size);
  inline ::std::string* mutable_battleresultbytes();
  inline ::std::string* release_battleresultbytes();
  inline void set_allocated_battleresultbytes(::std::string* battleresultbytes);

  // @@protoc_insertion_point(class_scope:pb.TBeastInstanceReportBattleReq)
 private:
  inline void set_has_chapterid();
  inline void clear_has_chapterid();
  inline void set_has_strongholdid();
  inline void clear_has_strongholdid();
  inline void set_has_battleret();
  inline void clear_has_battleret();
  inline void set_has_battleresultbytes();
  inline void clear_has_battleresultbytes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 chapterid_;
  ::google::protobuf::uint32 strongholdid_;
  ::pb::TBattleResult* battleret_;
  ::std::string* battleresultbytes_;
  friend void  protobuf_AddDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastInstance_2eproto();

  void InitAsDefaultInstance();
  static TBeastInstanceReportBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastInstanceReportBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastInstanceReportBattleRsp : public ::google::protobuf::Message {
 public:
  TBeastInstanceReportBattleRsp();
  virtual ~TBeastInstanceReportBattleRsp();

  TBeastInstanceReportBattleRsp(const TBeastInstanceReportBattleRsp& from);

  inline TBeastInstanceReportBattleRsp& operator=(const TBeastInstanceReportBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastInstanceReportBattleRsp& default_instance();

  void Swap(TBeastInstanceReportBattleRsp* other);

  // implements Message ----------------------------------------------

  TBeastInstanceReportBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastInstanceReportBattleRsp& from);
  void MergeFrom(const TBeastInstanceReportBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArray = 1;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceReportBattleRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // @@protoc_insertion_point(class_scope:pb.TBeastInstanceReportBattleRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  friend void  protobuf_AddDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastInstance_2eproto();

  void InitAsDefaultInstance();
  static TBeastInstanceReportBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastInstanceReceiveChapterRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastInstanceReceiveChapterRewardReq : public ::google::protobuf::Message {
 public:
  TBeastInstanceReceiveChapterRewardReq();
  virtual ~TBeastInstanceReceiveChapterRewardReq();

  TBeastInstanceReceiveChapterRewardReq(const TBeastInstanceReceiveChapterRewardReq& from);

  inline TBeastInstanceReceiveChapterRewardReq& operator=(const TBeastInstanceReceiveChapterRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastInstanceReceiveChapterRewardReq& default_instance();

  void Swap(TBeastInstanceReceiveChapterRewardReq* other);

  // implements Message ----------------------------------------------

  TBeastInstanceReceiveChapterRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastInstanceReceiveChapterRewardReq& from);
  void MergeFrom(const TBeastInstanceReceiveChapterRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ChapterId = 1;
  inline bool has_chapterid() const;
  inline void clear_chapterid();
  static const int kChapterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceReceiveChapterRewardReq</name>
  	<Function>
  		<name>chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chapterid() const;
  inline void set_chapterid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastInstanceReceiveChapterRewardReq)
 private:
  inline void set_has_chapterid();
  inline void clear_has_chapterid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 chapterid_;
  friend void  protobuf_AddDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastInstance_2eproto();

  void InitAsDefaultInstance();
  static TBeastInstanceReceiveChapterRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastInstanceReceiveChapterRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastInstanceReceiveChapterRewardRsp : public ::google::protobuf::Message {
 public:
  TBeastInstanceReceiveChapterRewardRsp();
  virtual ~TBeastInstanceReceiveChapterRewardRsp();

  TBeastInstanceReceiveChapterRewardRsp(const TBeastInstanceReceiveChapterRewardRsp& from);

  inline TBeastInstanceReceiveChapterRewardRsp& operator=(const TBeastInstanceReceiveChapterRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastInstanceReceiveChapterRewardRsp& default_instance();

  void Swap(TBeastInstanceReceiveChapterRewardRsp* other);

  // implements Message ----------------------------------------------

  TBeastInstanceReceiveChapterRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastInstanceReceiveChapterRewardRsp& from);
  void MergeFrom(const TBeastInstanceReceiveChapterRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceReceiveChapterRewardRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // @@protoc_insertion_point(class_scope:pb.TBeastInstanceReceiveChapterRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  friend void  protobuf_AddDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastInstance_2eproto();

  void InitAsDefaultInstance();
  static TBeastInstanceReceiveChapterRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastInstanceBuyChallengeNumReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastInstanceBuyChallengeNumReq : public ::google::protobuf::Message {
 public:
  TBeastInstanceBuyChallengeNumReq();
  virtual ~TBeastInstanceBuyChallengeNumReq();

  TBeastInstanceBuyChallengeNumReq(const TBeastInstanceBuyChallengeNumReq& from);

  inline TBeastInstanceBuyChallengeNumReq& operator=(const TBeastInstanceBuyChallengeNumReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastInstanceBuyChallengeNumReq& default_instance();

  void Swap(TBeastInstanceBuyChallengeNumReq* other);

  // implements Message ----------------------------------------------

  TBeastInstanceBuyChallengeNumReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastInstanceBuyChallengeNumReq& from);
  void MergeFrom(const TBeastInstanceBuyChallengeNumReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceBuyChallengeNumReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastInstanceBuyChallengeNumReq)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastInstance_2eproto();

  void InitAsDefaultInstance();
  static TBeastInstanceBuyChallengeNumReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastInstanceReceiveAchievementRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastInstanceReceiveAchievementRewardReq : public ::google::protobuf::Message {
 public:
  TBeastInstanceReceiveAchievementRewardReq();
  virtual ~TBeastInstanceReceiveAchievementRewardReq();

  TBeastInstanceReceiveAchievementRewardReq(const TBeastInstanceReceiveAchievementRewardReq& from);

  inline TBeastInstanceReceiveAchievementRewardReq& operator=(const TBeastInstanceReceiveAchievementRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastInstanceReceiveAchievementRewardReq& default_instance();

  void Swap(TBeastInstanceReceiveAchievementRewardReq* other);

  // implements Message ----------------------------------------------

  TBeastInstanceReceiveAchievementRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastInstanceReceiveAchievementRewardReq& from);
  void MergeFrom(const TBeastInstanceReceiveAchievementRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceReceiveAchievementRewardReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastInstanceReceiveAchievementRewardReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastInstance_2eproto();

  void InitAsDefaultInstance();
  static TBeastInstanceReceiveAchievementRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastInstanceReceiveAchievementRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastInstanceReceiveAchievementRewardRsp : public ::google::protobuf::Message {
 public:
  TBeastInstanceReceiveAchievementRewardRsp();
  virtual ~TBeastInstanceReceiveAchievementRewardRsp();

  TBeastInstanceReceiveAchievementRewardRsp(const TBeastInstanceReceiveAchievementRewardRsp& from);

  inline TBeastInstanceReceiveAchievementRewardRsp& operator=(const TBeastInstanceReceiveAchievementRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastInstanceReceiveAchievementRewardRsp& default_instance();

  void Swap(TBeastInstanceReceiveAchievementRewardRsp* other);

  // implements Message ----------------------------------------------

  TBeastInstanceReceiveAchievementRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastInstanceReceiveAchievementRewardRsp& from);
  void MergeFrom(const TBeastInstanceReceiveAchievementRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceReceiveAchievementRewardRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // @@protoc_insertion_point(class_scope:pb.TBeastInstanceReceiveAchievementRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  friend void  protobuf_AddDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastInstance_2eproto();

  void InitAsDefaultInstance();
  static TBeastInstanceReceiveAchievementRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastInstanceInfoNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastInstanceInfoNotify : public ::google::protobuf::Message {
 public:
  TBeastInstanceInfoNotify();
  virtual ~TBeastInstanceInfoNotify();

  TBeastInstanceInfoNotify(const TBeastInstanceInfoNotify& from);

  inline TBeastInstanceInfoNotify& operator=(const TBeastInstanceInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastInstanceInfoNotify& default_instance();

  void Swap(TBeastInstanceInfoNotify* other);

  // implements Message ----------------------------------------------

  TBeastInstanceInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastInstanceInfoNotify& from);
  void MergeFrom(const TBeastInstanceInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBeastInstanceChapterInfo ChapterInfoArray = 1;
  inline int chapterinfoarray_size() const;
  inline void clear_chapterinfoarray();
  static const int kChapterInfoArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceInfoNotify</name>
  	<Function>
  		<name>chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>chapterinfoarray_size</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastInstanceChapterInfo& chapterinfoarray(int index) const;
  inline ::pb::TBeastInstanceChapterInfo* mutable_chapterinfoarray(int index);
  inline ::pb::TBeastInstanceChapterInfo* add_chapterinfoarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastInstanceChapterInfo >&
      chapterinfoarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastInstanceChapterInfo >*
      mutable_chapterinfoarray();

  // optional uint32 ChallengeNum = 2;
  inline bool has_challengenum() const;
  inline void clear_challengenum();
  static const int kChallengeNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceInfoNotify</name>
  	<Function>
  		<name>challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 challengenum() const;
  inline void set_challengenum(::google::protobuf::uint32 value);

  // optional uint32 BuyChallengeNum = 3;
  inline bool has_buychallengenum() const;
  inline void clear_buychallengenum();
  static const int kBuyChallengeNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceInfoNotify</name>
  	<Function>
  		<name>buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buychallengenum() const;
  inline void set_buychallengenum(::google::protobuf::uint32 value);

  // optional uint64 RefreshTime = 4;
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBeastInstanceInfoNotify</name>
  	<Function>
  		<name>refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastInstanceInfoNotify)
 private:
  inline void set_has_challengenum();
  inline void clear_has_challengenum();
  inline void set_has_buychallengenum();
  inline void clear_has_buychallengenum();
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeastInstanceChapterInfo > chapterinfoarray_;
  ::google::protobuf::uint32 challengenum_;
  ::google::protobuf::uint32 buychallengenum_;
  ::google::protobuf::uint64 refreshtime_;
  friend void  protobuf_AddDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastInstance_2eproto();

  void InitAsDefaultInstance();
  static TBeastInstanceInfoNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TBeastInstanceStrongholdInfo

// optional uint32 StrongholdId = 1;
inline bool TBeastInstanceStrongholdInfo::has_strongholdid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastInstanceStrongholdInfo::set_has_strongholdid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastInstanceStrongholdInfo::clear_has_strongholdid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastInstanceStrongholdInfo::clear_strongholdid() {
  strongholdid_ = 0u;
  clear_has_strongholdid();
}
inline ::google::protobuf::uint32 TBeastInstanceStrongholdInfo::strongholdid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceStrongholdInfo.StrongholdId)
  return strongholdid_;
}
inline void TBeastInstanceStrongholdInfo::set_strongholdid(::google::protobuf::uint32 value) {
  set_has_strongholdid();
  strongholdid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceStrongholdInfo.StrongholdId)
}

// optional uint32 StarNum = 2;
inline bool TBeastInstanceStrongholdInfo::has_starnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastInstanceStrongholdInfo::set_has_starnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastInstanceStrongholdInfo::clear_has_starnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastInstanceStrongholdInfo::clear_starnum() {
  starnum_ = 0u;
  clear_has_starnum();
}
inline ::google::protobuf::uint32 TBeastInstanceStrongholdInfo::starnum() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceStrongholdInfo.StarNum)
  return starnum_;
}
inline void TBeastInstanceStrongholdInfo::set_starnum(::google::protobuf::uint32 value) {
  set_has_starnum();
  starnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceStrongholdInfo.StarNum)
}

// -------------------------------------------------------------------

// TBeastInstanceChapterInfo

// optional uint32 ChapterId = 1;
inline bool TBeastInstanceChapterInfo::has_chapterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastInstanceChapterInfo::set_has_chapterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastInstanceChapterInfo::clear_has_chapterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastInstanceChapterInfo::clear_chapterid() {
  chapterid_ = 0u;
  clear_has_chapterid();
}
inline ::google::protobuf::uint32 TBeastInstanceChapterInfo::chapterid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceChapterInfo.ChapterId)
  return chapterid_;
}
inline void TBeastInstanceChapterInfo::set_chapterid(::google::protobuf::uint32 value) {
  set_has_chapterid();
  chapterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceChapterInfo.ChapterId)
}

// optional bool IsPass = 2;
inline bool TBeastInstanceChapterInfo::has_ispass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastInstanceChapterInfo::set_has_ispass() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastInstanceChapterInfo::clear_has_ispass() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastInstanceChapterInfo::clear_ispass() {
  ispass_ = false;
  clear_has_ispass();
}
inline bool TBeastInstanceChapterInfo::ispass() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceChapterInfo.IsPass)
  return ispass_;
}
inline void TBeastInstanceChapterInfo::set_ispass(bool value) {
  set_has_ispass();
  ispass_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceChapterInfo.IsPass)
}

// optional uint64 RewardTime = 3;
inline bool TBeastInstanceChapterInfo::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBeastInstanceChapterInfo::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBeastInstanceChapterInfo::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBeastInstanceChapterInfo::clear_rewardtime() {
  rewardtime_ = GOOGLE_ULONGLONG(0);
  clear_has_rewardtime();
}
inline ::google::protobuf::uint64 TBeastInstanceChapterInfo::rewardtime() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceChapterInfo.RewardTime)
  return rewardtime_;
}
inline void TBeastInstanceChapterInfo::set_rewardtime(::google::protobuf::uint64 value) {
  set_has_rewardtime();
  rewardtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceChapterInfo.RewardTime)
}

// optional uint32 MaxStrongholdId = 4;
inline bool TBeastInstanceChapterInfo::has_maxstrongholdid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBeastInstanceChapterInfo::set_has_maxstrongholdid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBeastInstanceChapterInfo::clear_has_maxstrongholdid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBeastInstanceChapterInfo::clear_maxstrongholdid() {
  maxstrongholdid_ = 0u;
  clear_has_maxstrongholdid();
}
inline ::google::protobuf::uint32 TBeastInstanceChapterInfo::maxstrongholdid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceChapterInfo.MaxStrongholdId)
  return maxstrongholdid_;
}
inline void TBeastInstanceChapterInfo::set_maxstrongholdid(::google::protobuf::uint32 value) {
  set_has_maxstrongholdid();
  maxstrongholdid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceChapterInfo.MaxStrongholdId)
}

// -------------------------------------------------------------------

// TBeastInstanceAchievementRewardInfo

// optional uint32 Id = 1;
inline bool TBeastInstanceAchievementRewardInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastInstanceAchievementRewardInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastInstanceAchievementRewardInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastInstanceAchievementRewardInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TBeastInstanceAchievementRewardInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceAchievementRewardInfo.Id)
  return id_;
}
inline void TBeastInstanceAchievementRewardInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceAchievementRewardInfo.Id)
}

// optional uint64 RewardTime = 2;
inline bool TBeastInstanceAchievementRewardInfo::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastInstanceAchievementRewardInfo::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastInstanceAchievementRewardInfo::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastInstanceAchievementRewardInfo::clear_rewardtime() {
  rewardtime_ = GOOGLE_ULONGLONG(0);
  clear_has_rewardtime();
}
inline ::google::protobuf::uint64 TBeastInstanceAchievementRewardInfo::rewardtime() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceAchievementRewardInfo.RewardTime)
  return rewardtime_;
}
inline void TBeastInstanceAchievementRewardInfo::set_rewardtime(::google::protobuf::uint64 value) {
  set_has_rewardtime();
  rewardtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceAchievementRewardInfo.RewardTime)
}

// -------------------------------------------------------------------

// TBeastInstanceAchievementInfo

// optional uint32 TotalChallengeNum = 1;
inline bool TBeastInstanceAchievementInfo::has_totalchallengenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastInstanceAchievementInfo::set_has_totalchallengenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastInstanceAchievementInfo::clear_has_totalchallengenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastInstanceAchievementInfo::clear_totalchallengenum() {
  totalchallengenum_ = 0u;
  clear_has_totalchallengenum();
}
inline ::google::protobuf::uint32 TBeastInstanceAchievementInfo::totalchallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceAchievementInfo.TotalChallengeNum)
  return totalchallengenum_;
}
inline void TBeastInstanceAchievementInfo::set_totalchallengenum(::google::protobuf::uint32 value) {
  set_has_totalchallengenum();
  totalchallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceAchievementInfo.TotalChallengeNum)
}

// repeated .pb.TBeastInstanceAchievementRewardInfo RewardInfoArray = 2;
inline int TBeastInstanceAchievementInfo::rewardinfoarray_size() const {
  return rewardinfoarray_.size();
}
inline void TBeastInstanceAchievementInfo::clear_rewardinfoarray() {
  rewardinfoarray_.Clear();
}
inline const ::pb::TBeastInstanceAchievementRewardInfo& TBeastInstanceAchievementInfo::rewardinfoarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceAchievementInfo.RewardInfoArray)
  return rewardinfoarray_.Get(index);
}
inline ::pb::TBeastInstanceAchievementRewardInfo* TBeastInstanceAchievementInfo::mutable_rewardinfoarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastInstanceAchievementInfo.RewardInfoArray)
  return rewardinfoarray_.Mutable(index);
}
inline ::pb::TBeastInstanceAchievementRewardInfo* TBeastInstanceAchievementInfo::add_rewardinfoarray() {
  // @@protoc_insertion_point(field_add:pb.TBeastInstanceAchievementInfo.RewardInfoArray)
  return rewardinfoarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastInstanceAchievementRewardInfo >&
TBeastInstanceAchievementInfo::rewardinfoarray() const {
  // @@protoc_insertion_point(field_list:pb.TBeastInstanceAchievementInfo.RewardInfoArray)
  return rewardinfoarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastInstanceAchievementRewardInfo >*
TBeastInstanceAchievementInfo::mutable_rewardinfoarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastInstanceAchievementInfo.RewardInfoArray)
  return &rewardinfoarray_;
}

// -------------------------------------------------------------------

// TBeastInstanceGetBeastInstanceInfoRsp

// repeated .pb.TBeastInstanceChapterInfo ChapterInfoArray = 1;
inline int TBeastInstanceGetBeastInstanceInfoRsp::chapterinfoarray_size() const {
  return chapterinfoarray_.size();
}
inline void TBeastInstanceGetBeastInstanceInfoRsp::clear_chapterinfoarray() {
  chapterinfoarray_.Clear();
}
inline const ::pb::TBeastInstanceChapterInfo& TBeastInstanceGetBeastInstanceInfoRsp::chapterinfoarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceGetBeastInstanceInfoRsp.ChapterInfoArray)
  return chapterinfoarray_.Get(index);
}
inline ::pb::TBeastInstanceChapterInfo* TBeastInstanceGetBeastInstanceInfoRsp::mutable_chapterinfoarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastInstanceGetBeastInstanceInfoRsp.ChapterInfoArray)
  return chapterinfoarray_.Mutable(index);
}
inline ::pb::TBeastInstanceChapterInfo* TBeastInstanceGetBeastInstanceInfoRsp::add_chapterinfoarray() {
  // @@protoc_insertion_point(field_add:pb.TBeastInstanceGetBeastInstanceInfoRsp.ChapterInfoArray)
  return chapterinfoarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastInstanceChapterInfo >&
TBeastInstanceGetBeastInstanceInfoRsp::chapterinfoarray() const {
  // @@protoc_insertion_point(field_list:pb.TBeastInstanceGetBeastInstanceInfoRsp.ChapterInfoArray)
  return chapterinfoarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastInstanceChapterInfo >*
TBeastInstanceGetBeastInstanceInfoRsp::mutable_chapterinfoarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastInstanceGetBeastInstanceInfoRsp.ChapterInfoArray)
  return &chapterinfoarray_;
}

// optional uint32 ChallengeNum = 2;
inline bool TBeastInstanceGetBeastInstanceInfoRsp::has_challengenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastInstanceGetBeastInstanceInfoRsp::set_has_challengenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastInstanceGetBeastInstanceInfoRsp::clear_has_challengenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastInstanceGetBeastInstanceInfoRsp::clear_challengenum() {
  challengenum_ = 0u;
  clear_has_challengenum();
}
inline ::google::protobuf::uint32 TBeastInstanceGetBeastInstanceInfoRsp::challengenum() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceGetBeastInstanceInfoRsp.ChallengeNum)
  return challengenum_;
}
inline void TBeastInstanceGetBeastInstanceInfoRsp::set_challengenum(::google::protobuf::uint32 value) {
  set_has_challengenum();
  challengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceGetBeastInstanceInfoRsp.ChallengeNum)
}

// optional uint32 BuyChallengeNum = 3;
inline bool TBeastInstanceGetBeastInstanceInfoRsp::has_buychallengenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBeastInstanceGetBeastInstanceInfoRsp::set_has_buychallengenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBeastInstanceGetBeastInstanceInfoRsp::clear_has_buychallengenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBeastInstanceGetBeastInstanceInfoRsp::clear_buychallengenum() {
  buychallengenum_ = 0u;
  clear_has_buychallengenum();
}
inline ::google::protobuf::uint32 TBeastInstanceGetBeastInstanceInfoRsp::buychallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceGetBeastInstanceInfoRsp.BuyChallengeNum)
  return buychallengenum_;
}
inline void TBeastInstanceGetBeastInstanceInfoRsp::set_buychallengenum(::google::protobuf::uint32 value) {
  set_has_buychallengenum();
  buychallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceGetBeastInstanceInfoRsp.BuyChallengeNum)
}

// optional uint64 RefreshTime = 4;
inline bool TBeastInstanceGetBeastInstanceInfoRsp::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBeastInstanceGetBeastInstanceInfoRsp::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBeastInstanceGetBeastInstanceInfoRsp::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBeastInstanceGetBeastInstanceInfoRsp::clear_refreshtime() {
  refreshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_refreshtime();
}
inline ::google::protobuf::uint64 TBeastInstanceGetBeastInstanceInfoRsp::refreshtime() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceGetBeastInstanceInfoRsp.RefreshTime)
  return refreshtime_;
}
inline void TBeastInstanceGetBeastInstanceInfoRsp::set_refreshtime(::google::protobuf::uint64 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceGetBeastInstanceInfoRsp.RefreshTime)
}

// optional .pb.TBeastInstanceAchievementInfo AchievementInfo = 5;
inline bool TBeastInstanceGetBeastInstanceInfoRsp::has_achievementinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TBeastInstanceGetBeastInstanceInfoRsp::set_has_achievementinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TBeastInstanceGetBeastInstanceInfoRsp::clear_has_achievementinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TBeastInstanceGetBeastInstanceInfoRsp::clear_achievementinfo() {
  if (achievementinfo_ != NULL) achievementinfo_->::pb::TBeastInstanceAchievementInfo::Clear();
  clear_has_achievementinfo();
}
inline const ::pb::TBeastInstanceAchievementInfo& TBeastInstanceGetBeastInstanceInfoRsp::achievementinfo() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceGetBeastInstanceInfoRsp.AchievementInfo)
  return achievementinfo_ != NULL ? *achievementinfo_ : *default_instance_->achievementinfo_;
}
inline ::pb::TBeastInstanceAchievementInfo* TBeastInstanceGetBeastInstanceInfoRsp::mutable_achievementinfo() {
  set_has_achievementinfo();
  if (achievementinfo_ == NULL) achievementinfo_ = new ::pb::TBeastInstanceAchievementInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBeastInstanceGetBeastInstanceInfoRsp.AchievementInfo)
  return achievementinfo_;
}
inline ::pb::TBeastInstanceAchievementInfo* TBeastInstanceGetBeastInstanceInfoRsp::release_achievementinfo() {
  clear_has_achievementinfo();
  ::pb::TBeastInstanceAchievementInfo* temp = achievementinfo_;
  achievementinfo_ = NULL;
  return temp;
}
inline void TBeastInstanceGetBeastInstanceInfoRsp::set_allocated_achievementinfo(::pb::TBeastInstanceAchievementInfo* achievementinfo) {
  delete achievementinfo_;
  achievementinfo_ = achievementinfo;
  if (achievementinfo) {
    set_has_achievementinfo();
  } else {
    clear_has_achievementinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBeastInstanceGetBeastInstanceInfoRsp.AchievementInfo)
}

// -------------------------------------------------------------------

// TBeastInstanceDoBattleReq

// optional uint32 ChapterId = 1;
inline bool TBeastInstanceDoBattleReq::has_chapterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastInstanceDoBattleReq::set_has_chapterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastInstanceDoBattleReq::clear_has_chapterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastInstanceDoBattleReq::clear_chapterid() {
  chapterid_ = 0u;
  clear_has_chapterid();
}
inline ::google::protobuf::uint32 TBeastInstanceDoBattleReq::chapterid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceDoBattleReq.ChapterId)
  return chapterid_;
}
inline void TBeastInstanceDoBattleReq::set_chapterid(::google::protobuf::uint32 value) {
  set_has_chapterid();
  chapterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceDoBattleReq.ChapterId)
}

// optional uint32 StrongholdId = 2;
inline bool TBeastInstanceDoBattleReq::has_strongholdid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastInstanceDoBattleReq::set_has_strongholdid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastInstanceDoBattleReq::clear_has_strongholdid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastInstanceDoBattleReq::clear_strongholdid() {
  strongholdid_ = 0u;
  clear_has_strongholdid();
}
inline ::google::protobuf::uint32 TBeastInstanceDoBattleReq::strongholdid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceDoBattleReq.StrongholdId)
  return strongholdid_;
}
inline void TBeastInstanceDoBattleReq::set_strongholdid(::google::protobuf::uint32 value) {
  set_has_strongholdid();
  strongholdid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceDoBattleReq.StrongholdId)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 4;
inline bool TBeastInstanceDoBattleReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBeastInstanceDoBattleReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBeastInstanceDoBattleReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBeastInstanceDoBattleReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TBeastInstanceDoBattleReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceDoBattleReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TBeastInstanceDoBattleReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TBeastInstanceDoBattleReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TBeastInstanceDoBattleReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TBeastInstanceDoBattleReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBeastInstanceDoBattleReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TBeastInstanceDoBattleRsp

// repeated .pb.TCommonReward DropArray = 1;
inline int TBeastInstanceDoBattleRsp::droparray_size() const {
  return droparray_.size();
}
inline void TBeastInstanceDoBattleRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TBeastInstanceDoBattleRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceDoBattleRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TBeastInstanceDoBattleRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastInstanceDoBattleRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TBeastInstanceDoBattleRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TBeastInstanceDoBattleRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TBeastInstanceDoBattleRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TBeastInstanceDoBattleRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TBeastInstanceDoBattleRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastInstanceDoBattleRsp.DropArray)
  return &droparray_;
}

// optional .pb.TBattleArgs BattleArgs = 2;
inline bool TBeastInstanceDoBattleRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastInstanceDoBattleRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastInstanceDoBattleRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastInstanceDoBattleRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TBeastInstanceDoBattleRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceDoBattleRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TBeastInstanceDoBattleRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TBeastInstanceDoBattleRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TBeastInstanceDoBattleRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TBeastInstanceDoBattleRsp::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBeastInstanceDoBattleRsp.BattleArgs)
}

// -------------------------------------------------------------------

// TBeastInstanceRaidStrongholdReq

// optional uint32 ChapterId = 1;
inline bool TBeastInstanceRaidStrongholdReq::has_chapterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastInstanceRaidStrongholdReq::set_has_chapterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastInstanceRaidStrongholdReq::clear_has_chapterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastInstanceRaidStrongholdReq::clear_chapterid() {
  chapterid_ = 0u;
  clear_has_chapterid();
}
inline ::google::protobuf::uint32 TBeastInstanceRaidStrongholdReq::chapterid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceRaidStrongholdReq.ChapterId)
  return chapterid_;
}
inline void TBeastInstanceRaidStrongholdReq::set_chapterid(::google::protobuf::uint32 value) {
  set_has_chapterid();
  chapterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceRaidStrongholdReq.ChapterId)
}

// optional uint32 StrongholdId = 2;
inline bool TBeastInstanceRaidStrongholdReq::has_strongholdid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastInstanceRaidStrongholdReq::set_has_strongholdid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastInstanceRaidStrongholdReq::clear_has_strongholdid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastInstanceRaidStrongholdReq::clear_strongholdid() {
  strongholdid_ = 0u;
  clear_has_strongholdid();
}
inline ::google::protobuf::uint32 TBeastInstanceRaidStrongholdReq::strongholdid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceRaidStrongholdReq.StrongholdId)
  return strongholdid_;
}
inline void TBeastInstanceRaidStrongholdReq::set_strongholdid(::google::protobuf::uint32 value) {
  set_has_strongholdid();
  strongholdid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceRaidStrongholdReq.StrongholdId)
}

// -------------------------------------------------------------------

// TBeastInstanceRaidStrongholdRsp

// repeated .pb.TCommonReward DropArray = 1;
inline int TBeastInstanceRaidStrongholdRsp::droparray_size() const {
  return droparray_.size();
}
inline void TBeastInstanceRaidStrongholdRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TBeastInstanceRaidStrongholdRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceRaidStrongholdRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TBeastInstanceRaidStrongholdRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastInstanceRaidStrongholdRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TBeastInstanceRaidStrongholdRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TBeastInstanceRaidStrongholdRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TBeastInstanceRaidStrongholdRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TBeastInstanceRaidStrongholdRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TBeastInstanceRaidStrongholdRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastInstanceRaidStrongholdRsp.DropArray)
  return &droparray_;
}

// -------------------------------------------------------------------

// TBeastInstanceReportBattleReq

// optional uint32 ChapterId = 1;
inline bool TBeastInstanceReportBattleReq::has_chapterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastInstanceReportBattleReq::set_has_chapterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastInstanceReportBattleReq::clear_has_chapterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastInstanceReportBattleReq::clear_chapterid() {
  chapterid_ = 0u;
  clear_has_chapterid();
}
inline ::google::protobuf::uint32 TBeastInstanceReportBattleReq::chapterid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceReportBattleReq.ChapterId)
  return chapterid_;
}
inline void TBeastInstanceReportBattleReq::set_chapterid(::google::protobuf::uint32 value) {
  set_has_chapterid();
  chapterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceReportBattleReq.ChapterId)
}

// optional uint32 StrongholdId = 2;
inline bool TBeastInstanceReportBattleReq::has_strongholdid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastInstanceReportBattleReq::set_has_strongholdid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastInstanceReportBattleReq::clear_has_strongholdid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastInstanceReportBattleReq::clear_strongholdid() {
  strongholdid_ = 0u;
  clear_has_strongholdid();
}
inline ::google::protobuf::uint32 TBeastInstanceReportBattleReq::strongholdid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceReportBattleReq.StrongholdId)
  return strongholdid_;
}
inline void TBeastInstanceReportBattleReq::set_strongholdid(::google::protobuf::uint32 value) {
  set_has_strongholdid();
  strongholdid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceReportBattleReq.StrongholdId)
}

// optional .pb.TBattleResult BattleRet = 3;
inline bool TBeastInstanceReportBattleReq::has_battleret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBeastInstanceReportBattleReq::set_has_battleret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBeastInstanceReportBattleReq::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBeastInstanceReportBattleReq::clear_battleret() {
  if (battleret_ != NULL) battleret_->::pb::TBattleResult::Clear();
  clear_has_battleret();
}
inline const ::pb::TBattleResult& TBeastInstanceReportBattleReq::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceReportBattleReq.BattleRet)
  return battleret_ != NULL ? *battleret_ : *default_instance_->battleret_;
}
inline ::pb::TBattleResult* TBeastInstanceReportBattleReq::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == NULL) battleret_ = new ::pb::TBattleResult;
  // @@protoc_insertion_point(field_mutable:pb.TBeastInstanceReportBattleReq.BattleRet)
  return battleret_;
}
inline ::pb::TBattleResult* TBeastInstanceReportBattleReq::release_battleret() {
  clear_has_battleret();
  ::pb::TBattleResult* temp = battleret_;
  battleret_ = NULL;
  return temp;
}
inline void TBeastInstanceReportBattleReq::set_allocated_battleret(::pb::TBattleResult* battleret) {
  delete battleret_;
  battleret_ = battleret;
  if (battleret) {
    set_has_battleret();
  } else {
    clear_has_battleret();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBeastInstanceReportBattleReq.BattleRet)
}

// optional bytes BattleResultBytes = 4;
inline bool TBeastInstanceReportBattleReq::has_battleresultbytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBeastInstanceReportBattleReq::set_has_battleresultbytes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBeastInstanceReportBattleReq::clear_has_battleresultbytes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBeastInstanceReportBattleReq::clear_battleresultbytes() {
  if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_->clear();
  }
  clear_has_battleresultbytes();
}
inline const ::std::string& TBeastInstanceReportBattleReq::battleresultbytes() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceReportBattleReq.BattleResultBytes)
  return *battleresultbytes_;
}
inline void TBeastInstanceReportBattleReq::set_battleresultbytes(const ::std::string& value) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceReportBattleReq.BattleResultBytes)
}
inline void TBeastInstanceReportBattleReq::set_battleresultbytes(const char* value) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBeastInstanceReportBattleReq.BattleResultBytes)
}
inline void TBeastInstanceReportBattleReq::set_battleresultbytes(const void* value, size_t size) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBeastInstanceReportBattleReq.BattleResultBytes)
}
inline ::std::string* TBeastInstanceReportBattleReq::mutable_battleresultbytes() {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBeastInstanceReportBattleReq.BattleResultBytes)
  return battleresultbytes_;
}
inline ::std::string* TBeastInstanceReportBattleReq::release_battleresultbytes() {
  clear_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleresultbytes_;
    battleresultbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBeastInstanceReportBattleReq::set_allocated_battleresultbytes(::std::string* battleresultbytes) {
  if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresultbytes_;
  }
  if (battleresultbytes) {
    set_has_battleresultbytes();
    battleresultbytes_ = battleresultbytes;
  } else {
    clear_has_battleresultbytes();
    battleresultbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBeastInstanceReportBattleReq.BattleResultBytes)
}

// -------------------------------------------------------------------

// TBeastInstanceReportBattleRsp

// repeated .pb.TCommonReward DropArray = 1;
inline int TBeastInstanceReportBattleRsp::droparray_size() const {
  return droparray_.size();
}
inline void TBeastInstanceReportBattleRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TBeastInstanceReportBattleRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceReportBattleRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TBeastInstanceReportBattleRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastInstanceReportBattleRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TBeastInstanceReportBattleRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TBeastInstanceReportBattleRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TBeastInstanceReportBattleRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TBeastInstanceReportBattleRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TBeastInstanceReportBattleRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastInstanceReportBattleRsp.DropArray)
  return &droparray_;
}

// -------------------------------------------------------------------

// TBeastInstanceReceiveChapterRewardReq

// optional uint32 ChapterId = 1;
inline bool TBeastInstanceReceiveChapterRewardReq::has_chapterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastInstanceReceiveChapterRewardReq::set_has_chapterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastInstanceReceiveChapterRewardReq::clear_has_chapterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastInstanceReceiveChapterRewardReq::clear_chapterid() {
  chapterid_ = 0u;
  clear_has_chapterid();
}
inline ::google::protobuf::uint32 TBeastInstanceReceiveChapterRewardReq::chapterid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceReceiveChapterRewardReq.ChapterId)
  return chapterid_;
}
inline void TBeastInstanceReceiveChapterRewardReq::set_chapterid(::google::protobuf::uint32 value) {
  set_has_chapterid();
  chapterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceReceiveChapterRewardReq.ChapterId)
}

// -------------------------------------------------------------------

// TBeastInstanceReceiveChapterRewardRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TBeastInstanceReceiveChapterRewardRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TBeastInstanceReceiveChapterRewardRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TBeastInstanceReceiveChapterRewardRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceReceiveChapterRewardRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TBeastInstanceReceiveChapterRewardRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastInstanceReceiveChapterRewardRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TBeastInstanceReceiveChapterRewardRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TBeastInstanceReceiveChapterRewardRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TBeastInstanceReceiveChapterRewardRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TBeastInstanceReceiveChapterRewardRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TBeastInstanceReceiveChapterRewardRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastInstanceReceiveChapterRewardRsp.RewardArray)
  return &rewardarray_;
}

// -------------------------------------------------------------------

// TBeastInstanceBuyChallengeNumReq

// optional uint32 Num = 1;
inline bool TBeastInstanceBuyChallengeNumReq::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastInstanceBuyChallengeNumReq::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastInstanceBuyChallengeNumReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastInstanceBuyChallengeNumReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TBeastInstanceBuyChallengeNumReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceBuyChallengeNumReq.Num)
  return num_;
}
inline void TBeastInstanceBuyChallengeNumReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceBuyChallengeNumReq.Num)
}

// -------------------------------------------------------------------

// TBeastInstanceReceiveAchievementRewardReq

// optional uint32 Id = 1;
inline bool TBeastInstanceReceiveAchievementRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastInstanceReceiveAchievementRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastInstanceReceiveAchievementRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastInstanceReceiveAchievementRewardReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TBeastInstanceReceiveAchievementRewardReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceReceiveAchievementRewardReq.Id)
  return id_;
}
inline void TBeastInstanceReceiveAchievementRewardReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceReceiveAchievementRewardReq.Id)
}

// -------------------------------------------------------------------

// TBeastInstanceReceiveAchievementRewardRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TBeastInstanceReceiveAchievementRewardRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TBeastInstanceReceiveAchievementRewardRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TBeastInstanceReceiveAchievementRewardRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceReceiveAchievementRewardRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TBeastInstanceReceiveAchievementRewardRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastInstanceReceiveAchievementRewardRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TBeastInstanceReceiveAchievementRewardRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TBeastInstanceReceiveAchievementRewardRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TBeastInstanceReceiveAchievementRewardRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TBeastInstanceReceiveAchievementRewardRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TBeastInstanceReceiveAchievementRewardRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastInstanceReceiveAchievementRewardRsp.RewardArray)
  return &rewardarray_;
}

// -------------------------------------------------------------------

// TBeastInstanceInfoNotify

// repeated .pb.TBeastInstanceChapterInfo ChapterInfoArray = 1;
inline int TBeastInstanceInfoNotify::chapterinfoarray_size() const {
  return chapterinfoarray_.size();
}
inline void TBeastInstanceInfoNotify::clear_chapterinfoarray() {
  chapterinfoarray_.Clear();
}
inline const ::pb::TBeastInstanceChapterInfo& TBeastInstanceInfoNotify::chapterinfoarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceInfoNotify.ChapterInfoArray)
  return chapterinfoarray_.Get(index);
}
inline ::pb::TBeastInstanceChapterInfo* TBeastInstanceInfoNotify::mutable_chapterinfoarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastInstanceInfoNotify.ChapterInfoArray)
  return chapterinfoarray_.Mutable(index);
}
inline ::pb::TBeastInstanceChapterInfo* TBeastInstanceInfoNotify::add_chapterinfoarray() {
  // @@protoc_insertion_point(field_add:pb.TBeastInstanceInfoNotify.ChapterInfoArray)
  return chapterinfoarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastInstanceChapterInfo >&
TBeastInstanceInfoNotify::chapterinfoarray() const {
  // @@protoc_insertion_point(field_list:pb.TBeastInstanceInfoNotify.ChapterInfoArray)
  return chapterinfoarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastInstanceChapterInfo >*
TBeastInstanceInfoNotify::mutable_chapterinfoarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastInstanceInfoNotify.ChapterInfoArray)
  return &chapterinfoarray_;
}

// optional uint32 ChallengeNum = 2;
inline bool TBeastInstanceInfoNotify::has_challengenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastInstanceInfoNotify::set_has_challengenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastInstanceInfoNotify::clear_has_challengenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastInstanceInfoNotify::clear_challengenum() {
  challengenum_ = 0u;
  clear_has_challengenum();
}
inline ::google::protobuf::uint32 TBeastInstanceInfoNotify::challengenum() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceInfoNotify.ChallengeNum)
  return challengenum_;
}
inline void TBeastInstanceInfoNotify::set_challengenum(::google::protobuf::uint32 value) {
  set_has_challengenum();
  challengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceInfoNotify.ChallengeNum)
}

// optional uint32 BuyChallengeNum = 3;
inline bool TBeastInstanceInfoNotify::has_buychallengenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBeastInstanceInfoNotify::set_has_buychallengenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBeastInstanceInfoNotify::clear_has_buychallengenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBeastInstanceInfoNotify::clear_buychallengenum() {
  buychallengenum_ = 0u;
  clear_has_buychallengenum();
}
inline ::google::protobuf::uint32 TBeastInstanceInfoNotify::buychallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceInfoNotify.BuyChallengeNum)
  return buychallengenum_;
}
inline void TBeastInstanceInfoNotify::set_buychallengenum(::google::protobuf::uint32 value) {
  set_has_buychallengenum();
  buychallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceInfoNotify.BuyChallengeNum)
}

// optional uint64 RefreshTime = 4;
inline bool TBeastInstanceInfoNotify::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBeastInstanceInfoNotify::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBeastInstanceInfoNotify::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBeastInstanceInfoNotify::clear_refreshtime() {
  refreshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_refreshtime();
}
inline ::google::protobuf::uint64 TBeastInstanceInfoNotify::refreshtime() const {
  // @@protoc_insertion_point(field_get:pb.TBeastInstanceInfoNotify.RefreshTime)
  return refreshtime_;
}
inline void TBeastInstanceInfoNotify::set_refreshtime(::google::protobuf::uint64 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastInstanceInfoNotify.RefreshTime)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fBeastInstance_2eproto__INCLUDED
