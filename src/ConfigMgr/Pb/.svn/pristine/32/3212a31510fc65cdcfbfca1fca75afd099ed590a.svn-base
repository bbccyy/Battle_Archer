// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActMainCityWelfare.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActMainCityWelfare.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActMainCityWelfareDropInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActMainCityWelfareDropInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActMainCityWelfareGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActMainCityWelfareGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActMainCityWelfareReceiveGiftReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActMainCityWelfareReceiveGiftReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActMainCityWelfareReceiveGiftRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActMainCityWelfareReceiveGiftRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActMainCityWelfare_2eproto() {
  protobuf_AddDesc_net_2fActMainCityWelfare_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActMainCityWelfare.proto");
  GOOGLE_CHECK(file != NULL);
  TActMainCityWelfareDropInfo_descriptor_ = file->message_type(0);
  static const int TActMainCityWelfareDropInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMainCityWelfareDropInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMainCityWelfareDropInfo, iconid_),
  };
  TActMainCityWelfareDropInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActMainCityWelfareDropInfo_descriptor_,
      TActMainCityWelfareDropInfo::default_instance_,
      TActMainCityWelfareDropInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMainCityWelfareDropInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMainCityWelfareDropInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActMainCityWelfareDropInfo));
  TActMainCityWelfareGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TActMainCityWelfareGetInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMainCityWelfareGetInfoRsp, droparr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMainCityWelfareGetInfoRsp, nextrandomtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMainCityWelfareGetInfoRsp, dailyrefreshtime_),
  };
  TActMainCityWelfareGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActMainCityWelfareGetInfoRsp_descriptor_,
      TActMainCityWelfareGetInfoRsp::default_instance_,
      TActMainCityWelfareGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMainCityWelfareGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMainCityWelfareGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActMainCityWelfareGetInfoRsp));
  TActMainCityWelfareReceiveGiftReq_descriptor_ = file->message_type(2);
  static const int TActMainCityWelfareReceiveGiftReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMainCityWelfareReceiveGiftReq, itemid_),
  };
  TActMainCityWelfareReceiveGiftReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActMainCityWelfareReceiveGiftReq_descriptor_,
      TActMainCityWelfareReceiveGiftReq::default_instance_,
      TActMainCityWelfareReceiveGiftReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMainCityWelfareReceiveGiftReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMainCityWelfareReceiveGiftReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActMainCityWelfareReceiveGiftReq));
  TActMainCityWelfareReceiveGiftRsp_descriptor_ = file->message_type(3);
  static const int TActMainCityWelfareReceiveGiftRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMainCityWelfareReceiveGiftRsp, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMainCityWelfareReceiveGiftRsp, nextrandomtime_),
  };
  TActMainCityWelfareReceiveGiftRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActMainCityWelfareReceiveGiftRsp_descriptor_,
      TActMainCityWelfareReceiveGiftRsp::default_instance_,
      TActMainCityWelfareReceiveGiftRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMainCityWelfareReceiveGiftRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMainCityWelfareReceiveGiftRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActMainCityWelfareReceiveGiftRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActMainCityWelfare_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActMainCityWelfareDropInfo_descriptor_, &TActMainCityWelfareDropInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActMainCityWelfareGetInfoRsp_descriptor_, &TActMainCityWelfareGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActMainCityWelfareReceiveGiftReq_descriptor_, &TActMainCityWelfareReceiveGiftReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActMainCityWelfareReceiveGiftRsp_descriptor_, &TActMainCityWelfareReceiveGiftRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActMainCityWelfare_2eproto() {
  delete TActMainCityWelfareDropInfo::default_instance_;
  delete TActMainCityWelfareDropInfo_reflection_;
  delete TActMainCityWelfareGetInfoRsp::default_instance_;
  delete TActMainCityWelfareGetInfoRsp_reflection_;
  delete TActMainCityWelfareReceiveGiftReq::default_instance_;
  delete TActMainCityWelfareReceiveGiftReq_reflection_;
  delete TActMainCityWelfareReceiveGiftRsp::default_instance_;
  delete TActMainCityWelfareReceiveGiftRsp_reflection_;
}

void protobuf_AddDesc_net_2fActMainCityWelfare_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034net/ActMainCityWelfare.proto\022\002pb\032\026net/"
    "CommonReward.proto\"=\n\033TActMainCityWelfar"
    "eDropInfo\022\016\n\006ItemId\030\001 \001(\r\022\016\n\006IconId\030\002 \001("
    "\r\"\203\001\n\035TActMainCityWelfareGetInfoRsp\0220\n\007D"
    "ropArr\030\001 \003(\0132\037.pb.TActMainCityWelfareDro"
    "pInfo\022\026\n\016NextRandomTime\030\002 \001(\004\022\030\n\020DailyRe"
    "freshTime\030\003 \001(\004\"3\n!TActMainCityWelfareRe"
    "ceiveGiftReq\022\016\n\006ItemId\030\001 \001(\r\"a\n!TActMain"
    "CityWelfareReceiveGiftRsp\022$\n\tRewardArr\030\001"
    " \003(\0132\021.pb.TCommonReward\022\026\n\016NextRandomTim"
    "e\030\002 \001(\004", 407);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActMainCityWelfare.proto", &protobuf_RegisterTypes);
  TActMainCityWelfareDropInfo::default_instance_ = new TActMainCityWelfareDropInfo();
  TActMainCityWelfareGetInfoRsp::default_instance_ = new TActMainCityWelfareGetInfoRsp();
  TActMainCityWelfareReceiveGiftReq::default_instance_ = new TActMainCityWelfareReceiveGiftReq();
  TActMainCityWelfareReceiveGiftRsp::default_instance_ = new TActMainCityWelfareReceiveGiftRsp();
  TActMainCityWelfareDropInfo::default_instance_->InitAsDefaultInstance();
  TActMainCityWelfareGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActMainCityWelfareReceiveGiftReq::default_instance_->InitAsDefaultInstance();
  TActMainCityWelfareReceiveGiftRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActMainCityWelfare_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActMainCityWelfare_2eproto {
  StaticDescriptorInitializer_net_2fActMainCityWelfare_2eproto() {
    protobuf_AddDesc_net_2fActMainCityWelfare_2eproto();
  }
} static_descriptor_initializer_net_2fActMainCityWelfare_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActMainCityWelfareDropInfo::kItemIdFieldNumber;
const int TActMainCityWelfareDropInfo::kIconIdFieldNumber;
#endif  // !_MSC_VER

TActMainCityWelfareDropInfo::TActMainCityWelfareDropInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActMainCityWelfareDropInfo)
}

void TActMainCityWelfareDropInfo::InitAsDefaultInstance() {
}

TActMainCityWelfareDropInfo::TActMainCityWelfareDropInfo(const TActMainCityWelfareDropInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActMainCityWelfareDropInfo)
}

void TActMainCityWelfareDropInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  iconid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActMainCityWelfareDropInfo::~TActMainCityWelfareDropInfo() {
  // @@protoc_insertion_point(destructor:pb.TActMainCityWelfareDropInfo)
  SharedDtor();
}

void TActMainCityWelfareDropInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActMainCityWelfareDropInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActMainCityWelfareDropInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActMainCityWelfareDropInfo_descriptor_;
}

const TActMainCityWelfareDropInfo& TActMainCityWelfareDropInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActMainCityWelfare_2eproto();
  return *default_instance_;
}

TActMainCityWelfareDropInfo* TActMainCityWelfareDropInfo::default_instance_ = NULL;

TActMainCityWelfareDropInfo* TActMainCityWelfareDropInfo::New() const {
  return new TActMainCityWelfareDropInfo;
}

void TActMainCityWelfareDropInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActMainCityWelfareDropInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, iconid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActMainCityWelfareDropInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActMainCityWelfareDropInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IconId;
        break;
      }

      // optional uint32 IconId = 2;
      case 2: {
        if (tag == 16) {
         parse_IconId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iconid_)));
          set_has_iconid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActMainCityWelfareDropInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActMainCityWelfareDropInfo)
  return false;
#undef DO_
}

void TActMainCityWelfareDropInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActMainCityWelfareDropInfo)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 IconId = 2;
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->iconid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActMainCityWelfareDropInfo)
}

::google::protobuf::uint8* TActMainCityWelfareDropInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActMainCityWelfareDropInfo)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 IconId = 2;
  if (has_iconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->iconid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActMainCityWelfareDropInfo)
  return target;
}

int TActMainCityWelfareDropInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 IconId = 2;
    if (has_iconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iconid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActMainCityWelfareDropInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActMainCityWelfareDropInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActMainCityWelfareDropInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActMainCityWelfareDropInfo::MergeFrom(const TActMainCityWelfareDropInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_iconid()) {
      set_iconid(from.iconid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActMainCityWelfareDropInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActMainCityWelfareDropInfo::CopyFrom(const TActMainCityWelfareDropInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActMainCityWelfareDropInfo::IsInitialized() const {

  return true;
}

void TActMainCityWelfareDropInfo::Swap(TActMainCityWelfareDropInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(iconid_, other->iconid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActMainCityWelfareDropInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActMainCityWelfareDropInfo_descriptor_;
  metadata.reflection = TActMainCityWelfareDropInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActMainCityWelfareGetInfoRsp::kDropArrFieldNumber;
const int TActMainCityWelfareGetInfoRsp::kNextRandomTimeFieldNumber;
const int TActMainCityWelfareGetInfoRsp::kDailyRefreshTimeFieldNumber;
#endif  // !_MSC_VER

TActMainCityWelfareGetInfoRsp::TActMainCityWelfareGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActMainCityWelfareGetInfoRsp)
}

void TActMainCityWelfareGetInfoRsp::InitAsDefaultInstance() {
}

TActMainCityWelfareGetInfoRsp::TActMainCityWelfareGetInfoRsp(const TActMainCityWelfareGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActMainCityWelfareGetInfoRsp)
}

void TActMainCityWelfareGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  nextrandomtime_ = GOOGLE_ULONGLONG(0);
  dailyrefreshtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActMainCityWelfareGetInfoRsp::~TActMainCityWelfareGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActMainCityWelfareGetInfoRsp)
  SharedDtor();
}

void TActMainCityWelfareGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActMainCityWelfareGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActMainCityWelfareGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActMainCityWelfareGetInfoRsp_descriptor_;
}

const TActMainCityWelfareGetInfoRsp& TActMainCityWelfareGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActMainCityWelfare_2eproto();
  return *default_instance_;
}

TActMainCityWelfareGetInfoRsp* TActMainCityWelfareGetInfoRsp::default_instance_ = NULL;

TActMainCityWelfareGetInfoRsp* TActMainCityWelfareGetInfoRsp::New() const {
  return new TActMainCityWelfareGetInfoRsp;
}

void TActMainCityWelfareGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActMainCityWelfareGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(nextrandomtime_, dailyrefreshtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  droparr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActMainCityWelfareGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActMainCityWelfareGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActMainCityWelfareDropInfo DropArr = 1;
      case 1: {
        if (tag == 10) {
         parse_DropArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_droparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DropArr;
        if (input->ExpectTag(16)) goto parse_NextRandomTime;
        break;
      }

      // optional uint64 NextRandomTime = 2;
      case 2: {
        if (tag == 16) {
         parse_NextRandomTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nextrandomtime_)));
          set_has_nextrandomtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DailyRefreshTime;
        break;
      }

      // optional uint64 DailyRefreshTime = 3;
      case 3: {
        if (tag == 24) {
         parse_DailyRefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dailyrefreshtime_)));
          set_has_dailyrefreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActMainCityWelfareGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActMainCityWelfareGetInfoRsp)
  return false;
#undef DO_
}

void TActMainCityWelfareGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActMainCityWelfareGetInfoRsp)
  // repeated .pb.TActMainCityWelfareDropInfo DropArr = 1;
  for (int i = 0; i < this->droparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->droparr(i), output);
  }

  // optional uint64 NextRandomTime = 2;
  if (has_nextrandomtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nextrandomtime(), output);
  }

  // optional uint64 DailyRefreshTime = 3;
  if (has_dailyrefreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dailyrefreshtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActMainCityWelfareGetInfoRsp)
}

::google::protobuf::uint8* TActMainCityWelfareGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActMainCityWelfareGetInfoRsp)
  // repeated .pb.TActMainCityWelfareDropInfo DropArr = 1;
  for (int i = 0; i < this->droparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->droparr(i), target);
  }

  // optional uint64 NextRandomTime = 2;
  if (has_nextrandomtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nextrandomtime(), target);
  }

  // optional uint64 DailyRefreshTime = 3;
  if (has_dailyrefreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dailyrefreshtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActMainCityWelfareGetInfoRsp)
  return target;
}

int TActMainCityWelfareGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 NextRandomTime = 2;
    if (has_nextrandomtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nextrandomtime());
    }

    // optional uint64 DailyRefreshTime = 3;
    if (has_dailyrefreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dailyrefreshtime());
    }

  }
  // repeated .pb.TActMainCityWelfareDropInfo DropArr = 1;
  total_size += 1 * this->droparr_size();
  for (int i = 0; i < this->droparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->droparr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActMainCityWelfareGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActMainCityWelfareGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActMainCityWelfareGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActMainCityWelfareGetInfoRsp::MergeFrom(const TActMainCityWelfareGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  droparr_.MergeFrom(from.droparr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_nextrandomtime()) {
      set_nextrandomtime(from.nextrandomtime());
    }
    if (from.has_dailyrefreshtime()) {
      set_dailyrefreshtime(from.dailyrefreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActMainCityWelfareGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActMainCityWelfareGetInfoRsp::CopyFrom(const TActMainCityWelfareGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActMainCityWelfareGetInfoRsp::IsInitialized() const {

  return true;
}

void TActMainCityWelfareGetInfoRsp::Swap(TActMainCityWelfareGetInfoRsp* other) {
  if (other != this) {
    droparr_.Swap(&other->droparr_);
    std::swap(nextrandomtime_, other->nextrandomtime_);
    std::swap(dailyrefreshtime_, other->dailyrefreshtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActMainCityWelfareGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActMainCityWelfareGetInfoRsp_descriptor_;
  metadata.reflection = TActMainCityWelfareGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActMainCityWelfareReceiveGiftReq::kItemIdFieldNumber;
#endif  // !_MSC_VER

TActMainCityWelfareReceiveGiftReq::TActMainCityWelfareReceiveGiftReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActMainCityWelfareReceiveGiftReq)
}

void TActMainCityWelfareReceiveGiftReq::InitAsDefaultInstance() {
}

TActMainCityWelfareReceiveGiftReq::TActMainCityWelfareReceiveGiftReq(const TActMainCityWelfareReceiveGiftReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActMainCityWelfareReceiveGiftReq)
}

void TActMainCityWelfareReceiveGiftReq::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActMainCityWelfareReceiveGiftReq::~TActMainCityWelfareReceiveGiftReq() {
  // @@protoc_insertion_point(destructor:pb.TActMainCityWelfareReceiveGiftReq)
  SharedDtor();
}

void TActMainCityWelfareReceiveGiftReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActMainCityWelfareReceiveGiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActMainCityWelfareReceiveGiftReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActMainCityWelfareReceiveGiftReq_descriptor_;
}

const TActMainCityWelfareReceiveGiftReq& TActMainCityWelfareReceiveGiftReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActMainCityWelfare_2eproto();
  return *default_instance_;
}

TActMainCityWelfareReceiveGiftReq* TActMainCityWelfareReceiveGiftReq::default_instance_ = NULL;

TActMainCityWelfareReceiveGiftReq* TActMainCityWelfareReceiveGiftReq::New() const {
  return new TActMainCityWelfareReceiveGiftReq;
}

void TActMainCityWelfareReceiveGiftReq::Clear() {
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActMainCityWelfareReceiveGiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActMainCityWelfareReceiveGiftReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActMainCityWelfareReceiveGiftReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActMainCityWelfareReceiveGiftReq)
  return false;
#undef DO_
}

void TActMainCityWelfareReceiveGiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActMainCityWelfareReceiveGiftReq)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActMainCityWelfareReceiveGiftReq)
}

::google::protobuf::uint8* TActMainCityWelfareReceiveGiftReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActMainCityWelfareReceiveGiftReq)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActMainCityWelfareReceiveGiftReq)
  return target;
}

int TActMainCityWelfareReceiveGiftReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActMainCityWelfareReceiveGiftReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActMainCityWelfareReceiveGiftReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActMainCityWelfareReceiveGiftReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActMainCityWelfareReceiveGiftReq::MergeFrom(const TActMainCityWelfareReceiveGiftReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActMainCityWelfareReceiveGiftReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActMainCityWelfareReceiveGiftReq::CopyFrom(const TActMainCityWelfareReceiveGiftReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActMainCityWelfareReceiveGiftReq::IsInitialized() const {

  return true;
}

void TActMainCityWelfareReceiveGiftReq::Swap(TActMainCityWelfareReceiveGiftReq* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActMainCityWelfareReceiveGiftReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActMainCityWelfareReceiveGiftReq_descriptor_;
  metadata.reflection = TActMainCityWelfareReceiveGiftReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActMainCityWelfareReceiveGiftRsp::kRewardArrFieldNumber;
const int TActMainCityWelfareReceiveGiftRsp::kNextRandomTimeFieldNumber;
#endif  // !_MSC_VER

TActMainCityWelfareReceiveGiftRsp::TActMainCityWelfareReceiveGiftRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActMainCityWelfareReceiveGiftRsp)
}

void TActMainCityWelfareReceiveGiftRsp::InitAsDefaultInstance() {
}

TActMainCityWelfareReceiveGiftRsp::TActMainCityWelfareReceiveGiftRsp(const TActMainCityWelfareReceiveGiftRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActMainCityWelfareReceiveGiftRsp)
}

void TActMainCityWelfareReceiveGiftRsp::SharedCtor() {
  _cached_size_ = 0;
  nextrandomtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActMainCityWelfareReceiveGiftRsp::~TActMainCityWelfareReceiveGiftRsp() {
  // @@protoc_insertion_point(destructor:pb.TActMainCityWelfareReceiveGiftRsp)
  SharedDtor();
}

void TActMainCityWelfareReceiveGiftRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActMainCityWelfareReceiveGiftRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActMainCityWelfareReceiveGiftRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActMainCityWelfareReceiveGiftRsp_descriptor_;
}

const TActMainCityWelfareReceiveGiftRsp& TActMainCityWelfareReceiveGiftRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActMainCityWelfare_2eproto();
  return *default_instance_;
}

TActMainCityWelfareReceiveGiftRsp* TActMainCityWelfareReceiveGiftRsp::default_instance_ = NULL;

TActMainCityWelfareReceiveGiftRsp* TActMainCityWelfareReceiveGiftRsp::New() const {
  return new TActMainCityWelfareReceiveGiftRsp;
}

void TActMainCityWelfareReceiveGiftRsp::Clear() {
  nextrandomtime_ = GOOGLE_ULONGLONG(0);
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActMainCityWelfareReceiveGiftRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActMainCityWelfareReceiveGiftRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectTag(16)) goto parse_NextRandomTime;
        break;
      }

      // optional uint64 NextRandomTime = 2;
      case 2: {
        if (tag == 16) {
         parse_NextRandomTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nextrandomtime_)));
          set_has_nextrandomtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActMainCityWelfareReceiveGiftRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActMainCityWelfareReceiveGiftRsp)
  return false;
#undef DO_
}

void TActMainCityWelfareReceiveGiftRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActMainCityWelfareReceiveGiftRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  // optional uint64 NextRandomTime = 2;
  if (has_nextrandomtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nextrandomtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActMainCityWelfareReceiveGiftRsp)
}

::google::protobuf::uint8* TActMainCityWelfareReceiveGiftRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActMainCityWelfareReceiveGiftRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  // optional uint64 NextRandomTime = 2;
  if (has_nextrandomtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nextrandomtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActMainCityWelfareReceiveGiftRsp)
  return target;
}

int TActMainCityWelfareReceiveGiftRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 NextRandomTime = 2;
    if (has_nextrandomtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nextrandomtime());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActMainCityWelfareReceiveGiftRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActMainCityWelfareReceiveGiftRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActMainCityWelfareReceiveGiftRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActMainCityWelfareReceiveGiftRsp::MergeFrom(const TActMainCityWelfareReceiveGiftRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_nextrandomtime()) {
      set_nextrandomtime(from.nextrandomtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActMainCityWelfareReceiveGiftRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActMainCityWelfareReceiveGiftRsp::CopyFrom(const TActMainCityWelfareReceiveGiftRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActMainCityWelfareReceiveGiftRsp::IsInitialized() const {

  return true;
}

void TActMainCityWelfareReceiveGiftRsp::Swap(TActMainCityWelfareReceiveGiftRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(nextrandomtime_, other->nextrandomtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActMainCityWelfareReceiveGiftRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActMainCityWelfareReceiveGiftRsp_descriptor_;
  metadata.reflection = TActMainCityWelfareReceiveGiftRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
