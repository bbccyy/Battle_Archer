// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/LayerFight.proto

#ifndef PROTOBUF_net_2fLayerFight_2eproto__INCLUDED
#define PROTOBUF_net_2fLayerFight_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
#include "net/Mirror.pb.h"
#include "net/Battle.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fLayerFight_2eproto();
void protobuf_AssignDesc_net_2fLayerFight_2eproto();
void protobuf_ShutdownFile_net_2fLayerFight_2eproto();

class TLayerFightStrongholdInfo;
class TLayerFightMapInfo;
class TLayerFightAchievementInfo;
class TLayerFightInfo;
class TLayerFightGetInfoRsp;
class TLayerFightGetInfoNotify;
class TLayerFightDoBattleReq;
class TLayerFightDoBattleRsp;
class TLayerFightGetAchievementRewardReq;
class TLayerFightGetAchievementRewardRsp;
class TLayerFightSetSquadReq;
class TLayerFightQuickPassReq;
class TLayerFightQuickPassRsp;
class TLayerFightGetMapInfoReq;
class TLayerFightGetMapInfoRsp;
class TLayerFightGetSquadArrInfoRsp;
class TLayerFightGetStrongHoldInfoReq;
class TLayerFightGetStrongHoldInfoRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TLayerFightStrongholdInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LayerFight.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLayerFightStrongholdInfo : public ::google::protobuf::Message {
 public:
  TLayerFightStrongholdInfo();
  virtual ~TLayerFightStrongholdInfo();

  TLayerFightStrongholdInfo(const TLayerFightStrongholdInfo& from);

  inline TLayerFightStrongholdInfo& operator=(const TLayerFightStrongholdInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLayerFightStrongholdInfo& default_instance();

  void Swap(TLayerFightStrongholdInfo* other);

  // implements Message ----------------------------------------------

  TLayerFightStrongholdInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLayerFightStrongholdInfo& from);
  void MergeFrom(const TLayerFightStrongholdInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 StrongholdId = 1;
  inline bool has_strongholdid() const;
  inline void clear_strongholdid();
  static const int kStrongholdIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightStrongholdInfo</name>
  	<Function>
  		<name>strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 strongholdid() const;
  inline void set_strongholdid(::google::protobuf::uint32 value);

  // optional .pb.TMirrorInfo Mirror = 2;
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightStrongholdInfo</name>
  	<Function>
  		<name>mirror</name>
  		<replaceName>Mirror</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mirror</name>
  		<replaceName>Mirror</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_mirror</name>
  		<replaceName>Mirror</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mirror</name>
  		<replaceName>Mirror</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TMirrorInfo& mirror() const;
  inline ::pb::TMirrorInfo* mutable_mirror();
  inline ::pb::TMirrorInfo* release_mirror();
  inline void set_allocated_mirror(::pb::TMirrorInfo* mirror);

  // optional string ServerId = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightStrongholdInfo</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional uint64 StrongholdCompleteTime = 4;
  inline bool has_strongholdcompletetime() const;
  inline void clear_strongholdcompletetime();
  static const int kStrongholdCompleteTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightStrongholdInfo</name>
  	<Function>
  		<name>strongholdcompletetime</name>
  		<replaceName>StrongholdCompleteTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strongholdcompletetime</name>
  		<replaceName>StrongholdCompleteTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdcompletetime</name>
  		<replaceName>StrongholdCompleteTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 strongholdcompletetime() const;
  inline void set_strongholdcompletetime(::google::protobuf::uint64 value);

  // optional uint32 StrongholdCompleteNum = 5;
  inline bool has_strongholdcompletenum() const;
  inline void clear_strongholdcompletenum();
  static const int kStrongholdCompleteNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightStrongholdInfo</name>
  	<Function>
  		<name>strongholdcompletenum</name>
  		<replaceName>StrongholdCompleteNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strongholdcompletenum</name>
  		<replaceName>StrongholdCompleteNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdcompletenum</name>
  		<replaceName>StrongholdCompleteNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 strongholdcompletenum() const;
  inline void set_strongholdcompletenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLayerFightStrongholdInfo)
 private:
  inline void set_has_strongholdid();
  inline void clear_has_strongholdid();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_strongholdcompletetime();
  inline void clear_has_strongholdcompletetime();
  inline void set_has_strongholdcompletenum();
  inline void clear_has_strongholdcompletenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TMirrorInfo* mirror_;
  ::std::string* serverid_;
  ::google::protobuf::uint32 strongholdid_;
  ::google::protobuf::uint32 strongholdcompletenum_;
  ::google::protobuf::uint64 strongholdcompletetime_;
  friend void  protobuf_AddDesc_net_2fLayerFight_2eproto();
  friend void protobuf_AssignDesc_net_2fLayerFight_2eproto();
  friend void protobuf_ShutdownFile_net_2fLayerFight_2eproto();

  void InitAsDefaultInstance();
  static TLayerFightStrongholdInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLayerFightMapInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LayerFight.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLayerFightMapInfo : public ::google::protobuf::Message {
 public:
  TLayerFightMapInfo();
  virtual ~TLayerFightMapInfo();

  TLayerFightMapInfo(const TLayerFightMapInfo& from);

  inline TLayerFightMapInfo& operator=(const TLayerFightMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLayerFightMapInfo& default_instance();

  void Swap(TLayerFightMapInfo* other);

  // implements Message ----------------------------------------------

  TLayerFightMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLayerFightMapInfo& from);
  void MergeFrom(const TLayerFightMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapID = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightMapInfo</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // repeated .pb.TLayerFightStrongholdInfo StrongholdInfoArr = 2;
  inline int strongholdinfoarr_size() const;
  inline void clear_strongholdinfoarr();
  static const int kStrongholdInfoArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightMapInfo</name>
  	<Function>
  		<name>strongholdinfoarr</name>
  		<replaceName>StrongholdInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_strongholdinfoarr</name>
  		<replaceName>StrongholdInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_strongholdinfoarr</name>
  		<replaceName>StrongholdInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdinfoarr</name>
  		<replaceName>StrongholdInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>strongholdinfoarr_size</name>
  		<replaceName>StrongholdInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLayerFightStrongholdInfo& strongholdinfoarr(int index) const;
  inline ::pb::TLayerFightStrongholdInfo* mutable_strongholdinfoarr(int index);
  inline ::pb::TLayerFightStrongholdInfo* add_strongholdinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightStrongholdInfo >&
      strongholdinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightStrongholdInfo >*
      mutable_strongholdinfoarr();

  // optional uint64 MapCompleteTime = 3;
  inline bool has_mapcompletetime() const;
  inline void clear_mapcompletetime();
  static const int kMapCompleteTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightMapInfo</name>
  	<Function>
  		<name>mapcompletetime</name>
  		<replaceName>MapCompleteTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapcompletetime</name>
  		<replaceName>MapCompleteTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapcompletetime</name>
  		<replaceName>MapCompleteTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mapcompletetime() const;
  inline void set_mapcompletetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TLayerFightMapInfo)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_mapcompletetime();
  inline void clear_has_mapcompletetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightStrongholdInfo > strongholdinfoarr_;
  ::google::protobuf::uint64 mapcompletetime_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_net_2fLayerFight_2eproto();
  friend void protobuf_AssignDesc_net_2fLayerFight_2eproto();
  friend void protobuf_ShutdownFile_net_2fLayerFight_2eproto();

  void InitAsDefaultInstance();
  static TLayerFightMapInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLayerFightAchievementInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LayerFight.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLayerFightAchievementInfo : public ::google::protobuf::Message {
 public:
  TLayerFightAchievementInfo();
  virtual ~TLayerFightAchievementInfo();

  TLayerFightAchievementInfo(const TLayerFightAchievementInfo& from);

  inline TLayerFightAchievementInfo& operator=(const TLayerFightAchievementInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLayerFightAchievementInfo& default_instance();

  void Swap(TLayerFightAchievementInfo* other);

  // implements Message ----------------------------------------------

  TLayerFightAchievementInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLayerFightAchievementInfo& from);
  void MergeFrom(const TLayerFightAchievementInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightAchievementInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 RewardTime = 2;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightAchievementInfo</name>
  	<Function>
  		<name>rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TLayerFightAchievementInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rewardtime_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fLayerFight_2eproto();
  friend void protobuf_AssignDesc_net_2fLayerFight_2eproto();
  friend void protobuf_ShutdownFile_net_2fLayerFight_2eproto();

  void InitAsDefaultInstance();
  static TLayerFightAchievementInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLayerFightInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LayerFight.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLayerFightInfo : public ::google::protobuf::Message {
 public:
  TLayerFightInfo();
  virtual ~TLayerFightInfo();

  TLayerFightInfo(const TLayerFightInfo& from);

  inline TLayerFightInfo& operator=(const TLayerFightInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLayerFightInfo& default_instance();

  void Swap(TLayerFightInfo* other);

  // implements Message ----------------------------------------------

  TLayerFightInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLayerFightInfo& from);
  void MergeFrom(const TLayerFightInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 SquadArr = 1;
  inline int squadarr_size() const;
  inline void clear_squadarr();
  static const int kSquadArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightInfo</name>
  	<Function>
  		<name>squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squadarr_size</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 squadarr(int index) const;
  inline void set_squadarr(int index, ::google::protobuf::uint32 value);
  inline void add_squadarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      squadarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_squadarr();

  // repeated .pb.TLayerFightMapInfo MapInfo = 2;
  inline int mapinfo_size() const;
  inline void clear_mapinfo();
  static const int kMapInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightInfo</name>
  	<Function>
  		<name>mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mapinfo_size</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLayerFightMapInfo& mapinfo(int index) const;
  inline ::pb::TLayerFightMapInfo* mutable_mapinfo(int index);
  inline ::pb::TLayerFightMapInfo* add_mapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightMapInfo >&
      mapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightMapInfo >*
      mutable_mapinfo();

  // optional uint32 UsedChallengeNum = 3;
  inline bool has_usedchallengenum() const;
  inline void clear_usedchallengenum();
  static const int kUsedChallengeNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightInfo</name>
  	<Function>
  		<name>usedchallengenum</name>
  		<replaceName>UsedChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usedchallengenum</name>
  		<replaceName>UsedChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usedchallengenum</name>
  		<replaceName>UsedChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 usedchallengenum() const;
  inline void set_usedchallengenum(::google::protobuf::uint32 value);

  // repeated .pb.TLayerFightAchievementInfo AchievementInfoArr = 4;
  inline int achievementinfoarr_size() const;
  inline void clear_achievementinfoarr();
  static const int kAchievementInfoArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightInfo</name>
  	<Function>
  		<name>achievementinfoarr</name>
  		<replaceName>AchievementInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_achievementinfoarr</name>
  		<replaceName>AchievementInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_achievementinfoarr</name>
  		<replaceName>AchievementInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_achievementinfoarr</name>
  		<replaceName>AchievementInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>achievementinfoarr_size</name>
  		<replaceName>AchievementInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLayerFightAchievementInfo& achievementinfoarr(int index) const;
  inline ::pb::TLayerFightAchievementInfo* mutable_achievementinfoarr(int index);
  inline ::pb::TLayerFightAchievementInfo* add_achievementinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightAchievementInfo >&
      achievementinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightAchievementInfo >*
      mutable_achievementinfoarr();

  // optional uint32 NowStrongholdId = 5;
  inline bool has_nowstrongholdid() const;
  inline void clear_nowstrongholdid();
  static const int kNowStrongholdIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightInfo</name>
  	<Function>
  		<name>nowstrongholdid</name>
  		<replaceName>NowStrongholdId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_nowstrongholdid</name>
  		<replaceName>NowStrongholdId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nowstrongholdid</name>
  		<replaceName>NowStrongholdId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 nowstrongholdid() const;
  inline void set_nowstrongholdid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLayerFightInfo)
 private:
  inline void set_has_usedchallengenum();
  inline void clear_has_usedchallengenum();
  inline void set_has_nowstrongholdid();
  inline void clear_has_nowstrongholdid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > squadarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightMapInfo > mapinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightAchievementInfo > achievementinfoarr_;
  ::google::protobuf::uint32 usedchallengenum_;
  ::google::protobuf::uint32 nowstrongholdid_;
  friend void  protobuf_AddDesc_net_2fLayerFight_2eproto();
  friend void protobuf_AssignDesc_net_2fLayerFight_2eproto();
  friend void protobuf_ShutdownFile_net_2fLayerFight_2eproto();

  void InitAsDefaultInstance();
  static TLayerFightInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLayerFightGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LayerFight.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLayerFightGetInfoRsp : public ::google::protobuf::Message {
 public:
  TLayerFightGetInfoRsp();
  virtual ~TLayerFightGetInfoRsp();

  TLayerFightGetInfoRsp(const TLayerFightGetInfoRsp& from);

  inline TLayerFightGetInfoRsp& operator=(const TLayerFightGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLayerFightGetInfoRsp& default_instance();

  void Swap(TLayerFightGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TLayerFightGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLayerFightGetInfoRsp& from);
  void MergeFrom(const TLayerFightGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TLayerFightInfo Info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightGetInfoRsp</name>
  	<Function>
  		<name>info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLayerFightInfo& info() const;
  inline ::pb::TLayerFightInfo* mutable_info();
  inline ::pb::TLayerFightInfo* release_info();
  inline void set_allocated_info(::pb::TLayerFightInfo* info);

  // @@protoc_insertion_point(class_scope:pb.TLayerFightGetInfoRsp)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TLayerFightInfo* info_;
  friend void  protobuf_AddDesc_net_2fLayerFight_2eproto();
  friend void protobuf_AssignDesc_net_2fLayerFight_2eproto();
  friend void protobuf_ShutdownFile_net_2fLayerFight_2eproto();

  void InitAsDefaultInstance();
  static TLayerFightGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLayerFightGetInfoNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LayerFight.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLayerFightGetInfoNotify : public ::google::protobuf::Message {
 public:
  TLayerFightGetInfoNotify();
  virtual ~TLayerFightGetInfoNotify();

  TLayerFightGetInfoNotify(const TLayerFightGetInfoNotify& from);

  inline TLayerFightGetInfoNotify& operator=(const TLayerFightGetInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLayerFightGetInfoNotify& default_instance();

  void Swap(TLayerFightGetInfoNotify* other);

  // implements Message ----------------------------------------------

  TLayerFightGetInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLayerFightGetInfoNotify& from);
  void MergeFrom(const TLayerFightGetInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 UsedChallengeNum = 1;
  inline bool has_usedchallengenum() const;
  inline void clear_usedchallengenum();
  static const int kUsedChallengeNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightGetInfoNotify</name>
  	<Function>
  		<name>usedchallengenum</name>
  		<replaceName>UsedChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usedchallengenum</name>
  		<replaceName>UsedChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usedchallengenum</name>
  		<replaceName>UsedChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 usedchallengenum() const;
  inline void set_usedchallengenum(::google::protobuf::uint32 value);

  // repeated .pb.TLayerFightStrongholdInfo StrongHoldInfoArr = 2;
  inline int strongholdinfoarr_size() const;
  inline void clear_strongholdinfoarr();
  static const int kStrongHoldInfoArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightGetInfoNotify</name>
  	<Function>
  		<name>strongholdinfoarr</name>
  		<replaceName>StrongHoldInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_strongholdinfoarr</name>
  		<replaceName>StrongHoldInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_strongholdinfoarr</name>
  		<replaceName>StrongHoldInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdinfoarr</name>
  		<replaceName>StrongHoldInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>strongholdinfoarr_size</name>
  		<replaceName>StrongHoldInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLayerFightStrongholdInfo& strongholdinfoarr(int index) const;
  inline ::pb::TLayerFightStrongholdInfo* mutable_strongholdinfoarr(int index);
  inline ::pb::TLayerFightStrongholdInfo* add_strongholdinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightStrongholdInfo >&
      strongholdinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightStrongholdInfo >*
      mutable_strongholdinfoarr();

  // repeated .pb.TLayerFightAchievementInfo AchievementInfoArr = 3;
  inline int achievementinfoarr_size() const;
  inline void clear_achievementinfoarr();
  static const int kAchievementInfoArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightGetInfoNotify</name>
  	<Function>
  		<name>achievementinfoarr</name>
  		<replaceName>AchievementInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_achievementinfoarr</name>
  		<replaceName>AchievementInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_achievementinfoarr</name>
  		<replaceName>AchievementInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_achievementinfoarr</name>
  		<replaceName>AchievementInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>achievementinfoarr_size</name>
  		<replaceName>AchievementInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLayerFightAchievementInfo& achievementinfoarr(int index) const;
  inline ::pb::TLayerFightAchievementInfo* mutable_achievementinfoarr(int index);
  inline ::pb::TLayerFightAchievementInfo* add_achievementinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightAchievementInfo >&
      achievementinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightAchievementInfo >*
      mutable_achievementinfoarr();

  // optional uint32 NowStrongholdId = 4;
  inline bool has_nowstrongholdid() const;
  inline void clear_nowstrongholdid();
  static const int kNowStrongholdIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightGetInfoNotify</name>
  	<Function>
  		<name>nowstrongholdid</name>
  		<replaceName>NowStrongholdId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_nowstrongholdid</name>
  		<replaceName>NowStrongholdId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nowstrongholdid</name>
  		<replaceName>NowStrongholdId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 nowstrongholdid() const;
  inline void set_nowstrongholdid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLayerFightGetInfoNotify)
 private:
  inline void set_has_usedchallengenum();
  inline void clear_has_usedchallengenum();
  inline void set_has_nowstrongholdid();
  inline void clear_has_nowstrongholdid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightStrongholdInfo > strongholdinfoarr_;
  ::google::protobuf::uint32 usedchallengenum_;
  ::google::protobuf::uint32 nowstrongholdid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightAchievementInfo > achievementinfoarr_;
  friend void  protobuf_AddDesc_net_2fLayerFight_2eproto();
  friend void protobuf_AssignDesc_net_2fLayerFight_2eproto();
  friend void protobuf_ShutdownFile_net_2fLayerFight_2eproto();

  void InitAsDefaultInstance();
  static TLayerFightGetInfoNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLayerFightDoBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LayerFight.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLayerFightDoBattleReq : public ::google::protobuf::Message {
 public:
  TLayerFightDoBattleReq();
  virtual ~TLayerFightDoBattleReq();

  TLayerFightDoBattleReq(const TLayerFightDoBattleReq& from);

  inline TLayerFightDoBattleReq& operator=(const TLayerFightDoBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLayerFightDoBattleReq& default_instance();

  void Swap(TLayerFightDoBattleReq* other);

  // implements Message ----------------------------------------------

  TLayerFightDoBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLayerFightDoBattleReq& from);
  void MergeFrom(const TLayerFightDoBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightDoBattleReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 IsQuickBattle = 2;
  inline bool has_isquickbattle() const;
  inline void clear_isquickbattle();
  static const int kIsQuickBattleFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightDoBattleReq</name>
  	<Function>
  		<name>isquickbattle</name>
  		<replaceName>IsQuickBattle</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isquickbattle</name>
  		<replaceName>IsQuickBattle</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isquickbattle</name>
  		<replaceName>IsQuickBattle</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isquickbattle() const;
  inline void set_isquickbattle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLayerFightDoBattleReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_isquickbattle();
  inline void clear_has_isquickbattle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 isquickbattle_;
  friend void  protobuf_AddDesc_net_2fLayerFight_2eproto();
  friend void protobuf_AssignDesc_net_2fLayerFight_2eproto();
  friend void protobuf_ShutdownFile_net_2fLayerFight_2eproto();

  void InitAsDefaultInstance();
  static TLayerFightDoBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLayerFightDoBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LayerFight.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLayerFightDoBattleRsp : public ::google::protobuf::Message {
 public:
  TLayerFightDoBattleRsp();
  virtual ~TLayerFightDoBattleRsp();

  TLayerFightDoBattleRsp(const TLayerFightDoBattleRsp& from);

  inline TLayerFightDoBattleRsp& operator=(const TLayerFightDoBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLayerFightDoBattleRsp& default_instance();

  void Swap(TLayerFightDoBattleRsp* other);

  // implements Message ----------------------------------------------

  TLayerFightDoBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLayerFightDoBattleRsp& from);
  void MergeFrom(const TLayerFightDoBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 IsWin = 1;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightDoBattleRsp</name>
  	<Function>
  		<name>iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 iswin() const;
  inline void set_iswin(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward RewardArr = 2;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightDoBattleRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional uint32 IsFirstWin = 3;
  inline bool has_isfirstwin() const;
  inline void clear_isfirstwin();
  static const int kIsFirstWinFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightDoBattleRsp</name>
  	<Function>
  		<name>isfirstwin</name>
  		<replaceName>IsFirstWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isfirstwin</name>
  		<replaceName>IsFirstWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isfirstwin</name>
  		<replaceName>IsFirstWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isfirstwin() const;
  inline void set_isfirstwin(::google::protobuf::uint32 value);

  // optional .pb.TBattleResult BattleResult = 4;
  inline bool has_battleresult() const;
  inline void clear_battleresult();
  static const int kBattleResultFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightDoBattleRsp</name>
  	<Function>
  		<name>battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& battleresult() const;
  inline ::pb::TBattleResult* mutable_battleresult();
  inline ::pb::TBattleResult* release_battleresult();
  inline void set_allocated_battleresult(::pb::TBattleResult* battleresult);

  // @@protoc_insertion_point(class_scope:pb.TLayerFightDoBattleRsp)
 private:
  inline void set_has_iswin();
  inline void clear_has_iswin();
  inline void set_has_isfirstwin();
  inline void clear_has_isfirstwin();
  inline void set_has_battleresult();
  inline void clear_has_battleresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 iswin_;
  ::google::protobuf::uint32 isfirstwin_;
  ::pb::TBattleResult* battleresult_;
  friend void  protobuf_AddDesc_net_2fLayerFight_2eproto();
  friend void protobuf_AssignDesc_net_2fLayerFight_2eproto();
  friend void protobuf_ShutdownFile_net_2fLayerFight_2eproto();

  void InitAsDefaultInstance();
  static TLayerFightDoBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLayerFightGetAchievementRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LayerFight.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLayerFightGetAchievementRewardReq : public ::google::protobuf::Message {
 public:
  TLayerFightGetAchievementRewardReq();
  virtual ~TLayerFightGetAchievementRewardReq();

  TLayerFightGetAchievementRewardReq(const TLayerFightGetAchievementRewardReq& from);

  inline TLayerFightGetAchievementRewardReq& operator=(const TLayerFightGetAchievementRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLayerFightGetAchievementRewardReq& default_instance();

  void Swap(TLayerFightGetAchievementRewardReq* other);

  // implements Message ----------------------------------------------

  TLayerFightGetAchievementRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLayerFightGetAchievementRewardReq& from);
  void MergeFrom(const TLayerFightGetAchievementRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightGetAchievementRewardReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLayerFightGetAchievementRewardReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fLayerFight_2eproto();
  friend void protobuf_AssignDesc_net_2fLayerFight_2eproto();
  friend void protobuf_ShutdownFile_net_2fLayerFight_2eproto();

  void InitAsDefaultInstance();
  static TLayerFightGetAchievementRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLayerFightGetAchievementRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LayerFight.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLayerFightGetAchievementRewardRsp : public ::google::protobuf::Message {
 public:
  TLayerFightGetAchievementRewardRsp();
  virtual ~TLayerFightGetAchievementRewardRsp();

  TLayerFightGetAchievementRewardRsp(const TLayerFightGetAchievementRewardRsp& from);

  inline TLayerFightGetAchievementRewardRsp& operator=(const TLayerFightGetAchievementRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLayerFightGetAchievementRewardRsp& default_instance();

  void Swap(TLayerFightGetAchievementRewardRsp* other);

  // implements Message ----------------------------------------------

  TLayerFightGetAchievementRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLayerFightGetAchievementRewardRsp& from);
  void MergeFrom(const TLayerFightGetAchievementRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightGetAchievementRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TLayerFightGetAchievementRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fLayerFight_2eproto();
  friend void protobuf_AssignDesc_net_2fLayerFight_2eproto();
  friend void protobuf_ShutdownFile_net_2fLayerFight_2eproto();

  void InitAsDefaultInstance();
  static TLayerFightGetAchievementRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLayerFightSetSquadReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LayerFight.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLayerFightSetSquadReq : public ::google::protobuf::Message {
 public:
  TLayerFightSetSquadReq();
  virtual ~TLayerFightSetSquadReq();

  TLayerFightSetSquadReq(const TLayerFightSetSquadReq& from);

  inline TLayerFightSetSquadReq& operator=(const TLayerFightSetSquadReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLayerFightSetSquadReq& default_instance();

  void Swap(TLayerFightSetSquadReq* other);

  // implements Message ----------------------------------------------

  TLayerFightSetSquadReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLayerFightSetSquadReq& from);
  void MergeFrom(const TLayerFightSetSquadReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 Squad = 1;
  inline int squad_size() const;
  inline void clear_squad();
  static const int kSquadFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightSetSquadReq</name>
  	<Function>
  		<name>squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squad_size</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 squad(int index) const;
  inline void set_squad(int index, ::google::protobuf::uint32 value);
  inline void add_squad(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      squad() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_squad();

  // @@protoc_insertion_point(class_scope:pb.TLayerFightSetSquadReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > squad_;
  friend void  protobuf_AddDesc_net_2fLayerFight_2eproto();
  friend void protobuf_AssignDesc_net_2fLayerFight_2eproto();
  friend void protobuf_ShutdownFile_net_2fLayerFight_2eproto();

  void InitAsDefaultInstance();
  static TLayerFightSetSquadReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLayerFightQuickPassReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LayerFight.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLayerFightQuickPassReq : public ::google::protobuf::Message {
 public:
  TLayerFightQuickPassReq();
  virtual ~TLayerFightQuickPassReq();

  TLayerFightQuickPassReq(const TLayerFightQuickPassReq& from);

  inline TLayerFightQuickPassReq& operator=(const TLayerFightQuickPassReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLayerFightQuickPassReq& default_instance();

  void Swap(TLayerFightQuickPassReq* other);

  // implements Message ----------------------------------------------

  TLayerFightQuickPassReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLayerFightQuickPassReq& from);
  void MergeFrom(const TLayerFightQuickPassReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightQuickPassReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 AttackNums = 2;
  inline bool has_attacknums() const;
  inline void clear_attacknums();
  static const int kAttackNumsFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightQuickPassReq</name>
  	<Function>
  		<name>attacknums</name>
  		<replaceName>AttackNums</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attacknums</name>
  		<replaceName>AttackNums</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attacknums</name>
  		<replaceName>AttackNums</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attacknums() const;
  inline void set_attacknums(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLayerFightQuickPassReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_attacknums();
  inline void clear_has_attacknums();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 attacknums_;
  friend void  protobuf_AddDesc_net_2fLayerFight_2eproto();
  friend void protobuf_AssignDesc_net_2fLayerFight_2eproto();
  friend void protobuf_ShutdownFile_net_2fLayerFight_2eproto();

  void InitAsDefaultInstance();
  static TLayerFightQuickPassReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLayerFightQuickPassRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LayerFight.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLayerFightQuickPassRsp : public ::google::protobuf::Message {
 public:
  TLayerFightQuickPassRsp();
  virtual ~TLayerFightQuickPassRsp();

  TLayerFightQuickPassRsp(const TLayerFightQuickPassRsp& from);

  inline TLayerFightQuickPassRsp& operator=(const TLayerFightQuickPassRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLayerFightQuickPassRsp& default_instance();

  void Swap(TLayerFightQuickPassRsp* other);

  // implements Message ----------------------------------------------

  TLayerFightQuickPassRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLayerFightQuickPassRsp& from);
  void MergeFrom(const TLayerFightQuickPassRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightQuickPassRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TLayerFightQuickPassRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fLayerFight_2eproto();
  friend void protobuf_AssignDesc_net_2fLayerFight_2eproto();
  friend void protobuf_ShutdownFile_net_2fLayerFight_2eproto();

  void InitAsDefaultInstance();
  static TLayerFightQuickPassRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLayerFightGetMapInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LayerFight.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLayerFightGetMapInfoReq : public ::google::protobuf::Message {
 public:
  TLayerFightGetMapInfoReq();
  virtual ~TLayerFightGetMapInfoReq();

  TLayerFightGetMapInfoReq(const TLayerFightGetMapInfoReq& from);

  inline TLayerFightGetMapInfoReq& operator=(const TLayerFightGetMapInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLayerFightGetMapInfoReq& default_instance();

  void Swap(TLayerFightGetMapInfoReq* other);

  // implements Message ----------------------------------------------

  TLayerFightGetMapInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLayerFightGetMapInfoReq& from);
  void MergeFrom(const TLayerFightGetMapInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapID = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightGetMapInfoReq</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLayerFightGetMapInfoReq)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_net_2fLayerFight_2eproto();
  friend void protobuf_AssignDesc_net_2fLayerFight_2eproto();
  friend void protobuf_ShutdownFile_net_2fLayerFight_2eproto();

  void InitAsDefaultInstance();
  static TLayerFightGetMapInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLayerFightGetMapInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LayerFight.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLayerFightGetMapInfoRsp : public ::google::protobuf::Message {
 public:
  TLayerFightGetMapInfoRsp();
  virtual ~TLayerFightGetMapInfoRsp();

  TLayerFightGetMapInfoRsp(const TLayerFightGetMapInfoRsp& from);

  inline TLayerFightGetMapInfoRsp& operator=(const TLayerFightGetMapInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLayerFightGetMapInfoRsp& default_instance();

  void Swap(TLayerFightGetMapInfoRsp* other);

  // implements Message ----------------------------------------------

  TLayerFightGetMapInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLayerFightGetMapInfoRsp& from);
  void MergeFrom(const TLayerFightGetMapInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TLayerFightMapInfo MapInfo = 1;
  inline bool has_mapinfo() const;
  inline void clear_mapinfo();
  static const int kMapInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightGetMapInfoRsp</name>
  	<Function>
  		<name>mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLayerFightMapInfo& mapinfo() const;
  inline ::pb::TLayerFightMapInfo* mutable_mapinfo();
  inline ::pb::TLayerFightMapInfo* release_mapinfo();
  inline void set_allocated_mapinfo(::pb::TLayerFightMapInfo* mapinfo);

  // @@protoc_insertion_point(class_scope:pb.TLayerFightGetMapInfoRsp)
 private:
  inline void set_has_mapinfo();
  inline void clear_has_mapinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TLayerFightMapInfo* mapinfo_;
  friend void  protobuf_AddDesc_net_2fLayerFight_2eproto();
  friend void protobuf_AssignDesc_net_2fLayerFight_2eproto();
  friend void protobuf_ShutdownFile_net_2fLayerFight_2eproto();

  void InitAsDefaultInstance();
  static TLayerFightGetMapInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLayerFightGetSquadArrInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LayerFight.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLayerFightGetSquadArrInfoRsp : public ::google::protobuf::Message {
 public:
  TLayerFightGetSquadArrInfoRsp();
  virtual ~TLayerFightGetSquadArrInfoRsp();

  TLayerFightGetSquadArrInfoRsp(const TLayerFightGetSquadArrInfoRsp& from);

  inline TLayerFightGetSquadArrInfoRsp& operator=(const TLayerFightGetSquadArrInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLayerFightGetSquadArrInfoRsp& default_instance();

  void Swap(TLayerFightGetSquadArrInfoRsp* other);

  // implements Message ----------------------------------------------

  TLayerFightGetSquadArrInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLayerFightGetSquadArrInfoRsp& from);
  void MergeFrom(const TLayerFightGetSquadArrInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 HtidArr = 1;
  inline int htidarr_size() const;
  inline void clear_htidarr();
  static const int kHtidArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightGetSquadArrInfoRsp</name>
  	<Function>
  		<name>htidarr</name>
  		<replaceName>HtidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_htidarr</name>
  		<replaceName>HtidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_htidarr</name>
  		<replaceName>HtidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htidarr</name>
  		<replaceName>HtidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>htidarr_size</name>
  		<replaceName>HtidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htidarr(int index) const;
  inline void set_htidarr(int index, ::google::protobuf::uint32 value);
  inline void add_htidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      htidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_htidarr();

  // @@protoc_insertion_point(class_scope:pb.TLayerFightGetSquadArrInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > htidarr_;
  friend void  protobuf_AddDesc_net_2fLayerFight_2eproto();
  friend void protobuf_AssignDesc_net_2fLayerFight_2eproto();
  friend void protobuf_ShutdownFile_net_2fLayerFight_2eproto();

  void InitAsDefaultInstance();
  static TLayerFightGetSquadArrInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLayerFightGetStrongHoldInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LayerFight.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLayerFightGetStrongHoldInfoReq : public ::google::protobuf::Message {
 public:
  TLayerFightGetStrongHoldInfoReq();
  virtual ~TLayerFightGetStrongHoldInfoReq();

  TLayerFightGetStrongHoldInfoReq(const TLayerFightGetStrongHoldInfoReq& from);

  inline TLayerFightGetStrongHoldInfoReq& operator=(const TLayerFightGetStrongHoldInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLayerFightGetStrongHoldInfoReq& default_instance();

  void Swap(TLayerFightGetStrongHoldInfoReq* other);

  // implements Message ----------------------------------------------

  TLayerFightGetStrongHoldInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLayerFightGetStrongHoldInfoReq& from);
  void MergeFrom(const TLayerFightGetStrongHoldInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 StrongHoldId = 1;
  inline bool has_strongholdid() const;
  inline void clear_strongholdid();
  static const int kStrongHoldIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightGetStrongHoldInfoReq</name>
  	<Function>
  		<name>strongholdid</name>
  		<replaceName>StrongHoldId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strongholdid</name>
  		<replaceName>StrongHoldId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdid</name>
  		<replaceName>StrongHoldId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 strongholdid() const;
  inline void set_strongholdid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLayerFightGetStrongHoldInfoReq)
 private:
  inline void set_has_strongholdid();
  inline void clear_has_strongholdid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 strongholdid_;
  friend void  protobuf_AddDesc_net_2fLayerFight_2eproto();
  friend void protobuf_AssignDesc_net_2fLayerFight_2eproto();
  friend void protobuf_ShutdownFile_net_2fLayerFight_2eproto();

  void InitAsDefaultInstance();
  static TLayerFightGetStrongHoldInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLayerFightGetStrongHoldInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LayerFight.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLayerFightGetStrongHoldInfoRsp : public ::google::protobuf::Message {
 public:
  TLayerFightGetStrongHoldInfoRsp();
  virtual ~TLayerFightGetStrongHoldInfoRsp();

  TLayerFightGetStrongHoldInfoRsp(const TLayerFightGetStrongHoldInfoRsp& from);

  inline TLayerFightGetStrongHoldInfoRsp& operator=(const TLayerFightGetStrongHoldInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLayerFightGetStrongHoldInfoRsp& default_instance();

  void Swap(TLayerFightGetStrongHoldInfoRsp* other);

  // implements Message ----------------------------------------------

  TLayerFightGetStrongHoldInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLayerFightGetStrongHoldInfoRsp& from);
  void MergeFrom(const TLayerFightGetStrongHoldInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TMirrorInfo Info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLayerFightGetStrongHoldInfoRsp</name>
  	<Function>
  		<name>info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TMirrorInfo& info() const;
  inline ::pb::TMirrorInfo* mutable_info();
  inline ::pb::TMirrorInfo* release_info();
  inline void set_allocated_info(::pb::TMirrorInfo* info);

  // @@protoc_insertion_point(class_scope:pb.TLayerFightGetStrongHoldInfoRsp)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TMirrorInfo* info_;
  friend void  protobuf_AddDesc_net_2fLayerFight_2eproto();
  friend void protobuf_AssignDesc_net_2fLayerFight_2eproto();
  friend void protobuf_ShutdownFile_net_2fLayerFight_2eproto();

  void InitAsDefaultInstance();
  static TLayerFightGetStrongHoldInfoRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TLayerFightStrongholdInfo

// optional uint32 StrongholdId = 1;
inline bool TLayerFightStrongholdInfo::has_strongholdid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLayerFightStrongholdInfo::set_has_strongholdid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLayerFightStrongholdInfo::clear_has_strongholdid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLayerFightStrongholdInfo::clear_strongholdid() {
  strongholdid_ = 0u;
  clear_has_strongholdid();
}
inline ::google::protobuf::uint32 TLayerFightStrongholdInfo::strongholdid() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightStrongholdInfo.StrongholdId)
  return strongholdid_;
}
inline void TLayerFightStrongholdInfo::set_strongholdid(::google::protobuf::uint32 value) {
  set_has_strongholdid();
  strongholdid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightStrongholdInfo.StrongholdId)
}

// optional .pb.TMirrorInfo Mirror = 2;
inline bool TLayerFightStrongholdInfo::has_mirror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLayerFightStrongholdInfo::set_has_mirror() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLayerFightStrongholdInfo::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLayerFightStrongholdInfo::clear_mirror() {
  if (mirror_ != NULL) mirror_->::pb::TMirrorInfo::Clear();
  clear_has_mirror();
}
inline const ::pb::TMirrorInfo& TLayerFightStrongholdInfo::mirror() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightStrongholdInfo.Mirror)
  return mirror_ != NULL ? *mirror_ : *default_instance_->mirror_;
}
inline ::pb::TMirrorInfo* TLayerFightStrongholdInfo::mutable_mirror() {
  set_has_mirror();
  if (mirror_ == NULL) mirror_ = new ::pb::TMirrorInfo;
  // @@protoc_insertion_point(field_mutable:pb.TLayerFightStrongholdInfo.Mirror)
  return mirror_;
}
inline ::pb::TMirrorInfo* TLayerFightStrongholdInfo::release_mirror() {
  clear_has_mirror();
  ::pb::TMirrorInfo* temp = mirror_;
  mirror_ = NULL;
  return temp;
}
inline void TLayerFightStrongholdInfo::set_allocated_mirror(::pb::TMirrorInfo* mirror) {
  delete mirror_;
  mirror_ = mirror;
  if (mirror) {
    set_has_mirror();
  } else {
    clear_has_mirror();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLayerFightStrongholdInfo.Mirror)
}

// optional string ServerId = 3;
inline bool TLayerFightStrongholdInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLayerFightStrongholdInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLayerFightStrongholdInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLayerFightStrongholdInfo::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TLayerFightStrongholdInfo::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightStrongholdInfo.ServerId)
  return *serverid_;
}
inline void TLayerFightStrongholdInfo::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TLayerFightStrongholdInfo.ServerId)
}
inline void TLayerFightStrongholdInfo::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TLayerFightStrongholdInfo.ServerId)
}
inline void TLayerFightStrongholdInfo::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TLayerFightStrongholdInfo.ServerId)
}
inline ::std::string* TLayerFightStrongholdInfo::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TLayerFightStrongholdInfo.ServerId)
  return serverid_;
}
inline ::std::string* TLayerFightStrongholdInfo::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TLayerFightStrongholdInfo::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLayerFightStrongholdInfo.ServerId)
}

// optional uint64 StrongholdCompleteTime = 4;
inline bool TLayerFightStrongholdInfo::has_strongholdcompletetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLayerFightStrongholdInfo::set_has_strongholdcompletetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLayerFightStrongholdInfo::clear_has_strongholdcompletetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLayerFightStrongholdInfo::clear_strongholdcompletetime() {
  strongholdcompletetime_ = GOOGLE_ULONGLONG(0);
  clear_has_strongholdcompletetime();
}
inline ::google::protobuf::uint64 TLayerFightStrongholdInfo::strongholdcompletetime() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightStrongholdInfo.StrongholdCompleteTime)
  return strongholdcompletetime_;
}
inline void TLayerFightStrongholdInfo::set_strongholdcompletetime(::google::protobuf::uint64 value) {
  set_has_strongholdcompletetime();
  strongholdcompletetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightStrongholdInfo.StrongholdCompleteTime)
}

// optional uint32 StrongholdCompleteNum = 5;
inline bool TLayerFightStrongholdInfo::has_strongholdcompletenum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLayerFightStrongholdInfo::set_has_strongholdcompletenum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLayerFightStrongholdInfo::clear_has_strongholdcompletenum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLayerFightStrongholdInfo::clear_strongholdcompletenum() {
  strongholdcompletenum_ = 0u;
  clear_has_strongholdcompletenum();
}
inline ::google::protobuf::uint32 TLayerFightStrongholdInfo::strongholdcompletenum() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightStrongholdInfo.StrongholdCompleteNum)
  return strongholdcompletenum_;
}
inline void TLayerFightStrongholdInfo::set_strongholdcompletenum(::google::protobuf::uint32 value) {
  set_has_strongholdcompletenum();
  strongholdcompletenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightStrongholdInfo.StrongholdCompleteNum)
}

// -------------------------------------------------------------------

// TLayerFightMapInfo

// optional uint32 MapID = 1;
inline bool TLayerFightMapInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLayerFightMapInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLayerFightMapInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLayerFightMapInfo::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 TLayerFightMapInfo::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightMapInfo.MapID)
  return mapid_;
}
inline void TLayerFightMapInfo::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightMapInfo.MapID)
}

// repeated .pb.TLayerFightStrongholdInfo StrongholdInfoArr = 2;
inline int TLayerFightMapInfo::strongholdinfoarr_size() const {
  return strongholdinfoarr_.size();
}
inline void TLayerFightMapInfo::clear_strongholdinfoarr() {
  strongholdinfoarr_.Clear();
}
inline const ::pb::TLayerFightStrongholdInfo& TLayerFightMapInfo::strongholdinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightMapInfo.StrongholdInfoArr)
  return strongholdinfoarr_.Get(index);
}
inline ::pb::TLayerFightStrongholdInfo* TLayerFightMapInfo::mutable_strongholdinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLayerFightMapInfo.StrongholdInfoArr)
  return strongholdinfoarr_.Mutable(index);
}
inline ::pb::TLayerFightStrongholdInfo* TLayerFightMapInfo::add_strongholdinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TLayerFightMapInfo.StrongholdInfoArr)
  return strongholdinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightStrongholdInfo >&
TLayerFightMapInfo::strongholdinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TLayerFightMapInfo.StrongholdInfoArr)
  return strongholdinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightStrongholdInfo >*
TLayerFightMapInfo::mutable_strongholdinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLayerFightMapInfo.StrongholdInfoArr)
  return &strongholdinfoarr_;
}

// optional uint64 MapCompleteTime = 3;
inline bool TLayerFightMapInfo::has_mapcompletetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLayerFightMapInfo::set_has_mapcompletetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLayerFightMapInfo::clear_has_mapcompletetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLayerFightMapInfo::clear_mapcompletetime() {
  mapcompletetime_ = GOOGLE_ULONGLONG(0);
  clear_has_mapcompletetime();
}
inline ::google::protobuf::uint64 TLayerFightMapInfo::mapcompletetime() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightMapInfo.MapCompleteTime)
  return mapcompletetime_;
}
inline void TLayerFightMapInfo::set_mapcompletetime(::google::protobuf::uint64 value) {
  set_has_mapcompletetime();
  mapcompletetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightMapInfo.MapCompleteTime)
}

// -------------------------------------------------------------------

// TLayerFightAchievementInfo

// optional uint32 ID = 1;
inline bool TLayerFightAchievementInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLayerFightAchievementInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLayerFightAchievementInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLayerFightAchievementInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TLayerFightAchievementInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightAchievementInfo.ID)
  return id_;
}
inline void TLayerFightAchievementInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightAchievementInfo.ID)
}

// optional uint64 RewardTime = 2;
inline bool TLayerFightAchievementInfo::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLayerFightAchievementInfo::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLayerFightAchievementInfo::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLayerFightAchievementInfo::clear_rewardtime() {
  rewardtime_ = GOOGLE_ULONGLONG(0);
  clear_has_rewardtime();
}
inline ::google::protobuf::uint64 TLayerFightAchievementInfo::rewardtime() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightAchievementInfo.RewardTime)
  return rewardtime_;
}
inline void TLayerFightAchievementInfo::set_rewardtime(::google::protobuf::uint64 value) {
  set_has_rewardtime();
  rewardtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightAchievementInfo.RewardTime)
}

// -------------------------------------------------------------------

// TLayerFightInfo

// repeated uint32 SquadArr = 1;
inline int TLayerFightInfo::squadarr_size() const {
  return squadarr_.size();
}
inline void TLayerFightInfo::clear_squadarr() {
  squadarr_.Clear();
}
inline ::google::protobuf::uint32 TLayerFightInfo::squadarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightInfo.SquadArr)
  return squadarr_.Get(index);
}
inline void TLayerFightInfo::set_squadarr(int index, ::google::protobuf::uint32 value) {
  squadarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TLayerFightInfo.SquadArr)
}
inline void TLayerFightInfo::add_squadarr(::google::protobuf::uint32 value) {
  squadarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TLayerFightInfo.SquadArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TLayerFightInfo::squadarr() const {
  // @@protoc_insertion_point(field_list:pb.TLayerFightInfo.SquadArr)
  return squadarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TLayerFightInfo::mutable_squadarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLayerFightInfo.SquadArr)
  return &squadarr_;
}

// repeated .pb.TLayerFightMapInfo MapInfo = 2;
inline int TLayerFightInfo::mapinfo_size() const {
  return mapinfo_.size();
}
inline void TLayerFightInfo::clear_mapinfo() {
  mapinfo_.Clear();
}
inline const ::pb::TLayerFightMapInfo& TLayerFightInfo::mapinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightInfo.MapInfo)
  return mapinfo_.Get(index);
}
inline ::pb::TLayerFightMapInfo* TLayerFightInfo::mutable_mapinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLayerFightInfo.MapInfo)
  return mapinfo_.Mutable(index);
}
inline ::pb::TLayerFightMapInfo* TLayerFightInfo::add_mapinfo() {
  // @@protoc_insertion_point(field_add:pb.TLayerFightInfo.MapInfo)
  return mapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightMapInfo >&
TLayerFightInfo::mapinfo() const {
  // @@protoc_insertion_point(field_list:pb.TLayerFightInfo.MapInfo)
  return mapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightMapInfo >*
TLayerFightInfo::mutable_mapinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLayerFightInfo.MapInfo)
  return &mapinfo_;
}

// optional uint32 UsedChallengeNum = 3;
inline bool TLayerFightInfo::has_usedchallengenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLayerFightInfo::set_has_usedchallengenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLayerFightInfo::clear_has_usedchallengenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLayerFightInfo::clear_usedchallengenum() {
  usedchallengenum_ = 0u;
  clear_has_usedchallengenum();
}
inline ::google::protobuf::uint32 TLayerFightInfo::usedchallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightInfo.UsedChallengeNum)
  return usedchallengenum_;
}
inline void TLayerFightInfo::set_usedchallengenum(::google::protobuf::uint32 value) {
  set_has_usedchallengenum();
  usedchallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightInfo.UsedChallengeNum)
}

// repeated .pb.TLayerFightAchievementInfo AchievementInfoArr = 4;
inline int TLayerFightInfo::achievementinfoarr_size() const {
  return achievementinfoarr_.size();
}
inline void TLayerFightInfo::clear_achievementinfoarr() {
  achievementinfoarr_.Clear();
}
inline const ::pb::TLayerFightAchievementInfo& TLayerFightInfo::achievementinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightInfo.AchievementInfoArr)
  return achievementinfoarr_.Get(index);
}
inline ::pb::TLayerFightAchievementInfo* TLayerFightInfo::mutable_achievementinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLayerFightInfo.AchievementInfoArr)
  return achievementinfoarr_.Mutable(index);
}
inline ::pb::TLayerFightAchievementInfo* TLayerFightInfo::add_achievementinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TLayerFightInfo.AchievementInfoArr)
  return achievementinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightAchievementInfo >&
TLayerFightInfo::achievementinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TLayerFightInfo.AchievementInfoArr)
  return achievementinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightAchievementInfo >*
TLayerFightInfo::mutable_achievementinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLayerFightInfo.AchievementInfoArr)
  return &achievementinfoarr_;
}

// optional uint32 NowStrongholdId = 5;
inline bool TLayerFightInfo::has_nowstrongholdid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLayerFightInfo::set_has_nowstrongholdid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLayerFightInfo::clear_has_nowstrongholdid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLayerFightInfo::clear_nowstrongholdid() {
  nowstrongholdid_ = 0u;
  clear_has_nowstrongholdid();
}
inline ::google::protobuf::uint32 TLayerFightInfo::nowstrongholdid() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightInfo.NowStrongholdId)
  return nowstrongholdid_;
}
inline void TLayerFightInfo::set_nowstrongholdid(::google::protobuf::uint32 value) {
  set_has_nowstrongholdid();
  nowstrongholdid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightInfo.NowStrongholdId)
}

// -------------------------------------------------------------------

// TLayerFightGetInfoRsp

// optional .pb.TLayerFightInfo Info = 1;
inline bool TLayerFightGetInfoRsp::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLayerFightGetInfoRsp::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLayerFightGetInfoRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLayerFightGetInfoRsp::clear_info() {
  if (info_ != NULL) info_->::pb::TLayerFightInfo::Clear();
  clear_has_info();
}
inline const ::pb::TLayerFightInfo& TLayerFightGetInfoRsp::info() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightGetInfoRsp.Info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::pb::TLayerFightInfo* TLayerFightGetInfoRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::pb::TLayerFightInfo;
  // @@protoc_insertion_point(field_mutable:pb.TLayerFightGetInfoRsp.Info)
  return info_;
}
inline ::pb::TLayerFightInfo* TLayerFightGetInfoRsp::release_info() {
  clear_has_info();
  ::pb::TLayerFightInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void TLayerFightGetInfoRsp::set_allocated_info(::pb::TLayerFightInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLayerFightGetInfoRsp.Info)
}

// -------------------------------------------------------------------

// TLayerFightGetInfoNotify

// optional uint32 UsedChallengeNum = 1;
inline bool TLayerFightGetInfoNotify::has_usedchallengenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLayerFightGetInfoNotify::set_has_usedchallengenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLayerFightGetInfoNotify::clear_has_usedchallengenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLayerFightGetInfoNotify::clear_usedchallengenum() {
  usedchallengenum_ = 0u;
  clear_has_usedchallengenum();
}
inline ::google::protobuf::uint32 TLayerFightGetInfoNotify::usedchallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightGetInfoNotify.UsedChallengeNum)
  return usedchallengenum_;
}
inline void TLayerFightGetInfoNotify::set_usedchallengenum(::google::protobuf::uint32 value) {
  set_has_usedchallengenum();
  usedchallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightGetInfoNotify.UsedChallengeNum)
}

// repeated .pb.TLayerFightStrongholdInfo StrongHoldInfoArr = 2;
inline int TLayerFightGetInfoNotify::strongholdinfoarr_size() const {
  return strongholdinfoarr_.size();
}
inline void TLayerFightGetInfoNotify::clear_strongholdinfoarr() {
  strongholdinfoarr_.Clear();
}
inline const ::pb::TLayerFightStrongholdInfo& TLayerFightGetInfoNotify::strongholdinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightGetInfoNotify.StrongHoldInfoArr)
  return strongholdinfoarr_.Get(index);
}
inline ::pb::TLayerFightStrongholdInfo* TLayerFightGetInfoNotify::mutable_strongholdinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLayerFightGetInfoNotify.StrongHoldInfoArr)
  return strongholdinfoarr_.Mutable(index);
}
inline ::pb::TLayerFightStrongholdInfo* TLayerFightGetInfoNotify::add_strongholdinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TLayerFightGetInfoNotify.StrongHoldInfoArr)
  return strongholdinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightStrongholdInfo >&
TLayerFightGetInfoNotify::strongholdinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TLayerFightGetInfoNotify.StrongHoldInfoArr)
  return strongholdinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightStrongholdInfo >*
TLayerFightGetInfoNotify::mutable_strongholdinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLayerFightGetInfoNotify.StrongHoldInfoArr)
  return &strongholdinfoarr_;
}

// repeated .pb.TLayerFightAchievementInfo AchievementInfoArr = 3;
inline int TLayerFightGetInfoNotify::achievementinfoarr_size() const {
  return achievementinfoarr_.size();
}
inline void TLayerFightGetInfoNotify::clear_achievementinfoarr() {
  achievementinfoarr_.Clear();
}
inline const ::pb::TLayerFightAchievementInfo& TLayerFightGetInfoNotify::achievementinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightGetInfoNotify.AchievementInfoArr)
  return achievementinfoarr_.Get(index);
}
inline ::pb::TLayerFightAchievementInfo* TLayerFightGetInfoNotify::mutable_achievementinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLayerFightGetInfoNotify.AchievementInfoArr)
  return achievementinfoarr_.Mutable(index);
}
inline ::pb::TLayerFightAchievementInfo* TLayerFightGetInfoNotify::add_achievementinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TLayerFightGetInfoNotify.AchievementInfoArr)
  return achievementinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightAchievementInfo >&
TLayerFightGetInfoNotify::achievementinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TLayerFightGetInfoNotify.AchievementInfoArr)
  return achievementinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLayerFightAchievementInfo >*
TLayerFightGetInfoNotify::mutable_achievementinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLayerFightGetInfoNotify.AchievementInfoArr)
  return &achievementinfoarr_;
}

// optional uint32 NowStrongholdId = 4;
inline bool TLayerFightGetInfoNotify::has_nowstrongholdid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLayerFightGetInfoNotify::set_has_nowstrongholdid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLayerFightGetInfoNotify::clear_has_nowstrongholdid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLayerFightGetInfoNotify::clear_nowstrongholdid() {
  nowstrongholdid_ = 0u;
  clear_has_nowstrongholdid();
}
inline ::google::protobuf::uint32 TLayerFightGetInfoNotify::nowstrongholdid() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightGetInfoNotify.NowStrongholdId)
  return nowstrongholdid_;
}
inline void TLayerFightGetInfoNotify::set_nowstrongholdid(::google::protobuf::uint32 value) {
  set_has_nowstrongholdid();
  nowstrongholdid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightGetInfoNotify.NowStrongholdId)
}

// -------------------------------------------------------------------

// TLayerFightDoBattleReq

// optional uint32 ID = 1;
inline bool TLayerFightDoBattleReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLayerFightDoBattleReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLayerFightDoBattleReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLayerFightDoBattleReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TLayerFightDoBattleReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightDoBattleReq.ID)
  return id_;
}
inline void TLayerFightDoBattleReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightDoBattleReq.ID)
}

// optional uint32 IsQuickBattle = 2;
inline bool TLayerFightDoBattleReq::has_isquickbattle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLayerFightDoBattleReq::set_has_isquickbattle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLayerFightDoBattleReq::clear_has_isquickbattle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLayerFightDoBattleReq::clear_isquickbattle() {
  isquickbattle_ = 0u;
  clear_has_isquickbattle();
}
inline ::google::protobuf::uint32 TLayerFightDoBattleReq::isquickbattle() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightDoBattleReq.IsQuickBattle)
  return isquickbattle_;
}
inline void TLayerFightDoBattleReq::set_isquickbattle(::google::protobuf::uint32 value) {
  set_has_isquickbattle();
  isquickbattle_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightDoBattleReq.IsQuickBattle)
}

// -------------------------------------------------------------------

// TLayerFightDoBattleRsp

// optional uint32 IsWin = 1;
inline bool TLayerFightDoBattleRsp::has_iswin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLayerFightDoBattleRsp::set_has_iswin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLayerFightDoBattleRsp::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLayerFightDoBattleRsp::clear_iswin() {
  iswin_ = 0u;
  clear_has_iswin();
}
inline ::google::protobuf::uint32 TLayerFightDoBattleRsp::iswin() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightDoBattleRsp.IsWin)
  return iswin_;
}
inline void TLayerFightDoBattleRsp::set_iswin(::google::protobuf::uint32 value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightDoBattleRsp.IsWin)
}

// repeated .pb.TCommonReward RewardArr = 2;
inline int TLayerFightDoBattleRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TLayerFightDoBattleRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TLayerFightDoBattleRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightDoBattleRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TLayerFightDoBattleRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLayerFightDoBattleRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TLayerFightDoBattleRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TLayerFightDoBattleRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TLayerFightDoBattleRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TLayerFightDoBattleRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TLayerFightDoBattleRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLayerFightDoBattleRsp.RewardArr)
  return &rewardarr_;
}

// optional uint32 IsFirstWin = 3;
inline bool TLayerFightDoBattleRsp::has_isfirstwin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLayerFightDoBattleRsp::set_has_isfirstwin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLayerFightDoBattleRsp::clear_has_isfirstwin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLayerFightDoBattleRsp::clear_isfirstwin() {
  isfirstwin_ = 0u;
  clear_has_isfirstwin();
}
inline ::google::protobuf::uint32 TLayerFightDoBattleRsp::isfirstwin() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightDoBattleRsp.IsFirstWin)
  return isfirstwin_;
}
inline void TLayerFightDoBattleRsp::set_isfirstwin(::google::protobuf::uint32 value) {
  set_has_isfirstwin();
  isfirstwin_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightDoBattleRsp.IsFirstWin)
}

// optional .pb.TBattleResult BattleResult = 4;
inline bool TLayerFightDoBattleRsp::has_battleresult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLayerFightDoBattleRsp::set_has_battleresult() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLayerFightDoBattleRsp::clear_has_battleresult() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLayerFightDoBattleRsp::clear_battleresult() {
  if (battleresult_ != NULL) battleresult_->::pb::TBattleResult::Clear();
  clear_has_battleresult();
}
inline const ::pb::TBattleResult& TLayerFightDoBattleRsp::battleresult() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightDoBattleRsp.BattleResult)
  return battleresult_ != NULL ? *battleresult_ : *default_instance_->battleresult_;
}
inline ::pb::TBattleResult* TLayerFightDoBattleRsp::mutable_battleresult() {
  set_has_battleresult();
  if (battleresult_ == NULL) battleresult_ = new ::pb::TBattleResult;
  // @@protoc_insertion_point(field_mutable:pb.TLayerFightDoBattleRsp.BattleResult)
  return battleresult_;
}
inline ::pb::TBattleResult* TLayerFightDoBattleRsp::release_battleresult() {
  clear_has_battleresult();
  ::pb::TBattleResult* temp = battleresult_;
  battleresult_ = NULL;
  return temp;
}
inline void TLayerFightDoBattleRsp::set_allocated_battleresult(::pb::TBattleResult* battleresult) {
  delete battleresult_;
  battleresult_ = battleresult;
  if (battleresult) {
    set_has_battleresult();
  } else {
    clear_has_battleresult();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLayerFightDoBattleRsp.BattleResult)
}

// -------------------------------------------------------------------

// TLayerFightGetAchievementRewardReq

// optional uint32 ID = 1;
inline bool TLayerFightGetAchievementRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLayerFightGetAchievementRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLayerFightGetAchievementRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLayerFightGetAchievementRewardReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TLayerFightGetAchievementRewardReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightGetAchievementRewardReq.ID)
  return id_;
}
inline void TLayerFightGetAchievementRewardReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightGetAchievementRewardReq.ID)
}

// -------------------------------------------------------------------

// TLayerFightGetAchievementRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TLayerFightGetAchievementRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TLayerFightGetAchievementRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TLayerFightGetAchievementRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightGetAchievementRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TLayerFightGetAchievementRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLayerFightGetAchievementRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TLayerFightGetAchievementRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TLayerFightGetAchievementRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TLayerFightGetAchievementRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TLayerFightGetAchievementRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TLayerFightGetAchievementRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLayerFightGetAchievementRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TLayerFightSetSquadReq

// repeated uint32 Squad = 1;
inline int TLayerFightSetSquadReq::squad_size() const {
  return squad_.size();
}
inline void TLayerFightSetSquadReq::clear_squad() {
  squad_.Clear();
}
inline ::google::protobuf::uint32 TLayerFightSetSquadReq::squad(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightSetSquadReq.Squad)
  return squad_.Get(index);
}
inline void TLayerFightSetSquadReq::set_squad(int index, ::google::protobuf::uint32 value) {
  squad_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TLayerFightSetSquadReq.Squad)
}
inline void TLayerFightSetSquadReq::add_squad(::google::protobuf::uint32 value) {
  squad_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TLayerFightSetSquadReq.Squad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TLayerFightSetSquadReq::squad() const {
  // @@protoc_insertion_point(field_list:pb.TLayerFightSetSquadReq.Squad)
  return squad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TLayerFightSetSquadReq::mutable_squad() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLayerFightSetSquadReq.Squad)
  return &squad_;
}

// -------------------------------------------------------------------

// TLayerFightQuickPassReq

// optional uint32 ID = 1;
inline bool TLayerFightQuickPassReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLayerFightQuickPassReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLayerFightQuickPassReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLayerFightQuickPassReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TLayerFightQuickPassReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightQuickPassReq.ID)
  return id_;
}
inline void TLayerFightQuickPassReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightQuickPassReq.ID)
}

// optional uint32 AttackNums = 2;
inline bool TLayerFightQuickPassReq::has_attacknums() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLayerFightQuickPassReq::set_has_attacknums() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLayerFightQuickPassReq::clear_has_attacknums() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLayerFightQuickPassReq::clear_attacknums() {
  attacknums_ = 0u;
  clear_has_attacknums();
}
inline ::google::protobuf::uint32 TLayerFightQuickPassReq::attacknums() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightQuickPassReq.AttackNums)
  return attacknums_;
}
inline void TLayerFightQuickPassReq::set_attacknums(::google::protobuf::uint32 value) {
  set_has_attacknums();
  attacknums_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightQuickPassReq.AttackNums)
}

// -------------------------------------------------------------------

// TLayerFightQuickPassRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TLayerFightQuickPassRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TLayerFightQuickPassRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TLayerFightQuickPassRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightQuickPassRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TLayerFightQuickPassRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLayerFightQuickPassRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TLayerFightQuickPassRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TLayerFightQuickPassRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TLayerFightQuickPassRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TLayerFightQuickPassRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TLayerFightQuickPassRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLayerFightQuickPassRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TLayerFightGetMapInfoReq

// optional uint32 MapID = 1;
inline bool TLayerFightGetMapInfoReq::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLayerFightGetMapInfoReq::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLayerFightGetMapInfoReq::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLayerFightGetMapInfoReq::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 TLayerFightGetMapInfoReq::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightGetMapInfoReq.MapID)
  return mapid_;
}
inline void TLayerFightGetMapInfoReq::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightGetMapInfoReq.MapID)
}

// -------------------------------------------------------------------

// TLayerFightGetMapInfoRsp

// optional .pb.TLayerFightMapInfo MapInfo = 1;
inline bool TLayerFightGetMapInfoRsp::has_mapinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLayerFightGetMapInfoRsp::set_has_mapinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLayerFightGetMapInfoRsp::clear_has_mapinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLayerFightGetMapInfoRsp::clear_mapinfo() {
  if (mapinfo_ != NULL) mapinfo_->::pb::TLayerFightMapInfo::Clear();
  clear_has_mapinfo();
}
inline const ::pb::TLayerFightMapInfo& TLayerFightGetMapInfoRsp::mapinfo() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightGetMapInfoRsp.MapInfo)
  return mapinfo_ != NULL ? *mapinfo_ : *default_instance_->mapinfo_;
}
inline ::pb::TLayerFightMapInfo* TLayerFightGetMapInfoRsp::mutable_mapinfo() {
  set_has_mapinfo();
  if (mapinfo_ == NULL) mapinfo_ = new ::pb::TLayerFightMapInfo;
  // @@protoc_insertion_point(field_mutable:pb.TLayerFightGetMapInfoRsp.MapInfo)
  return mapinfo_;
}
inline ::pb::TLayerFightMapInfo* TLayerFightGetMapInfoRsp::release_mapinfo() {
  clear_has_mapinfo();
  ::pb::TLayerFightMapInfo* temp = mapinfo_;
  mapinfo_ = NULL;
  return temp;
}
inline void TLayerFightGetMapInfoRsp::set_allocated_mapinfo(::pb::TLayerFightMapInfo* mapinfo) {
  delete mapinfo_;
  mapinfo_ = mapinfo;
  if (mapinfo) {
    set_has_mapinfo();
  } else {
    clear_has_mapinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLayerFightGetMapInfoRsp.MapInfo)
}

// -------------------------------------------------------------------

// TLayerFightGetSquadArrInfoRsp

// repeated uint32 HtidArr = 1;
inline int TLayerFightGetSquadArrInfoRsp::htidarr_size() const {
  return htidarr_.size();
}
inline void TLayerFightGetSquadArrInfoRsp::clear_htidarr() {
  htidarr_.Clear();
}
inline ::google::protobuf::uint32 TLayerFightGetSquadArrInfoRsp::htidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightGetSquadArrInfoRsp.HtidArr)
  return htidarr_.Get(index);
}
inline void TLayerFightGetSquadArrInfoRsp::set_htidarr(int index, ::google::protobuf::uint32 value) {
  htidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TLayerFightGetSquadArrInfoRsp.HtidArr)
}
inline void TLayerFightGetSquadArrInfoRsp::add_htidarr(::google::protobuf::uint32 value) {
  htidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TLayerFightGetSquadArrInfoRsp.HtidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TLayerFightGetSquadArrInfoRsp::htidarr() const {
  // @@protoc_insertion_point(field_list:pb.TLayerFightGetSquadArrInfoRsp.HtidArr)
  return htidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TLayerFightGetSquadArrInfoRsp::mutable_htidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLayerFightGetSquadArrInfoRsp.HtidArr)
  return &htidarr_;
}

// -------------------------------------------------------------------

// TLayerFightGetStrongHoldInfoReq

// optional uint32 StrongHoldId = 1;
inline bool TLayerFightGetStrongHoldInfoReq::has_strongholdid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLayerFightGetStrongHoldInfoReq::set_has_strongholdid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLayerFightGetStrongHoldInfoReq::clear_has_strongholdid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLayerFightGetStrongHoldInfoReq::clear_strongholdid() {
  strongholdid_ = 0u;
  clear_has_strongholdid();
}
inline ::google::protobuf::uint32 TLayerFightGetStrongHoldInfoReq::strongholdid() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightGetStrongHoldInfoReq.StrongHoldId)
  return strongholdid_;
}
inline void TLayerFightGetStrongHoldInfoReq::set_strongholdid(::google::protobuf::uint32 value) {
  set_has_strongholdid();
  strongholdid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLayerFightGetStrongHoldInfoReq.StrongHoldId)
}

// -------------------------------------------------------------------

// TLayerFightGetStrongHoldInfoRsp

// optional .pb.TMirrorInfo Info = 1;
inline bool TLayerFightGetStrongHoldInfoRsp::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLayerFightGetStrongHoldInfoRsp::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLayerFightGetStrongHoldInfoRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLayerFightGetStrongHoldInfoRsp::clear_info() {
  if (info_ != NULL) info_->::pb::TMirrorInfo::Clear();
  clear_has_info();
}
inline const ::pb::TMirrorInfo& TLayerFightGetStrongHoldInfoRsp::info() const {
  // @@protoc_insertion_point(field_get:pb.TLayerFightGetStrongHoldInfoRsp.Info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::pb::TMirrorInfo* TLayerFightGetStrongHoldInfoRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::pb::TMirrorInfo;
  // @@protoc_insertion_point(field_mutable:pb.TLayerFightGetStrongHoldInfoRsp.Info)
  return info_;
}
inline ::pb::TMirrorInfo* TLayerFightGetStrongHoldInfoRsp::release_info() {
  clear_has_info();
  ::pb::TMirrorInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void TLayerFightGetStrongHoldInfoRsp::set_allocated_info(::pb::TMirrorInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLayerFightGetStrongHoldInfoRsp.Info)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fLayerFight_2eproto__INCLUDED
