// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Friend.proto

#ifndef PROTOBUF_net_2fFriend_2eproto__INCLUDED
#define PROTOBUF_net_2fFriend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fFriend_2eproto();
void protobuf_AssignDesc_net_2fFriend_2eproto();
void protobuf_ShutdownFile_net_2fFriend_2eproto();

class TFriendFriendInfo;
class TFriendGetSimpleInfoReq;
class TFriendGetSimpleInfoRsp;
class TFriendGetFriendListReq;
class TFriendGetFriendListRsp;
class TFriendGetFriendsInfoReq;
class TFriendGetFriendsInfoRsp;
class TFriendGetBlackListReq;
class TFriendGetBlackListRsp;
class TFriendGetRecommendFriendsReq;
class TFriendGetRecommendFriendsRsp;
class TFriendGetRecommendByNameReq;
class TFriendGetRecommendByNameRsp;
class TFriendGetRecommendByCaesarUniqueIdReq;
class TFriendGetRecommendByCaesarUniqueIdRsp;
class TFriendGetAppliedListReq;
class TFriendGetAppliedListRsp;
class TFriendAddFriendReq;
class TFriendAddApplyUserFromOtherServerReq;
class TFriendDelFriendReq;
class TFriendRejectApplyReq;
class TFriendAgreeApplyReq;
class TFriendAgreeApplyFromOtherServerReq;
class TFriendIsFriendReq;
class TFriendIsFriendRsp;
class TFriendAddBlackReq;
class TFriendDelBlackReq;
class TFriendIsBlackReq;
class TFriendIsBlackRsp;
class TFriendAgreeAllApplyReq;
class TFriendAgreeAllApplyRsp;
class TFriendRejectAllApplyReq;
class TFriendSendGiftToFriendReq;
class TFriendSendGiftToFriendByOtherServerReq;
class TFriendSendGiftToAllFriendReq;
class TFriendSendGiftToAllFriendRsp;
class TFriendReceiveFriendGiftReq;
class TFriendReceiveAllGiftReq;
class TFriendReceiveAllGiftRsp;
class TFriendGetCheckInfoByOtherServerReq;
class TFriendGetCheckInfoByOtherServerRsp;
class TFriendAddBlackByOtherServerReq;
class TFriendDelFriendByOtherServerReq;
class TFriendNotify;

enum EFriendReceiveStatus {
  CANNOT_RECEIVE = 0,
  NOT_RECEIVE = 1,
  HAS_RECEIVED = 2
};
bool EFriendReceiveStatus_IsValid(int value);
const EFriendReceiveStatus EFriendReceiveStatus_MIN = CANNOT_RECEIVE;
const EFriendReceiveStatus EFriendReceiveStatus_MAX = HAS_RECEIVED;
const int EFriendReceiveStatus_ARRAYSIZE = EFriendReceiveStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EFriendReceiveStatus_descriptor();
inline const ::std::string& EFriendReceiveStatus_Name(EFriendReceiveStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EFriendReceiveStatus_descriptor(), value);
}
inline bool EFriendReceiveStatus_Parse(
    const ::std::string& name, EFriendReceiveStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EFriendReceiveStatus>(
    EFriendReceiveStatus_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TFriendFriendInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendFriendInfo : public ::google::protobuf::Message {
 public:
  TFriendFriendInfo();
  virtual ~TFriendFriendInfo();

  TFriendFriendInfo(const TFriendFriendInfo& from);

  inline TFriendFriendInfo& operator=(const TFriendFriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendFriendInfo& default_instance();

  void Swap(TFriendFriendInfo* other);

  // implements Message ----------------------------------------------

  TFriendFriendInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendFriendInfo& from);
  void MergeFrom(const TFriendFriendInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfoWithStatus FriendInfo = 1;
  inline bool has_friendinfo() const;
  inline void clear_friendinfo();
  static const int kFriendInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendFriendInfo</name>
  	<Function>
  		<name>friendinfo</name>
  		<replaceName>FriendInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_friendinfo</name>
  		<replaceName>FriendInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_friendinfo</name>
  		<replaceName>FriendInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_friendinfo</name>
  		<replaceName>FriendInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfoWithStatus& friendinfo() const;
  inline ::pb::TUserSimpleInfoWithStatus* mutable_friendinfo();
  inline ::pb::TUserSimpleInfoWithStatus* release_friendinfo();
  inline void set_allocated_friendinfo(::pb::TUserSimpleInfoWithStatus* friendinfo);

  // optional uint64 SendTime = 2;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFriendFriendInfo</name>
  	<Function>
  		<name>sendtime</name>
  		<replaceName>SendTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sendtime</name>
  		<replaceName>SendTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sendtime</name>
  		<replaceName>SendTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 sendtime() const;
  inline void set_sendtime(::google::protobuf::uint64 value);

  // optional uint64 GetTime = 3;
  inline bool has_gettime() const;
  inline void clear_gettime();
  static const int kGetTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TFriendFriendInfo</name>
  	<Function>
  		<name>gettime</name>
  		<replaceName>GetTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gettime</name>
  		<replaceName>GetTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gettime</name>
  		<replaceName>GetTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 gettime() const;
  inline void set_gettime(::google::protobuf::uint64 value);

  // optional uint32 ReceiveStatus = 4;
  inline bool has_receivestatus() const;
  inline void clear_receivestatus();
  static const int kReceiveStatusFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TFriendFriendInfo</name>
  	<Function>
  		<name>receivestatus</name>
  		<replaceName>ReceiveStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_receivestatus</name>
  		<replaceName>ReceiveStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receivestatus</name>
  		<replaceName>ReceiveStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 receivestatus() const;
  inline void set_receivestatus(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TFriendFriendInfo)
 private:
  inline void set_has_friendinfo();
  inline void clear_has_friendinfo();
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_gettime();
  inline void clear_has_gettime();
  inline void set_has_receivestatus();
  inline void clear_has_receivestatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfoWithStatus* friendinfo_;
  ::google::protobuf::uint64 sendtime_;
  ::google::protobuf::uint64 gettime_;
  ::google::protobuf::uint32 receivestatus_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendFriendInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendGetSimpleInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendGetSimpleInfoReq : public ::google::protobuf::Message {
 public:
  TFriendGetSimpleInfoReq();
  virtual ~TFriendGetSimpleInfoReq();

  TFriendGetSimpleInfoReq(const TFriendGetSimpleInfoReq& from);

  inline TFriendGetSimpleInfoReq& operator=(const TFriendGetSimpleInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendGetSimpleInfoReq& default_instance();

  void Swap(TFriendGetSimpleInfoReq* other);

  // implements Message ----------------------------------------------

  TFriendGetSimpleInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendGetSimpleInfoReq& from);
  void MergeFrom(const TFriendGetSimpleInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TFriendGetSimpleInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendGetSimpleInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendGetSimpleInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendGetSimpleInfoRsp : public ::google::protobuf::Message {
 public:
  TFriendGetSimpleInfoRsp();
  virtual ~TFriendGetSimpleInfoRsp();

  TFriendGetSimpleInfoRsp(const TFriendGetSimpleInfoRsp& from);

  inline TFriendGetSimpleInfoRsp& operator=(const TFriendGetSimpleInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendGetSimpleInfoRsp& default_instance();

  void Swap(TFriendGetSimpleInfoRsp* other);

  // implements Message ----------------------------------------------

  TFriendGetSimpleInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendGetSimpleInfoRsp& from);
  void MergeFrom(const TFriendGetSimpleInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SendNum = 1;
  inline bool has_sendnum() const;
  inline void clear_sendnum();
  static const int kSendNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetSimpleInfoRsp</name>
  	<Function>
  		<name>sendnum</name>
  		<replaceName>SendNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sendnum</name>
  		<replaceName>SendNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sendnum</name>
  		<replaceName>SendNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 sendnum() const;
  inline void set_sendnum(::google::protobuf::uint32 value);

  // optional uint32 ReceiveNum = 2;
  inline bool has_receivenum() const;
  inline void clear_receivenum();
  static const int kReceiveNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetSimpleInfoRsp</name>
  	<Function>
  		<name>receivenum</name>
  		<replaceName>ReceiveNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_receivenum</name>
  		<replaceName>ReceiveNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receivenum</name>
  		<replaceName>ReceiveNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 receivenum() const;
  inline void set_receivenum(::google::protobuf::uint32 value);

  // repeated uint64 FriendUids = 3;
  inline int frienduids_size() const;
  inline void clear_frienduids();
  static const int kFriendUidsFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetSimpleInfoRsp</name>
  	<Function>
  		<name>frienduids</name>
  		<replaceName>FriendUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_frienduids</name>
  		<replaceName>FriendUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_frienduids</name>
  		<replaceName>FriendUids</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_frienduids</name>
  		<replaceName>FriendUids</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>frienduids_size</name>
  		<replaceName>FriendUids</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 frienduids(int index) const;
  inline void set_frienduids(int index, ::google::protobuf::uint64 value);
  inline void add_frienduids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      frienduids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_frienduids();

  // repeated uint64 BlackUids = 4;
  inline int blackuids_size() const;
  inline void clear_blackuids();
  static const int kBlackUidsFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetSimpleInfoRsp</name>
  	<Function>
  		<name>blackuids</name>
  		<replaceName>BlackUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_blackuids</name>
  		<replaceName>BlackUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_blackuids</name>
  		<replaceName>BlackUids</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_blackuids</name>
  		<replaceName>BlackUids</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>blackuids_size</name>
  		<replaceName>BlackUids</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 blackuids(int index) const;
  inline void set_blackuids(int index, ::google::protobuf::uint64 value);
  inline void add_blackuids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      blackuids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_blackuids();

  // repeated uint64 AppliedUids = 5;
  inline int applieduids_size() const;
  inline void clear_applieduids();
  static const int kAppliedUidsFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetSimpleInfoRsp</name>
  	<Function>
  		<name>applieduids</name>
  		<replaceName>AppliedUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_applieduids</name>
  		<replaceName>AppliedUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_applieduids</name>
  		<replaceName>AppliedUids</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_applieduids</name>
  		<replaceName>AppliedUids</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>applieduids_size</name>
  		<replaceName>AppliedUids</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 applieduids(int index) const;
  inline void set_applieduids(int index, ::google::protobuf::uint64 value);
  inline void add_applieduids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      applieduids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_applieduids();

  // repeated uint64 CanReceiveUids = 6;
  inline int canreceiveuids_size() const;
  inline void clear_canreceiveuids();
  static const int kCanReceiveUidsFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetSimpleInfoRsp</name>
  	<Function>
  		<name>canreceiveuids</name>
  		<replaceName>CanReceiveUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_canreceiveuids</name>
  		<replaceName>CanReceiveUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_canreceiveuids</name>
  		<replaceName>CanReceiveUids</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_canreceiveuids</name>
  		<replaceName>CanReceiveUids</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>canreceiveuids_size</name>
  		<replaceName>CanReceiveUids</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 canreceiveuids(int index) const;
  inline void set_canreceiveuids(int index, ::google::protobuf::uint64 value);
  inline void add_canreceiveuids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      canreceiveuids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_canreceiveuids();

  // @@protoc_insertion_point(class_scope:pb.TFriendGetSimpleInfoRsp)
 private:
  inline void set_has_sendnum();
  inline void clear_has_sendnum();
  inline void set_has_receivenum();
  inline void clear_has_receivenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 sendnum_;
  ::google::protobuf::uint32 receivenum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > frienduids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > blackuids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > applieduids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > canreceiveuids_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendGetSimpleInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendGetFriendListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendGetFriendListReq : public ::google::protobuf::Message {
 public:
  TFriendGetFriendListReq();
  virtual ~TFriendGetFriendListReq();

  TFriendGetFriendListReq(const TFriendGetFriendListReq& from);

  inline TFriendGetFriendListReq& operator=(const TFriendGetFriendListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendGetFriendListReq& default_instance();

  void Swap(TFriendGetFriendListReq* other);

  // implements Message ----------------------------------------------

  TFriendGetFriendListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendGetFriendListReq& from);
  void MergeFrom(const TFriendGetFriendListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TFriendGetFriendListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendGetFriendListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendGetFriendListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendGetFriendListRsp : public ::google::protobuf::Message {
 public:
  TFriendGetFriendListRsp();
  virtual ~TFriendGetFriendListRsp();

  TFriendGetFriendListRsp(const TFriendGetFriendListRsp& from);

  inline TFriendGetFriendListRsp& operator=(const TFriendGetFriendListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendGetFriendListRsp& default_instance();

  void Swap(TFriendGetFriendListRsp* other);

  // implements Message ----------------------------------------------

  TFriendGetFriendListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendGetFriendListRsp& from);
  void MergeFrom(const TFriendGetFriendListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TFriendFriendInfo FriendArray = 1;
  inline int friendarray_size() const;
  inline void clear_friendarray();
  static const int kFriendArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetFriendListRsp</name>
  	<Function>
  		<name>friendarray</name>
  		<replaceName>FriendArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_friendarray</name>
  		<replaceName>FriendArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_friendarray</name>
  		<replaceName>FriendArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_friendarray</name>
  		<replaceName>FriendArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>friendarray_size</name>
  		<replaceName>FriendArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TFriendFriendInfo& friendarray(int index) const;
  inline ::pb::TFriendFriendInfo* mutable_friendarray(int index);
  inline ::pb::TFriendFriendInfo* add_friendarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TFriendFriendInfo >&
      friendarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TFriendFriendInfo >*
      mutable_friendarray();

  // @@protoc_insertion_point(class_scope:pb.TFriendGetFriendListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TFriendFriendInfo > friendarray_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendGetFriendListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendGetFriendsInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendGetFriendsInfoReq : public ::google::protobuf::Message {
 public:
  TFriendGetFriendsInfoReq();
  virtual ~TFriendGetFriendsInfoReq();

  TFriendGetFriendsInfoReq(const TFriendGetFriendsInfoReq& from);

  inline TFriendGetFriendsInfoReq& operator=(const TFriendGetFriendsInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendGetFriendsInfoReq& default_instance();

  void Swap(TFriendGetFriendsInfoReq* other);

  // implements Message ----------------------------------------------

  TFriendGetFriendsInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendGetFriendsInfoReq& from);
  void MergeFrom(const TFriendGetFriendsInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 FUids = 1;
  inline int fuids_size() const;
  inline void clear_fuids();
  static const int kFUidsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetFriendsInfoReq</name>
  	<Function>
  		<name>fuids</name>
  		<replaceName>FUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fuids</name>
  		<replaceName>FUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fuids</name>
  		<replaceName>FUids</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fuids</name>
  		<replaceName>FUids</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fuids_size</name>
  		<replaceName>FUids</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fuids(int index) const;
  inline void set_fuids(int index, ::google::protobuf::uint64 value);
  inline void add_fuids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      fuids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_fuids();

  // @@protoc_insertion_point(class_scope:pb.TFriendGetFriendsInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > fuids_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendGetFriendsInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendGetFriendsInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendGetFriendsInfoRsp : public ::google::protobuf::Message {
 public:
  TFriendGetFriendsInfoRsp();
  virtual ~TFriendGetFriendsInfoRsp();

  TFriendGetFriendsInfoRsp(const TFriendGetFriendsInfoRsp& from);

  inline TFriendGetFriendsInfoRsp& operator=(const TFriendGetFriendsInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendGetFriendsInfoRsp& default_instance();

  void Swap(TFriendGetFriendsInfoRsp* other);

  // implements Message ----------------------------------------------

  TFriendGetFriendsInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendGetFriendsInfoRsp& from);
  void MergeFrom(const TFriendGetFriendsInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TFriendFriendInfo FriendArray = 1;
  inline int friendarray_size() const;
  inline void clear_friendarray();
  static const int kFriendArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetFriendsInfoRsp</name>
  	<Function>
  		<name>friendarray</name>
  		<replaceName>FriendArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_friendarray</name>
  		<replaceName>FriendArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_friendarray</name>
  		<replaceName>FriendArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_friendarray</name>
  		<replaceName>FriendArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>friendarray_size</name>
  		<replaceName>FriendArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TFriendFriendInfo& friendarray(int index) const;
  inline ::pb::TFriendFriendInfo* mutable_friendarray(int index);
  inline ::pb::TFriendFriendInfo* add_friendarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TFriendFriendInfo >&
      friendarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TFriendFriendInfo >*
      mutable_friendarray();

  // @@protoc_insertion_point(class_scope:pb.TFriendGetFriendsInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TFriendFriendInfo > friendarray_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendGetFriendsInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendGetBlackListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendGetBlackListReq : public ::google::protobuf::Message {
 public:
  TFriendGetBlackListReq();
  virtual ~TFriendGetBlackListReq();

  TFriendGetBlackListReq(const TFriendGetBlackListReq& from);

  inline TFriendGetBlackListReq& operator=(const TFriendGetBlackListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendGetBlackListReq& default_instance();

  void Swap(TFriendGetBlackListReq* other);

  // implements Message ----------------------------------------------

  TFriendGetBlackListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendGetBlackListReq& from);
  void MergeFrom(const TFriendGetBlackListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TFriendGetBlackListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendGetBlackListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendGetBlackListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendGetBlackListRsp : public ::google::protobuf::Message {
 public:
  TFriendGetBlackListRsp();
  virtual ~TFriendGetBlackListRsp();

  TFriendGetBlackListRsp(const TFriendGetBlackListRsp& from);

  inline TFriendGetBlackListRsp& operator=(const TFriendGetBlackListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendGetBlackListRsp& default_instance();

  void Swap(TFriendGetBlackListRsp* other);

  // implements Message ----------------------------------------------

  TFriendGetBlackListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendGetBlackListRsp& from);
  void MergeFrom(const TFriendGetBlackListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUserSimpleInfoWithStatus BlackArray = 1;
  inline int blackarray_size() const;
  inline void clear_blackarray();
  static const int kBlackArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetBlackListRsp</name>
  	<Function>
  		<name>blackarray</name>
  		<replaceName>BlackArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_blackarray</name>
  		<replaceName>BlackArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_blackarray</name>
  		<replaceName>BlackArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_blackarray</name>
  		<replaceName>BlackArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>blackarray_size</name>
  		<replaceName>BlackArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfoWithStatus& blackarray(int index) const;
  inline ::pb::TUserSimpleInfoWithStatus* mutable_blackarray(int index);
  inline ::pb::TUserSimpleInfoWithStatus* add_blackarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >&
      blackarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >*
      mutable_blackarray();

  // @@protoc_insertion_point(class_scope:pb.TFriendGetBlackListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus > blackarray_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendGetBlackListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendGetRecommendFriendsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendGetRecommendFriendsReq : public ::google::protobuf::Message {
 public:
  TFriendGetRecommendFriendsReq();
  virtual ~TFriendGetRecommendFriendsReq();

  TFriendGetRecommendFriendsReq(const TFriendGetRecommendFriendsReq& from);

  inline TFriendGetRecommendFriendsReq& operator=(const TFriendGetRecommendFriendsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendGetRecommendFriendsReq& default_instance();

  void Swap(TFriendGetRecommendFriendsReq* other);

  // implements Message ----------------------------------------------

  TFriendGetRecommendFriendsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendGetRecommendFriendsReq& from);
  void MergeFrom(const TFriendGetRecommendFriendsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TFriendGetRecommendFriendsReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendGetRecommendFriendsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendGetRecommendFriendsRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendGetRecommendFriendsRsp : public ::google::protobuf::Message {
 public:
  TFriendGetRecommendFriendsRsp();
  virtual ~TFriendGetRecommendFriendsRsp();

  TFriendGetRecommendFriendsRsp(const TFriendGetRecommendFriendsRsp& from);

  inline TFriendGetRecommendFriendsRsp& operator=(const TFriendGetRecommendFriendsRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendGetRecommendFriendsRsp& default_instance();

  void Swap(TFriendGetRecommendFriendsRsp* other);

  // implements Message ----------------------------------------------

  TFriendGetRecommendFriendsRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendGetRecommendFriendsRsp& from);
  void MergeFrom(const TFriendGetRecommendFriendsRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUserSimpleInfoWithStatus RecommendArray = 1;
  inline int recommendarray_size() const;
  inline void clear_recommendarray();
  static const int kRecommendArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetRecommendFriendsRsp</name>
  	<Function>
  		<name>recommendarray</name>
  		<replaceName>RecommendArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recommendarray</name>
  		<replaceName>RecommendArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recommendarray</name>
  		<replaceName>RecommendArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recommendarray</name>
  		<replaceName>RecommendArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recommendarray_size</name>
  		<replaceName>RecommendArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfoWithStatus& recommendarray(int index) const;
  inline ::pb::TUserSimpleInfoWithStatus* mutable_recommendarray(int index);
  inline ::pb::TUserSimpleInfoWithStatus* add_recommendarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >&
      recommendarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >*
      mutable_recommendarray();

  // @@protoc_insertion_point(class_scope:pb.TFriendGetRecommendFriendsRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus > recommendarray_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendGetRecommendFriendsRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendGetRecommendByNameReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendGetRecommendByNameReq : public ::google::protobuf::Message {
 public:
  TFriendGetRecommendByNameReq();
  virtual ~TFriendGetRecommendByNameReq();

  TFriendGetRecommendByNameReq(const TFriendGetRecommendByNameReq& from);

  inline TFriendGetRecommendByNameReq& operator=(const TFriendGetRecommendByNameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendGetRecommendByNameReq& default_instance();

  void Swap(TFriendGetRecommendByNameReq* other);

  // implements Message ----------------------------------------------

  TFriendGetRecommendByNameReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendGetRecommendByNameReq& from);
  void MergeFrom(const TFriendGetRecommendByNameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Uname = 1;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetRecommendByNameReq</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // @@protoc_insertion_point(class_scope:pb.TFriendGetRecommendByNameReq)
 private:
  inline void set_has_uname();
  inline void clear_has_uname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uname_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendGetRecommendByNameReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendGetRecommendByNameRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendGetRecommendByNameRsp : public ::google::protobuf::Message {
 public:
  TFriendGetRecommendByNameRsp();
  virtual ~TFriendGetRecommendByNameRsp();

  TFriendGetRecommendByNameRsp(const TFriendGetRecommendByNameRsp& from);

  inline TFriendGetRecommendByNameRsp& operator=(const TFriendGetRecommendByNameRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendGetRecommendByNameRsp& default_instance();

  void Swap(TFriendGetRecommendByNameRsp* other);

  // implements Message ----------------------------------------------

  TFriendGetRecommendByNameRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendGetRecommendByNameRsp& from);
  void MergeFrom(const TFriendGetRecommendByNameRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUserSimpleInfoWithStatus RecommendArray = 1;
  inline int recommendarray_size() const;
  inline void clear_recommendarray();
  static const int kRecommendArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetRecommendByNameRsp</name>
  	<Function>
  		<name>recommendarray</name>
  		<replaceName>RecommendArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recommendarray</name>
  		<replaceName>RecommendArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recommendarray</name>
  		<replaceName>RecommendArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recommendarray</name>
  		<replaceName>RecommendArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recommendarray_size</name>
  		<replaceName>RecommendArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfoWithStatus& recommendarray(int index) const;
  inline ::pb::TUserSimpleInfoWithStatus* mutable_recommendarray(int index);
  inline ::pb::TUserSimpleInfoWithStatus* add_recommendarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >&
      recommendarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >*
      mutable_recommendarray();

  // @@protoc_insertion_point(class_scope:pb.TFriendGetRecommendByNameRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus > recommendarray_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendGetRecommendByNameRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendGetRecommendByCaesarUniqueIdReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendGetRecommendByCaesarUniqueIdReq : public ::google::protobuf::Message {
 public:
  TFriendGetRecommendByCaesarUniqueIdReq();
  virtual ~TFriendGetRecommendByCaesarUniqueIdReq();

  TFriendGetRecommendByCaesarUniqueIdReq(const TFriendGetRecommendByCaesarUniqueIdReq& from);

  inline TFriendGetRecommendByCaesarUniqueIdReq& operator=(const TFriendGetRecommendByCaesarUniqueIdReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendGetRecommendByCaesarUniqueIdReq& default_instance();

  void Swap(TFriendGetRecommendByCaesarUniqueIdReq* other);

  // implements Message ----------------------------------------------

  TFriendGetRecommendByCaesarUniqueIdReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendGetRecommendByCaesarUniqueIdReq& from);
  void MergeFrom(const TFriendGetRecommendByCaesarUniqueIdReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string CaesarUniqueId = 1;
  inline bool has_caesaruniqueid() const;
  inline void clear_caesaruniqueid();
  static const int kCaesarUniqueIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetRecommendByCaesarUniqueIdReq</name>
  	<Function>
  		<name>caesaruniqueid</name>
  		<replaceName>CaesarUniqueId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_caesaruniqueid</name>
  		<replaceName>CaesarUniqueId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_caesaruniqueid</name>
  		<replaceName>CaesarUniqueId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& caesaruniqueid() const;
  inline void set_caesaruniqueid(const ::std::string& value);
  inline void set_caesaruniqueid(const char* value);
  inline void set_caesaruniqueid(const char* value, size_t size);
  inline ::std::string* mutable_caesaruniqueid();
  inline ::std::string* release_caesaruniqueid();
  inline void set_allocated_caesaruniqueid(::std::string* caesaruniqueid);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetRecommendByCaesarUniqueIdReq</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // @@protoc_insertion_point(class_scope:pb.TFriendGetRecommendByCaesarUniqueIdReq)
 private:
  inline void set_has_caesaruniqueid();
  inline void clear_has_caesaruniqueid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* caesaruniqueid_;
  ::std::string* serverid_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendGetRecommendByCaesarUniqueIdReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendGetRecommendByCaesarUniqueIdRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendGetRecommendByCaesarUniqueIdRsp : public ::google::protobuf::Message {
 public:
  TFriendGetRecommendByCaesarUniqueIdRsp();
  virtual ~TFriendGetRecommendByCaesarUniqueIdRsp();

  TFriendGetRecommendByCaesarUniqueIdRsp(const TFriendGetRecommendByCaesarUniqueIdRsp& from);

  inline TFriendGetRecommendByCaesarUniqueIdRsp& operator=(const TFriendGetRecommendByCaesarUniqueIdRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendGetRecommendByCaesarUniqueIdRsp& default_instance();

  void Swap(TFriendGetRecommendByCaesarUniqueIdRsp* other);

  // implements Message ----------------------------------------------

  TFriendGetRecommendByCaesarUniqueIdRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendGetRecommendByCaesarUniqueIdRsp& from);
  void MergeFrom(const TFriendGetRecommendByCaesarUniqueIdRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUserSimpleInfoWithStatus RecommendArray = 1;
  inline int recommendarray_size() const;
  inline void clear_recommendarray();
  static const int kRecommendArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetRecommendByCaesarUniqueIdRsp</name>
  	<Function>
  		<name>recommendarray</name>
  		<replaceName>RecommendArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recommendarray</name>
  		<replaceName>RecommendArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recommendarray</name>
  		<replaceName>RecommendArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recommendarray</name>
  		<replaceName>RecommendArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recommendarray_size</name>
  		<replaceName>RecommendArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfoWithStatus& recommendarray(int index) const;
  inline ::pb::TUserSimpleInfoWithStatus* mutable_recommendarray(int index);
  inline ::pb::TUserSimpleInfoWithStatus* add_recommendarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >&
      recommendarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >*
      mutable_recommendarray();

  // @@protoc_insertion_point(class_scope:pb.TFriendGetRecommendByCaesarUniqueIdRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus > recommendarray_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendGetRecommendByCaesarUniqueIdRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendGetAppliedListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendGetAppliedListReq : public ::google::protobuf::Message {
 public:
  TFriendGetAppliedListReq();
  virtual ~TFriendGetAppliedListReq();

  TFriendGetAppliedListReq(const TFriendGetAppliedListReq& from);

  inline TFriendGetAppliedListReq& operator=(const TFriendGetAppliedListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendGetAppliedListReq& default_instance();

  void Swap(TFriendGetAppliedListReq* other);

  // implements Message ----------------------------------------------

  TFriendGetAppliedListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendGetAppliedListReq& from);
  void MergeFrom(const TFriendGetAppliedListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TFriendGetAppliedListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendGetAppliedListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendGetAppliedListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendGetAppliedListRsp : public ::google::protobuf::Message {
 public:
  TFriendGetAppliedListRsp();
  virtual ~TFriendGetAppliedListRsp();

  TFriendGetAppliedListRsp(const TFriendGetAppliedListRsp& from);

  inline TFriendGetAppliedListRsp& operator=(const TFriendGetAppliedListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendGetAppliedListRsp& default_instance();

  void Swap(TFriendGetAppliedListRsp* other);

  // implements Message ----------------------------------------------

  TFriendGetAppliedListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendGetAppliedListRsp& from);
  void MergeFrom(const TFriendGetAppliedListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUserSimpleInfoWithStatus AppliedArray = 1;
  inline int appliedarray_size() const;
  inline void clear_appliedarray();
  static const int kAppliedArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetAppliedListRsp</name>
  	<Function>
  		<name>appliedarray</name>
  		<replaceName>AppliedArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_appliedarray</name>
  		<replaceName>AppliedArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_appliedarray</name>
  		<replaceName>AppliedArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_appliedarray</name>
  		<replaceName>AppliedArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>appliedarray_size</name>
  		<replaceName>AppliedArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfoWithStatus& appliedarray(int index) const;
  inline ::pb::TUserSimpleInfoWithStatus* mutable_appliedarray(int index);
  inline ::pb::TUserSimpleInfoWithStatus* add_appliedarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >&
      appliedarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >*
      mutable_appliedarray();

  // @@protoc_insertion_point(class_scope:pb.TFriendGetAppliedListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus > appliedarray_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendGetAppliedListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendAddFriendReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendAddFriendReq : public ::google::protobuf::Message {
 public:
  TFriendAddFriendReq();
  virtual ~TFriendAddFriendReq();

  TFriendAddFriendReq(const TFriendAddFriendReq& from);

  inline TFriendAddFriendReq& operator=(const TFriendAddFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendAddFriendReq& default_instance();

  void Swap(TFriendAddFriendReq* other);

  // implements Message ----------------------------------------------

  TFriendAddFriendReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendAddFriendReq& from);
  void MergeFrom(const TFriendAddFriendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 FUid = 1;
  inline bool has_fuid() const;
  inline void clear_fuid();
  static const int kFUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendAddFriendReq</name>
  	<Function>
  		<name>fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fuid() const;
  inline void set_fuid(::google::protobuf::uint64 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFriendAddFriendReq</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // @@protoc_insertion_point(class_scope:pb.TFriendAddFriendReq)
 private:
  inline void set_has_fuid();
  inline void clear_has_fuid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 fuid_;
  ::std::string* serverid_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendAddFriendReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendAddApplyUserFromOtherServerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendAddApplyUserFromOtherServerReq : public ::google::protobuf::Message {
 public:
  TFriendAddApplyUserFromOtherServerReq();
  virtual ~TFriendAddApplyUserFromOtherServerReq();

  TFriendAddApplyUserFromOtherServerReq(const TFriendAddApplyUserFromOtherServerReq& from);

  inline TFriendAddApplyUserFromOtherServerReq& operator=(const TFriendAddApplyUserFromOtherServerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendAddApplyUserFromOtherServerReq& default_instance();

  void Swap(TFriendAddApplyUserFromOtherServerReq* other);

  // implements Message ----------------------------------------------

  TFriendAddApplyUserFromOtherServerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendAddApplyUserFromOtherServerReq& from);
  void MergeFrom(const TFriendAddApplyUserFromOtherServerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendAddApplyUserFromOtherServerReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint64 FUid = 2;
  inline bool has_fuid() const;
  inline void clear_fuid();
  static const int kFUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFriendAddApplyUserFromOtherServerReq</name>
  	<Function>
  		<name>fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fuid() const;
  inline void set_fuid(::google::protobuf::uint64 value);

  // optional string FServerId = 3;
  inline bool has_fserverid() const;
  inline void clear_fserverid();
  static const int kFServerIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TFriendAddApplyUserFromOtherServerReq</name>
  	<Function>
  		<name>fserverid</name>
  		<replaceName>FServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fserverid</name>
  		<replaceName>FServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fserverid</name>
  		<replaceName>FServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& fserverid() const;
  inline void set_fserverid(const ::std::string& value);
  inline void set_fserverid(const char* value);
  inline void set_fserverid(const char* value, size_t size);
  inline ::std::string* mutable_fserverid();
  inline ::std::string* release_fserverid();
  inline void set_allocated_fserverid(::std::string* fserverid);

  // @@protoc_insertion_point(class_scope:pb.TFriendAddApplyUserFromOtherServerReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_fuid();
  inline void clear_has_fuid();
  inline void set_has_fserverid();
  inline void clear_has_fserverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 fuid_;
  ::std::string* fserverid_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendAddApplyUserFromOtherServerReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendDelFriendReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendDelFriendReq : public ::google::protobuf::Message {
 public:
  TFriendDelFriendReq();
  virtual ~TFriendDelFriendReq();

  TFriendDelFriendReq(const TFriendDelFriendReq& from);

  inline TFriendDelFriendReq& operator=(const TFriendDelFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendDelFriendReq& default_instance();

  void Swap(TFriendDelFriendReq* other);

  // implements Message ----------------------------------------------

  TFriendDelFriendReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendDelFriendReq& from);
  void MergeFrom(const TFriendDelFriendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 FUid = 1;
  inline bool has_fuid() const;
  inline void clear_fuid();
  static const int kFUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendDelFriendReq</name>
  	<Function>
  		<name>fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fuid() const;
  inline void set_fuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TFriendDelFriendReq)
 private:
  inline void set_has_fuid();
  inline void clear_has_fuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 fuid_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendDelFriendReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendRejectApplyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendRejectApplyReq : public ::google::protobuf::Message {
 public:
  TFriendRejectApplyReq();
  virtual ~TFriendRejectApplyReq();

  TFriendRejectApplyReq(const TFriendRejectApplyReq& from);

  inline TFriendRejectApplyReq& operator=(const TFriendRejectApplyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendRejectApplyReq& default_instance();

  void Swap(TFriendRejectApplyReq* other);

  // implements Message ----------------------------------------------

  TFriendRejectApplyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendRejectApplyReq& from);
  void MergeFrom(const TFriendRejectApplyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 FUid = 1;
  inline bool has_fuid() const;
  inline void clear_fuid();
  static const int kFUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendRejectApplyReq</name>
  	<Function>
  		<name>fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fuid() const;
  inline void set_fuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TFriendRejectApplyReq)
 private:
  inline void set_has_fuid();
  inline void clear_has_fuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 fuid_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendRejectApplyReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendAgreeApplyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendAgreeApplyReq : public ::google::protobuf::Message {
 public:
  TFriendAgreeApplyReq();
  virtual ~TFriendAgreeApplyReq();

  TFriendAgreeApplyReq(const TFriendAgreeApplyReq& from);

  inline TFriendAgreeApplyReq& operator=(const TFriendAgreeApplyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendAgreeApplyReq& default_instance();

  void Swap(TFriendAgreeApplyReq* other);

  // implements Message ----------------------------------------------

  TFriendAgreeApplyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendAgreeApplyReq& from);
  void MergeFrom(const TFriendAgreeApplyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 FUid = 1;
  inline bool has_fuid() const;
  inline void clear_fuid();
  static const int kFUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendAgreeApplyReq</name>
  	<Function>
  		<name>fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fuid() const;
  inline void set_fuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TFriendAgreeApplyReq)
 private:
  inline void set_has_fuid();
  inline void clear_has_fuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 fuid_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendAgreeApplyReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendAgreeApplyFromOtherServerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendAgreeApplyFromOtherServerReq : public ::google::protobuf::Message {
 public:
  TFriendAgreeApplyFromOtherServerReq();
  virtual ~TFriendAgreeApplyFromOtherServerReq();

  TFriendAgreeApplyFromOtherServerReq(const TFriendAgreeApplyFromOtherServerReq& from);

  inline TFriendAgreeApplyFromOtherServerReq& operator=(const TFriendAgreeApplyFromOtherServerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendAgreeApplyFromOtherServerReq& default_instance();

  void Swap(TFriendAgreeApplyFromOtherServerReq* other);

  // implements Message ----------------------------------------------

  TFriendAgreeApplyFromOtherServerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendAgreeApplyFromOtherServerReq& from);
  void MergeFrom(const TFriendAgreeApplyFromOtherServerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendAgreeApplyFromOtherServerReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint64 FUid = 2;
  inline bool has_fuid() const;
  inline void clear_fuid();
  static const int kFUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFriendAgreeApplyFromOtherServerReq</name>
  	<Function>
  		<name>fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fuid() const;
  inline void set_fuid(::google::protobuf::uint64 value);

  // optional string FServerId = 3;
  inline bool has_fserverid() const;
  inline void clear_fserverid();
  static const int kFServerIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TFriendAgreeApplyFromOtherServerReq</name>
  	<Function>
  		<name>fserverid</name>
  		<replaceName>FServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fserverid</name>
  		<replaceName>FServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fserverid</name>
  		<replaceName>FServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& fserverid() const;
  inline void set_fserverid(const ::std::string& value);
  inline void set_fserverid(const char* value);
  inline void set_fserverid(const char* value, size_t size);
  inline ::std::string* mutable_fserverid();
  inline ::std::string* release_fserverid();
  inline void set_allocated_fserverid(::std::string* fserverid);

  // @@protoc_insertion_point(class_scope:pb.TFriendAgreeApplyFromOtherServerReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_fuid();
  inline void clear_has_fuid();
  inline void set_has_fserverid();
  inline void clear_has_fserverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 fuid_;
  ::std::string* fserverid_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendAgreeApplyFromOtherServerReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendIsFriendReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendIsFriendReq : public ::google::protobuf::Message {
 public:
  TFriendIsFriendReq();
  virtual ~TFriendIsFriendReq();

  TFriendIsFriendReq(const TFriendIsFriendReq& from);

  inline TFriendIsFriendReq& operator=(const TFriendIsFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendIsFriendReq& default_instance();

  void Swap(TFriendIsFriendReq* other);

  // implements Message ----------------------------------------------

  TFriendIsFriendReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendIsFriendReq& from);
  void MergeFrom(const TFriendIsFriendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 FUid = 1;
  inline bool has_fuid() const;
  inline void clear_fuid();
  static const int kFUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendIsFriendReq</name>
  	<Function>
  		<name>fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fuid() const;
  inline void set_fuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TFriendIsFriendReq)
 private:
  inline void set_has_fuid();
  inline void clear_has_fuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 fuid_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendIsFriendReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendIsFriendRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendIsFriendRsp : public ::google::protobuf::Message {
 public:
  TFriendIsFriendRsp();
  virtual ~TFriendIsFriendRsp();

  TFriendIsFriendRsp(const TFriendIsFriendRsp& from);

  inline TFriendIsFriendRsp& operator=(const TFriendIsFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendIsFriendRsp& default_instance();

  void Swap(TFriendIsFriendRsp* other);

  // implements Message ----------------------------------------------

  TFriendIsFriendRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendIsFriendRsp& from);
  void MergeFrom(const TFriendIsFriendRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 IsFriend = 1;
  inline bool has_isfriend() const;
  inline void clear_isfriend();
  static const int kIsFriendFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendIsFriendRsp</name>
  	<Function>
  		<name>isfriend</name>
  		<replaceName>IsFriend</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isfriend</name>
  		<replaceName>IsFriend</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isfriend</name>
  		<replaceName>IsFriend</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isfriend() const;
  inline void set_isfriend(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TFriendIsFriendRsp)
 private:
  inline void set_has_isfriend();
  inline void clear_has_isfriend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 isfriend_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendIsFriendRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendAddBlackReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendAddBlackReq : public ::google::protobuf::Message {
 public:
  TFriendAddBlackReq();
  virtual ~TFriendAddBlackReq();

  TFriendAddBlackReq(const TFriendAddBlackReq& from);

  inline TFriendAddBlackReq& operator=(const TFriendAddBlackReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendAddBlackReq& default_instance();

  void Swap(TFriendAddBlackReq* other);

  // implements Message ----------------------------------------------

  TFriendAddBlackReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendAddBlackReq& from);
  void MergeFrom(const TFriendAddBlackReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 BUid = 1;
  inline bool has_buid() const;
  inline void clear_buid();
  static const int kBUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendAddBlackReq</name>
  	<Function>
  		<name>buid</name>
  		<replaceName>BUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buid</name>
  		<replaceName>BUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buid</name>
  		<replaceName>BUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 buid() const;
  inline void set_buid(::google::protobuf::uint64 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFriendAddBlackReq</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // @@protoc_insertion_point(class_scope:pb.TFriendAddBlackReq)
 private:
  inline void set_has_buid();
  inline void clear_has_buid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 buid_;
  ::std::string* serverid_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendAddBlackReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendDelBlackReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendDelBlackReq : public ::google::protobuf::Message {
 public:
  TFriendDelBlackReq();
  virtual ~TFriendDelBlackReq();

  TFriendDelBlackReq(const TFriendDelBlackReq& from);

  inline TFriendDelBlackReq& operator=(const TFriendDelBlackReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendDelBlackReq& default_instance();

  void Swap(TFriendDelBlackReq* other);

  // implements Message ----------------------------------------------

  TFriendDelBlackReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendDelBlackReq& from);
  void MergeFrom(const TFriendDelBlackReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 BUid = 1;
  inline bool has_buid() const;
  inline void clear_buid();
  static const int kBUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendDelBlackReq</name>
  	<Function>
  		<name>buid</name>
  		<replaceName>BUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buid</name>
  		<replaceName>BUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buid</name>
  		<replaceName>BUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 buid() const;
  inline void set_buid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TFriendDelBlackReq)
 private:
  inline void set_has_buid();
  inline void clear_has_buid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 buid_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendDelBlackReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendIsBlackReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendIsBlackReq : public ::google::protobuf::Message {
 public:
  TFriendIsBlackReq();
  virtual ~TFriendIsBlackReq();

  TFriendIsBlackReq(const TFriendIsBlackReq& from);

  inline TFriendIsBlackReq& operator=(const TFriendIsBlackReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendIsBlackReq& default_instance();

  void Swap(TFriendIsBlackReq* other);

  // implements Message ----------------------------------------------

  TFriendIsBlackReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendIsBlackReq& from);
  void MergeFrom(const TFriendIsBlackReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 BUid = 1;
  inline bool has_buid() const;
  inline void clear_buid();
  static const int kBUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendIsBlackReq</name>
  	<Function>
  		<name>buid</name>
  		<replaceName>BUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buid</name>
  		<replaceName>BUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buid</name>
  		<replaceName>BUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 buid() const;
  inline void set_buid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TFriendIsBlackReq)
 private:
  inline void set_has_buid();
  inline void clear_has_buid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 buid_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendIsBlackReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendIsBlackRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendIsBlackRsp : public ::google::protobuf::Message {
 public:
  TFriendIsBlackRsp();
  virtual ~TFriendIsBlackRsp();

  TFriendIsBlackRsp(const TFriendIsBlackRsp& from);

  inline TFriendIsBlackRsp& operator=(const TFriendIsBlackRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendIsBlackRsp& default_instance();

  void Swap(TFriendIsBlackRsp* other);

  // implements Message ----------------------------------------------

  TFriendIsBlackRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendIsBlackRsp& from);
  void MergeFrom(const TFriendIsBlackRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 IsBlack = 1;
  inline bool has_isblack() const;
  inline void clear_isblack();
  static const int kIsBlackFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendIsBlackRsp</name>
  	<Function>
  		<name>isblack</name>
  		<replaceName>IsBlack</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isblack</name>
  		<replaceName>IsBlack</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isblack</name>
  		<replaceName>IsBlack</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isblack() const;
  inline void set_isblack(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TFriendIsBlackRsp)
 private:
  inline void set_has_isblack();
  inline void clear_has_isblack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 isblack_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendIsBlackRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendAgreeAllApplyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendAgreeAllApplyReq : public ::google::protobuf::Message {
 public:
  TFriendAgreeAllApplyReq();
  virtual ~TFriendAgreeAllApplyReq();

  TFriendAgreeAllApplyReq(const TFriendAgreeAllApplyReq& from);

  inline TFriendAgreeAllApplyReq& operator=(const TFriendAgreeAllApplyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendAgreeAllApplyReq& default_instance();

  void Swap(TFriendAgreeAllApplyReq* other);

  // implements Message ----------------------------------------------

  TFriendAgreeAllApplyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendAgreeAllApplyReq& from);
  void MergeFrom(const TFriendAgreeAllApplyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TFriendAgreeAllApplyReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendAgreeAllApplyReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendAgreeAllApplyRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendAgreeAllApplyRsp : public ::google::protobuf::Message {
 public:
  TFriendAgreeAllApplyRsp();
  virtual ~TFriendAgreeAllApplyRsp();

  TFriendAgreeAllApplyRsp(const TFriendAgreeAllApplyRsp& from);

  inline TFriendAgreeAllApplyRsp& operator=(const TFriendAgreeAllApplyRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendAgreeAllApplyRsp& default_instance();

  void Swap(TFriendAgreeAllApplyRsp* other);

  // implements Message ----------------------------------------------

  TFriendAgreeAllApplyRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendAgreeAllApplyRsp& from);
  void MergeFrom(const TFriendAgreeAllApplyRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AddNum = 1;
  inline bool has_addnum() const;
  inline void clear_addnum();
  static const int kAddNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendAgreeAllApplyRsp</name>
  	<Function>
  		<name>addnum</name>
  		<replaceName>AddNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_addnum</name>
  		<replaceName>AddNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_addnum</name>
  		<replaceName>AddNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 addnum() const;
  inline void set_addnum(::google::protobuf::uint32 value);

  // repeated uint64 AddUidArray = 2;
  inline int adduidarray_size() const;
  inline void clear_adduidarray();
  static const int kAddUidArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFriendAgreeAllApplyRsp</name>
  	<Function>
  		<name>adduidarray</name>
  		<replaceName>AddUidArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_adduidarray</name>
  		<replaceName>AddUidArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_adduidarray</name>
  		<replaceName>AddUidArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_adduidarray</name>
  		<replaceName>AddUidArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>adduidarray_size</name>
  		<replaceName>AddUidArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 adduidarray(int index) const;
  inline void set_adduidarray(int index, ::google::protobuf::uint64 value);
  inline void add_adduidarray(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      adduidarray() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_adduidarray();

  // repeated uint64 FailUidArray = 3;
  inline int failuidarray_size() const;
  inline void clear_failuidarray();
  static const int kFailUidArrayFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TFriendAgreeAllApplyRsp</name>
  	<Function>
  		<name>failuidarray</name>
  		<replaceName>FailUidArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_failuidarray</name>
  		<replaceName>FailUidArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_failuidarray</name>
  		<replaceName>FailUidArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_failuidarray</name>
  		<replaceName>FailUidArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>failuidarray_size</name>
  		<replaceName>FailUidArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 failuidarray(int index) const;
  inline void set_failuidarray(int index, ::google::protobuf::uint64 value);
  inline void add_failuidarray(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      failuidarray() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_failuidarray();

  // @@protoc_insertion_point(class_scope:pb.TFriendAgreeAllApplyRsp)
 private:
  inline void set_has_addnum();
  inline void clear_has_addnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > adduidarray_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > failuidarray_;
  ::google::protobuf::uint32 addnum_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendAgreeAllApplyRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendRejectAllApplyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendRejectAllApplyReq : public ::google::protobuf::Message {
 public:
  TFriendRejectAllApplyReq();
  virtual ~TFriendRejectAllApplyReq();

  TFriendRejectAllApplyReq(const TFriendRejectAllApplyReq& from);

  inline TFriendRejectAllApplyReq& operator=(const TFriendRejectAllApplyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendRejectAllApplyReq& default_instance();

  void Swap(TFriendRejectAllApplyReq* other);

  // implements Message ----------------------------------------------

  TFriendRejectAllApplyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendRejectAllApplyReq& from);
  void MergeFrom(const TFriendRejectAllApplyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TFriendRejectAllApplyReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendRejectAllApplyReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendSendGiftToFriendReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendSendGiftToFriendReq : public ::google::protobuf::Message {
 public:
  TFriendSendGiftToFriendReq();
  virtual ~TFriendSendGiftToFriendReq();

  TFriendSendGiftToFriendReq(const TFriendSendGiftToFriendReq& from);

  inline TFriendSendGiftToFriendReq& operator=(const TFriendSendGiftToFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendSendGiftToFriendReq& default_instance();

  void Swap(TFriendSendGiftToFriendReq* other);

  // implements Message ----------------------------------------------

  TFriendSendGiftToFriendReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendSendGiftToFriendReq& from);
  void MergeFrom(const TFriendSendGiftToFriendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 FUid = 1;
  inline bool has_fuid() const;
  inline void clear_fuid();
  static const int kFUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendSendGiftToFriendReq</name>
  	<Function>
  		<name>fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fuid() const;
  inline void set_fuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TFriendSendGiftToFriendReq)
 private:
  inline void set_has_fuid();
  inline void clear_has_fuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 fuid_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendSendGiftToFriendReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendSendGiftToFriendByOtherServerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendSendGiftToFriendByOtherServerReq : public ::google::protobuf::Message {
 public:
  TFriendSendGiftToFriendByOtherServerReq();
  virtual ~TFriendSendGiftToFriendByOtherServerReq();

  TFriendSendGiftToFriendByOtherServerReq(const TFriendSendGiftToFriendByOtherServerReq& from);

  inline TFriendSendGiftToFriendByOtherServerReq& operator=(const TFriendSendGiftToFriendByOtherServerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendSendGiftToFriendByOtherServerReq& default_instance();

  void Swap(TFriendSendGiftToFriendByOtherServerReq* other);

  // implements Message ----------------------------------------------

  TFriendSendGiftToFriendByOtherServerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendSendGiftToFriendByOtherServerReq& from);
  void MergeFrom(const TFriendSendGiftToFriendByOtherServerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendSendGiftToFriendByOtherServerReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint64 FUid = 2;
  inline bool has_fuid() const;
  inline void clear_fuid();
  static const int kFUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFriendSendGiftToFriendByOtherServerReq</name>
  	<Function>
  		<name>fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fuid() const;
  inline void set_fuid(::google::protobuf::uint64 value);

  // optional string FServerId = 3;
  inline bool has_fserverid() const;
  inline void clear_fserverid();
  static const int kFServerIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TFriendSendGiftToFriendByOtherServerReq</name>
  	<Function>
  		<name>fserverid</name>
  		<replaceName>FServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fserverid</name>
  		<replaceName>FServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fserverid</name>
  		<replaceName>FServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& fserverid() const;
  inline void set_fserverid(const ::std::string& value);
  inline void set_fserverid(const char* value);
  inline void set_fserverid(const char* value, size_t size);
  inline ::std::string* mutable_fserverid();
  inline ::std::string* release_fserverid();
  inline void set_allocated_fserverid(::std::string* fserverid);

  // @@protoc_insertion_point(class_scope:pb.TFriendSendGiftToFriendByOtherServerReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_fuid();
  inline void clear_has_fuid();
  inline void set_has_fserverid();
  inline void clear_has_fserverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 fuid_;
  ::std::string* fserverid_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendSendGiftToFriendByOtherServerReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendSendGiftToAllFriendReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendSendGiftToAllFriendReq : public ::google::protobuf::Message {
 public:
  TFriendSendGiftToAllFriendReq();
  virtual ~TFriendSendGiftToAllFriendReq();

  TFriendSendGiftToAllFriendReq(const TFriendSendGiftToAllFriendReq& from);

  inline TFriendSendGiftToAllFriendReq& operator=(const TFriendSendGiftToAllFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendSendGiftToAllFriendReq& default_instance();

  void Swap(TFriendSendGiftToAllFriendReq* other);

  // implements Message ----------------------------------------------

  TFriendSendGiftToAllFriendReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendSendGiftToAllFriendReq& from);
  void MergeFrom(const TFriendSendGiftToAllFriendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TFriendSendGiftToAllFriendReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendSendGiftToAllFriendReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendSendGiftToAllFriendRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendSendGiftToAllFriendRsp : public ::google::protobuf::Message {
 public:
  TFriendSendGiftToAllFriendRsp();
  virtual ~TFriendSendGiftToAllFriendRsp();

  TFriendSendGiftToAllFriendRsp(const TFriendSendGiftToAllFriendRsp& from);

  inline TFriendSendGiftToAllFriendRsp& operator=(const TFriendSendGiftToAllFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendSendGiftToAllFriendRsp& default_instance();

  void Swap(TFriendSendGiftToAllFriendRsp* other);

  // implements Message ----------------------------------------------

  TFriendSendGiftToAllFriendRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendSendGiftToAllFriendRsp& from);
  void MergeFrom(const TFriendSendGiftToAllFriendRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 SendUids = 1;
  inline int senduids_size() const;
  inline void clear_senduids();
  static const int kSendUidsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendSendGiftToAllFriendRsp</name>
  	<Function>
  		<name>senduids</name>
  		<replaceName>SendUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_senduids</name>
  		<replaceName>SendUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_senduids</name>
  		<replaceName>SendUids</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_senduids</name>
  		<replaceName>SendUids</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>senduids_size</name>
  		<replaceName>SendUids</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 senduids(int index) const;
  inline void set_senduids(int index, ::google::protobuf::uint64 value);
  inline void add_senduids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      senduids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_senduids();

  // @@protoc_insertion_point(class_scope:pb.TFriendSendGiftToAllFriendRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > senduids_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendSendGiftToAllFriendRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendReceiveFriendGiftReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendReceiveFriendGiftReq : public ::google::protobuf::Message {
 public:
  TFriendReceiveFriendGiftReq();
  virtual ~TFriendReceiveFriendGiftReq();

  TFriendReceiveFriendGiftReq(const TFriendReceiveFriendGiftReq& from);

  inline TFriendReceiveFriendGiftReq& operator=(const TFriendReceiveFriendGiftReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendReceiveFriendGiftReq& default_instance();

  void Swap(TFriendReceiveFriendGiftReq* other);

  // implements Message ----------------------------------------------

  TFriendReceiveFriendGiftReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendReceiveFriendGiftReq& from);
  void MergeFrom(const TFriendReceiveFriendGiftReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 FUid = 1;
  inline bool has_fuid() const;
  inline void clear_fuid();
  static const int kFUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendReceiveFriendGiftReq</name>
  	<Function>
  		<name>fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fuid() const;
  inline void set_fuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TFriendReceiveFriendGiftReq)
 private:
  inline void set_has_fuid();
  inline void clear_has_fuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 fuid_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendReceiveFriendGiftReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendReceiveAllGiftReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendReceiveAllGiftReq : public ::google::protobuf::Message {
 public:
  TFriendReceiveAllGiftReq();
  virtual ~TFriendReceiveAllGiftReq();

  TFriendReceiveAllGiftReq(const TFriendReceiveAllGiftReq& from);

  inline TFriendReceiveAllGiftReq& operator=(const TFriendReceiveAllGiftReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendReceiveAllGiftReq& default_instance();

  void Swap(TFriendReceiveAllGiftReq* other);

  // implements Message ----------------------------------------------

  TFriendReceiveAllGiftReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendReceiveAllGiftReq& from);
  void MergeFrom(const TFriendReceiveAllGiftReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TFriendReceiveAllGiftReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendReceiveAllGiftReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendReceiveAllGiftRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendReceiveAllGiftRsp : public ::google::protobuf::Message {
 public:
  TFriendReceiveAllGiftRsp();
  virtual ~TFriendReceiveAllGiftRsp();

  TFriendReceiveAllGiftRsp(const TFriendReceiveAllGiftRsp& from);

  inline TFriendReceiveAllGiftRsp& operator=(const TFriendReceiveAllGiftRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendReceiveAllGiftRsp& default_instance();

  void Swap(TFriendReceiveAllGiftRsp* other);

  // implements Message ----------------------------------------------

  TFriendReceiveAllGiftRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendReceiveAllGiftRsp& from);
  void MergeFrom(const TFriendReceiveAllGiftRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 ReceiveUids = 1;
  inline int receiveuids_size() const;
  inline void clear_receiveuids();
  static const int kReceiveUidsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendReceiveAllGiftRsp</name>
  	<Function>
  		<name>receiveuids</name>
  		<replaceName>ReceiveUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_receiveuids</name>
  		<replaceName>ReceiveUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_receiveuids</name>
  		<replaceName>ReceiveUids</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receiveuids</name>
  		<replaceName>ReceiveUids</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>receiveuids_size</name>
  		<replaceName>ReceiveUids</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 receiveuids(int index) const;
  inline void set_receiveuids(int index, ::google::protobuf::uint64 value);
  inline void add_receiveuids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      receiveuids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_receiveuids();

  // @@protoc_insertion_point(class_scope:pb.TFriendReceiveAllGiftRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > receiveuids_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendReceiveAllGiftRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendGetCheckInfoByOtherServerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendGetCheckInfoByOtherServerReq : public ::google::protobuf::Message {
 public:
  TFriendGetCheckInfoByOtherServerReq();
  virtual ~TFriendGetCheckInfoByOtherServerReq();

  TFriendGetCheckInfoByOtherServerReq(const TFriendGetCheckInfoByOtherServerReq& from);

  inline TFriendGetCheckInfoByOtherServerReq& operator=(const TFriendGetCheckInfoByOtherServerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendGetCheckInfoByOtherServerReq& default_instance();

  void Swap(TFriendGetCheckInfoByOtherServerReq* other);

  // implements Message ----------------------------------------------

  TFriendGetCheckInfoByOtherServerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendGetCheckInfoByOtherServerReq& from);
  void MergeFrom(const TFriendGetCheckInfoByOtherServerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 FUid = 1;
  inline bool has_fuid() const;
  inline void clear_fuid();
  static const int kFUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetCheckInfoByOtherServerReq</name>
  	<Function>
  		<name>fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fuid() const;
  inline void set_fuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TFriendGetCheckInfoByOtherServerReq)
 private:
  inline void set_has_fuid();
  inline void clear_has_fuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 fuid_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendGetCheckInfoByOtherServerReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendGetCheckInfoByOtherServerRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendGetCheckInfoByOtherServerRsp : public ::google::protobuf::Message {
 public:
  TFriendGetCheckInfoByOtherServerRsp();
  virtual ~TFriendGetCheckInfoByOtherServerRsp();

  TFriendGetCheckInfoByOtherServerRsp(const TFriendGetCheckInfoByOtherServerRsp& from);

  inline TFriendGetCheckInfoByOtherServerRsp& operator=(const TFriendGetCheckInfoByOtherServerRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendGetCheckInfoByOtherServerRsp& default_instance();

  void Swap(TFriendGetCheckInfoByOtherServerRsp* other);

  // implements Message ----------------------------------------------

  TFriendGetCheckInfoByOtherServerRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendGetCheckInfoByOtherServerRsp& from);
  void MergeFrom(const TFriendGetCheckInfoByOtherServerRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 InstanceSerialNum = 1;
  inline bool has_instanceserialnum() const;
  inline void clear_instanceserialnum();
  static const int kInstanceSerialNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetCheckInfoByOtherServerRsp</name>
  	<Function>
  		<name>instanceserialnum</name>
  		<replaceName>InstanceSerialNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_instanceserialnum</name>
  		<replaceName>InstanceSerialNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_instanceserialnum</name>
  		<replaceName>InstanceSerialNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 instanceserialnum() const;
  inline void set_instanceserialnum(::google::protobuf::uint32 value);

  // optional uint32 Level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFriendGetCheckInfoByOtherServerRsp</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TFriendGetCheckInfoByOtherServerRsp)
 private:
  inline void set_has_instanceserialnum();
  inline void clear_has_instanceserialnum();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 instanceserialnum_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendGetCheckInfoByOtherServerRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendAddBlackByOtherServerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendAddBlackByOtherServerReq : public ::google::protobuf::Message {
 public:
  TFriendAddBlackByOtherServerReq();
  virtual ~TFriendAddBlackByOtherServerReq();

  TFriendAddBlackByOtherServerReq(const TFriendAddBlackByOtherServerReq& from);

  inline TFriendAddBlackByOtherServerReq& operator=(const TFriendAddBlackByOtherServerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendAddBlackByOtherServerReq& default_instance();

  void Swap(TFriendAddBlackByOtherServerReq* other);

  // implements Message ----------------------------------------------

  TFriendAddBlackByOtherServerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendAddBlackByOtherServerReq& from);
  void MergeFrom(const TFriendAddBlackByOtherServerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendAddBlackByOtherServerReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint64 FUid = 2;
  inline bool has_fuid() const;
  inline void clear_fuid();
  static const int kFUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFriendAddBlackByOtherServerReq</name>
  	<Function>
  		<name>fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fuid() const;
  inline void set_fuid(::google::protobuf::uint64 value);

  // optional string FServerId = 3;
  inline bool has_fserverid() const;
  inline void clear_fserverid();
  static const int kFServerIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TFriendAddBlackByOtherServerReq</name>
  	<Function>
  		<name>fserverid</name>
  		<replaceName>FServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fserverid</name>
  		<replaceName>FServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fserverid</name>
  		<replaceName>FServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& fserverid() const;
  inline void set_fserverid(const ::std::string& value);
  inline void set_fserverid(const char* value);
  inline void set_fserverid(const char* value, size_t size);
  inline ::std::string* mutable_fserverid();
  inline ::std::string* release_fserverid();
  inline void set_allocated_fserverid(::std::string* fserverid);

  // @@protoc_insertion_point(class_scope:pb.TFriendAddBlackByOtherServerReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_fuid();
  inline void clear_has_fuid();
  inline void set_has_fserverid();
  inline void clear_has_fserverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 fuid_;
  ::std::string* fserverid_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendAddBlackByOtherServerReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendDelFriendByOtherServerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendDelFriendByOtherServerReq : public ::google::protobuf::Message {
 public:
  TFriendDelFriendByOtherServerReq();
  virtual ~TFriendDelFriendByOtherServerReq();

  TFriendDelFriendByOtherServerReq(const TFriendDelFriendByOtherServerReq& from);

  inline TFriendDelFriendByOtherServerReq& operator=(const TFriendDelFriendByOtherServerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendDelFriendByOtherServerReq& default_instance();

  void Swap(TFriendDelFriendByOtherServerReq* other);

  // implements Message ----------------------------------------------

  TFriendDelFriendByOtherServerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendDelFriendByOtherServerReq& from);
  void MergeFrom(const TFriendDelFriendByOtherServerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendDelFriendByOtherServerReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint64 FUid = 2;
  inline bool has_fuid() const;
  inline void clear_fuid();
  static const int kFUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFriendDelFriendByOtherServerReq</name>
  	<Function>
  		<name>fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fuid</name>
  		<replaceName>FUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fuid() const;
  inline void set_fuid(::google::protobuf::uint64 value);

  // optional string FServerId = 3;
  inline bool has_fserverid() const;
  inline void clear_fserverid();
  static const int kFServerIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TFriendDelFriendByOtherServerReq</name>
  	<Function>
  		<name>fserverid</name>
  		<replaceName>FServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fserverid</name>
  		<replaceName>FServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fserverid</name>
  		<replaceName>FServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& fserverid() const;
  inline void set_fserverid(const ::std::string& value);
  inline void set_fserverid(const char* value);
  inline void set_fserverid(const char* value, size_t size);
  inline ::std::string* mutable_fserverid();
  inline ::std::string* release_fserverid();
  inline void set_allocated_fserverid(::std::string* fserverid);

  // @@protoc_insertion_point(class_scope:pb.TFriendDelFriendByOtherServerReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_fuid();
  inline void clear_has_fuid();
  inline void set_has_fserverid();
  inline void clear_has_fserverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 fuid_;
  ::std::string* fserverid_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendDelFriendByOtherServerReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Friend.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendNotify : public ::google::protobuf::Message {
 public:
  TFriendNotify();
  virtual ~TFriendNotify();

  TFriendNotify(const TFriendNotify& from);

  inline TFriendNotify& operator=(const TFriendNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendNotify& default_instance();

  void Swap(TFriendNotify* other);

  // implements Message ----------------------------------------------

  TFriendNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendNotify& from);
  void MergeFrom(const TFriendNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 NewFriendUids = 1;
  inline int newfrienduids_size() const;
  inline void clear_newfrienduids();
  static const int kNewFriendUidsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendNotify</name>
  	<Function>
  		<name>newfrienduids</name>
  		<replaceName>NewFriendUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_newfrienduids</name>
  		<replaceName>NewFriendUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_newfrienduids</name>
  		<replaceName>NewFriendUids</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_newfrienduids</name>
  		<replaceName>NewFriendUids</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>newfrienduids_size</name>
  		<replaceName>NewFriendUids</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 newfrienduids(int index) const;
  inline void set_newfrienduids(int index, ::google::protobuf::uint64 value);
  inline void add_newfrienduids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      newfrienduids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_newfrienduids();

  // repeated uint64 DeleteFriendUids = 2;
  inline int deletefrienduids_size() const;
  inline void clear_deletefrienduids();
  static const int kDeleteFriendUidsFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFriendNotify</name>
  	<Function>
  		<name>deletefrienduids</name>
  		<replaceName>DeleteFriendUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_deletefrienduids</name>
  		<replaceName>DeleteFriendUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_deletefrienduids</name>
  		<replaceName>DeleteFriendUids</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_deletefrienduids</name>
  		<replaceName>DeleteFriendUids</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>deletefrienduids_size</name>
  		<replaceName>DeleteFriendUids</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 deletefrienduids(int index) const;
  inline void set_deletefrienduids(int index, ::google::protobuf::uint64 value);
  inline void add_deletefrienduids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      deletefrienduids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_deletefrienduids();

  // repeated uint64 NewAppliedUids = 3;
  inline int newapplieduids_size() const;
  inline void clear_newapplieduids();
  static const int kNewAppliedUidsFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TFriendNotify</name>
  	<Function>
  		<name>newapplieduids</name>
  		<replaceName>NewAppliedUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_newapplieduids</name>
  		<replaceName>NewAppliedUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_newapplieduids</name>
  		<replaceName>NewAppliedUids</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_newapplieduids</name>
  		<replaceName>NewAppliedUids</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>newapplieduids_size</name>
  		<replaceName>NewAppliedUids</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 newapplieduids(int index) const;
  inline void set_newapplieduids(int index, ::google::protobuf::uint64 value);
  inline void add_newapplieduids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      newapplieduids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_newapplieduids();

  // repeated uint64 DeleteAppliedUids = 4;
  inline int deleteapplieduids_size() const;
  inline void clear_deleteapplieduids();
  static const int kDeleteAppliedUidsFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TFriendNotify</name>
  	<Function>
  		<name>deleteapplieduids</name>
  		<replaceName>DeleteAppliedUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_deleteapplieduids</name>
  		<replaceName>DeleteAppliedUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_deleteapplieduids</name>
  		<replaceName>DeleteAppliedUids</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_deleteapplieduids</name>
  		<replaceName>DeleteAppliedUids</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>deleteapplieduids_size</name>
  		<replaceName>DeleteAppliedUids</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 deleteapplieduids(int index) const;
  inline void set_deleteapplieduids(int index, ::google::protobuf::uint64 value);
  inline void add_deleteapplieduids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      deleteapplieduids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_deleteapplieduids();

  // repeated uint64 FriendSendUids = 5;
  inline int friendsenduids_size() const;
  inline void clear_friendsenduids();
  static const int kFriendSendUidsFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TFriendNotify</name>
  	<Function>
  		<name>friendsenduids</name>
  		<replaceName>FriendSendUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_friendsenduids</name>
  		<replaceName>FriendSendUids</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_friendsenduids</name>
  		<replaceName>FriendSendUids</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_friendsenduids</name>
  		<replaceName>FriendSendUids</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>friendsenduids_size</name>
  		<replaceName>FriendSendUids</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 friendsenduids(int index) const;
  inline void set_friendsenduids(int index, ::google::protobuf::uint64 value);
  inline void add_friendsenduids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      friendsenduids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_friendsenduids();

  // @@protoc_insertion_point(class_scope:pb.TFriendNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > newfrienduids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > deletefrienduids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > newapplieduids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > deleteapplieduids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > friendsenduids_;
  friend void  protobuf_AddDesc_net_2fFriend_2eproto();
  friend void protobuf_AssignDesc_net_2fFriend_2eproto();
  friend void protobuf_ShutdownFile_net_2fFriend_2eproto();

  void InitAsDefaultInstance();
  static TFriendNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TFriendFriendInfo

// optional .pb.TUserSimpleInfoWithStatus FriendInfo = 1;
inline bool TFriendFriendInfo::has_friendinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendFriendInfo::set_has_friendinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendFriendInfo::clear_has_friendinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendFriendInfo::clear_friendinfo() {
  if (friendinfo_ != NULL) friendinfo_->::pb::TUserSimpleInfoWithStatus::Clear();
  clear_has_friendinfo();
}
inline const ::pb::TUserSimpleInfoWithStatus& TFriendFriendInfo::friendinfo() const {
  // @@protoc_insertion_point(field_get:pb.TFriendFriendInfo.FriendInfo)
  return friendinfo_ != NULL ? *friendinfo_ : *default_instance_->friendinfo_;
}
inline ::pb::TUserSimpleInfoWithStatus* TFriendFriendInfo::mutable_friendinfo() {
  set_has_friendinfo();
  if (friendinfo_ == NULL) friendinfo_ = new ::pb::TUserSimpleInfoWithStatus;
  // @@protoc_insertion_point(field_mutable:pb.TFriendFriendInfo.FriendInfo)
  return friendinfo_;
}
inline ::pb::TUserSimpleInfoWithStatus* TFriendFriendInfo::release_friendinfo() {
  clear_has_friendinfo();
  ::pb::TUserSimpleInfoWithStatus* temp = friendinfo_;
  friendinfo_ = NULL;
  return temp;
}
inline void TFriendFriendInfo::set_allocated_friendinfo(::pb::TUserSimpleInfoWithStatus* friendinfo) {
  delete friendinfo_;
  friendinfo_ = friendinfo;
  if (friendinfo) {
    set_has_friendinfo();
  } else {
    clear_has_friendinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFriendFriendInfo.FriendInfo)
}

// optional uint64 SendTime = 2;
inline bool TFriendFriendInfo::has_sendtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFriendFriendInfo::set_has_sendtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFriendFriendInfo::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFriendFriendInfo::clear_sendtime() {
  sendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_sendtime();
}
inline ::google::protobuf::uint64 TFriendFriendInfo::sendtime() const {
  // @@protoc_insertion_point(field_get:pb.TFriendFriendInfo.SendTime)
  return sendtime_;
}
inline void TFriendFriendInfo::set_sendtime(::google::protobuf::uint64 value) {
  set_has_sendtime();
  sendtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendFriendInfo.SendTime)
}

// optional uint64 GetTime = 3;
inline bool TFriendFriendInfo::has_gettime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFriendFriendInfo::set_has_gettime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFriendFriendInfo::clear_has_gettime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFriendFriendInfo::clear_gettime() {
  gettime_ = GOOGLE_ULONGLONG(0);
  clear_has_gettime();
}
inline ::google::protobuf::uint64 TFriendFriendInfo::gettime() const {
  // @@protoc_insertion_point(field_get:pb.TFriendFriendInfo.GetTime)
  return gettime_;
}
inline void TFriendFriendInfo::set_gettime(::google::protobuf::uint64 value) {
  set_has_gettime();
  gettime_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendFriendInfo.GetTime)
}

// optional uint32 ReceiveStatus = 4;
inline bool TFriendFriendInfo::has_receivestatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TFriendFriendInfo::set_has_receivestatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TFriendFriendInfo::clear_has_receivestatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TFriendFriendInfo::clear_receivestatus() {
  receivestatus_ = 0u;
  clear_has_receivestatus();
}
inline ::google::protobuf::uint32 TFriendFriendInfo::receivestatus() const {
  // @@protoc_insertion_point(field_get:pb.TFriendFriendInfo.ReceiveStatus)
  return receivestatus_;
}
inline void TFriendFriendInfo::set_receivestatus(::google::protobuf::uint32 value) {
  set_has_receivestatus();
  receivestatus_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendFriendInfo.ReceiveStatus)
}

// -------------------------------------------------------------------

// TFriendGetSimpleInfoReq

// -------------------------------------------------------------------

// TFriendGetSimpleInfoRsp

// optional uint32 SendNum = 1;
inline bool TFriendGetSimpleInfoRsp::has_sendnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendGetSimpleInfoRsp::set_has_sendnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendGetSimpleInfoRsp::clear_has_sendnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendGetSimpleInfoRsp::clear_sendnum() {
  sendnum_ = 0u;
  clear_has_sendnum();
}
inline ::google::protobuf::uint32 TFriendGetSimpleInfoRsp::sendnum() const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetSimpleInfoRsp.SendNum)
  return sendnum_;
}
inline void TFriendGetSimpleInfoRsp::set_sendnum(::google::protobuf::uint32 value) {
  set_has_sendnum();
  sendnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendGetSimpleInfoRsp.SendNum)
}

// optional uint32 ReceiveNum = 2;
inline bool TFriendGetSimpleInfoRsp::has_receivenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFriendGetSimpleInfoRsp::set_has_receivenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFriendGetSimpleInfoRsp::clear_has_receivenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFriendGetSimpleInfoRsp::clear_receivenum() {
  receivenum_ = 0u;
  clear_has_receivenum();
}
inline ::google::protobuf::uint32 TFriendGetSimpleInfoRsp::receivenum() const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetSimpleInfoRsp.ReceiveNum)
  return receivenum_;
}
inline void TFriendGetSimpleInfoRsp::set_receivenum(::google::protobuf::uint32 value) {
  set_has_receivenum();
  receivenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendGetSimpleInfoRsp.ReceiveNum)
}

// repeated uint64 FriendUids = 3;
inline int TFriendGetSimpleInfoRsp::frienduids_size() const {
  return frienduids_.size();
}
inline void TFriendGetSimpleInfoRsp::clear_frienduids() {
  frienduids_.Clear();
}
inline ::google::protobuf::uint64 TFriendGetSimpleInfoRsp::frienduids(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetSimpleInfoRsp.FriendUids)
  return frienduids_.Get(index);
}
inline void TFriendGetSimpleInfoRsp::set_frienduids(int index, ::google::protobuf::uint64 value) {
  frienduids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TFriendGetSimpleInfoRsp.FriendUids)
}
inline void TFriendGetSimpleInfoRsp::add_frienduids(::google::protobuf::uint64 value) {
  frienduids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TFriendGetSimpleInfoRsp.FriendUids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TFriendGetSimpleInfoRsp::frienduids() const {
  // @@protoc_insertion_point(field_list:pb.TFriendGetSimpleInfoRsp.FriendUids)
  return frienduids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TFriendGetSimpleInfoRsp::mutable_frienduids() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendGetSimpleInfoRsp.FriendUids)
  return &frienduids_;
}

// repeated uint64 BlackUids = 4;
inline int TFriendGetSimpleInfoRsp::blackuids_size() const {
  return blackuids_.size();
}
inline void TFriendGetSimpleInfoRsp::clear_blackuids() {
  blackuids_.Clear();
}
inline ::google::protobuf::uint64 TFriendGetSimpleInfoRsp::blackuids(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetSimpleInfoRsp.BlackUids)
  return blackuids_.Get(index);
}
inline void TFriendGetSimpleInfoRsp::set_blackuids(int index, ::google::protobuf::uint64 value) {
  blackuids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TFriendGetSimpleInfoRsp.BlackUids)
}
inline void TFriendGetSimpleInfoRsp::add_blackuids(::google::protobuf::uint64 value) {
  blackuids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TFriendGetSimpleInfoRsp.BlackUids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TFriendGetSimpleInfoRsp::blackuids() const {
  // @@protoc_insertion_point(field_list:pb.TFriendGetSimpleInfoRsp.BlackUids)
  return blackuids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TFriendGetSimpleInfoRsp::mutable_blackuids() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendGetSimpleInfoRsp.BlackUids)
  return &blackuids_;
}

// repeated uint64 AppliedUids = 5;
inline int TFriendGetSimpleInfoRsp::applieduids_size() const {
  return applieduids_.size();
}
inline void TFriendGetSimpleInfoRsp::clear_applieduids() {
  applieduids_.Clear();
}
inline ::google::protobuf::uint64 TFriendGetSimpleInfoRsp::applieduids(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetSimpleInfoRsp.AppliedUids)
  return applieduids_.Get(index);
}
inline void TFriendGetSimpleInfoRsp::set_applieduids(int index, ::google::protobuf::uint64 value) {
  applieduids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TFriendGetSimpleInfoRsp.AppliedUids)
}
inline void TFriendGetSimpleInfoRsp::add_applieduids(::google::protobuf::uint64 value) {
  applieduids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TFriendGetSimpleInfoRsp.AppliedUids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TFriendGetSimpleInfoRsp::applieduids() const {
  // @@protoc_insertion_point(field_list:pb.TFriendGetSimpleInfoRsp.AppliedUids)
  return applieduids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TFriendGetSimpleInfoRsp::mutable_applieduids() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendGetSimpleInfoRsp.AppliedUids)
  return &applieduids_;
}

// repeated uint64 CanReceiveUids = 6;
inline int TFriendGetSimpleInfoRsp::canreceiveuids_size() const {
  return canreceiveuids_.size();
}
inline void TFriendGetSimpleInfoRsp::clear_canreceiveuids() {
  canreceiveuids_.Clear();
}
inline ::google::protobuf::uint64 TFriendGetSimpleInfoRsp::canreceiveuids(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetSimpleInfoRsp.CanReceiveUids)
  return canreceiveuids_.Get(index);
}
inline void TFriendGetSimpleInfoRsp::set_canreceiveuids(int index, ::google::protobuf::uint64 value) {
  canreceiveuids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TFriendGetSimpleInfoRsp.CanReceiveUids)
}
inline void TFriendGetSimpleInfoRsp::add_canreceiveuids(::google::protobuf::uint64 value) {
  canreceiveuids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TFriendGetSimpleInfoRsp.CanReceiveUids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TFriendGetSimpleInfoRsp::canreceiveuids() const {
  // @@protoc_insertion_point(field_list:pb.TFriendGetSimpleInfoRsp.CanReceiveUids)
  return canreceiveuids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TFriendGetSimpleInfoRsp::mutable_canreceiveuids() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendGetSimpleInfoRsp.CanReceiveUids)
  return &canreceiveuids_;
}

// -------------------------------------------------------------------

// TFriendGetFriendListReq

// -------------------------------------------------------------------

// TFriendGetFriendListRsp

// repeated .pb.TFriendFriendInfo FriendArray = 1;
inline int TFriendGetFriendListRsp::friendarray_size() const {
  return friendarray_.size();
}
inline void TFriendGetFriendListRsp::clear_friendarray() {
  friendarray_.Clear();
}
inline const ::pb::TFriendFriendInfo& TFriendGetFriendListRsp::friendarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetFriendListRsp.FriendArray)
  return friendarray_.Get(index);
}
inline ::pb::TFriendFriendInfo* TFriendGetFriendListRsp::mutable_friendarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TFriendGetFriendListRsp.FriendArray)
  return friendarray_.Mutable(index);
}
inline ::pb::TFriendFriendInfo* TFriendGetFriendListRsp::add_friendarray() {
  // @@protoc_insertion_point(field_add:pb.TFriendGetFriendListRsp.FriendArray)
  return friendarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TFriendFriendInfo >&
TFriendGetFriendListRsp::friendarray() const {
  // @@protoc_insertion_point(field_list:pb.TFriendGetFriendListRsp.FriendArray)
  return friendarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TFriendFriendInfo >*
TFriendGetFriendListRsp::mutable_friendarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendGetFriendListRsp.FriendArray)
  return &friendarray_;
}

// -------------------------------------------------------------------

// TFriendGetFriendsInfoReq

// repeated uint64 FUids = 1;
inline int TFriendGetFriendsInfoReq::fuids_size() const {
  return fuids_.size();
}
inline void TFriendGetFriendsInfoReq::clear_fuids() {
  fuids_.Clear();
}
inline ::google::protobuf::uint64 TFriendGetFriendsInfoReq::fuids(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetFriendsInfoReq.FUids)
  return fuids_.Get(index);
}
inline void TFriendGetFriendsInfoReq::set_fuids(int index, ::google::protobuf::uint64 value) {
  fuids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TFriendGetFriendsInfoReq.FUids)
}
inline void TFriendGetFriendsInfoReq::add_fuids(::google::protobuf::uint64 value) {
  fuids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TFriendGetFriendsInfoReq.FUids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TFriendGetFriendsInfoReq::fuids() const {
  // @@protoc_insertion_point(field_list:pb.TFriendGetFriendsInfoReq.FUids)
  return fuids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TFriendGetFriendsInfoReq::mutable_fuids() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendGetFriendsInfoReq.FUids)
  return &fuids_;
}

// -------------------------------------------------------------------

// TFriendGetFriendsInfoRsp

// repeated .pb.TFriendFriendInfo FriendArray = 1;
inline int TFriendGetFriendsInfoRsp::friendarray_size() const {
  return friendarray_.size();
}
inline void TFriendGetFriendsInfoRsp::clear_friendarray() {
  friendarray_.Clear();
}
inline const ::pb::TFriendFriendInfo& TFriendGetFriendsInfoRsp::friendarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetFriendsInfoRsp.FriendArray)
  return friendarray_.Get(index);
}
inline ::pb::TFriendFriendInfo* TFriendGetFriendsInfoRsp::mutable_friendarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TFriendGetFriendsInfoRsp.FriendArray)
  return friendarray_.Mutable(index);
}
inline ::pb::TFriendFriendInfo* TFriendGetFriendsInfoRsp::add_friendarray() {
  // @@protoc_insertion_point(field_add:pb.TFriendGetFriendsInfoRsp.FriendArray)
  return friendarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TFriendFriendInfo >&
TFriendGetFriendsInfoRsp::friendarray() const {
  // @@protoc_insertion_point(field_list:pb.TFriendGetFriendsInfoRsp.FriendArray)
  return friendarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TFriendFriendInfo >*
TFriendGetFriendsInfoRsp::mutable_friendarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendGetFriendsInfoRsp.FriendArray)
  return &friendarray_;
}

// -------------------------------------------------------------------

// TFriendGetBlackListReq

// -------------------------------------------------------------------

// TFriendGetBlackListRsp

// repeated .pb.TUserSimpleInfoWithStatus BlackArray = 1;
inline int TFriendGetBlackListRsp::blackarray_size() const {
  return blackarray_.size();
}
inline void TFriendGetBlackListRsp::clear_blackarray() {
  blackarray_.Clear();
}
inline const ::pb::TUserSimpleInfoWithStatus& TFriendGetBlackListRsp::blackarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetBlackListRsp.BlackArray)
  return blackarray_.Get(index);
}
inline ::pb::TUserSimpleInfoWithStatus* TFriendGetBlackListRsp::mutable_blackarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TFriendGetBlackListRsp.BlackArray)
  return blackarray_.Mutable(index);
}
inline ::pb::TUserSimpleInfoWithStatus* TFriendGetBlackListRsp::add_blackarray() {
  // @@protoc_insertion_point(field_add:pb.TFriendGetBlackListRsp.BlackArray)
  return blackarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >&
TFriendGetBlackListRsp::blackarray() const {
  // @@protoc_insertion_point(field_list:pb.TFriendGetBlackListRsp.BlackArray)
  return blackarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >*
TFriendGetBlackListRsp::mutable_blackarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendGetBlackListRsp.BlackArray)
  return &blackarray_;
}

// -------------------------------------------------------------------

// TFriendGetRecommendFriendsReq

// -------------------------------------------------------------------

// TFriendGetRecommendFriendsRsp

// repeated .pb.TUserSimpleInfoWithStatus RecommendArray = 1;
inline int TFriendGetRecommendFriendsRsp::recommendarray_size() const {
  return recommendarray_.size();
}
inline void TFriendGetRecommendFriendsRsp::clear_recommendarray() {
  recommendarray_.Clear();
}
inline const ::pb::TUserSimpleInfoWithStatus& TFriendGetRecommendFriendsRsp::recommendarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetRecommendFriendsRsp.RecommendArray)
  return recommendarray_.Get(index);
}
inline ::pb::TUserSimpleInfoWithStatus* TFriendGetRecommendFriendsRsp::mutable_recommendarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TFriendGetRecommendFriendsRsp.RecommendArray)
  return recommendarray_.Mutable(index);
}
inline ::pb::TUserSimpleInfoWithStatus* TFriendGetRecommendFriendsRsp::add_recommendarray() {
  // @@protoc_insertion_point(field_add:pb.TFriendGetRecommendFriendsRsp.RecommendArray)
  return recommendarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >&
TFriendGetRecommendFriendsRsp::recommendarray() const {
  // @@protoc_insertion_point(field_list:pb.TFriendGetRecommendFriendsRsp.RecommendArray)
  return recommendarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >*
TFriendGetRecommendFriendsRsp::mutable_recommendarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendGetRecommendFriendsRsp.RecommendArray)
  return &recommendarray_;
}

// -------------------------------------------------------------------

// TFriendGetRecommendByNameReq

// optional string Uname = 1;
inline bool TFriendGetRecommendByNameReq::has_uname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendGetRecommendByNameReq::set_has_uname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendGetRecommendByNameReq::clear_has_uname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendGetRecommendByNameReq::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TFriendGetRecommendByNameReq::uname() const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetRecommendByNameReq.Uname)
  return *uname_;
}
inline void TFriendGetRecommendByNameReq::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TFriendGetRecommendByNameReq.Uname)
}
inline void TFriendGetRecommendByNameReq::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TFriendGetRecommendByNameReq.Uname)
}
inline void TFriendGetRecommendByNameReq::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TFriendGetRecommendByNameReq.Uname)
}
inline ::std::string* TFriendGetRecommendByNameReq::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TFriendGetRecommendByNameReq.Uname)
  return uname_;
}
inline ::std::string* TFriendGetRecommendByNameReq::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TFriendGetRecommendByNameReq::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFriendGetRecommendByNameReq.Uname)
}

// -------------------------------------------------------------------

// TFriendGetRecommendByNameRsp

// repeated .pb.TUserSimpleInfoWithStatus RecommendArray = 1;
inline int TFriendGetRecommendByNameRsp::recommendarray_size() const {
  return recommendarray_.size();
}
inline void TFriendGetRecommendByNameRsp::clear_recommendarray() {
  recommendarray_.Clear();
}
inline const ::pb::TUserSimpleInfoWithStatus& TFriendGetRecommendByNameRsp::recommendarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetRecommendByNameRsp.RecommendArray)
  return recommendarray_.Get(index);
}
inline ::pb::TUserSimpleInfoWithStatus* TFriendGetRecommendByNameRsp::mutable_recommendarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TFriendGetRecommendByNameRsp.RecommendArray)
  return recommendarray_.Mutable(index);
}
inline ::pb::TUserSimpleInfoWithStatus* TFriendGetRecommendByNameRsp::add_recommendarray() {
  // @@protoc_insertion_point(field_add:pb.TFriendGetRecommendByNameRsp.RecommendArray)
  return recommendarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >&
TFriendGetRecommendByNameRsp::recommendarray() const {
  // @@protoc_insertion_point(field_list:pb.TFriendGetRecommendByNameRsp.RecommendArray)
  return recommendarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >*
TFriendGetRecommendByNameRsp::mutable_recommendarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendGetRecommendByNameRsp.RecommendArray)
  return &recommendarray_;
}

// -------------------------------------------------------------------

// TFriendGetRecommendByCaesarUniqueIdReq

// optional string CaesarUniqueId = 1;
inline bool TFriendGetRecommendByCaesarUniqueIdReq::has_caesaruniqueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendGetRecommendByCaesarUniqueIdReq::set_has_caesaruniqueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendGetRecommendByCaesarUniqueIdReq::clear_has_caesaruniqueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendGetRecommendByCaesarUniqueIdReq::clear_caesaruniqueid() {
  if (caesaruniqueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caesaruniqueid_->clear();
  }
  clear_has_caesaruniqueid();
}
inline const ::std::string& TFriendGetRecommendByCaesarUniqueIdReq::caesaruniqueid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetRecommendByCaesarUniqueIdReq.CaesarUniqueId)
  return *caesaruniqueid_;
}
inline void TFriendGetRecommendByCaesarUniqueIdReq::set_caesaruniqueid(const ::std::string& value) {
  set_has_caesaruniqueid();
  if (caesaruniqueid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caesaruniqueid_ = new ::std::string;
  }
  caesaruniqueid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TFriendGetRecommendByCaesarUniqueIdReq.CaesarUniqueId)
}
inline void TFriendGetRecommendByCaesarUniqueIdReq::set_caesaruniqueid(const char* value) {
  set_has_caesaruniqueid();
  if (caesaruniqueid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caesaruniqueid_ = new ::std::string;
  }
  caesaruniqueid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TFriendGetRecommendByCaesarUniqueIdReq.CaesarUniqueId)
}
inline void TFriendGetRecommendByCaesarUniqueIdReq::set_caesaruniqueid(const char* value, size_t size) {
  set_has_caesaruniqueid();
  if (caesaruniqueid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caesaruniqueid_ = new ::std::string;
  }
  caesaruniqueid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TFriendGetRecommendByCaesarUniqueIdReq.CaesarUniqueId)
}
inline ::std::string* TFriendGetRecommendByCaesarUniqueIdReq::mutable_caesaruniqueid() {
  set_has_caesaruniqueid();
  if (caesaruniqueid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caesaruniqueid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TFriendGetRecommendByCaesarUniqueIdReq.CaesarUniqueId)
  return caesaruniqueid_;
}
inline ::std::string* TFriendGetRecommendByCaesarUniqueIdReq::release_caesaruniqueid() {
  clear_has_caesaruniqueid();
  if (caesaruniqueid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = caesaruniqueid_;
    caesaruniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TFriendGetRecommendByCaesarUniqueIdReq::set_allocated_caesaruniqueid(::std::string* caesaruniqueid) {
  if (caesaruniqueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete caesaruniqueid_;
  }
  if (caesaruniqueid) {
    set_has_caesaruniqueid();
    caesaruniqueid_ = caesaruniqueid;
  } else {
    clear_has_caesaruniqueid();
    caesaruniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFriendGetRecommendByCaesarUniqueIdReq.CaesarUniqueId)
}

// optional string ServerId = 2;
inline bool TFriendGetRecommendByCaesarUniqueIdReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFriendGetRecommendByCaesarUniqueIdReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFriendGetRecommendByCaesarUniqueIdReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFriendGetRecommendByCaesarUniqueIdReq::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TFriendGetRecommendByCaesarUniqueIdReq::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetRecommendByCaesarUniqueIdReq.ServerId)
  return *serverid_;
}
inline void TFriendGetRecommendByCaesarUniqueIdReq::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TFriendGetRecommendByCaesarUniqueIdReq.ServerId)
}
inline void TFriendGetRecommendByCaesarUniqueIdReq::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TFriendGetRecommendByCaesarUniqueIdReq.ServerId)
}
inline void TFriendGetRecommendByCaesarUniqueIdReq::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TFriendGetRecommendByCaesarUniqueIdReq.ServerId)
}
inline ::std::string* TFriendGetRecommendByCaesarUniqueIdReq::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TFriendGetRecommendByCaesarUniqueIdReq.ServerId)
  return serverid_;
}
inline ::std::string* TFriendGetRecommendByCaesarUniqueIdReq::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TFriendGetRecommendByCaesarUniqueIdReq::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFriendGetRecommendByCaesarUniqueIdReq.ServerId)
}

// -------------------------------------------------------------------

// TFriendGetRecommendByCaesarUniqueIdRsp

// repeated .pb.TUserSimpleInfoWithStatus RecommendArray = 1;
inline int TFriendGetRecommendByCaesarUniqueIdRsp::recommendarray_size() const {
  return recommendarray_.size();
}
inline void TFriendGetRecommendByCaesarUniqueIdRsp::clear_recommendarray() {
  recommendarray_.Clear();
}
inline const ::pb::TUserSimpleInfoWithStatus& TFriendGetRecommendByCaesarUniqueIdRsp::recommendarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetRecommendByCaesarUniqueIdRsp.RecommendArray)
  return recommendarray_.Get(index);
}
inline ::pb::TUserSimpleInfoWithStatus* TFriendGetRecommendByCaesarUniqueIdRsp::mutable_recommendarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TFriendGetRecommendByCaesarUniqueIdRsp.RecommendArray)
  return recommendarray_.Mutable(index);
}
inline ::pb::TUserSimpleInfoWithStatus* TFriendGetRecommendByCaesarUniqueIdRsp::add_recommendarray() {
  // @@protoc_insertion_point(field_add:pb.TFriendGetRecommendByCaesarUniqueIdRsp.RecommendArray)
  return recommendarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >&
TFriendGetRecommendByCaesarUniqueIdRsp::recommendarray() const {
  // @@protoc_insertion_point(field_list:pb.TFriendGetRecommendByCaesarUniqueIdRsp.RecommendArray)
  return recommendarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >*
TFriendGetRecommendByCaesarUniqueIdRsp::mutable_recommendarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendGetRecommendByCaesarUniqueIdRsp.RecommendArray)
  return &recommendarray_;
}

// -------------------------------------------------------------------

// TFriendGetAppliedListReq

// -------------------------------------------------------------------

// TFriendGetAppliedListRsp

// repeated .pb.TUserSimpleInfoWithStatus AppliedArray = 1;
inline int TFriendGetAppliedListRsp::appliedarray_size() const {
  return appliedarray_.size();
}
inline void TFriendGetAppliedListRsp::clear_appliedarray() {
  appliedarray_.Clear();
}
inline const ::pb::TUserSimpleInfoWithStatus& TFriendGetAppliedListRsp::appliedarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetAppliedListRsp.AppliedArray)
  return appliedarray_.Get(index);
}
inline ::pb::TUserSimpleInfoWithStatus* TFriendGetAppliedListRsp::mutable_appliedarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TFriendGetAppliedListRsp.AppliedArray)
  return appliedarray_.Mutable(index);
}
inline ::pb::TUserSimpleInfoWithStatus* TFriendGetAppliedListRsp::add_appliedarray() {
  // @@protoc_insertion_point(field_add:pb.TFriendGetAppliedListRsp.AppliedArray)
  return appliedarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >&
TFriendGetAppliedListRsp::appliedarray() const {
  // @@protoc_insertion_point(field_list:pb.TFriendGetAppliedListRsp.AppliedArray)
  return appliedarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfoWithStatus >*
TFriendGetAppliedListRsp::mutable_appliedarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendGetAppliedListRsp.AppliedArray)
  return &appliedarray_;
}

// -------------------------------------------------------------------

// TFriendAddFriendReq

// optional uint64 FUid = 1;
inline bool TFriendAddFriendReq::has_fuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendAddFriendReq::set_has_fuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendAddFriendReq::clear_has_fuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendAddFriendReq::clear_fuid() {
  fuid_ = GOOGLE_ULONGLONG(0);
  clear_has_fuid();
}
inline ::google::protobuf::uint64 TFriendAddFriendReq::fuid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendAddFriendReq.FUid)
  return fuid_;
}
inline void TFriendAddFriendReq::set_fuid(::google::protobuf::uint64 value) {
  set_has_fuid();
  fuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendAddFriendReq.FUid)
}

// optional string ServerId = 2;
inline bool TFriendAddFriendReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFriendAddFriendReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFriendAddFriendReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFriendAddFriendReq::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TFriendAddFriendReq::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendAddFriendReq.ServerId)
  return *serverid_;
}
inline void TFriendAddFriendReq::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TFriendAddFriendReq.ServerId)
}
inline void TFriendAddFriendReq::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TFriendAddFriendReq.ServerId)
}
inline void TFriendAddFriendReq::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TFriendAddFriendReq.ServerId)
}
inline ::std::string* TFriendAddFriendReq::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TFriendAddFriendReq.ServerId)
  return serverid_;
}
inline ::std::string* TFriendAddFriendReq::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TFriendAddFriendReq::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFriendAddFriendReq.ServerId)
}

// -------------------------------------------------------------------

// TFriendAddApplyUserFromOtherServerReq

// optional uint64 Uid = 1;
inline bool TFriendAddApplyUserFromOtherServerReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendAddApplyUserFromOtherServerReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendAddApplyUserFromOtherServerReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendAddApplyUserFromOtherServerReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TFriendAddApplyUserFromOtherServerReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendAddApplyUserFromOtherServerReq.Uid)
  return uid_;
}
inline void TFriendAddApplyUserFromOtherServerReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendAddApplyUserFromOtherServerReq.Uid)
}

// optional uint64 FUid = 2;
inline bool TFriendAddApplyUserFromOtherServerReq::has_fuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFriendAddApplyUserFromOtherServerReq::set_has_fuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFriendAddApplyUserFromOtherServerReq::clear_has_fuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFriendAddApplyUserFromOtherServerReq::clear_fuid() {
  fuid_ = GOOGLE_ULONGLONG(0);
  clear_has_fuid();
}
inline ::google::protobuf::uint64 TFriendAddApplyUserFromOtherServerReq::fuid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendAddApplyUserFromOtherServerReq.FUid)
  return fuid_;
}
inline void TFriendAddApplyUserFromOtherServerReq::set_fuid(::google::protobuf::uint64 value) {
  set_has_fuid();
  fuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendAddApplyUserFromOtherServerReq.FUid)
}

// optional string FServerId = 3;
inline bool TFriendAddApplyUserFromOtherServerReq::has_fserverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFriendAddApplyUserFromOtherServerReq::set_has_fserverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFriendAddApplyUserFromOtherServerReq::clear_has_fserverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFriendAddApplyUserFromOtherServerReq::clear_fserverid() {
  if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_->clear();
  }
  clear_has_fserverid();
}
inline const ::std::string& TFriendAddApplyUserFromOtherServerReq::fserverid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendAddApplyUserFromOtherServerReq.FServerId)
  return *fserverid_;
}
inline void TFriendAddApplyUserFromOtherServerReq::set_fserverid(const ::std::string& value) {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  fserverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TFriendAddApplyUserFromOtherServerReq.FServerId)
}
inline void TFriendAddApplyUserFromOtherServerReq::set_fserverid(const char* value) {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  fserverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TFriendAddApplyUserFromOtherServerReq.FServerId)
}
inline void TFriendAddApplyUserFromOtherServerReq::set_fserverid(const char* value, size_t size) {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  fserverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TFriendAddApplyUserFromOtherServerReq.FServerId)
}
inline ::std::string* TFriendAddApplyUserFromOtherServerReq::mutable_fserverid() {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TFriendAddApplyUserFromOtherServerReq.FServerId)
  return fserverid_;
}
inline ::std::string* TFriendAddApplyUserFromOtherServerReq::release_fserverid() {
  clear_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fserverid_;
    fserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TFriendAddApplyUserFromOtherServerReq::set_allocated_fserverid(::std::string* fserverid) {
  if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fserverid_;
  }
  if (fserverid) {
    set_has_fserverid();
    fserverid_ = fserverid;
  } else {
    clear_has_fserverid();
    fserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFriendAddApplyUserFromOtherServerReq.FServerId)
}

// -------------------------------------------------------------------

// TFriendDelFriendReq

// optional uint64 FUid = 1;
inline bool TFriendDelFriendReq::has_fuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendDelFriendReq::set_has_fuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendDelFriendReq::clear_has_fuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendDelFriendReq::clear_fuid() {
  fuid_ = GOOGLE_ULONGLONG(0);
  clear_has_fuid();
}
inline ::google::protobuf::uint64 TFriendDelFriendReq::fuid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendDelFriendReq.FUid)
  return fuid_;
}
inline void TFriendDelFriendReq::set_fuid(::google::protobuf::uint64 value) {
  set_has_fuid();
  fuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendDelFriendReq.FUid)
}

// -------------------------------------------------------------------

// TFriendRejectApplyReq

// optional uint64 FUid = 1;
inline bool TFriendRejectApplyReq::has_fuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendRejectApplyReq::set_has_fuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendRejectApplyReq::clear_has_fuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendRejectApplyReq::clear_fuid() {
  fuid_ = GOOGLE_ULONGLONG(0);
  clear_has_fuid();
}
inline ::google::protobuf::uint64 TFriendRejectApplyReq::fuid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendRejectApplyReq.FUid)
  return fuid_;
}
inline void TFriendRejectApplyReq::set_fuid(::google::protobuf::uint64 value) {
  set_has_fuid();
  fuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendRejectApplyReq.FUid)
}

// -------------------------------------------------------------------

// TFriendAgreeApplyReq

// optional uint64 FUid = 1;
inline bool TFriendAgreeApplyReq::has_fuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendAgreeApplyReq::set_has_fuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendAgreeApplyReq::clear_has_fuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendAgreeApplyReq::clear_fuid() {
  fuid_ = GOOGLE_ULONGLONG(0);
  clear_has_fuid();
}
inline ::google::protobuf::uint64 TFriendAgreeApplyReq::fuid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendAgreeApplyReq.FUid)
  return fuid_;
}
inline void TFriendAgreeApplyReq::set_fuid(::google::protobuf::uint64 value) {
  set_has_fuid();
  fuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendAgreeApplyReq.FUid)
}

// -------------------------------------------------------------------

// TFriendAgreeApplyFromOtherServerReq

// optional uint64 Uid = 1;
inline bool TFriendAgreeApplyFromOtherServerReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendAgreeApplyFromOtherServerReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendAgreeApplyFromOtherServerReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendAgreeApplyFromOtherServerReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TFriendAgreeApplyFromOtherServerReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendAgreeApplyFromOtherServerReq.Uid)
  return uid_;
}
inline void TFriendAgreeApplyFromOtherServerReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendAgreeApplyFromOtherServerReq.Uid)
}

// optional uint64 FUid = 2;
inline bool TFriendAgreeApplyFromOtherServerReq::has_fuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFriendAgreeApplyFromOtherServerReq::set_has_fuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFriendAgreeApplyFromOtherServerReq::clear_has_fuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFriendAgreeApplyFromOtherServerReq::clear_fuid() {
  fuid_ = GOOGLE_ULONGLONG(0);
  clear_has_fuid();
}
inline ::google::protobuf::uint64 TFriendAgreeApplyFromOtherServerReq::fuid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendAgreeApplyFromOtherServerReq.FUid)
  return fuid_;
}
inline void TFriendAgreeApplyFromOtherServerReq::set_fuid(::google::protobuf::uint64 value) {
  set_has_fuid();
  fuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendAgreeApplyFromOtherServerReq.FUid)
}

// optional string FServerId = 3;
inline bool TFriendAgreeApplyFromOtherServerReq::has_fserverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFriendAgreeApplyFromOtherServerReq::set_has_fserverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFriendAgreeApplyFromOtherServerReq::clear_has_fserverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFriendAgreeApplyFromOtherServerReq::clear_fserverid() {
  if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_->clear();
  }
  clear_has_fserverid();
}
inline const ::std::string& TFriendAgreeApplyFromOtherServerReq::fserverid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendAgreeApplyFromOtherServerReq.FServerId)
  return *fserverid_;
}
inline void TFriendAgreeApplyFromOtherServerReq::set_fserverid(const ::std::string& value) {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  fserverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TFriendAgreeApplyFromOtherServerReq.FServerId)
}
inline void TFriendAgreeApplyFromOtherServerReq::set_fserverid(const char* value) {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  fserverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TFriendAgreeApplyFromOtherServerReq.FServerId)
}
inline void TFriendAgreeApplyFromOtherServerReq::set_fserverid(const char* value, size_t size) {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  fserverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TFriendAgreeApplyFromOtherServerReq.FServerId)
}
inline ::std::string* TFriendAgreeApplyFromOtherServerReq::mutable_fserverid() {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TFriendAgreeApplyFromOtherServerReq.FServerId)
  return fserverid_;
}
inline ::std::string* TFriendAgreeApplyFromOtherServerReq::release_fserverid() {
  clear_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fserverid_;
    fserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TFriendAgreeApplyFromOtherServerReq::set_allocated_fserverid(::std::string* fserverid) {
  if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fserverid_;
  }
  if (fserverid) {
    set_has_fserverid();
    fserverid_ = fserverid;
  } else {
    clear_has_fserverid();
    fserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFriendAgreeApplyFromOtherServerReq.FServerId)
}

// -------------------------------------------------------------------

// TFriendIsFriendReq

// optional uint64 FUid = 1;
inline bool TFriendIsFriendReq::has_fuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendIsFriendReq::set_has_fuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendIsFriendReq::clear_has_fuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendIsFriendReq::clear_fuid() {
  fuid_ = GOOGLE_ULONGLONG(0);
  clear_has_fuid();
}
inline ::google::protobuf::uint64 TFriendIsFriendReq::fuid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendIsFriendReq.FUid)
  return fuid_;
}
inline void TFriendIsFriendReq::set_fuid(::google::protobuf::uint64 value) {
  set_has_fuid();
  fuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendIsFriendReq.FUid)
}

// -------------------------------------------------------------------

// TFriendIsFriendRsp

// optional uint32 IsFriend = 1;
inline bool TFriendIsFriendRsp::has_isfriend() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendIsFriendRsp::set_has_isfriend() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendIsFriendRsp::clear_has_isfriend() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendIsFriendRsp::clear_isfriend() {
  isfriend_ = 0u;
  clear_has_isfriend();
}
inline ::google::protobuf::uint32 TFriendIsFriendRsp::isfriend() const {
  // @@protoc_insertion_point(field_get:pb.TFriendIsFriendRsp.IsFriend)
  return isfriend_;
}
inline void TFriendIsFriendRsp::set_isfriend(::google::protobuf::uint32 value) {
  set_has_isfriend();
  isfriend_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendIsFriendRsp.IsFriend)
}

// -------------------------------------------------------------------

// TFriendAddBlackReq

// optional uint64 BUid = 1;
inline bool TFriendAddBlackReq::has_buid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendAddBlackReq::set_has_buid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendAddBlackReq::clear_has_buid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendAddBlackReq::clear_buid() {
  buid_ = GOOGLE_ULONGLONG(0);
  clear_has_buid();
}
inline ::google::protobuf::uint64 TFriendAddBlackReq::buid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendAddBlackReq.BUid)
  return buid_;
}
inline void TFriendAddBlackReq::set_buid(::google::protobuf::uint64 value) {
  set_has_buid();
  buid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendAddBlackReq.BUid)
}

// optional string ServerId = 2;
inline bool TFriendAddBlackReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFriendAddBlackReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFriendAddBlackReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFriendAddBlackReq::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TFriendAddBlackReq::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendAddBlackReq.ServerId)
  return *serverid_;
}
inline void TFriendAddBlackReq::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TFriendAddBlackReq.ServerId)
}
inline void TFriendAddBlackReq::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TFriendAddBlackReq.ServerId)
}
inline void TFriendAddBlackReq::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TFriendAddBlackReq.ServerId)
}
inline ::std::string* TFriendAddBlackReq::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TFriendAddBlackReq.ServerId)
  return serverid_;
}
inline ::std::string* TFriendAddBlackReq::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TFriendAddBlackReq::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFriendAddBlackReq.ServerId)
}

// -------------------------------------------------------------------

// TFriendDelBlackReq

// optional uint64 BUid = 1;
inline bool TFriendDelBlackReq::has_buid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendDelBlackReq::set_has_buid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendDelBlackReq::clear_has_buid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendDelBlackReq::clear_buid() {
  buid_ = GOOGLE_ULONGLONG(0);
  clear_has_buid();
}
inline ::google::protobuf::uint64 TFriendDelBlackReq::buid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendDelBlackReq.BUid)
  return buid_;
}
inline void TFriendDelBlackReq::set_buid(::google::protobuf::uint64 value) {
  set_has_buid();
  buid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendDelBlackReq.BUid)
}

// -------------------------------------------------------------------

// TFriendIsBlackReq

// optional uint64 BUid = 1;
inline bool TFriendIsBlackReq::has_buid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendIsBlackReq::set_has_buid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendIsBlackReq::clear_has_buid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendIsBlackReq::clear_buid() {
  buid_ = GOOGLE_ULONGLONG(0);
  clear_has_buid();
}
inline ::google::protobuf::uint64 TFriendIsBlackReq::buid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendIsBlackReq.BUid)
  return buid_;
}
inline void TFriendIsBlackReq::set_buid(::google::protobuf::uint64 value) {
  set_has_buid();
  buid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendIsBlackReq.BUid)
}

// -------------------------------------------------------------------

// TFriendIsBlackRsp

// optional uint32 IsBlack = 1;
inline bool TFriendIsBlackRsp::has_isblack() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendIsBlackRsp::set_has_isblack() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendIsBlackRsp::clear_has_isblack() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendIsBlackRsp::clear_isblack() {
  isblack_ = 0u;
  clear_has_isblack();
}
inline ::google::protobuf::uint32 TFriendIsBlackRsp::isblack() const {
  // @@protoc_insertion_point(field_get:pb.TFriendIsBlackRsp.IsBlack)
  return isblack_;
}
inline void TFriendIsBlackRsp::set_isblack(::google::protobuf::uint32 value) {
  set_has_isblack();
  isblack_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendIsBlackRsp.IsBlack)
}

// -------------------------------------------------------------------

// TFriendAgreeAllApplyReq

// -------------------------------------------------------------------

// TFriendAgreeAllApplyRsp

// optional uint32 AddNum = 1;
inline bool TFriendAgreeAllApplyRsp::has_addnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendAgreeAllApplyRsp::set_has_addnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendAgreeAllApplyRsp::clear_has_addnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendAgreeAllApplyRsp::clear_addnum() {
  addnum_ = 0u;
  clear_has_addnum();
}
inline ::google::protobuf::uint32 TFriendAgreeAllApplyRsp::addnum() const {
  // @@protoc_insertion_point(field_get:pb.TFriendAgreeAllApplyRsp.AddNum)
  return addnum_;
}
inline void TFriendAgreeAllApplyRsp::set_addnum(::google::protobuf::uint32 value) {
  set_has_addnum();
  addnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendAgreeAllApplyRsp.AddNum)
}

// repeated uint64 AddUidArray = 2;
inline int TFriendAgreeAllApplyRsp::adduidarray_size() const {
  return adduidarray_.size();
}
inline void TFriendAgreeAllApplyRsp::clear_adduidarray() {
  adduidarray_.Clear();
}
inline ::google::protobuf::uint64 TFriendAgreeAllApplyRsp::adduidarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendAgreeAllApplyRsp.AddUidArray)
  return adduidarray_.Get(index);
}
inline void TFriendAgreeAllApplyRsp::set_adduidarray(int index, ::google::protobuf::uint64 value) {
  adduidarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TFriendAgreeAllApplyRsp.AddUidArray)
}
inline void TFriendAgreeAllApplyRsp::add_adduidarray(::google::protobuf::uint64 value) {
  adduidarray_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TFriendAgreeAllApplyRsp.AddUidArray)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TFriendAgreeAllApplyRsp::adduidarray() const {
  // @@protoc_insertion_point(field_list:pb.TFriendAgreeAllApplyRsp.AddUidArray)
  return adduidarray_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TFriendAgreeAllApplyRsp::mutable_adduidarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendAgreeAllApplyRsp.AddUidArray)
  return &adduidarray_;
}

// repeated uint64 FailUidArray = 3;
inline int TFriendAgreeAllApplyRsp::failuidarray_size() const {
  return failuidarray_.size();
}
inline void TFriendAgreeAllApplyRsp::clear_failuidarray() {
  failuidarray_.Clear();
}
inline ::google::protobuf::uint64 TFriendAgreeAllApplyRsp::failuidarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendAgreeAllApplyRsp.FailUidArray)
  return failuidarray_.Get(index);
}
inline void TFriendAgreeAllApplyRsp::set_failuidarray(int index, ::google::protobuf::uint64 value) {
  failuidarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TFriendAgreeAllApplyRsp.FailUidArray)
}
inline void TFriendAgreeAllApplyRsp::add_failuidarray(::google::protobuf::uint64 value) {
  failuidarray_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TFriendAgreeAllApplyRsp.FailUidArray)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TFriendAgreeAllApplyRsp::failuidarray() const {
  // @@protoc_insertion_point(field_list:pb.TFriendAgreeAllApplyRsp.FailUidArray)
  return failuidarray_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TFriendAgreeAllApplyRsp::mutable_failuidarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendAgreeAllApplyRsp.FailUidArray)
  return &failuidarray_;
}

// -------------------------------------------------------------------

// TFriendRejectAllApplyReq

// -------------------------------------------------------------------

// TFriendSendGiftToFriendReq

// optional uint64 FUid = 1;
inline bool TFriendSendGiftToFriendReq::has_fuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendSendGiftToFriendReq::set_has_fuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendSendGiftToFriendReq::clear_has_fuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendSendGiftToFriendReq::clear_fuid() {
  fuid_ = GOOGLE_ULONGLONG(0);
  clear_has_fuid();
}
inline ::google::protobuf::uint64 TFriendSendGiftToFriendReq::fuid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendSendGiftToFriendReq.FUid)
  return fuid_;
}
inline void TFriendSendGiftToFriendReq::set_fuid(::google::protobuf::uint64 value) {
  set_has_fuid();
  fuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendSendGiftToFriendReq.FUid)
}

// -------------------------------------------------------------------

// TFriendSendGiftToFriendByOtherServerReq

// optional uint64 Uid = 1;
inline bool TFriendSendGiftToFriendByOtherServerReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendSendGiftToFriendByOtherServerReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendSendGiftToFriendByOtherServerReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendSendGiftToFriendByOtherServerReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TFriendSendGiftToFriendByOtherServerReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendSendGiftToFriendByOtherServerReq.Uid)
  return uid_;
}
inline void TFriendSendGiftToFriendByOtherServerReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendSendGiftToFriendByOtherServerReq.Uid)
}

// optional uint64 FUid = 2;
inline bool TFriendSendGiftToFriendByOtherServerReq::has_fuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFriendSendGiftToFriendByOtherServerReq::set_has_fuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFriendSendGiftToFriendByOtherServerReq::clear_has_fuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFriendSendGiftToFriendByOtherServerReq::clear_fuid() {
  fuid_ = GOOGLE_ULONGLONG(0);
  clear_has_fuid();
}
inline ::google::protobuf::uint64 TFriendSendGiftToFriendByOtherServerReq::fuid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendSendGiftToFriendByOtherServerReq.FUid)
  return fuid_;
}
inline void TFriendSendGiftToFriendByOtherServerReq::set_fuid(::google::protobuf::uint64 value) {
  set_has_fuid();
  fuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendSendGiftToFriendByOtherServerReq.FUid)
}

// optional string FServerId = 3;
inline bool TFriendSendGiftToFriendByOtherServerReq::has_fserverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFriendSendGiftToFriendByOtherServerReq::set_has_fserverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFriendSendGiftToFriendByOtherServerReq::clear_has_fserverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFriendSendGiftToFriendByOtherServerReq::clear_fserverid() {
  if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_->clear();
  }
  clear_has_fserverid();
}
inline const ::std::string& TFriendSendGiftToFriendByOtherServerReq::fserverid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendSendGiftToFriendByOtherServerReq.FServerId)
  return *fserverid_;
}
inline void TFriendSendGiftToFriendByOtherServerReq::set_fserverid(const ::std::string& value) {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  fserverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TFriendSendGiftToFriendByOtherServerReq.FServerId)
}
inline void TFriendSendGiftToFriendByOtherServerReq::set_fserverid(const char* value) {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  fserverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TFriendSendGiftToFriendByOtherServerReq.FServerId)
}
inline void TFriendSendGiftToFriendByOtherServerReq::set_fserverid(const char* value, size_t size) {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  fserverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TFriendSendGiftToFriendByOtherServerReq.FServerId)
}
inline ::std::string* TFriendSendGiftToFriendByOtherServerReq::mutable_fserverid() {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TFriendSendGiftToFriendByOtherServerReq.FServerId)
  return fserverid_;
}
inline ::std::string* TFriendSendGiftToFriendByOtherServerReq::release_fserverid() {
  clear_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fserverid_;
    fserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TFriendSendGiftToFriendByOtherServerReq::set_allocated_fserverid(::std::string* fserverid) {
  if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fserverid_;
  }
  if (fserverid) {
    set_has_fserverid();
    fserverid_ = fserverid;
  } else {
    clear_has_fserverid();
    fserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFriendSendGiftToFriendByOtherServerReq.FServerId)
}

// -------------------------------------------------------------------

// TFriendSendGiftToAllFriendReq

// -------------------------------------------------------------------

// TFriendSendGiftToAllFriendRsp

// repeated uint64 SendUids = 1;
inline int TFriendSendGiftToAllFriendRsp::senduids_size() const {
  return senduids_.size();
}
inline void TFriendSendGiftToAllFriendRsp::clear_senduids() {
  senduids_.Clear();
}
inline ::google::protobuf::uint64 TFriendSendGiftToAllFriendRsp::senduids(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendSendGiftToAllFriendRsp.SendUids)
  return senduids_.Get(index);
}
inline void TFriendSendGiftToAllFriendRsp::set_senduids(int index, ::google::protobuf::uint64 value) {
  senduids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TFriendSendGiftToAllFriendRsp.SendUids)
}
inline void TFriendSendGiftToAllFriendRsp::add_senduids(::google::protobuf::uint64 value) {
  senduids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TFriendSendGiftToAllFriendRsp.SendUids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TFriendSendGiftToAllFriendRsp::senduids() const {
  // @@protoc_insertion_point(field_list:pb.TFriendSendGiftToAllFriendRsp.SendUids)
  return senduids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TFriendSendGiftToAllFriendRsp::mutable_senduids() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendSendGiftToAllFriendRsp.SendUids)
  return &senduids_;
}

// -------------------------------------------------------------------

// TFriendReceiveFriendGiftReq

// optional uint64 FUid = 1;
inline bool TFriendReceiveFriendGiftReq::has_fuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendReceiveFriendGiftReq::set_has_fuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendReceiveFriendGiftReq::clear_has_fuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendReceiveFriendGiftReq::clear_fuid() {
  fuid_ = GOOGLE_ULONGLONG(0);
  clear_has_fuid();
}
inline ::google::protobuf::uint64 TFriendReceiveFriendGiftReq::fuid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendReceiveFriendGiftReq.FUid)
  return fuid_;
}
inline void TFriendReceiveFriendGiftReq::set_fuid(::google::protobuf::uint64 value) {
  set_has_fuid();
  fuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendReceiveFriendGiftReq.FUid)
}

// -------------------------------------------------------------------

// TFriendReceiveAllGiftReq

// -------------------------------------------------------------------

// TFriendReceiveAllGiftRsp

// repeated uint64 ReceiveUids = 1;
inline int TFriendReceiveAllGiftRsp::receiveuids_size() const {
  return receiveuids_.size();
}
inline void TFriendReceiveAllGiftRsp::clear_receiveuids() {
  receiveuids_.Clear();
}
inline ::google::protobuf::uint64 TFriendReceiveAllGiftRsp::receiveuids(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendReceiveAllGiftRsp.ReceiveUids)
  return receiveuids_.Get(index);
}
inline void TFriendReceiveAllGiftRsp::set_receiveuids(int index, ::google::protobuf::uint64 value) {
  receiveuids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TFriendReceiveAllGiftRsp.ReceiveUids)
}
inline void TFriendReceiveAllGiftRsp::add_receiveuids(::google::protobuf::uint64 value) {
  receiveuids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TFriendReceiveAllGiftRsp.ReceiveUids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TFriendReceiveAllGiftRsp::receiveuids() const {
  // @@protoc_insertion_point(field_list:pb.TFriendReceiveAllGiftRsp.ReceiveUids)
  return receiveuids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TFriendReceiveAllGiftRsp::mutable_receiveuids() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendReceiveAllGiftRsp.ReceiveUids)
  return &receiveuids_;
}

// -------------------------------------------------------------------

// TFriendGetCheckInfoByOtherServerReq

// optional uint64 FUid = 1;
inline bool TFriendGetCheckInfoByOtherServerReq::has_fuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendGetCheckInfoByOtherServerReq::set_has_fuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendGetCheckInfoByOtherServerReq::clear_has_fuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendGetCheckInfoByOtherServerReq::clear_fuid() {
  fuid_ = GOOGLE_ULONGLONG(0);
  clear_has_fuid();
}
inline ::google::protobuf::uint64 TFriendGetCheckInfoByOtherServerReq::fuid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetCheckInfoByOtherServerReq.FUid)
  return fuid_;
}
inline void TFriendGetCheckInfoByOtherServerReq::set_fuid(::google::protobuf::uint64 value) {
  set_has_fuid();
  fuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendGetCheckInfoByOtherServerReq.FUid)
}

// -------------------------------------------------------------------

// TFriendGetCheckInfoByOtherServerRsp

// optional uint32 InstanceSerialNum = 1;
inline bool TFriendGetCheckInfoByOtherServerRsp::has_instanceserialnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendGetCheckInfoByOtherServerRsp::set_has_instanceserialnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendGetCheckInfoByOtherServerRsp::clear_has_instanceserialnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendGetCheckInfoByOtherServerRsp::clear_instanceserialnum() {
  instanceserialnum_ = 0u;
  clear_has_instanceserialnum();
}
inline ::google::protobuf::uint32 TFriendGetCheckInfoByOtherServerRsp::instanceserialnum() const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetCheckInfoByOtherServerRsp.InstanceSerialNum)
  return instanceserialnum_;
}
inline void TFriendGetCheckInfoByOtherServerRsp::set_instanceserialnum(::google::protobuf::uint32 value) {
  set_has_instanceserialnum();
  instanceserialnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendGetCheckInfoByOtherServerRsp.InstanceSerialNum)
}

// optional uint32 Level = 2;
inline bool TFriendGetCheckInfoByOtherServerRsp::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFriendGetCheckInfoByOtherServerRsp::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFriendGetCheckInfoByOtherServerRsp::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFriendGetCheckInfoByOtherServerRsp::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TFriendGetCheckInfoByOtherServerRsp::level() const {
  // @@protoc_insertion_point(field_get:pb.TFriendGetCheckInfoByOtherServerRsp.Level)
  return level_;
}
inline void TFriendGetCheckInfoByOtherServerRsp::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendGetCheckInfoByOtherServerRsp.Level)
}

// -------------------------------------------------------------------

// TFriendAddBlackByOtherServerReq

// optional uint64 Uid = 1;
inline bool TFriendAddBlackByOtherServerReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendAddBlackByOtherServerReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendAddBlackByOtherServerReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendAddBlackByOtherServerReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TFriendAddBlackByOtherServerReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendAddBlackByOtherServerReq.Uid)
  return uid_;
}
inline void TFriendAddBlackByOtherServerReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendAddBlackByOtherServerReq.Uid)
}

// optional uint64 FUid = 2;
inline bool TFriendAddBlackByOtherServerReq::has_fuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFriendAddBlackByOtherServerReq::set_has_fuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFriendAddBlackByOtherServerReq::clear_has_fuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFriendAddBlackByOtherServerReq::clear_fuid() {
  fuid_ = GOOGLE_ULONGLONG(0);
  clear_has_fuid();
}
inline ::google::protobuf::uint64 TFriendAddBlackByOtherServerReq::fuid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendAddBlackByOtherServerReq.FUid)
  return fuid_;
}
inline void TFriendAddBlackByOtherServerReq::set_fuid(::google::protobuf::uint64 value) {
  set_has_fuid();
  fuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendAddBlackByOtherServerReq.FUid)
}

// optional string FServerId = 3;
inline bool TFriendAddBlackByOtherServerReq::has_fserverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFriendAddBlackByOtherServerReq::set_has_fserverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFriendAddBlackByOtherServerReq::clear_has_fserverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFriendAddBlackByOtherServerReq::clear_fserverid() {
  if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_->clear();
  }
  clear_has_fserverid();
}
inline const ::std::string& TFriendAddBlackByOtherServerReq::fserverid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendAddBlackByOtherServerReq.FServerId)
  return *fserverid_;
}
inline void TFriendAddBlackByOtherServerReq::set_fserverid(const ::std::string& value) {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  fserverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TFriendAddBlackByOtherServerReq.FServerId)
}
inline void TFriendAddBlackByOtherServerReq::set_fserverid(const char* value) {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  fserverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TFriendAddBlackByOtherServerReq.FServerId)
}
inline void TFriendAddBlackByOtherServerReq::set_fserverid(const char* value, size_t size) {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  fserverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TFriendAddBlackByOtherServerReq.FServerId)
}
inline ::std::string* TFriendAddBlackByOtherServerReq::mutable_fserverid() {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TFriendAddBlackByOtherServerReq.FServerId)
  return fserverid_;
}
inline ::std::string* TFriendAddBlackByOtherServerReq::release_fserverid() {
  clear_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fserverid_;
    fserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TFriendAddBlackByOtherServerReq::set_allocated_fserverid(::std::string* fserverid) {
  if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fserverid_;
  }
  if (fserverid) {
    set_has_fserverid();
    fserverid_ = fserverid;
  } else {
    clear_has_fserverid();
    fserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFriendAddBlackByOtherServerReq.FServerId)
}

// -------------------------------------------------------------------

// TFriendDelFriendByOtherServerReq

// optional uint64 Uid = 1;
inline bool TFriendDelFriendByOtherServerReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendDelFriendByOtherServerReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendDelFriendByOtherServerReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendDelFriendByOtherServerReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TFriendDelFriendByOtherServerReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendDelFriendByOtherServerReq.Uid)
  return uid_;
}
inline void TFriendDelFriendByOtherServerReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendDelFriendByOtherServerReq.Uid)
}

// optional uint64 FUid = 2;
inline bool TFriendDelFriendByOtherServerReq::has_fuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFriendDelFriendByOtherServerReq::set_has_fuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFriendDelFriendByOtherServerReq::clear_has_fuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFriendDelFriendByOtherServerReq::clear_fuid() {
  fuid_ = GOOGLE_ULONGLONG(0);
  clear_has_fuid();
}
inline ::google::protobuf::uint64 TFriendDelFriendByOtherServerReq::fuid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendDelFriendByOtherServerReq.FUid)
  return fuid_;
}
inline void TFriendDelFriendByOtherServerReq::set_fuid(::google::protobuf::uint64 value) {
  set_has_fuid();
  fuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendDelFriendByOtherServerReq.FUid)
}

// optional string FServerId = 3;
inline bool TFriendDelFriendByOtherServerReq::has_fserverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFriendDelFriendByOtherServerReq::set_has_fserverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFriendDelFriendByOtherServerReq::clear_has_fserverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFriendDelFriendByOtherServerReq::clear_fserverid() {
  if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_->clear();
  }
  clear_has_fserverid();
}
inline const ::std::string& TFriendDelFriendByOtherServerReq::fserverid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendDelFriendByOtherServerReq.FServerId)
  return *fserverid_;
}
inline void TFriendDelFriendByOtherServerReq::set_fserverid(const ::std::string& value) {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  fserverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TFriendDelFriendByOtherServerReq.FServerId)
}
inline void TFriendDelFriendByOtherServerReq::set_fserverid(const char* value) {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  fserverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TFriendDelFriendByOtherServerReq.FServerId)
}
inline void TFriendDelFriendByOtherServerReq::set_fserverid(const char* value, size_t size) {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  fserverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TFriendDelFriendByOtherServerReq.FServerId)
}
inline ::std::string* TFriendDelFriendByOtherServerReq::mutable_fserverid() {
  set_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fserverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TFriendDelFriendByOtherServerReq.FServerId)
  return fserverid_;
}
inline ::std::string* TFriendDelFriendByOtherServerReq::release_fserverid() {
  clear_has_fserverid();
  if (fserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fserverid_;
    fserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TFriendDelFriendByOtherServerReq::set_allocated_fserverid(::std::string* fserverid) {
  if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fserverid_;
  }
  if (fserverid) {
    set_has_fserverid();
    fserverid_ = fserverid;
  } else {
    clear_has_fserverid();
    fserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFriendDelFriendByOtherServerReq.FServerId)
}

// -------------------------------------------------------------------

// TFriendNotify

// repeated uint64 NewFriendUids = 1;
inline int TFriendNotify::newfrienduids_size() const {
  return newfrienduids_.size();
}
inline void TFriendNotify::clear_newfrienduids() {
  newfrienduids_.Clear();
}
inline ::google::protobuf::uint64 TFriendNotify::newfrienduids(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendNotify.NewFriendUids)
  return newfrienduids_.Get(index);
}
inline void TFriendNotify::set_newfrienduids(int index, ::google::protobuf::uint64 value) {
  newfrienduids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TFriendNotify.NewFriendUids)
}
inline void TFriendNotify::add_newfrienduids(::google::protobuf::uint64 value) {
  newfrienduids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TFriendNotify.NewFriendUids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TFriendNotify::newfrienduids() const {
  // @@protoc_insertion_point(field_list:pb.TFriendNotify.NewFriendUids)
  return newfrienduids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TFriendNotify::mutable_newfrienduids() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendNotify.NewFriendUids)
  return &newfrienduids_;
}

// repeated uint64 DeleteFriendUids = 2;
inline int TFriendNotify::deletefrienduids_size() const {
  return deletefrienduids_.size();
}
inline void TFriendNotify::clear_deletefrienduids() {
  deletefrienduids_.Clear();
}
inline ::google::protobuf::uint64 TFriendNotify::deletefrienduids(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendNotify.DeleteFriendUids)
  return deletefrienduids_.Get(index);
}
inline void TFriendNotify::set_deletefrienduids(int index, ::google::protobuf::uint64 value) {
  deletefrienduids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TFriendNotify.DeleteFriendUids)
}
inline void TFriendNotify::add_deletefrienduids(::google::protobuf::uint64 value) {
  deletefrienduids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TFriendNotify.DeleteFriendUids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TFriendNotify::deletefrienduids() const {
  // @@protoc_insertion_point(field_list:pb.TFriendNotify.DeleteFriendUids)
  return deletefrienduids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TFriendNotify::mutable_deletefrienduids() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendNotify.DeleteFriendUids)
  return &deletefrienduids_;
}

// repeated uint64 NewAppliedUids = 3;
inline int TFriendNotify::newapplieduids_size() const {
  return newapplieduids_.size();
}
inline void TFriendNotify::clear_newapplieduids() {
  newapplieduids_.Clear();
}
inline ::google::protobuf::uint64 TFriendNotify::newapplieduids(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendNotify.NewAppliedUids)
  return newapplieduids_.Get(index);
}
inline void TFriendNotify::set_newapplieduids(int index, ::google::protobuf::uint64 value) {
  newapplieduids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TFriendNotify.NewAppliedUids)
}
inline void TFriendNotify::add_newapplieduids(::google::protobuf::uint64 value) {
  newapplieduids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TFriendNotify.NewAppliedUids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TFriendNotify::newapplieduids() const {
  // @@protoc_insertion_point(field_list:pb.TFriendNotify.NewAppliedUids)
  return newapplieduids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TFriendNotify::mutable_newapplieduids() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendNotify.NewAppliedUids)
  return &newapplieduids_;
}

// repeated uint64 DeleteAppliedUids = 4;
inline int TFriendNotify::deleteapplieduids_size() const {
  return deleteapplieduids_.size();
}
inline void TFriendNotify::clear_deleteapplieduids() {
  deleteapplieduids_.Clear();
}
inline ::google::protobuf::uint64 TFriendNotify::deleteapplieduids(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendNotify.DeleteAppliedUids)
  return deleteapplieduids_.Get(index);
}
inline void TFriendNotify::set_deleteapplieduids(int index, ::google::protobuf::uint64 value) {
  deleteapplieduids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TFriendNotify.DeleteAppliedUids)
}
inline void TFriendNotify::add_deleteapplieduids(::google::protobuf::uint64 value) {
  deleteapplieduids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TFriendNotify.DeleteAppliedUids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TFriendNotify::deleteapplieduids() const {
  // @@protoc_insertion_point(field_list:pb.TFriendNotify.DeleteAppliedUids)
  return deleteapplieduids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TFriendNotify::mutable_deleteapplieduids() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendNotify.DeleteAppliedUids)
  return &deleteapplieduids_;
}

// repeated uint64 FriendSendUids = 5;
inline int TFriendNotify::friendsenduids_size() const {
  return friendsenduids_.size();
}
inline void TFriendNotify::clear_friendsenduids() {
  friendsenduids_.Clear();
}
inline ::google::protobuf::uint64 TFriendNotify::friendsenduids(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFriendNotify.FriendSendUids)
  return friendsenduids_.Get(index);
}
inline void TFriendNotify::set_friendsenduids(int index, ::google::protobuf::uint64 value) {
  friendsenduids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TFriendNotify.FriendSendUids)
}
inline void TFriendNotify::add_friendsenduids(::google::protobuf::uint64 value) {
  friendsenduids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TFriendNotify.FriendSendUids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TFriendNotify::friendsenduids() const {
  // @@protoc_insertion_point(field_list:pb.TFriendNotify.FriendSendUids)
  return friendsenduids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TFriendNotify::mutable_friendsenduids() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFriendNotify.FriendSendUids)
  return &friendsenduids_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EFriendReceiveStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EFriendReceiveStatus>() {
  return ::pb::EFriendReceiveStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fFriend_2eproto__INCLUDED
