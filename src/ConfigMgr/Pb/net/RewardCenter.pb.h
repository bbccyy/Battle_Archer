// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/RewardCenter.proto

#ifndef PROTOBUF_net_2fRewardCenter_2eproto__INCLUDED
#define PROTOBUF_net_2fRewardCenter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fRewardCenter_2eproto();
void protobuf_AssignDesc_net_2fRewardCenter_2eproto();
void protobuf_ShutdownFile_net_2fRewardCenter_2eproto();

class TRewardCenterRewardInfo;
class TRewardCenterGetInfoRsp;
class TRewardCenterReceiveRewardReq;
class TRewardCenterRewardChangePush;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TRewardCenterRewardInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RewardCenter.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRewardCenterRewardInfo : public ::google::protobuf::Message {
 public:
  TRewardCenterRewardInfo();
  virtual ~TRewardCenterRewardInfo();

  TRewardCenterRewardInfo(const TRewardCenterRewardInfo& from);

  inline TRewardCenterRewardInfo& operator=(const TRewardCenterRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRewardCenterRewardInfo& default_instance();

  void Swap(TRewardCenterRewardInfo* other);

  // implements Message ----------------------------------------------

  TRewardCenterRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRewardCenterRewardInfo& from);
  void MergeFrom(const TRewardCenterRewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRewardCenterRewardInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 Type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRewardCenterRewardInfo</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 SendTime = 3;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TRewardCenterRewardInfo</name>
  	<Function>
  		<name>sendtime</name>
  		<replaceName>SendTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sendtime</name>
  		<replaceName>SendTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sendtime</name>
  		<replaceName>SendTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 sendtime() const;
  inline void set_sendtime(::google::protobuf::uint64 value);

  // optional uint64 RecvTime = 4;
  inline bool has_recvtime() const;
  inline void clear_recvtime();
  static const int kRecvTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TRewardCenterRewardInfo</name>
  	<Function>
  		<name>recvtime</name>
  		<replaceName>RecvTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recvtime</name>
  		<replaceName>RecvTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recvtime</name>
  		<replaceName>RecvTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recvtime() const;
  inline void set_recvtime(::google::protobuf::uint64 value);

  // optional uint64 AutoRecvTime = 5;
  inline bool has_autorecvtime() const;
  inline void clear_autorecvtime();
  static const int kAutoRecvTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TRewardCenterRewardInfo</name>
  	<Function>
  		<name>autorecvtime</name>
  		<replaceName>AutoRecvTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_autorecvtime</name>
  		<replaceName>AutoRecvTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_autorecvtime</name>
  		<replaceName>AutoRecvTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 autorecvtime() const;
  inline void set_autorecvtime(::google::protobuf::uint64 value);

  // repeated .pb.TCommonReward ArrReward = 6;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TRewardCenterRewardInfo</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // optional bytes Extend = 7;
  inline bool has_extend() const;
  inline void clear_extend();
  static const int kExtendFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TRewardCenterRewardInfo</name>
  	<Function>
  		<name>extend</name>
  		<replaceName>Extend</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_extend</name>
  		<replaceName>Extend</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_extend</name>
  		<replaceName>Extend</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& extend() const;
  inline void set_extend(const ::std::string& value);
  inline void set_extend(const char* value);
  inline void set_extend(const void* value, size_t size);
  inline ::std::string* mutable_extend();
  inline ::std::string* release_extend();
  inline void set_allocated_extend(::std::string* extend);

  // @@protoc_insertion_point(class_scope:pb.TRewardCenterRewardInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_recvtime();
  inline void clear_has_recvtime();
  inline void set_has_autorecvtime();
  inline void clear_has_autorecvtime();
  inline void set_has_extend();
  inline void clear_has_extend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 sendtime_;
  ::google::protobuf::uint64 recvtime_;
  ::google::protobuf::uint64 autorecvtime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  ::std::string* extend_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_net_2fRewardCenter_2eproto();
  friend void protobuf_AssignDesc_net_2fRewardCenter_2eproto();
  friend void protobuf_ShutdownFile_net_2fRewardCenter_2eproto();

  void InitAsDefaultInstance();
  static TRewardCenterRewardInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRewardCenterGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RewardCenter.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRewardCenterGetInfoRsp : public ::google::protobuf::Message {
 public:
  TRewardCenterGetInfoRsp();
  virtual ~TRewardCenterGetInfoRsp();

  TRewardCenterGetInfoRsp(const TRewardCenterGetInfoRsp& from);

  inline TRewardCenterGetInfoRsp& operator=(const TRewardCenterGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRewardCenterGetInfoRsp& default_instance();

  void Swap(TRewardCenterGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TRewardCenterGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRewardCenterGetInfoRsp& from);
  void MergeFrom(const TRewardCenterGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TRewardCenterRewardInfo ArrRewardInfo = 1;
  inline int arrrewardinfo_size() const;
  inline void clear_arrrewardinfo();
  static const int kArrRewardInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRewardCenterGetInfoRsp</name>
  	<Function>
  		<name>arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrewardinfo_size</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRewardCenterRewardInfo& arrrewardinfo(int index) const;
  inline ::pb::TRewardCenterRewardInfo* mutable_arrrewardinfo(int index);
  inline ::pb::TRewardCenterRewardInfo* add_arrrewardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TRewardCenterRewardInfo >&
      arrrewardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TRewardCenterRewardInfo >*
      mutable_arrrewardinfo();

  // @@protoc_insertion_point(class_scope:pb.TRewardCenterGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TRewardCenterRewardInfo > arrrewardinfo_;
  friend void  protobuf_AddDesc_net_2fRewardCenter_2eproto();
  friend void protobuf_AssignDesc_net_2fRewardCenter_2eproto();
  friend void protobuf_ShutdownFile_net_2fRewardCenter_2eproto();

  void InitAsDefaultInstance();
  static TRewardCenterGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRewardCenterReceiveRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RewardCenter.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRewardCenterReceiveRewardReq : public ::google::protobuf::Message {
 public:
  TRewardCenterReceiveRewardReq();
  virtual ~TRewardCenterReceiveRewardReq();

  TRewardCenterReceiveRewardReq(const TRewardCenterReceiveRewardReq& from);

  inline TRewardCenterReceiveRewardReq& operator=(const TRewardCenterReceiveRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRewardCenterReceiveRewardReq& default_instance();

  void Swap(TRewardCenterReceiveRewardReq* other);

  // implements Message ----------------------------------------------

  TRewardCenterReceiveRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRewardCenterReceiveRewardReq& from);
  void MergeFrom(const TRewardCenterReceiveRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 ArrId = 1;
  inline int arrid_size() const;
  inline void clear_arrid();
  static const int kArrIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRewardCenterReceiveRewardReq</name>
  	<Function>
  		<name>arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrid_size</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 arrid(int index) const;
  inline void set_arrid(int index, ::google::protobuf::uint64 value);
  inline void add_arrid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      arrid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_arrid();

  // @@protoc_insertion_point(class_scope:pb.TRewardCenterReceiveRewardReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > arrid_;
  friend void  protobuf_AddDesc_net_2fRewardCenter_2eproto();
  friend void protobuf_AssignDesc_net_2fRewardCenter_2eproto();
  friend void protobuf_ShutdownFile_net_2fRewardCenter_2eproto();

  void InitAsDefaultInstance();
  static TRewardCenterReceiveRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRewardCenterRewardChangePush</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RewardCenter.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRewardCenterRewardChangePush : public ::google::protobuf::Message {
 public:
  TRewardCenterRewardChangePush();
  virtual ~TRewardCenterRewardChangePush();

  TRewardCenterRewardChangePush(const TRewardCenterRewardChangePush& from);

  inline TRewardCenterRewardChangePush& operator=(const TRewardCenterRewardChangePush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRewardCenterRewardChangePush& default_instance();

  void Swap(TRewardCenterRewardChangePush* other);

  // implements Message ----------------------------------------------

  TRewardCenterRewardChangePush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRewardCenterRewardChangePush& from);
  void MergeFrom(const TRewardCenterRewardChangePush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TRewardCenterRewardInfo ArrRewardInfo = 1;
  inline int arrrewardinfo_size() const;
  inline void clear_arrrewardinfo();
  static const int kArrRewardInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRewardCenterRewardChangePush</name>
  	<Function>
  		<name>arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrewardinfo_size</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRewardCenterRewardInfo& arrrewardinfo(int index) const;
  inline ::pb::TRewardCenterRewardInfo* mutable_arrrewardinfo(int index);
  inline ::pb::TRewardCenterRewardInfo* add_arrrewardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TRewardCenterRewardInfo >&
      arrrewardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TRewardCenterRewardInfo >*
      mutable_arrrewardinfo();

  // @@protoc_insertion_point(class_scope:pb.TRewardCenterRewardChangePush)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TRewardCenterRewardInfo > arrrewardinfo_;
  friend void  protobuf_AddDesc_net_2fRewardCenter_2eproto();
  friend void protobuf_AssignDesc_net_2fRewardCenter_2eproto();
  friend void protobuf_ShutdownFile_net_2fRewardCenter_2eproto();

  void InitAsDefaultInstance();
  static TRewardCenterRewardChangePush* default_instance_;
};
// ===================================================================


// ===================================================================

// TRewardCenterRewardInfo

// optional uint64 Id = 1;
inline bool TRewardCenterRewardInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRewardCenterRewardInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRewardCenterRewardInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRewardCenterRewardInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 TRewardCenterRewardInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TRewardCenterRewardInfo.Id)
  return id_;
}
inline void TRewardCenterRewardInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TRewardCenterRewardInfo.Id)
}

// optional uint32 Type = 2;
inline bool TRewardCenterRewardInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRewardCenterRewardInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRewardCenterRewardInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRewardCenterRewardInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 TRewardCenterRewardInfo::type() const {
  // @@protoc_insertion_point(field_get:pb.TRewardCenterRewardInfo.Type)
  return type_;
}
inline void TRewardCenterRewardInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.TRewardCenterRewardInfo.Type)
}

// optional uint64 SendTime = 3;
inline bool TRewardCenterRewardInfo::has_sendtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TRewardCenterRewardInfo::set_has_sendtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TRewardCenterRewardInfo::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TRewardCenterRewardInfo::clear_sendtime() {
  sendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_sendtime();
}
inline ::google::protobuf::uint64 TRewardCenterRewardInfo::sendtime() const {
  // @@protoc_insertion_point(field_get:pb.TRewardCenterRewardInfo.SendTime)
  return sendtime_;
}
inline void TRewardCenterRewardInfo::set_sendtime(::google::protobuf::uint64 value) {
  set_has_sendtime();
  sendtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TRewardCenterRewardInfo.SendTime)
}

// optional uint64 RecvTime = 4;
inline bool TRewardCenterRewardInfo::has_recvtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TRewardCenterRewardInfo::set_has_recvtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TRewardCenterRewardInfo::clear_has_recvtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TRewardCenterRewardInfo::clear_recvtime() {
  recvtime_ = GOOGLE_ULONGLONG(0);
  clear_has_recvtime();
}
inline ::google::protobuf::uint64 TRewardCenterRewardInfo::recvtime() const {
  // @@protoc_insertion_point(field_get:pb.TRewardCenterRewardInfo.RecvTime)
  return recvtime_;
}
inline void TRewardCenterRewardInfo::set_recvtime(::google::protobuf::uint64 value) {
  set_has_recvtime();
  recvtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TRewardCenterRewardInfo.RecvTime)
}

// optional uint64 AutoRecvTime = 5;
inline bool TRewardCenterRewardInfo::has_autorecvtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TRewardCenterRewardInfo::set_has_autorecvtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TRewardCenterRewardInfo::clear_has_autorecvtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TRewardCenterRewardInfo::clear_autorecvtime() {
  autorecvtime_ = GOOGLE_ULONGLONG(0);
  clear_has_autorecvtime();
}
inline ::google::protobuf::uint64 TRewardCenterRewardInfo::autorecvtime() const {
  // @@protoc_insertion_point(field_get:pb.TRewardCenterRewardInfo.AutoRecvTime)
  return autorecvtime_;
}
inline void TRewardCenterRewardInfo::set_autorecvtime(::google::protobuf::uint64 value) {
  set_has_autorecvtime();
  autorecvtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TRewardCenterRewardInfo.AutoRecvTime)
}

// repeated .pb.TCommonReward ArrReward = 6;
inline int TRewardCenterRewardInfo::arrreward_size() const {
  return arrreward_.size();
}
inline void TRewardCenterRewardInfo::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TRewardCenterRewardInfo::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TRewardCenterRewardInfo.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TRewardCenterRewardInfo::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TRewardCenterRewardInfo.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TRewardCenterRewardInfo::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TRewardCenterRewardInfo.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TRewardCenterRewardInfo::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TRewardCenterRewardInfo.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TRewardCenterRewardInfo::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TRewardCenterRewardInfo.ArrReward)
  return &arrreward_;
}

// optional bytes Extend = 7;
inline bool TRewardCenterRewardInfo::has_extend() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TRewardCenterRewardInfo::set_has_extend() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TRewardCenterRewardInfo::clear_has_extend() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TRewardCenterRewardInfo::clear_extend() {
  if (extend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extend_->clear();
  }
  clear_has_extend();
}
inline const ::std::string& TRewardCenterRewardInfo::extend() const {
  // @@protoc_insertion_point(field_get:pb.TRewardCenterRewardInfo.Extend)
  return *extend_;
}
inline void TRewardCenterRewardInfo::set_extend(const ::std::string& value) {
  set_has_extend();
  if (extend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extend_ = new ::std::string;
  }
  extend_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TRewardCenterRewardInfo.Extend)
}
inline void TRewardCenterRewardInfo::set_extend(const char* value) {
  set_has_extend();
  if (extend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extend_ = new ::std::string;
  }
  extend_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TRewardCenterRewardInfo.Extend)
}
inline void TRewardCenterRewardInfo::set_extend(const void* value, size_t size) {
  set_has_extend();
  if (extend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extend_ = new ::std::string;
  }
  extend_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TRewardCenterRewardInfo.Extend)
}
inline ::std::string* TRewardCenterRewardInfo::mutable_extend() {
  set_has_extend();
  if (extend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extend_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TRewardCenterRewardInfo.Extend)
  return extend_;
}
inline ::std::string* TRewardCenterRewardInfo::release_extend() {
  clear_has_extend();
  if (extend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extend_;
    extend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TRewardCenterRewardInfo::set_allocated_extend(::std::string* extend) {
  if (extend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extend_;
  }
  if (extend) {
    set_has_extend();
    extend_ = extend;
  } else {
    clear_has_extend();
    extend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TRewardCenterRewardInfo.Extend)
}

// -------------------------------------------------------------------

// TRewardCenterGetInfoRsp

// repeated .pb.TRewardCenterRewardInfo ArrRewardInfo = 1;
inline int TRewardCenterGetInfoRsp::arrrewardinfo_size() const {
  return arrrewardinfo_.size();
}
inline void TRewardCenterGetInfoRsp::clear_arrrewardinfo() {
  arrrewardinfo_.Clear();
}
inline const ::pb::TRewardCenterRewardInfo& TRewardCenterGetInfoRsp::arrrewardinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TRewardCenterGetInfoRsp.ArrRewardInfo)
  return arrrewardinfo_.Get(index);
}
inline ::pb::TRewardCenterRewardInfo* TRewardCenterGetInfoRsp::mutable_arrrewardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TRewardCenterGetInfoRsp.ArrRewardInfo)
  return arrrewardinfo_.Mutable(index);
}
inline ::pb::TRewardCenterRewardInfo* TRewardCenterGetInfoRsp::add_arrrewardinfo() {
  // @@protoc_insertion_point(field_add:pb.TRewardCenterGetInfoRsp.ArrRewardInfo)
  return arrrewardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TRewardCenterRewardInfo >&
TRewardCenterGetInfoRsp::arrrewardinfo() const {
  // @@protoc_insertion_point(field_list:pb.TRewardCenterGetInfoRsp.ArrRewardInfo)
  return arrrewardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TRewardCenterRewardInfo >*
TRewardCenterGetInfoRsp::mutable_arrrewardinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TRewardCenterGetInfoRsp.ArrRewardInfo)
  return &arrrewardinfo_;
}

// -------------------------------------------------------------------

// TRewardCenterReceiveRewardReq

// repeated uint64 ArrId = 1;
inline int TRewardCenterReceiveRewardReq::arrid_size() const {
  return arrid_.size();
}
inline void TRewardCenterReceiveRewardReq::clear_arrid() {
  arrid_.Clear();
}
inline ::google::protobuf::uint64 TRewardCenterReceiveRewardReq::arrid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TRewardCenterReceiveRewardReq.ArrId)
  return arrid_.Get(index);
}
inline void TRewardCenterReceiveRewardReq::set_arrid(int index, ::google::protobuf::uint64 value) {
  arrid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TRewardCenterReceiveRewardReq.ArrId)
}
inline void TRewardCenterReceiveRewardReq::add_arrid(::google::protobuf::uint64 value) {
  arrid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TRewardCenterReceiveRewardReq.ArrId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TRewardCenterReceiveRewardReq::arrid() const {
  // @@protoc_insertion_point(field_list:pb.TRewardCenterReceiveRewardReq.ArrId)
  return arrid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TRewardCenterReceiveRewardReq::mutable_arrid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TRewardCenterReceiveRewardReq.ArrId)
  return &arrid_;
}

// -------------------------------------------------------------------

// TRewardCenterRewardChangePush

// repeated .pb.TRewardCenterRewardInfo ArrRewardInfo = 1;
inline int TRewardCenterRewardChangePush::arrrewardinfo_size() const {
  return arrrewardinfo_.size();
}
inline void TRewardCenterRewardChangePush::clear_arrrewardinfo() {
  arrrewardinfo_.Clear();
}
inline const ::pb::TRewardCenterRewardInfo& TRewardCenterRewardChangePush::arrrewardinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TRewardCenterRewardChangePush.ArrRewardInfo)
  return arrrewardinfo_.Get(index);
}
inline ::pb::TRewardCenterRewardInfo* TRewardCenterRewardChangePush::mutable_arrrewardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TRewardCenterRewardChangePush.ArrRewardInfo)
  return arrrewardinfo_.Mutable(index);
}
inline ::pb::TRewardCenterRewardInfo* TRewardCenterRewardChangePush::add_arrrewardinfo() {
  // @@protoc_insertion_point(field_add:pb.TRewardCenterRewardChangePush.ArrRewardInfo)
  return arrrewardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TRewardCenterRewardInfo >&
TRewardCenterRewardChangePush::arrrewardinfo() const {
  // @@protoc_insertion_point(field_list:pb.TRewardCenterRewardChangePush.ArrRewardInfo)
  return arrrewardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TRewardCenterRewardInfo >*
TRewardCenterRewardChangePush::mutable_arrrewardinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TRewardCenterRewardChangePush.ArrRewardInfo)
  return &arrrewardinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fRewardCenter_2eproto__INCLUDED
