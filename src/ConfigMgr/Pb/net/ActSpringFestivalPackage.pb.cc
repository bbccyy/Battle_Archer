// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActSpringFestivalPackage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActSpringFestivalPackage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActSpringFestivalPackageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActSpringFestivalPackageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActSpringFestivalPackageGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActSpringFestivalPackageGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActSpringFestivalPackageNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActSpringFestivalPackageNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActSpringFestivalPackageBuyGiftReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActSpringFestivalPackageBuyGiftReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActSpringFestivalPackageBuyGiftRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActSpringFestivalPackageBuyGiftRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActSpringFestivalPackage_2eproto() {
  protobuf_AddDesc_net_2fActSpringFestivalPackage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActSpringFestivalPackage.proto");
  GOOGLE_CHECK(file != NULL);
  TActSpringFestivalPackageInfo_descriptor_ = file->message_type(0);
  static const int TActSpringFestivalPackageInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSpringFestivalPackageInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSpringFestivalPackageInfo, buynum_),
  };
  TActSpringFestivalPackageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActSpringFestivalPackageInfo_descriptor_,
      TActSpringFestivalPackageInfo::default_instance_,
      TActSpringFestivalPackageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSpringFestivalPackageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSpringFestivalPackageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActSpringFestivalPackageInfo));
  TActSpringFestivalPackageGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TActSpringFestivalPackageGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSpringFestivalPackageGetInfoRsp, arrinfo_),
  };
  TActSpringFestivalPackageGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActSpringFestivalPackageGetInfoRsp_descriptor_,
      TActSpringFestivalPackageGetInfoRsp::default_instance_,
      TActSpringFestivalPackageGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSpringFestivalPackageGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSpringFestivalPackageGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActSpringFestivalPackageGetInfoRsp));
  TActSpringFestivalPackageNotify_descriptor_ = file->message_type(2);
  static const int TActSpringFestivalPackageNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSpringFestivalPackageNotify, arrinfo_),
  };
  TActSpringFestivalPackageNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActSpringFestivalPackageNotify_descriptor_,
      TActSpringFestivalPackageNotify::default_instance_,
      TActSpringFestivalPackageNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSpringFestivalPackageNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSpringFestivalPackageNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActSpringFestivalPackageNotify));
  TActSpringFestivalPackageBuyGiftReq_descriptor_ = file->message_type(3);
  static const int TActSpringFestivalPackageBuyGiftReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSpringFestivalPackageBuyGiftReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSpringFestivalPackageBuyGiftReq, buynum_),
  };
  TActSpringFestivalPackageBuyGiftReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActSpringFestivalPackageBuyGiftReq_descriptor_,
      TActSpringFestivalPackageBuyGiftReq::default_instance_,
      TActSpringFestivalPackageBuyGiftReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSpringFestivalPackageBuyGiftReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSpringFestivalPackageBuyGiftReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActSpringFestivalPackageBuyGiftReq));
  TActSpringFestivalPackageBuyGiftRsp_descriptor_ = file->message_type(4);
  static const int TActSpringFestivalPackageBuyGiftRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSpringFestivalPackageBuyGiftRsp, arrreward_),
  };
  TActSpringFestivalPackageBuyGiftRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActSpringFestivalPackageBuyGiftRsp_descriptor_,
      TActSpringFestivalPackageBuyGiftRsp::default_instance_,
      TActSpringFestivalPackageBuyGiftRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSpringFestivalPackageBuyGiftRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSpringFestivalPackageBuyGiftRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActSpringFestivalPackageBuyGiftRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActSpringFestivalPackage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActSpringFestivalPackageInfo_descriptor_, &TActSpringFestivalPackageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActSpringFestivalPackageGetInfoRsp_descriptor_, &TActSpringFestivalPackageGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActSpringFestivalPackageNotify_descriptor_, &TActSpringFestivalPackageNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActSpringFestivalPackageBuyGiftReq_descriptor_, &TActSpringFestivalPackageBuyGiftReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActSpringFestivalPackageBuyGiftRsp_descriptor_, &TActSpringFestivalPackageBuyGiftRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActSpringFestivalPackage_2eproto() {
  delete TActSpringFestivalPackageInfo::default_instance_;
  delete TActSpringFestivalPackageInfo_reflection_;
  delete TActSpringFestivalPackageGetInfoRsp::default_instance_;
  delete TActSpringFestivalPackageGetInfoRsp_reflection_;
  delete TActSpringFestivalPackageNotify::default_instance_;
  delete TActSpringFestivalPackageNotify_reflection_;
  delete TActSpringFestivalPackageBuyGiftReq::default_instance_;
  delete TActSpringFestivalPackageBuyGiftReq_reflection_;
  delete TActSpringFestivalPackageBuyGiftRsp::default_instance_;
  delete TActSpringFestivalPackageBuyGiftRsp_reflection_;
}

void protobuf_AddDesc_net_2fActSpringFestivalPackage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"net/ActSpringFestivalPackage.proto\022\002pb"
    "\032\026net/CommonReward.proto\";\n\035TActSpringFe"
    "stivalPackageInfo\022\n\n\002Id\030\001 \001(\r\022\016\n\006BuyNum\030"
    "\002 \001(\r\"Y\n#TActSpringFestivalPackageGetInf"
    "oRsp\0222\n\007ArrInfo\030\001 \003(\0132!.pb.TActSpringFes"
    "tivalPackageInfo\"U\n\037TActSpringFestivalPa"
    "ckageNotify\0222\n\007ArrInfo\030\001 \003(\0132!.pb.TActSp"
    "ringFestivalPackageInfo\"A\n#TActSpringFes"
    "tivalPackageBuyGiftReq\022\n\n\002Id\030\001 \001(\r\022\016\n\006Bu"
    "yNum\030\002 \001(\r\"K\n#TActSpringFestivalPackageB"
    "uyGiftRsp\022$\n\tArrReward\030\001 \003(\0132\021.pb.TCommo"
    "nReward", 447);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActSpringFestivalPackage.proto", &protobuf_RegisterTypes);
  TActSpringFestivalPackageInfo::default_instance_ = new TActSpringFestivalPackageInfo();
  TActSpringFestivalPackageGetInfoRsp::default_instance_ = new TActSpringFestivalPackageGetInfoRsp();
  TActSpringFestivalPackageNotify::default_instance_ = new TActSpringFestivalPackageNotify();
  TActSpringFestivalPackageBuyGiftReq::default_instance_ = new TActSpringFestivalPackageBuyGiftReq();
  TActSpringFestivalPackageBuyGiftRsp::default_instance_ = new TActSpringFestivalPackageBuyGiftRsp();
  TActSpringFestivalPackageInfo::default_instance_->InitAsDefaultInstance();
  TActSpringFestivalPackageGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActSpringFestivalPackageNotify::default_instance_->InitAsDefaultInstance();
  TActSpringFestivalPackageBuyGiftReq::default_instance_->InitAsDefaultInstance();
  TActSpringFestivalPackageBuyGiftRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActSpringFestivalPackage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActSpringFestivalPackage_2eproto {
  StaticDescriptorInitializer_net_2fActSpringFestivalPackage_2eproto() {
    protobuf_AddDesc_net_2fActSpringFestivalPackage_2eproto();
  }
} static_descriptor_initializer_net_2fActSpringFestivalPackage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActSpringFestivalPackageInfo::kIdFieldNumber;
const int TActSpringFestivalPackageInfo::kBuyNumFieldNumber;
#endif  // !_MSC_VER

TActSpringFestivalPackageInfo::TActSpringFestivalPackageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActSpringFestivalPackageInfo)
}

void TActSpringFestivalPackageInfo::InitAsDefaultInstance() {
}

TActSpringFestivalPackageInfo::TActSpringFestivalPackageInfo(const TActSpringFestivalPackageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActSpringFestivalPackageInfo)
}

void TActSpringFestivalPackageInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActSpringFestivalPackageInfo::~TActSpringFestivalPackageInfo() {
  // @@protoc_insertion_point(destructor:pb.TActSpringFestivalPackageInfo)
  SharedDtor();
}

void TActSpringFestivalPackageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActSpringFestivalPackageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActSpringFestivalPackageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActSpringFestivalPackageInfo_descriptor_;
}

const TActSpringFestivalPackageInfo& TActSpringFestivalPackageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActSpringFestivalPackage_2eproto();
  return *default_instance_;
}

TActSpringFestivalPackageInfo* TActSpringFestivalPackageInfo::default_instance_ = NULL;

TActSpringFestivalPackageInfo* TActSpringFestivalPackageInfo::New() const {
  return new TActSpringFestivalPackageInfo;
}

void TActSpringFestivalPackageInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActSpringFestivalPackageInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, buynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActSpringFestivalPackageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActSpringFestivalPackageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyNum;
        break;
      }

      // optional uint32 BuyNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActSpringFestivalPackageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActSpringFestivalPackageInfo)
  return false;
#undef DO_
}

void TActSpringFestivalPackageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActSpringFestivalPackageInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActSpringFestivalPackageInfo)
}

::google::protobuf::uint8* TActSpringFestivalPackageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActSpringFestivalPackageInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActSpringFestivalPackageInfo)
  return target;
}

int TActSpringFestivalPackageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 BuyNum = 2;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActSpringFestivalPackageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActSpringFestivalPackageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActSpringFestivalPackageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActSpringFestivalPackageInfo::MergeFrom(const TActSpringFestivalPackageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActSpringFestivalPackageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActSpringFestivalPackageInfo::CopyFrom(const TActSpringFestivalPackageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActSpringFestivalPackageInfo::IsInitialized() const {

  return true;
}

void TActSpringFestivalPackageInfo::Swap(TActSpringFestivalPackageInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActSpringFestivalPackageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActSpringFestivalPackageInfo_descriptor_;
  metadata.reflection = TActSpringFestivalPackageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActSpringFestivalPackageGetInfoRsp::kArrInfoFieldNumber;
#endif  // !_MSC_VER

TActSpringFestivalPackageGetInfoRsp::TActSpringFestivalPackageGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActSpringFestivalPackageGetInfoRsp)
}

void TActSpringFestivalPackageGetInfoRsp::InitAsDefaultInstance() {
}

TActSpringFestivalPackageGetInfoRsp::TActSpringFestivalPackageGetInfoRsp(const TActSpringFestivalPackageGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActSpringFestivalPackageGetInfoRsp)
}

void TActSpringFestivalPackageGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActSpringFestivalPackageGetInfoRsp::~TActSpringFestivalPackageGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActSpringFestivalPackageGetInfoRsp)
  SharedDtor();
}

void TActSpringFestivalPackageGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActSpringFestivalPackageGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActSpringFestivalPackageGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActSpringFestivalPackageGetInfoRsp_descriptor_;
}

const TActSpringFestivalPackageGetInfoRsp& TActSpringFestivalPackageGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActSpringFestivalPackage_2eproto();
  return *default_instance_;
}

TActSpringFestivalPackageGetInfoRsp* TActSpringFestivalPackageGetInfoRsp::default_instance_ = NULL;

TActSpringFestivalPackageGetInfoRsp* TActSpringFestivalPackageGetInfoRsp::New() const {
  return new TActSpringFestivalPackageGetInfoRsp;
}

void TActSpringFestivalPackageGetInfoRsp::Clear() {
  arrinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActSpringFestivalPackageGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActSpringFestivalPackageGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActSpringFestivalPackageInfo ArrInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActSpringFestivalPackageGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActSpringFestivalPackageGetInfoRsp)
  return false;
#undef DO_
}

void TActSpringFestivalPackageGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActSpringFestivalPackageGetInfoRsp)
  // repeated .pb.TActSpringFestivalPackageInfo ArrInfo = 1;
  for (int i = 0; i < this->arrinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActSpringFestivalPackageGetInfoRsp)
}

::google::protobuf::uint8* TActSpringFestivalPackageGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActSpringFestivalPackageGetInfoRsp)
  // repeated .pb.TActSpringFestivalPackageInfo ArrInfo = 1;
  for (int i = 0; i < this->arrinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActSpringFestivalPackageGetInfoRsp)
  return target;
}

int TActSpringFestivalPackageGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActSpringFestivalPackageInfo ArrInfo = 1;
  total_size += 1 * this->arrinfo_size();
  for (int i = 0; i < this->arrinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActSpringFestivalPackageGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActSpringFestivalPackageGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActSpringFestivalPackageGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActSpringFestivalPackageGetInfoRsp::MergeFrom(const TActSpringFestivalPackageGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrinfo_.MergeFrom(from.arrinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActSpringFestivalPackageGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActSpringFestivalPackageGetInfoRsp::CopyFrom(const TActSpringFestivalPackageGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActSpringFestivalPackageGetInfoRsp::IsInitialized() const {

  return true;
}

void TActSpringFestivalPackageGetInfoRsp::Swap(TActSpringFestivalPackageGetInfoRsp* other) {
  if (other != this) {
    arrinfo_.Swap(&other->arrinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActSpringFestivalPackageGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActSpringFestivalPackageGetInfoRsp_descriptor_;
  metadata.reflection = TActSpringFestivalPackageGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActSpringFestivalPackageNotify::kArrInfoFieldNumber;
#endif  // !_MSC_VER

TActSpringFestivalPackageNotify::TActSpringFestivalPackageNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActSpringFestivalPackageNotify)
}

void TActSpringFestivalPackageNotify::InitAsDefaultInstance() {
}

TActSpringFestivalPackageNotify::TActSpringFestivalPackageNotify(const TActSpringFestivalPackageNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActSpringFestivalPackageNotify)
}

void TActSpringFestivalPackageNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActSpringFestivalPackageNotify::~TActSpringFestivalPackageNotify() {
  // @@protoc_insertion_point(destructor:pb.TActSpringFestivalPackageNotify)
  SharedDtor();
}

void TActSpringFestivalPackageNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActSpringFestivalPackageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActSpringFestivalPackageNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActSpringFestivalPackageNotify_descriptor_;
}

const TActSpringFestivalPackageNotify& TActSpringFestivalPackageNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActSpringFestivalPackage_2eproto();
  return *default_instance_;
}

TActSpringFestivalPackageNotify* TActSpringFestivalPackageNotify::default_instance_ = NULL;

TActSpringFestivalPackageNotify* TActSpringFestivalPackageNotify::New() const {
  return new TActSpringFestivalPackageNotify;
}

void TActSpringFestivalPackageNotify::Clear() {
  arrinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActSpringFestivalPackageNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActSpringFestivalPackageNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActSpringFestivalPackageInfo ArrInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActSpringFestivalPackageNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActSpringFestivalPackageNotify)
  return false;
#undef DO_
}

void TActSpringFestivalPackageNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActSpringFestivalPackageNotify)
  // repeated .pb.TActSpringFestivalPackageInfo ArrInfo = 1;
  for (int i = 0; i < this->arrinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActSpringFestivalPackageNotify)
}

::google::protobuf::uint8* TActSpringFestivalPackageNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActSpringFestivalPackageNotify)
  // repeated .pb.TActSpringFestivalPackageInfo ArrInfo = 1;
  for (int i = 0; i < this->arrinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActSpringFestivalPackageNotify)
  return target;
}

int TActSpringFestivalPackageNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActSpringFestivalPackageInfo ArrInfo = 1;
  total_size += 1 * this->arrinfo_size();
  for (int i = 0; i < this->arrinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActSpringFestivalPackageNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActSpringFestivalPackageNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActSpringFestivalPackageNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActSpringFestivalPackageNotify::MergeFrom(const TActSpringFestivalPackageNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrinfo_.MergeFrom(from.arrinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActSpringFestivalPackageNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActSpringFestivalPackageNotify::CopyFrom(const TActSpringFestivalPackageNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActSpringFestivalPackageNotify::IsInitialized() const {

  return true;
}

void TActSpringFestivalPackageNotify::Swap(TActSpringFestivalPackageNotify* other) {
  if (other != this) {
    arrinfo_.Swap(&other->arrinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActSpringFestivalPackageNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActSpringFestivalPackageNotify_descriptor_;
  metadata.reflection = TActSpringFestivalPackageNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActSpringFestivalPackageBuyGiftReq::kIdFieldNumber;
const int TActSpringFestivalPackageBuyGiftReq::kBuyNumFieldNumber;
#endif  // !_MSC_VER

TActSpringFestivalPackageBuyGiftReq::TActSpringFestivalPackageBuyGiftReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActSpringFestivalPackageBuyGiftReq)
}

void TActSpringFestivalPackageBuyGiftReq::InitAsDefaultInstance() {
}

TActSpringFestivalPackageBuyGiftReq::TActSpringFestivalPackageBuyGiftReq(const TActSpringFestivalPackageBuyGiftReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActSpringFestivalPackageBuyGiftReq)
}

void TActSpringFestivalPackageBuyGiftReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActSpringFestivalPackageBuyGiftReq::~TActSpringFestivalPackageBuyGiftReq() {
  // @@protoc_insertion_point(destructor:pb.TActSpringFestivalPackageBuyGiftReq)
  SharedDtor();
}

void TActSpringFestivalPackageBuyGiftReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActSpringFestivalPackageBuyGiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActSpringFestivalPackageBuyGiftReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActSpringFestivalPackageBuyGiftReq_descriptor_;
}

const TActSpringFestivalPackageBuyGiftReq& TActSpringFestivalPackageBuyGiftReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActSpringFestivalPackage_2eproto();
  return *default_instance_;
}

TActSpringFestivalPackageBuyGiftReq* TActSpringFestivalPackageBuyGiftReq::default_instance_ = NULL;

TActSpringFestivalPackageBuyGiftReq* TActSpringFestivalPackageBuyGiftReq::New() const {
  return new TActSpringFestivalPackageBuyGiftReq;
}

void TActSpringFestivalPackageBuyGiftReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActSpringFestivalPackageBuyGiftReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, buynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActSpringFestivalPackageBuyGiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActSpringFestivalPackageBuyGiftReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyNum;
        break;
      }

      // optional uint32 BuyNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActSpringFestivalPackageBuyGiftReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActSpringFestivalPackageBuyGiftReq)
  return false;
#undef DO_
}

void TActSpringFestivalPackageBuyGiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActSpringFestivalPackageBuyGiftReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActSpringFestivalPackageBuyGiftReq)
}

::google::protobuf::uint8* TActSpringFestivalPackageBuyGiftReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActSpringFestivalPackageBuyGiftReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActSpringFestivalPackageBuyGiftReq)
  return target;
}

int TActSpringFestivalPackageBuyGiftReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 BuyNum = 2;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActSpringFestivalPackageBuyGiftReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActSpringFestivalPackageBuyGiftReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActSpringFestivalPackageBuyGiftReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActSpringFestivalPackageBuyGiftReq::MergeFrom(const TActSpringFestivalPackageBuyGiftReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActSpringFestivalPackageBuyGiftReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActSpringFestivalPackageBuyGiftReq::CopyFrom(const TActSpringFestivalPackageBuyGiftReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActSpringFestivalPackageBuyGiftReq::IsInitialized() const {

  return true;
}

void TActSpringFestivalPackageBuyGiftReq::Swap(TActSpringFestivalPackageBuyGiftReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActSpringFestivalPackageBuyGiftReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActSpringFestivalPackageBuyGiftReq_descriptor_;
  metadata.reflection = TActSpringFestivalPackageBuyGiftReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActSpringFestivalPackageBuyGiftRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActSpringFestivalPackageBuyGiftRsp::TActSpringFestivalPackageBuyGiftRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActSpringFestivalPackageBuyGiftRsp)
}

void TActSpringFestivalPackageBuyGiftRsp::InitAsDefaultInstance() {
}

TActSpringFestivalPackageBuyGiftRsp::TActSpringFestivalPackageBuyGiftRsp(const TActSpringFestivalPackageBuyGiftRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActSpringFestivalPackageBuyGiftRsp)
}

void TActSpringFestivalPackageBuyGiftRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActSpringFestivalPackageBuyGiftRsp::~TActSpringFestivalPackageBuyGiftRsp() {
  // @@protoc_insertion_point(destructor:pb.TActSpringFestivalPackageBuyGiftRsp)
  SharedDtor();
}

void TActSpringFestivalPackageBuyGiftRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActSpringFestivalPackageBuyGiftRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActSpringFestivalPackageBuyGiftRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActSpringFestivalPackageBuyGiftRsp_descriptor_;
}

const TActSpringFestivalPackageBuyGiftRsp& TActSpringFestivalPackageBuyGiftRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActSpringFestivalPackage_2eproto();
  return *default_instance_;
}

TActSpringFestivalPackageBuyGiftRsp* TActSpringFestivalPackageBuyGiftRsp::default_instance_ = NULL;

TActSpringFestivalPackageBuyGiftRsp* TActSpringFestivalPackageBuyGiftRsp::New() const {
  return new TActSpringFestivalPackageBuyGiftRsp;
}

void TActSpringFestivalPackageBuyGiftRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActSpringFestivalPackageBuyGiftRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActSpringFestivalPackageBuyGiftRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActSpringFestivalPackageBuyGiftRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActSpringFestivalPackageBuyGiftRsp)
  return false;
#undef DO_
}

void TActSpringFestivalPackageBuyGiftRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActSpringFestivalPackageBuyGiftRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActSpringFestivalPackageBuyGiftRsp)
}

::google::protobuf::uint8* TActSpringFestivalPackageBuyGiftRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActSpringFestivalPackageBuyGiftRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActSpringFestivalPackageBuyGiftRsp)
  return target;
}

int TActSpringFestivalPackageBuyGiftRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActSpringFestivalPackageBuyGiftRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActSpringFestivalPackageBuyGiftRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActSpringFestivalPackageBuyGiftRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActSpringFestivalPackageBuyGiftRsp::MergeFrom(const TActSpringFestivalPackageBuyGiftRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActSpringFestivalPackageBuyGiftRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActSpringFestivalPackageBuyGiftRsp::CopyFrom(const TActSpringFestivalPackageBuyGiftRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActSpringFestivalPackageBuyGiftRsp::IsInitialized() const {

  return true;
}

void TActSpringFestivalPackageBuyGiftRsp::Swap(TActSpringFestivalPackageBuyGiftRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActSpringFestivalPackageBuyGiftRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActSpringFestivalPackageBuyGiftRsp_descriptor_;
  metadata.reflection = TActSpringFestivalPackageBuyGiftRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
