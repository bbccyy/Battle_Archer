// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/SilkBagFund.proto

#ifndef PROTOBUF_net_2fSilkBagFund_2eproto__INCLUDED
#define PROTOBUF_net_2fSilkBagFund_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fSilkBagFund_2eproto();
void protobuf_AssignDesc_net_2fSilkBagFund_2eproto();
void protobuf_ShutdownFile_net_2fSilkBagFund_2eproto();

class TSilkBagFundSingle;
class TSilkBagFundGetInfoRsp;
class TSilkBagFundGetRewardReq;
class TSilkBagFundGetTotalRewardRsp;
class TSilkBagFundPush;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TSilkBagFundSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SilkBagFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSilkBagFundSingle : public ::google::protobuf::Message {
 public:
  TSilkBagFundSingle();
  virtual ~TSilkBagFundSingle();

  TSilkBagFundSingle(const TSilkBagFundSingle& from);

  inline TSilkBagFundSingle& operator=(const TSilkBagFundSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSilkBagFundSingle& default_instance();

  void Swap(TSilkBagFundSingle* other);

  // implements Message ----------------------------------------------

  TSilkBagFundSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSilkBagFundSingle& from);
  void MergeFrom(const TSilkBagFundSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LevelId = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagFundSingle</name>
  	<Function>
  		<name>levelid</name>
  		<replaceName>LevelId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_levelid</name>
  		<replaceName>LevelId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_levelid</name>
  		<replaceName>LevelId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // optional uint64 GeneralReceiveTime = 2;
  inline bool has_generalreceivetime() const;
  inline void clear_generalreceivetime();
  static const int kGeneralReceiveTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagFundSingle</name>
  	<Function>
  		<name>generalreceivetime</name>
  		<replaceName>GeneralReceiveTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_generalreceivetime</name>
  		<replaceName>GeneralReceiveTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_generalreceivetime</name>
  		<replaceName>GeneralReceiveTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 generalreceivetime() const;
  inline void set_generalreceivetime(::google::protobuf::uint64 value);

  // optional uint64 HighOrderReceiveTime = 3;
  inline bool has_highorderreceivetime() const;
  inline void clear_highorderreceivetime();
  static const int kHighOrderReceiveTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagFundSingle</name>
  	<Function>
  		<name>highorderreceivetime</name>
  		<replaceName>HighOrderReceiveTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_highorderreceivetime</name>
  		<replaceName>HighOrderReceiveTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_highorderreceivetime</name>
  		<replaceName>HighOrderReceiveTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 highorderreceivetime() const;
  inline void set_highorderreceivetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TSilkBagFundSingle)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();
  inline void set_has_generalreceivetime();
  inline void clear_has_generalreceivetime();
  inline void set_has_highorderreceivetime();
  inline void clear_has_highorderreceivetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 generalreceivetime_;
  ::google::protobuf::uint64 highorderreceivetime_;
  ::google::protobuf::uint32 levelid_;
  friend void  protobuf_AddDesc_net_2fSilkBagFund_2eproto();
  friend void protobuf_AssignDesc_net_2fSilkBagFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fSilkBagFund_2eproto();

  void InitAsDefaultInstance();
  static TSilkBagFundSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSilkBagFundGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SilkBagFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSilkBagFundGetInfoRsp : public ::google::protobuf::Message {
 public:
  TSilkBagFundGetInfoRsp();
  virtual ~TSilkBagFundGetInfoRsp();

  TSilkBagFundGetInfoRsp(const TSilkBagFundGetInfoRsp& from);

  inline TSilkBagFundGetInfoRsp& operator=(const TSilkBagFundGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSilkBagFundGetInfoRsp& default_instance();

  void Swap(TSilkBagFundGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TSilkBagFundGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSilkBagFundGetInfoRsp& from);
  void MergeFrom(const TSilkBagFundGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ListId = 1;
  inline bool has_listid() const;
  inline void clear_listid();
  static const int kListIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagFundGetInfoRsp</name>
  	<Function>
  		<name>listid</name>
  		<replaceName>ListId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_listid</name>
  		<replaceName>ListId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_listid</name>
  		<replaceName>ListId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 listid() const;
  inline void set_listid(::google::protobuf::uint32 value);

  // optional uint64 OpenTime = 2;
  inline bool has_opentime() const;
  inline void clear_opentime();
  static const int kOpenTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagFundGetInfoRsp</name>
  	<Function>
  		<name>opentime</name>
  		<replaceName>OpenTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_opentime</name>
  		<replaceName>OpenTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_opentime</name>
  		<replaceName>OpenTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 opentime() const;
  inline void set_opentime(::google::protobuf::uint64 value);

  // optional uint64 PayTime = 3;
  inline bool has_paytime() const;
  inline void clear_paytime();
  static const int kPayTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagFundGetInfoRsp</name>
  	<Function>
  		<name>paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 paytime() const;
  inline void set_paytime(::google::protobuf::uint64 value);

  // repeated .pb.TSilkBagFundSingle FundArr = 4;
  inline int fundarr_size() const;
  inline void clear_fundarr();
  static const int kFundArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagFundGetInfoRsp</name>
  	<Function>
  		<name>fundarr</name>
  		<replaceName>FundArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fundarr</name>
  		<replaceName>FundArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fundarr</name>
  		<replaceName>FundArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fundarr</name>
  		<replaceName>FundArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fundarr_size</name>
  		<replaceName>FundArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSilkBagFundSingle& fundarr(int index) const;
  inline ::pb::TSilkBagFundSingle* mutable_fundarr(int index);
  inline ::pb::TSilkBagFundSingle* add_fundarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagFundSingle >&
      fundarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagFundSingle >*
      mutable_fundarr();

  // optional uint32 Scores = 5;
  inline bool has_scores() const;
  inline void clear_scores();
  static const int kScoresFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagFundGetInfoRsp</name>
  	<Function>
  		<name>scores</name>
  		<replaceName>Scores</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scores</name>
  		<replaceName>Scores</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scores</name>
  		<replaceName>Scores</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scores() const;
  inline void set_scores(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSilkBagFundGetInfoRsp)
 private:
  inline void set_has_listid();
  inline void clear_has_listid();
  inline void set_has_opentime();
  inline void clear_has_opentime();
  inline void set_has_paytime();
  inline void clear_has_paytime();
  inline void set_has_scores();
  inline void clear_has_scores();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 opentime_;
  ::google::protobuf::uint64 paytime_;
  ::google::protobuf::uint32 listid_;
  ::google::protobuf::uint32 scores_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagFundSingle > fundarr_;
  friend void  protobuf_AddDesc_net_2fSilkBagFund_2eproto();
  friend void protobuf_AssignDesc_net_2fSilkBagFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fSilkBagFund_2eproto();

  void InitAsDefaultInstance();
  static TSilkBagFundGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSilkBagFundGetRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SilkBagFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSilkBagFundGetRewardReq : public ::google::protobuf::Message {
 public:
  TSilkBagFundGetRewardReq();
  virtual ~TSilkBagFundGetRewardReq();

  TSilkBagFundGetRewardReq(const TSilkBagFundGetRewardReq& from);

  inline TSilkBagFundGetRewardReq& operator=(const TSilkBagFundGetRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSilkBagFundGetRewardReq& default_instance();

  void Swap(TSilkBagFundGetRewardReq* other);

  // implements Message ----------------------------------------------

  TSilkBagFundGetRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSilkBagFundGetRewardReq& from);
  void MergeFrom(const TSilkBagFundGetRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ListId = 1;
  inline bool has_listid() const;
  inline void clear_listid();
  static const int kListIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagFundGetRewardReq</name>
  	<Function>
  		<name>listid</name>
  		<replaceName>ListId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_listid</name>
  		<replaceName>ListId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_listid</name>
  		<replaceName>ListId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 listid() const;
  inline void set_listid(::google::protobuf::uint32 value);

  // optional uint32 LevelId = 2;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagFundGetRewardReq</name>
  	<Function>
  		<name>levelid</name>
  		<replaceName>LevelId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_levelid</name>
  		<replaceName>LevelId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_levelid</name>
  		<replaceName>LevelId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // optional bool IsHigh = 3;
  inline bool has_ishigh() const;
  inline void clear_ishigh();
  static const int kIsHighFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagFundGetRewardReq</name>
  	<Function>
  		<name>ishigh</name>
  		<replaceName>IsHigh</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ishigh</name>
  		<replaceName>IsHigh</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ishigh</name>
  		<replaceName>IsHigh</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool ishigh() const;
  inline void set_ishigh(bool value);

  // @@protoc_insertion_point(class_scope:pb.TSilkBagFundGetRewardReq)
 private:
  inline void set_has_listid();
  inline void clear_has_listid();
  inline void set_has_levelid();
  inline void clear_has_levelid();
  inline void set_has_ishigh();
  inline void clear_has_ishigh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 listid_;
  ::google::protobuf::uint32 levelid_;
  bool ishigh_;
  friend void  protobuf_AddDesc_net_2fSilkBagFund_2eproto();
  friend void protobuf_AssignDesc_net_2fSilkBagFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fSilkBagFund_2eproto();

  void InitAsDefaultInstance();
  static TSilkBagFundGetRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSilkBagFundGetTotalRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SilkBagFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSilkBagFundGetTotalRewardRsp : public ::google::protobuf::Message {
 public:
  TSilkBagFundGetTotalRewardRsp();
  virtual ~TSilkBagFundGetTotalRewardRsp();

  TSilkBagFundGetTotalRewardRsp(const TSilkBagFundGetTotalRewardRsp& from);

  inline TSilkBagFundGetTotalRewardRsp& operator=(const TSilkBagFundGetTotalRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSilkBagFundGetTotalRewardRsp& default_instance();

  void Swap(TSilkBagFundGetTotalRewardRsp* other);

  // implements Message ----------------------------------------------

  TSilkBagFundGetTotalRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSilkBagFundGetTotalRewardRsp& from);
  void MergeFrom(const TSilkBagFundGetTotalRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TSilkBagFundSingle FundArr = 1;
  inline int fundarr_size() const;
  inline void clear_fundarr();
  static const int kFundArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagFundGetTotalRewardRsp</name>
  	<Function>
  		<name>fundarr</name>
  		<replaceName>FundArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fundarr</name>
  		<replaceName>FundArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fundarr</name>
  		<replaceName>FundArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fundarr</name>
  		<replaceName>FundArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fundarr_size</name>
  		<replaceName>FundArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSilkBagFundSingle& fundarr(int index) const;
  inline ::pb::TSilkBagFundSingle* mutable_fundarr(int index);
  inline ::pb::TSilkBagFundSingle* add_fundarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagFundSingle >&
      fundarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagFundSingle >*
      mutable_fundarr();

  // repeated .pb.TCommonReward RewardArr = 2;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagFundGetTotalRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TSilkBagFundGetTotalRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagFundSingle > fundarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fSilkBagFund_2eproto();
  friend void protobuf_AssignDesc_net_2fSilkBagFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fSilkBagFund_2eproto();

  void InitAsDefaultInstance();
  static TSilkBagFundGetTotalRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSilkBagFundPush</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SilkBagFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSilkBagFundPush : public ::google::protobuf::Message {
 public:
  TSilkBagFundPush();
  virtual ~TSilkBagFundPush();

  TSilkBagFundPush(const TSilkBagFundPush& from);

  inline TSilkBagFundPush& operator=(const TSilkBagFundPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSilkBagFundPush& default_instance();

  void Swap(TSilkBagFundPush* other);

  // implements Message ----------------------------------------------

  TSilkBagFundPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSilkBagFundPush& from);
  void MergeFrom(const TSilkBagFundPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 PayTime = 1;
  inline bool has_paytime() const;
  inline void clear_paytime();
  static const int kPayTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagFundPush</name>
  	<Function>
  		<name>paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 paytime() const;
  inline void set_paytime(::google::protobuf::uint64 value);

  // optional uint32 Scores = 2;
  inline bool has_scores() const;
  inline void clear_scores();
  static const int kScoresFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSilkBagFundPush</name>
  	<Function>
  		<name>scores</name>
  		<replaceName>Scores</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scores</name>
  		<replaceName>Scores</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scores</name>
  		<replaceName>Scores</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scores() const;
  inline void set_scores(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSilkBagFundPush)
 private:
  inline void set_has_paytime();
  inline void clear_has_paytime();
  inline void set_has_scores();
  inline void clear_has_scores();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 paytime_;
  ::google::protobuf::uint32 scores_;
  friend void  protobuf_AddDesc_net_2fSilkBagFund_2eproto();
  friend void protobuf_AssignDesc_net_2fSilkBagFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fSilkBagFund_2eproto();

  void InitAsDefaultInstance();
  static TSilkBagFundPush* default_instance_;
};
// ===================================================================


// ===================================================================

// TSilkBagFundSingle

// optional uint32 LevelId = 1;
inline bool TSilkBagFundSingle::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSilkBagFundSingle::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSilkBagFundSingle::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSilkBagFundSingle::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 TSilkBagFundSingle::levelid() const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagFundSingle.LevelId)
  return levelid_;
}
inline void TSilkBagFundSingle::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSilkBagFundSingle.LevelId)
}

// optional uint64 GeneralReceiveTime = 2;
inline bool TSilkBagFundSingle::has_generalreceivetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSilkBagFundSingle::set_has_generalreceivetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSilkBagFundSingle::clear_has_generalreceivetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSilkBagFundSingle::clear_generalreceivetime() {
  generalreceivetime_ = GOOGLE_ULONGLONG(0);
  clear_has_generalreceivetime();
}
inline ::google::protobuf::uint64 TSilkBagFundSingle::generalreceivetime() const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagFundSingle.GeneralReceiveTime)
  return generalreceivetime_;
}
inline void TSilkBagFundSingle::set_generalreceivetime(::google::protobuf::uint64 value) {
  set_has_generalreceivetime();
  generalreceivetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TSilkBagFundSingle.GeneralReceiveTime)
}

// optional uint64 HighOrderReceiveTime = 3;
inline bool TSilkBagFundSingle::has_highorderreceivetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSilkBagFundSingle::set_has_highorderreceivetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSilkBagFundSingle::clear_has_highorderreceivetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSilkBagFundSingle::clear_highorderreceivetime() {
  highorderreceivetime_ = GOOGLE_ULONGLONG(0);
  clear_has_highorderreceivetime();
}
inline ::google::protobuf::uint64 TSilkBagFundSingle::highorderreceivetime() const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagFundSingle.HighOrderReceiveTime)
  return highorderreceivetime_;
}
inline void TSilkBagFundSingle::set_highorderreceivetime(::google::protobuf::uint64 value) {
  set_has_highorderreceivetime();
  highorderreceivetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TSilkBagFundSingle.HighOrderReceiveTime)
}

// -------------------------------------------------------------------

// TSilkBagFundGetInfoRsp

// optional uint32 ListId = 1;
inline bool TSilkBagFundGetInfoRsp::has_listid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSilkBagFundGetInfoRsp::set_has_listid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSilkBagFundGetInfoRsp::clear_has_listid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSilkBagFundGetInfoRsp::clear_listid() {
  listid_ = 0u;
  clear_has_listid();
}
inline ::google::protobuf::uint32 TSilkBagFundGetInfoRsp::listid() const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagFundGetInfoRsp.ListId)
  return listid_;
}
inline void TSilkBagFundGetInfoRsp::set_listid(::google::protobuf::uint32 value) {
  set_has_listid();
  listid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSilkBagFundGetInfoRsp.ListId)
}

// optional uint64 OpenTime = 2;
inline bool TSilkBagFundGetInfoRsp::has_opentime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSilkBagFundGetInfoRsp::set_has_opentime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSilkBagFundGetInfoRsp::clear_has_opentime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSilkBagFundGetInfoRsp::clear_opentime() {
  opentime_ = GOOGLE_ULONGLONG(0);
  clear_has_opentime();
}
inline ::google::protobuf::uint64 TSilkBagFundGetInfoRsp::opentime() const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagFundGetInfoRsp.OpenTime)
  return opentime_;
}
inline void TSilkBagFundGetInfoRsp::set_opentime(::google::protobuf::uint64 value) {
  set_has_opentime();
  opentime_ = value;
  // @@protoc_insertion_point(field_set:pb.TSilkBagFundGetInfoRsp.OpenTime)
}

// optional uint64 PayTime = 3;
inline bool TSilkBagFundGetInfoRsp::has_paytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSilkBagFundGetInfoRsp::set_has_paytime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSilkBagFundGetInfoRsp::clear_has_paytime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSilkBagFundGetInfoRsp::clear_paytime() {
  paytime_ = GOOGLE_ULONGLONG(0);
  clear_has_paytime();
}
inline ::google::protobuf::uint64 TSilkBagFundGetInfoRsp::paytime() const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagFundGetInfoRsp.PayTime)
  return paytime_;
}
inline void TSilkBagFundGetInfoRsp::set_paytime(::google::protobuf::uint64 value) {
  set_has_paytime();
  paytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TSilkBagFundGetInfoRsp.PayTime)
}

// repeated .pb.TSilkBagFundSingle FundArr = 4;
inline int TSilkBagFundGetInfoRsp::fundarr_size() const {
  return fundarr_.size();
}
inline void TSilkBagFundGetInfoRsp::clear_fundarr() {
  fundarr_.Clear();
}
inline const ::pb::TSilkBagFundSingle& TSilkBagFundGetInfoRsp::fundarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagFundGetInfoRsp.FundArr)
  return fundarr_.Get(index);
}
inline ::pb::TSilkBagFundSingle* TSilkBagFundGetInfoRsp::mutable_fundarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSilkBagFundGetInfoRsp.FundArr)
  return fundarr_.Mutable(index);
}
inline ::pb::TSilkBagFundSingle* TSilkBagFundGetInfoRsp::add_fundarr() {
  // @@protoc_insertion_point(field_add:pb.TSilkBagFundGetInfoRsp.FundArr)
  return fundarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagFundSingle >&
TSilkBagFundGetInfoRsp::fundarr() const {
  // @@protoc_insertion_point(field_list:pb.TSilkBagFundGetInfoRsp.FundArr)
  return fundarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagFundSingle >*
TSilkBagFundGetInfoRsp::mutable_fundarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSilkBagFundGetInfoRsp.FundArr)
  return &fundarr_;
}

// optional uint32 Scores = 5;
inline bool TSilkBagFundGetInfoRsp::has_scores() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TSilkBagFundGetInfoRsp::set_has_scores() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TSilkBagFundGetInfoRsp::clear_has_scores() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TSilkBagFundGetInfoRsp::clear_scores() {
  scores_ = 0u;
  clear_has_scores();
}
inline ::google::protobuf::uint32 TSilkBagFundGetInfoRsp::scores() const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagFundGetInfoRsp.Scores)
  return scores_;
}
inline void TSilkBagFundGetInfoRsp::set_scores(::google::protobuf::uint32 value) {
  set_has_scores();
  scores_ = value;
  // @@protoc_insertion_point(field_set:pb.TSilkBagFundGetInfoRsp.Scores)
}

// -------------------------------------------------------------------

// TSilkBagFundGetRewardReq

// optional uint32 ListId = 1;
inline bool TSilkBagFundGetRewardReq::has_listid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSilkBagFundGetRewardReq::set_has_listid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSilkBagFundGetRewardReq::clear_has_listid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSilkBagFundGetRewardReq::clear_listid() {
  listid_ = 0u;
  clear_has_listid();
}
inline ::google::protobuf::uint32 TSilkBagFundGetRewardReq::listid() const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagFundGetRewardReq.ListId)
  return listid_;
}
inline void TSilkBagFundGetRewardReq::set_listid(::google::protobuf::uint32 value) {
  set_has_listid();
  listid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSilkBagFundGetRewardReq.ListId)
}

// optional uint32 LevelId = 2;
inline bool TSilkBagFundGetRewardReq::has_levelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSilkBagFundGetRewardReq::set_has_levelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSilkBagFundGetRewardReq::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSilkBagFundGetRewardReq::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 TSilkBagFundGetRewardReq::levelid() const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagFundGetRewardReq.LevelId)
  return levelid_;
}
inline void TSilkBagFundGetRewardReq::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSilkBagFundGetRewardReq.LevelId)
}

// optional bool IsHigh = 3;
inline bool TSilkBagFundGetRewardReq::has_ishigh() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSilkBagFundGetRewardReq::set_has_ishigh() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSilkBagFundGetRewardReq::clear_has_ishigh() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSilkBagFundGetRewardReq::clear_ishigh() {
  ishigh_ = false;
  clear_has_ishigh();
}
inline bool TSilkBagFundGetRewardReq::ishigh() const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagFundGetRewardReq.IsHigh)
  return ishigh_;
}
inline void TSilkBagFundGetRewardReq::set_ishigh(bool value) {
  set_has_ishigh();
  ishigh_ = value;
  // @@protoc_insertion_point(field_set:pb.TSilkBagFundGetRewardReq.IsHigh)
}

// -------------------------------------------------------------------

// TSilkBagFundGetTotalRewardRsp

// repeated .pb.TSilkBagFundSingle FundArr = 1;
inline int TSilkBagFundGetTotalRewardRsp::fundarr_size() const {
  return fundarr_.size();
}
inline void TSilkBagFundGetTotalRewardRsp::clear_fundarr() {
  fundarr_.Clear();
}
inline const ::pb::TSilkBagFundSingle& TSilkBagFundGetTotalRewardRsp::fundarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagFundGetTotalRewardRsp.FundArr)
  return fundarr_.Get(index);
}
inline ::pb::TSilkBagFundSingle* TSilkBagFundGetTotalRewardRsp::mutable_fundarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSilkBagFundGetTotalRewardRsp.FundArr)
  return fundarr_.Mutable(index);
}
inline ::pb::TSilkBagFundSingle* TSilkBagFundGetTotalRewardRsp::add_fundarr() {
  // @@protoc_insertion_point(field_add:pb.TSilkBagFundGetTotalRewardRsp.FundArr)
  return fundarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagFundSingle >&
TSilkBagFundGetTotalRewardRsp::fundarr() const {
  // @@protoc_insertion_point(field_list:pb.TSilkBagFundGetTotalRewardRsp.FundArr)
  return fundarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSilkBagFundSingle >*
TSilkBagFundGetTotalRewardRsp::mutable_fundarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSilkBagFundGetTotalRewardRsp.FundArr)
  return &fundarr_;
}

// repeated .pb.TCommonReward RewardArr = 2;
inline int TSilkBagFundGetTotalRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TSilkBagFundGetTotalRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TSilkBagFundGetTotalRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagFundGetTotalRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TSilkBagFundGetTotalRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSilkBagFundGetTotalRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TSilkBagFundGetTotalRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TSilkBagFundGetTotalRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TSilkBagFundGetTotalRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TSilkBagFundGetTotalRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TSilkBagFundGetTotalRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSilkBagFundGetTotalRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TSilkBagFundPush

// optional uint64 PayTime = 1;
inline bool TSilkBagFundPush::has_paytime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSilkBagFundPush::set_has_paytime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSilkBagFundPush::clear_has_paytime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSilkBagFundPush::clear_paytime() {
  paytime_ = GOOGLE_ULONGLONG(0);
  clear_has_paytime();
}
inline ::google::protobuf::uint64 TSilkBagFundPush::paytime() const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagFundPush.PayTime)
  return paytime_;
}
inline void TSilkBagFundPush::set_paytime(::google::protobuf::uint64 value) {
  set_has_paytime();
  paytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TSilkBagFundPush.PayTime)
}

// optional uint32 Scores = 2;
inline bool TSilkBagFundPush::has_scores() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSilkBagFundPush::set_has_scores() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSilkBagFundPush::clear_has_scores() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSilkBagFundPush::clear_scores() {
  scores_ = 0u;
  clear_has_scores();
}
inline ::google::protobuf::uint32 TSilkBagFundPush::scores() const {
  // @@protoc_insertion_point(field_get:pb.TSilkBagFundPush.Scores)
  return scores_;
}
inline void TSilkBagFundPush::set_scores(::google::protobuf::uint32 value) {
  set_has_scores();
  scores_ = value;
  // @@protoc_insertion_point(field_set:pb.TSilkBagFundPush.Scores)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fSilkBagFund_2eproto__INCLUDED
