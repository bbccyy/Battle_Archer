// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/UgcCommon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/UgcCommon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TUgcCommonSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUgcCommonSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUgcCommonCrossSceneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUgcCommonCrossSceneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUgcCommonGetHotInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUgcCommonGetHotInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUgcCommonGetHotInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUgcCommonGetHotInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUgcCommonGetCurrentInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUgcCommonGetCurrentInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUgcCommonGetCurrentInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUgcCommonGetCurrentInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUgcCommonGetMyUncheckReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUgcCommonGetMyUncheckReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUgcCommonGetMyUncheckRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUgcCommonGetMyUncheckRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUgcCommonSendMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUgcCommonSendMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUgcCommonSendMessageRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUgcCommonSendMessageRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUgcCommonDeleteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUgcCommonDeleteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUgcCommonLikeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUgcCommonLikeReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EAppraise_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECrossFuncType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fUgcCommon_2eproto() {
  protobuf_AddDesc_net_2fUgcCommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/UgcCommon.proto");
  GOOGLE_CHECK(file != NULL);
  TUgcCommonSingle_descriptor_ = file->message_type(0);
  static const int TUgcCommonSingle_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSingle, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSingle, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSingle, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSingle, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSingle, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSingle, alllikenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSingle, alldislikenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSingle, appraisestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSingle, createtime_),
  };
  TUgcCommonSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUgcCommonSingle_descriptor_,
      TUgcCommonSingle::default_instance_,
      TUgcCommonSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUgcCommonSingle));
  TUgcCommonCrossSceneInfo_descriptor_ = file->message_type(1);
  static const int TUgcCommonCrossSceneInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonCrossSceneInfo, serverteamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonCrossSceneInfo, seasonbegintime_),
  };
  TUgcCommonCrossSceneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUgcCommonCrossSceneInfo_descriptor_,
      TUgcCommonCrossSceneInfo::default_instance_,
      TUgcCommonCrossSceneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonCrossSceneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonCrossSceneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUgcCommonCrossSceneInfo));
  TUgcCommonGetHotInfoReq_descriptor_ = file->message_type(2);
  static const int TUgcCommonGetHotInfoReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetHotInfoReq, scenetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetHotInfoReq, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetHotInfoReq, pageidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetHotInfoReq, pagesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetHotInfoReq, crosstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetHotInfoReq, crossinfo_),
  };
  TUgcCommonGetHotInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUgcCommonGetHotInfoReq_descriptor_,
      TUgcCommonGetHotInfoReq::default_instance_,
      TUgcCommonGetHotInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetHotInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetHotInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUgcCommonGetHotInfoReq));
  TUgcCommonGetHotInfoRsp_descriptor_ = file->message_type(3);
  static const int TUgcCommonGetHotInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetHotInfoRsp, hotarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetHotInfoRsp, version_),
  };
  TUgcCommonGetHotInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUgcCommonGetHotInfoRsp_descriptor_,
      TUgcCommonGetHotInfoRsp::default_instance_,
      TUgcCommonGetHotInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetHotInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetHotInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUgcCommonGetHotInfoRsp));
  TUgcCommonGetCurrentInfoReq_descriptor_ = file->message_type(4);
  static const int TUgcCommonGetCurrentInfoReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetCurrentInfoReq, scenetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetCurrentInfoReq, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetCurrentInfoReq, pageidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetCurrentInfoReq, pagesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetCurrentInfoReq, crosstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetCurrentInfoReq, crossinfo_),
  };
  TUgcCommonGetCurrentInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUgcCommonGetCurrentInfoReq_descriptor_,
      TUgcCommonGetCurrentInfoReq::default_instance_,
      TUgcCommonGetCurrentInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetCurrentInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetCurrentInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUgcCommonGetCurrentInfoReq));
  TUgcCommonGetCurrentInfoRsp_descriptor_ = file->message_type(5);
  static const int TUgcCommonGetCurrentInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetCurrentInfoRsp, currentarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetCurrentInfoRsp, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetCurrentInfoRsp, lastsendtime_),
  };
  TUgcCommonGetCurrentInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUgcCommonGetCurrentInfoRsp_descriptor_,
      TUgcCommonGetCurrentInfoRsp::default_instance_,
      TUgcCommonGetCurrentInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetCurrentInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetCurrentInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUgcCommonGetCurrentInfoRsp));
  TUgcCommonGetMyUncheckReq_descriptor_ = file->message_type(6);
  static const int TUgcCommonGetMyUncheckReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetMyUncheckReq, scenetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetMyUncheckReq, crosstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetMyUncheckReq, crossinfo_),
  };
  TUgcCommonGetMyUncheckReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUgcCommonGetMyUncheckReq_descriptor_,
      TUgcCommonGetMyUncheckReq::default_instance_,
      TUgcCommonGetMyUncheckReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetMyUncheckReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetMyUncheckReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUgcCommonGetMyUncheckReq));
  TUgcCommonGetMyUncheckRsp_descriptor_ = file->message_type(7);
  static const int TUgcCommonGetMyUncheckRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetMyUncheckRsp, uncheckarr_),
  };
  TUgcCommonGetMyUncheckRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUgcCommonGetMyUncheckRsp_descriptor_,
      TUgcCommonGetMyUncheckRsp::default_instance_,
      TUgcCommonGetMyUncheckRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetMyUncheckRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonGetMyUncheckRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUgcCommonGetMyUncheckRsp));
  TUgcCommonSendMessageReq_descriptor_ = file->message_type(8);
  static const int TUgcCommonSendMessageReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSendMessageReq, scenetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSendMessageReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSendMessageReq, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSendMessageReq, xpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSendMessageReq, crosstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSendMessageReq, crossinfo_),
  };
  TUgcCommonSendMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUgcCommonSendMessageReq_descriptor_,
      TUgcCommonSendMessageReq::default_instance_,
      TUgcCommonSendMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSendMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSendMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUgcCommonSendMessageReq));
  TUgcCommonSendMessageRsp_descriptor_ = file->message_type(9);
  static const int TUgcCommonSendMessageRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSendMessageRsp, msginfo_),
  };
  TUgcCommonSendMessageRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUgcCommonSendMessageRsp_descriptor_,
      TUgcCommonSendMessageRsp::default_instance_,
      TUgcCommonSendMessageRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSendMessageRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonSendMessageRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUgcCommonSendMessageRsp));
  TUgcCommonDeleteReq_descriptor_ = file->message_type(10);
  static const int TUgcCommonDeleteReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonDeleteReq, scenetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonDeleteReq, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonDeleteReq, crosstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonDeleteReq, crossinfo_),
  };
  TUgcCommonDeleteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUgcCommonDeleteReq_descriptor_,
      TUgcCommonDeleteReq::default_instance_,
      TUgcCommonDeleteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonDeleteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonDeleteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUgcCommonDeleteReq));
  TUgcCommonLikeReq_descriptor_ = file->message_type(11);
  static const int TUgcCommonLikeReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonLikeReq, scenetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonLikeReq, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonLikeReq, appraisestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonLikeReq, crosstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonLikeReq, crossinfo_),
  };
  TUgcCommonLikeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUgcCommonLikeReq_descriptor_,
      TUgcCommonLikeReq::default_instance_,
      TUgcCommonLikeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonLikeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUgcCommonLikeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUgcCommonLikeReq));
  EAppraise_descriptor_ = file->enum_type(0);
  ECrossFuncType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fUgcCommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUgcCommonSingle_descriptor_, &TUgcCommonSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUgcCommonCrossSceneInfo_descriptor_, &TUgcCommonCrossSceneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUgcCommonGetHotInfoReq_descriptor_, &TUgcCommonGetHotInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUgcCommonGetHotInfoRsp_descriptor_, &TUgcCommonGetHotInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUgcCommonGetCurrentInfoReq_descriptor_, &TUgcCommonGetCurrentInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUgcCommonGetCurrentInfoRsp_descriptor_, &TUgcCommonGetCurrentInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUgcCommonGetMyUncheckReq_descriptor_, &TUgcCommonGetMyUncheckReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUgcCommonGetMyUncheckRsp_descriptor_, &TUgcCommonGetMyUncheckRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUgcCommonSendMessageReq_descriptor_, &TUgcCommonSendMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUgcCommonSendMessageRsp_descriptor_, &TUgcCommonSendMessageRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUgcCommonDeleteReq_descriptor_, &TUgcCommonDeleteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUgcCommonLikeReq_descriptor_, &TUgcCommonLikeReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fUgcCommon_2eproto() {
  delete TUgcCommonSingle::default_instance_;
  delete TUgcCommonSingle_reflection_;
  delete TUgcCommonCrossSceneInfo::default_instance_;
  delete TUgcCommonCrossSceneInfo_reflection_;
  delete TUgcCommonGetHotInfoReq::default_instance_;
  delete TUgcCommonGetHotInfoReq_reflection_;
  delete TUgcCommonGetHotInfoRsp::default_instance_;
  delete TUgcCommonGetHotInfoRsp_reflection_;
  delete TUgcCommonGetCurrentInfoReq::default_instance_;
  delete TUgcCommonGetCurrentInfoReq_reflection_;
  delete TUgcCommonGetCurrentInfoRsp::default_instance_;
  delete TUgcCommonGetCurrentInfoRsp_reflection_;
  delete TUgcCommonGetMyUncheckReq::default_instance_;
  delete TUgcCommonGetMyUncheckReq_reflection_;
  delete TUgcCommonGetMyUncheckRsp::default_instance_;
  delete TUgcCommonGetMyUncheckRsp_reflection_;
  delete TUgcCommonSendMessageReq::default_instance_;
  delete TUgcCommonSendMessageReq_reflection_;
  delete TUgcCommonSendMessageRsp::default_instance_;
  delete TUgcCommonSendMessageRsp_reflection_;
  delete TUgcCommonDeleteReq::default_instance_;
  delete TUgcCommonDeleteReq_reflection_;
  delete TUgcCommonLikeReq::default_instance_;
  delete TUgcCommonLikeReq_reflection_;
}

void protobuf_AddDesc_net_2fUgcCommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023net/UgcCommon.proto\022\002pb\032\016net/User.prot"
    "o\"\334\001\n\020TUgcCommonSingle\022\013\n\003Mid\030\001 \001(\004\022\013\n\003U"
    "id\030\002 \001(\004\022\017\n\007Content\030\003 \001(\t\022%\n\010UserInfo\030\004 "
    "\001(\0132\023.pb.TUserSimpleInfo\022\020\n\010ServerId\030\005 \001"
    "(\t\022\022\n\nAllLikeNum\030\006 \001(\r\022\025\n\rAllDisLikeNum\030"
    "\007 \001(\r\022%\n\016AppraiseStatus\030\010 \001(\0162\r.pb.EAppr"
    "aise\022\022\n\nCreateTime\030\t \001(\004\"I\n\030TUgcCommonCr"
    "ossSceneInfo\022\024\n\014ServerTeamId\030\002 \001(\r\022\027\n\017Se"
    "asonBeginTime\030\003 \001(\004\"\267\001\n\027TUgcCommonGetHot"
    "InfoReq\022\020\n\010SceneTid\030\001 \001(\r\022\017\n\007Version\030\002 \001"
    "(\r\022\017\n\007PageIdx\030\003 \001(\r\022\020\n\010PageSize\030\004 \001(\r\022%\n"
    "\tCrossType\030\005 \001(\0162\022.pb.ECrossFuncType\022/\n\t"
    "CrossInfo\030\006 \001(\0132\034.pb.TUgcCommonCrossScen"
    "eInfo\"P\n\027TUgcCommonGetHotInfoRsp\022$\n\006HotA"
    "rr\030\001 \003(\0132\024.pb.TUgcCommonSingle\022\017\n\007Versio"
    "n\030\002 \001(\r\"\273\001\n\033TUgcCommonGetCurrentInfoReq\022"
    "\020\n\010SceneTid\030\001 \001(\r\022\017\n\007Version\030\002 \001(\r\022\017\n\007Pa"
    "geIdx\030\003 \001(\r\022\020\n\010PageSize\030\004 \001(\r\022%\n\tCrossTy"
    "pe\030\005 \001(\0162\022.pb.ECrossFuncType\022/\n\tCrossInf"
    "o\030\006 \001(\0132\034.pb.TUgcCommonCrossSceneInfo\"n\n"
    "\033TUgcCommonGetCurrentInfoRsp\022(\n\nCurrentA"
    "rr\030\001 \003(\0132\024.pb.TUgcCommonSingle\022\017\n\007Versio"
    "n\030\002 \001(\r\022\024\n\014LastSendTime\030\003 \001(\004\"\205\001\n\031TUgcCo"
    "mmonGetMyUncheckReq\022\020\n\010SceneTid\030\001 \001(\r\022%\n"
    "\tCrossType\030\002 \001(\0162\022.pb.ECrossFuncType\022/\n\t"
    "CrossInfo\030\003 \001(\0132\034.pb.TUgcCommonCrossScen"
    "eInfo\"E\n\031TUgcCommonGetMyUncheckRsp\022(\n\nUn"
    "checkArr\030\001 \003(\0132\024.pb.TUgcCommonSingle\"\260\001\n"
    "\030TUgcCommonSendMessageReq\022\020\n\010SceneTid\030\001 "
    "\001(\r\022\013\n\003Uid\030\002 \001(\004\022\017\n\007Content\030\003 \001(\t\022\014\n\004Xpi"
    "d\030\004 \001(\t\022%\n\tCrossType\030\005 \001(\0162\022.pb.ECrossFu"
    "ncType\022/\n\tCrossInfo\030\006 \001(\0132\034.pb.TUgcCommo"
    "nCrossSceneInfo\"A\n\030TUgcCommonSendMessage"
    "Rsp\022%\n\007MsgInfo\030\001 \001(\0132\024.pb.TUgcCommonSing"
    "le\"\214\001\n\023TUgcCommonDeleteReq\022\020\n\010SceneTid\030\001"
    " \001(\r\022\013\n\003Mid\030\002 \001(\004\022%\n\tCrossType\030\003 \001(\0162\022.p"
    "b.ECrossFuncType\022/\n\tCrossInfo\030\004 \001(\0132\034.pb"
    ".TUgcCommonCrossSceneInfo\"\261\001\n\021TUgcCommon"
    "LikeReq\022\020\n\010SceneTid\030\001 \001(\r\022\013\n\003Mid\030\002 \001(\004\022%"
    "\n\016AppraiseStatus\030\003 \001(\0162\r.pb.EAppraise\022%\n"
    "\tCrossType\030\004 \001(\0162\022.pb.ECrossFuncType\022/\n\t"
    "CrossInfo\030\005 \001(\0132\034.pb.TUgcCommonCrossScen"
    "eInfo*,\n\tEAppraise\022\010\n\004None\020\000\022\010\n\004Like\020\001\022\013"
    "\n\007DisLike\020\002*;\n\016ECrossFuncType\022\014\n\010NotCros"
    "s\020\000\022\r\n\tChallenge\020\001\022\014\n\010Outsmart\020\002", 1792);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/UgcCommon.proto", &protobuf_RegisterTypes);
  TUgcCommonSingle::default_instance_ = new TUgcCommonSingle();
  TUgcCommonCrossSceneInfo::default_instance_ = new TUgcCommonCrossSceneInfo();
  TUgcCommonGetHotInfoReq::default_instance_ = new TUgcCommonGetHotInfoReq();
  TUgcCommonGetHotInfoRsp::default_instance_ = new TUgcCommonGetHotInfoRsp();
  TUgcCommonGetCurrentInfoReq::default_instance_ = new TUgcCommonGetCurrentInfoReq();
  TUgcCommonGetCurrentInfoRsp::default_instance_ = new TUgcCommonGetCurrentInfoRsp();
  TUgcCommonGetMyUncheckReq::default_instance_ = new TUgcCommonGetMyUncheckReq();
  TUgcCommonGetMyUncheckRsp::default_instance_ = new TUgcCommonGetMyUncheckRsp();
  TUgcCommonSendMessageReq::default_instance_ = new TUgcCommonSendMessageReq();
  TUgcCommonSendMessageRsp::default_instance_ = new TUgcCommonSendMessageRsp();
  TUgcCommonDeleteReq::default_instance_ = new TUgcCommonDeleteReq();
  TUgcCommonLikeReq::default_instance_ = new TUgcCommonLikeReq();
  TUgcCommonSingle::default_instance_->InitAsDefaultInstance();
  TUgcCommonCrossSceneInfo::default_instance_->InitAsDefaultInstance();
  TUgcCommonGetHotInfoReq::default_instance_->InitAsDefaultInstance();
  TUgcCommonGetHotInfoRsp::default_instance_->InitAsDefaultInstance();
  TUgcCommonGetCurrentInfoReq::default_instance_->InitAsDefaultInstance();
  TUgcCommonGetCurrentInfoRsp::default_instance_->InitAsDefaultInstance();
  TUgcCommonGetMyUncheckReq::default_instance_->InitAsDefaultInstance();
  TUgcCommonGetMyUncheckRsp::default_instance_->InitAsDefaultInstance();
  TUgcCommonSendMessageReq::default_instance_->InitAsDefaultInstance();
  TUgcCommonSendMessageRsp::default_instance_->InitAsDefaultInstance();
  TUgcCommonDeleteReq::default_instance_->InitAsDefaultInstance();
  TUgcCommonLikeReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fUgcCommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fUgcCommon_2eproto {
  StaticDescriptorInitializer_net_2fUgcCommon_2eproto() {
    protobuf_AddDesc_net_2fUgcCommon_2eproto();
  }
} static_descriptor_initializer_net_2fUgcCommon_2eproto_;
const ::google::protobuf::EnumDescriptor* EAppraise_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAppraise_descriptor_;
}
bool EAppraise_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECrossFuncType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECrossFuncType_descriptor_;
}
bool ECrossFuncType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TUgcCommonSingle::kMidFieldNumber;
const int TUgcCommonSingle::kUidFieldNumber;
const int TUgcCommonSingle::kContentFieldNumber;
const int TUgcCommonSingle::kUserInfoFieldNumber;
const int TUgcCommonSingle::kServerIdFieldNumber;
const int TUgcCommonSingle::kAllLikeNumFieldNumber;
const int TUgcCommonSingle::kAllDisLikeNumFieldNumber;
const int TUgcCommonSingle::kAppraiseStatusFieldNumber;
const int TUgcCommonSingle::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

TUgcCommonSingle::TUgcCommonSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUgcCommonSingle)
}

void TUgcCommonSingle::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TUgcCommonSingle::TUgcCommonSingle(const TUgcCommonSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUgcCommonSingle)
}

void TUgcCommonSingle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = GOOGLE_ULONGLONG(0);
  uid_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userinfo_ = NULL;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alllikenum_ = 0u;
  alldislikenum_ = 0u;
  appraisestatus_ = 0;
  createtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUgcCommonSingle::~TUgcCommonSingle() {
  // @@protoc_insertion_point(destructor:pb.TUgcCommonSingle)
  SharedDtor();
}

void TUgcCommonSingle::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TUgcCommonSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUgcCommonSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUgcCommonSingle_descriptor_;
}

const TUgcCommonSingle& TUgcCommonSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUgcCommon_2eproto();
  return *default_instance_;
}

TUgcCommonSingle* TUgcCommonSingle::default_instance_ = NULL;

TUgcCommonSingle* TUgcCommonSingle::New() const {
  return new TUgcCommonSingle;
}

void TUgcCommonSingle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUgcCommonSingle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mid_, uid_);
    ZR_(alllikenum_, alldislikenum_);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
    appraisestatus_ = 0;
  }
  createtime_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUgcCommonSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUgcCommonSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 2;
      case 2: {
        if (tag == 16) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Content;
        break;
      }

      // optional string Content = 3;
      case 3: {
        if (tag == 26) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo UserInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 5;
      case 5: {
        if (tag == 42) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_AllLikeNum;
        break;
      }

      // optional uint32 AllLikeNum = 6;
      case 6: {
        if (tag == 48) {
         parse_AllLikeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alllikenum_)));
          set_has_alllikenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_AllDisLikeNum;
        break;
      }

      // optional uint32 AllDisLikeNum = 7;
      case 7: {
        if (tag == 56) {
         parse_AllDisLikeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alldislikenum_)));
          set_has_alldislikenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_AppraiseStatus;
        break;
      }

      // optional .pb.EAppraise AppraiseStatus = 8;
      case 8: {
        if (tag == 64) {
         parse_AppraiseStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAppraise_IsValid(value)) {
            set_appraisestatus(static_cast< ::pb::EAppraise >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_CreateTime;
        break;
      }

      // optional uint64 CreateTime = 9;
      case 9: {
        if (tag == 72) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUgcCommonSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUgcCommonSingle)
  return false;
#undef DO_
}

void TUgcCommonSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUgcCommonSingle)
  // optional uint64 Mid = 1;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mid(), output);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional string Content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 4;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userinfo(), output);
  }

  // optional string ServerId = 5;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serverid(), output);
  }

  // optional uint32 AllLikeNum = 6;
  if (has_alllikenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->alllikenum(), output);
  }

  // optional uint32 AllDisLikeNum = 7;
  if (has_alldislikenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->alldislikenum(), output);
  }

  // optional .pb.EAppraise AppraiseStatus = 8;
  if (has_appraisestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->appraisestatus(), output);
  }

  // optional uint64 CreateTime = 9;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->createtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUgcCommonSingle)
}

::google::protobuf::uint8* TUgcCommonSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUgcCommonSingle)
  // optional uint64 Mid = 1;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mid(), target);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional string Content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 4;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->userinfo(), target);
  }

  // optional string ServerId = 5;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->serverid(), target);
  }

  // optional uint32 AllLikeNum = 6;
  if (has_alllikenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->alllikenum(), target);
  }

  // optional uint32 AllDisLikeNum = 7;
  if (has_alldislikenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->alldislikenum(), target);
  }

  // optional .pb.EAppraise AppraiseStatus = 8;
  if (has_appraisestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->appraisestatus(), target);
  }

  // optional uint64 CreateTime = 9;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->createtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUgcCommonSingle)
  return target;
}

int TUgcCommonSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Mid = 1;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mid());
    }

    // optional uint64 Uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string Content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .pb.TUserSimpleInfo UserInfo = 4;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional string ServerId = 5;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional uint32 AllLikeNum = 6;
    if (has_alllikenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alllikenum());
    }

    // optional uint32 AllDisLikeNum = 7;
    if (has_alldislikenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alldislikenum());
    }

    // optional .pb.EAppraise AppraiseStatus = 8;
    if (has_appraisestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->appraisestatus());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 CreateTime = 9;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUgcCommonSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUgcCommonSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUgcCommonSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUgcCommonSingle::MergeFrom(const TUgcCommonSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_alllikenum()) {
      set_alllikenum(from.alllikenum());
    }
    if (from.has_alldislikenum()) {
      set_alldislikenum(from.alldislikenum());
    }
    if (from.has_appraisestatus()) {
      set_appraisestatus(from.appraisestatus());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUgcCommonSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUgcCommonSingle::CopyFrom(const TUgcCommonSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUgcCommonSingle::IsInitialized() const {

  return true;
}

void TUgcCommonSingle::Swap(TUgcCommonSingle* other) {
  if (other != this) {
    std::swap(mid_, other->mid_);
    std::swap(uid_, other->uid_);
    std::swap(content_, other->content_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(serverid_, other->serverid_);
    std::swap(alllikenum_, other->alllikenum_);
    std::swap(alldislikenum_, other->alldislikenum_);
    std::swap(appraisestatus_, other->appraisestatus_);
    std::swap(createtime_, other->createtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUgcCommonSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUgcCommonSingle_descriptor_;
  metadata.reflection = TUgcCommonSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUgcCommonCrossSceneInfo::kServerTeamIdFieldNumber;
const int TUgcCommonCrossSceneInfo::kSeasonBeginTimeFieldNumber;
#endif  // !_MSC_VER

TUgcCommonCrossSceneInfo::TUgcCommonCrossSceneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUgcCommonCrossSceneInfo)
}

void TUgcCommonCrossSceneInfo::InitAsDefaultInstance() {
}

TUgcCommonCrossSceneInfo::TUgcCommonCrossSceneInfo(const TUgcCommonCrossSceneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUgcCommonCrossSceneInfo)
}

void TUgcCommonCrossSceneInfo::SharedCtor() {
  _cached_size_ = 0;
  serverteamid_ = 0u;
  seasonbegintime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUgcCommonCrossSceneInfo::~TUgcCommonCrossSceneInfo() {
  // @@protoc_insertion_point(destructor:pb.TUgcCommonCrossSceneInfo)
  SharedDtor();
}

void TUgcCommonCrossSceneInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUgcCommonCrossSceneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUgcCommonCrossSceneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUgcCommonCrossSceneInfo_descriptor_;
}

const TUgcCommonCrossSceneInfo& TUgcCommonCrossSceneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUgcCommon_2eproto();
  return *default_instance_;
}

TUgcCommonCrossSceneInfo* TUgcCommonCrossSceneInfo::default_instance_ = NULL;

TUgcCommonCrossSceneInfo* TUgcCommonCrossSceneInfo::New() const {
  return new TUgcCommonCrossSceneInfo;
}

void TUgcCommonCrossSceneInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUgcCommonCrossSceneInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(seasonbegintime_, serverteamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUgcCommonCrossSceneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUgcCommonCrossSceneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ServerTeamId = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverteamid_)));
          set_has_serverteamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SeasonBeginTime;
        break;
      }

      // optional uint64 SeasonBeginTime = 3;
      case 3: {
        if (tag == 24) {
         parse_SeasonBeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seasonbegintime_)));
          set_has_seasonbegintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUgcCommonCrossSceneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUgcCommonCrossSceneInfo)
  return false;
#undef DO_
}

void TUgcCommonCrossSceneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUgcCommonCrossSceneInfo)
  // optional uint32 ServerTeamId = 2;
  if (has_serverteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverteamid(), output);
  }

  // optional uint64 SeasonBeginTime = 3;
  if (has_seasonbegintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->seasonbegintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUgcCommonCrossSceneInfo)
}

::google::protobuf::uint8* TUgcCommonCrossSceneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUgcCommonCrossSceneInfo)
  // optional uint32 ServerTeamId = 2;
  if (has_serverteamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverteamid(), target);
  }

  // optional uint64 SeasonBeginTime = 3;
  if (has_seasonbegintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->seasonbegintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUgcCommonCrossSceneInfo)
  return target;
}

int TUgcCommonCrossSceneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ServerTeamId = 2;
    if (has_serverteamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverteamid());
    }

    // optional uint64 SeasonBeginTime = 3;
    if (has_seasonbegintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seasonbegintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUgcCommonCrossSceneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUgcCommonCrossSceneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUgcCommonCrossSceneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUgcCommonCrossSceneInfo::MergeFrom(const TUgcCommonCrossSceneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverteamid()) {
      set_serverteamid(from.serverteamid());
    }
    if (from.has_seasonbegintime()) {
      set_seasonbegintime(from.seasonbegintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUgcCommonCrossSceneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUgcCommonCrossSceneInfo::CopyFrom(const TUgcCommonCrossSceneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUgcCommonCrossSceneInfo::IsInitialized() const {

  return true;
}

void TUgcCommonCrossSceneInfo::Swap(TUgcCommonCrossSceneInfo* other) {
  if (other != this) {
    std::swap(serverteamid_, other->serverteamid_);
    std::swap(seasonbegintime_, other->seasonbegintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUgcCommonCrossSceneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUgcCommonCrossSceneInfo_descriptor_;
  metadata.reflection = TUgcCommonCrossSceneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUgcCommonGetHotInfoReq::kSceneTidFieldNumber;
const int TUgcCommonGetHotInfoReq::kVersionFieldNumber;
const int TUgcCommonGetHotInfoReq::kPageIdxFieldNumber;
const int TUgcCommonGetHotInfoReq::kPageSizeFieldNumber;
const int TUgcCommonGetHotInfoReq::kCrossTypeFieldNumber;
const int TUgcCommonGetHotInfoReq::kCrossInfoFieldNumber;
#endif  // !_MSC_VER

TUgcCommonGetHotInfoReq::TUgcCommonGetHotInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUgcCommonGetHotInfoReq)
}

void TUgcCommonGetHotInfoReq::InitAsDefaultInstance() {
  crossinfo_ = const_cast< ::pb::TUgcCommonCrossSceneInfo*>(&::pb::TUgcCommonCrossSceneInfo::default_instance());
}

TUgcCommonGetHotInfoReq::TUgcCommonGetHotInfoReq(const TUgcCommonGetHotInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUgcCommonGetHotInfoReq)
}

void TUgcCommonGetHotInfoReq::SharedCtor() {
  _cached_size_ = 0;
  scenetid_ = 0u;
  version_ = 0u;
  pageidx_ = 0u;
  pagesize_ = 0u;
  crosstype_ = 0;
  crossinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUgcCommonGetHotInfoReq::~TUgcCommonGetHotInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TUgcCommonGetHotInfoReq)
  SharedDtor();
}

void TUgcCommonGetHotInfoReq::SharedDtor() {
  if (this != default_instance_) {
    delete crossinfo_;
  }
}

void TUgcCommonGetHotInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUgcCommonGetHotInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUgcCommonGetHotInfoReq_descriptor_;
}

const TUgcCommonGetHotInfoReq& TUgcCommonGetHotInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUgcCommon_2eproto();
  return *default_instance_;
}

TUgcCommonGetHotInfoReq* TUgcCommonGetHotInfoReq::default_instance_ = NULL;

TUgcCommonGetHotInfoReq* TUgcCommonGetHotInfoReq::New() const {
  return new TUgcCommonGetHotInfoReq;
}

void TUgcCommonGetHotInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUgcCommonGetHotInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(scenetid_, pagesize_);
    crosstype_ = 0;
    if (has_crossinfo()) {
      if (crossinfo_ != NULL) crossinfo_->::pb::TUgcCommonCrossSceneInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUgcCommonGetHotInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUgcCommonGetHotInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SceneTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenetid_)));
          set_has_scenetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Version;
        break;
      }

      // optional uint32 Version = 2;
      case 2: {
        if (tag == 16) {
         parse_Version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PageIdx;
        break;
      }

      // optional uint32 PageIdx = 3;
      case 3: {
        if (tag == 24) {
         parse_PageIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pageidx_)));
          set_has_pageidx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PageSize;
        break;
      }

      // optional uint32 PageSize = 4;
      case 4: {
        if (tag == 32) {
         parse_PageSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagesize_)));
          set_has_pagesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CrossType;
        break;
      }

      // optional .pb.ECrossFuncType CrossType = 5;
      case 5: {
        if (tag == 40) {
         parse_CrossType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECrossFuncType_IsValid(value)) {
            set_crosstype(static_cast< ::pb::ECrossFuncType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_CrossInfo;
        break;
      }

      // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_CrossInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crossinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUgcCommonGetHotInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUgcCommonGetHotInfoReq)
  return false;
#undef DO_
}

void TUgcCommonGetHotInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUgcCommonGetHotInfoReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scenetid(), output);
  }

  // optional uint32 Version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional uint32 PageIdx = 3;
  if (has_pageidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pageidx(), output);
  }

  // optional uint32 PageSize = 4;
  if (has_pagesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pagesize(), output);
  }

  // optional .pb.ECrossFuncType CrossType = 5;
  if (has_crosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->crosstype(), output);
  }

  // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 6;
  if (has_crossinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->crossinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUgcCommonGetHotInfoReq)
}

::google::protobuf::uint8* TUgcCommonGetHotInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUgcCommonGetHotInfoReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scenetid(), target);
  }

  // optional uint32 Version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // optional uint32 PageIdx = 3;
  if (has_pageidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pageidx(), target);
  }

  // optional uint32 PageSize = 4;
  if (has_pagesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pagesize(), target);
  }

  // optional .pb.ECrossFuncType CrossType = 5;
  if (has_crosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->crosstype(), target);
  }

  // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 6;
  if (has_crossinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->crossinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUgcCommonGetHotInfoReq)
  return target;
}

int TUgcCommonGetHotInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SceneTid = 1;
    if (has_scenetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenetid());
    }

    // optional uint32 Version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 PageIdx = 3;
    if (has_pageidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pageidx());
    }

    // optional uint32 PageSize = 4;
    if (has_pagesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagesize());
    }

    // optional .pb.ECrossFuncType CrossType = 5;
    if (has_crosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->crosstype());
    }

    // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 6;
    if (has_crossinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crossinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUgcCommonGetHotInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUgcCommonGetHotInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUgcCommonGetHotInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUgcCommonGetHotInfoReq::MergeFrom(const TUgcCommonGetHotInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scenetid()) {
      set_scenetid(from.scenetid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_pageidx()) {
      set_pageidx(from.pageidx());
    }
    if (from.has_pagesize()) {
      set_pagesize(from.pagesize());
    }
    if (from.has_crosstype()) {
      set_crosstype(from.crosstype());
    }
    if (from.has_crossinfo()) {
      mutable_crossinfo()->::pb::TUgcCommonCrossSceneInfo::MergeFrom(from.crossinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUgcCommonGetHotInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUgcCommonGetHotInfoReq::CopyFrom(const TUgcCommonGetHotInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUgcCommonGetHotInfoReq::IsInitialized() const {

  return true;
}

void TUgcCommonGetHotInfoReq::Swap(TUgcCommonGetHotInfoReq* other) {
  if (other != this) {
    std::swap(scenetid_, other->scenetid_);
    std::swap(version_, other->version_);
    std::swap(pageidx_, other->pageidx_);
    std::swap(pagesize_, other->pagesize_);
    std::swap(crosstype_, other->crosstype_);
    std::swap(crossinfo_, other->crossinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUgcCommonGetHotInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUgcCommonGetHotInfoReq_descriptor_;
  metadata.reflection = TUgcCommonGetHotInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUgcCommonGetHotInfoRsp::kHotArrFieldNumber;
const int TUgcCommonGetHotInfoRsp::kVersionFieldNumber;
#endif  // !_MSC_VER

TUgcCommonGetHotInfoRsp::TUgcCommonGetHotInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUgcCommonGetHotInfoRsp)
}

void TUgcCommonGetHotInfoRsp::InitAsDefaultInstance() {
}

TUgcCommonGetHotInfoRsp::TUgcCommonGetHotInfoRsp(const TUgcCommonGetHotInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUgcCommonGetHotInfoRsp)
}

void TUgcCommonGetHotInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUgcCommonGetHotInfoRsp::~TUgcCommonGetHotInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TUgcCommonGetHotInfoRsp)
  SharedDtor();
}

void TUgcCommonGetHotInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUgcCommonGetHotInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUgcCommonGetHotInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUgcCommonGetHotInfoRsp_descriptor_;
}

const TUgcCommonGetHotInfoRsp& TUgcCommonGetHotInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUgcCommon_2eproto();
  return *default_instance_;
}

TUgcCommonGetHotInfoRsp* TUgcCommonGetHotInfoRsp::default_instance_ = NULL;

TUgcCommonGetHotInfoRsp* TUgcCommonGetHotInfoRsp::New() const {
  return new TUgcCommonGetHotInfoRsp;
}

void TUgcCommonGetHotInfoRsp::Clear() {
  version_ = 0u;
  hotarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUgcCommonGetHotInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUgcCommonGetHotInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUgcCommonSingle HotArr = 1;
      case 1: {
        if (tag == 10) {
         parse_HotArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hotarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_HotArr;
        if (input->ExpectTag(16)) goto parse_Version;
        break;
      }

      // optional uint32 Version = 2;
      case 2: {
        if (tag == 16) {
         parse_Version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUgcCommonGetHotInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUgcCommonGetHotInfoRsp)
  return false;
#undef DO_
}

void TUgcCommonGetHotInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUgcCommonGetHotInfoRsp)
  // repeated .pb.TUgcCommonSingle HotArr = 1;
  for (int i = 0; i < this->hotarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hotarr(i), output);
  }

  // optional uint32 Version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUgcCommonGetHotInfoRsp)
}

::google::protobuf::uint8* TUgcCommonGetHotInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUgcCommonGetHotInfoRsp)
  // repeated .pb.TUgcCommonSingle HotArr = 1;
  for (int i = 0; i < this->hotarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hotarr(i), target);
  }

  // optional uint32 Version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUgcCommonGetHotInfoRsp)
  return target;
}

int TUgcCommonGetHotInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 Version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .pb.TUgcCommonSingle HotArr = 1;
  total_size += 1 * this->hotarr_size();
  for (int i = 0; i < this->hotarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hotarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUgcCommonGetHotInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUgcCommonGetHotInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUgcCommonGetHotInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUgcCommonGetHotInfoRsp::MergeFrom(const TUgcCommonGetHotInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  hotarr_.MergeFrom(from.hotarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUgcCommonGetHotInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUgcCommonGetHotInfoRsp::CopyFrom(const TUgcCommonGetHotInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUgcCommonGetHotInfoRsp::IsInitialized() const {

  return true;
}

void TUgcCommonGetHotInfoRsp::Swap(TUgcCommonGetHotInfoRsp* other) {
  if (other != this) {
    hotarr_.Swap(&other->hotarr_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUgcCommonGetHotInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUgcCommonGetHotInfoRsp_descriptor_;
  metadata.reflection = TUgcCommonGetHotInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUgcCommonGetCurrentInfoReq::kSceneTidFieldNumber;
const int TUgcCommonGetCurrentInfoReq::kVersionFieldNumber;
const int TUgcCommonGetCurrentInfoReq::kPageIdxFieldNumber;
const int TUgcCommonGetCurrentInfoReq::kPageSizeFieldNumber;
const int TUgcCommonGetCurrentInfoReq::kCrossTypeFieldNumber;
const int TUgcCommonGetCurrentInfoReq::kCrossInfoFieldNumber;
#endif  // !_MSC_VER

TUgcCommonGetCurrentInfoReq::TUgcCommonGetCurrentInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUgcCommonGetCurrentInfoReq)
}

void TUgcCommonGetCurrentInfoReq::InitAsDefaultInstance() {
  crossinfo_ = const_cast< ::pb::TUgcCommonCrossSceneInfo*>(&::pb::TUgcCommonCrossSceneInfo::default_instance());
}

TUgcCommonGetCurrentInfoReq::TUgcCommonGetCurrentInfoReq(const TUgcCommonGetCurrentInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUgcCommonGetCurrentInfoReq)
}

void TUgcCommonGetCurrentInfoReq::SharedCtor() {
  _cached_size_ = 0;
  scenetid_ = 0u;
  version_ = 0u;
  pageidx_ = 0u;
  pagesize_ = 0u;
  crosstype_ = 0;
  crossinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUgcCommonGetCurrentInfoReq::~TUgcCommonGetCurrentInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TUgcCommonGetCurrentInfoReq)
  SharedDtor();
}

void TUgcCommonGetCurrentInfoReq::SharedDtor() {
  if (this != default_instance_) {
    delete crossinfo_;
  }
}

void TUgcCommonGetCurrentInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUgcCommonGetCurrentInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUgcCommonGetCurrentInfoReq_descriptor_;
}

const TUgcCommonGetCurrentInfoReq& TUgcCommonGetCurrentInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUgcCommon_2eproto();
  return *default_instance_;
}

TUgcCommonGetCurrentInfoReq* TUgcCommonGetCurrentInfoReq::default_instance_ = NULL;

TUgcCommonGetCurrentInfoReq* TUgcCommonGetCurrentInfoReq::New() const {
  return new TUgcCommonGetCurrentInfoReq;
}

void TUgcCommonGetCurrentInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUgcCommonGetCurrentInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(scenetid_, pagesize_);
    crosstype_ = 0;
    if (has_crossinfo()) {
      if (crossinfo_ != NULL) crossinfo_->::pb::TUgcCommonCrossSceneInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUgcCommonGetCurrentInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUgcCommonGetCurrentInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SceneTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenetid_)));
          set_has_scenetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Version;
        break;
      }

      // optional uint32 Version = 2;
      case 2: {
        if (tag == 16) {
         parse_Version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PageIdx;
        break;
      }

      // optional uint32 PageIdx = 3;
      case 3: {
        if (tag == 24) {
         parse_PageIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pageidx_)));
          set_has_pageidx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PageSize;
        break;
      }

      // optional uint32 PageSize = 4;
      case 4: {
        if (tag == 32) {
         parse_PageSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagesize_)));
          set_has_pagesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CrossType;
        break;
      }

      // optional .pb.ECrossFuncType CrossType = 5;
      case 5: {
        if (tag == 40) {
         parse_CrossType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECrossFuncType_IsValid(value)) {
            set_crosstype(static_cast< ::pb::ECrossFuncType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_CrossInfo;
        break;
      }

      // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_CrossInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crossinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUgcCommonGetCurrentInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUgcCommonGetCurrentInfoReq)
  return false;
#undef DO_
}

void TUgcCommonGetCurrentInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUgcCommonGetCurrentInfoReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scenetid(), output);
  }

  // optional uint32 Version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional uint32 PageIdx = 3;
  if (has_pageidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pageidx(), output);
  }

  // optional uint32 PageSize = 4;
  if (has_pagesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pagesize(), output);
  }

  // optional .pb.ECrossFuncType CrossType = 5;
  if (has_crosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->crosstype(), output);
  }

  // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 6;
  if (has_crossinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->crossinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUgcCommonGetCurrentInfoReq)
}

::google::protobuf::uint8* TUgcCommonGetCurrentInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUgcCommonGetCurrentInfoReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scenetid(), target);
  }

  // optional uint32 Version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // optional uint32 PageIdx = 3;
  if (has_pageidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pageidx(), target);
  }

  // optional uint32 PageSize = 4;
  if (has_pagesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pagesize(), target);
  }

  // optional .pb.ECrossFuncType CrossType = 5;
  if (has_crosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->crosstype(), target);
  }

  // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 6;
  if (has_crossinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->crossinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUgcCommonGetCurrentInfoReq)
  return target;
}

int TUgcCommonGetCurrentInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SceneTid = 1;
    if (has_scenetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenetid());
    }

    // optional uint32 Version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 PageIdx = 3;
    if (has_pageidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pageidx());
    }

    // optional uint32 PageSize = 4;
    if (has_pagesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagesize());
    }

    // optional .pb.ECrossFuncType CrossType = 5;
    if (has_crosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->crosstype());
    }

    // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 6;
    if (has_crossinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crossinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUgcCommonGetCurrentInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUgcCommonGetCurrentInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUgcCommonGetCurrentInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUgcCommonGetCurrentInfoReq::MergeFrom(const TUgcCommonGetCurrentInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scenetid()) {
      set_scenetid(from.scenetid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_pageidx()) {
      set_pageidx(from.pageidx());
    }
    if (from.has_pagesize()) {
      set_pagesize(from.pagesize());
    }
    if (from.has_crosstype()) {
      set_crosstype(from.crosstype());
    }
    if (from.has_crossinfo()) {
      mutable_crossinfo()->::pb::TUgcCommonCrossSceneInfo::MergeFrom(from.crossinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUgcCommonGetCurrentInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUgcCommonGetCurrentInfoReq::CopyFrom(const TUgcCommonGetCurrentInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUgcCommonGetCurrentInfoReq::IsInitialized() const {

  return true;
}

void TUgcCommonGetCurrentInfoReq::Swap(TUgcCommonGetCurrentInfoReq* other) {
  if (other != this) {
    std::swap(scenetid_, other->scenetid_);
    std::swap(version_, other->version_);
    std::swap(pageidx_, other->pageidx_);
    std::swap(pagesize_, other->pagesize_);
    std::swap(crosstype_, other->crosstype_);
    std::swap(crossinfo_, other->crossinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUgcCommonGetCurrentInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUgcCommonGetCurrentInfoReq_descriptor_;
  metadata.reflection = TUgcCommonGetCurrentInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUgcCommonGetCurrentInfoRsp::kCurrentArrFieldNumber;
const int TUgcCommonGetCurrentInfoRsp::kVersionFieldNumber;
const int TUgcCommonGetCurrentInfoRsp::kLastSendTimeFieldNumber;
#endif  // !_MSC_VER

TUgcCommonGetCurrentInfoRsp::TUgcCommonGetCurrentInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUgcCommonGetCurrentInfoRsp)
}

void TUgcCommonGetCurrentInfoRsp::InitAsDefaultInstance() {
}

TUgcCommonGetCurrentInfoRsp::TUgcCommonGetCurrentInfoRsp(const TUgcCommonGetCurrentInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUgcCommonGetCurrentInfoRsp)
}

void TUgcCommonGetCurrentInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  lastsendtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUgcCommonGetCurrentInfoRsp::~TUgcCommonGetCurrentInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TUgcCommonGetCurrentInfoRsp)
  SharedDtor();
}

void TUgcCommonGetCurrentInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUgcCommonGetCurrentInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUgcCommonGetCurrentInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUgcCommonGetCurrentInfoRsp_descriptor_;
}

const TUgcCommonGetCurrentInfoRsp& TUgcCommonGetCurrentInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUgcCommon_2eproto();
  return *default_instance_;
}

TUgcCommonGetCurrentInfoRsp* TUgcCommonGetCurrentInfoRsp::default_instance_ = NULL;

TUgcCommonGetCurrentInfoRsp* TUgcCommonGetCurrentInfoRsp::New() const {
  return new TUgcCommonGetCurrentInfoRsp;
}

void TUgcCommonGetCurrentInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUgcCommonGetCurrentInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(lastsendtime_, version_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  currentarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUgcCommonGetCurrentInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUgcCommonGetCurrentInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUgcCommonSingle CurrentArr = 1;
      case 1: {
        if (tag == 10) {
         parse_CurrentArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_currentarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_CurrentArr;
        if (input->ExpectTag(16)) goto parse_Version;
        break;
      }

      // optional uint32 Version = 2;
      case 2: {
        if (tag == 16) {
         parse_Version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LastSendTime;
        break;
      }

      // optional uint64 LastSendTime = 3;
      case 3: {
        if (tag == 24) {
         parse_LastSendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastsendtime_)));
          set_has_lastsendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUgcCommonGetCurrentInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUgcCommonGetCurrentInfoRsp)
  return false;
#undef DO_
}

void TUgcCommonGetCurrentInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUgcCommonGetCurrentInfoRsp)
  // repeated .pb.TUgcCommonSingle CurrentArr = 1;
  for (int i = 0; i < this->currentarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->currentarr(i), output);
  }

  // optional uint32 Version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional uint64 LastSendTime = 3;
  if (has_lastsendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lastsendtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUgcCommonGetCurrentInfoRsp)
}

::google::protobuf::uint8* TUgcCommonGetCurrentInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUgcCommonGetCurrentInfoRsp)
  // repeated .pb.TUgcCommonSingle CurrentArr = 1;
  for (int i = 0; i < this->currentarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->currentarr(i), target);
  }

  // optional uint32 Version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // optional uint64 LastSendTime = 3;
  if (has_lastsendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lastsendtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUgcCommonGetCurrentInfoRsp)
  return target;
}

int TUgcCommonGetCurrentInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 Version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint64 LastSendTime = 3;
    if (has_lastsendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastsendtime());
    }

  }
  // repeated .pb.TUgcCommonSingle CurrentArr = 1;
  total_size += 1 * this->currentarr_size();
  for (int i = 0; i < this->currentarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->currentarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUgcCommonGetCurrentInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUgcCommonGetCurrentInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUgcCommonGetCurrentInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUgcCommonGetCurrentInfoRsp::MergeFrom(const TUgcCommonGetCurrentInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  currentarr_.MergeFrom(from.currentarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_lastsendtime()) {
      set_lastsendtime(from.lastsendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUgcCommonGetCurrentInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUgcCommonGetCurrentInfoRsp::CopyFrom(const TUgcCommonGetCurrentInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUgcCommonGetCurrentInfoRsp::IsInitialized() const {

  return true;
}

void TUgcCommonGetCurrentInfoRsp::Swap(TUgcCommonGetCurrentInfoRsp* other) {
  if (other != this) {
    currentarr_.Swap(&other->currentarr_);
    std::swap(version_, other->version_);
    std::swap(lastsendtime_, other->lastsendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUgcCommonGetCurrentInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUgcCommonGetCurrentInfoRsp_descriptor_;
  metadata.reflection = TUgcCommonGetCurrentInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUgcCommonGetMyUncheckReq::kSceneTidFieldNumber;
const int TUgcCommonGetMyUncheckReq::kCrossTypeFieldNumber;
const int TUgcCommonGetMyUncheckReq::kCrossInfoFieldNumber;
#endif  // !_MSC_VER

TUgcCommonGetMyUncheckReq::TUgcCommonGetMyUncheckReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUgcCommonGetMyUncheckReq)
}

void TUgcCommonGetMyUncheckReq::InitAsDefaultInstance() {
  crossinfo_ = const_cast< ::pb::TUgcCommonCrossSceneInfo*>(&::pb::TUgcCommonCrossSceneInfo::default_instance());
}

TUgcCommonGetMyUncheckReq::TUgcCommonGetMyUncheckReq(const TUgcCommonGetMyUncheckReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUgcCommonGetMyUncheckReq)
}

void TUgcCommonGetMyUncheckReq::SharedCtor() {
  _cached_size_ = 0;
  scenetid_ = 0u;
  crosstype_ = 0;
  crossinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUgcCommonGetMyUncheckReq::~TUgcCommonGetMyUncheckReq() {
  // @@protoc_insertion_point(destructor:pb.TUgcCommonGetMyUncheckReq)
  SharedDtor();
}

void TUgcCommonGetMyUncheckReq::SharedDtor() {
  if (this != default_instance_) {
    delete crossinfo_;
  }
}

void TUgcCommonGetMyUncheckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUgcCommonGetMyUncheckReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUgcCommonGetMyUncheckReq_descriptor_;
}

const TUgcCommonGetMyUncheckReq& TUgcCommonGetMyUncheckReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUgcCommon_2eproto();
  return *default_instance_;
}

TUgcCommonGetMyUncheckReq* TUgcCommonGetMyUncheckReq::default_instance_ = NULL;

TUgcCommonGetMyUncheckReq* TUgcCommonGetMyUncheckReq::New() const {
  return new TUgcCommonGetMyUncheckReq;
}

void TUgcCommonGetMyUncheckReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUgcCommonGetMyUncheckReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(scenetid_, crosstype_);
    if (has_crossinfo()) {
      if (crossinfo_ != NULL) crossinfo_->::pb::TUgcCommonCrossSceneInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUgcCommonGetMyUncheckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUgcCommonGetMyUncheckReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SceneTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenetid_)));
          set_has_scenetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CrossType;
        break;
      }

      // optional .pb.ECrossFuncType CrossType = 2;
      case 2: {
        if (tag == 16) {
         parse_CrossType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECrossFuncType_IsValid(value)) {
            set_crosstype(static_cast< ::pb::ECrossFuncType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_CrossInfo;
        break;
      }

      // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_CrossInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crossinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUgcCommonGetMyUncheckReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUgcCommonGetMyUncheckReq)
  return false;
#undef DO_
}

void TUgcCommonGetMyUncheckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUgcCommonGetMyUncheckReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scenetid(), output);
  }

  // optional .pb.ECrossFuncType CrossType = 2;
  if (has_crosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->crosstype(), output);
  }

  // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 3;
  if (has_crossinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->crossinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUgcCommonGetMyUncheckReq)
}

::google::protobuf::uint8* TUgcCommonGetMyUncheckReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUgcCommonGetMyUncheckReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scenetid(), target);
  }

  // optional .pb.ECrossFuncType CrossType = 2;
  if (has_crosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->crosstype(), target);
  }

  // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 3;
  if (has_crossinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->crossinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUgcCommonGetMyUncheckReq)
  return target;
}

int TUgcCommonGetMyUncheckReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SceneTid = 1;
    if (has_scenetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenetid());
    }

    // optional .pb.ECrossFuncType CrossType = 2;
    if (has_crosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->crosstype());
    }

    // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 3;
    if (has_crossinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crossinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUgcCommonGetMyUncheckReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUgcCommonGetMyUncheckReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUgcCommonGetMyUncheckReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUgcCommonGetMyUncheckReq::MergeFrom(const TUgcCommonGetMyUncheckReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scenetid()) {
      set_scenetid(from.scenetid());
    }
    if (from.has_crosstype()) {
      set_crosstype(from.crosstype());
    }
    if (from.has_crossinfo()) {
      mutable_crossinfo()->::pb::TUgcCommonCrossSceneInfo::MergeFrom(from.crossinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUgcCommonGetMyUncheckReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUgcCommonGetMyUncheckReq::CopyFrom(const TUgcCommonGetMyUncheckReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUgcCommonGetMyUncheckReq::IsInitialized() const {

  return true;
}

void TUgcCommonGetMyUncheckReq::Swap(TUgcCommonGetMyUncheckReq* other) {
  if (other != this) {
    std::swap(scenetid_, other->scenetid_);
    std::swap(crosstype_, other->crosstype_);
    std::swap(crossinfo_, other->crossinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUgcCommonGetMyUncheckReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUgcCommonGetMyUncheckReq_descriptor_;
  metadata.reflection = TUgcCommonGetMyUncheckReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUgcCommonGetMyUncheckRsp::kUncheckArrFieldNumber;
#endif  // !_MSC_VER

TUgcCommonGetMyUncheckRsp::TUgcCommonGetMyUncheckRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUgcCommonGetMyUncheckRsp)
}

void TUgcCommonGetMyUncheckRsp::InitAsDefaultInstance() {
}

TUgcCommonGetMyUncheckRsp::TUgcCommonGetMyUncheckRsp(const TUgcCommonGetMyUncheckRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUgcCommonGetMyUncheckRsp)
}

void TUgcCommonGetMyUncheckRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUgcCommonGetMyUncheckRsp::~TUgcCommonGetMyUncheckRsp() {
  // @@protoc_insertion_point(destructor:pb.TUgcCommonGetMyUncheckRsp)
  SharedDtor();
}

void TUgcCommonGetMyUncheckRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUgcCommonGetMyUncheckRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUgcCommonGetMyUncheckRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUgcCommonGetMyUncheckRsp_descriptor_;
}

const TUgcCommonGetMyUncheckRsp& TUgcCommonGetMyUncheckRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUgcCommon_2eproto();
  return *default_instance_;
}

TUgcCommonGetMyUncheckRsp* TUgcCommonGetMyUncheckRsp::default_instance_ = NULL;

TUgcCommonGetMyUncheckRsp* TUgcCommonGetMyUncheckRsp::New() const {
  return new TUgcCommonGetMyUncheckRsp;
}

void TUgcCommonGetMyUncheckRsp::Clear() {
  uncheckarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUgcCommonGetMyUncheckRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUgcCommonGetMyUncheckRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUgcCommonSingle UncheckArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UncheckArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uncheckarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UncheckArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUgcCommonGetMyUncheckRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUgcCommonGetMyUncheckRsp)
  return false;
#undef DO_
}

void TUgcCommonGetMyUncheckRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUgcCommonGetMyUncheckRsp)
  // repeated .pb.TUgcCommonSingle UncheckArr = 1;
  for (int i = 0; i < this->uncheckarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uncheckarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUgcCommonGetMyUncheckRsp)
}

::google::protobuf::uint8* TUgcCommonGetMyUncheckRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUgcCommonGetMyUncheckRsp)
  // repeated .pb.TUgcCommonSingle UncheckArr = 1;
  for (int i = 0; i < this->uncheckarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uncheckarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUgcCommonGetMyUncheckRsp)
  return target;
}

int TUgcCommonGetMyUncheckRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TUgcCommonSingle UncheckArr = 1;
  total_size += 1 * this->uncheckarr_size();
  for (int i = 0; i < this->uncheckarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uncheckarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUgcCommonGetMyUncheckRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUgcCommonGetMyUncheckRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUgcCommonGetMyUncheckRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUgcCommonGetMyUncheckRsp::MergeFrom(const TUgcCommonGetMyUncheckRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  uncheckarr_.MergeFrom(from.uncheckarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUgcCommonGetMyUncheckRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUgcCommonGetMyUncheckRsp::CopyFrom(const TUgcCommonGetMyUncheckRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUgcCommonGetMyUncheckRsp::IsInitialized() const {

  return true;
}

void TUgcCommonGetMyUncheckRsp::Swap(TUgcCommonGetMyUncheckRsp* other) {
  if (other != this) {
    uncheckarr_.Swap(&other->uncheckarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUgcCommonGetMyUncheckRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUgcCommonGetMyUncheckRsp_descriptor_;
  metadata.reflection = TUgcCommonGetMyUncheckRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUgcCommonSendMessageReq::kSceneTidFieldNumber;
const int TUgcCommonSendMessageReq::kUidFieldNumber;
const int TUgcCommonSendMessageReq::kContentFieldNumber;
const int TUgcCommonSendMessageReq::kXpidFieldNumber;
const int TUgcCommonSendMessageReq::kCrossTypeFieldNumber;
const int TUgcCommonSendMessageReq::kCrossInfoFieldNumber;
#endif  // !_MSC_VER

TUgcCommonSendMessageReq::TUgcCommonSendMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUgcCommonSendMessageReq)
}

void TUgcCommonSendMessageReq::InitAsDefaultInstance() {
  crossinfo_ = const_cast< ::pb::TUgcCommonCrossSceneInfo*>(&::pb::TUgcCommonCrossSceneInfo::default_instance());
}

TUgcCommonSendMessageReq::TUgcCommonSendMessageReq(const TUgcCommonSendMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUgcCommonSendMessageReq)
}

void TUgcCommonSendMessageReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  scenetid_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xpid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crosstype_ = 0;
  crossinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUgcCommonSendMessageReq::~TUgcCommonSendMessageReq() {
  // @@protoc_insertion_point(destructor:pb.TUgcCommonSendMessageReq)
  SharedDtor();
}

void TUgcCommonSendMessageReq::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (xpid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xpid_;
  }
  if (this != default_instance_) {
    delete crossinfo_;
  }
}

void TUgcCommonSendMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUgcCommonSendMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUgcCommonSendMessageReq_descriptor_;
}

const TUgcCommonSendMessageReq& TUgcCommonSendMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUgcCommon_2eproto();
  return *default_instance_;
}

TUgcCommonSendMessageReq* TUgcCommonSendMessageReq::default_instance_ = NULL;

TUgcCommonSendMessageReq* TUgcCommonSendMessageReq::New() const {
  return new TUgcCommonSendMessageReq;
}

void TUgcCommonSendMessageReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUgcCommonSendMessageReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(scenetid_, crosstype_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_xpid()) {
      if (xpid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        xpid_->clear();
      }
    }
    if (has_crossinfo()) {
      if (crossinfo_ != NULL) crossinfo_->::pb::TUgcCommonCrossSceneInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUgcCommonSendMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUgcCommonSendMessageReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SceneTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenetid_)));
          set_has_scenetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 2;
      case 2: {
        if (tag == 16) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Content;
        break;
      }

      // optional string Content = 3;
      case 3: {
        if (tag == 26) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Xpid;
        break;
      }

      // optional string Xpid = 4;
      case 4: {
        if (tag == 34) {
         parse_Xpid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xpid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->xpid().data(), this->xpid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xpid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CrossType;
        break;
      }

      // optional .pb.ECrossFuncType CrossType = 5;
      case 5: {
        if (tag == 40) {
         parse_CrossType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECrossFuncType_IsValid(value)) {
            set_crosstype(static_cast< ::pb::ECrossFuncType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_CrossInfo;
        break;
      }

      // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_CrossInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crossinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUgcCommonSendMessageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUgcCommonSendMessageReq)
  return false;
#undef DO_
}

void TUgcCommonSendMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUgcCommonSendMessageReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scenetid(), output);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional string Content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  // optional string Xpid = 4;
  if (has_xpid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xpid().data(), this->xpid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xpid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->xpid(), output);
  }

  // optional .pb.ECrossFuncType CrossType = 5;
  if (has_crosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->crosstype(), output);
  }

  // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 6;
  if (has_crossinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->crossinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUgcCommonSendMessageReq)
}

::google::protobuf::uint8* TUgcCommonSendMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUgcCommonSendMessageReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scenetid(), target);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional string Content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional string Xpid = 4;
  if (has_xpid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xpid().data(), this->xpid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xpid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->xpid(), target);
  }

  // optional .pb.ECrossFuncType CrossType = 5;
  if (has_crosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->crosstype(), target);
  }

  // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 6;
  if (has_crossinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->crossinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUgcCommonSendMessageReq)
  return target;
}

int TUgcCommonSendMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SceneTid = 1;
    if (has_scenetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenetid());
    }

    // optional uint64 Uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string Content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string Xpid = 4;
    if (has_xpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xpid());
    }

    // optional .pb.ECrossFuncType CrossType = 5;
    if (has_crosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->crosstype());
    }

    // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 6;
    if (has_crossinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crossinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUgcCommonSendMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUgcCommonSendMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUgcCommonSendMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUgcCommonSendMessageReq::MergeFrom(const TUgcCommonSendMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scenetid()) {
      set_scenetid(from.scenetid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_xpid()) {
      set_xpid(from.xpid());
    }
    if (from.has_crosstype()) {
      set_crosstype(from.crosstype());
    }
    if (from.has_crossinfo()) {
      mutable_crossinfo()->::pb::TUgcCommonCrossSceneInfo::MergeFrom(from.crossinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUgcCommonSendMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUgcCommonSendMessageReq::CopyFrom(const TUgcCommonSendMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUgcCommonSendMessageReq::IsInitialized() const {

  return true;
}

void TUgcCommonSendMessageReq::Swap(TUgcCommonSendMessageReq* other) {
  if (other != this) {
    std::swap(scenetid_, other->scenetid_);
    std::swap(uid_, other->uid_);
    std::swap(content_, other->content_);
    std::swap(xpid_, other->xpid_);
    std::swap(crosstype_, other->crosstype_);
    std::swap(crossinfo_, other->crossinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUgcCommonSendMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUgcCommonSendMessageReq_descriptor_;
  metadata.reflection = TUgcCommonSendMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUgcCommonSendMessageRsp::kMsgInfoFieldNumber;
#endif  // !_MSC_VER

TUgcCommonSendMessageRsp::TUgcCommonSendMessageRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUgcCommonSendMessageRsp)
}

void TUgcCommonSendMessageRsp::InitAsDefaultInstance() {
  msginfo_ = const_cast< ::pb::TUgcCommonSingle*>(&::pb::TUgcCommonSingle::default_instance());
}

TUgcCommonSendMessageRsp::TUgcCommonSendMessageRsp(const TUgcCommonSendMessageRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUgcCommonSendMessageRsp)
}

void TUgcCommonSendMessageRsp::SharedCtor() {
  _cached_size_ = 0;
  msginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUgcCommonSendMessageRsp::~TUgcCommonSendMessageRsp() {
  // @@protoc_insertion_point(destructor:pb.TUgcCommonSendMessageRsp)
  SharedDtor();
}

void TUgcCommonSendMessageRsp::SharedDtor() {
  if (this != default_instance_) {
    delete msginfo_;
  }
}

void TUgcCommonSendMessageRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUgcCommonSendMessageRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUgcCommonSendMessageRsp_descriptor_;
}

const TUgcCommonSendMessageRsp& TUgcCommonSendMessageRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUgcCommon_2eproto();
  return *default_instance_;
}

TUgcCommonSendMessageRsp* TUgcCommonSendMessageRsp::default_instance_ = NULL;

TUgcCommonSendMessageRsp* TUgcCommonSendMessageRsp::New() const {
  return new TUgcCommonSendMessageRsp;
}

void TUgcCommonSendMessageRsp::Clear() {
  if (has_msginfo()) {
    if (msginfo_ != NULL) msginfo_->::pb::TUgcCommonSingle::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUgcCommonSendMessageRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUgcCommonSendMessageRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUgcCommonSingle MsgInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUgcCommonSendMessageRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUgcCommonSendMessageRsp)
  return false;
#undef DO_
}

void TUgcCommonSendMessageRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUgcCommonSendMessageRsp)
  // optional .pb.TUgcCommonSingle MsgInfo = 1;
  if (has_msginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUgcCommonSendMessageRsp)
}

::google::protobuf::uint8* TUgcCommonSendMessageRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUgcCommonSendMessageRsp)
  // optional .pb.TUgcCommonSingle MsgInfo = 1;
  if (has_msginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUgcCommonSendMessageRsp)
  return target;
}

int TUgcCommonSendMessageRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUgcCommonSingle MsgInfo = 1;
    if (has_msginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUgcCommonSendMessageRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUgcCommonSendMessageRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUgcCommonSendMessageRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUgcCommonSendMessageRsp::MergeFrom(const TUgcCommonSendMessageRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msginfo()) {
      mutable_msginfo()->::pb::TUgcCommonSingle::MergeFrom(from.msginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUgcCommonSendMessageRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUgcCommonSendMessageRsp::CopyFrom(const TUgcCommonSendMessageRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUgcCommonSendMessageRsp::IsInitialized() const {

  return true;
}

void TUgcCommonSendMessageRsp::Swap(TUgcCommonSendMessageRsp* other) {
  if (other != this) {
    std::swap(msginfo_, other->msginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUgcCommonSendMessageRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUgcCommonSendMessageRsp_descriptor_;
  metadata.reflection = TUgcCommonSendMessageRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUgcCommonDeleteReq::kSceneTidFieldNumber;
const int TUgcCommonDeleteReq::kMidFieldNumber;
const int TUgcCommonDeleteReq::kCrossTypeFieldNumber;
const int TUgcCommonDeleteReq::kCrossInfoFieldNumber;
#endif  // !_MSC_VER

TUgcCommonDeleteReq::TUgcCommonDeleteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUgcCommonDeleteReq)
}

void TUgcCommonDeleteReq::InitAsDefaultInstance() {
  crossinfo_ = const_cast< ::pb::TUgcCommonCrossSceneInfo*>(&::pb::TUgcCommonCrossSceneInfo::default_instance());
}

TUgcCommonDeleteReq::TUgcCommonDeleteReq(const TUgcCommonDeleteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUgcCommonDeleteReq)
}

void TUgcCommonDeleteReq::SharedCtor() {
  _cached_size_ = 0;
  scenetid_ = 0u;
  mid_ = GOOGLE_ULONGLONG(0);
  crosstype_ = 0;
  crossinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUgcCommonDeleteReq::~TUgcCommonDeleteReq() {
  // @@protoc_insertion_point(destructor:pb.TUgcCommonDeleteReq)
  SharedDtor();
}

void TUgcCommonDeleteReq::SharedDtor() {
  if (this != default_instance_) {
    delete crossinfo_;
  }
}

void TUgcCommonDeleteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUgcCommonDeleteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUgcCommonDeleteReq_descriptor_;
}

const TUgcCommonDeleteReq& TUgcCommonDeleteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUgcCommon_2eproto();
  return *default_instance_;
}

TUgcCommonDeleteReq* TUgcCommonDeleteReq::default_instance_ = NULL;

TUgcCommonDeleteReq* TUgcCommonDeleteReq::New() const {
  return new TUgcCommonDeleteReq;
}

void TUgcCommonDeleteReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUgcCommonDeleteReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(mid_, crosstype_);
    if (has_crossinfo()) {
      if (crossinfo_ != NULL) crossinfo_->::pb::TUgcCommonCrossSceneInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUgcCommonDeleteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUgcCommonDeleteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SceneTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenetid_)));
          set_has_scenetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Mid;
        break;
      }

      // optional uint64 Mid = 2;
      case 2: {
        if (tag == 16) {
         parse_Mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CrossType;
        break;
      }

      // optional .pb.ECrossFuncType CrossType = 3;
      case 3: {
        if (tag == 24) {
         parse_CrossType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECrossFuncType_IsValid(value)) {
            set_crosstype(static_cast< ::pb::ECrossFuncType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CrossInfo;
        break;
      }

      // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_CrossInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crossinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUgcCommonDeleteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUgcCommonDeleteReq)
  return false;
#undef DO_
}

void TUgcCommonDeleteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUgcCommonDeleteReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scenetid(), output);
  }

  // optional uint64 Mid = 2;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mid(), output);
  }

  // optional .pb.ECrossFuncType CrossType = 3;
  if (has_crosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->crosstype(), output);
  }

  // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 4;
  if (has_crossinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->crossinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUgcCommonDeleteReq)
}

::google::protobuf::uint8* TUgcCommonDeleteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUgcCommonDeleteReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scenetid(), target);
  }

  // optional uint64 Mid = 2;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mid(), target);
  }

  // optional .pb.ECrossFuncType CrossType = 3;
  if (has_crosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->crosstype(), target);
  }

  // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 4;
  if (has_crossinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->crossinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUgcCommonDeleteReq)
  return target;
}

int TUgcCommonDeleteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SceneTid = 1;
    if (has_scenetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenetid());
    }

    // optional uint64 Mid = 2;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mid());
    }

    // optional .pb.ECrossFuncType CrossType = 3;
    if (has_crosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->crosstype());
    }

    // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 4;
    if (has_crossinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crossinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUgcCommonDeleteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUgcCommonDeleteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUgcCommonDeleteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUgcCommonDeleteReq::MergeFrom(const TUgcCommonDeleteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scenetid()) {
      set_scenetid(from.scenetid());
    }
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_crosstype()) {
      set_crosstype(from.crosstype());
    }
    if (from.has_crossinfo()) {
      mutable_crossinfo()->::pb::TUgcCommonCrossSceneInfo::MergeFrom(from.crossinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUgcCommonDeleteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUgcCommonDeleteReq::CopyFrom(const TUgcCommonDeleteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUgcCommonDeleteReq::IsInitialized() const {

  return true;
}

void TUgcCommonDeleteReq::Swap(TUgcCommonDeleteReq* other) {
  if (other != this) {
    std::swap(scenetid_, other->scenetid_);
    std::swap(mid_, other->mid_);
    std::swap(crosstype_, other->crosstype_);
    std::swap(crossinfo_, other->crossinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUgcCommonDeleteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUgcCommonDeleteReq_descriptor_;
  metadata.reflection = TUgcCommonDeleteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUgcCommonLikeReq::kSceneTidFieldNumber;
const int TUgcCommonLikeReq::kMidFieldNumber;
const int TUgcCommonLikeReq::kAppraiseStatusFieldNumber;
const int TUgcCommonLikeReq::kCrossTypeFieldNumber;
const int TUgcCommonLikeReq::kCrossInfoFieldNumber;
#endif  // !_MSC_VER

TUgcCommonLikeReq::TUgcCommonLikeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUgcCommonLikeReq)
}

void TUgcCommonLikeReq::InitAsDefaultInstance() {
  crossinfo_ = const_cast< ::pb::TUgcCommonCrossSceneInfo*>(&::pb::TUgcCommonCrossSceneInfo::default_instance());
}

TUgcCommonLikeReq::TUgcCommonLikeReq(const TUgcCommonLikeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUgcCommonLikeReq)
}

void TUgcCommonLikeReq::SharedCtor() {
  _cached_size_ = 0;
  scenetid_ = 0u;
  mid_ = GOOGLE_ULONGLONG(0);
  appraisestatus_ = 0;
  crosstype_ = 0;
  crossinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUgcCommonLikeReq::~TUgcCommonLikeReq() {
  // @@protoc_insertion_point(destructor:pb.TUgcCommonLikeReq)
  SharedDtor();
}

void TUgcCommonLikeReq::SharedDtor() {
  if (this != default_instance_) {
    delete crossinfo_;
  }
}

void TUgcCommonLikeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUgcCommonLikeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUgcCommonLikeReq_descriptor_;
}

const TUgcCommonLikeReq& TUgcCommonLikeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fUgcCommon_2eproto();
  return *default_instance_;
}

TUgcCommonLikeReq* TUgcCommonLikeReq::default_instance_ = NULL;

TUgcCommonLikeReq* TUgcCommonLikeReq::New() const {
  return new TUgcCommonLikeReq;
}

void TUgcCommonLikeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUgcCommonLikeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(mid_, appraisestatus_);
    crosstype_ = 0;
    if (has_crossinfo()) {
      if (crossinfo_ != NULL) crossinfo_->::pb::TUgcCommonCrossSceneInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUgcCommonLikeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUgcCommonLikeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SceneTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenetid_)));
          set_has_scenetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Mid;
        break;
      }

      // optional uint64 Mid = 2;
      case 2: {
        if (tag == 16) {
         parse_Mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AppraiseStatus;
        break;
      }

      // optional .pb.EAppraise AppraiseStatus = 3;
      case 3: {
        if (tag == 24) {
         parse_AppraiseStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAppraise_IsValid(value)) {
            set_appraisestatus(static_cast< ::pb::EAppraise >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CrossType;
        break;
      }

      // optional .pb.ECrossFuncType CrossType = 4;
      case 4: {
        if (tag == 32) {
         parse_CrossType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECrossFuncType_IsValid(value)) {
            set_crosstype(static_cast< ::pb::ECrossFuncType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_CrossInfo;
        break;
      }

      // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_CrossInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crossinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUgcCommonLikeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUgcCommonLikeReq)
  return false;
#undef DO_
}

void TUgcCommonLikeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUgcCommonLikeReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scenetid(), output);
  }

  // optional uint64 Mid = 2;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mid(), output);
  }

  // optional .pb.EAppraise AppraiseStatus = 3;
  if (has_appraisestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->appraisestatus(), output);
  }

  // optional .pb.ECrossFuncType CrossType = 4;
  if (has_crosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->crosstype(), output);
  }

  // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 5;
  if (has_crossinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->crossinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUgcCommonLikeReq)
}

::google::protobuf::uint8* TUgcCommonLikeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUgcCommonLikeReq)
  // optional uint32 SceneTid = 1;
  if (has_scenetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scenetid(), target);
  }

  // optional uint64 Mid = 2;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mid(), target);
  }

  // optional .pb.EAppraise AppraiseStatus = 3;
  if (has_appraisestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->appraisestatus(), target);
  }

  // optional .pb.ECrossFuncType CrossType = 4;
  if (has_crosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->crosstype(), target);
  }

  // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 5;
  if (has_crossinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->crossinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUgcCommonLikeReq)
  return target;
}

int TUgcCommonLikeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SceneTid = 1;
    if (has_scenetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenetid());
    }

    // optional uint64 Mid = 2;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mid());
    }

    // optional .pb.EAppraise AppraiseStatus = 3;
    if (has_appraisestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->appraisestatus());
    }

    // optional .pb.ECrossFuncType CrossType = 4;
    if (has_crosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->crosstype());
    }

    // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 5;
    if (has_crossinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crossinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUgcCommonLikeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUgcCommonLikeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUgcCommonLikeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUgcCommonLikeReq::MergeFrom(const TUgcCommonLikeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scenetid()) {
      set_scenetid(from.scenetid());
    }
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_appraisestatus()) {
      set_appraisestatus(from.appraisestatus());
    }
    if (from.has_crosstype()) {
      set_crosstype(from.crosstype());
    }
    if (from.has_crossinfo()) {
      mutable_crossinfo()->::pb::TUgcCommonCrossSceneInfo::MergeFrom(from.crossinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUgcCommonLikeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUgcCommonLikeReq::CopyFrom(const TUgcCommonLikeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUgcCommonLikeReq::IsInitialized() const {

  return true;
}

void TUgcCommonLikeReq::Swap(TUgcCommonLikeReq* other) {
  if (other != this) {
    std::swap(scenetid_, other->scenetid_);
    std::swap(mid_, other->mid_);
    std::swap(appraisestatus_, other->appraisestatus_);
    std::swap(crosstype_, other->crosstype_);
    std::swap(crossinfo_, other->crossinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUgcCommonLikeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUgcCommonLikeReq_descriptor_;
  metadata.reflection = TUgcCommonLikeReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
