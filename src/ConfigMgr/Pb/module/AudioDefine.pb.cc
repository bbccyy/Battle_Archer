// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/AudioDefine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/AudioDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* AudioInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnimationStateAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnimationStateAudio_reflection_ = NULL;
const ::google::protobuf::Descriptor* AudioDefine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioDefine_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fAudioDefine_2eproto() {
  protobuf_AddDesc_module_2fAudioDefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/AudioDefine.proto");
  GOOGLE_CHECK(file != NULL);
  AudioInfo_descriptor_ = file->message_type(0);
  static const int AudioInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioInfo, audioeventname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioInfo, animaaudioinfo_),
  };
  AudioInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AudioInfo_descriptor_,
      AudioInfo::default_instance_,
      AudioInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AudioInfo));
  AnimationStateAudio_descriptor_ = file->message_type(1);
  static const int AnimationStateAudio_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimationStateAudio, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimationStateAudio, audioeventname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimationStateAudio, animastatename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimationStateAudio, animatransname_),
  };
  AnimationStateAudio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnimationStateAudio_descriptor_,
      AnimationStateAudio::default_instance_,
      AnimationStateAudio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimationStateAudio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimationStateAudio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnimationStateAudio));
  AudioDefine_descriptor_ = file->message_type(2);
  static const int AudioDefine_offsets_[1] = {
  };
  AudioDefine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AudioDefine_descriptor_,
      AudioDefine::default_instance_,
      AudioDefine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioDefine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioDefine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AudioDefine));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fAudioDefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AudioInfo_descriptor_, &AudioInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnimationStateAudio_descriptor_, &AnimationStateAudio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AudioDefine_descriptor_, &AudioDefine::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fAudioDefine_2eproto() {
  delete AudioInfo::default_instance_;
  delete AudioInfo_reflection_;
  delete AnimationStateAudio::default_instance_;
  delete AnimationStateAudio_reflection_;
  delete AudioDefine::default_instance_;
  delete AudioDefine_reflection_;
}

void protobuf_AddDesc_module_2fAudioDefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030module/AudioDefine.proto\022\002pb\"g\n\tAudioI"
    "nfo\022\021\n\tStartTime\030\001 \001(\002\022\026\n\016AudioEventName"
    "\030\002 \001(\t\022/\n\016AnimaAudioInfo\030\003 \003(\0132\027.pb.Anim"
    "ationStateAudio\"p\n\023AnimationStateAudio\022\021"
    "\n\tStartTime\030\001 \001(\002\022\026\n\016AudioEventName\030\002 \001("
    "\t\022\026\n\016AnimaStateName\030\003 \001(\t\022\026\n\016AnimaTransN"
    "ame\030\004 \001(\t\"\r\n\013AudioDefine", 264);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/AudioDefine.proto", &protobuf_RegisterTypes);
  AudioInfo::default_instance_ = new AudioInfo();
  AnimationStateAudio::default_instance_ = new AnimationStateAudio();
  AudioDefine::default_instance_ = new AudioDefine();
  AudioInfo::default_instance_->InitAsDefaultInstance();
  AnimationStateAudio::default_instance_->InitAsDefaultInstance();
  AudioDefine::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fAudioDefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fAudioDefine_2eproto {
  StaticDescriptorInitializer_module_2fAudioDefine_2eproto() {
    protobuf_AddDesc_module_2fAudioDefine_2eproto();
  }
} static_descriptor_initializer_module_2fAudioDefine_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AudioInfo::kStartTimeFieldNumber;
const int AudioInfo::kAudioEventNameFieldNumber;
const int AudioInfo::kAnimaAudioInfoFieldNumber;
#endif  // !_MSC_VER

AudioInfo::AudioInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AudioInfo)
}

void AudioInfo::InitAsDefaultInstance() {
}

AudioInfo::AudioInfo(const AudioInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AudioInfo)
}

void AudioInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  starttime_ = 0;
  audioeventname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioInfo::~AudioInfo() {
  // @@protoc_insertion_point(destructor:pb.AudioInfo)
  SharedDtor();
}

void AudioInfo::SharedDtor() {
  if (audioeventname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete audioeventname_;
  }
  if (this != default_instance_) {
  }
}

void AudioInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioInfo_descriptor_;
}

const AudioInfo& AudioInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAudioDefine_2eproto();
  return *default_instance_;
}

AudioInfo* AudioInfo::default_instance_ = NULL;

AudioInfo* AudioInfo::New() const {
  return new AudioInfo;
}

void AudioInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    starttime_ = 0;
    if (has_audioeventname()) {
      if (audioeventname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        audioeventname_->clear();
      }
    }
  }
  animaaudioinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AudioInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AudioInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float StartTime = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AudioEventName;
        break;
      }

      // optional string AudioEventName = 2;
      case 2: {
        if (tag == 18) {
         parse_AudioEventName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audioeventname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->audioeventname().data(), this->audioeventname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "audioeventname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AnimaAudioInfo;
        break;
      }

      // repeated .pb.AnimationStateAudio AnimaAudioInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_AnimaAudioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animaaudioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AnimaAudioInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AudioInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AudioInfo)
  return false;
#undef DO_
}

void AudioInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AudioInfo)
  // optional float StartTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->starttime(), output);
  }

  // optional string AudioEventName = 2;
  if (has_audioeventname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audioeventname().data(), this->audioeventname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "audioeventname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->audioeventname(), output);
  }

  // repeated .pb.AnimationStateAudio AnimaAudioInfo = 3;
  for (int i = 0; i < this->animaaudioinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->animaaudioinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AudioInfo)
}

::google::protobuf::uint8* AudioInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AudioInfo)
  // optional float StartTime = 1;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->starttime(), target);
  }

  // optional string AudioEventName = 2;
  if (has_audioeventname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audioeventname().data(), this->audioeventname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "audioeventname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->audioeventname(), target);
  }

  // repeated .pb.AnimationStateAudio AnimaAudioInfo = 3;
  for (int i = 0; i < this->animaaudioinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->animaaudioinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AudioInfo)
  return target;
}

int AudioInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float StartTime = 1;
    if (has_starttime()) {
      total_size += 1 + 4;
    }

    // optional string AudioEventName = 2;
    if (has_audioeventname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audioeventname());
    }

  }
  // repeated .pb.AnimationStateAudio AnimaAudioInfo = 3;
  total_size += 1 * this->animaaudioinfo_size();
  for (int i = 0; i < this->animaaudioinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animaaudioinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AudioInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AudioInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioInfo::MergeFrom(const AudioInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  animaaudioinfo_.MergeFrom(from.animaaudioinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_audioeventname()) {
      set_audioeventname(from.audioeventname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AudioInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioInfo::CopyFrom(const AudioInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioInfo::IsInitialized() const {

  return true;
}

void AudioInfo::Swap(AudioInfo* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(audioeventname_, other->audioeventname_);
    animaaudioinfo_.Swap(&other->animaaudioinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AudioInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioInfo_descriptor_;
  metadata.reflection = AudioInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnimationStateAudio::kStartTimeFieldNumber;
const int AnimationStateAudio::kAudioEventNameFieldNumber;
const int AnimationStateAudio::kAnimaStateNameFieldNumber;
const int AnimationStateAudio::kAnimaTransNameFieldNumber;
#endif  // !_MSC_VER

AnimationStateAudio::AnimationStateAudio()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AnimationStateAudio)
}

void AnimationStateAudio::InitAsDefaultInstance() {
}

AnimationStateAudio::AnimationStateAudio(const AnimationStateAudio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AnimationStateAudio)
}

void AnimationStateAudio::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  starttime_ = 0;
  audioeventname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  animastatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  animatransname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnimationStateAudio::~AnimationStateAudio() {
  // @@protoc_insertion_point(destructor:pb.AnimationStateAudio)
  SharedDtor();
}

void AnimationStateAudio::SharedDtor() {
  if (audioeventname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete audioeventname_;
  }
  if (animastatename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete animastatename_;
  }
  if (animatransname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete animatransname_;
  }
  if (this != default_instance_) {
  }
}

void AnimationStateAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnimationStateAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnimationStateAudio_descriptor_;
}

const AnimationStateAudio& AnimationStateAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAudioDefine_2eproto();
  return *default_instance_;
}

AnimationStateAudio* AnimationStateAudio::default_instance_ = NULL;

AnimationStateAudio* AnimationStateAudio::New() const {
  return new AnimationStateAudio;
}

void AnimationStateAudio::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    starttime_ = 0;
    if (has_audioeventname()) {
      if (audioeventname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        audioeventname_->clear();
      }
    }
    if (has_animastatename()) {
      if (animastatename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        animastatename_->clear();
      }
    }
    if (has_animatransname()) {
      if (animatransname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        animatransname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnimationStateAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AnimationStateAudio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float StartTime = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AudioEventName;
        break;
      }

      // optional string AudioEventName = 2;
      case 2: {
        if (tag == 18) {
         parse_AudioEventName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audioeventname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->audioeventname().data(), this->audioeventname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "audioeventname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AnimaStateName;
        break;
      }

      // optional string AnimaStateName = 3;
      case 3: {
        if (tag == 26) {
         parse_AnimaStateName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_animastatename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->animastatename().data(), this->animastatename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "animastatename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AnimaTransName;
        break;
      }

      // optional string AnimaTransName = 4;
      case 4: {
        if (tag == 34) {
         parse_AnimaTransName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_animatransname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->animatransname().data(), this->animatransname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "animatransname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AnimationStateAudio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AnimationStateAudio)
  return false;
#undef DO_
}

void AnimationStateAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AnimationStateAudio)
  // optional float StartTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->starttime(), output);
  }

  // optional string AudioEventName = 2;
  if (has_audioeventname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audioeventname().data(), this->audioeventname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "audioeventname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->audioeventname(), output);
  }

  // optional string AnimaStateName = 3;
  if (has_animastatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animastatename().data(), this->animastatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animastatename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->animastatename(), output);
  }

  // optional string AnimaTransName = 4;
  if (has_animatransname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animatransname().data(), this->animatransname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animatransname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->animatransname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AnimationStateAudio)
}

::google::protobuf::uint8* AnimationStateAudio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AnimationStateAudio)
  // optional float StartTime = 1;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->starttime(), target);
  }

  // optional string AudioEventName = 2;
  if (has_audioeventname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->audioeventname().data(), this->audioeventname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "audioeventname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->audioeventname(), target);
  }

  // optional string AnimaStateName = 3;
  if (has_animastatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animastatename().data(), this->animastatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animastatename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->animastatename(), target);
  }

  // optional string AnimaTransName = 4;
  if (has_animatransname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animatransname().data(), this->animatransname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animatransname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->animatransname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AnimationStateAudio)
  return target;
}

int AnimationStateAudio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float StartTime = 1;
    if (has_starttime()) {
      total_size += 1 + 4;
    }

    // optional string AudioEventName = 2;
    if (has_audioeventname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audioeventname());
    }

    // optional string AnimaStateName = 3;
    if (has_animastatename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->animastatename());
    }

    // optional string AnimaTransName = 4;
    if (has_animatransname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->animatransname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnimationStateAudio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnimationStateAudio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnimationStateAudio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnimationStateAudio::MergeFrom(const AnimationStateAudio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_audioeventname()) {
      set_audioeventname(from.audioeventname());
    }
    if (from.has_animastatename()) {
      set_animastatename(from.animastatename());
    }
    if (from.has_animatransname()) {
      set_animatransname(from.animatransname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnimationStateAudio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimationStateAudio::CopyFrom(const AnimationStateAudio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimationStateAudio::IsInitialized() const {

  return true;
}

void AnimationStateAudio::Swap(AnimationStateAudio* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(audioeventname_, other->audioeventname_);
    std::swap(animastatename_, other->animastatename_);
    std::swap(animatransname_, other->animatransname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnimationStateAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnimationStateAudio_descriptor_;
  metadata.reflection = AnimationStateAudio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AudioDefine::AudioDefine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AudioDefine)
}

void AudioDefine::InitAsDefaultInstance() {
}

AudioDefine::AudioDefine(const AudioDefine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AudioDefine)
}

void AudioDefine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioDefine::~AudioDefine() {
  // @@protoc_insertion_point(destructor:pb.AudioDefine)
  SharedDtor();
}

void AudioDefine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AudioDefine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioDefine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioDefine_descriptor_;
}

const AudioDefine& AudioDefine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAudioDefine_2eproto();
  return *default_instance_;
}

AudioDefine* AudioDefine::default_instance_ = NULL;

AudioDefine* AudioDefine::New() const {
  return new AudioDefine;
}

void AudioDefine::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AudioDefine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AudioDefine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AudioDefine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AudioDefine)
  return false;
#undef DO_
}

void AudioDefine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AudioDefine)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AudioDefine)
}

::google::protobuf::uint8* AudioDefine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AudioDefine)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AudioDefine)
  return target;
}

int AudioDefine::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioDefine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AudioDefine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AudioDefine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioDefine::MergeFrom(const AudioDefine& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AudioDefine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioDefine::CopyFrom(const AudioDefine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioDefine::IsInitialized() const {

  return true;
}

void AudioDefine::Swap(AudioDefine* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AudioDefine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioDefine_descriptor_;
  metadata.reflection = AudioDefine_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
