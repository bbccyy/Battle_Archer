// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ArenaHighOrder.proto

#ifndef PROTOBUF_net_2fArenaHighOrder_2eproto__INCLUDED
#define PROTOBUF_net_2fArenaHighOrder_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Battle.pb.h"
#include "net/User.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

class TArenaHigOrderUserRankSingle;
class TArenaHigOrderUserRankType;
class TArenaHigOrderUserAboveRankRsp;
class TArenaHigOrderTopRankUserReq;
class TArenaHigOrderTopRankUserRsp;
class TArenaHigOrderUserTypeRankReq;
class TArenaHigOrderUserTypeRankRsp;
class TArenaHighOrderUser;
class TArenaHighOrderUserRsp;
class TArenaHighOrderRefreshEnemyListRsp;
class TArenaHighOrderBattlePos;
class TArenaHighOrderFormationInfo;
class TArenaHighOrderGetMyFormationRsp;
class TArenaHighOrderSetFormationReq;
class TArenaHighOrderExchangeFormationReq;
class TArenaHighOrderEnemyFormation;
class TArenaHighOrderGetEnemyFormationReq;
class TArenaHighOrderGetEnemyFormationRsp;
class TUnitViewInfo;
class TArmyViewInfo;
class TArenaHighOrderFormationRecord;
class TArenaHighOrderRecordInfo;
class TArenaHighOrderGetBattleRecordReq;
class TArenaHighOrderGetBattleRecordRsp;
class TArenaHighOrderRankInfo;
class TArenaHighOrderGetRankListReq;
class TArenaHighOrderGetRankListRsp;
class TArenaHighOrderBattleReq;
class TArenaHighOrderBattleRsp;
class TArenaHighOrderGetSimpleBattleReportReq;
class TArenaHighOrderBattleRecordSimple;
class TArenaHighOrderGetSimpleBattleReportRsp;
class TArenaHighOrderBuyAtkNumReq;
class TArenaHighOrderBuyAtkNumRsp;
class TArenaHighOrderServerPush;
class TArenaHighOrderReceiveScoresRewardReq;
class TArenaHighOrderReceiveScoresRewardRsp;
class TArenaHighOrderGetEnemyFormationByOtherServerReq;
class TArenaHighOrderGetEnemyFormationByOtherServerRsp;
class TArenaHighOrderSetAttackedRecordByOtherServerReq;
class TArenaHighOrderSetAttackedRecordByOtherServerRsp;
class TArenaHighOrderGetTotalFightForceByOtherServerReq;
class TArenaHighOrderGetTotalFightForceByOtherServerRsp;
class TArenaHighOrderQuickChallengServerReq;
class TArenaHighOrderQuickChallengSingle;
class TArenaHighOrderQuickChallengServerRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TArenaHigOrderUserRankSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHigOrderUserRankSingle : public ::google::protobuf::Message {
 public:
  TArenaHigOrderUserRankSingle();
  virtual ~TArenaHigOrderUserRankSingle();

  TArenaHigOrderUserRankSingle(const TArenaHigOrderUserRankSingle& from);

  inline TArenaHigOrderUserRankSingle& operator=(const TArenaHigOrderUserRankSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHigOrderUserRankSingle& default_instance();

  void Swap(TArenaHigOrderUserRankSingle* other);

  // implements Message ----------------------------------------------

  TArenaHigOrderUserRankSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHigOrderUserRankSingle& from);
  void MergeFrom(const TArenaHigOrderUserRankSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserSimple = 1;
  inline bool has_usersimple() const;
  inline void clear_usersimple();
  static const int kUserSimpleFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHigOrderUserRankSingle</name>
  	<Function>
  		<name>usersimple</name>
  		<replaceName>UserSimple</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usersimple</name>
  		<replaceName>UserSimple</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_usersimple</name>
  		<replaceName>UserSimple</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usersimple</name>
  		<replaceName>UserSimple</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& usersimple() const;
  inline ::pb::TUserSimpleInfo* mutable_usersimple();
  inline ::pb::TUserSimpleInfo* release_usersimple();
  inline void set_allocated_usersimple(::pb::TUserSimpleInfo* usersimple);

  // optional uint32 UserScores = 2;
  inline bool has_userscores() const;
  inline void clear_userscores();
  static const int kUserScoresFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHigOrderUserRankSingle</name>
  	<Function>
  		<name>userscores</name>
  		<replaceName>UserScores</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userscores</name>
  		<replaceName>UserScores</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userscores</name>
  		<replaceName>UserScores</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 userscores() const;
  inline void set_userscores(::google::protobuf::uint32 value);

  // optional string ServerId = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaHigOrderUserRankSingle</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // @@protoc_insertion_point(class_scope:pb.TArenaHigOrderUserRankSingle)
 private:
  inline void set_has_usersimple();
  inline void clear_has_usersimple();
  inline void set_has_userscores();
  inline void clear_has_userscores();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* usersimple_;
  ::std::string* serverid_;
  ::google::protobuf::uint32 userscores_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHigOrderUserRankSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHigOrderUserRankType</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHigOrderUserRankType : public ::google::protobuf::Message {
 public:
  TArenaHigOrderUserRankType();
  virtual ~TArenaHigOrderUserRankType();

  TArenaHigOrderUserRankType(const TArenaHigOrderUserRankType& from);

  inline TArenaHigOrderUserRankType& operator=(const TArenaHigOrderUserRankType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHigOrderUserRankType& default_instance();

  void Swap(TArenaHigOrderUserRankType* other);

  // implements Message ----------------------------------------------

  TArenaHigOrderUserRankType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHigOrderUserRankType& from);
  void MergeFrom(const TArenaHigOrderUserRankType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RankId = 1;
  inline bool has_rankid() const;
  inline void clear_rankid();
  static const int kRankIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHigOrderUserRankType</name>
  	<Function>
  		<name>rankid</name>
  		<replaceName>RankId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rankid</name>
  		<replaceName>RankId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankid</name>
  		<replaceName>RankId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rankid() const;
  inline void set_rankid(::google::protobuf::uint32 value);

  // optional uint32 UserNum = 2;
  inline bool has_usernum() const;
  inline void clear_usernum();
  static const int kUserNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHigOrderUserRankType</name>
  	<Function>
  		<name>usernum</name>
  		<replaceName>UserNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usernum</name>
  		<replaceName>UserNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usernum</name>
  		<replaceName>UserNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 usernum() const;
  inline void set_usernum(::google::protobuf::uint32 value);

  // repeated .pb.TArenaHigOrderUserRankSingle UserArr = 3;
  inline int userarr_size() const;
  inline void clear_userarr();
  static const int kUserArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaHigOrderUserRankType</name>
  	<Function>
  		<name>userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userarr_size</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHigOrderUserRankSingle& userarr(int index) const;
  inline ::pb::TArenaHigOrderUserRankSingle* mutable_userarr(int index);
  inline ::pb::TArenaHigOrderUserRankSingle* add_userarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle >&
      userarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle >*
      mutable_userarr();

  // @@protoc_insertion_point(class_scope:pb.TArenaHigOrderUserRankType)
 private:
  inline void set_has_rankid();
  inline void clear_has_rankid();
  inline void set_has_usernum();
  inline void clear_has_usernum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rankid_;
  ::google::protobuf::uint32 usernum_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle > userarr_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHigOrderUserRankType* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHigOrderUserAboveRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHigOrderUserAboveRankRsp : public ::google::protobuf::Message {
 public:
  TArenaHigOrderUserAboveRankRsp();
  virtual ~TArenaHigOrderUserAboveRankRsp();

  TArenaHigOrderUserAboveRankRsp(const TArenaHigOrderUserAboveRankRsp& from);

  inline TArenaHigOrderUserAboveRankRsp& operator=(const TArenaHigOrderUserAboveRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHigOrderUserAboveRankRsp& default_instance();

  void Swap(TArenaHigOrderUserAboveRankRsp* other);

  // implements Message ----------------------------------------------

  TArenaHigOrderUserAboveRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHigOrderUserAboveRankRsp& from);
  void MergeFrom(const TArenaHigOrderUserAboveRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 MyRank = 1;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHigOrderUserAboveRankRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // repeated .pb.TArenaHigOrderUserRankType UserRankArr = 2;
  inline int userrankarr_size() const;
  inline void clear_userrankarr();
  static const int kUserRankArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHigOrderUserAboveRankRsp</name>
  	<Function>
  		<name>userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userrankarr_size</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHigOrderUserRankType& userrankarr(int index) const;
  inline ::pb::TArenaHigOrderUserRankType* mutable_userrankarr(int index);
  inline ::pb::TArenaHigOrderUserRankType* add_userrankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankType >&
      userrankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankType >*
      mutable_userrankarr();

  // repeated .pb.TArenaHigOrderUserRankSingle TopRankUserArr = 3;
  inline int toprankuserarr_size() const;
  inline void clear_toprankuserarr();
  static const int kTopRankUserArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaHigOrderUserAboveRankRsp</name>
  	<Function>
  		<name>toprankuserarr</name>
  		<replaceName>TopRankUserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_toprankuserarr</name>
  		<replaceName>TopRankUserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_toprankuserarr</name>
  		<replaceName>TopRankUserArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_toprankuserarr</name>
  		<replaceName>TopRankUserArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>toprankuserarr_size</name>
  		<replaceName>TopRankUserArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHigOrderUserRankSingle& toprankuserarr(int index) const;
  inline ::pb::TArenaHigOrderUserRankSingle* mutable_toprankuserarr(int index);
  inline ::pb::TArenaHigOrderUserRankSingle* add_toprankuserarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle >&
      toprankuserarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle >*
      mutable_toprankuserarr();

  // optional uint32 RealTopN = 4;
  inline bool has_realtopn() const;
  inline void clear_realtopn();
  static const int kRealTopNFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TArenaHigOrderUserAboveRankRsp</name>
  	<Function>
  		<name>realtopn</name>
  		<replaceName>RealTopN</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_realtopn</name>
  		<replaceName>RealTopN</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_realtopn</name>
  		<replaceName>RealTopN</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 realtopn() const;
  inline void set_realtopn(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHigOrderUserAboveRankRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();
  inline void set_has_realtopn();
  inline void clear_has_realtopn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankType > userrankarr_;
  ::google::protobuf::int32 myrank_;
  ::google::protobuf::uint32 realtopn_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle > toprankuserarr_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHigOrderUserAboveRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHigOrderTopRankUserReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHigOrderTopRankUserReq : public ::google::protobuf::Message {
 public:
  TArenaHigOrderTopRankUserReq();
  virtual ~TArenaHigOrderTopRankUserReq();

  TArenaHigOrderTopRankUserReq(const TArenaHigOrderTopRankUserReq& from);

  inline TArenaHigOrderTopRankUserReq& operator=(const TArenaHigOrderTopRankUserReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHigOrderTopRankUserReq& default_instance();

  void Swap(TArenaHigOrderTopRankUserReq* other);

  // implements Message ----------------------------------------------

  TArenaHigOrderTopRankUserReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHigOrderTopRankUserReq& from);
  void MergeFrom(const TArenaHigOrderTopRankUserReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHigOrderTopRankUserReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // optional int32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHigOrderTopRankUserReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHigOrderTopRankUserReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 limit_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHigOrderTopRankUserReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHigOrderTopRankUserRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHigOrderTopRankUserRsp : public ::google::protobuf::Message {
 public:
  TArenaHigOrderTopRankUserRsp();
  virtual ~TArenaHigOrderTopRankUserRsp();

  TArenaHigOrderTopRankUserRsp(const TArenaHigOrderTopRankUserRsp& from);

  inline TArenaHigOrderTopRankUserRsp& operator=(const TArenaHigOrderTopRankUserRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHigOrderTopRankUserRsp& default_instance();

  void Swap(TArenaHigOrderTopRankUserRsp* other);

  // implements Message ----------------------------------------------

  TArenaHigOrderTopRankUserRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHigOrderTopRankUserRsp& from);
  void MergeFrom(const TArenaHigOrderTopRankUserRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TArenaHigOrderUserRankSingle TopRankUserArr = 1;
  inline int toprankuserarr_size() const;
  inline void clear_toprankuserarr();
  static const int kTopRankUserArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHigOrderTopRankUserRsp</name>
  	<Function>
  		<name>toprankuserarr</name>
  		<replaceName>TopRankUserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_toprankuserarr</name>
  		<replaceName>TopRankUserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_toprankuserarr</name>
  		<replaceName>TopRankUserArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_toprankuserarr</name>
  		<replaceName>TopRankUserArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>toprankuserarr_size</name>
  		<replaceName>TopRankUserArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHigOrderUserRankSingle& toprankuserarr(int index) const;
  inline ::pb::TArenaHigOrderUserRankSingle* mutable_toprankuserarr(int index);
  inline ::pb::TArenaHigOrderUserRankSingle* add_toprankuserarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle >&
      toprankuserarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle >*
      mutable_toprankuserarr();

  // @@protoc_insertion_point(class_scope:pb.TArenaHigOrderTopRankUserRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle > toprankuserarr_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHigOrderTopRankUserRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHigOrderUserTypeRankReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHigOrderUserTypeRankReq : public ::google::protobuf::Message {
 public:
  TArenaHigOrderUserTypeRankReq();
  virtual ~TArenaHigOrderUserTypeRankReq();

  TArenaHigOrderUserTypeRankReq(const TArenaHigOrderUserTypeRankReq& from);

  inline TArenaHigOrderUserTypeRankReq& operator=(const TArenaHigOrderUserTypeRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHigOrderUserTypeRankReq& default_instance();

  void Swap(TArenaHigOrderUserTypeRankReq* other);

  // implements Message ----------------------------------------------

  TArenaHigOrderUserTypeRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHigOrderUserTypeRankReq& from);
  void MergeFrom(const TArenaHigOrderUserTypeRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 TypeRankId = 1;
  inline bool has_typerankid() const;
  inline void clear_typerankid();
  static const int kTypeRankIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHigOrderUserTypeRankReq</name>
  	<Function>
  		<name>typerankid</name>
  		<replaceName>TypeRankId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_typerankid</name>
  		<replaceName>TypeRankId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_typerankid</name>
  		<replaceName>TypeRankId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 typerankid() const;
  inline void set_typerankid(::google::protobuf::int32 value);

  // optional int32 Offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHigOrderUserTypeRankReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // optional int32 Limit = 3;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaHigOrderUserTypeRankReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHigOrderUserTypeRankReq)
 private:
  inline void set_has_typerankid();
  inline void clear_has_typerankid();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 typerankid_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 limit_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHigOrderUserTypeRankReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHigOrderUserTypeRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHigOrderUserTypeRankRsp : public ::google::protobuf::Message {
 public:
  TArenaHigOrderUserTypeRankRsp();
  virtual ~TArenaHigOrderUserTypeRankRsp();

  TArenaHigOrderUserTypeRankRsp(const TArenaHigOrderUserTypeRankRsp& from);

  inline TArenaHigOrderUserTypeRankRsp& operator=(const TArenaHigOrderUserTypeRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHigOrderUserTypeRankRsp& default_instance();

  void Swap(TArenaHigOrderUserTypeRankRsp* other);

  // implements Message ----------------------------------------------

  TArenaHigOrderUserTypeRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHigOrderUserTypeRankRsp& from);
  void MergeFrom(const TArenaHigOrderUserTypeRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TArenaHigOrderUserRankSingle TypeRankArr = 1;
  inline int typerankarr_size() const;
  inline void clear_typerankarr();
  static const int kTypeRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHigOrderUserTypeRankRsp</name>
  	<Function>
  		<name>typerankarr</name>
  		<replaceName>TypeRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_typerankarr</name>
  		<replaceName>TypeRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_typerankarr</name>
  		<replaceName>TypeRankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_typerankarr</name>
  		<replaceName>TypeRankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>typerankarr_size</name>
  		<replaceName>TypeRankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHigOrderUserRankSingle& typerankarr(int index) const;
  inline ::pb::TArenaHigOrderUserRankSingle* mutable_typerankarr(int index);
  inline ::pb::TArenaHigOrderUserRankSingle* add_typerankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle >&
      typerankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle >*
      mutable_typerankarr();

  // @@protoc_insertion_point(class_scope:pb.TArenaHigOrderUserTypeRankRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle > typerankarr_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHigOrderUserTypeRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderUser</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderUser : public ::google::protobuf::Message {
 public:
  TArenaHighOrderUser();
  virtual ~TArenaHighOrderUser();

  TArenaHighOrderUser(const TArenaHighOrderUser& from);

  inline TArenaHighOrderUser& operator=(const TArenaHighOrderUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderUser& default_instance();

  void Swap(TArenaHighOrderUser* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderUser& from);
  void MergeFrom(const TArenaHighOrderUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUser</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Uname = 2;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUser</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 Scores = 3;
  inline bool has_scores() const;
  inline void clear_scores();
  static const int kScoresFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUser</name>
  	<Function>
  		<name>scores</name>
  		<replaceName>Scores</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scores</name>
  		<replaceName>Scores</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scores</name>
  		<replaceName>Scores</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scores() const;
  inline void set_scores(::google::protobuf::uint32 value);

  // optional uint64 FightForce = 4;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUser</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint32 Htid = 5;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUser</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional int32 Rank = 6;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUser</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional string ServerId = 7;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUser</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional uint32 PlayerImageHtid = 8;
  inline bool has_playerimagehtid() const;
  inline void clear_playerimagehtid();
  static const int kPlayerImageHtidFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUser</name>
  	<Function>
  		<name>playerimagehtid</name>
  		<replaceName>PlayerImageHtid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_playerimagehtid</name>
  		<replaceName>PlayerImageHtid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_playerimagehtid</name>
  		<replaceName>PlayerImageHtid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 playerimagehtid() const;
  inline void set_playerimagehtid(::google::protobuf::uint32 value);

  // optional uint32 PlayerImageFrameTid = 9;
  inline bool has_playerimageframetid() const;
  inline void clear_playerimageframetid();
  static const int kPlayerImageFrameTidFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUser</name>
  	<Function>
  		<name>playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 playerimageframetid() const;
  inline void set_playerimageframetid(::google::protobuf::uint32 value);

  // optional string GuildName = 10;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUser</name>
  	<Function>
  		<name>guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderUser)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_scores();
  inline void clear_has_scores();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_playerimagehtid();
  inline void clear_has_playerimagehtid();
  inline void set_has_playerimageframetid();
  inline void clear_has_playerimageframetid();
  inline void set_has_guildname();
  inline void clear_has_guildname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* uname_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 scores_;
  ::google::protobuf::uint32 htid_;
  ::std::string* serverid_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::uint32 playerimagehtid_;
  ::std::string* guildname_;
  ::google::protobuf::uint32 playerimageframetid_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderUser* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderUserRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderUserRsp : public ::google::protobuf::Message {
 public:
  TArenaHighOrderUserRsp();
  virtual ~TArenaHighOrderUserRsp();

  TArenaHighOrderUserRsp(const TArenaHighOrderUserRsp& from);

  inline TArenaHighOrderUserRsp& operator=(const TArenaHighOrderUserRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderUserRsp& default_instance();

  void Swap(TArenaHighOrderUserRsp* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderUserRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderUserRsp& from);
  void MergeFrom(const TArenaHighOrderUserRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TArenaHighOrderUser EnemyArr = 1;
  inline int enemyarr_size() const;
  inline void clear_enemyarr();
  static const int kEnemyArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUserRsp</name>
  	<Function>
  		<name>enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>enemyarr_size</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHighOrderUser& enemyarr(int index) const;
  inline ::pb::TArenaHighOrderUser* mutable_enemyarr(int index);
  inline ::pb::TArenaHighOrderUser* add_enemyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderUser >&
      enemyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderUser >*
      mutable_enemyarr();

  // optional uint64 RefreshTime = 2;
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUserRsp</name>
  	<Function>
  		<name>refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::uint64 value);

  // optional uint32 ExtraAtkNum = 3;
  inline bool has_extraatknum() const;
  inline void clear_extraatknum();
  static const int kExtraAtkNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUserRsp</name>
  	<Function>
  		<name>extraatknum</name>
  		<replaceName>ExtraAtkNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_extraatknum</name>
  		<replaceName>ExtraAtkNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_extraatknum</name>
  		<replaceName>ExtraAtkNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 extraatknum() const;
  inline void set_extraatknum(::google::protobuf::uint32 value);

  // optional uint32 BuyNum = 4;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUserRsp</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // optional uint32 MyScores = 5;
  inline bool has_myscores() const;
  inline void clear_myscores();
  static const int kMyScoresFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUserRsp</name>
  	<Function>
  		<name>myscores</name>
  		<replaceName>MyScores</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myscores</name>
  		<replaceName>MyScores</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myscores</name>
  		<replaceName>MyScores</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 myscores() const;
  inline void set_myscores(::google::protobuf::uint32 value);

  // optional uint64 MyFightForce = 6;
  inline bool has_myfightforce() const;
  inline void clear_myfightforce();
  static const int kMyFightForceFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUserRsp</name>
  	<Function>
  		<name>myfightforce</name>
  		<replaceName>MyFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myfightforce</name>
  		<replaceName>MyFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myfightforce</name>
  		<replaceName>MyFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 myfightforce() const;
  inline void set_myfightforce(::google::protobuf::uint64 value);

  // optional bool HasNewReport = 7;
  inline bool has_hasnewreport() const;
  inline void clear_hasnewreport();
  static const int kHasNewReportFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUserRsp</name>
  	<Function>
  		<name>hasnewreport</name>
  		<replaceName>HasNewReport</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hasnewreport</name>
  		<replaceName>HasNewReport</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hasnewreport</name>
  		<replaceName>HasNewReport</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool hasnewreport() const;
  inline void set_hasnewreport(bool value);

  // optional uint64 ResetTime = 8;
  inline bool has_resettime() const;
  inline void clear_resettime();
  static const int kResetTimeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUserRsp</name>
  	<Function>
  		<name>resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 resettime() const;
  inline void set_resettime(::google::protobuf::uint64 value);

  // optional uint32 MaxScores = 9;
  inline bool has_maxscores() const;
  inline void clear_maxscores();
  static const int kMaxScoresFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUserRsp</name>
  	<Function>
  		<name>maxscores</name>
  		<replaceName>MaxScores</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxscores</name>
  		<replaceName>MaxScores</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxscores</name>
  		<replaceName>MaxScores</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxscores() const;
  inline void set_maxscores(::google::protobuf::uint32 value);

  // optional uint64 EndTime = 10;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUserRsp</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // repeated uint32 ReceiveTidArr = 11;
  inline int receivetidarr_size() const;
  inline void clear_receivetidarr();
  static const int kReceiveTidArrFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUserRsp</name>
  	<Function>
  		<name>receivetidarr</name>
  		<replaceName>ReceiveTidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_receivetidarr</name>
  		<replaceName>ReceiveTidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_receivetidarr</name>
  		<replaceName>ReceiveTidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receivetidarr</name>
  		<replaceName>ReceiveTidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>receivetidarr_size</name>
  		<replaceName>ReceiveTidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 receivetidarr(int index) const;
  inline void set_receivetidarr(int index, ::google::protobuf::uint32 value);
  inline void add_receivetidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      receivetidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_receivetidarr();

  // optional int32 MyRank = 12;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUserRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // optional string ServerId = 13;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUserRsp</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional bool HasAtk = 14;
  inline bool has_hasatk() const;
  inline void clear_hasatk();
  static const int kHasAtkFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUserRsp</name>
  	<Function>
  		<name>hasatk</name>
  		<replaceName>HasAtk</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hasatk</name>
  		<replaceName>HasAtk</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hasatk</name>
  		<replaceName>HasAtk</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool hasatk() const;
  inline void set_hasatk(bool value);

  // optional uint64 BeginTime = 15;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderUserRsp</name>
  	<Function>
  		<name>begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 begintime() const;
  inline void set_begintime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderUserRsp)
 private:
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();
  inline void set_has_extraatknum();
  inline void clear_has_extraatknum();
  inline void set_has_buynum();
  inline void clear_has_buynum();
  inline void set_has_myscores();
  inline void clear_has_myscores();
  inline void set_has_myfightforce();
  inline void clear_has_myfightforce();
  inline void set_has_hasnewreport();
  inline void clear_has_hasnewreport();
  inline void set_has_resettime();
  inline void clear_has_resettime();
  inline void set_has_maxscores();
  inline void clear_has_maxscores();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_myrank();
  inline void clear_has_myrank();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_hasatk();
  inline void clear_has_hasatk();
  inline void set_has_begintime();
  inline void clear_has_begintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderUser > enemyarr_;
  ::google::protobuf::uint64 refreshtime_;
  ::google::protobuf::uint32 extraatknum_;
  ::google::protobuf::uint32 buynum_;
  ::google::protobuf::uint64 myfightforce_;
  ::google::protobuf::uint32 myscores_;
  ::google::protobuf::uint32 maxscores_;
  ::google::protobuf::uint64 resettime_;
  ::google::protobuf::uint64 endtime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > receivetidarr_;
  bool hasnewreport_;
  bool hasatk_;
  ::google::protobuf::int32 myrank_;
  ::std::string* serverid_;
  ::google::protobuf::uint64 begintime_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderUserRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderRefreshEnemyListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderRefreshEnemyListRsp : public ::google::protobuf::Message {
 public:
  TArenaHighOrderRefreshEnemyListRsp();
  virtual ~TArenaHighOrderRefreshEnemyListRsp();

  TArenaHighOrderRefreshEnemyListRsp(const TArenaHighOrderRefreshEnemyListRsp& from);

  inline TArenaHighOrderRefreshEnemyListRsp& operator=(const TArenaHighOrderRefreshEnemyListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderRefreshEnemyListRsp& default_instance();

  void Swap(TArenaHighOrderRefreshEnemyListRsp* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderRefreshEnemyListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderRefreshEnemyListRsp& from);
  void MergeFrom(const TArenaHighOrderRefreshEnemyListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TArenaHighOrderUser EnemyArr = 1;
  inline int enemyarr_size() const;
  inline void clear_enemyarr();
  static const int kEnemyArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRefreshEnemyListRsp</name>
  	<Function>
  		<name>enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>enemyarr_size</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHighOrderUser& enemyarr(int index) const;
  inline ::pb::TArenaHighOrderUser* mutable_enemyarr(int index);
  inline ::pb::TArenaHighOrderUser* add_enemyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderUser >&
      enemyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderUser >*
      mutable_enemyarr();

  // optional uint64 RefreshTime = 2;
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRefreshEnemyListRsp</name>
  	<Function>
  		<name>refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderRefreshEnemyListRsp)
 private:
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderUser > enemyarr_;
  ::google::protobuf::uint64 refreshtime_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderRefreshEnemyListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderBattlePos</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderBattlePos : public ::google::protobuf::Message {
 public:
  TArenaHighOrderBattlePos();
  virtual ~TArenaHighOrderBattlePos();

  TArenaHighOrderBattlePos(const TArenaHighOrderBattlePos& from);

  inline TArenaHighOrderBattlePos& operator=(const TArenaHighOrderBattlePos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderBattlePos& default_instance();

  void Swap(TArenaHighOrderBattlePos* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderBattlePos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderBattlePos& from);
  void MergeFrom(const TArenaHighOrderBattlePos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderBattlePos</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderBattlePos</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderBattlePos)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 pos_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderBattlePos* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderFormationInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderFormationInfo : public ::google::protobuf::Message {
 public:
  TArenaHighOrderFormationInfo();
  virtual ~TArenaHighOrderFormationInfo();

  TArenaHighOrderFormationInfo(const TArenaHighOrderFormationInfo& from);

  inline TArenaHighOrderFormationInfo& operator=(const TArenaHighOrderFormationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderFormationInfo& default_instance();

  void Swap(TArenaHighOrderFormationInfo* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderFormationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderFormationInfo& from);
  void MergeFrom(const TArenaHighOrderFormationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FormationId = 1;
  inline bool has_formationid() const;
  inline void clear_formationid();
  static const int kFormationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderFormationInfo</name>
  	<Function>
  		<name>formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 formationid() const;
  inline void set_formationid(::google::protobuf::uint32 value);

  // repeated .pb.TArenaHighOrderBattlePos BattleArr = 2;
  inline int battlearr_size() const;
  inline void clear_battlearr();
  static const int kBattleArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderFormationInfo</name>
  	<Function>
  		<name>battlearr</name>
  		<replaceName>BattleArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_battlearr</name>
  		<replaceName>BattleArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_battlearr</name>
  		<replaceName>BattleArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlearr</name>
  		<replaceName>BattleArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>battlearr_size</name>
  		<replaceName>BattleArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHighOrderBattlePos& battlearr(int index) const;
  inline ::pb::TArenaHighOrderBattlePos* mutable_battlearr(int index);
  inline ::pb::TArenaHighOrderBattlePos* add_battlearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderBattlePos >&
      battlearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderBattlePos >*
      mutable_battlearr();

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderFormationInfo)
 private:
  inline void set_has_formationid();
  inline void clear_has_formationid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderBattlePos > battlearr_;
  ::google::protobuf::uint32 formationid_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderFormationInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderGetMyFormationRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderGetMyFormationRsp : public ::google::protobuf::Message {
 public:
  TArenaHighOrderGetMyFormationRsp();
  virtual ~TArenaHighOrderGetMyFormationRsp();

  TArenaHighOrderGetMyFormationRsp(const TArenaHighOrderGetMyFormationRsp& from);

  inline TArenaHighOrderGetMyFormationRsp& operator=(const TArenaHighOrderGetMyFormationRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderGetMyFormationRsp& default_instance();

  void Swap(TArenaHighOrderGetMyFormationRsp* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderGetMyFormationRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderGetMyFormationRsp& from);
  void MergeFrom(const TArenaHighOrderGetMyFormationRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TArenaHighOrderFormationInfo FormationArr = 1;
  inline int formationarr_size() const;
  inline void clear_formationarr();
  static const int kFormationArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetMyFormationRsp</name>
  	<Function>
  		<name>formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>formationarr_size</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHighOrderFormationInfo& formationarr(int index) const;
  inline ::pb::TArenaHighOrderFormationInfo* mutable_formationarr(int index);
  inline ::pb::TArenaHighOrderFormationInfo* add_formationarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderFormationInfo >&
      formationarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderFormationInfo >*
      mutable_formationarr();

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderGetMyFormationRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderFormationInfo > formationarr_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderGetMyFormationRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderSetFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderSetFormationReq : public ::google::protobuf::Message {
 public:
  TArenaHighOrderSetFormationReq();
  virtual ~TArenaHighOrderSetFormationReq();

  TArenaHighOrderSetFormationReq(const TArenaHighOrderSetFormationReq& from);

  inline TArenaHighOrderSetFormationReq& operator=(const TArenaHighOrderSetFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderSetFormationReq& default_instance();

  void Swap(TArenaHighOrderSetFormationReq* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderSetFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderSetFormationReq& from);
  void MergeFrom(const TArenaHighOrderSetFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TArenaHighOrderFormationInfo FormationArr = 1;
  inline int formationarr_size() const;
  inline void clear_formationarr();
  static const int kFormationArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderSetFormationReq</name>
  	<Function>
  		<name>formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>formationarr_size</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHighOrderFormationInfo& formationarr(int index) const;
  inline ::pb::TArenaHighOrderFormationInfo* mutable_formationarr(int index);
  inline ::pb::TArenaHighOrderFormationInfo* add_formationarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderFormationInfo >&
      formationarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderFormationInfo >*
      mutable_formationarr();

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderSetFormationReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderFormationInfo > formationarr_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderSetFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderExchangeFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderExchangeFormationReq : public ::google::protobuf::Message {
 public:
  TArenaHighOrderExchangeFormationReq();
  virtual ~TArenaHighOrderExchangeFormationReq();

  TArenaHighOrderExchangeFormationReq(const TArenaHighOrderExchangeFormationReq& from);

  inline TArenaHighOrderExchangeFormationReq& operator=(const TArenaHighOrderExchangeFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderExchangeFormationReq& default_instance();

  void Swap(TArenaHighOrderExchangeFormationReq* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderExchangeFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderExchangeFormationReq& from);
  void MergeFrom(const TArenaHighOrderExchangeFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FormationId = 1;
  inline bool has_formationid() const;
  inline void clear_formationid();
  static const int kFormationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderExchangeFormationReq</name>
  	<Function>
  		<name>formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 formationid() const;
  inline void set_formationid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderExchangeFormationReq)
 private:
  inline void set_has_formationid();
  inline void clear_has_formationid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 formationid_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderExchangeFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderEnemyFormation</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderEnemyFormation : public ::google::protobuf::Message {
 public:
  TArenaHighOrderEnemyFormation();
  virtual ~TArenaHighOrderEnemyFormation();

  TArenaHighOrderEnemyFormation(const TArenaHighOrderEnemyFormation& from);

  inline TArenaHighOrderEnemyFormation& operator=(const TArenaHighOrderEnemyFormation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderEnemyFormation& default_instance();

  void Swap(TArenaHighOrderEnemyFormation* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderEnemyFormation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderEnemyFormation& from);
  void MergeFrom(const TArenaHighOrderEnemyFormation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FormationId = 1;
  inline bool has_formationid() const;
  inline void clear_formationid();
  static const int kFormationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderEnemyFormation</name>
  	<Function>
  		<name>formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 formationid() const;
  inline void set_formationid(::google::protobuf::uint32 value);

  // repeated .pb.TUnitInfo UnitArr = 2;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderEnemyFormation</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitInfo& unitarr(int index) const;
  inline ::pb::TUnitInfo* mutable_unitarr(int index);
  inline ::pb::TUnitInfo* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >*
      mutable_unitarr();

  // optional uint64 FightForce = 3;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderEnemyFormation</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderEnemyFormation)
 private:
  inline void set_has_formationid();
  inline void clear_has_formationid();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo > unitarr_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 formationid_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderEnemyFormation* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderGetEnemyFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderGetEnemyFormationReq : public ::google::protobuf::Message {
 public:
  TArenaHighOrderGetEnemyFormationReq();
  virtual ~TArenaHighOrderGetEnemyFormationReq();

  TArenaHighOrderGetEnemyFormationReq(const TArenaHighOrderGetEnemyFormationReq& from);

  inline TArenaHighOrderGetEnemyFormationReq& operator=(const TArenaHighOrderGetEnemyFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderGetEnemyFormationReq& default_instance();

  void Swap(TArenaHighOrderGetEnemyFormationReq* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderGetEnemyFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderGetEnemyFormationReq& from);
  void MergeFrom(const TArenaHighOrderGetEnemyFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 EnemyUid = 1;
  inline bool has_enemyuid() const;
  inline void clear_enemyuid();
  static const int kEnemyUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetEnemyFormationReq</name>
  	<Function>
  		<name>enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 enemyuid() const;
  inline void set_enemyuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderGetEnemyFormationReq)
 private:
  inline void set_has_enemyuid();
  inline void clear_has_enemyuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 enemyuid_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderGetEnemyFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderGetEnemyFormationRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderGetEnemyFormationRsp : public ::google::protobuf::Message {
 public:
  TArenaHighOrderGetEnemyFormationRsp();
  virtual ~TArenaHighOrderGetEnemyFormationRsp();

  TArenaHighOrderGetEnemyFormationRsp(const TArenaHighOrderGetEnemyFormationRsp& from);

  inline TArenaHighOrderGetEnemyFormationRsp& operator=(const TArenaHighOrderGetEnemyFormationRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderGetEnemyFormationRsp& default_instance();

  void Swap(TArenaHighOrderGetEnemyFormationRsp* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderGetEnemyFormationRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderGetEnemyFormationRsp& from);
  void MergeFrom(const TArenaHighOrderGetEnemyFormationRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TArenaHighOrderEnemyFormation FormationArr = 1;
  inline int formationarr_size() const;
  inline void clear_formationarr();
  static const int kFormationArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetEnemyFormationRsp</name>
  	<Function>
  		<name>formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>formationarr_size</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHighOrderEnemyFormation& formationarr(int index) const;
  inline ::pb::TArenaHighOrderEnemyFormation* mutable_formationarr(int index);
  inline ::pb::TArenaHighOrderEnemyFormation* add_formationarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderEnemyFormation >&
      formationarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderEnemyFormation >*
      mutable_formationarr();

  // repeated .pb.TRankSingle RankArr = 2;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetEnemyFormationRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRankSingle& rankarr(int index) const;
  inline ::pb::TRankSingle* mutable_rankarr(int index);
  inline ::pb::TRankSingle* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >*
      mutable_rankarr();

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderGetEnemyFormationRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderEnemyFormation > formationarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle > rankarr_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderGetEnemyFormationRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnitViewInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnitViewInfo : public ::google::protobuf::Message {
 public:
  TUnitViewInfo();
  virtual ~TUnitViewInfo();

  TUnitViewInfo(const TUnitViewInfo& from);

  inline TUnitViewInfo& operator=(const TUnitViewInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnitViewInfo& default_instance();

  void Swap(TUnitViewInfo* other);

  // implements Message ----------------------------------------------

  TUnitViewInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnitViewInfo& from);
  void MergeFrom(const TUnitViewInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnitViewInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // required uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUnitViewInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // required uint32 Level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUnitViewInfo</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 Star = 4;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUnitViewInfo</name>
  	<Function>
  		<name>star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint64 CurHp = 5;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHpFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TUnitViewInfo</name>
  	<Function>
  		<name>curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 curhp() const;
  inline void set_curhp(::google::protobuf::uint64 value);

  // optional uint64 MaxHp = 6;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TUnitViewInfo</name>
  	<Function>
  		<name>maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint64 value);

  // optional uint64 DamageOut = 7;
  inline bool has_damageout() const;
  inline void clear_damageout();
  static const int kDamageOutFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TUnitViewInfo</name>
  	<Function>
  		<name>damageout</name>
  		<replaceName>DamageOut</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damageout</name>
  		<replaceName>DamageOut</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damageout</name>
  		<replaceName>DamageOut</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 damageout() const;
  inline void set_damageout(::google::protobuf::uint64 value);

  // optional uint64 DamageIn = 8;
  inline bool has_damagein() const;
  inline void clear_damagein();
  static const int kDamageInFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TUnitViewInfo</name>
  	<Function>
  		<name>damagein</name>
  		<replaceName>DamageIn</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damagein</name>
  		<replaceName>DamageIn</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damagein</name>
  		<replaceName>DamageIn</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 damagein() const;
  inline void set_damagein(::google::protobuf::uint64 value);

  // optional uint32 Htid = 9;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TUnitViewInfo</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional uint64 HealOut = 10;
  inline bool has_healout() const;
  inline void clear_healout();
  static const int kHealOutFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TUnitViewInfo</name>
  	<Function>
  		<name>healout</name>
  		<replaceName>HealOut</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_healout</name>
  		<replaceName>HealOut</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_healout</name>
  		<replaceName>HealOut</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 healout() const;
  inline void set_healout(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TUnitViewInfo)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_damageout();
  inline void clear_has_damageout();
  inline void set_has_damagein();
  inline void clear_has_damagein();
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_healout();
  inline void clear_has_healout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint64 curhp_;
  ::google::protobuf::uint64 maxhp_;
  ::google::protobuf::uint64 damageout_;
  ::google::protobuf::uint64 damagein_;
  ::google::protobuf::uint64 healout_;
  ::google::protobuf::uint32 htid_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TUnitViewInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArmyViewInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArmyViewInfo : public ::google::protobuf::Message {
 public:
  TArmyViewInfo();
  virtual ~TArmyViewInfo();

  TArmyViewInfo(const TArmyViewInfo& from);

  inline TArmyViewInfo& operator=(const TArmyViewInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArmyViewInfo& default_instance();

  void Swap(TArmyViewInfo* other);

  // implements Message ----------------------------------------------

  TArmyViewInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArmyViewInfo& from);
  void MergeFrom(const TArmyViewInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUnitViewInfo UnitArr = 1;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArmyViewInfo</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitViewInfo& unitarr(int index) const;
  inline ::pb::TUnitViewInfo* mutable_unitarr(int index);
  inline ::pb::TUnitViewInfo* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitViewInfo >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitViewInfo >*
      mutable_unitarr();

  // @@protoc_insertion_point(class_scope:pb.TArmyViewInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnitViewInfo > unitarr_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArmyViewInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderFormationRecord</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderFormationRecord : public ::google::protobuf::Message {
 public:
  TArenaHighOrderFormationRecord();
  virtual ~TArenaHighOrderFormationRecord();

  TArenaHighOrderFormationRecord(const TArenaHighOrderFormationRecord& from);

  inline TArenaHighOrderFormationRecord& operator=(const TArenaHighOrderFormationRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderFormationRecord& default_instance();

  void Swap(TArenaHighOrderFormationRecord* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderFormationRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderFormationRecord& from);
  void MergeFrom(const TArenaHighOrderFormationRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FormationId = 1;
  inline bool has_formationid() const;
  inline void clear_formationid();
  static const int kFormationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderFormationRecord</name>
  	<Function>
  		<name>formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 formationid() const;
  inline void set_formationid(::google::protobuf::uint32 value);

  // optional uint64 RecordId = 2;
  inline bool has_recordid() const;
  inline void clear_recordid();
  static const int kRecordIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderFormationRecord</name>
  	<Function>
  		<name>recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordid() const;
  inline void set_recordid(::google::protobuf::uint64 value);

  // optional bool IsWin = 3;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderFormationRecord</name>
  	<Function>
  		<name>iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool iswin() const;
  inline void set_iswin(bool value);

  // repeated .pb.TArmyViewInfo Army1Arr = 4;
  inline int army1arr_size() const;
  inline void clear_army1arr();
  static const int kArmy1ArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderFormationRecord</name>
  	<Function>
  		<name>army1arr</name>
  		<replaceName>Army1Arr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_army1arr</name>
  		<replaceName>Army1Arr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_army1arr</name>
  		<replaceName>Army1Arr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_army1arr</name>
  		<replaceName>Army1Arr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>army1arr_size</name>
  		<replaceName>Army1Arr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyViewInfo& army1arr(int index) const;
  inline ::pb::TArmyViewInfo* mutable_army1arr(int index);
  inline ::pb::TArmyViewInfo* add_army1arr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo >&
      army1arr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo >*
      mutable_army1arr();

  // repeated .pb.TArmyViewInfo Army2Arr = 5;
  inline int army2arr_size() const;
  inline void clear_army2arr();
  static const int kArmy2ArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderFormationRecord</name>
  	<Function>
  		<name>army2arr</name>
  		<replaceName>Army2Arr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_army2arr</name>
  		<replaceName>Army2Arr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_army2arr</name>
  		<replaceName>Army2Arr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_army2arr</name>
  		<replaceName>Army2Arr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>army2arr_size</name>
  		<replaceName>Army2Arr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyViewInfo& army2arr(int index) const;
  inline ::pb::TArmyViewInfo* mutable_army2arr(int index);
  inline ::pb::TArmyViewInfo* add_army2arr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo >&
      army2arr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo >*
      mutable_army2arr();

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderFormationRecord)
 private:
  inline void set_has_formationid();
  inline void clear_has_formationid();
  inline void set_has_recordid();
  inline void clear_has_recordid();
  inline void set_has_iswin();
  inline void clear_has_iswin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 recordid_;
  ::google::protobuf::uint32 formationid_;
  bool iswin_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo > army1arr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo > army2arr_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderFormationRecord* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderRecordInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderRecordInfo : public ::google::protobuf::Message {
 public:
  TArenaHighOrderRecordInfo();
  virtual ~TArenaHighOrderRecordInfo();

  TArenaHighOrderRecordInfo(const TArenaHighOrderRecordInfo& from);

  inline TArenaHighOrderRecordInfo& operator=(const TArenaHighOrderRecordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderRecordInfo& default_instance();

  void Swap(TArenaHighOrderRecordInfo* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderRecordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderRecordInfo& from);
  void MergeFrom(const TArenaHighOrderRecordInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo AttackUserInfo = 1;
  inline bool has_attackuserinfo() const;
  inline void clear_attackuserinfo();
  static const int kAttackUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRecordInfo</name>
  	<Function>
  		<name>attackuserinfo</name>
  		<replaceName>AttackUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attackuserinfo</name>
  		<replaceName>AttackUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_attackuserinfo</name>
  		<replaceName>AttackUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackuserinfo</name>
  		<replaceName>AttackUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& attackuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_attackuserinfo();
  inline ::pb::TUserSimpleInfo* release_attackuserinfo();
  inline void set_allocated_attackuserinfo(::pb::TUserSimpleInfo* attackuserinfo);

  // optional .pb.TUserSimpleInfo DefendUserInfo = 2;
  inline bool has_defenduserinfo() const;
  inline void clear_defenduserinfo();
  static const int kDefendUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRecordInfo</name>
  	<Function>
  		<name>defenduserinfo</name>
  		<replaceName>DefendUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defenduserinfo</name>
  		<replaceName>DefendUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_defenduserinfo</name>
  		<replaceName>DefendUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defenduserinfo</name>
  		<replaceName>DefendUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& defenduserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_defenduserinfo();
  inline ::pb::TUserSimpleInfo* release_defenduserinfo();
  inline void set_allocated_defenduserinfo(::pb::TUserSimpleInfo* defenduserinfo);

  // optional uint32 AttackPosBofore = 3;
  inline bool has_attackposbofore() const;
  inline void clear_attackposbofore();
  static const int kAttackPosBoforeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRecordInfo</name>
  	<Function>
  		<name>attackposbofore</name>
  		<replaceName>AttackPosBofore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attackposbofore</name>
  		<replaceName>AttackPosBofore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackposbofore</name>
  		<replaceName>AttackPosBofore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attackposbofore() const;
  inline void set_attackposbofore(::google::protobuf::uint32 value);

  // optional uint32 AttackPosAfter = 4;
  inline bool has_attackposafter() const;
  inline void clear_attackposafter();
  static const int kAttackPosAfterFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRecordInfo</name>
  	<Function>
  		<name>attackposafter</name>
  		<replaceName>AttackPosAfter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attackposafter</name>
  		<replaceName>AttackPosAfter</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackposafter</name>
  		<replaceName>AttackPosAfter</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attackposafter() const;
  inline void set_attackposafter(::google::protobuf::uint32 value);

  // optional uint32 AttackScoresBefore = 5;
  inline bool has_attackscoresbefore() const;
  inline void clear_attackscoresbefore();
  static const int kAttackScoresBeforeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRecordInfo</name>
  	<Function>
  		<name>attackscoresbefore</name>
  		<replaceName>AttackScoresBefore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attackscoresbefore</name>
  		<replaceName>AttackScoresBefore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackscoresbefore</name>
  		<replaceName>AttackScoresBefore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attackscoresbefore() const;
  inline void set_attackscoresbefore(::google::protobuf::uint32 value);

  // optional uint32 AttackScoresAfter = 6;
  inline bool has_attackscoresafter() const;
  inline void clear_attackscoresafter();
  static const int kAttackScoresAfterFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRecordInfo</name>
  	<Function>
  		<name>attackscoresafter</name>
  		<replaceName>AttackScoresAfter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attackscoresafter</name>
  		<replaceName>AttackScoresAfter</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackscoresafter</name>
  		<replaceName>AttackScoresAfter</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attackscoresafter() const;
  inline void set_attackscoresafter(::google::protobuf::uint32 value);

  // optional uint32 DefendPosBefore = 7;
  inline bool has_defendposbefore() const;
  inline void clear_defendposbefore();
  static const int kDefendPosBeforeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRecordInfo</name>
  	<Function>
  		<name>defendposbefore</name>
  		<replaceName>DefendPosBefore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defendposbefore</name>
  		<replaceName>DefendPosBefore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defendposbefore</name>
  		<replaceName>DefendPosBefore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 defendposbefore() const;
  inline void set_defendposbefore(::google::protobuf::uint32 value);

  // optional uint32 DefendPosAfter = 8;
  inline bool has_defendposafter() const;
  inline void clear_defendposafter();
  static const int kDefendPosAfterFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRecordInfo</name>
  	<Function>
  		<name>defendposafter</name>
  		<replaceName>DefendPosAfter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defendposafter</name>
  		<replaceName>DefendPosAfter</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defendposafter</name>
  		<replaceName>DefendPosAfter</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 defendposafter() const;
  inline void set_defendposafter(::google::protobuf::uint32 value);

  // optional uint32 DefendScoresBefore = 9;
  inline bool has_defendscoresbefore() const;
  inline void clear_defendscoresbefore();
  static const int kDefendScoresBeforeFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRecordInfo</name>
  	<Function>
  		<name>defendscoresbefore</name>
  		<replaceName>DefendScoresBefore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defendscoresbefore</name>
  		<replaceName>DefendScoresBefore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defendscoresbefore</name>
  		<replaceName>DefendScoresBefore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 defendscoresbefore() const;
  inline void set_defendscoresbefore(::google::protobuf::uint32 value);

  // optional uint32 DefendScoresAfter = 10;
  inline bool has_defendscoresafter() const;
  inline void clear_defendscoresafter();
  static const int kDefendScoresAfterFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRecordInfo</name>
  	<Function>
  		<name>defendscoresafter</name>
  		<replaceName>DefendScoresAfter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defendscoresafter</name>
  		<replaceName>DefendScoresAfter</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defendscoresafter</name>
  		<replaceName>DefendScoresAfter</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 defendscoresafter() const;
  inline void set_defendscoresafter(::google::protobuf::uint32 value);

  // repeated .pb.TArenaHighOrderFormationRecord RecordArr = 11;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRecordInfo</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHighOrderFormationRecord& recordarr(int index) const;
  inline ::pb::TArenaHighOrderFormationRecord* mutable_recordarr(int index);
  inline ::pb::TArenaHighOrderFormationRecord* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderFormationRecord >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderFormationRecord >*
      mutable_recordarr();

  // optional uint64 RecordTime = 12;
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordTimeFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRecordInfo</name>
  	<Function>
  		<name>recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordtime() const;
  inline void set_recordtime(::google::protobuf::uint64 value);

  // optional uint64 ReadTime = 13;
  inline bool has_readtime() const;
  inline void clear_readtime();
  static const int kReadTimeFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRecordInfo</name>
  	<Function>
  		<name>readtime</name>
  		<replaceName>ReadTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_readtime</name>
  		<replaceName>ReadTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_readtime</name>
  		<replaceName>ReadTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 readtime() const;
  inline void set_readtime(::google::protobuf::uint64 value);

  // optional string AtkServerId = 14;
  inline bool has_atkserverid() const;
  inline void clear_atkserverid();
  static const int kAtkServerIdFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRecordInfo</name>
  	<Function>
  		<name>atkserverid</name>
  		<replaceName>AtkServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkserverid</name>
  		<replaceName>AtkServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkserverid</name>
  		<replaceName>AtkServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& atkserverid() const;
  inline void set_atkserverid(const ::std::string& value);
  inline void set_atkserverid(const char* value);
  inline void set_atkserverid(const char* value, size_t size);
  inline ::std::string* mutable_atkserverid();
  inline ::std::string* release_atkserverid();
  inline void set_allocated_atkserverid(::std::string* atkserverid);

  // optional string DefServerId = 15;
  inline bool has_defserverid() const;
  inline void clear_defserverid();
  static const int kDefServerIdFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRecordInfo</name>
  	<Function>
  		<name>defserverid</name>
  		<replaceName>DefServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defserverid</name>
  		<replaceName>DefServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defserverid</name>
  		<replaceName>DefServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& defserverid() const;
  inline void set_defserverid(const ::std::string& value);
  inline void set_defserverid(const char* value);
  inline void set_defserverid(const char* value, size_t size);
  inline ::std::string* mutable_defserverid();
  inline ::std::string* release_defserverid();
  inline void set_allocated_defserverid(::std::string* defserverid);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderRecordInfo)
 private:
  inline void set_has_attackuserinfo();
  inline void clear_has_attackuserinfo();
  inline void set_has_defenduserinfo();
  inline void clear_has_defenduserinfo();
  inline void set_has_attackposbofore();
  inline void clear_has_attackposbofore();
  inline void set_has_attackposafter();
  inline void clear_has_attackposafter();
  inline void set_has_attackscoresbefore();
  inline void clear_has_attackscoresbefore();
  inline void set_has_attackscoresafter();
  inline void clear_has_attackscoresafter();
  inline void set_has_defendposbefore();
  inline void clear_has_defendposbefore();
  inline void set_has_defendposafter();
  inline void clear_has_defendposafter();
  inline void set_has_defendscoresbefore();
  inline void clear_has_defendscoresbefore();
  inline void set_has_defendscoresafter();
  inline void clear_has_defendscoresafter();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();
  inline void set_has_readtime();
  inline void clear_has_readtime();
  inline void set_has_atkserverid();
  inline void clear_has_atkserverid();
  inline void set_has_defserverid();
  inline void clear_has_defserverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* attackuserinfo_;
  ::pb::TUserSimpleInfo* defenduserinfo_;
  ::google::protobuf::uint32 attackposbofore_;
  ::google::protobuf::uint32 attackposafter_;
  ::google::protobuf::uint32 attackscoresbefore_;
  ::google::protobuf::uint32 attackscoresafter_;
  ::google::protobuf::uint32 defendposbefore_;
  ::google::protobuf::uint32 defendposafter_;
  ::google::protobuf::uint32 defendscoresbefore_;
  ::google::protobuf::uint32 defendscoresafter_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderFormationRecord > recordarr_;
  ::google::protobuf::uint64 recordtime_;
  ::google::protobuf::uint64 readtime_;
  ::std::string* atkserverid_;
  ::std::string* defserverid_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderRecordInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderGetBattleRecordReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderGetBattleRecordReq : public ::google::protobuf::Message {
 public:
  TArenaHighOrderGetBattleRecordReq();
  virtual ~TArenaHighOrderGetBattleRecordReq();

  TArenaHighOrderGetBattleRecordReq(const TArenaHighOrderGetBattleRecordReq& from);

  inline TArenaHighOrderGetBattleRecordReq& operator=(const TArenaHighOrderGetBattleRecordReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderGetBattleRecordReq& default_instance();

  void Swap(TArenaHighOrderGetBattleRecordReq* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderGetBattleRecordReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderGetBattleRecordReq& from);
  void MergeFrom(const TArenaHighOrderGetBattleRecordReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetBattleRecordReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetBattleRecordReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderGetBattleRecordReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderGetBattleRecordReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderGetBattleRecordRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderGetBattleRecordRsp : public ::google::protobuf::Message {
 public:
  TArenaHighOrderGetBattleRecordRsp();
  virtual ~TArenaHighOrderGetBattleRecordRsp();

  TArenaHighOrderGetBattleRecordRsp(const TArenaHighOrderGetBattleRecordRsp& from);

  inline TArenaHighOrderGetBattleRecordRsp& operator=(const TArenaHighOrderGetBattleRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderGetBattleRecordRsp& default_instance();

  void Swap(TArenaHighOrderGetBattleRecordRsp* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderGetBattleRecordRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderGetBattleRecordRsp& from);
  void MergeFrom(const TArenaHighOrderGetBattleRecordRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TArenaHighOrderRecordInfo RecordArr = 1;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetBattleRecordRsp</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHighOrderRecordInfo& recordarr(int index) const;
  inline ::pb::TArenaHighOrderRecordInfo* mutable_recordarr(int index);
  inline ::pb::TArenaHighOrderRecordInfo* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderRecordInfo >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderRecordInfo >*
      mutable_recordarr();

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderGetBattleRecordRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderRecordInfo > recordarr_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderGetBattleRecordRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderRankInfo : public ::google::protobuf::Message {
 public:
  TArenaHighOrderRankInfo();
  virtual ~TArenaHighOrderRankInfo();

  TArenaHighOrderRankInfo(const TArenaHighOrderRankInfo& from);

  inline TArenaHighOrderRankInfo& operator=(const TArenaHighOrderRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderRankInfo& default_instance();

  void Swap(TArenaHighOrderRankInfo* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderRankInfo& from);
  void MergeFrom(const TArenaHighOrderRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRankInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 Position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRankInfo</name>
  	<Function>
  		<name>position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);

  // optional uint32 Scores = 3;
  inline bool has_scores() const;
  inline void clear_scores();
  static const int kScoresFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderRankInfo</name>
  	<Function>
  		<name>scores</name>
  		<replaceName>Scores</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scores</name>
  		<replaceName>Scores</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scores</name>
  		<replaceName>Scores</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scores() const;
  inline void set_scores(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderRankInfo)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_scores();
  inline void clear_has_scores();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint32 position_;
  ::google::protobuf::uint32 scores_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderGetRankListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderGetRankListReq : public ::google::protobuf::Message {
 public:
  TArenaHighOrderGetRankListReq();
  virtual ~TArenaHighOrderGetRankListReq();

  TArenaHighOrderGetRankListReq(const TArenaHighOrderGetRankListReq& from);

  inline TArenaHighOrderGetRankListReq& operator=(const TArenaHighOrderGetRankListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderGetRankListReq& default_instance();

  void Swap(TArenaHighOrderGetRankListReq* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderGetRankListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderGetRankListReq& from);
  void MergeFrom(const TArenaHighOrderGetRankListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetRankListReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetRankListReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderGetRankListReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderGetRankListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderGetRankListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderGetRankListRsp : public ::google::protobuf::Message {
 public:
  TArenaHighOrderGetRankListRsp();
  virtual ~TArenaHighOrderGetRankListRsp();

  TArenaHighOrderGetRankListRsp(const TArenaHighOrderGetRankListRsp& from);

  inline TArenaHighOrderGetRankListRsp& operator=(const TArenaHighOrderGetRankListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderGetRankListRsp& default_instance();

  void Swap(TArenaHighOrderGetRankListRsp* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderGetRankListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderGetRankListRsp& from);
  void MergeFrom(const TArenaHighOrderGetRankListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TArenaHighOrderRankInfo RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetRankListRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHighOrderRankInfo& rankarr(int index) const;
  inline ::pb::TArenaHighOrderRankInfo* mutable_rankarr(int index);
  inline ::pb::TArenaHighOrderRankInfo* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderRankInfo >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderRankInfo >*
      mutable_rankarr();

  // optional int32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetRankListRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // optional int32 MyScores = 3;
  inline bool has_myscores() const;
  inline void clear_myscores();
  static const int kMyScoresFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetRankListRsp</name>
  	<Function>
  		<name>myscores</name>
  		<replaceName>MyScores</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myscores</name>
  		<replaceName>MyScores</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myscores</name>
  		<replaceName>MyScores</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myscores() const;
  inline void set_myscores(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderGetRankListRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();
  inline void set_has_myscores();
  inline void clear_has_myscores();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderRankInfo > rankarr_;
  ::google::protobuf::int32 myrank_;
  ::google::protobuf::int32 myscores_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderGetRankListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderBattleReq : public ::google::protobuf::Message {
 public:
  TArenaHighOrderBattleReq();
  virtual ~TArenaHighOrderBattleReq();

  TArenaHighOrderBattleReq(const TArenaHighOrderBattleReq& from);

  inline TArenaHighOrderBattleReq& operator=(const TArenaHighOrderBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderBattleReq& default_instance();

  void Swap(TArenaHighOrderBattleReq* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderBattleReq& from);
  void MergeFrom(const TArenaHighOrderBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 EnemyUid = 1;
  inline bool has_enemyuid() const;
  inline void clear_enemyuid();
  static const int kEnemyUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderBattleReq</name>
  	<Function>
  		<name>enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 enemyuid() const;
  inline void set_enemyuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderBattleReq)
 private:
  inline void set_has_enemyuid();
  inline void clear_has_enemyuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 enemyuid_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderBattleRsp : public ::google::protobuf::Message {
 public:
  TArenaHighOrderBattleRsp();
  virtual ~TArenaHighOrderBattleRsp();

  TArenaHighOrderBattleRsp(const TArenaHighOrderBattleRsp& from);

  inline TArenaHighOrderBattleRsp& operator=(const TArenaHighOrderBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderBattleRsp& default_instance();

  void Swap(TArenaHighOrderBattleRsp* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderBattleRsp& from);
  void MergeFrom(const TArenaHighOrderBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TArenaHighOrderRecordInfo BattleRecordInfo = 1;
  inline bool has_battlerecordinfo() const;
  inline void clear_battlerecordinfo();
  static const int kBattleRecordInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderBattleRsp</name>
  	<Function>
  		<name>battlerecordinfo</name>
  		<replaceName>BattleRecordInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlerecordinfo</name>
  		<replaceName>BattleRecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlerecordinfo</name>
  		<replaceName>BattleRecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlerecordinfo</name>
  		<replaceName>BattleRecordInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHighOrderRecordInfo& battlerecordinfo() const;
  inline ::pb::TArenaHighOrderRecordInfo* mutable_battlerecordinfo();
  inline ::pb::TArenaHighOrderRecordInfo* release_battlerecordinfo();
  inline void set_allocated_battlerecordinfo(::pb::TArenaHighOrderRecordInfo* battlerecordinfo);

  // repeated .pb.TCommonReward DropArray = 2;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderBattleRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // optional uint32 ExtraAtkNum = 3;
  inline bool has_extraatknum() const;
  inline void clear_extraatknum();
  static const int kExtraAtkNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderBattleRsp</name>
  	<Function>
  		<name>extraatknum</name>
  		<replaceName>ExtraAtkNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_extraatknum</name>
  		<replaceName>ExtraAtkNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_extraatknum</name>
  		<replaceName>ExtraAtkNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 extraatknum() const;
  inline void set_extraatknum(::google::protobuf::uint32 value);

  // optional bytes FirstResultInfo = 4;
  inline bool has_firstresultinfo() const;
  inline void clear_firstresultinfo();
  static const int kFirstResultInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderBattleRsp</name>
  	<Function>
  		<name>firstresultinfo</name>
  		<replaceName>FirstResultInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_firstresultinfo</name>
  		<replaceName>FirstResultInfo</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_firstresultinfo</name>
  		<replaceName>FirstResultInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& firstresultinfo() const;
  inline void set_firstresultinfo(const ::std::string& value);
  inline void set_firstresultinfo(const char* value);
  inline void set_firstresultinfo(const void* value, size_t size);
  inline ::std::string* mutable_firstresultinfo();
  inline ::std::string* release_firstresultinfo();
  inline void set_allocated_firstresultinfo(::std::string* firstresultinfo);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderBattleRsp)
 private:
  inline void set_has_battlerecordinfo();
  inline void clear_has_battlerecordinfo();
  inline void set_has_extraatknum();
  inline void clear_has_extraatknum();
  inline void set_has_firstresultinfo();
  inline void clear_has_firstresultinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TArenaHighOrderRecordInfo* battlerecordinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  ::std::string* firstresultinfo_;
  ::google::protobuf::uint32 extraatknum_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderGetSimpleBattleReportReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderGetSimpleBattleReportReq : public ::google::protobuf::Message {
 public:
  TArenaHighOrderGetSimpleBattleReportReq();
  virtual ~TArenaHighOrderGetSimpleBattleReportReq();

  TArenaHighOrderGetSimpleBattleReportReq(const TArenaHighOrderGetSimpleBattleReportReq& from);

  inline TArenaHighOrderGetSimpleBattleReportReq& operator=(const TArenaHighOrderGetSimpleBattleReportReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderGetSimpleBattleReportReq& default_instance();

  void Swap(TArenaHighOrderGetSimpleBattleReportReq* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderGetSimpleBattleReportReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderGetSimpleBattleReportReq& from);
  void MergeFrom(const TArenaHighOrderGetSimpleBattleReportReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ServerId = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetSimpleBattleReportReq</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // repeated uint64 RidArr = 2;
  inline int ridarr_size() const;
  inline void clear_ridarr();
  static const int kRidArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetSimpleBattleReportReq</name>
  	<Function>
  		<name>ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ridarr_size</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 ridarr(int index) const;
  inline void set_ridarr(int index, ::google::protobuf::uint64 value);
  inline void add_ridarr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ridarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ridarr();

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderGetSimpleBattleReportReq)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* serverid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ridarr_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderGetSimpleBattleReportReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderBattleRecordSimple</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderBattleRecordSimple : public ::google::protobuf::Message {
 public:
  TArenaHighOrderBattleRecordSimple();
  virtual ~TArenaHighOrderBattleRecordSimple();

  TArenaHighOrderBattleRecordSimple(const TArenaHighOrderBattleRecordSimple& from);

  inline TArenaHighOrderBattleRecordSimple& operator=(const TArenaHighOrderBattleRecordSimple& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderBattleRecordSimple& default_instance();

  void Swap(TArenaHighOrderBattleRecordSimple* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderBattleRecordSimple* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderBattleRecordSimple& from);
  void MergeFrom(const TArenaHighOrderBattleRecordSimple& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TArmyViewInfo Army1Arr = 4;
  inline bool has_army1arr() const;
  inline void clear_army1arr();
  static const int kArmy1ArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderBattleRecordSimple</name>
  	<Function>
  		<name>army1arr</name>
  		<replaceName>Army1Arr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_army1arr</name>
  		<replaceName>Army1Arr</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_army1arr</name>
  		<replaceName>Army1Arr</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_army1arr</name>
  		<replaceName>Army1Arr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyViewInfo& army1arr() const;
  inline ::pb::TArmyViewInfo* mutable_army1arr();
  inline ::pb::TArmyViewInfo* release_army1arr();
  inline void set_allocated_army1arr(::pb::TArmyViewInfo* army1arr);

  // optional .pb.TArmyViewInfo Army2Arr = 5;
  inline bool has_army2arr() const;
  inline void clear_army2arr();
  static const int kArmy2ArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderBattleRecordSimple</name>
  	<Function>
  		<name>army2arr</name>
  		<replaceName>Army2Arr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_army2arr</name>
  		<replaceName>Army2Arr</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_army2arr</name>
  		<replaceName>Army2Arr</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_army2arr</name>
  		<replaceName>Army2Arr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyViewInfo& army2arr() const;
  inline ::pb::TArmyViewInfo* mutable_army2arr();
  inline ::pb::TArmyViewInfo* release_army2arr();
  inline void set_allocated_army2arr(::pb::TArmyViewInfo* army2arr);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderBattleRecordSimple)
 private:
  inline void set_has_army1arr();
  inline void clear_has_army1arr();
  inline void set_has_army2arr();
  inline void clear_has_army2arr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TArmyViewInfo* army1arr_;
  ::pb::TArmyViewInfo* army2arr_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderBattleRecordSimple* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderGetSimpleBattleReportRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderGetSimpleBattleReportRsp : public ::google::protobuf::Message {
 public:
  TArenaHighOrderGetSimpleBattleReportRsp();
  virtual ~TArenaHighOrderGetSimpleBattleReportRsp();

  TArenaHighOrderGetSimpleBattleReportRsp(const TArenaHighOrderGetSimpleBattleReportRsp& from);

  inline TArenaHighOrderGetSimpleBattleReportRsp& operator=(const TArenaHighOrderGetSimpleBattleReportRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderGetSimpleBattleReportRsp& default_instance();

  void Swap(TArenaHighOrderGetSimpleBattleReportRsp* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderGetSimpleBattleReportRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderGetSimpleBattleReportRsp& from);
  void MergeFrom(const TArenaHighOrderGetSimpleBattleReportRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TArenaHighOrderBattleRecordSimple RecordArr = 1;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetSimpleBattleReportRsp</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHighOrderBattleRecordSimple& recordarr(int index) const;
  inline ::pb::TArenaHighOrderBattleRecordSimple* mutable_recordarr(int index);
  inline ::pb::TArenaHighOrderBattleRecordSimple* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderBattleRecordSimple >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderBattleRecordSimple >*
      mutable_recordarr();

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderGetSimpleBattleReportRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderBattleRecordSimple > recordarr_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderGetSimpleBattleReportRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderBuyAtkNumReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderBuyAtkNumReq : public ::google::protobuf::Message {
 public:
  TArenaHighOrderBuyAtkNumReq();
  virtual ~TArenaHighOrderBuyAtkNumReq();

  TArenaHighOrderBuyAtkNumReq(const TArenaHighOrderBuyAtkNumReq& from);

  inline TArenaHighOrderBuyAtkNumReq& operator=(const TArenaHighOrderBuyAtkNumReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderBuyAtkNumReq& default_instance();

  void Swap(TArenaHighOrderBuyAtkNumReq* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderBuyAtkNumReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderBuyAtkNumReq& from);
  void MergeFrom(const TArenaHighOrderBuyAtkNumReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderBuyAtkNumReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderBuyAtkNumReq)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderBuyAtkNumReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderBuyAtkNumRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderBuyAtkNumRsp : public ::google::protobuf::Message {
 public:
  TArenaHighOrderBuyAtkNumRsp();
  virtual ~TArenaHighOrderBuyAtkNumRsp();

  TArenaHighOrderBuyAtkNumRsp(const TArenaHighOrderBuyAtkNumRsp& from);

  inline TArenaHighOrderBuyAtkNumRsp& operator=(const TArenaHighOrderBuyAtkNumRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderBuyAtkNumRsp& default_instance();

  void Swap(TArenaHighOrderBuyAtkNumRsp* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderBuyAtkNumRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderBuyAtkNumRsp& from);
  void MergeFrom(const TArenaHighOrderBuyAtkNumRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ExtraAtkNum = 1;
  inline bool has_extraatknum() const;
  inline void clear_extraatknum();
  static const int kExtraAtkNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderBuyAtkNumRsp</name>
  	<Function>
  		<name>extraatknum</name>
  		<replaceName>ExtraAtkNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_extraatknum</name>
  		<replaceName>ExtraAtkNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_extraatknum</name>
  		<replaceName>ExtraAtkNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 extraatknum() const;
  inline void set_extraatknum(::google::protobuf::uint32 value);

  // optional uint32 BuyNum = 2;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderBuyAtkNumRsp</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderBuyAtkNumRsp)
 private:
  inline void set_has_extraatknum();
  inline void clear_has_extraatknum();
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 extraatknum_;
  ::google::protobuf::uint32 buynum_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderBuyAtkNumRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderServerPush</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderServerPush : public ::google::protobuf::Message {
 public:
  TArenaHighOrderServerPush();
  virtual ~TArenaHighOrderServerPush();

  TArenaHighOrderServerPush(const TArenaHighOrderServerPush& from);

  inline TArenaHighOrderServerPush& operator=(const TArenaHighOrderServerPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderServerPush& default_instance();

  void Swap(TArenaHighOrderServerPush* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderServerPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderServerPush& from);
  void MergeFrom(const TArenaHighOrderServerPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TArenaHighOrderRecordInfo RecordInfo = 1;
  inline bool has_recordinfo() const;
  inline void clear_recordinfo();
  static const int kRecordInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderServerPush</name>
  	<Function>
  		<name>recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHighOrderRecordInfo& recordinfo() const;
  inline ::pb::TArenaHighOrderRecordInfo* mutable_recordinfo();
  inline ::pb::TArenaHighOrderRecordInfo* release_recordinfo();
  inline void set_allocated_recordinfo(::pb::TArenaHighOrderRecordInfo* recordinfo);

  // repeated .pb.TArenaHighOrderUser EnemyArr = 2;
  inline int enemyarr_size() const;
  inline void clear_enemyarr();
  static const int kEnemyArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderServerPush</name>
  	<Function>
  		<name>enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>enemyarr_size</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHighOrderUser& enemyarr(int index) const;
  inline ::pb::TArenaHighOrderUser* mutable_enemyarr(int index);
  inline ::pb::TArenaHighOrderUser* add_enemyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderUser >&
      enemyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderUser >*
      mutable_enemyarr();

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderServerPush)
 private:
  inline void set_has_recordinfo();
  inline void clear_has_recordinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TArenaHighOrderRecordInfo* recordinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderUser > enemyarr_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderServerPush* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderReceiveScoresRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderReceiveScoresRewardReq : public ::google::protobuf::Message {
 public:
  TArenaHighOrderReceiveScoresRewardReq();
  virtual ~TArenaHighOrderReceiveScoresRewardReq();

  TArenaHighOrderReceiveScoresRewardReq(const TArenaHighOrderReceiveScoresRewardReq& from);

  inline TArenaHighOrderReceiveScoresRewardReq& operator=(const TArenaHighOrderReceiveScoresRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderReceiveScoresRewardReq& default_instance();

  void Swap(TArenaHighOrderReceiveScoresRewardReq* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderReceiveScoresRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderReceiveScoresRewardReq& from);
  void MergeFrom(const TArenaHighOrderReceiveScoresRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderReceiveScoresRewardReq</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderReceiveScoresRewardReq)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tid_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderReceiveScoresRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderReceiveScoresRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderReceiveScoresRewardRsp : public ::google::protobuf::Message {
 public:
  TArenaHighOrderReceiveScoresRewardRsp();
  virtual ~TArenaHighOrderReceiveScoresRewardRsp();

  TArenaHighOrderReceiveScoresRewardRsp(const TArenaHighOrderReceiveScoresRewardRsp& from);

  inline TArenaHighOrderReceiveScoresRewardRsp& operator=(const TArenaHighOrderReceiveScoresRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderReceiveScoresRewardRsp& default_instance();

  void Swap(TArenaHighOrderReceiveScoresRewardRsp* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderReceiveScoresRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderReceiveScoresRewardRsp& from);
  void MergeFrom(const TArenaHighOrderReceiveScoresRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderReceiveScoresRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderReceiveScoresRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderReceiveScoresRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderGetEnemyFormationByOtherServerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderGetEnemyFormationByOtherServerReq : public ::google::protobuf::Message {
 public:
  TArenaHighOrderGetEnemyFormationByOtherServerReq();
  virtual ~TArenaHighOrderGetEnemyFormationByOtherServerReq();

  TArenaHighOrderGetEnemyFormationByOtherServerReq(const TArenaHighOrderGetEnemyFormationByOtherServerReq& from);

  inline TArenaHighOrderGetEnemyFormationByOtherServerReq& operator=(const TArenaHighOrderGetEnemyFormationByOtherServerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderGetEnemyFormationByOtherServerReq& default_instance();

  void Swap(TArenaHighOrderGetEnemyFormationByOtherServerReq* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderGetEnemyFormationByOtherServerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderGetEnemyFormationByOtherServerReq& from);
  void MergeFrom(const TArenaHighOrderGetEnemyFormationByOtherServerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetEnemyFormationByOtherServerReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderGetEnemyFormationByOtherServerReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderGetEnemyFormationByOtherServerReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderGetEnemyFormationByOtherServerRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderGetEnemyFormationByOtherServerRsp : public ::google::protobuf::Message {
 public:
  TArenaHighOrderGetEnemyFormationByOtherServerRsp();
  virtual ~TArenaHighOrderGetEnemyFormationByOtherServerRsp();

  TArenaHighOrderGetEnemyFormationByOtherServerRsp(const TArenaHighOrderGetEnemyFormationByOtherServerRsp& from);

  inline TArenaHighOrderGetEnemyFormationByOtherServerRsp& operator=(const TArenaHighOrderGetEnemyFormationByOtherServerRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderGetEnemyFormationByOtherServerRsp& default_instance();

  void Swap(TArenaHighOrderGetEnemyFormationByOtherServerRsp* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderGetEnemyFormationByOtherServerRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderGetEnemyFormationByOtherServerRsp& from);
  void MergeFrom(const TArenaHighOrderGetEnemyFormationByOtherServerRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TArenaHighOrderEnemyFormation FormationArray = 1;
  inline int formationarray_size() const;
  inline void clear_formationarray();
  static const int kFormationArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetEnemyFormationByOtherServerRsp</name>
  	<Function>
  		<name>formationarray</name>
  		<replaceName>FormationArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_formationarray</name>
  		<replaceName>FormationArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_formationarray</name>
  		<replaceName>FormationArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationarray</name>
  		<replaceName>FormationArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>formationarray_size</name>
  		<replaceName>FormationArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHighOrderEnemyFormation& formationarray(int index) const;
  inline ::pb::TArenaHighOrderEnemyFormation* mutable_formationarray(int index);
  inline ::pb::TArenaHighOrderEnemyFormation* add_formationarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderEnemyFormation >&
      formationarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderEnemyFormation >*
      mutable_formationarray();

  // repeated .pb.TRankSingle RankArr = 2;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetEnemyFormationByOtherServerRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRankSingle& rankarr(int index) const;
  inline ::pb::TRankSingle* mutable_rankarr(int index);
  inline ::pb::TRankSingle* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >*
      mutable_rankarr();

  // repeated uint32 BeastSkillArr = 3;
  inline int beastskillarr_size() const;
  inline void clear_beastskillarr();
  static const int kBeastSkillArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetEnemyFormationByOtherServerRsp</name>
  	<Function>
  		<name>beastskillarr</name>
  		<replaceName>BeastSkillArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_beastskillarr</name>
  		<replaceName>BeastSkillArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_beastskillarr</name>
  		<replaceName>BeastSkillArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastskillarr</name>
  		<replaceName>BeastSkillArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>beastskillarr_size</name>
  		<replaceName>BeastSkillArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beastskillarr(int index) const;
  inline void set_beastskillarr(int index, ::google::protobuf::uint32 value);
  inline void add_beastskillarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      beastskillarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_beastskillarr();

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderEnemyFormation > formationarray_;
  ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle > rankarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > beastskillarr_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderGetEnemyFormationByOtherServerRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderSetAttackedRecordByOtherServerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderSetAttackedRecordByOtherServerReq : public ::google::protobuf::Message {
 public:
  TArenaHighOrderSetAttackedRecordByOtherServerReq();
  virtual ~TArenaHighOrderSetAttackedRecordByOtherServerReq();

  TArenaHighOrderSetAttackedRecordByOtherServerReq(const TArenaHighOrderSetAttackedRecordByOtherServerReq& from);

  inline TArenaHighOrderSetAttackedRecordByOtherServerReq& operator=(const TArenaHighOrderSetAttackedRecordByOtherServerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderSetAttackedRecordByOtherServerReq& default_instance();

  void Swap(TArenaHighOrderSetAttackedRecordByOtherServerReq* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderSetAttackedRecordByOtherServerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderSetAttackedRecordByOtherServerReq& from);
  void MergeFrom(const TArenaHighOrderSetAttackedRecordByOtherServerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderSetAttackedRecordByOtherServerReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional int32 ScoresDelta = 2;
  inline bool has_scoresdelta() const;
  inline void clear_scoresdelta();
  static const int kScoresDeltaFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderSetAttackedRecordByOtherServerReq</name>
  	<Function>
  		<name>scoresdelta</name>
  		<replaceName>ScoresDelta</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scoresdelta</name>
  		<replaceName>ScoresDelta</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scoresdelta</name>
  		<replaceName>ScoresDelta</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 scoresdelta() const;
  inline void set_scoresdelta(::google::protobuf::int32 value);

  // optional .pb.TArenaHighOrderRecordInfo BattleRecordInfo = 3;
  inline bool has_battlerecordinfo() const;
  inline void clear_battlerecordinfo();
  static const int kBattleRecordInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderSetAttackedRecordByOtherServerReq</name>
  	<Function>
  		<name>battlerecordinfo</name>
  		<replaceName>BattleRecordInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlerecordinfo</name>
  		<replaceName>BattleRecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlerecordinfo</name>
  		<replaceName>BattleRecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlerecordinfo</name>
  		<replaceName>BattleRecordInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHighOrderRecordInfo& battlerecordinfo() const;
  inline ::pb::TArenaHighOrderRecordInfo* mutable_battlerecordinfo();
  inline ::pb::TArenaHighOrderRecordInfo* release_battlerecordinfo();
  inline void set_allocated_battlerecordinfo(::pb::TArenaHighOrderRecordInfo* battlerecordinfo);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderSetAttackedRecordByOtherServerReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_scoresdelta();
  inline void clear_has_scoresdelta();
  inline void set_has_battlerecordinfo();
  inline void clear_has_battlerecordinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::pb::TArenaHighOrderRecordInfo* battlerecordinfo_;
  ::google::protobuf::int32 scoresdelta_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderSetAttackedRecordByOtherServerReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderSetAttackedRecordByOtherServerRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderSetAttackedRecordByOtherServerRsp : public ::google::protobuf::Message {
 public:
  TArenaHighOrderSetAttackedRecordByOtherServerRsp();
  virtual ~TArenaHighOrderSetAttackedRecordByOtherServerRsp();

  TArenaHighOrderSetAttackedRecordByOtherServerRsp(const TArenaHighOrderSetAttackedRecordByOtherServerRsp& from);

  inline TArenaHighOrderSetAttackedRecordByOtherServerRsp& operator=(const TArenaHighOrderSetAttackedRecordByOtherServerRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderSetAttackedRecordByOtherServerRsp& default_instance();

  void Swap(TArenaHighOrderSetAttackedRecordByOtherServerRsp* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderSetAttackedRecordByOtherServerRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderSetAttackedRecordByOtherServerRsp& from);
  void MergeFrom(const TArenaHighOrderSetAttackedRecordByOtherServerRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Scores = 1;
  inline bool has_scores() const;
  inline void clear_scores();
  static const int kScoresFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderSetAttackedRecordByOtherServerRsp</name>
  	<Function>
  		<name>scores</name>
  		<replaceName>Scores</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scores</name>
  		<replaceName>Scores</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scores</name>
  		<replaceName>Scores</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scores() const;
  inline void set_scores(::google::protobuf::uint32 value);

  // optional int32 Rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderSetAttackedRecordByOtherServerRsp</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderSetAttackedRecordByOtherServerRsp)
 private:
  inline void set_has_scores();
  inline void clear_has_scores();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 scores_;
  ::google::protobuf::int32 rank_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderSetAttackedRecordByOtherServerRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderGetTotalFightForceByOtherServerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderGetTotalFightForceByOtherServerReq : public ::google::protobuf::Message {
 public:
  TArenaHighOrderGetTotalFightForceByOtherServerReq();
  virtual ~TArenaHighOrderGetTotalFightForceByOtherServerReq();

  TArenaHighOrderGetTotalFightForceByOtherServerReq(const TArenaHighOrderGetTotalFightForceByOtherServerReq& from);

  inline TArenaHighOrderGetTotalFightForceByOtherServerReq& operator=(const TArenaHighOrderGetTotalFightForceByOtherServerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderGetTotalFightForceByOtherServerReq& default_instance();

  void Swap(TArenaHighOrderGetTotalFightForceByOtherServerReq* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderGetTotalFightForceByOtherServerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderGetTotalFightForceByOtherServerReq& from);
  void MergeFrom(const TArenaHighOrderGetTotalFightForceByOtherServerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetTotalFightForceByOtherServerReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderGetTotalFightForceByOtherServerReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderGetTotalFightForceByOtherServerReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderGetTotalFightForceByOtherServerRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderGetTotalFightForceByOtherServerRsp : public ::google::protobuf::Message {
 public:
  TArenaHighOrderGetTotalFightForceByOtherServerRsp();
  virtual ~TArenaHighOrderGetTotalFightForceByOtherServerRsp();

  TArenaHighOrderGetTotalFightForceByOtherServerRsp(const TArenaHighOrderGetTotalFightForceByOtherServerRsp& from);

  inline TArenaHighOrderGetTotalFightForceByOtherServerRsp& operator=(const TArenaHighOrderGetTotalFightForceByOtherServerRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderGetTotalFightForceByOtherServerRsp& default_instance();

  void Swap(TArenaHighOrderGetTotalFightForceByOtherServerRsp* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderGetTotalFightForceByOtherServerRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderGetTotalFightForceByOtherServerRsp& from);
  void MergeFrom(const TArenaHighOrderGetTotalFightForceByOtherServerRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 FightForce = 1;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderGetTotalFightForceByOtherServerRsp</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderGetTotalFightForceByOtherServerRsp)
 private:
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 fightforce_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderGetTotalFightForceByOtherServerRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderQuickChallengServerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderQuickChallengServerReq : public ::google::protobuf::Message {
 public:
  TArenaHighOrderQuickChallengServerReq();
  virtual ~TArenaHighOrderQuickChallengServerReq();

  TArenaHighOrderQuickChallengServerReq(const TArenaHighOrderQuickChallengServerReq& from);

  inline TArenaHighOrderQuickChallengServerReq& operator=(const TArenaHighOrderQuickChallengServerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderQuickChallengServerReq& default_instance();

  void Swap(TArenaHighOrderQuickChallengServerReq* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderQuickChallengServerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderQuickChallengServerReq& from);
  void MergeFrom(const TArenaHighOrderQuickChallengServerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderQuickChallengServerReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderQuickChallengServerReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderQuickChallengServerReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderQuickChallengServerReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderQuickChallengSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderQuickChallengSingle : public ::google::protobuf::Message {
 public:
  TArenaHighOrderQuickChallengSingle();
  virtual ~TArenaHighOrderQuickChallengSingle();

  TArenaHighOrderQuickChallengSingle(const TArenaHighOrderQuickChallengSingle& from);

  inline TArenaHighOrderQuickChallengSingle& operator=(const TArenaHighOrderQuickChallengSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderQuickChallengSingle& default_instance();

  void Swap(TArenaHighOrderQuickChallengSingle* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderQuickChallengSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderQuickChallengSingle& from);
  void MergeFrom(const TArenaHighOrderQuickChallengSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MyScores = 1;
  inline bool has_myscores() const;
  inline void clear_myscores();
  static const int kMyScoresFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderQuickChallengSingle</name>
  	<Function>
  		<name>myscores</name>
  		<replaceName>MyScores</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myscores</name>
  		<replaceName>MyScores</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myscores</name>
  		<replaceName>MyScores</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 myscores() const;
  inline void set_myscores(::google::protobuf::uint32 value);

  // optional int32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderQuickChallengSingle</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderQuickChallengSingle)
 private:
  inline void set_has_myscores();
  inline void clear_has_myscores();
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 myscores_;
  ::google::protobuf::int32 myrank_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderQuickChallengSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaHighOrderQuickChallengServerRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ArenaHighOrder.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaHighOrderQuickChallengServerRsp : public ::google::protobuf::Message {
 public:
  TArenaHighOrderQuickChallengServerRsp();
  virtual ~TArenaHighOrderQuickChallengServerRsp();

  TArenaHighOrderQuickChallengServerRsp(const TArenaHighOrderQuickChallengServerRsp& from);

  inline TArenaHighOrderQuickChallengServerRsp& operator=(const TArenaHighOrderQuickChallengServerRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaHighOrderQuickChallengServerRsp& default_instance();

  void Swap(TArenaHighOrderQuickChallengServerRsp* other);

  // implements Message ----------------------------------------------

  TArenaHighOrderQuickChallengServerRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaHighOrderQuickChallengServerRsp& from);
  void MergeFrom(const TArenaHighOrderQuickChallengServerRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TArenaHighOrderQuickChallengSingle ResultArr = 1;
  inline int resultarr_size() const;
  inline void clear_resultarr();
  static const int kResultArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaHighOrderQuickChallengServerRsp</name>
  	<Function>
  		<name>resultarr</name>
  		<replaceName>ResultArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_resultarr</name>
  		<replaceName>ResultArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_resultarr</name>
  		<replaceName>ResultArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resultarr</name>
  		<replaceName>ResultArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>resultarr_size</name>
  		<replaceName>ResultArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaHighOrderQuickChallengSingle& resultarr(int index) const;
  inline ::pb::TArenaHighOrderQuickChallengSingle* mutable_resultarr(int index);
  inline ::pb::TArenaHighOrderQuickChallengSingle* add_resultarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderQuickChallengSingle >&
      resultarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderQuickChallengSingle >*
      mutable_resultarr();

  // @@protoc_insertion_point(class_scope:pb.TArenaHighOrderQuickChallengServerRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderQuickChallengSingle > resultarr_;
  friend void  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto();
  friend void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto();

  void InitAsDefaultInstance();
  static TArenaHighOrderQuickChallengServerRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TArenaHigOrderUserRankSingle

// optional .pb.TUserSimpleInfo UserSimple = 1;
inline bool TArenaHigOrderUserRankSingle::has_usersimple() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHigOrderUserRankSingle::set_has_usersimple() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHigOrderUserRankSingle::clear_has_usersimple() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHigOrderUserRankSingle::clear_usersimple() {
  if (usersimple_ != NULL) usersimple_->::pb::TUserSimpleInfo::Clear();
  clear_has_usersimple();
}
inline const ::pb::TUserSimpleInfo& TArenaHigOrderUserRankSingle::usersimple() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHigOrderUserRankSingle.UserSimple)
  return usersimple_ != NULL ? *usersimple_ : *default_instance_->usersimple_;
}
inline ::pb::TUserSimpleInfo* TArenaHigOrderUserRankSingle::mutable_usersimple() {
  set_has_usersimple();
  if (usersimple_ == NULL) usersimple_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TArenaHigOrderUserRankSingle.UserSimple)
  return usersimple_;
}
inline ::pb::TUserSimpleInfo* TArenaHigOrderUserRankSingle::release_usersimple() {
  clear_has_usersimple();
  ::pb::TUserSimpleInfo* temp = usersimple_;
  usersimple_ = NULL;
  return temp;
}
inline void TArenaHigOrderUserRankSingle::set_allocated_usersimple(::pb::TUserSimpleInfo* usersimple) {
  delete usersimple_;
  usersimple_ = usersimple;
  if (usersimple) {
    set_has_usersimple();
  } else {
    clear_has_usersimple();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaHigOrderUserRankSingle.UserSimple)
}

// optional uint32 UserScores = 2;
inline bool TArenaHigOrderUserRankSingle::has_userscores() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHigOrderUserRankSingle::set_has_userscores() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHigOrderUserRankSingle::clear_has_userscores() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHigOrderUserRankSingle::clear_userscores() {
  userscores_ = 0u;
  clear_has_userscores();
}
inline ::google::protobuf::uint32 TArenaHigOrderUserRankSingle::userscores() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHigOrderUserRankSingle.UserScores)
  return userscores_;
}
inline void TArenaHigOrderUserRankSingle::set_userscores(::google::protobuf::uint32 value) {
  set_has_userscores();
  userscores_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHigOrderUserRankSingle.UserScores)
}

// optional string ServerId = 3;
inline bool TArenaHigOrderUserRankSingle::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaHigOrderUserRankSingle::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaHigOrderUserRankSingle::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaHigOrderUserRankSingle::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TArenaHigOrderUserRankSingle::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHigOrderUserRankSingle.ServerId)
  return *serverid_;
}
inline void TArenaHigOrderUserRankSingle::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TArenaHigOrderUserRankSingle.ServerId)
}
inline void TArenaHigOrderUserRankSingle::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TArenaHigOrderUserRankSingle.ServerId)
}
inline void TArenaHigOrderUserRankSingle::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TArenaHigOrderUserRankSingle.ServerId)
}
inline ::std::string* TArenaHigOrderUserRankSingle::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TArenaHigOrderUserRankSingle.ServerId)
  return serverid_;
}
inline ::std::string* TArenaHigOrderUserRankSingle::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TArenaHigOrderUserRankSingle::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaHigOrderUserRankSingle.ServerId)
}

// -------------------------------------------------------------------

// TArenaHigOrderUserRankType

// optional uint32 RankId = 1;
inline bool TArenaHigOrderUserRankType::has_rankid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHigOrderUserRankType::set_has_rankid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHigOrderUserRankType::clear_has_rankid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHigOrderUserRankType::clear_rankid() {
  rankid_ = 0u;
  clear_has_rankid();
}
inline ::google::protobuf::uint32 TArenaHigOrderUserRankType::rankid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHigOrderUserRankType.RankId)
  return rankid_;
}
inline void TArenaHigOrderUserRankType::set_rankid(::google::protobuf::uint32 value) {
  set_has_rankid();
  rankid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHigOrderUserRankType.RankId)
}

// optional uint32 UserNum = 2;
inline bool TArenaHigOrderUserRankType::has_usernum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHigOrderUserRankType::set_has_usernum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHigOrderUserRankType::clear_has_usernum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHigOrderUserRankType::clear_usernum() {
  usernum_ = 0u;
  clear_has_usernum();
}
inline ::google::protobuf::uint32 TArenaHigOrderUserRankType::usernum() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHigOrderUserRankType.UserNum)
  return usernum_;
}
inline void TArenaHigOrderUserRankType::set_usernum(::google::protobuf::uint32 value) {
  set_has_usernum();
  usernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHigOrderUserRankType.UserNum)
}

// repeated .pb.TArenaHigOrderUserRankSingle UserArr = 3;
inline int TArenaHigOrderUserRankType::userarr_size() const {
  return userarr_.size();
}
inline void TArenaHigOrderUserRankType::clear_userarr() {
  userarr_.Clear();
}
inline const ::pb::TArenaHigOrderUserRankSingle& TArenaHigOrderUserRankType::userarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHigOrderUserRankType.UserArr)
  return userarr_.Get(index);
}
inline ::pb::TArenaHigOrderUserRankSingle* TArenaHigOrderUserRankType::mutable_userarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHigOrderUserRankType.UserArr)
  return userarr_.Mutable(index);
}
inline ::pb::TArenaHigOrderUserRankSingle* TArenaHigOrderUserRankType::add_userarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHigOrderUserRankType.UserArr)
  return userarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle >&
TArenaHigOrderUserRankType::userarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHigOrderUserRankType.UserArr)
  return userarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle >*
TArenaHigOrderUserRankType::mutable_userarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHigOrderUserRankType.UserArr)
  return &userarr_;
}

// -------------------------------------------------------------------

// TArenaHigOrderUserAboveRankRsp

// optional int32 MyRank = 1;
inline bool TArenaHigOrderUserAboveRankRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHigOrderUserAboveRankRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHigOrderUserAboveRankRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHigOrderUserAboveRankRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TArenaHigOrderUserAboveRankRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHigOrderUserAboveRankRsp.MyRank)
  return myrank_;
}
inline void TArenaHigOrderUserAboveRankRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHigOrderUserAboveRankRsp.MyRank)
}

// repeated .pb.TArenaHigOrderUserRankType UserRankArr = 2;
inline int TArenaHigOrderUserAboveRankRsp::userrankarr_size() const {
  return userrankarr_.size();
}
inline void TArenaHigOrderUserAboveRankRsp::clear_userrankarr() {
  userrankarr_.Clear();
}
inline const ::pb::TArenaHigOrderUserRankType& TArenaHigOrderUserAboveRankRsp::userrankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHigOrderUserAboveRankRsp.UserRankArr)
  return userrankarr_.Get(index);
}
inline ::pb::TArenaHigOrderUserRankType* TArenaHigOrderUserAboveRankRsp::mutable_userrankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHigOrderUserAboveRankRsp.UserRankArr)
  return userrankarr_.Mutable(index);
}
inline ::pb::TArenaHigOrderUserRankType* TArenaHigOrderUserAboveRankRsp::add_userrankarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHigOrderUserAboveRankRsp.UserRankArr)
  return userrankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankType >&
TArenaHigOrderUserAboveRankRsp::userrankarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHigOrderUserAboveRankRsp.UserRankArr)
  return userrankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankType >*
TArenaHigOrderUserAboveRankRsp::mutable_userrankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHigOrderUserAboveRankRsp.UserRankArr)
  return &userrankarr_;
}

// repeated .pb.TArenaHigOrderUserRankSingle TopRankUserArr = 3;
inline int TArenaHigOrderUserAboveRankRsp::toprankuserarr_size() const {
  return toprankuserarr_.size();
}
inline void TArenaHigOrderUserAboveRankRsp::clear_toprankuserarr() {
  toprankuserarr_.Clear();
}
inline const ::pb::TArenaHigOrderUserRankSingle& TArenaHigOrderUserAboveRankRsp::toprankuserarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHigOrderUserAboveRankRsp.TopRankUserArr)
  return toprankuserarr_.Get(index);
}
inline ::pb::TArenaHigOrderUserRankSingle* TArenaHigOrderUserAboveRankRsp::mutable_toprankuserarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHigOrderUserAboveRankRsp.TopRankUserArr)
  return toprankuserarr_.Mutable(index);
}
inline ::pb::TArenaHigOrderUserRankSingle* TArenaHigOrderUserAboveRankRsp::add_toprankuserarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHigOrderUserAboveRankRsp.TopRankUserArr)
  return toprankuserarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle >&
TArenaHigOrderUserAboveRankRsp::toprankuserarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHigOrderUserAboveRankRsp.TopRankUserArr)
  return toprankuserarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle >*
TArenaHigOrderUserAboveRankRsp::mutable_toprankuserarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHigOrderUserAboveRankRsp.TopRankUserArr)
  return &toprankuserarr_;
}

// optional uint32 RealTopN = 4;
inline bool TArenaHigOrderUserAboveRankRsp::has_realtopn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TArenaHigOrderUserAboveRankRsp::set_has_realtopn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TArenaHigOrderUserAboveRankRsp::clear_has_realtopn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TArenaHigOrderUserAboveRankRsp::clear_realtopn() {
  realtopn_ = 0u;
  clear_has_realtopn();
}
inline ::google::protobuf::uint32 TArenaHigOrderUserAboveRankRsp::realtopn() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHigOrderUserAboveRankRsp.RealTopN)
  return realtopn_;
}
inline void TArenaHigOrderUserAboveRankRsp::set_realtopn(::google::protobuf::uint32 value) {
  set_has_realtopn();
  realtopn_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHigOrderUserAboveRankRsp.RealTopN)
}

// -------------------------------------------------------------------

// TArenaHigOrderTopRankUserReq

// optional int32 Offset = 1;
inline bool TArenaHigOrderTopRankUserReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHigOrderTopRankUserReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHigOrderTopRankUserReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHigOrderTopRankUserReq::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 TArenaHigOrderTopRankUserReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHigOrderTopRankUserReq.Offset)
  return offset_;
}
inline void TArenaHigOrderTopRankUserReq::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHigOrderTopRankUserReq.Offset)
}

// optional int32 Limit = 2;
inline bool TArenaHigOrderTopRankUserReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHigOrderTopRankUserReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHigOrderTopRankUserReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHigOrderTopRankUserReq::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 TArenaHigOrderTopRankUserReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHigOrderTopRankUserReq.Limit)
  return limit_;
}
inline void TArenaHigOrderTopRankUserReq::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHigOrderTopRankUserReq.Limit)
}

// -------------------------------------------------------------------

// TArenaHigOrderTopRankUserRsp

// repeated .pb.TArenaHigOrderUserRankSingle TopRankUserArr = 1;
inline int TArenaHigOrderTopRankUserRsp::toprankuserarr_size() const {
  return toprankuserarr_.size();
}
inline void TArenaHigOrderTopRankUserRsp::clear_toprankuserarr() {
  toprankuserarr_.Clear();
}
inline const ::pb::TArenaHigOrderUserRankSingle& TArenaHigOrderTopRankUserRsp::toprankuserarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHigOrderTopRankUserRsp.TopRankUserArr)
  return toprankuserarr_.Get(index);
}
inline ::pb::TArenaHigOrderUserRankSingle* TArenaHigOrderTopRankUserRsp::mutable_toprankuserarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHigOrderTopRankUserRsp.TopRankUserArr)
  return toprankuserarr_.Mutable(index);
}
inline ::pb::TArenaHigOrderUserRankSingle* TArenaHigOrderTopRankUserRsp::add_toprankuserarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHigOrderTopRankUserRsp.TopRankUserArr)
  return toprankuserarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle >&
TArenaHigOrderTopRankUserRsp::toprankuserarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHigOrderTopRankUserRsp.TopRankUserArr)
  return toprankuserarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle >*
TArenaHigOrderTopRankUserRsp::mutable_toprankuserarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHigOrderTopRankUserRsp.TopRankUserArr)
  return &toprankuserarr_;
}

// -------------------------------------------------------------------

// TArenaHigOrderUserTypeRankReq

// optional int32 TypeRankId = 1;
inline bool TArenaHigOrderUserTypeRankReq::has_typerankid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHigOrderUserTypeRankReq::set_has_typerankid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHigOrderUserTypeRankReq::clear_has_typerankid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHigOrderUserTypeRankReq::clear_typerankid() {
  typerankid_ = 0;
  clear_has_typerankid();
}
inline ::google::protobuf::int32 TArenaHigOrderUserTypeRankReq::typerankid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHigOrderUserTypeRankReq.TypeRankId)
  return typerankid_;
}
inline void TArenaHigOrderUserTypeRankReq::set_typerankid(::google::protobuf::int32 value) {
  set_has_typerankid();
  typerankid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHigOrderUserTypeRankReq.TypeRankId)
}

// optional int32 Offset = 2;
inline bool TArenaHigOrderUserTypeRankReq::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHigOrderUserTypeRankReq::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHigOrderUserTypeRankReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHigOrderUserTypeRankReq::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 TArenaHigOrderUserTypeRankReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHigOrderUserTypeRankReq.Offset)
  return offset_;
}
inline void TArenaHigOrderUserTypeRankReq::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHigOrderUserTypeRankReq.Offset)
}

// optional int32 Limit = 3;
inline bool TArenaHigOrderUserTypeRankReq::has_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaHigOrderUserTypeRankReq::set_has_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaHigOrderUserTypeRankReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaHigOrderUserTypeRankReq::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 TArenaHigOrderUserTypeRankReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHigOrderUserTypeRankReq.Limit)
  return limit_;
}
inline void TArenaHigOrderUserTypeRankReq::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHigOrderUserTypeRankReq.Limit)
}

// -------------------------------------------------------------------

// TArenaHigOrderUserTypeRankRsp

// repeated .pb.TArenaHigOrderUserRankSingle TypeRankArr = 1;
inline int TArenaHigOrderUserTypeRankRsp::typerankarr_size() const {
  return typerankarr_.size();
}
inline void TArenaHigOrderUserTypeRankRsp::clear_typerankarr() {
  typerankarr_.Clear();
}
inline const ::pb::TArenaHigOrderUserRankSingle& TArenaHigOrderUserTypeRankRsp::typerankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHigOrderUserTypeRankRsp.TypeRankArr)
  return typerankarr_.Get(index);
}
inline ::pb::TArenaHigOrderUserRankSingle* TArenaHigOrderUserTypeRankRsp::mutable_typerankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHigOrderUserTypeRankRsp.TypeRankArr)
  return typerankarr_.Mutable(index);
}
inline ::pb::TArenaHigOrderUserRankSingle* TArenaHigOrderUserTypeRankRsp::add_typerankarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHigOrderUserTypeRankRsp.TypeRankArr)
  return typerankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle >&
TArenaHigOrderUserTypeRankRsp::typerankarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHigOrderUserTypeRankRsp.TypeRankArr)
  return typerankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHigOrderUserRankSingle >*
TArenaHigOrderUserTypeRankRsp::mutable_typerankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHigOrderUserTypeRankRsp.TypeRankArr)
  return &typerankarr_;
}

// -------------------------------------------------------------------

// TArenaHighOrderUser

// optional uint64 Uid = 1;
inline bool TArenaHighOrderUser::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderUser::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderUser::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderUser::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TArenaHighOrderUser::uid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUser.Uid)
  return uid_;
}
inline void TArenaHighOrderUser::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUser.Uid)
}

// optional string Uname = 2;
inline bool TArenaHighOrderUser::has_uname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHighOrderUser::set_has_uname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHighOrderUser::clear_has_uname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHighOrderUser::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TArenaHighOrderUser::uname() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUser.Uname)
  return *uname_;
}
inline void TArenaHighOrderUser::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUser.Uname)
}
inline void TArenaHighOrderUser::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TArenaHighOrderUser.Uname)
}
inline void TArenaHighOrderUser::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TArenaHighOrderUser.Uname)
}
inline ::std::string* TArenaHighOrderUser::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderUser.Uname)
  return uname_;
}
inline ::std::string* TArenaHighOrderUser::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TArenaHighOrderUser::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaHighOrderUser.Uname)
}

// optional uint32 Scores = 3;
inline bool TArenaHighOrderUser::has_scores() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaHighOrderUser::set_has_scores() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaHighOrderUser::clear_has_scores() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaHighOrderUser::clear_scores() {
  scores_ = 0u;
  clear_has_scores();
}
inline ::google::protobuf::uint32 TArenaHighOrderUser::scores() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUser.Scores)
  return scores_;
}
inline void TArenaHighOrderUser::set_scores(::google::protobuf::uint32 value) {
  set_has_scores();
  scores_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUser.Scores)
}

// optional uint64 FightForce = 4;
inline bool TArenaHighOrderUser::has_fightforce() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TArenaHighOrderUser::set_has_fightforce() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TArenaHighOrderUser::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TArenaHighOrderUser::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TArenaHighOrderUser::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUser.FightForce)
  return fightforce_;
}
inline void TArenaHighOrderUser::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUser.FightForce)
}

// optional uint32 Htid = 5;
inline bool TArenaHighOrderUser::has_htid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TArenaHighOrderUser::set_has_htid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TArenaHighOrderUser::clear_has_htid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TArenaHighOrderUser::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TArenaHighOrderUser::htid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUser.Htid)
  return htid_;
}
inline void TArenaHighOrderUser::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUser.Htid)
}

// optional int32 Rank = 6;
inline bool TArenaHighOrderUser::has_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TArenaHighOrderUser::set_has_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TArenaHighOrderUser::clear_has_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TArenaHighOrderUser::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 TArenaHighOrderUser::rank() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUser.Rank)
  return rank_;
}
inline void TArenaHighOrderUser::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUser.Rank)
}

// optional string ServerId = 7;
inline bool TArenaHighOrderUser::has_serverid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TArenaHighOrderUser::set_has_serverid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TArenaHighOrderUser::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TArenaHighOrderUser::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TArenaHighOrderUser::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUser.ServerId)
  return *serverid_;
}
inline void TArenaHighOrderUser::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUser.ServerId)
}
inline void TArenaHighOrderUser::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TArenaHighOrderUser.ServerId)
}
inline void TArenaHighOrderUser::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TArenaHighOrderUser.ServerId)
}
inline ::std::string* TArenaHighOrderUser::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderUser.ServerId)
  return serverid_;
}
inline ::std::string* TArenaHighOrderUser::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TArenaHighOrderUser::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaHighOrderUser.ServerId)
}

// optional uint32 PlayerImageHtid = 8;
inline bool TArenaHighOrderUser::has_playerimagehtid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TArenaHighOrderUser::set_has_playerimagehtid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TArenaHighOrderUser::clear_has_playerimagehtid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TArenaHighOrderUser::clear_playerimagehtid() {
  playerimagehtid_ = 0u;
  clear_has_playerimagehtid();
}
inline ::google::protobuf::uint32 TArenaHighOrderUser::playerimagehtid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUser.PlayerImageHtid)
  return playerimagehtid_;
}
inline void TArenaHighOrderUser::set_playerimagehtid(::google::protobuf::uint32 value) {
  set_has_playerimagehtid();
  playerimagehtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUser.PlayerImageHtid)
}

// optional uint32 PlayerImageFrameTid = 9;
inline bool TArenaHighOrderUser::has_playerimageframetid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TArenaHighOrderUser::set_has_playerimageframetid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TArenaHighOrderUser::clear_has_playerimageframetid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TArenaHighOrderUser::clear_playerimageframetid() {
  playerimageframetid_ = 0u;
  clear_has_playerimageframetid();
}
inline ::google::protobuf::uint32 TArenaHighOrderUser::playerimageframetid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUser.PlayerImageFrameTid)
  return playerimageframetid_;
}
inline void TArenaHighOrderUser::set_playerimageframetid(::google::protobuf::uint32 value) {
  set_has_playerimageframetid();
  playerimageframetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUser.PlayerImageFrameTid)
}

// optional string GuildName = 10;
inline bool TArenaHighOrderUser::has_guildname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TArenaHighOrderUser::set_has_guildname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TArenaHighOrderUser::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TArenaHighOrderUser::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& TArenaHighOrderUser::guildname() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUser.GuildName)
  return *guildname_;
}
inline void TArenaHighOrderUser::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUser.GuildName)
}
inline void TArenaHighOrderUser::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TArenaHighOrderUser.GuildName)
}
inline void TArenaHighOrderUser::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TArenaHighOrderUser.GuildName)
}
inline ::std::string* TArenaHighOrderUser::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderUser.GuildName)
  return guildname_;
}
inline ::std::string* TArenaHighOrderUser::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TArenaHighOrderUser::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaHighOrderUser.GuildName)
}

// -------------------------------------------------------------------

// TArenaHighOrderUserRsp

// repeated .pb.TArenaHighOrderUser EnemyArr = 1;
inline int TArenaHighOrderUserRsp::enemyarr_size() const {
  return enemyarr_.size();
}
inline void TArenaHighOrderUserRsp::clear_enemyarr() {
  enemyarr_.Clear();
}
inline const ::pb::TArenaHighOrderUser& TArenaHighOrderUserRsp::enemyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUserRsp.EnemyArr)
  return enemyarr_.Get(index);
}
inline ::pb::TArenaHighOrderUser* TArenaHighOrderUserRsp::mutable_enemyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderUserRsp.EnemyArr)
  return enemyarr_.Mutable(index);
}
inline ::pb::TArenaHighOrderUser* TArenaHighOrderUserRsp::add_enemyarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderUserRsp.EnemyArr)
  return enemyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderUser >&
TArenaHighOrderUserRsp::enemyarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderUserRsp.EnemyArr)
  return enemyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderUser >*
TArenaHighOrderUserRsp::mutable_enemyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderUserRsp.EnemyArr)
  return &enemyarr_;
}

// optional uint64 RefreshTime = 2;
inline bool TArenaHighOrderUserRsp::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHighOrderUserRsp::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHighOrderUserRsp::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHighOrderUserRsp::clear_refreshtime() {
  refreshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_refreshtime();
}
inline ::google::protobuf::uint64 TArenaHighOrderUserRsp::refreshtime() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUserRsp.RefreshTime)
  return refreshtime_;
}
inline void TArenaHighOrderUserRsp::set_refreshtime(::google::protobuf::uint64 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUserRsp.RefreshTime)
}

// optional uint32 ExtraAtkNum = 3;
inline bool TArenaHighOrderUserRsp::has_extraatknum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaHighOrderUserRsp::set_has_extraatknum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaHighOrderUserRsp::clear_has_extraatknum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaHighOrderUserRsp::clear_extraatknum() {
  extraatknum_ = 0u;
  clear_has_extraatknum();
}
inline ::google::protobuf::uint32 TArenaHighOrderUserRsp::extraatknum() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUserRsp.ExtraAtkNum)
  return extraatknum_;
}
inline void TArenaHighOrderUserRsp::set_extraatknum(::google::protobuf::uint32 value) {
  set_has_extraatknum();
  extraatknum_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUserRsp.ExtraAtkNum)
}

// optional uint32 BuyNum = 4;
inline bool TArenaHighOrderUserRsp::has_buynum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TArenaHighOrderUserRsp::set_has_buynum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TArenaHighOrderUserRsp::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TArenaHighOrderUserRsp::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TArenaHighOrderUserRsp::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUserRsp.BuyNum)
  return buynum_;
}
inline void TArenaHighOrderUserRsp::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUserRsp.BuyNum)
}

// optional uint32 MyScores = 5;
inline bool TArenaHighOrderUserRsp::has_myscores() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TArenaHighOrderUserRsp::set_has_myscores() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TArenaHighOrderUserRsp::clear_has_myscores() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TArenaHighOrderUserRsp::clear_myscores() {
  myscores_ = 0u;
  clear_has_myscores();
}
inline ::google::protobuf::uint32 TArenaHighOrderUserRsp::myscores() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUserRsp.MyScores)
  return myscores_;
}
inline void TArenaHighOrderUserRsp::set_myscores(::google::protobuf::uint32 value) {
  set_has_myscores();
  myscores_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUserRsp.MyScores)
}

// optional uint64 MyFightForce = 6;
inline bool TArenaHighOrderUserRsp::has_myfightforce() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TArenaHighOrderUserRsp::set_has_myfightforce() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TArenaHighOrderUserRsp::clear_has_myfightforce() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TArenaHighOrderUserRsp::clear_myfightforce() {
  myfightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_myfightforce();
}
inline ::google::protobuf::uint64 TArenaHighOrderUserRsp::myfightforce() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUserRsp.MyFightForce)
  return myfightforce_;
}
inline void TArenaHighOrderUserRsp::set_myfightforce(::google::protobuf::uint64 value) {
  set_has_myfightforce();
  myfightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUserRsp.MyFightForce)
}

// optional bool HasNewReport = 7;
inline bool TArenaHighOrderUserRsp::has_hasnewreport() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TArenaHighOrderUserRsp::set_has_hasnewreport() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TArenaHighOrderUserRsp::clear_has_hasnewreport() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TArenaHighOrderUserRsp::clear_hasnewreport() {
  hasnewreport_ = false;
  clear_has_hasnewreport();
}
inline bool TArenaHighOrderUserRsp::hasnewreport() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUserRsp.HasNewReport)
  return hasnewreport_;
}
inline void TArenaHighOrderUserRsp::set_hasnewreport(bool value) {
  set_has_hasnewreport();
  hasnewreport_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUserRsp.HasNewReport)
}

// optional uint64 ResetTime = 8;
inline bool TArenaHighOrderUserRsp::has_resettime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TArenaHighOrderUserRsp::set_has_resettime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TArenaHighOrderUserRsp::clear_has_resettime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TArenaHighOrderUserRsp::clear_resettime() {
  resettime_ = GOOGLE_ULONGLONG(0);
  clear_has_resettime();
}
inline ::google::protobuf::uint64 TArenaHighOrderUserRsp::resettime() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUserRsp.ResetTime)
  return resettime_;
}
inline void TArenaHighOrderUserRsp::set_resettime(::google::protobuf::uint64 value) {
  set_has_resettime();
  resettime_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUserRsp.ResetTime)
}

// optional uint32 MaxScores = 9;
inline bool TArenaHighOrderUserRsp::has_maxscores() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TArenaHighOrderUserRsp::set_has_maxscores() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TArenaHighOrderUserRsp::clear_has_maxscores() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TArenaHighOrderUserRsp::clear_maxscores() {
  maxscores_ = 0u;
  clear_has_maxscores();
}
inline ::google::protobuf::uint32 TArenaHighOrderUserRsp::maxscores() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUserRsp.MaxScores)
  return maxscores_;
}
inline void TArenaHighOrderUserRsp::set_maxscores(::google::protobuf::uint32 value) {
  set_has_maxscores();
  maxscores_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUserRsp.MaxScores)
}

// optional uint64 EndTime = 10;
inline bool TArenaHighOrderUserRsp::has_endtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TArenaHighOrderUserRsp::set_has_endtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TArenaHighOrderUserRsp::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TArenaHighOrderUserRsp::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 TArenaHighOrderUserRsp::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUserRsp.EndTime)
  return endtime_;
}
inline void TArenaHighOrderUserRsp::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUserRsp.EndTime)
}

// repeated uint32 ReceiveTidArr = 11;
inline int TArenaHighOrderUserRsp::receivetidarr_size() const {
  return receivetidarr_.size();
}
inline void TArenaHighOrderUserRsp::clear_receivetidarr() {
  receivetidarr_.Clear();
}
inline ::google::protobuf::uint32 TArenaHighOrderUserRsp::receivetidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUserRsp.ReceiveTidArr)
  return receivetidarr_.Get(index);
}
inline void TArenaHighOrderUserRsp::set_receivetidarr(int index, ::google::protobuf::uint32 value) {
  receivetidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUserRsp.ReceiveTidArr)
}
inline void TArenaHighOrderUserRsp::add_receivetidarr(::google::protobuf::uint32 value) {
  receivetidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderUserRsp.ReceiveTidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TArenaHighOrderUserRsp::receivetidarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderUserRsp.ReceiveTidArr)
  return receivetidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TArenaHighOrderUserRsp::mutable_receivetidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderUserRsp.ReceiveTidArr)
  return &receivetidarr_;
}

// optional int32 MyRank = 12;
inline bool TArenaHighOrderUserRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TArenaHighOrderUserRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TArenaHighOrderUserRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TArenaHighOrderUserRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TArenaHighOrderUserRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUserRsp.MyRank)
  return myrank_;
}
inline void TArenaHighOrderUserRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUserRsp.MyRank)
}

// optional string ServerId = 13;
inline bool TArenaHighOrderUserRsp::has_serverid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TArenaHighOrderUserRsp::set_has_serverid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TArenaHighOrderUserRsp::clear_has_serverid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TArenaHighOrderUserRsp::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TArenaHighOrderUserRsp::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUserRsp.ServerId)
  return *serverid_;
}
inline void TArenaHighOrderUserRsp::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUserRsp.ServerId)
}
inline void TArenaHighOrderUserRsp::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TArenaHighOrderUserRsp.ServerId)
}
inline void TArenaHighOrderUserRsp::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TArenaHighOrderUserRsp.ServerId)
}
inline ::std::string* TArenaHighOrderUserRsp::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderUserRsp.ServerId)
  return serverid_;
}
inline ::std::string* TArenaHighOrderUserRsp::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TArenaHighOrderUserRsp::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaHighOrderUserRsp.ServerId)
}

// optional bool HasAtk = 14;
inline bool TArenaHighOrderUserRsp::has_hasatk() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TArenaHighOrderUserRsp::set_has_hasatk() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TArenaHighOrderUserRsp::clear_has_hasatk() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TArenaHighOrderUserRsp::clear_hasatk() {
  hasatk_ = false;
  clear_has_hasatk();
}
inline bool TArenaHighOrderUserRsp::hasatk() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUserRsp.HasAtk)
  return hasatk_;
}
inline void TArenaHighOrderUserRsp::set_hasatk(bool value) {
  set_has_hasatk();
  hasatk_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUserRsp.HasAtk)
}

// optional uint64 BeginTime = 15;
inline bool TArenaHighOrderUserRsp::has_begintime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TArenaHighOrderUserRsp::set_has_begintime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TArenaHighOrderUserRsp::clear_has_begintime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TArenaHighOrderUserRsp::clear_begintime() {
  begintime_ = GOOGLE_ULONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::uint64 TArenaHighOrderUserRsp::begintime() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderUserRsp.BeginTime)
  return begintime_;
}
inline void TArenaHighOrderUserRsp::set_begintime(::google::protobuf::uint64 value) {
  set_has_begintime();
  begintime_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderUserRsp.BeginTime)
}

// -------------------------------------------------------------------

// TArenaHighOrderRefreshEnemyListRsp

// repeated .pb.TArenaHighOrderUser EnemyArr = 1;
inline int TArenaHighOrderRefreshEnemyListRsp::enemyarr_size() const {
  return enemyarr_.size();
}
inline void TArenaHighOrderRefreshEnemyListRsp::clear_enemyarr() {
  enemyarr_.Clear();
}
inline const ::pb::TArenaHighOrderUser& TArenaHighOrderRefreshEnemyListRsp::enemyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRefreshEnemyListRsp.EnemyArr)
  return enemyarr_.Get(index);
}
inline ::pb::TArenaHighOrderUser* TArenaHighOrderRefreshEnemyListRsp::mutable_enemyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderRefreshEnemyListRsp.EnemyArr)
  return enemyarr_.Mutable(index);
}
inline ::pb::TArenaHighOrderUser* TArenaHighOrderRefreshEnemyListRsp::add_enemyarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderRefreshEnemyListRsp.EnemyArr)
  return enemyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderUser >&
TArenaHighOrderRefreshEnemyListRsp::enemyarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderRefreshEnemyListRsp.EnemyArr)
  return enemyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderUser >*
TArenaHighOrderRefreshEnemyListRsp::mutable_enemyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderRefreshEnemyListRsp.EnemyArr)
  return &enemyarr_;
}

// optional uint64 RefreshTime = 2;
inline bool TArenaHighOrderRefreshEnemyListRsp::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHighOrderRefreshEnemyListRsp::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHighOrderRefreshEnemyListRsp::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHighOrderRefreshEnemyListRsp::clear_refreshtime() {
  refreshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_refreshtime();
}
inline ::google::protobuf::uint64 TArenaHighOrderRefreshEnemyListRsp::refreshtime() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRefreshEnemyListRsp.RefreshTime)
  return refreshtime_;
}
inline void TArenaHighOrderRefreshEnemyListRsp::set_refreshtime(::google::protobuf::uint64 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderRefreshEnemyListRsp.RefreshTime)
}

// -------------------------------------------------------------------

// TArenaHighOrderBattlePos

// optional uint32 Hid = 1;
inline bool TArenaHighOrderBattlePos::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderBattlePos::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderBattlePos::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderBattlePos::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TArenaHighOrderBattlePos::hid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderBattlePos.Hid)
  return hid_;
}
inline void TArenaHighOrderBattlePos::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderBattlePos.Hid)
}

// optional uint32 Pos = 2;
inline bool TArenaHighOrderBattlePos::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHighOrderBattlePos::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHighOrderBattlePos::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHighOrderBattlePos::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TArenaHighOrderBattlePos::pos() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderBattlePos.Pos)
  return pos_;
}
inline void TArenaHighOrderBattlePos::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderBattlePos.Pos)
}

// -------------------------------------------------------------------

// TArenaHighOrderFormationInfo

// optional uint32 FormationId = 1;
inline bool TArenaHighOrderFormationInfo::has_formationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderFormationInfo::set_has_formationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderFormationInfo::clear_has_formationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderFormationInfo::clear_formationid() {
  formationid_ = 0u;
  clear_has_formationid();
}
inline ::google::protobuf::uint32 TArenaHighOrderFormationInfo::formationid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderFormationInfo.FormationId)
  return formationid_;
}
inline void TArenaHighOrderFormationInfo::set_formationid(::google::protobuf::uint32 value) {
  set_has_formationid();
  formationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderFormationInfo.FormationId)
}

// repeated .pb.TArenaHighOrderBattlePos BattleArr = 2;
inline int TArenaHighOrderFormationInfo::battlearr_size() const {
  return battlearr_.size();
}
inline void TArenaHighOrderFormationInfo::clear_battlearr() {
  battlearr_.Clear();
}
inline const ::pb::TArenaHighOrderBattlePos& TArenaHighOrderFormationInfo::battlearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderFormationInfo.BattleArr)
  return battlearr_.Get(index);
}
inline ::pb::TArenaHighOrderBattlePos* TArenaHighOrderFormationInfo::mutable_battlearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderFormationInfo.BattleArr)
  return battlearr_.Mutable(index);
}
inline ::pb::TArenaHighOrderBattlePos* TArenaHighOrderFormationInfo::add_battlearr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderFormationInfo.BattleArr)
  return battlearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderBattlePos >&
TArenaHighOrderFormationInfo::battlearr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderFormationInfo.BattleArr)
  return battlearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderBattlePos >*
TArenaHighOrderFormationInfo::mutable_battlearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderFormationInfo.BattleArr)
  return &battlearr_;
}

// -------------------------------------------------------------------

// TArenaHighOrderGetMyFormationRsp

// repeated .pb.TArenaHighOrderFormationInfo FormationArr = 1;
inline int TArenaHighOrderGetMyFormationRsp::formationarr_size() const {
  return formationarr_.size();
}
inline void TArenaHighOrderGetMyFormationRsp::clear_formationarr() {
  formationarr_.Clear();
}
inline const ::pb::TArenaHighOrderFormationInfo& TArenaHighOrderGetMyFormationRsp::formationarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetMyFormationRsp.FormationArr)
  return formationarr_.Get(index);
}
inline ::pb::TArenaHighOrderFormationInfo* TArenaHighOrderGetMyFormationRsp::mutable_formationarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderGetMyFormationRsp.FormationArr)
  return formationarr_.Mutable(index);
}
inline ::pb::TArenaHighOrderFormationInfo* TArenaHighOrderGetMyFormationRsp::add_formationarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderGetMyFormationRsp.FormationArr)
  return formationarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderFormationInfo >&
TArenaHighOrderGetMyFormationRsp::formationarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderGetMyFormationRsp.FormationArr)
  return formationarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderFormationInfo >*
TArenaHighOrderGetMyFormationRsp::mutable_formationarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderGetMyFormationRsp.FormationArr)
  return &formationarr_;
}

// -------------------------------------------------------------------

// TArenaHighOrderSetFormationReq

// repeated .pb.TArenaHighOrderFormationInfo FormationArr = 1;
inline int TArenaHighOrderSetFormationReq::formationarr_size() const {
  return formationarr_.size();
}
inline void TArenaHighOrderSetFormationReq::clear_formationarr() {
  formationarr_.Clear();
}
inline const ::pb::TArenaHighOrderFormationInfo& TArenaHighOrderSetFormationReq::formationarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderSetFormationReq.FormationArr)
  return formationarr_.Get(index);
}
inline ::pb::TArenaHighOrderFormationInfo* TArenaHighOrderSetFormationReq::mutable_formationarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderSetFormationReq.FormationArr)
  return formationarr_.Mutable(index);
}
inline ::pb::TArenaHighOrderFormationInfo* TArenaHighOrderSetFormationReq::add_formationarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderSetFormationReq.FormationArr)
  return formationarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderFormationInfo >&
TArenaHighOrderSetFormationReq::formationarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderSetFormationReq.FormationArr)
  return formationarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderFormationInfo >*
TArenaHighOrderSetFormationReq::mutable_formationarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderSetFormationReq.FormationArr)
  return &formationarr_;
}

// -------------------------------------------------------------------

// TArenaHighOrderExchangeFormationReq

// optional uint32 FormationId = 1;
inline bool TArenaHighOrderExchangeFormationReq::has_formationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderExchangeFormationReq::set_has_formationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderExchangeFormationReq::clear_has_formationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderExchangeFormationReq::clear_formationid() {
  formationid_ = 0u;
  clear_has_formationid();
}
inline ::google::protobuf::uint32 TArenaHighOrderExchangeFormationReq::formationid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderExchangeFormationReq.FormationId)
  return formationid_;
}
inline void TArenaHighOrderExchangeFormationReq::set_formationid(::google::protobuf::uint32 value) {
  set_has_formationid();
  formationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderExchangeFormationReq.FormationId)
}

// -------------------------------------------------------------------

// TArenaHighOrderEnemyFormation

// optional uint32 FormationId = 1;
inline bool TArenaHighOrderEnemyFormation::has_formationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderEnemyFormation::set_has_formationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderEnemyFormation::clear_has_formationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderEnemyFormation::clear_formationid() {
  formationid_ = 0u;
  clear_has_formationid();
}
inline ::google::protobuf::uint32 TArenaHighOrderEnemyFormation::formationid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderEnemyFormation.FormationId)
  return formationid_;
}
inline void TArenaHighOrderEnemyFormation::set_formationid(::google::protobuf::uint32 value) {
  set_has_formationid();
  formationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderEnemyFormation.FormationId)
}

// repeated .pb.TUnitInfo UnitArr = 2;
inline int TArenaHighOrderEnemyFormation::unitarr_size() const {
  return unitarr_.size();
}
inline void TArenaHighOrderEnemyFormation::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TUnitInfo& TArenaHighOrderEnemyFormation::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderEnemyFormation.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TUnitInfo* TArenaHighOrderEnemyFormation::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderEnemyFormation.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TUnitInfo* TArenaHighOrderEnemyFormation::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderEnemyFormation.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >&
TArenaHighOrderEnemyFormation::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderEnemyFormation.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >*
TArenaHighOrderEnemyFormation::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderEnemyFormation.UnitArr)
  return &unitarr_;
}

// optional uint64 FightForce = 3;
inline bool TArenaHighOrderEnemyFormation::has_fightforce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaHighOrderEnemyFormation::set_has_fightforce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaHighOrderEnemyFormation::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaHighOrderEnemyFormation::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TArenaHighOrderEnemyFormation::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderEnemyFormation.FightForce)
  return fightforce_;
}
inline void TArenaHighOrderEnemyFormation::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderEnemyFormation.FightForce)
}

// -------------------------------------------------------------------

// TArenaHighOrderGetEnemyFormationReq

// optional uint64 EnemyUid = 1;
inline bool TArenaHighOrderGetEnemyFormationReq::has_enemyuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderGetEnemyFormationReq::set_has_enemyuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderGetEnemyFormationReq::clear_has_enemyuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderGetEnemyFormationReq::clear_enemyuid() {
  enemyuid_ = GOOGLE_ULONGLONG(0);
  clear_has_enemyuid();
}
inline ::google::protobuf::uint64 TArenaHighOrderGetEnemyFormationReq::enemyuid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetEnemyFormationReq.EnemyUid)
  return enemyuid_;
}
inline void TArenaHighOrderGetEnemyFormationReq::set_enemyuid(::google::protobuf::uint64 value) {
  set_has_enemyuid();
  enemyuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderGetEnemyFormationReq.EnemyUid)
}

// -------------------------------------------------------------------

// TArenaHighOrderGetEnemyFormationRsp

// repeated .pb.TArenaHighOrderEnemyFormation FormationArr = 1;
inline int TArenaHighOrderGetEnemyFormationRsp::formationarr_size() const {
  return formationarr_.size();
}
inline void TArenaHighOrderGetEnemyFormationRsp::clear_formationarr() {
  formationarr_.Clear();
}
inline const ::pb::TArenaHighOrderEnemyFormation& TArenaHighOrderGetEnemyFormationRsp::formationarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetEnemyFormationRsp.FormationArr)
  return formationarr_.Get(index);
}
inline ::pb::TArenaHighOrderEnemyFormation* TArenaHighOrderGetEnemyFormationRsp::mutable_formationarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderGetEnemyFormationRsp.FormationArr)
  return formationarr_.Mutable(index);
}
inline ::pb::TArenaHighOrderEnemyFormation* TArenaHighOrderGetEnemyFormationRsp::add_formationarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderGetEnemyFormationRsp.FormationArr)
  return formationarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderEnemyFormation >&
TArenaHighOrderGetEnemyFormationRsp::formationarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderGetEnemyFormationRsp.FormationArr)
  return formationarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderEnemyFormation >*
TArenaHighOrderGetEnemyFormationRsp::mutable_formationarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderGetEnemyFormationRsp.FormationArr)
  return &formationarr_;
}

// repeated .pb.TRankSingle RankArr = 2;
inline int TArenaHighOrderGetEnemyFormationRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TArenaHighOrderGetEnemyFormationRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TRankSingle& TArenaHighOrderGetEnemyFormationRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetEnemyFormationRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TRankSingle* TArenaHighOrderGetEnemyFormationRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderGetEnemyFormationRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TRankSingle* TArenaHighOrderGetEnemyFormationRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderGetEnemyFormationRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >&
TArenaHighOrderGetEnemyFormationRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderGetEnemyFormationRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >*
TArenaHighOrderGetEnemyFormationRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderGetEnemyFormationRsp.RankArr)
  return &rankarr_;
}

// -------------------------------------------------------------------

// TUnitViewInfo

// required uint32 Hid = 1;
inline bool TUnitViewInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnitViewInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnitViewInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnitViewInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TUnitViewInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TUnitViewInfo.Hid)
  return hid_;
}
inline void TUnitViewInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitViewInfo.Hid)
}

// required uint32 Pos = 2;
inline bool TUnitViewInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUnitViewInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUnitViewInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUnitViewInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TUnitViewInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TUnitViewInfo.Pos)
  return pos_;
}
inline void TUnitViewInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitViewInfo.Pos)
}

// required uint32 Level = 3;
inline bool TUnitViewInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUnitViewInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUnitViewInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUnitViewInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TUnitViewInfo::level() const {
  // @@protoc_insertion_point(field_get:pb.TUnitViewInfo.Level)
  return level_;
}
inline void TUnitViewInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitViewInfo.Level)
}

// optional uint32 Star = 4;
inline bool TUnitViewInfo::has_star() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUnitViewInfo::set_has_star() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUnitViewInfo::clear_has_star() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUnitViewInfo::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 TUnitViewInfo::star() const {
  // @@protoc_insertion_point(field_get:pb.TUnitViewInfo.Star)
  return star_;
}
inline void TUnitViewInfo::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitViewInfo.Star)
}

// optional uint64 CurHp = 5;
inline bool TUnitViewInfo::has_curhp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TUnitViewInfo::set_has_curhp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TUnitViewInfo::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TUnitViewInfo::clear_curhp() {
  curhp_ = GOOGLE_ULONGLONG(0);
  clear_has_curhp();
}
inline ::google::protobuf::uint64 TUnitViewInfo::curhp() const {
  // @@protoc_insertion_point(field_get:pb.TUnitViewInfo.CurHp)
  return curhp_;
}
inline void TUnitViewInfo::set_curhp(::google::protobuf::uint64 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitViewInfo.CurHp)
}

// optional uint64 MaxHp = 6;
inline bool TUnitViewInfo::has_maxhp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TUnitViewInfo::set_has_maxhp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TUnitViewInfo::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TUnitViewInfo::clear_maxhp() {
  maxhp_ = GOOGLE_ULONGLONG(0);
  clear_has_maxhp();
}
inline ::google::protobuf::uint64 TUnitViewInfo::maxhp() const {
  // @@protoc_insertion_point(field_get:pb.TUnitViewInfo.MaxHp)
  return maxhp_;
}
inline void TUnitViewInfo::set_maxhp(::google::protobuf::uint64 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitViewInfo.MaxHp)
}

// optional uint64 DamageOut = 7;
inline bool TUnitViewInfo::has_damageout() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TUnitViewInfo::set_has_damageout() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TUnitViewInfo::clear_has_damageout() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TUnitViewInfo::clear_damageout() {
  damageout_ = GOOGLE_ULONGLONG(0);
  clear_has_damageout();
}
inline ::google::protobuf::uint64 TUnitViewInfo::damageout() const {
  // @@protoc_insertion_point(field_get:pb.TUnitViewInfo.DamageOut)
  return damageout_;
}
inline void TUnitViewInfo::set_damageout(::google::protobuf::uint64 value) {
  set_has_damageout();
  damageout_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitViewInfo.DamageOut)
}

// optional uint64 DamageIn = 8;
inline bool TUnitViewInfo::has_damagein() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TUnitViewInfo::set_has_damagein() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TUnitViewInfo::clear_has_damagein() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TUnitViewInfo::clear_damagein() {
  damagein_ = GOOGLE_ULONGLONG(0);
  clear_has_damagein();
}
inline ::google::protobuf::uint64 TUnitViewInfo::damagein() const {
  // @@protoc_insertion_point(field_get:pb.TUnitViewInfo.DamageIn)
  return damagein_;
}
inline void TUnitViewInfo::set_damagein(::google::protobuf::uint64 value) {
  set_has_damagein();
  damagein_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitViewInfo.DamageIn)
}

// optional uint32 Htid = 9;
inline bool TUnitViewInfo::has_htid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TUnitViewInfo::set_has_htid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TUnitViewInfo::clear_has_htid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TUnitViewInfo::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TUnitViewInfo::htid() const {
  // @@protoc_insertion_point(field_get:pb.TUnitViewInfo.Htid)
  return htid_;
}
inline void TUnitViewInfo::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitViewInfo.Htid)
}

// optional uint64 HealOut = 10;
inline bool TUnitViewInfo::has_healout() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TUnitViewInfo::set_has_healout() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TUnitViewInfo::clear_has_healout() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TUnitViewInfo::clear_healout() {
  healout_ = GOOGLE_ULONGLONG(0);
  clear_has_healout();
}
inline ::google::protobuf::uint64 TUnitViewInfo::healout() const {
  // @@protoc_insertion_point(field_get:pb.TUnitViewInfo.HealOut)
  return healout_;
}
inline void TUnitViewInfo::set_healout(::google::protobuf::uint64 value) {
  set_has_healout();
  healout_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitViewInfo.HealOut)
}

// -------------------------------------------------------------------

// TArmyViewInfo

// repeated .pb.TUnitViewInfo UnitArr = 1;
inline int TArmyViewInfo::unitarr_size() const {
  return unitarr_.size();
}
inline void TArmyViewInfo::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TUnitViewInfo& TArmyViewInfo::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArmyViewInfo.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TUnitViewInfo* TArmyViewInfo::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArmyViewInfo.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TUnitViewInfo* TArmyViewInfo::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TArmyViewInfo.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitViewInfo >&
TArmyViewInfo::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TArmyViewInfo.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitViewInfo >*
TArmyViewInfo::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArmyViewInfo.UnitArr)
  return &unitarr_;
}

// -------------------------------------------------------------------

// TArenaHighOrderFormationRecord

// optional uint32 FormationId = 1;
inline bool TArenaHighOrderFormationRecord::has_formationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderFormationRecord::set_has_formationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderFormationRecord::clear_has_formationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderFormationRecord::clear_formationid() {
  formationid_ = 0u;
  clear_has_formationid();
}
inline ::google::protobuf::uint32 TArenaHighOrderFormationRecord::formationid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderFormationRecord.FormationId)
  return formationid_;
}
inline void TArenaHighOrderFormationRecord::set_formationid(::google::protobuf::uint32 value) {
  set_has_formationid();
  formationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderFormationRecord.FormationId)
}

// optional uint64 RecordId = 2;
inline bool TArenaHighOrderFormationRecord::has_recordid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHighOrderFormationRecord::set_has_recordid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHighOrderFormationRecord::clear_has_recordid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHighOrderFormationRecord::clear_recordid() {
  recordid_ = GOOGLE_ULONGLONG(0);
  clear_has_recordid();
}
inline ::google::protobuf::uint64 TArenaHighOrderFormationRecord::recordid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderFormationRecord.RecordId)
  return recordid_;
}
inline void TArenaHighOrderFormationRecord::set_recordid(::google::protobuf::uint64 value) {
  set_has_recordid();
  recordid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderFormationRecord.RecordId)
}

// optional bool IsWin = 3;
inline bool TArenaHighOrderFormationRecord::has_iswin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaHighOrderFormationRecord::set_has_iswin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaHighOrderFormationRecord::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaHighOrderFormationRecord::clear_iswin() {
  iswin_ = false;
  clear_has_iswin();
}
inline bool TArenaHighOrderFormationRecord::iswin() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderFormationRecord.IsWin)
  return iswin_;
}
inline void TArenaHighOrderFormationRecord::set_iswin(bool value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderFormationRecord.IsWin)
}

// repeated .pb.TArmyViewInfo Army1Arr = 4;
inline int TArenaHighOrderFormationRecord::army1arr_size() const {
  return army1arr_.size();
}
inline void TArenaHighOrderFormationRecord::clear_army1arr() {
  army1arr_.Clear();
}
inline const ::pb::TArmyViewInfo& TArenaHighOrderFormationRecord::army1arr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderFormationRecord.Army1Arr)
  return army1arr_.Get(index);
}
inline ::pb::TArmyViewInfo* TArenaHighOrderFormationRecord::mutable_army1arr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderFormationRecord.Army1Arr)
  return army1arr_.Mutable(index);
}
inline ::pb::TArmyViewInfo* TArenaHighOrderFormationRecord::add_army1arr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderFormationRecord.Army1Arr)
  return army1arr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo >&
TArenaHighOrderFormationRecord::army1arr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderFormationRecord.Army1Arr)
  return army1arr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo >*
TArenaHighOrderFormationRecord::mutable_army1arr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderFormationRecord.Army1Arr)
  return &army1arr_;
}

// repeated .pb.TArmyViewInfo Army2Arr = 5;
inline int TArenaHighOrderFormationRecord::army2arr_size() const {
  return army2arr_.size();
}
inline void TArenaHighOrderFormationRecord::clear_army2arr() {
  army2arr_.Clear();
}
inline const ::pb::TArmyViewInfo& TArenaHighOrderFormationRecord::army2arr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderFormationRecord.Army2Arr)
  return army2arr_.Get(index);
}
inline ::pb::TArmyViewInfo* TArenaHighOrderFormationRecord::mutable_army2arr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderFormationRecord.Army2Arr)
  return army2arr_.Mutable(index);
}
inline ::pb::TArmyViewInfo* TArenaHighOrderFormationRecord::add_army2arr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderFormationRecord.Army2Arr)
  return army2arr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo >&
TArenaHighOrderFormationRecord::army2arr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderFormationRecord.Army2Arr)
  return army2arr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo >*
TArenaHighOrderFormationRecord::mutable_army2arr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderFormationRecord.Army2Arr)
  return &army2arr_;
}

// -------------------------------------------------------------------

// TArenaHighOrderRecordInfo

// optional .pb.TUserSimpleInfo AttackUserInfo = 1;
inline bool TArenaHighOrderRecordInfo::has_attackuserinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderRecordInfo::set_has_attackuserinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderRecordInfo::clear_has_attackuserinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderRecordInfo::clear_attackuserinfo() {
  if (attackuserinfo_ != NULL) attackuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_attackuserinfo();
}
inline const ::pb::TUserSimpleInfo& TArenaHighOrderRecordInfo::attackuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRecordInfo.AttackUserInfo)
  return attackuserinfo_ != NULL ? *attackuserinfo_ : *default_instance_->attackuserinfo_;
}
inline ::pb::TUserSimpleInfo* TArenaHighOrderRecordInfo::mutable_attackuserinfo() {
  set_has_attackuserinfo();
  if (attackuserinfo_ == NULL) attackuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderRecordInfo.AttackUserInfo)
  return attackuserinfo_;
}
inline ::pb::TUserSimpleInfo* TArenaHighOrderRecordInfo::release_attackuserinfo() {
  clear_has_attackuserinfo();
  ::pb::TUserSimpleInfo* temp = attackuserinfo_;
  attackuserinfo_ = NULL;
  return temp;
}
inline void TArenaHighOrderRecordInfo::set_allocated_attackuserinfo(::pb::TUserSimpleInfo* attackuserinfo) {
  delete attackuserinfo_;
  attackuserinfo_ = attackuserinfo;
  if (attackuserinfo) {
    set_has_attackuserinfo();
  } else {
    clear_has_attackuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaHighOrderRecordInfo.AttackUserInfo)
}

// optional .pb.TUserSimpleInfo DefendUserInfo = 2;
inline bool TArenaHighOrderRecordInfo::has_defenduserinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHighOrderRecordInfo::set_has_defenduserinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHighOrderRecordInfo::clear_has_defenduserinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHighOrderRecordInfo::clear_defenduserinfo() {
  if (defenduserinfo_ != NULL) defenduserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_defenduserinfo();
}
inline const ::pb::TUserSimpleInfo& TArenaHighOrderRecordInfo::defenduserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRecordInfo.DefendUserInfo)
  return defenduserinfo_ != NULL ? *defenduserinfo_ : *default_instance_->defenduserinfo_;
}
inline ::pb::TUserSimpleInfo* TArenaHighOrderRecordInfo::mutable_defenduserinfo() {
  set_has_defenduserinfo();
  if (defenduserinfo_ == NULL) defenduserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderRecordInfo.DefendUserInfo)
  return defenduserinfo_;
}
inline ::pb::TUserSimpleInfo* TArenaHighOrderRecordInfo::release_defenduserinfo() {
  clear_has_defenduserinfo();
  ::pb::TUserSimpleInfo* temp = defenduserinfo_;
  defenduserinfo_ = NULL;
  return temp;
}
inline void TArenaHighOrderRecordInfo::set_allocated_defenduserinfo(::pb::TUserSimpleInfo* defenduserinfo) {
  delete defenduserinfo_;
  defenduserinfo_ = defenduserinfo;
  if (defenduserinfo) {
    set_has_defenduserinfo();
  } else {
    clear_has_defenduserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaHighOrderRecordInfo.DefendUserInfo)
}

// optional uint32 AttackPosBofore = 3;
inline bool TArenaHighOrderRecordInfo::has_attackposbofore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaHighOrderRecordInfo::set_has_attackposbofore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaHighOrderRecordInfo::clear_has_attackposbofore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaHighOrderRecordInfo::clear_attackposbofore() {
  attackposbofore_ = 0u;
  clear_has_attackposbofore();
}
inline ::google::protobuf::uint32 TArenaHighOrderRecordInfo::attackposbofore() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRecordInfo.AttackPosBofore)
  return attackposbofore_;
}
inline void TArenaHighOrderRecordInfo::set_attackposbofore(::google::protobuf::uint32 value) {
  set_has_attackposbofore();
  attackposbofore_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderRecordInfo.AttackPosBofore)
}

// optional uint32 AttackPosAfter = 4;
inline bool TArenaHighOrderRecordInfo::has_attackposafter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TArenaHighOrderRecordInfo::set_has_attackposafter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TArenaHighOrderRecordInfo::clear_has_attackposafter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TArenaHighOrderRecordInfo::clear_attackposafter() {
  attackposafter_ = 0u;
  clear_has_attackposafter();
}
inline ::google::protobuf::uint32 TArenaHighOrderRecordInfo::attackposafter() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRecordInfo.AttackPosAfter)
  return attackposafter_;
}
inline void TArenaHighOrderRecordInfo::set_attackposafter(::google::protobuf::uint32 value) {
  set_has_attackposafter();
  attackposafter_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderRecordInfo.AttackPosAfter)
}

// optional uint32 AttackScoresBefore = 5;
inline bool TArenaHighOrderRecordInfo::has_attackscoresbefore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TArenaHighOrderRecordInfo::set_has_attackscoresbefore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TArenaHighOrderRecordInfo::clear_has_attackscoresbefore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TArenaHighOrderRecordInfo::clear_attackscoresbefore() {
  attackscoresbefore_ = 0u;
  clear_has_attackscoresbefore();
}
inline ::google::protobuf::uint32 TArenaHighOrderRecordInfo::attackscoresbefore() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRecordInfo.AttackScoresBefore)
  return attackscoresbefore_;
}
inline void TArenaHighOrderRecordInfo::set_attackscoresbefore(::google::protobuf::uint32 value) {
  set_has_attackscoresbefore();
  attackscoresbefore_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderRecordInfo.AttackScoresBefore)
}

// optional uint32 AttackScoresAfter = 6;
inline bool TArenaHighOrderRecordInfo::has_attackscoresafter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TArenaHighOrderRecordInfo::set_has_attackscoresafter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TArenaHighOrderRecordInfo::clear_has_attackscoresafter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TArenaHighOrderRecordInfo::clear_attackscoresafter() {
  attackscoresafter_ = 0u;
  clear_has_attackscoresafter();
}
inline ::google::protobuf::uint32 TArenaHighOrderRecordInfo::attackscoresafter() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRecordInfo.AttackScoresAfter)
  return attackscoresafter_;
}
inline void TArenaHighOrderRecordInfo::set_attackscoresafter(::google::protobuf::uint32 value) {
  set_has_attackscoresafter();
  attackscoresafter_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderRecordInfo.AttackScoresAfter)
}

// optional uint32 DefendPosBefore = 7;
inline bool TArenaHighOrderRecordInfo::has_defendposbefore() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TArenaHighOrderRecordInfo::set_has_defendposbefore() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TArenaHighOrderRecordInfo::clear_has_defendposbefore() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TArenaHighOrderRecordInfo::clear_defendposbefore() {
  defendposbefore_ = 0u;
  clear_has_defendposbefore();
}
inline ::google::protobuf::uint32 TArenaHighOrderRecordInfo::defendposbefore() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRecordInfo.DefendPosBefore)
  return defendposbefore_;
}
inline void TArenaHighOrderRecordInfo::set_defendposbefore(::google::protobuf::uint32 value) {
  set_has_defendposbefore();
  defendposbefore_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderRecordInfo.DefendPosBefore)
}

// optional uint32 DefendPosAfter = 8;
inline bool TArenaHighOrderRecordInfo::has_defendposafter() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TArenaHighOrderRecordInfo::set_has_defendposafter() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TArenaHighOrderRecordInfo::clear_has_defendposafter() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TArenaHighOrderRecordInfo::clear_defendposafter() {
  defendposafter_ = 0u;
  clear_has_defendposafter();
}
inline ::google::protobuf::uint32 TArenaHighOrderRecordInfo::defendposafter() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRecordInfo.DefendPosAfter)
  return defendposafter_;
}
inline void TArenaHighOrderRecordInfo::set_defendposafter(::google::protobuf::uint32 value) {
  set_has_defendposafter();
  defendposafter_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderRecordInfo.DefendPosAfter)
}

// optional uint32 DefendScoresBefore = 9;
inline bool TArenaHighOrderRecordInfo::has_defendscoresbefore() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TArenaHighOrderRecordInfo::set_has_defendscoresbefore() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TArenaHighOrderRecordInfo::clear_has_defendscoresbefore() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TArenaHighOrderRecordInfo::clear_defendscoresbefore() {
  defendscoresbefore_ = 0u;
  clear_has_defendscoresbefore();
}
inline ::google::protobuf::uint32 TArenaHighOrderRecordInfo::defendscoresbefore() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRecordInfo.DefendScoresBefore)
  return defendscoresbefore_;
}
inline void TArenaHighOrderRecordInfo::set_defendscoresbefore(::google::protobuf::uint32 value) {
  set_has_defendscoresbefore();
  defendscoresbefore_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderRecordInfo.DefendScoresBefore)
}

// optional uint32 DefendScoresAfter = 10;
inline bool TArenaHighOrderRecordInfo::has_defendscoresafter() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TArenaHighOrderRecordInfo::set_has_defendscoresafter() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TArenaHighOrderRecordInfo::clear_has_defendscoresafter() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TArenaHighOrderRecordInfo::clear_defendscoresafter() {
  defendscoresafter_ = 0u;
  clear_has_defendscoresafter();
}
inline ::google::protobuf::uint32 TArenaHighOrderRecordInfo::defendscoresafter() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRecordInfo.DefendScoresAfter)
  return defendscoresafter_;
}
inline void TArenaHighOrderRecordInfo::set_defendscoresafter(::google::protobuf::uint32 value) {
  set_has_defendscoresafter();
  defendscoresafter_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderRecordInfo.DefendScoresAfter)
}

// repeated .pb.TArenaHighOrderFormationRecord RecordArr = 11;
inline int TArenaHighOrderRecordInfo::recordarr_size() const {
  return recordarr_.size();
}
inline void TArenaHighOrderRecordInfo::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TArenaHighOrderFormationRecord& TArenaHighOrderRecordInfo::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRecordInfo.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TArenaHighOrderFormationRecord* TArenaHighOrderRecordInfo::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderRecordInfo.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TArenaHighOrderFormationRecord* TArenaHighOrderRecordInfo::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderRecordInfo.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderFormationRecord >&
TArenaHighOrderRecordInfo::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderRecordInfo.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderFormationRecord >*
TArenaHighOrderRecordInfo::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderRecordInfo.RecordArr)
  return &recordarr_;
}

// optional uint64 RecordTime = 12;
inline bool TArenaHighOrderRecordInfo::has_recordtime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TArenaHighOrderRecordInfo::set_has_recordtime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TArenaHighOrderRecordInfo::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TArenaHighOrderRecordInfo::clear_recordtime() {
  recordtime_ = GOOGLE_ULONGLONG(0);
  clear_has_recordtime();
}
inline ::google::protobuf::uint64 TArenaHighOrderRecordInfo::recordtime() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRecordInfo.RecordTime)
  return recordtime_;
}
inline void TArenaHighOrderRecordInfo::set_recordtime(::google::protobuf::uint64 value) {
  set_has_recordtime();
  recordtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderRecordInfo.RecordTime)
}

// optional uint64 ReadTime = 13;
inline bool TArenaHighOrderRecordInfo::has_readtime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TArenaHighOrderRecordInfo::set_has_readtime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TArenaHighOrderRecordInfo::clear_has_readtime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TArenaHighOrderRecordInfo::clear_readtime() {
  readtime_ = GOOGLE_ULONGLONG(0);
  clear_has_readtime();
}
inline ::google::protobuf::uint64 TArenaHighOrderRecordInfo::readtime() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRecordInfo.ReadTime)
  return readtime_;
}
inline void TArenaHighOrderRecordInfo::set_readtime(::google::protobuf::uint64 value) {
  set_has_readtime();
  readtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderRecordInfo.ReadTime)
}

// optional string AtkServerId = 14;
inline bool TArenaHighOrderRecordInfo::has_atkserverid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TArenaHighOrderRecordInfo::set_has_atkserverid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TArenaHighOrderRecordInfo::clear_has_atkserverid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TArenaHighOrderRecordInfo::clear_atkserverid() {
  if (atkserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atkserverid_->clear();
  }
  clear_has_atkserverid();
}
inline const ::std::string& TArenaHighOrderRecordInfo::atkserverid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRecordInfo.AtkServerId)
  return *atkserverid_;
}
inline void TArenaHighOrderRecordInfo::set_atkserverid(const ::std::string& value) {
  set_has_atkserverid();
  if (atkserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atkserverid_ = new ::std::string;
  }
  atkserverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderRecordInfo.AtkServerId)
}
inline void TArenaHighOrderRecordInfo::set_atkserverid(const char* value) {
  set_has_atkserverid();
  if (atkserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atkserverid_ = new ::std::string;
  }
  atkserverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TArenaHighOrderRecordInfo.AtkServerId)
}
inline void TArenaHighOrderRecordInfo::set_atkserverid(const char* value, size_t size) {
  set_has_atkserverid();
  if (atkserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atkserverid_ = new ::std::string;
  }
  atkserverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TArenaHighOrderRecordInfo.AtkServerId)
}
inline ::std::string* TArenaHighOrderRecordInfo::mutable_atkserverid() {
  set_has_atkserverid();
  if (atkserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atkserverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderRecordInfo.AtkServerId)
  return atkserverid_;
}
inline ::std::string* TArenaHighOrderRecordInfo::release_atkserverid() {
  clear_has_atkserverid();
  if (atkserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = atkserverid_;
    atkserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TArenaHighOrderRecordInfo::set_allocated_atkserverid(::std::string* atkserverid) {
  if (atkserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete atkserverid_;
  }
  if (atkserverid) {
    set_has_atkserverid();
    atkserverid_ = atkserverid;
  } else {
    clear_has_atkserverid();
    atkserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaHighOrderRecordInfo.AtkServerId)
}

// optional string DefServerId = 15;
inline bool TArenaHighOrderRecordInfo::has_defserverid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TArenaHighOrderRecordInfo::set_has_defserverid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TArenaHighOrderRecordInfo::clear_has_defserverid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TArenaHighOrderRecordInfo::clear_defserverid() {
  if (defserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defserverid_->clear();
  }
  clear_has_defserverid();
}
inline const ::std::string& TArenaHighOrderRecordInfo::defserverid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRecordInfo.DefServerId)
  return *defserverid_;
}
inline void TArenaHighOrderRecordInfo::set_defserverid(const ::std::string& value) {
  set_has_defserverid();
  if (defserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defserverid_ = new ::std::string;
  }
  defserverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderRecordInfo.DefServerId)
}
inline void TArenaHighOrderRecordInfo::set_defserverid(const char* value) {
  set_has_defserverid();
  if (defserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defserverid_ = new ::std::string;
  }
  defserverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TArenaHighOrderRecordInfo.DefServerId)
}
inline void TArenaHighOrderRecordInfo::set_defserverid(const char* value, size_t size) {
  set_has_defserverid();
  if (defserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defserverid_ = new ::std::string;
  }
  defserverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TArenaHighOrderRecordInfo.DefServerId)
}
inline ::std::string* TArenaHighOrderRecordInfo::mutable_defserverid() {
  set_has_defserverid();
  if (defserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defserverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderRecordInfo.DefServerId)
  return defserverid_;
}
inline ::std::string* TArenaHighOrderRecordInfo::release_defserverid() {
  clear_has_defserverid();
  if (defserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = defserverid_;
    defserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TArenaHighOrderRecordInfo::set_allocated_defserverid(::std::string* defserverid) {
  if (defserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete defserverid_;
  }
  if (defserverid) {
    set_has_defserverid();
    defserverid_ = defserverid;
  } else {
    clear_has_defserverid();
    defserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaHighOrderRecordInfo.DefServerId)
}

// -------------------------------------------------------------------

// TArenaHighOrderGetBattleRecordReq

// optional uint32 Offset = 1;
inline bool TArenaHighOrderGetBattleRecordReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderGetBattleRecordReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderGetBattleRecordReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderGetBattleRecordReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TArenaHighOrderGetBattleRecordReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetBattleRecordReq.Offset)
  return offset_;
}
inline void TArenaHighOrderGetBattleRecordReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderGetBattleRecordReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TArenaHighOrderGetBattleRecordReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHighOrderGetBattleRecordReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHighOrderGetBattleRecordReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHighOrderGetBattleRecordReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TArenaHighOrderGetBattleRecordReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetBattleRecordReq.Limit)
  return limit_;
}
inline void TArenaHighOrderGetBattleRecordReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderGetBattleRecordReq.Limit)
}

// -------------------------------------------------------------------

// TArenaHighOrderGetBattleRecordRsp

// repeated .pb.TArenaHighOrderRecordInfo RecordArr = 1;
inline int TArenaHighOrderGetBattleRecordRsp::recordarr_size() const {
  return recordarr_.size();
}
inline void TArenaHighOrderGetBattleRecordRsp::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TArenaHighOrderRecordInfo& TArenaHighOrderGetBattleRecordRsp::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetBattleRecordRsp.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TArenaHighOrderRecordInfo* TArenaHighOrderGetBattleRecordRsp::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderGetBattleRecordRsp.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TArenaHighOrderRecordInfo* TArenaHighOrderGetBattleRecordRsp::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderGetBattleRecordRsp.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderRecordInfo >&
TArenaHighOrderGetBattleRecordRsp::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderGetBattleRecordRsp.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderRecordInfo >*
TArenaHighOrderGetBattleRecordRsp::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderGetBattleRecordRsp.RecordArr)
  return &recordarr_;
}

// -------------------------------------------------------------------

// TArenaHighOrderRankInfo

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TArenaHighOrderRankInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderRankInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderRankInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderRankInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TArenaHighOrderRankInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRankInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TArenaHighOrderRankInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderRankInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TArenaHighOrderRankInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TArenaHighOrderRankInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaHighOrderRankInfo.UserInfo)
}

// optional uint32 Position = 2;
inline bool TArenaHighOrderRankInfo::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHighOrderRankInfo::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHighOrderRankInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHighOrderRankInfo::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 TArenaHighOrderRankInfo::position() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRankInfo.Position)
  return position_;
}
inline void TArenaHighOrderRankInfo::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderRankInfo.Position)
}

// optional uint32 Scores = 3;
inline bool TArenaHighOrderRankInfo::has_scores() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaHighOrderRankInfo::set_has_scores() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaHighOrderRankInfo::clear_has_scores() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaHighOrderRankInfo::clear_scores() {
  scores_ = 0u;
  clear_has_scores();
}
inline ::google::protobuf::uint32 TArenaHighOrderRankInfo::scores() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderRankInfo.Scores)
  return scores_;
}
inline void TArenaHighOrderRankInfo::set_scores(::google::protobuf::uint32 value) {
  set_has_scores();
  scores_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderRankInfo.Scores)
}

// -------------------------------------------------------------------

// TArenaHighOrderGetRankListReq

// optional uint32 Offset = 1;
inline bool TArenaHighOrderGetRankListReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderGetRankListReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderGetRankListReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderGetRankListReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TArenaHighOrderGetRankListReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetRankListReq.Offset)
  return offset_;
}
inline void TArenaHighOrderGetRankListReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderGetRankListReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TArenaHighOrderGetRankListReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHighOrderGetRankListReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHighOrderGetRankListReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHighOrderGetRankListReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TArenaHighOrderGetRankListReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetRankListReq.Limit)
  return limit_;
}
inline void TArenaHighOrderGetRankListReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderGetRankListReq.Limit)
}

// -------------------------------------------------------------------

// TArenaHighOrderGetRankListRsp

// repeated .pb.TArenaHighOrderRankInfo RankArr = 1;
inline int TArenaHighOrderGetRankListRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TArenaHighOrderGetRankListRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TArenaHighOrderRankInfo& TArenaHighOrderGetRankListRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetRankListRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TArenaHighOrderRankInfo* TArenaHighOrderGetRankListRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderGetRankListRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TArenaHighOrderRankInfo* TArenaHighOrderGetRankListRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderGetRankListRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderRankInfo >&
TArenaHighOrderGetRankListRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderGetRankListRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderRankInfo >*
TArenaHighOrderGetRankListRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderGetRankListRsp.RankArr)
  return &rankarr_;
}

// optional int32 MyRank = 2;
inline bool TArenaHighOrderGetRankListRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHighOrderGetRankListRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHighOrderGetRankListRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHighOrderGetRankListRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TArenaHighOrderGetRankListRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetRankListRsp.MyRank)
  return myrank_;
}
inline void TArenaHighOrderGetRankListRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderGetRankListRsp.MyRank)
}

// optional int32 MyScores = 3;
inline bool TArenaHighOrderGetRankListRsp::has_myscores() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaHighOrderGetRankListRsp::set_has_myscores() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaHighOrderGetRankListRsp::clear_has_myscores() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaHighOrderGetRankListRsp::clear_myscores() {
  myscores_ = 0;
  clear_has_myscores();
}
inline ::google::protobuf::int32 TArenaHighOrderGetRankListRsp::myscores() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetRankListRsp.MyScores)
  return myscores_;
}
inline void TArenaHighOrderGetRankListRsp::set_myscores(::google::protobuf::int32 value) {
  set_has_myscores();
  myscores_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderGetRankListRsp.MyScores)
}

// -------------------------------------------------------------------

// TArenaHighOrderBattleReq

// optional uint64 EnemyUid = 1;
inline bool TArenaHighOrderBattleReq::has_enemyuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderBattleReq::set_has_enemyuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderBattleReq::clear_has_enemyuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderBattleReq::clear_enemyuid() {
  enemyuid_ = GOOGLE_ULONGLONG(0);
  clear_has_enemyuid();
}
inline ::google::protobuf::uint64 TArenaHighOrderBattleReq::enemyuid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderBattleReq.EnemyUid)
  return enemyuid_;
}
inline void TArenaHighOrderBattleReq::set_enemyuid(::google::protobuf::uint64 value) {
  set_has_enemyuid();
  enemyuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderBattleReq.EnemyUid)
}

// -------------------------------------------------------------------

// TArenaHighOrderBattleRsp

// optional .pb.TArenaHighOrderRecordInfo BattleRecordInfo = 1;
inline bool TArenaHighOrderBattleRsp::has_battlerecordinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderBattleRsp::set_has_battlerecordinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderBattleRsp::clear_has_battlerecordinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderBattleRsp::clear_battlerecordinfo() {
  if (battlerecordinfo_ != NULL) battlerecordinfo_->::pb::TArenaHighOrderRecordInfo::Clear();
  clear_has_battlerecordinfo();
}
inline const ::pb::TArenaHighOrderRecordInfo& TArenaHighOrderBattleRsp::battlerecordinfo() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderBattleRsp.BattleRecordInfo)
  return battlerecordinfo_ != NULL ? *battlerecordinfo_ : *default_instance_->battlerecordinfo_;
}
inline ::pb::TArenaHighOrderRecordInfo* TArenaHighOrderBattleRsp::mutable_battlerecordinfo() {
  set_has_battlerecordinfo();
  if (battlerecordinfo_ == NULL) battlerecordinfo_ = new ::pb::TArenaHighOrderRecordInfo;
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderBattleRsp.BattleRecordInfo)
  return battlerecordinfo_;
}
inline ::pb::TArenaHighOrderRecordInfo* TArenaHighOrderBattleRsp::release_battlerecordinfo() {
  clear_has_battlerecordinfo();
  ::pb::TArenaHighOrderRecordInfo* temp = battlerecordinfo_;
  battlerecordinfo_ = NULL;
  return temp;
}
inline void TArenaHighOrderBattleRsp::set_allocated_battlerecordinfo(::pb::TArenaHighOrderRecordInfo* battlerecordinfo) {
  delete battlerecordinfo_;
  battlerecordinfo_ = battlerecordinfo;
  if (battlerecordinfo) {
    set_has_battlerecordinfo();
  } else {
    clear_has_battlerecordinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaHighOrderBattleRsp.BattleRecordInfo)
}

// repeated .pb.TCommonReward DropArray = 2;
inline int TArenaHighOrderBattleRsp::droparray_size() const {
  return droparray_.size();
}
inline void TArenaHighOrderBattleRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TArenaHighOrderBattleRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderBattleRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TArenaHighOrderBattleRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderBattleRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TArenaHighOrderBattleRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderBattleRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TArenaHighOrderBattleRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderBattleRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TArenaHighOrderBattleRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderBattleRsp.DropArray)
  return &droparray_;
}

// optional uint32 ExtraAtkNum = 3;
inline bool TArenaHighOrderBattleRsp::has_extraatknum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaHighOrderBattleRsp::set_has_extraatknum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaHighOrderBattleRsp::clear_has_extraatknum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaHighOrderBattleRsp::clear_extraatknum() {
  extraatknum_ = 0u;
  clear_has_extraatknum();
}
inline ::google::protobuf::uint32 TArenaHighOrderBattleRsp::extraatknum() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderBattleRsp.ExtraAtkNum)
  return extraatknum_;
}
inline void TArenaHighOrderBattleRsp::set_extraatknum(::google::protobuf::uint32 value) {
  set_has_extraatknum();
  extraatknum_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderBattleRsp.ExtraAtkNum)
}

// optional bytes FirstResultInfo = 4;
inline bool TArenaHighOrderBattleRsp::has_firstresultinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TArenaHighOrderBattleRsp::set_has_firstresultinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TArenaHighOrderBattleRsp::clear_has_firstresultinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TArenaHighOrderBattleRsp::clear_firstresultinfo() {
  if (firstresultinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstresultinfo_->clear();
  }
  clear_has_firstresultinfo();
}
inline const ::std::string& TArenaHighOrderBattleRsp::firstresultinfo() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderBattleRsp.FirstResultInfo)
  return *firstresultinfo_;
}
inline void TArenaHighOrderBattleRsp::set_firstresultinfo(const ::std::string& value) {
  set_has_firstresultinfo();
  if (firstresultinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstresultinfo_ = new ::std::string;
  }
  firstresultinfo_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderBattleRsp.FirstResultInfo)
}
inline void TArenaHighOrderBattleRsp::set_firstresultinfo(const char* value) {
  set_has_firstresultinfo();
  if (firstresultinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstresultinfo_ = new ::std::string;
  }
  firstresultinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TArenaHighOrderBattleRsp.FirstResultInfo)
}
inline void TArenaHighOrderBattleRsp::set_firstresultinfo(const void* value, size_t size) {
  set_has_firstresultinfo();
  if (firstresultinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstresultinfo_ = new ::std::string;
  }
  firstresultinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TArenaHighOrderBattleRsp.FirstResultInfo)
}
inline ::std::string* TArenaHighOrderBattleRsp::mutable_firstresultinfo() {
  set_has_firstresultinfo();
  if (firstresultinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firstresultinfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderBattleRsp.FirstResultInfo)
  return firstresultinfo_;
}
inline ::std::string* TArenaHighOrderBattleRsp::release_firstresultinfo() {
  clear_has_firstresultinfo();
  if (firstresultinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = firstresultinfo_;
    firstresultinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TArenaHighOrderBattleRsp::set_allocated_firstresultinfo(::std::string* firstresultinfo) {
  if (firstresultinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstresultinfo_;
  }
  if (firstresultinfo) {
    set_has_firstresultinfo();
    firstresultinfo_ = firstresultinfo;
  } else {
    clear_has_firstresultinfo();
    firstresultinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaHighOrderBattleRsp.FirstResultInfo)
}

// -------------------------------------------------------------------

// TArenaHighOrderGetSimpleBattleReportReq

// optional string ServerId = 1;
inline bool TArenaHighOrderGetSimpleBattleReportReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderGetSimpleBattleReportReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderGetSimpleBattleReportReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderGetSimpleBattleReportReq::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TArenaHighOrderGetSimpleBattleReportReq::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetSimpleBattleReportReq.ServerId)
  return *serverid_;
}
inline void TArenaHighOrderGetSimpleBattleReportReq::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderGetSimpleBattleReportReq.ServerId)
}
inline void TArenaHighOrderGetSimpleBattleReportReq::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TArenaHighOrderGetSimpleBattleReportReq.ServerId)
}
inline void TArenaHighOrderGetSimpleBattleReportReq::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TArenaHighOrderGetSimpleBattleReportReq.ServerId)
}
inline ::std::string* TArenaHighOrderGetSimpleBattleReportReq::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderGetSimpleBattleReportReq.ServerId)
  return serverid_;
}
inline ::std::string* TArenaHighOrderGetSimpleBattleReportReq::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TArenaHighOrderGetSimpleBattleReportReq::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaHighOrderGetSimpleBattleReportReq.ServerId)
}

// repeated uint64 RidArr = 2;
inline int TArenaHighOrderGetSimpleBattleReportReq::ridarr_size() const {
  return ridarr_.size();
}
inline void TArenaHighOrderGetSimpleBattleReportReq::clear_ridarr() {
  ridarr_.Clear();
}
inline ::google::protobuf::uint64 TArenaHighOrderGetSimpleBattleReportReq::ridarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetSimpleBattleReportReq.RidArr)
  return ridarr_.Get(index);
}
inline void TArenaHighOrderGetSimpleBattleReportReq::set_ridarr(int index, ::google::protobuf::uint64 value) {
  ridarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderGetSimpleBattleReportReq.RidArr)
}
inline void TArenaHighOrderGetSimpleBattleReportReq::add_ridarr(::google::protobuf::uint64 value) {
  ridarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderGetSimpleBattleReportReq.RidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TArenaHighOrderGetSimpleBattleReportReq::ridarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderGetSimpleBattleReportReq.RidArr)
  return ridarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TArenaHighOrderGetSimpleBattleReportReq::mutable_ridarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderGetSimpleBattleReportReq.RidArr)
  return &ridarr_;
}

// -------------------------------------------------------------------

// TArenaHighOrderBattleRecordSimple

// optional .pb.TArmyViewInfo Army1Arr = 4;
inline bool TArenaHighOrderBattleRecordSimple::has_army1arr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderBattleRecordSimple::set_has_army1arr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderBattleRecordSimple::clear_has_army1arr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderBattleRecordSimple::clear_army1arr() {
  if (army1arr_ != NULL) army1arr_->::pb::TArmyViewInfo::Clear();
  clear_has_army1arr();
}
inline const ::pb::TArmyViewInfo& TArenaHighOrderBattleRecordSimple::army1arr() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderBattleRecordSimple.Army1Arr)
  return army1arr_ != NULL ? *army1arr_ : *default_instance_->army1arr_;
}
inline ::pb::TArmyViewInfo* TArenaHighOrderBattleRecordSimple::mutable_army1arr() {
  set_has_army1arr();
  if (army1arr_ == NULL) army1arr_ = new ::pb::TArmyViewInfo;
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderBattleRecordSimple.Army1Arr)
  return army1arr_;
}
inline ::pb::TArmyViewInfo* TArenaHighOrderBattleRecordSimple::release_army1arr() {
  clear_has_army1arr();
  ::pb::TArmyViewInfo* temp = army1arr_;
  army1arr_ = NULL;
  return temp;
}
inline void TArenaHighOrderBattleRecordSimple::set_allocated_army1arr(::pb::TArmyViewInfo* army1arr) {
  delete army1arr_;
  army1arr_ = army1arr;
  if (army1arr) {
    set_has_army1arr();
  } else {
    clear_has_army1arr();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaHighOrderBattleRecordSimple.Army1Arr)
}

// optional .pb.TArmyViewInfo Army2Arr = 5;
inline bool TArenaHighOrderBattleRecordSimple::has_army2arr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHighOrderBattleRecordSimple::set_has_army2arr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHighOrderBattleRecordSimple::clear_has_army2arr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHighOrderBattleRecordSimple::clear_army2arr() {
  if (army2arr_ != NULL) army2arr_->::pb::TArmyViewInfo::Clear();
  clear_has_army2arr();
}
inline const ::pb::TArmyViewInfo& TArenaHighOrderBattleRecordSimple::army2arr() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderBattleRecordSimple.Army2Arr)
  return army2arr_ != NULL ? *army2arr_ : *default_instance_->army2arr_;
}
inline ::pb::TArmyViewInfo* TArenaHighOrderBattleRecordSimple::mutable_army2arr() {
  set_has_army2arr();
  if (army2arr_ == NULL) army2arr_ = new ::pb::TArmyViewInfo;
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderBattleRecordSimple.Army2Arr)
  return army2arr_;
}
inline ::pb::TArmyViewInfo* TArenaHighOrderBattleRecordSimple::release_army2arr() {
  clear_has_army2arr();
  ::pb::TArmyViewInfo* temp = army2arr_;
  army2arr_ = NULL;
  return temp;
}
inline void TArenaHighOrderBattleRecordSimple::set_allocated_army2arr(::pb::TArmyViewInfo* army2arr) {
  delete army2arr_;
  army2arr_ = army2arr;
  if (army2arr) {
    set_has_army2arr();
  } else {
    clear_has_army2arr();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaHighOrderBattleRecordSimple.Army2Arr)
}

// -------------------------------------------------------------------

// TArenaHighOrderGetSimpleBattleReportRsp

// repeated .pb.TArenaHighOrderBattleRecordSimple RecordArr = 1;
inline int TArenaHighOrderGetSimpleBattleReportRsp::recordarr_size() const {
  return recordarr_.size();
}
inline void TArenaHighOrderGetSimpleBattleReportRsp::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TArenaHighOrderBattleRecordSimple& TArenaHighOrderGetSimpleBattleReportRsp::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetSimpleBattleReportRsp.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TArenaHighOrderBattleRecordSimple* TArenaHighOrderGetSimpleBattleReportRsp::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderGetSimpleBattleReportRsp.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TArenaHighOrderBattleRecordSimple* TArenaHighOrderGetSimpleBattleReportRsp::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderGetSimpleBattleReportRsp.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderBattleRecordSimple >&
TArenaHighOrderGetSimpleBattleReportRsp::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderGetSimpleBattleReportRsp.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderBattleRecordSimple >*
TArenaHighOrderGetSimpleBattleReportRsp::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderGetSimpleBattleReportRsp.RecordArr)
  return &recordarr_;
}

// -------------------------------------------------------------------

// TArenaHighOrderBuyAtkNumReq

// optional uint32 Num = 1;
inline bool TArenaHighOrderBuyAtkNumReq::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderBuyAtkNumReq::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderBuyAtkNumReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderBuyAtkNumReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TArenaHighOrderBuyAtkNumReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderBuyAtkNumReq.Num)
  return num_;
}
inline void TArenaHighOrderBuyAtkNumReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderBuyAtkNumReq.Num)
}

// -------------------------------------------------------------------

// TArenaHighOrderBuyAtkNumRsp

// optional uint32 ExtraAtkNum = 1;
inline bool TArenaHighOrderBuyAtkNumRsp::has_extraatknum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderBuyAtkNumRsp::set_has_extraatknum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderBuyAtkNumRsp::clear_has_extraatknum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderBuyAtkNumRsp::clear_extraatknum() {
  extraatknum_ = 0u;
  clear_has_extraatknum();
}
inline ::google::protobuf::uint32 TArenaHighOrderBuyAtkNumRsp::extraatknum() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderBuyAtkNumRsp.ExtraAtkNum)
  return extraatknum_;
}
inline void TArenaHighOrderBuyAtkNumRsp::set_extraatknum(::google::protobuf::uint32 value) {
  set_has_extraatknum();
  extraatknum_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderBuyAtkNumRsp.ExtraAtkNum)
}

// optional uint32 BuyNum = 2;
inline bool TArenaHighOrderBuyAtkNumRsp::has_buynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHighOrderBuyAtkNumRsp::set_has_buynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHighOrderBuyAtkNumRsp::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHighOrderBuyAtkNumRsp::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TArenaHighOrderBuyAtkNumRsp::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderBuyAtkNumRsp.BuyNum)
  return buynum_;
}
inline void TArenaHighOrderBuyAtkNumRsp::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderBuyAtkNumRsp.BuyNum)
}

// -------------------------------------------------------------------

// TArenaHighOrderServerPush

// optional .pb.TArenaHighOrderRecordInfo RecordInfo = 1;
inline bool TArenaHighOrderServerPush::has_recordinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderServerPush::set_has_recordinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderServerPush::clear_has_recordinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderServerPush::clear_recordinfo() {
  if (recordinfo_ != NULL) recordinfo_->::pb::TArenaHighOrderRecordInfo::Clear();
  clear_has_recordinfo();
}
inline const ::pb::TArenaHighOrderRecordInfo& TArenaHighOrderServerPush::recordinfo() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderServerPush.RecordInfo)
  return recordinfo_ != NULL ? *recordinfo_ : *default_instance_->recordinfo_;
}
inline ::pb::TArenaHighOrderRecordInfo* TArenaHighOrderServerPush::mutable_recordinfo() {
  set_has_recordinfo();
  if (recordinfo_ == NULL) recordinfo_ = new ::pb::TArenaHighOrderRecordInfo;
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderServerPush.RecordInfo)
  return recordinfo_;
}
inline ::pb::TArenaHighOrderRecordInfo* TArenaHighOrderServerPush::release_recordinfo() {
  clear_has_recordinfo();
  ::pb::TArenaHighOrderRecordInfo* temp = recordinfo_;
  recordinfo_ = NULL;
  return temp;
}
inline void TArenaHighOrderServerPush::set_allocated_recordinfo(::pb::TArenaHighOrderRecordInfo* recordinfo) {
  delete recordinfo_;
  recordinfo_ = recordinfo;
  if (recordinfo) {
    set_has_recordinfo();
  } else {
    clear_has_recordinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaHighOrderServerPush.RecordInfo)
}

// repeated .pb.TArenaHighOrderUser EnemyArr = 2;
inline int TArenaHighOrderServerPush::enemyarr_size() const {
  return enemyarr_.size();
}
inline void TArenaHighOrderServerPush::clear_enemyarr() {
  enemyarr_.Clear();
}
inline const ::pb::TArenaHighOrderUser& TArenaHighOrderServerPush::enemyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderServerPush.EnemyArr)
  return enemyarr_.Get(index);
}
inline ::pb::TArenaHighOrderUser* TArenaHighOrderServerPush::mutable_enemyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderServerPush.EnemyArr)
  return enemyarr_.Mutable(index);
}
inline ::pb::TArenaHighOrderUser* TArenaHighOrderServerPush::add_enemyarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderServerPush.EnemyArr)
  return enemyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderUser >&
TArenaHighOrderServerPush::enemyarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderServerPush.EnemyArr)
  return enemyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderUser >*
TArenaHighOrderServerPush::mutable_enemyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderServerPush.EnemyArr)
  return &enemyarr_;
}

// -------------------------------------------------------------------

// TArenaHighOrderReceiveScoresRewardReq

// optional uint32 Tid = 1;
inline bool TArenaHighOrderReceiveScoresRewardReq::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderReceiveScoresRewardReq::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderReceiveScoresRewardReq::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderReceiveScoresRewardReq::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TArenaHighOrderReceiveScoresRewardReq::tid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderReceiveScoresRewardReq.Tid)
  return tid_;
}
inline void TArenaHighOrderReceiveScoresRewardReq::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderReceiveScoresRewardReq.Tid)
}

// -------------------------------------------------------------------

// TArenaHighOrderReceiveScoresRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TArenaHighOrderReceiveScoresRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TArenaHighOrderReceiveScoresRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TArenaHighOrderReceiveScoresRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderReceiveScoresRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TArenaHighOrderReceiveScoresRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderReceiveScoresRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TArenaHighOrderReceiveScoresRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderReceiveScoresRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TArenaHighOrderReceiveScoresRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderReceiveScoresRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TArenaHighOrderReceiveScoresRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderReceiveScoresRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TArenaHighOrderGetEnemyFormationByOtherServerReq

// optional uint64 Uid = 1;
inline bool TArenaHighOrderGetEnemyFormationByOtherServerReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderGetEnemyFormationByOtherServerReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderGetEnemyFormationByOtherServerReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderGetEnemyFormationByOtherServerReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TArenaHighOrderGetEnemyFormationByOtherServerReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetEnemyFormationByOtherServerReq.Uid)
  return uid_;
}
inline void TArenaHighOrderGetEnemyFormationByOtherServerReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderGetEnemyFormationByOtherServerReq.Uid)
}

// -------------------------------------------------------------------

// TArenaHighOrderGetEnemyFormationByOtherServerRsp

// repeated .pb.TArenaHighOrderEnemyFormation FormationArray = 1;
inline int TArenaHighOrderGetEnemyFormationByOtherServerRsp::formationarray_size() const {
  return formationarray_.size();
}
inline void TArenaHighOrderGetEnemyFormationByOtherServerRsp::clear_formationarray() {
  formationarray_.Clear();
}
inline const ::pb::TArenaHighOrderEnemyFormation& TArenaHighOrderGetEnemyFormationByOtherServerRsp::formationarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp.FormationArray)
  return formationarray_.Get(index);
}
inline ::pb::TArenaHighOrderEnemyFormation* TArenaHighOrderGetEnemyFormationByOtherServerRsp::mutable_formationarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp.FormationArray)
  return formationarray_.Mutable(index);
}
inline ::pb::TArenaHighOrderEnemyFormation* TArenaHighOrderGetEnemyFormationByOtherServerRsp::add_formationarray() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp.FormationArray)
  return formationarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderEnemyFormation >&
TArenaHighOrderGetEnemyFormationByOtherServerRsp::formationarray() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp.FormationArray)
  return formationarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderEnemyFormation >*
TArenaHighOrderGetEnemyFormationByOtherServerRsp::mutable_formationarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp.FormationArray)
  return &formationarray_;
}

// repeated .pb.TRankSingle RankArr = 2;
inline int TArenaHighOrderGetEnemyFormationByOtherServerRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TArenaHighOrderGetEnemyFormationByOtherServerRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TRankSingle& TArenaHighOrderGetEnemyFormationByOtherServerRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TRankSingle* TArenaHighOrderGetEnemyFormationByOtherServerRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TRankSingle* TArenaHighOrderGetEnemyFormationByOtherServerRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >&
TArenaHighOrderGetEnemyFormationByOtherServerRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >*
TArenaHighOrderGetEnemyFormationByOtherServerRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp.RankArr)
  return &rankarr_;
}

// repeated uint32 BeastSkillArr = 3;
inline int TArenaHighOrderGetEnemyFormationByOtherServerRsp::beastskillarr_size() const {
  return beastskillarr_.size();
}
inline void TArenaHighOrderGetEnemyFormationByOtherServerRsp::clear_beastskillarr() {
  beastskillarr_.Clear();
}
inline ::google::protobuf::uint32 TArenaHighOrderGetEnemyFormationByOtherServerRsp::beastskillarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp.BeastSkillArr)
  return beastskillarr_.Get(index);
}
inline void TArenaHighOrderGetEnemyFormationByOtherServerRsp::set_beastskillarr(int index, ::google::protobuf::uint32 value) {
  beastskillarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp.BeastSkillArr)
}
inline void TArenaHighOrderGetEnemyFormationByOtherServerRsp::add_beastskillarr(::google::protobuf::uint32 value) {
  beastskillarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp.BeastSkillArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TArenaHighOrderGetEnemyFormationByOtherServerRsp::beastskillarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp.BeastSkillArr)
  return beastskillarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TArenaHighOrderGetEnemyFormationByOtherServerRsp::mutable_beastskillarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp.BeastSkillArr)
  return &beastskillarr_;
}

// -------------------------------------------------------------------

// TArenaHighOrderSetAttackedRecordByOtherServerReq

// optional uint64 Uid = 1;
inline bool TArenaHighOrderSetAttackedRecordByOtherServerReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TArenaHighOrderSetAttackedRecordByOtherServerReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderSetAttackedRecordByOtherServerReq.Uid)
  return uid_;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderSetAttackedRecordByOtherServerReq.Uid)
}

// optional int32 ScoresDelta = 2;
inline bool TArenaHighOrderSetAttackedRecordByOtherServerReq::has_scoresdelta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerReq::set_has_scoresdelta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerReq::clear_has_scoresdelta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerReq::clear_scoresdelta() {
  scoresdelta_ = 0;
  clear_has_scoresdelta();
}
inline ::google::protobuf::int32 TArenaHighOrderSetAttackedRecordByOtherServerReq::scoresdelta() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderSetAttackedRecordByOtherServerReq.ScoresDelta)
  return scoresdelta_;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerReq::set_scoresdelta(::google::protobuf::int32 value) {
  set_has_scoresdelta();
  scoresdelta_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderSetAttackedRecordByOtherServerReq.ScoresDelta)
}

// optional .pb.TArenaHighOrderRecordInfo BattleRecordInfo = 3;
inline bool TArenaHighOrderSetAttackedRecordByOtherServerReq::has_battlerecordinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerReq::set_has_battlerecordinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerReq::clear_has_battlerecordinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerReq::clear_battlerecordinfo() {
  if (battlerecordinfo_ != NULL) battlerecordinfo_->::pb::TArenaHighOrderRecordInfo::Clear();
  clear_has_battlerecordinfo();
}
inline const ::pb::TArenaHighOrderRecordInfo& TArenaHighOrderSetAttackedRecordByOtherServerReq::battlerecordinfo() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderSetAttackedRecordByOtherServerReq.BattleRecordInfo)
  return battlerecordinfo_ != NULL ? *battlerecordinfo_ : *default_instance_->battlerecordinfo_;
}
inline ::pb::TArenaHighOrderRecordInfo* TArenaHighOrderSetAttackedRecordByOtherServerReq::mutable_battlerecordinfo() {
  set_has_battlerecordinfo();
  if (battlerecordinfo_ == NULL) battlerecordinfo_ = new ::pb::TArenaHighOrderRecordInfo;
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderSetAttackedRecordByOtherServerReq.BattleRecordInfo)
  return battlerecordinfo_;
}
inline ::pb::TArenaHighOrderRecordInfo* TArenaHighOrderSetAttackedRecordByOtherServerReq::release_battlerecordinfo() {
  clear_has_battlerecordinfo();
  ::pb::TArenaHighOrderRecordInfo* temp = battlerecordinfo_;
  battlerecordinfo_ = NULL;
  return temp;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerReq::set_allocated_battlerecordinfo(::pb::TArenaHighOrderRecordInfo* battlerecordinfo) {
  delete battlerecordinfo_;
  battlerecordinfo_ = battlerecordinfo;
  if (battlerecordinfo) {
    set_has_battlerecordinfo();
  } else {
    clear_has_battlerecordinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaHighOrderSetAttackedRecordByOtherServerReq.BattleRecordInfo)
}

// -------------------------------------------------------------------

// TArenaHighOrderSetAttackedRecordByOtherServerRsp

// optional uint32 Scores = 1;
inline bool TArenaHighOrderSetAttackedRecordByOtherServerRsp::has_scores() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerRsp::set_has_scores() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerRsp::clear_has_scores() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerRsp::clear_scores() {
  scores_ = 0u;
  clear_has_scores();
}
inline ::google::protobuf::uint32 TArenaHighOrderSetAttackedRecordByOtherServerRsp::scores() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderSetAttackedRecordByOtherServerRsp.Scores)
  return scores_;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerRsp::set_scores(::google::protobuf::uint32 value) {
  set_has_scores();
  scores_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderSetAttackedRecordByOtherServerRsp.Scores)
}

// optional int32 Rank = 2;
inline bool TArenaHighOrderSetAttackedRecordByOtherServerRsp::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerRsp::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerRsp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerRsp::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 TArenaHighOrderSetAttackedRecordByOtherServerRsp::rank() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderSetAttackedRecordByOtherServerRsp.Rank)
  return rank_;
}
inline void TArenaHighOrderSetAttackedRecordByOtherServerRsp::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderSetAttackedRecordByOtherServerRsp.Rank)
}

// -------------------------------------------------------------------

// TArenaHighOrderGetTotalFightForceByOtherServerReq

// optional uint64 Uid = 1;
inline bool TArenaHighOrderGetTotalFightForceByOtherServerReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderGetTotalFightForceByOtherServerReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderGetTotalFightForceByOtherServerReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderGetTotalFightForceByOtherServerReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TArenaHighOrderGetTotalFightForceByOtherServerReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetTotalFightForceByOtherServerReq.Uid)
  return uid_;
}
inline void TArenaHighOrderGetTotalFightForceByOtherServerReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderGetTotalFightForceByOtherServerReq.Uid)
}

// -------------------------------------------------------------------

// TArenaHighOrderGetTotalFightForceByOtherServerRsp

// optional uint64 FightForce = 1;
inline bool TArenaHighOrderGetTotalFightForceByOtherServerRsp::has_fightforce() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderGetTotalFightForceByOtherServerRsp::set_has_fightforce() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderGetTotalFightForceByOtherServerRsp::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderGetTotalFightForceByOtherServerRsp::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TArenaHighOrderGetTotalFightForceByOtherServerRsp::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderGetTotalFightForceByOtherServerRsp.FightForce)
  return fightforce_;
}
inline void TArenaHighOrderGetTotalFightForceByOtherServerRsp::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderGetTotalFightForceByOtherServerRsp.FightForce)
}

// -------------------------------------------------------------------

// TArenaHighOrderQuickChallengServerReq

// optional uint64 Uid = 1;
inline bool TArenaHighOrderQuickChallengServerReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderQuickChallengServerReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderQuickChallengServerReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderQuickChallengServerReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TArenaHighOrderQuickChallengServerReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderQuickChallengServerReq.Uid)
  return uid_;
}
inline void TArenaHighOrderQuickChallengServerReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderQuickChallengServerReq.Uid)
}

// optional uint32 Num = 2;
inline bool TArenaHighOrderQuickChallengServerReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHighOrderQuickChallengServerReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHighOrderQuickChallengServerReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHighOrderQuickChallengServerReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TArenaHighOrderQuickChallengServerReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderQuickChallengServerReq.Num)
  return num_;
}
inline void TArenaHighOrderQuickChallengServerReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderQuickChallengServerReq.Num)
}

// -------------------------------------------------------------------

// TArenaHighOrderQuickChallengSingle

// optional uint32 MyScores = 1;
inline bool TArenaHighOrderQuickChallengSingle::has_myscores() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaHighOrderQuickChallengSingle::set_has_myscores() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaHighOrderQuickChallengSingle::clear_has_myscores() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaHighOrderQuickChallengSingle::clear_myscores() {
  myscores_ = 0u;
  clear_has_myscores();
}
inline ::google::protobuf::uint32 TArenaHighOrderQuickChallengSingle::myscores() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderQuickChallengSingle.MyScores)
  return myscores_;
}
inline void TArenaHighOrderQuickChallengSingle::set_myscores(::google::protobuf::uint32 value) {
  set_has_myscores();
  myscores_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderQuickChallengSingle.MyScores)
}

// optional int32 MyRank = 2;
inline bool TArenaHighOrderQuickChallengSingle::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaHighOrderQuickChallengSingle::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaHighOrderQuickChallengSingle::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaHighOrderQuickChallengSingle::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TArenaHighOrderQuickChallengSingle::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderQuickChallengSingle.MyRank)
  return myrank_;
}
inline void TArenaHighOrderQuickChallengSingle::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaHighOrderQuickChallengSingle.MyRank)
}

// -------------------------------------------------------------------

// TArenaHighOrderQuickChallengServerRsp

// repeated .pb.TArenaHighOrderQuickChallengSingle ResultArr = 1;
inline int TArenaHighOrderQuickChallengServerRsp::resultarr_size() const {
  return resultarr_.size();
}
inline void TArenaHighOrderQuickChallengServerRsp::clear_resultarr() {
  resultarr_.Clear();
}
inline const ::pb::TArenaHighOrderQuickChallengSingle& TArenaHighOrderQuickChallengServerRsp::resultarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaHighOrderQuickChallengServerRsp.ResultArr)
  return resultarr_.Get(index);
}
inline ::pb::TArenaHighOrderQuickChallengSingle* TArenaHighOrderQuickChallengServerRsp::mutable_resultarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaHighOrderQuickChallengServerRsp.ResultArr)
  return resultarr_.Mutable(index);
}
inline ::pb::TArenaHighOrderQuickChallengSingle* TArenaHighOrderQuickChallengServerRsp::add_resultarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaHighOrderQuickChallengServerRsp.ResultArr)
  return resultarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderQuickChallengSingle >&
TArenaHighOrderQuickChallengServerRsp::resultarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaHighOrderQuickChallengServerRsp.ResultArr)
  return resultarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaHighOrderQuickChallengSingle >*
TArenaHighOrderQuickChallengServerRsp::mutable_resultarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaHighOrderQuickChallengServerRsp.ResultArr)
  return &resultarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fArenaHighOrder_2eproto__INCLUDED
