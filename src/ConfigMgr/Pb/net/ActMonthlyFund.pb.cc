// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActMonthlyFund.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActMonthlyFund.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActMonthlyFundSignInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActMonthlyFundSignInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActMonthlyFundGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActMonthlyFundGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActMonthlyFundGetRandGiftRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActMonthlyFundGetRandGiftRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActMonthlyFundGetRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActMonthlyFundGetRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActMonthlyFundAutoGetRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActMonthlyFundAutoGetRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActMonthlyFundAutoGetRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActMonthlyFundAutoGetRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActMonthlyFundGetAllBuyGiftRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActMonthlyFundGetAllBuyGiftRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActMonthlyFundNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActMonthlyFundNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActMonthlyFund_2eproto() {
  protobuf_AddDesc_net_2fActMonthlyFund_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActMonthlyFund.proto");
  GOOGLE_CHECK(file != NULL);
  TActMonthlyFundSignInfo_descriptor_ = file->message_type(0);
  static const int TActMonthlyFundSignInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundSignInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundSignInfo, paytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundSignInfo, rewardidarr_),
  };
  TActMonthlyFundSignInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActMonthlyFundSignInfo_descriptor_,
      TActMonthlyFundSignInfo::default_instance_,
      TActMonthlyFundSignInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundSignInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundSignInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActMonthlyFundSignInfo));
  TActMonthlyFundGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TActMonthlyFundGetInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundGetInfoRsp, signarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundGetInfoRsp, randgiftgettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundGetInfoRsp, allbuygiftgettime_),
  };
  TActMonthlyFundGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActMonthlyFundGetInfoRsp_descriptor_,
      TActMonthlyFundGetInfoRsp::default_instance_,
      TActMonthlyFundGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActMonthlyFundGetInfoRsp));
  TActMonthlyFundGetRandGiftRsp_descriptor_ = file->message_type(2);
  static const int TActMonthlyFundGetRandGiftRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundGetRandGiftRsp, randgiftgettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundGetRandGiftRsp, droparr_),
  };
  TActMonthlyFundGetRandGiftRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActMonthlyFundGetRandGiftRsp_descriptor_,
      TActMonthlyFundGetRandGiftRsp::default_instance_,
      TActMonthlyFundGetRandGiftRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundGetRandGiftRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundGetRandGiftRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActMonthlyFundGetRandGiftRsp));
  TActMonthlyFundGetRewardReq_descriptor_ = file->message_type(3);
  static const int TActMonthlyFundGetRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundGetRewardReq, actid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundGetRewardReq, rewardid_),
  };
  TActMonthlyFundGetRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActMonthlyFundGetRewardReq_descriptor_,
      TActMonthlyFundGetRewardReq::default_instance_,
      TActMonthlyFundGetRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundGetRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundGetRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActMonthlyFundGetRewardReq));
  TActMonthlyFundAutoGetRewardReq_descriptor_ = file->message_type(4);
  static const int TActMonthlyFundAutoGetRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundAutoGetRewardReq, actid_),
  };
  TActMonthlyFundAutoGetRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActMonthlyFundAutoGetRewardReq_descriptor_,
      TActMonthlyFundAutoGetRewardReq::default_instance_,
      TActMonthlyFundAutoGetRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundAutoGetRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundAutoGetRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActMonthlyFundAutoGetRewardReq));
  TActMonthlyFundAutoGetRewardRsp_descriptor_ = file->message_type(5);
  static const int TActMonthlyFundAutoGetRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundAutoGetRewardRsp, rewardidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundAutoGetRewardRsp, rewardarr_),
  };
  TActMonthlyFundAutoGetRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActMonthlyFundAutoGetRewardRsp_descriptor_,
      TActMonthlyFundAutoGetRewardRsp::default_instance_,
      TActMonthlyFundAutoGetRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundAutoGetRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundAutoGetRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActMonthlyFundAutoGetRewardRsp));
  TActMonthlyFundGetAllBuyGiftRsp_descriptor_ = file->message_type(6);
  static const int TActMonthlyFundGetAllBuyGiftRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundGetAllBuyGiftRsp, allbuygiftgettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundGetAllBuyGiftRsp, droparr_),
  };
  TActMonthlyFundGetAllBuyGiftRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActMonthlyFundGetAllBuyGiftRsp_descriptor_,
      TActMonthlyFundGetAllBuyGiftRsp::default_instance_,
      TActMonthlyFundGetAllBuyGiftRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundGetAllBuyGiftRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundGetAllBuyGiftRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActMonthlyFundGetAllBuyGiftRsp));
  TActMonthlyFundNotify_descriptor_ = file->message_type(7);
  static const int TActMonthlyFundNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundNotify, signarr_),
  };
  TActMonthlyFundNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActMonthlyFundNotify_descriptor_,
      TActMonthlyFundNotify::default_instance_,
      TActMonthlyFundNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMonthlyFundNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActMonthlyFundNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActMonthlyFund_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActMonthlyFundSignInfo_descriptor_, &TActMonthlyFundSignInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActMonthlyFundGetInfoRsp_descriptor_, &TActMonthlyFundGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActMonthlyFundGetRandGiftRsp_descriptor_, &TActMonthlyFundGetRandGiftRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActMonthlyFundGetRewardReq_descriptor_, &TActMonthlyFundGetRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActMonthlyFundAutoGetRewardReq_descriptor_, &TActMonthlyFundAutoGetRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActMonthlyFundAutoGetRewardRsp_descriptor_, &TActMonthlyFundAutoGetRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActMonthlyFundGetAllBuyGiftRsp_descriptor_, &TActMonthlyFundGetAllBuyGiftRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActMonthlyFundNotify_descriptor_, &TActMonthlyFundNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActMonthlyFund_2eproto() {
  delete TActMonthlyFundSignInfo::default_instance_;
  delete TActMonthlyFundSignInfo_reflection_;
  delete TActMonthlyFundGetInfoRsp::default_instance_;
  delete TActMonthlyFundGetInfoRsp_reflection_;
  delete TActMonthlyFundGetRandGiftRsp::default_instance_;
  delete TActMonthlyFundGetRandGiftRsp_reflection_;
  delete TActMonthlyFundGetRewardReq::default_instance_;
  delete TActMonthlyFundGetRewardReq_reflection_;
  delete TActMonthlyFundAutoGetRewardReq::default_instance_;
  delete TActMonthlyFundAutoGetRewardReq_reflection_;
  delete TActMonthlyFundAutoGetRewardRsp::default_instance_;
  delete TActMonthlyFundAutoGetRewardRsp_reflection_;
  delete TActMonthlyFundGetAllBuyGiftRsp::default_instance_;
  delete TActMonthlyFundGetAllBuyGiftRsp_reflection_;
  delete TActMonthlyFundNotify::default_instance_;
  delete TActMonthlyFundNotify_reflection_;
}

void protobuf_AddDesc_net_2fActMonthlyFund_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030net/ActMonthlyFund.proto\022\002pb\032\026net/Comm"
    "onReward.proto\"K\n\027TActMonthlyFundSignInf"
    "o\022\n\n\002Id\030\001 \001(\r\022\017\n\007PayTime\030\002 \001(\004\022\023\n\013Reward"
    "IdArr\030\003 \003(\r\"}\n\031TActMonthlyFundGetInfoRsp"
    "\022,\n\007SignArr\030\001 \003(\0132\033.pb.TActMonthlyFundSi"
    "gnInfo\022\027\n\017RandGiftGetTime\030\002 \001(\004\022\031\n\021AllBu"
    "yGiftGetTime\030\003 \001(\004\"\\\n\035TActMonthlyFundGet"
    "RandGiftRsp\022\027\n\017RandGiftGetTime\030\001 \001(\004\022\"\n\007"
    "DropArr\030\002 \003(\0132\021.pb.TCommonReward\">\n\033TAct"
    "MonthlyFundGetRewardReq\022\r\n\005ActId\030\001 \001(\r\022\020"
    "\n\010RewardId\030\002 \001(\r\"0\n\037TActMonthlyFundAutoG"
    "etRewardReq\022\r\n\005ActId\030\001 \001(\r\"\\\n\037TActMonthl"
    "yFundAutoGetRewardRsp\022\023\n\013RewardIdArr\030\001 \003"
    "(\r\022$\n\tRewardArr\030\002 \003(\0132\021.pb.TCommonReward"
    "\"`\n\037TActMonthlyFundGetAllBuyGiftRsp\022\031\n\021A"
    "llBuyGiftGetTime\030\001 \001(\004\022\"\n\007DropArr\030\002 \003(\0132"
    "\021.pb.TCommonReward\"E\n\025TActMonthlyFundNot"
    "ify\022,\n\007SignArr\030\001 \001(\0132\033.pb.TActMonthlyFun"
    "dSignInfo", 729);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActMonthlyFund.proto", &protobuf_RegisterTypes);
  TActMonthlyFundSignInfo::default_instance_ = new TActMonthlyFundSignInfo();
  TActMonthlyFundGetInfoRsp::default_instance_ = new TActMonthlyFundGetInfoRsp();
  TActMonthlyFundGetRandGiftRsp::default_instance_ = new TActMonthlyFundGetRandGiftRsp();
  TActMonthlyFundGetRewardReq::default_instance_ = new TActMonthlyFundGetRewardReq();
  TActMonthlyFundAutoGetRewardReq::default_instance_ = new TActMonthlyFundAutoGetRewardReq();
  TActMonthlyFundAutoGetRewardRsp::default_instance_ = new TActMonthlyFundAutoGetRewardRsp();
  TActMonthlyFundGetAllBuyGiftRsp::default_instance_ = new TActMonthlyFundGetAllBuyGiftRsp();
  TActMonthlyFundNotify::default_instance_ = new TActMonthlyFundNotify();
  TActMonthlyFundSignInfo::default_instance_->InitAsDefaultInstance();
  TActMonthlyFundGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActMonthlyFundGetRandGiftRsp::default_instance_->InitAsDefaultInstance();
  TActMonthlyFundGetRewardReq::default_instance_->InitAsDefaultInstance();
  TActMonthlyFundAutoGetRewardReq::default_instance_->InitAsDefaultInstance();
  TActMonthlyFundAutoGetRewardRsp::default_instance_->InitAsDefaultInstance();
  TActMonthlyFundGetAllBuyGiftRsp::default_instance_->InitAsDefaultInstance();
  TActMonthlyFundNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActMonthlyFund_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActMonthlyFund_2eproto {
  StaticDescriptorInitializer_net_2fActMonthlyFund_2eproto() {
    protobuf_AddDesc_net_2fActMonthlyFund_2eproto();
  }
} static_descriptor_initializer_net_2fActMonthlyFund_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActMonthlyFundSignInfo::kIdFieldNumber;
const int TActMonthlyFundSignInfo::kPayTimeFieldNumber;
const int TActMonthlyFundSignInfo::kRewardIdArrFieldNumber;
#endif  // !_MSC_VER

TActMonthlyFundSignInfo::TActMonthlyFundSignInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActMonthlyFundSignInfo)
}

void TActMonthlyFundSignInfo::InitAsDefaultInstance() {
}

TActMonthlyFundSignInfo::TActMonthlyFundSignInfo(const TActMonthlyFundSignInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActMonthlyFundSignInfo)
}

void TActMonthlyFundSignInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  paytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActMonthlyFundSignInfo::~TActMonthlyFundSignInfo() {
  // @@protoc_insertion_point(destructor:pb.TActMonthlyFundSignInfo)
  SharedDtor();
}

void TActMonthlyFundSignInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActMonthlyFundSignInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActMonthlyFundSignInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActMonthlyFundSignInfo_descriptor_;
}

const TActMonthlyFundSignInfo& TActMonthlyFundSignInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActMonthlyFund_2eproto();
  return *default_instance_;
}

TActMonthlyFundSignInfo* TActMonthlyFundSignInfo::default_instance_ = NULL;

TActMonthlyFundSignInfo* TActMonthlyFundSignInfo::New() const {
  return new TActMonthlyFundSignInfo;
}

void TActMonthlyFundSignInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    paytime_ = GOOGLE_ULONGLONG(0);
  }
  rewardidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActMonthlyFundSignInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActMonthlyFundSignInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PayTime;
        break;
      }

      // optional uint64 PayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_PayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &paytime_)));
          set_has_paytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RewardIdArr;
        break;
      }

      // repeated uint32 RewardIdArr = 3;
      case 3: {
        if (tag == 24) {
         parse_RewardIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_rewardidarr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rewardidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RewardIdArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActMonthlyFundSignInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActMonthlyFundSignInfo)
  return false;
#undef DO_
}

void TActMonthlyFundSignInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActMonthlyFundSignInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 PayTime = 2;
  if (has_paytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->paytime(), output);
  }

  // repeated uint32 RewardIdArr = 3;
  for (int i = 0; i < this->rewardidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->rewardidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActMonthlyFundSignInfo)
}

::google::protobuf::uint8* TActMonthlyFundSignInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActMonthlyFundSignInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 PayTime = 2;
  if (has_paytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->paytime(), target);
  }

  // repeated uint32 RewardIdArr = 3;
  for (int i = 0; i < this->rewardidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->rewardidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActMonthlyFundSignInfo)
  return target;
}

int TActMonthlyFundSignInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 PayTime = 2;
    if (has_paytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->paytime());
    }

  }
  // repeated uint32 RewardIdArr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rewardidarr(i));
    }
    total_size += 1 * this->rewardidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActMonthlyFundSignInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActMonthlyFundSignInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActMonthlyFundSignInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActMonthlyFundSignInfo::MergeFrom(const TActMonthlyFundSignInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardidarr_.MergeFrom(from.rewardidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_paytime()) {
      set_paytime(from.paytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActMonthlyFundSignInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActMonthlyFundSignInfo::CopyFrom(const TActMonthlyFundSignInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActMonthlyFundSignInfo::IsInitialized() const {

  return true;
}

void TActMonthlyFundSignInfo::Swap(TActMonthlyFundSignInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(paytime_, other->paytime_);
    rewardidarr_.Swap(&other->rewardidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActMonthlyFundSignInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActMonthlyFundSignInfo_descriptor_;
  metadata.reflection = TActMonthlyFundSignInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActMonthlyFundGetInfoRsp::kSignArrFieldNumber;
const int TActMonthlyFundGetInfoRsp::kRandGiftGetTimeFieldNumber;
const int TActMonthlyFundGetInfoRsp::kAllBuyGiftGetTimeFieldNumber;
#endif  // !_MSC_VER

TActMonthlyFundGetInfoRsp::TActMonthlyFundGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActMonthlyFundGetInfoRsp)
}

void TActMonthlyFundGetInfoRsp::InitAsDefaultInstance() {
}

TActMonthlyFundGetInfoRsp::TActMonthlyFundGetInfoRsp(const TActMonthlyFundGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActMonthlyFundGetInfoRsp)
}

void TActMonthlyFundGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  randgiftgettime_ = GOOGLE_ULONGLONG(0);
  allbuygiftgettime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActMonthlyFundGetInfoRsp::~TActMonthlyFundGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActMonthlyFundGetInfoRsp)
  SharedDtor();
}

void TActMonthlyFundGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActMonthlyFundGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActMonthlyFundGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActMonthlyFundGetInfoRsp_descriptor_;
}

const TActMonthlyFundGetInfoRsp& TActMonthlyFundGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActMonthlyFund_2eproto();
  return *default_instance_;
}

TActMonthlyFundGetInfoRsp* TActMonthlyFundGetInfoRsp::default_instance_ = NULL;

TActMonthlyFundGetInfoRsp* TActMonthlyFundGetInfoRsp::New() const {
  return new TActMonthlyFundGetInfoRsp;
}

void TActMonthlyFundGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActMonthlyFundGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(randgiftgettime_, allbuygiftgettime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  signarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActMonthlyFundGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActMonthlyFundGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActMonthlyFundSignInfo SignArr = 1;
      case 1: {
        if (tag == 10) {
         parse_SignArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_SignArr;
        if (input->ExpectTag(16)) goto parse_RandGiftGetTime;
        break;
      }

      // optional uint64 RandGiftGetTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RandGiftGetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &randgiftgettime_)));
          set_has_randgiftgettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AllBuyGiftGetTime;
        break;
      }

      // optional uint64 AllBuyGiftGetTime = 3;
      case 3: {
        if (tag == 24) {
         parse_AllBuyGiftGetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &allbuygiftgettime_)));
          set_has_allbuygiftgettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActMonthlyFundGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActMonthlyFundGetInfoRsp)
  return false;
#undef DO_
}

void TActMonthlyFundGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActMonthlyFundGetInfoRsp)
  // repeated .pb.TActMonthlyFundSignInfo SignArr = 1;
  for (int i = 0; i < this->signarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signarr(i), output);
  }

  // optional uint64 RandGiftGetTime = 2;
  if (has_randgiftgettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->randgiftgettime(), output);
  }

  // optional uint64 AllBuyGiftGetTime = 3;
  if (has_allbuygiftgettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->allbuygiftgettime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActMonthlyFundGetInfoRsp)
}

::google::protobuf::uint8* TActMonthlyFundGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActMonthlyFundGetInfoRsp)
  // repeated .pb.TActMonthlyFundSignInfo SignArr = 1;
  for (int i = 0; i < this->signarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signarr(i), target);
  }

  // optional uint64 RandGiftGetTime = 2;
  if (has_randgiftgettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->randgiftgettime(), target);
  }

  // optional uint64 AllBuyGiftGetTime = 3;
  if (has_allbuygiftgettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->allbuygiftgettime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActMonthlyFundGetInfoRsp)
  return target;
}

int TActMonthlyFundGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 RandGiftGetTime = 2;
    if (has_randgiftgettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->randgiftgettime());
    }

    // optional uint64 AllBuyGiftGetTime = 3;
    if (has_allbuygiftgettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->allbuygiftgettime());
    }

  }
  // repeated .pb.TActMonthlyFundSignInfo SignArr = 1;
  total_size += 1 * this->signarr_size();
  for (int i = 0; i < this->signarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActMonthlyFundGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActMonthlyFundGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActMonthlyFundGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActMonthlyFundGetInfoRsp::MergeFrom(const TActMonthlyFundGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  signarr_.MergeFrom(from.signarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_randgiftgettime()) {
      set_randgiftgettime(from.randgiftgettime());
    }
    if (from.has_allbuygiftgettime()) {
      set_allbuygiftgettime(from.allbuygiftgettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActMonthlyFundGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActMonthlyFundGetInfoRsp::CopyFrom(const TActMonthlyFundGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActMonthlyFundGetInfoRsp::IsInitialized() const {

  return true;
}

void TActMonthlyFundGetInfoRsp::Swap(TActMonthlyFundGetInfoRsp* other) {
  if (other != this) {
    signarr_.Swap(&other->signarr_);
    std::swap(randgiftgettime_, other->randgiftgettime_);
    std::swap(allbuygiftgettime_, other->allbuygiftgettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActMonthlyFundGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActMonthlyFundGetInfoRsp_descriptor_;
  metadata.reflection = TActMonthlyFundGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActMonthlyFundGetRandGiftRsp::kRandGiftGetTimeFieldNumber;
const int TActMonthlyFundGetRandGiftRsp::kDropArrFieldNumber;
#endif  // !_MSC_VER

TActMonthlyFundGetRandGiftRsp::TActMonthlyFundGetRandGiftRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActMonthlyFundGetRandGiftRsp)
}

void TActMonthlyFundGetRandGiftRsp::InitAsDefaultInstance() {
}

TActMonthlyFundGetRandGiftRsp::TActMonthlyFundGetRandGiftRsp(const TActMonthlyFundGetRandGiftRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActMonthlyFundGetRandGiftRsp)
}

void TActMonthlyFundGetRandGiftRsp::SharedCtor() {
  _cached_size_ = 0;
  randgiftgettime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActMonthlyFundGetRandGiftRsp::~TActMonthlyFundGetRandGiftRsp() {
  // @@protoc_insertion_point(destructor:pb.TActMonthlyFundGetRandGiftRsp)
  SharedDtor();
}

void TActMonthlyFundGetRandGiftRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActMonthlyFundGetRandGiftRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActMonthlyFundGetRandGiftRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActMonthlyFundGetRandGiftRsp_descriptor_;
}

const TActMonthlyFundGetRandGiftRsp& TActMonthlyFundGetRandGiftRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActMonthlyFund_2eproto();
  return *default_instance_;
}

TActMonthlyFundGetRandGiftRsp* TActMonthlyFundGetRandGiftRsp::default_instance_ = NULL;

TActMonthlyFundGetRandGiftRsp* TActMonthlyFundGetRandGiftRsp::New() const {
  return new TActMonthlyFundGetRandGiftRsp;
}

void TActMonthlyFundGetRandGiftRsp::Clear() {
  randgiftgettime_ = GOOGLE_ULONGLONG(0);
  droparr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActMonthlyFundGetRandGiftRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActMonthlyFundGetRandGiftRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RandGiftGetTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &randgiftgettime_)));
          set_has_randgiftgettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DropArr;
        break;
      }

      // repeated .pb.TCommonReward DropArr = 2;
      case 2: {
        if (tag == 18) {
         parse_DropArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_droparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DropArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActMonthlyFundGetRandGiftRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActMonthlyFundGetRandGiftRsp)
  return false;
#undef DO_
}

void TActMonthlyFundGetRandGiftRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActMonthlyFundGetRandGiftRsp)
  // optional uint64 RandGiftGetTime = 1;
  if (has_randgiftgettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->randgiftgettime(), output);
  }

  // repeated .pb.TCommonReward DropArr = 2;
  for (int i = 0; i < this->droparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->droparr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActMonthlyFundGetRandGiftRsp)
}

::google::protobuf::uint8* TActMonthlyFundGetRandGiftRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActMonthlyFundGetRandGiftRsp)
  // optional uint64 RandGiftGetTime = 1;
  if (has_randgiftgettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->randgiftgettime(), target);
  }

  // repeated .pb.TCommonReward DropArr = 2;
  for (int i = 0; i < this->droparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->droparr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActMonthlyFundGetRandGiftRsp)
  return target;
}

int TActMonthlyFundGetRandGiftRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RandGiftGetTime = 1;
    if (has_randgiftgettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->randgiftgettime());
    }

  }
  // repeated .pb.TCommonReward DropArr = 2;
  total_size += 1 * this->droparr_size();
  for (int i = 0; i < this->droparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->droparr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActMonthlyFundGetRandGiftRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActMonthlyFundGetRandGiftRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActMonthlyFundGetRandGiftRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActMonthlyFundGetRandGiftRsp::MergeFrom(const TActMonthlyFundGetRandGiftRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  droparr_.MergeFrom(from.droparr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_randgiftgettime()) {
      set_randgiftgettime(from.randgiftgettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActMonthlyFundGetRandGiftRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActMonthlyFundGetRandGiftRsp::CopyFrom(const TActMonthlyFundGetRandGiftRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActMonthlyFundGetRandGiftRsp::IsInitialized() const {

  return true;
}

void TActMonthlyFundGetRandGiftRsp::Swap(TActMonthlyFundGetRandGiftRsp* other) {
  if (other != this) {
    std::swap(randgiftgettime_, other->randgiftgettime_);
    droparr_.Swap(&other->droparr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActMonthlyFundGetRandGiftRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActMonthlyFundGetRandGiftRsp_descriptor_;
  metadata.reflection = TActMonthlyFundGetRandGiftRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActMonthlyFundGetRewardReq::kActIdFieldNumber;
const int TActMonthlyFundGetRewardReq::kRewardIdFieldNumber;
#endif  // !_MSC_VER

TActMonthlyFundGetRewardReq::TActMonthlyFundGetRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActMonthlyFundGetRewardReq)
}

void TActMonthlyFundGetRewardReq::InitAsDefaultInstance() {
}

TActMonthlyFundGetRewardReq::TActMonthlyFundGetRewardReq(const TActMonthlyFundGetRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActMonthlyFundGetRewardReq)
}

void TActMonthlyFundGetRewardReq::SharedCtor() {
  _cached_size_ = 0;
  actid_ = 0u;
  rewardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActMonthlyFundGetRewardReq::~TActMonthlyFundGetRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActMonthlyFundGetRewardReq)
  SharedDtor();
}

void TActMonthlyFundGetRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActMonthlyFundGetRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActMonthlyFundGetRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActMonthlyFundGetRewardReq_descriptor_;
}

const TActMonthlyFundGetRewardReq& TActMonthlyFundGetRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActMonthlyFund_2eproto();
  return *default_instance_;
}

TActMonthlyFundGetRewardReq* TActMonthlyFundGetRewardReq::default_instance_ = NULL;

TActMonthlyFundGetRewardReq* TActMonthlyFundGetRewardReq::New() const {
  return new TActMonthlyFundGetRewardReq;
}

void TActMonthlyFundGetRewardReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActMonthlyFundGetRewardReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(actid_, rewardid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActMonthlyFundGetRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActMonthlyFundGetRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ActId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RewardId;
        break;
      }

      // optional uint32 RewardId = 2;
      case 2: {
        if (tag == 16) {
         parse_RewardId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActMonthlyFundGetRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActMonthlyFundGetRewardReq)
  return false;
#undef DO_
}

void TActMonthlyFundGetRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActMonthlyFundGetRewardReq)
  // optional uint32 ActId = 1;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->actid(), output);
  }

  // optional uint32 RewardId = 2;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActMonthlyFundGetRewardReq)
}

::google::protobuf::uint8* TActMonthlyFundGetRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActMonthlyFundGetRewardReq)
  // optional uint32 ActId = 1;
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->actid(), target);
  }

  // optional uint32 RewardId = 2;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActMonthlyFundGetRewardReq)
  return target;
}

int TActMonthlyFundGetRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ActId = 1;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actid());
    }

    // optional uint32 RewardId = 2;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActMonthlyFundGetRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActMonthlyFundGetRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActMonthlyFundGetRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActMonthlyFundGetRewardReq::MergeFrom(const TActMonthlyFundGetRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actid()) {
      set_actid(from.actid());
    }
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActMonthlyFundGetRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActMonthlyFundGetRewardReq::CopyFrom(const TActMonthlyFundGetRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActMonthlyFundGetRewardReq::IsInitialized() const {

  return true;
}

void TActMonthlyFundGetRewardReq::Swap(TActMonthlyFundGetRewardReq* other) {
  if (other != this) {
    std::swap(actid_, other->actid_);
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActMonthlyFundGetRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActMonthlyFundGetRewardReq_descriptor_;
  metadata.reflection = TActMonthlyFundGetRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActMonthlyFundAutoGetRewardReq::kActIdFieldNumber;
#endif  // !_MSC_VER

TActMonthlyFundAutoGetRewardReq::TActMonthlyFundAutoGetRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActMonthlyFundAutoGetRewardReq)
}

void TActMonthlyFundAutoGetRewardReq::InitAsDefaultInstance() {
}

TActMonthlyFundAutoGetRewardReq::TActMonthlyFundAutoGetRewardReq(const TActMonthlyFundAutoGetRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActMonthlyFundAutoGetRewardReq)
}

void TActMonthlyFundAutoGetRewardReq::SharedCtor() {
  _cached_size_ = 0;
  actid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActMonthlyFundAutoGetRewardReq::~TActMonthlyFundAutoGetRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActMonthlyFundAutoGetRewardReq)
  SharedDtor();
}

void TActMonthlyFundAutoGetRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActMonthlyFundAutoGetRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActMonthlyFundAutoGetRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActMonthlyFundAutoGetRewardReq_descriptor_;
}

const TActMonthlyFundAutoGetRewardReq& TActMonthlyFundAutoGetRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActMonthlyFund_2eproto();
  return *default_instance_;
}

TActMonthlyFundAutoGetRewardReq* TActMonthlyFundAutoGetRewardReq::default_instance_ = NULL;

TActMonthlyFundAutoGetRewardReq* TActMonthlyFundAutoGetRewardReq::New() const {
  return new TActMonthlyFundAutoGetRewardReq;
}

void TActMonthlyFundAutoGetRewardReq::Clear() {
  actid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActMonthlyFundAutoGetRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActMonthlyFundAutoGetRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ActId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActMonthlyFundAutoGetRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActMonthlyFundAutoGetRewardReq)
  return false;
#undef DO_
}

void TActMonthlyFundAutoGetRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActMonthlyFundAutoGetRewardReq)
  // optional uint32 ActId = 1;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->actid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActMonthlyFundAutoGetRewardReq)
}

::google::protobuf::uint8* TActMonthlyFundAutoGetRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActMonthlyFundAutoGetRewardReq)
  // optional uint32 ActId = 1;
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->actid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActMonthlyFundAutoGetRewardReq)
  return target;
}

int TActMonthlyFundAutoGetRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ActId = 1;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActMonthlyFundAutoGetRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActMonthlyFundAutoGetRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActMonthlyFundAutoGetRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActMonthlyFundAutoGetRewardReq::MergeFrom(const TActMonthlyFundAutoGetRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actid()) {
      set_actid(from.actid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActMonthlyFundAutoGetRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActMonthlyFundAutoGetRewardReq::CopyFrom(const TActMonthlyFundAutoGetRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActMonthlyFundAutoGetRewardReq::IsInitialized() const {

  return true;
}

void TActMonthlyFundAutoGetRewardReq::Swap(TActMonthlyFundAutoGetRewardReq* other) {
  if (other != this) {
    std::swap(actid_, other->actid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActMonthlyFundAutoGetRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActMonthlyFundAutoGetRewardReq_descriptor_;
  metadata.reflection = TActMonthlyFundAutoGetRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActMonthlyFundAutoGetRewardRsp::kRewardIdArrFieldNumber;
const int TActMonthlyFundAutoGetRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TActMonthlyFundAutoGetRewardRsp::TActMonthlyFundAutoGetRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActMonthlyFundAutoGetRewardRsp)
}

void TActMonthlyFundAutoGetRewardRsp::InitAsDefaultInstance() {
}

TActMonthlyFundAutoGetRewardRsp::TActMonthlyFundAutoGetRewardRsp(const TActMonthlyFundAutoGetRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActMonthlyFundAutoGetRewardRsp)
}

void TActMonthlyFundAutoGetRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActMonthlyFundAutoGetRewardRsp::~TActMonthlyFundAutoGetRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TActMonthlyFundAutoGetRewardRsp)
  SharedDtor();
}

void TActMonthlyFundAutoGetRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActMonthlyFundAutoGetRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActMonthlyFundAutoGetRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActMonthlyFundAutoGetRewardRsp_descriptor_;
}

const TActMonthlyFundAutoGetRewardRsp& TActMonthlyFundAutoGetRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActMonthlyFund_2eproto();
  return *default_instance_;
}

TActMonthlyFundAutoGetRewardRsp* TActMonthlyFundAutoGetRewardRsp::default_instance_ = NULL;

TActMonthlyFundAutoGetRewardRsp* TActMonthlyFundAutoGetRewardRsp::New() const {
  return new TActMonthlyFundAutoGetRewardRsp;
}

void TActMonthlyFundAutoGetRewardRsp::Clear() {
  rewardidarr_.Clear();
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActMonthlyFundAutoGetRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActMonthlyFundAutoGetRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 RewardIdArr = 1;
      case 1: {
        if (tag == 8) {
         parse_RewardIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_rewardidarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rewardidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_RewardIdArr;
        if (input->ExpectTag(18)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActMonthlyFundAutoGetRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActMonthlyFundAutoGetRewardRsp)
  return false;
#undef DO_
}

void TActMonthlyFundAutoGetRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActMonthlyFundAutoGetRewardRsp)
  // repeated uint32 RewardIdArr = 1;
  for (int i = 0; i < this->rewardidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->rewardidarr(i), output);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActMonthlyFundAutoGetRewardRsp)
}

::google::protobuf::uint8* TActMonthlyFundAutoGetRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActMonthlyFundAutoGetRewardRsp)
  // repeated uint32 RewardIdArr = 1;
  for (int i = 0; i < this->rewardidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->rewardidarr(i), target);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActMonthlyFundAutoGetRewardRsp)
  return target;
}

int TActMonthlyFundAutoGetRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 RewardIdArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rewardidarr(i));
    }
    total_size += 1 * this->rewardidarr_size() + data_size;
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActMonthlyFundAutoGetRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActMonthlyFundAutoGetRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActMonthlyFundAutoGetRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActMonthlyFundAutoGetRewardRsp::MergeFrom(const TActMonthlyFundAutoGetRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardidarr_.MergeFrom(from.rewardidarr_);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActMonthlyFundAutoGetRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActMonthlyFundAutoGetRewardRsp::CopyFrom(const TActMonthlyFundAutoGetRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActMonthlyFundAutoGetRewardRsp::IsInitialized() const {

  return true;
}

void TActMonthlyFundAutoGetRewardRsp::Swap(TActMonthlyFundAutoGetRewardRsp* other) {
  if (other != this) {
    rewardidarr_.Swap(&other->rewardidarr_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActMonthlyFundAutoGetRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActMonthlyFundAutoGetRewardRsp_descriptor_;
  metadata.reflection = TActMonthlyFundAutoGetRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActMonthlyFundGetAllBuyGiftRsp::kAllBuyGiftGetTimeFieldNumber;
const int TActMonthlyFundGetAllBuyGiftRsp::kDropArrFieldNumber;
#endif  // !_MSC_VER

TActMonthlyFundGetAllBuyGiftRsp::TActMonthlyFundGetAllBuyGiftRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActMonthlyFundGetAllBuyGiftRsp)
}

void TActMonthlyFundGetAllBuyGiftRsp::InitAsDefaultInstance() {
}

TActMonthlyFundGetAllBuyGiftRsp::TActMonthlyFundGetAllBuyGiftRsp(const TActMonthlyFundGetAllBuyGiftRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActMonthlyFundGetAllBuyGiftRsp)
}

void TActMonthlyFundGetAllBuyGiftRsp::SharedCtor() {
  _cached_size_ = 0;
  allbuygiftgettime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActMonthlyFundGetAllBuyGiftRsp::~TActMonthlyFundGetAllBuyGiftRsp() {
  // @@protoc_insertion_point(destructor:pb.TActMonthlyFundGetAllBuyGiftRsp)
  SharedDtor();
}

void TActMonthlyFundGetAllBuyGiftRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActMonthlyFundGetAllBuyGiftRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActMonthlyFundGetAllBuyGiftRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActMonthlyFundGetAllBuyGiftRsp_descriptor_;
}

const TActMonthlyFundGetAllBuyGiftRsp& TActMonthlyFundGetAllBuyGiftRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActMonthlyFund_2eproto();
  return *default_instance_;
}

TActMonthlyFundGetAllBuyGiftRsp* TActMonthlyFundGetAllBuyGiftRsp::default_instance_ = NULL;

TActMonthlyFundGetAllBuyGiftRsp* TActMonthlyFundGetAllBuyGiftRsp::New() const {
  return new TActMonthlyFundGetAllBuyGiftRsp;
}

void TActMonthlyFundGetAllBuyGiftRsp::Clear() {
  allbuygiftgettime_ = GOOGLE_ULONGLONG(0);
  droparr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActMonthlyFundGetAllBuyGiftRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActMonthlyFundGetAllBuyGiftRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 AllBuyGiftGetTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &allbuygiftgettime_)));
          set_has_allbuygiftgettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DropArr;
        break;
      }

      // repeated .pb.TCommonReward DropArr = 2;
      case 2: {
        if (tag == 18) {
         parse_DropArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_droparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DropArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActMonthlyFundGetAllBuyGiftRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActMonthlyFundGetAllBuyGiftRsp)
  return false;
#undef DO_
}

void TActMonthlyFundGetAllBuyGiftRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActMonthlyFundGetAllBuyGiftRsp)
  // optional uint64 AllBuyGiftGetTime = 1;
  if (has_allbuygiftgettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->allbuygiftgettime(), output);
  }

  // repeated .pb.TCommonReward DropArr = 2;
  for (int i = 0; i < this->droparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->droparr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActMonthlyFundGetAllBuyGiftRsp)
}

::google::protobuf::uint8* TActMonthlyFundGetAllBuyGiftRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActMonthlyFundGetAllBuyGiftRsp)
  // optional uint64 AllBuyGiftGetTime = 1;
  if (has_allbuygiftgettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->allbuygiftgettime(), target);
  }

  // repeated .pb.TCommonReward DropArr = 2;
  for (int i = 0; i < this->droparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->droparr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActMonthlyFundGetAllBuyGiftRsp)
  return target;
}

int TActMonthlyFundGetAllBuyGiftRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 AllBuyGiftGetTime = 1;
    if (has_allbuygiftgettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->allbuygiftgettime());
    }

  }
  // repeated .pb.TCommonReward DropArr = 2;
  total_size += 1 * this->droparr_size();
  for (int i = 0; i < this->droparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->droparr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActMonthlyFundGetAllBuyGiftRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActMonthlyFundGetAllBuyGiftRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActMonthlyFundGetAllBuyGiftRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActMonthlyFundGetAllBuyGiftRsp::MergeFrom(const TActMonthlyFundGetAllBuyGiftRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  droparr_.MergeFrom(from.droparr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allbuygiftgettime()) {
      set_allbuygiftgettime(from.allbuygiftgettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActMonthlyFundGetAllBuyGiftRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActMonthlyFundGetAllBuyGiftRsp::CopyFrom(const TActMonthlyFundGetAllBuyGiftRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActMonthlyFundGetAllBuyGiftRsp::IsInitialized() const {

  return true;
}

void TActMonthlyFundGetAllBuyGiftRsp::Swap(TActMonthlyFundGetAllBuyGiftRsp* other) {
  if (other != this) {
    std::swap(allbuygiftgettime_, other->allbuygiftgettime_);
    droparr_.Swap(&other->droparr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActMonthlyFundGetAllBuyGiftRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActMonthlyFundGetAllBuyGiftRsp_descriptor_;
  metadata.reflection = TActMonthlyFundGetAllBuyGiftRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActMonthlyFundNotify::kSignArrFieldNumber;
#endif  // !_MSC_VER

TActMonthlyFundNotify::TActMonthlyFundNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActMonthlyFundNotify)
}

void TActMonthlyFundNotify::InitAsDefaultInstance() {
  signarr_ = const_cast< ::pb::TActMonthlyFundSignInfo*>(&::pb::TActMonthlyFundSignInfo::default_instance());
}

TActMonthlyFundNotify::TActMonthlyFundNotify(const TActMonthlyFundNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActMonthlyFundNotify)
}

void TActMonthlyFundNotify::SharedCtor() {
  _cached_size_ = 0;
  signarr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActMonthlyFundNotify::~TActMonthlyFundNotify() {
  // @@protoc_insertion_point(destructor:pb.TActMonthlyFundNotify)
  SharedDtor();
}

void TActMonthlyFundNotify::SharedDtor() {
  if (this != default_instance_) {
    delete signarr_;
  }
}

void TActMonthlyFundNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActMonthlyFundNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActMonthlyFundNotify_descriptor_;
}

const TActMonthlyFundNotify& TActMonthlyFundNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActMonthlyFund_2eproto();
  return *default_instance_;
}

TActMonthlyFundNotify* TActMonthlyFundNotify::default_instance_ = NULL;

TActMonthlyFundNotify* TActMonthlyFundNotify::New() const {
  return new TActMonthlyFundNotify;
}

void TActMonthlyFundNotify::Clear() {
  if (has_signarr()) {
    if (signarr_ != NULL) signarr_->::pb::TActMonthlyFundSignInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActMonthlyFundNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActMonthlyFundNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TActMonthlyFundSignInfo SignArr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActMonthlyFundNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActMonthlyFundNotify)
  return false;
#undef DO_
}

void TActMonthlyFundNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActMonthlyFundNotify)
  // optional .pb.TActMonthlyFundSignInfo SignArr = 1;
  if (has_signarr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signarr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActMonthlyFundNotify)
}

::google::protobuf::uint8* TActMonthlyFundNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActMonthlyFundNotify)
  // optional .pb.TActMonthlyFundSignInfo SignArr = 1;
  if (has_signarr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signarr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActMonthlyFundNotify)
  return target;
}

int TActMonthlyFundNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TActMonthlyFundSignInfo SignArr = 1;
    if (has_signarr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signarr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActMonthlyFundNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActMonthlyFundNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActMonthlyFundNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActMonthlyFundNotify::MergeFrom(const TActMonthlyFundNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signarr()) {
      mutable_signarr()->::pb::TActMonthlyFundSignInfo::MergeFrom(from.signarr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActMonthlyFundNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActMonthlyFundNotify::CopyFrom(const TActMonthlyFundNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActMonthlyFundNotify::IsInitialized() const {

  return true;
}

void TActMonthlyFundNotify::Swap(TActMonthlyFundNotify* other) {
  if (other != this) {
    std::swap(signarr_, other->signarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActMonthlyFundNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActMonthlyFundNotify_descriptor_;
  metadata.reflection = TActMonthlyFundNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
