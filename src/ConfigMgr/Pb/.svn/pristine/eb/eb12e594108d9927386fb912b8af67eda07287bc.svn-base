// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SceneConfGamePlay.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/SceneConfGamePlay.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* SpawnArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpawnArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneConfGamePlay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneConfGamePlay_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fSceneConfGamePlay_2eproto() {
  protobuf_AddDesc_module_2fSceneConfGamePlay_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/SceneConfGamePlay.proto");
  GOOGLE_CHECK(file != NULL);
  SpawnArea_descriptor_ = file->message_type(0);
  static const int SpawnArea_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnArea, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnArea, chunkindexarr_),
  };
  SpawnArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpawnArea_descriptor_,
      SpawnArea::default_instance_,
      SpawnArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpawnArea));
  EventArea_descriptor_ = file->message_type(1);
  static const int EventArea_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventArea, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventArea, spawnpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventArea, chunkindexarr_),
  };
  EventArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventArea_descriptor_,
      EventArea::default_instance_,
      EventArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventArea));
  SceneConfGamePlay_descriptor_ = file->message_type(2);
  static const int SceneConfGamePlay_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGamePlay, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGamePlay, confname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGamePlay, artscenepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGamePlay, cameramovearea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGamePlay, pointelementarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGamePlay, featureentrancearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGamePlay, assetgrparr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGamePlay, effectassetarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGamePlay, animassetarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGamePlay, staticassetarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGamePlay, patrolpatharr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGamePlay, patrolpathconfarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGamePlay, spawnarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGamePlay, eventareaarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGamePlay, chunkinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGamePlay, rectareaarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGamePlay, customareaarr_),
  };
  SceneConfGamePlay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneConfGamePlay_descriptor_,
      SceneConfGamePlay::default_instance_,
      SceneConfGamePlay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGamePlay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfGamePlay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneConfGamePlay));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fSceneConfGamePlay_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpawnArea_descriptor_, &SpawnArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventArea_descriptor_, &EventArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneConfGamePlay_descriptor_, &SceneConfGamePlay::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fSceneConfGamePlay_2eproto() {
  delete SpawnArea::default_instance_;
  delete SpawnArea_reflection_;
  delete EventArea::default_instance_;
  delete EventArea_reflection_;
  delete SceneConfGamePlay::default_instance_;
  delete SceneConfGamePlay_reflection_;
}

void protobuf_AddDesc_module_2fSceneConfGamePlay_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fUtil_2eproto();
  ::pb::protobuf_AddDesc_module_2fSceneConf2d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036module/SceneConfGamePlay.proto\022\002pb\032\021mo"
    "dule/Util.proto\032\030module/SceneConf2d.prot"
    "o\"\?\n\tSpawnArea\022\014\n\004Name\030\001 \001(\t\022$\n\rChunkInd"
    "exArr\030\002 \003(\0132\r.pb.PbVector2\"b\n\tEventArea\022"
    "\014\n\004Name\030\001 \001(\t\022!\n\nSpawnPoint\030\002 \001(\0132\r.pb.P"
    "bVector2\022$\n\rChunkIndexArr\030\003 \003(\0132\r.pb.PbV"
    "ector2\"\370\004\n\021SceneConfGamePlay\022\n\n\002Id\030\001 \002(\005"
    "\022\020\n\010ConfName\030\002 \002(\t\022\024\n\014ArtScenePath\030\003 \002(\t"
    "\022\"\n\016CameraMoveArea\030\004 \001(\0132\n.pb.PbRect\022*\n\017"
    "PointElementArr\030\005 \003(\0132\021.pb.PointElement2"
    "\022/\n\022FeatureEntranceArr\030\006 \003(\0132\023.pb.Featur"
    "eEntrance\022#\n\013AssetGrpArr\030\007 \003(\0132\016.pb.Asse"
    "tGroup\022(\n\016EffectAssetArr\030\010 \003(\0132\020.pb.Effe"
    "ctAsset2\022$\n\014AnimAssetArr\030\t \003(\0132\016.pb.Anim"
    "Asset2\022(\n\016StaticAssetArr\030\n \003(\0132\020.pb.Stat"
    "icAsset2\022&\n\rPatrolPathArr\030\013 \003(\0132\017.pb.Pat"
    "rolPath2\022-\n\021PatrolPathConfArr\030\014 \003(\0132\022.pb"
    ".PatrolPathConf\022 \n\tSpawnArea\030\r \001(\0132\r.pb."
    "SpawnArea\022#\n\014EventAreaArr\030\016 \003(\0132\r.pb.Eve"
    "ntArea\022%\n\tChunkInfo\030\017 \001(\0132\022.pb.SceneChun"
    "kInfo\022\"\n\013RectAreaArr\030\020 \003(\0132\r.pb.RectArea"
    "2\022&\n\rCustomAreaArr\030\021 \003(\0132\017.pb.CustomArea"
    "2", 881);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/SceneConfGamePlay.proto", &protobuf_RegisterTypes);
  SpawnArea::default_instance_ = new SpawnArea();
  EventArea::default_instance_ = new EventArea();
  SceneConfGamePlay::default_instance_ = new SceneConfGamePlay();
  SpawnArea::default_instance_->InitAsDefaultInstance();
  EventArea::default_instance_->InitAsDefaultInstance();
  SceneConfGamePlay::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fSceneConfGamePlay_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fSceneConfGamePlay_2eproto {
  StaticDescriptorInitializer_module_2fSceneConfGamePlay_2eproto() {
    protobuf_AddDesc_module_2fSceneConfGamePlay_2eproto();
  }
} static_descriptor_initializer_module_2fSceneConfGamePlay_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SpawnArea::kNameFieldNumber;
const int SpawnArea::kChunkIndexArrFieldNumber;
#endif  // !_MSC_VER

SpawnArea::SpawnArea()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SpawnArea)
}

void SpawnArea::InitAsDefaultInstance() {
}

SpawnArea::SpawnArea(const SpawnArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SpawnArea)
}

void SpawnArea::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpawnArea::~SpawnArea() {
  // @@protoc_insertion_point(destructor:pb.SpawnArea)
  SharedDtor();
}

void SpawnArea::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SpawnArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpawnArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpawnArea_descriptor_;
}

const SpawnArea& SpawnArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConfGamePlay_2eproto();
  return *default_instance_;
}

SpawnArea* SpawnArea::default_instance_ = NULL;

SpawnArea* SpawnArea::New() const {
  return new SpawnArea;
}

void SpawnArea::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  chunkindexarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpawnArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SpawnArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ChunkIndexArr;
        break;
      }

      // repeated .pb.PbVector2 ChunkIndexArr = 2;
      case 2: {
        if (tag == 18) {
         parse_ChunkIndexArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chunkindexarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ChunkIndexArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SpawnArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SpawnArea)
  return false;
#undef DO_
}

void SpawnArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SpawnArea)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .pb.PbVector2 ChunkIndexArr = 2;
  for (int i = 0; i < this->chunkindexarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chunkindexarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SpawnArea)
}

::google::protobuf::uint8* SpawnArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SpawnArea)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .pb.PbVector2 ChunkIndexArr = 2;
  for (int i = 0; i < this->chunkindexarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chunkindexarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SpawnArea)
  return target;
}

int SpawnArea::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .pb.PbVector2 ChunkIndexArr = 2;
  total_size += 1 * this->chunkindexarr_size();
  for (int i = 0; i < this->chunkindexarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chunkindexarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpawnArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpawnArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpawnArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpawnArea::MergeFrom(const SpawnArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  chunkindexarr_.MergeFrom(from.chunkindexarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpawnArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpawnArea::CopyFrom(const SpawnArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnArea::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->chunkindexarr())) return false;
  return true;
}

void SpawnArea::Swap(SpawnArea* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    chunkindexarr_.Swap(&other->chunkindexarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpawnArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpawnArea_descriptor_;
  metadata.reflection = SpawnArea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventArea::kNameFieldNumber;
const int EventArea::kSpawnPointFieldNumber;
const int EventArea::kChunkIndexArrFieldNumber;
#endif  // !_MSC_VER

EventArea::EventArea()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.EventArea)
}

void EventArea::InitAsDefaultInstance() {
  spawnpoint_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
}

EventArea::EventArea(const EventArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.EventArea)
}

void EventArea::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spawnpoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventArea::~EventArea() {
  // @@protoc_insertion_point(destructor:pb.EventArea)
  SharedDtor();
}

void EventArea::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete spawnpoint_;
  }
}

void EventArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventArea_descriptor_;
}

const EventArea& EventArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConfGamePlay_2eproto();
  return *default_instance_;
}

EventArea* EventArea::default_instance_ = NULL;

EventArea* EventArea::New() const {
  return new EventArea;
}

void EventArea::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_spawnpoint()) {
      if (spawnpoint_ != NULL) spawnpoint_->::pb::PbVector2::Clear();
    }
  }
  chunkindexarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.EventArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SpawnPoint;
        break;
      }

      // optional .pb.PbVector2 SpawnPoint = 2;
      case 2: {
        if (tag == 18) {
         parse_SpawnPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spawnpoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ChunkIndexArr;
        break;
      }

      // repeated .pb.PbVector2 ChunkIndexArr = 3;
      case 3: {
        if (tag == 26) {
         parse_ChunkIndexArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chunkindexarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ChunkIndexArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.EventArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.EventArea)
  return false;
#undef DO_
}

void EventArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.EventArea)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .pb.PbVector2 SpawnPoint = 2;
  if (has_spawnpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->spawnpoint(), output);
  }

  // repeated .pb.PbVector2 ChunkIndexArr = 3;
  for (int i = 0; i < this->chunkindexarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chunkindexarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.EventArea)
}

::google::protobuf::uint8* EventArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.EventArea)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .pb.PbVector2 SpawnPoint = 2;
  if (has_spawnpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->spawnpoint(), target);
  }

  // repeated .pb.PbVector2 ChunkIndexArr = 3;
  for (int i = 0; i < this->chunkindexarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chunkindexarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.EventArea)
  return target;
}

int EventArea::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .pb.PbVector2 SpawnPoint = 2;
    if (has_spawnpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spawnpoint());
    }

  }
  // repeated .pb.PbVector2 ChunkIndexArr = 3;
  total_size += 1 * this->chunkindexarr_size();
  for (int i = 0; i < this->chunkindexarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chunkindexarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventArea::MergeFrom(const EventArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  chunkindexarr_.MergeFrom(from.chunkindexarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_spawnpoint()) {
      mutable_spawnpoint()->::pb::PbVector2::MergeFrom(from.spawnpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventArea::CopyFrom(const EventArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventArea::IsInitialized() const {

  if (has_spawnpoint()) {
    if (!this->spawnpoint().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->chunkindexarr())) return false;
  return true;
}

void EventArea::Swap(EventArea* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(spawnpoint_, other->spawnpoint_);
    chunkindexarr_.Swap(&other->chunkindexarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventArea_descriptor_;
  metadata.reflection = EventArea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneConfGamePlay::kIdFieldNumber;
const int SceneConfGamePlay::kConfNameFieldNumber;
const int SceneConfGamePlay::kArtScenePathFieldNumber;
const int SceneConfGamePlay::kCameraMoveAreaFieldNumber;
const int SceneConfGamePlay::kPointElementArrFieldNumber;
const int SceneConfGamePlay::kFeatureEntranceArrFieldNumber;
const int SceneConfGamePlay::kAssetGrpArrFieldNumber;
const int SceneConfGamePlay::kEffectAssetArrFieldNumber;
const int SceneConfGamePlay::kAnimAssetArrFieldNumber;
const int SceneConfGamePlay::kStaticAssetArrFieldNumber;
const int SceneConfGamePlay::kPatrolPathArrFieldNumber;
const int SceneConfGamePlay::kPatrolPathConfArrFieldNumber;
const int SceneConfGamePlay::kSpawnAreaFieldNumber;
const int SceneConfGamePlay::kEventAreaArrFieldNumber;
const int SceneConfGamePlay::kChunkInfoFieldNumber;
const int SceneConfGamePlay::kRectAreaArrFieldNumber;
const int SceneConfGamePlay::kCustomAreaArrFieldNumber;
#endif  // !_MSC_VER

SceneConfGamePlay::SceneConfGamePlay()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SceneConfGamePlay)
}

void SceneConfGamePlay::InitAsDefaultInstance() {
  cameramovearea_ = const_cast< ::pb::PbRect*>(&::pb::PbRect::default_instance());
  spawnarea_ = const_cast< ::pb::SpawnArea*>(&::pb::SpawnArea::default_instance());
  chunkinfo_ = const_cast< ::pb::SceneChunkInfo*>(&::pb::SceneChunkInfo::default_instance());
}

SceneConfGamePlay::SceneConfGamePlay(const SceneConfGamePlay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SceneConfGamePlay)
}

void SceneConfGamePlay::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artscenepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cameramovearea_ = NULL;
  spawnarea_ = NULL;
  chunkinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneConfGamePlay::~SceneConfGamePlay() {
  // @@protoc_insertion_point(destructor:pb.SceneConfGamePlay)
  SharedDtor();
}

void SceneConfGamePlay::SharedDtor() {
  if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete confname_;
  }
  if (artscenepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete artscenepath_;
  }
  if (this != default_instance_) {
    delete cameramovearea_;
    delete spawnarea_;
    delete chunkinfo_;
  }
}

void SceneConfGamePlay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneConfGamePlay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneConfGamePlay_descriptor_;
}

const SceneConfGamePlay& SceneConfGamePlay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConfGamePlay_2eproto();
  return *default_instance_;
}

SceneConfGamePlay* SceneConfGamePlay::default_instance_ = NULL;

SceneConfGamePlay* SceneConfGamePlay::New() const {
  return new SceneConfGamePlay;
}

void SceneConfGamePlay::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    id_ = 0;
    if (has_confname()) {
      if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        confname_->clear();
      }
    }
    if (has_artscenepath()) {
      if (artscenepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        artscenepath_->clear();
      }
    }
    if (has_cameramovearea()) {
      if (cameramovearea_ != NULL) cameramovearea_->::pb::PbRect::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 20480) {
    if (has_spawnarea()) {
      if (spawnarea_ != NULL) spawnarea_->::pb::SpawnArea::Clear();
    }
    if (has_chunkinfo()) {
      if (chunkinfo_ != NULL) chunkinfo_->::pb::SceneChunkInfo::Clear();
    }
  }
  pointelementarr_.Clear();
  featureentrancearr_.Clear();
  assetgrparr_.Clear();
  effectassetarr_.Clear();
  animassetarr_.Clear();
  staticassetarr_.Clear();
  patrolpatharr_.Clear();
  patrolpathconfarr_.Clear();
  eventareaarr_.Clear();
  rectareaarr_.Clear();
  customareaarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneConfGamePlay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SceneConfGamePlay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ConfName;
        break;
      }

      // required string ConfName = 2;
      case 2: {
        if (tag == 18) {
         parse_ConfName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->confname().data(), this->confname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "confname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArtScenePath;
        break;
      }

      // required string ArtScenePath = 3;
      case 3: {
        if (tag == 26) {
         parse_ArtScenePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artscenepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->artscenepath().data(), this->artscenepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artscenepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CameraMoveArea;
        break;
      }

      // optional .pb.PbRect CameraMoveArea = 4;
      case 4: {
        if (tag == 34) {
         parse_CameraMoveArea:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameramovearea()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_PointElementArr;
        break;
      }

      // repeated .pb.PointElement2 PointElementArr = 5;
      case 5: {
        if (tag == 42) {
         parse_PointElementArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointelementarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_PointElementArr;
        if (input->ExpectTag(50)) goto parse_FeatureEntranceArr;
        break;
      }

      // repeated .pb.FeatureEntrance FeatureEntranceArr = 6;
      case 6: {
        if (tag == 50) {
         parse_FeatureEntranceArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_featureentrancearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_FeatureEntranceArr;
        if (input->ExpectTag(58)) goto parse_AssetGrpArr;
        break;
      }

      // repeated .pb.AssetGroup AssetGrpArr = 7;
      case 7: {
        if (tag == 58) {
         parse_AssetGrpArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assetgrparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_AssetGrpArr;
        if (input->ExpectTag(66)) goto parse_EffectAssetArr;
        break;
      }

      // repeated .pb.EffectAsset2 EffectAssetArr = 8;
      case 8: {
        if (tag == 66) {
         parse_EffectAssetArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effectassetarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_EffectAssetArr;
        if (input->ExpectTag(74)) goto parse_AnimAssetArr;
        break;
      }

      // repeated .pb.AnimAsset2 AnimAssetArr = 9;
      case 9: {
        if (tag == 74) {
         parse_AnimAssetArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animassetarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_AnimAssetArr;
        if (input->ExpectTag(82)) goto parse_StaticAssetArr;
        break;
      }

      // repeated .pb.StaticAsset2 StaticAssetArr = 10;
      case 10: {
        if (tag == 82) {
         parse_StaticAssetArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_staticassetarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_StaticAssetArr;
        if (input->ExpectTag(90)) goto parse_PatrolPathArr;
        break;
      }

      // repeated .pb.PatrolPath2 PatrolPathArr = 11;
      case 11: {
        if (tag == 90) {
         parse_PatrolPathArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_patrolpatharr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_PatrolPathArr;
        if (input->ExpectTag(98)) goto parse_PatrolPathConfArr;
        break;
      }

      // repeated .pb.PatrolPathConf PatrolPathConfArr = 12;
      case 12: {
        if (tag == 98) {
         parse_PatrolPathConfArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_patrolpathconfarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_PatrolPathConfArr;
        if (input->ExpectTag(106)) goto parse_SpawnArea;
        break;
      }

      // optional .pb.SpawnArea SpawnArea = 13;
      case 13: {
        if (tag == 106) {
         parse_SpawnArea:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spawnarea()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_EventAreaArr;
        break;
      }

      // repeated .pb.EventArea EventAreaArr = 14;
      case 14: {
        if (tag == 114) {
         parse_EventAreaArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eventareaarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_EventAreaArr;
        if (input->ExpectTag(122)) goto parse_ChunkInfo;
        break;
      }

      // optional .pb.SceneChunkInfo ChunkInfo = 15;
      case 15: {
        if (tag == 122) {
         parse_ChunkInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chunkinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_RectAreaArr;
        break;
      }

      // repeated .pb.RectArea2 RectAreaArr = 16;
      case 16: {
        if (tag == 130) {
         parse_RectAreaArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rectareaarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_RectAreaArr;
        if (input->ExpectTag(138)) goto parse_CustomAreaArr;
        break;
      }

      // repeated .pb.CustomArea2 CustomAreaArr = 17;
      case 17: {
        if (tag == 138) {
         parse_CustomAreaArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customareaarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_CustomAreaArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SceneConfGamePlay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SceneConfGamePlay)
  return false;
#undef DO_
}

void SceneConfGamePlay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SceneConfGamePlay)
  // required int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string ConfName = 2;
  if (has_confname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confname().data(), this->confname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->confname(), output);
  }

  // required string ArtScenePath = 3;
  if (has_artscenepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artscenepath().data(), this->artscenepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artscenepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->artscenepath(), output);
  }

  // optional .pb.PbRect CameraMoveArea = 4;
  if (has_cameramovearea()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cameramovearea(), output);
  }

  // repeated .pb.PointElement2 PointElementArr = 5;
  for (int i = 0; i < this->pointelementarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pointelementarr(i), output);
  }

  // repeated .pb.FeatureEntrance FeatureEntranceArr = 6;
  for (int i = 0; i < this->featureentrancearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->featureentrancearr(i), output);
  }

  // repeated .pb.AssetGroup AssetGrpArr = 7;
  for (int i = 0; i < this->assetgrparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->assetgrparr(i), output);
  }

  // repeated .pb.EffectAsset2 EffectAssetArr = 8;
  for (int i = 0; i < this->effectassetarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->effectassetarr(i), output);
  }

  // repeated .pb.AnimAsset2 AnimAssetArr = 9;
  for (int i = 0; i < this->animassetarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->animassetarr(i), output);
  }

  // repeated .pb.StaticAsset2 StaticAssetArr = 10;
  for (int i = 0; i < this->staticassetarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->staticassetarr(i), output);
  }

  // repeated .pb.PatrolPath2 PatrolPathArr = 11;
  for (int i = 0; i < this->patrolpatharr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->patrolpatharr(i), output);
  }

  // repeated .pb.PatrolPathConf PatrolPathConfArr = 12;
  for (int i = 0; i < this->patrolpathconfarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->patrolpathconfarr(i), output);
  }

  // optional .pb.SpawnArea SpawnArea = 13;
  if (has_spawnarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->spawnarea(), output);
  }

  // repeated .pb.EventArea EventAreaArr = 14;
  for (int i = 0; i < this->eventareaarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->eventareaarr(i), output);
  }

  // optional .pb.SceneChunkInfo ChunkInfo = 15;
  if (has_chunkinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->chunkinfo(), output);
  }

  // repeated .pb.RectArea2 RectAreaArr = 16;
  for (int i = 0; i < this->rectareaarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->rectareaarr(i), output);
  }

  // repeated .pb.CustomArea2 CustomAreaArr = 17;
  for (int i = 0; i < this->customareaarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->customareaarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SceneConfGamePlay)
}

::google::protobuf::uint8* SceneConfGamePlay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SceneConfGamePlay)
  // required int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string ConfName = 2;
  if (has_confname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confname().data(), this->confname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->confname(), target);
  }

  // required string ArtScenePath = 3;
  if (has_artscenepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artscenepath().data(), this->artscenepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artscenepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->artscenepath(), target);
  }

  // optional .pb.PbRect CameraMoveArea = 4;
  if (has_cameramovearea()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cameramovearea(), target);
  }

  // repeated .pb.PointElement2 PointElementArr = 5;
  for (int i = 0; i < this->pointelementarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pointelementarr(i), target);
  }

  // repeated .pb.FeatureEntrance FeatureEntranceArr = 6;
  for (int i = 0; i < this->featureentrancearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->featureentrancearr(i), target);
  }

  // repeated .pb.AssetGroup AssetGrpArr = 7;
  for (int i = 0; i < this->assetgrparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->assetgrparr(i), target);
  }

  // repeated .pb.EffectAsset2 EffectAssetArr = 8;
  for (int i = 0; i < this->effectassetarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->effectassetarr(i), target);
  }

  // repeated .pb.AnimAsset2 AnimAssetArr = 9;
  for (int i = 0; i < this->animassetarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->animassetarr(i), target);
  }

  // repeated .pb.StaticAsset2 StaticAssetArr = 10;
  for (int i = 0; i < this->staticassetarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->staticassetarr(i), target);
  }

  // repeated .pb.PatrolPath2 PatrolPathArr = 11;
  for (int i = 0; i < this->patrolpatharr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->patrolpatharr(i), target);
  }

  // repeated .pb.PatrolPathConf PatrolPathConfArr = 12;
  for (int i = 0; i < this->patrolpathconfarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->patrolpathconfarr(i), target);
  }

  // optional .pb.SpawnArea SpawnArea = 13;
  if (has_spawnarea()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->spawnarea(), target);
  }

  // repeated .pb.EventArea EventAreaArr = 14;
  for (int i = 0; i < this->eventareaarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->eventareaarr(i), target);
  }

  // optional .pb.SceneChunkInfo ChunkInfo = 15;
  if (has_chunkinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->chunkinfo(), target);
  }

  // repeated .pb.RectArea2 RectAreaArr = 16;
  for (int i = 0; i < this->rectareaarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->rectareaarr(i), target);
  }

  // repeated .pb.CustomArea2 CustomAreaArr = 17;
  for (int i = 0; i < this->customareaarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->customareaarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SceneConfGamePlay)
  return target;
}

int SceneConfGamePlay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string ConfName = 2;
    if (has_confname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->confname());
    }

    // required string ArtScenePath = 3;
    if (has_artscenepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artscenepath());
    }

    // optional .pb.PbRect CameraMoveArea = 4;
    if (has_cameramovearea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cameramovearea());
    }

  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    // optional .pb.SpawnArea SpawnArea = 13;
    if (has_spawnarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spawnarea());
    }

    // optional .pb.SceneChunkInfo ChunkInfo = 15;
    if (has_chunkinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chunkinfo());
    }

  }
  // repeated .pb.PointElement2 PointElementArr = 5;
  total_size += 1 * this->pointelementarr_size();
  for (int i = 0; i < this->pointelementarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointelementarr(i));
  }

  // repeated .pb.FeatureEntrance FeatureEntranceArr = 6;
  total_size += 1 * this->featureentrancearr_size();
  for (int i = 0; i < this->featureentrancearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->featureentrancearr(i));
  }

  // repeated .pb.AssetGroup AssetGrpArr = 7;
  total_size += 1 * this->assetgrparr_size();
  for (int i = 0; i < this->assetgrparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assetgrparr(i));
  }

  // repeated .pb.EffectAsset2 EffectAssetArr = 8;
  total_size += 1 * this->effectassetarr_size();
  for (int i = 0; i < this->effectassetarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effectassetarr(i));
  }

  // repeated .pb.AnimAsset2 AnimAssetArr = 9;
  total_size += 1 * this->animassetarr_size();
  for (int i = 0; i < this->animassetarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animassetarr(i));
  }

  // repeated .pb.StaticAsset2 StaticAssetArr = 10;
  total_size += 1 * this->staticassetarr_size();
  for (int i = 0; i < this->staticassetarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->staticassetarr(i));
  }

  // repeated .pb.PatrolPath2 PatrolPathArr = 11;
  total_size += 1 * this->patrolpatharr_size();
  for (int i = 0; i < this->patrolpatharr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->patrolpatharr(i));
  }

  // repeated .pb.PatrolPathConf PatrolPathConfArr = 12;
  total_size += 1 * this->patrolpathconfarr_size();
  for (int i = 0; i < this->patrolpathconfarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->patrolpathconfarr(i));
  }

  // repeated .pb.EventArea EventAreaArr = 14;
  total_size += 1 * this->eventareaarr_size();
  for (int i = 0; i < this->eventareaarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eventareaarr(i));
  }

  // repeated .pb.RectArea2 RectAreaArr = 16;
  total_size += 2 * this->rectareaarr_size();
  for (int i = 0; i < this->rectareaarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rectareaarr(i));
  }

  // repeated .pb.CustomArea2 CustomAreaArr = 17;
  total_size += 2 * this->customareaarr_size();
  for (int i = 0; i < this->customareaarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customareaarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneConfGamePlay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneConfGamePlay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneConfGamePlay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneConfGamePlay::MergeFrom(const SceneConfGamePlay& from) {
  GOOGLE_CHECK_NE(&from, this);
  pointelementarr_.MergeFrom(from.pointelementarr_);
  featureentrancearr_.MergeFrom(from.featureentrancearr_);
  assetgrparr_.MergeFrom(from.assetgrparr_);
  effectassetarr_.MergeFrom(from.effectassetarr_);
  animassetarr_.MergeFrom(from.animassetarr_);
  staticassetarr_.MergeFrom(from.staticassetarr_);
  patrolpatharr_.MergeFrom(from.patrolpatharr_);
  patrolpathconfarr_.MergeFrom(from.patrolpathconfarr_);
  eventareaarr_.MergeFrom(from.eventareaarr_);
  rectareaarr_.MergeFrom(from.rectareaarr_);
  customareaarr_.MergeFrom(from.customareaarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_confname()) {
      set_confname(from.confname());
    }
    if (from.has_artscenepath()) {
      set_artscenepath(from.artscenepath());
    }
    if (from.has_cameramovearea()) {
      mutable_cameramovearea()->::pb::PbRect::MergeFrom(from.cameramovearea());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_spawnarea()) {
      mutable_spawnarea()->::pb::SpawnArea::MergeFrom(from.spawnarea());
    }
    if (from.has_chunkinfo()) {
      mutable_chunkinfo()->::pb::SceneChunkInfo::MergeFrom(from.chunkinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneConfGamePlay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneConfGamePlay::CopyFrom(const SceneConfGamePlay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneConfGamePlay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_cameramovearea()) {
    if (!this->cameramovearea().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->pointelementarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->featureentrancearr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->assetgrparr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->effectassetarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->animassetarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->staticassetarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->patrolpatharr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->patrolpathconfarr())) return false;
  if (has_spawnarea()) {
    if (!this->spawnarea().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->eventareaarr())) return false;
  if (has_chunkinfo()) {
    if (!this->chunkinfo().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->rectareaarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->customareaarr())) return false;
  return true;
}

void SceneConfGamePlay::Swap(SceneConfGamePlay* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(confname_, other->confname_);
    std::swap(artscenepath_, other->artscenepath_);
    std::swap(cameramovearea_, other->cameramovearea_);
    pointelementarr_.Swap(&other->pointelementarr_);
    featureentrancearr_.Swap(&other->featureentrancearr_);
    assetgrparr_.Swap(&other->assetgrparr_);
    effectassetarr_.Swap(&other->effectassetarr_);
    animassetarr_.Swap(&other->animassetarr_);
    staticassetarr_.Swap(&other->staticassetarr_);
    patrolpatharr_.Swap(&other->patrolpatharr_);
    patrolpathconfarr_.Swap(&other->patrolpathconfarr_);
    std::swap(spawnarea_, other->spawnarea_);
    eventareaarr_.Swap(&other->eventareaarr_);
    std::swap(chunkinfo_, other->chunkinfo_);
    rectareaarr_.Swap(&other->rectareaarr_);
    customareaarr_.Swap(&other->customareaarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneConfGamePlay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneConfGamePlay_descriptor_;
  metadata.reflection = SceneConfGamePlay_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
