// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/WorldBossCross.proto

#ifndef PROTOBUF_net_2fWorldBossCross_2eproto__INCLUDED
#define PROTOBUF_net_2fWorldBossCross_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Battle.pb.h"
#include "net/User.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

class TWorldBossCrossExchangeInfo;
class TWorldBossCrossShopInfo;
class TWorldBossCrossDamageSingle;
class TWorldBossCrossRankInfoForRankId;
class TWorldBossCrossGetBossInfoRsp;
class TWorldBossCrossGetAboveRankNRsp;
class TWorldBossCrossGetRankInfoByRankIdReq;
class TWorldBossCrossGetRankInfoByRankIdRsp;
class TWorldBossCrossEnterBattleReq;
class TWorldBossCrossEnterBattleRsp;
class TWorldBossCrossReportBattleReq;
class TWorldBossCrossReportBattleRsp;
class TWorldBossCrossBuyAtkNumReq;
class TWorldBossCrossBuyAtkNumRsp;
class TWorldBossCrossReceiveDamageRewardReq;
class TWorldBossCrossReceiveDamageRewardRsp;
class TWorldBossCrossAutoReceiveDamageRewardRsp;
class TWorldBossCrossUnit;
class TWorldBossCrossBattleRecord;
class TWorldBossCrossGetBattleRecordRsp;
class TWorldBossCrossGetMaxBattleRecordReq;
class TWorldBossCrossGetMaxBattleRecordRsp;
class TWorldBossCrossGetUserMaxBattleRidReq;
class TWorldBossCrossGetUserMaxBattleRidRsp;
class TWorldBossCrossGetBossSimpleInfoRsp;
class TWorldBossCrossExchangeReq;
class TWorldBossCrossGetRankInfoTopNRsp;
class TWorldBossCrossGetRankInfoByLimitReq;
class TWorldBossCrossGetRankInfoByLimitRsp;
class TWorldBossCrossNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TWorldBossCrossExchangeInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossExchangeInfo : public ::google::protobuf::Message {
 public:
  TWorldBossCrossExchangeInfo();
  virtual ~TWorldBossCrossExchangeInfo();

  TWorldBossCrossExchangeInfo(const TWorldBossCrossExchangeInfo& from);

  inline TWorldBossCrossExchangeInfo& operator=(const TWorldBossCrossExchangeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossExchangeInfo& default_instance();

  void Swap(TWorldBossCrossExchangeInfo* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossExchangeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossExchangeInfo& from);
  void MergeFrom(const TWorldBossCrossExchangeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ExchangeId = 1;
  inline bool has_exchangeid() const;
  inline void clear_exchangeid();
  static const int kExchangeIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossExchangeInfo</name>
  	<Function>
  		<name>exchangeid</name>
  		<replaceName>ExchangeId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_exchangeid</name>
  		<replaceName>ExchangeId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exchangeid</name>
  		<replaceName>ExchangeId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 exchangeid() const;
  inline void set_exchangeid(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossExchangeInfo</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossExchangeInfo)
 private:
  inline void set_has_exchangeid();
  inline void clear_has_exchangeid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 exchangeid_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossExchangeInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossShopInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossShopInfo : public ::google::protobuf::Message {
 public:
  TWorldBossCrossShopInfo();
  virtual ~TWorldBossCrossShopInfo();

  TWorldBossCrossShopInfo(const TWorldBossCrossShopInfo& from);

  inline TWorldBossCrossShopInfo& operator=(const TWorldBossCrossShopInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossShopInfo& default_instance();

  void Swap(TWorldBossCrossShopInfo* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossShopInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossShopInfo& from);
  void MergeFrom(const TWorldBossCrossShopInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GoodsId = 1;
  inline bool has_goodsid() const;
  inline void clear_goodsid();
  static const int kGoodsIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossShopInfo</name>
  	<Function>
  		<name>goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 goodsid() const;
  inline void set_goodsid(::google::protobuf::uint32 value);

  // optional uint32 BuyNum = 2;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossShopInfo</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossShopInfo)
 private:
  inline void set_has_goodsid();
  inline void clear_has_goodsid();
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 goodsid_;
  ::google::protobuf::uint32 buynum_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossShopInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossDamageSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossDamageSingle : public ::google::protobuf::Message {
 public:
  TWorldBossCrossDamageSingle();
  virtual ~TWorldBossCrossDamageSingle();

  TWorldBossCrossDamageSingle(const TWorldBossCrossDamageSingle& from);

  inline TWorldBossCrossDamageSingle& operator=(const TWorldBossCrossDamageSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossDamageSingle& default_instance();

  void Swap(TWorldBossCrossDamageSingle* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossDamageSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossDamageSingle& from);
  void MergeFrom(const TWorldBossCrossDamageSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 MaxDamage = 1;
  inline bool has_maxdamage() const;
  inline void clear_maxdamage();
  static const int kMaxDamageFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossDamageSingle</name>
  	<Function>
  		<name>maxdamage</name>
  		<replaceName>MaxDamage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxdamage</name>
  		<replaceName>MaxDamage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxdamage</name>
  		<replaceName>MaxDamage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxdamage() const;
  inline void set_maxdamage(::google::protobuf::uint64 value);

  // optional uint32 Rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossDamageSingle</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional .pb.TUserSimpleInfo UserSimple = 3;
  inline bool has_usersimple() const;
  inline void clear_usersimple();
  static const int kUserSimpleFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossDamageSingle</name>
  	<Function>
  		<name>usersimple</name>
  		<replaceName>UserSimple</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usersimple</name>
  		<replaceName>UserSimple</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_usersimple</name>
  		<replaceName>UserSimple</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usersimple</name>
  		<replaceName>UserSimple</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& usersimple() const;
  inline ::pb::TUserSimpleInfo* mutable_usersimple();
  inline ::pb::TUserSimpleInfo* release_usersimple();
  inline void set_allocated_usersimple(::pb::TUserSimpleInfo* usersimple);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossDamageSingle)
 private:
  inline void set_has_maxdamage();
  inline void clear_has_maxdamage();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_usersimple();
  inline void clear_has_usersimple();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 maxdamage_;
  ::pb::TUserSimpleInfo* usersimple_;
  ::google::protobuf::uint32 rank_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossDamageSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossRankInfoForRankId</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossRankInfoForRankId : public ::google::protobuf::Message {
 public:
  TWorldBossCrossRankInfoForRankId();
  virtual ~TWorldBossCrossRankInfoForRankId();

  TWorldBossCrossRankInfoForRankId(const TWorldBossCrossRankInfoForRankId& from);

  inline TWorldBossCrossRankInfoForRankId& operator=(const TWorldBossCrossRankInfoForRankId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossRankInfoForRankId& default_instance();

  void Swap(TWorldBossCrossRankInfoForRankId* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossRankInfoForRankId* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossRankInfoForRankId& from);
  void MergeFrom(const TWorldBossCrossRankInfoForRankId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RankId = 1;
  inline bool has_rankid() const;
  inline void clear_rankid();
  static const int kRankIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossRankInfoForRankId</name>
  	<Function>
  		<name>rankid</name>
  		<replaceName>RankId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rankid</name>
  		<replaceName>RankId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankid</name>
  		<replaceName>RankId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rankid() const;
  inline void set_rankid(::google::protobuf::uint32 value);

  // optional uint32 UserNum = 2;
  inline bool has_usernum() const;
  inline void clear_usernum();
  static const int kUserNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossRankInfoForRankId</name>
  	<Function>
  		<name>usernum</name>
  		<replaceName>UserNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usernum</name>
  		<replaceName>UserNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usernum</name>
  		<replaceName>UserNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 usernum() const;
  inline void set_usernum(::google::protobuf::uint32 value);

  // optional uint64 DamageMin = 3;
  inline bool has_damagemin() const;
  inline void clear_damagemin();
  static const int kDamageMinFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossRankInfoForRankId</name>
  	<Function>
  		<name>damagemin</name>
  		<replaceName>DamageMin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damagemin</name>
  		<replaceName>DamageMin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damagemin</name>
  		<replaceName>DamageMin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 damagemin() const;
  inline void set_damagemin(::google::protobuf::uint64 value);

  // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 4;
  inline int damagerankarr_size() const;
  inline void clear_damagerankarr();
  static const int kDamageRankArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossRankInfoForRankId</name>
  	<Function>
  		<name>damagerankarr</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_damagerankarr</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_damagerankarr</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damagerankarr</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>damagerankarr_size</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWorldBossCrossDamageSingle& damagerankarr(int index) const;
  inline ::pb::TWorldBossCrossDamageSingle* mutable_damagerankarr(int index);
  inline ::pb::TWorldBossCrossDamageSingle* add_damagerankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >&
      damagerankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >*
      mutable_damagerankarr();

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossRankInfoForRankId)
 private:
  inline void set_has_rankid();
  inline void clear_has_rankid();
  inline void set_has_usernum();
  inline void clear_has_usernum();
  inline void set_has_damagemin();
  inline void clear_has_damagemin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rankid_;
  ::google::protobuf::uint32 usernum_;
  ::google::protobuf::uint64 damagemin_;
  ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle > damagerankarr_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossRankInfoForRankId* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossGetBossInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossGetBossInfoRsp : public ::google::protobuf::Message {
 public:
  TWorldBossCrossGetBossInfoRsp();
  virtual ~TWorldBossCrossGetBossInfoRsp();

  TWorldBossCrossGetBossInfoRsp(const TWorldBossCrossGetBossInfoRsp& from);

  inline TWorldBossCrossGetBossInfoRsp& operator=(const TWorldBossCrossGetBossInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossGetBossInfoRsp& default_instance();

  void Swap(TWorldBossCrossGetBossInfoRsp* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossGetBossInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossGetBossInfoRsp& from);
  void MergeFrom(const TWorldBossCrossGetBossInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CrossTeamId = 1;
  inline bool has_crossteamid() const;
  inline void clear_crossteamid();
  static const int kCrossTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetBossInfoRsp</name>
  	<Function>
  		<name>crossteamid</name>
  		<replaceName>CrossTeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_crossteamid</name>
  		<replaceName>CrossTeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_crossteamid</name>
  		<replaceName>CrossTeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 crossteamid() const;
  inline void set_crossteamid(::google::protobuf::uint32 value);

  // optional uint32 UsedAtkNum = 2;
  inline bool has_usedatknum() const;
  inline void clear_usedatknum();
  static const int kUsedAtkNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetBossInfoRsp</name>
  	<Function>
  		<name>usedatknum</name>
  		<replaceName>UsedAtkNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usedatknum</name>
  		<replaceName>UsedAtkNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usedatknum</name>
  		<replaceName>UsedAtkNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 usedatknum() const;
  inline void set_usedatknum(::google::protobuf::uint32 value);

  // optional uint32 BuyNum = 3;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetBossInfoRsp</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // optional uint32 BuyAtkNum = 4;
  inline bool has_buyatknum() const;
  inline void clear_buyatknum();
  static const int kBuyAtkNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetBossInfoRsp</name>
  	<Function>
  		<name>buyatknum</name>
  		<replaceName>BuyAtkNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buyatknum</name>
  		<replaceName>BuyAtkNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buyatknum</name>
  		<replaceName>BuyAtkNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buyatknum() const;
  inline void set_buyatknum(::google::protobuf::uint32 value);

  // repeated uint32 ReceivedDamageRewardTidArr = 5;
  inline int receiveddamagerewardtidarr_size() const;
  inline void clear_receiveddamagerewardtidarr();
  static const int kReceivedDamageRewardTidArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetBossInfoRsp</name>
  	<Function>
  		<name>receiveddamagerewardtidarr</name>
  		<replaceName>ReceivedDamageRewardTidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_receiveddamagerewardtidarr</name>
  		<replaceName>ReceivedDamageRewardTidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_receiveddamagerewardtidarr</name>
  		<replaceName>ReceivedDamageRewardTidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receiveddamagerewardtidarr</name>
  		<replaceName>ReceivedDamageRewardTidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>receiveddamagerewardtidarr_size</name>
  		<replaceName>ReceivedDamageRewardTidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 receiveddamagerewardtidarr(int index) const;
  inline void set_receiveddamagerewardtidarr(int index, ::google::protobuf::uint32 value);
  inline void add_receiveddamagerewardtidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      receiveddamagerewardtidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_receiveddamagerewardtidarr();

  // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 6;
  inline bool has_myrankinfo() const;
  inline void clear_myrankinfo();
  static const int kMyRankInfoFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetBossInfoRsp</name>
  	<Function>
  		<name>myrankinfo</name>
  		<replaceName>MyRankInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrankinfo</name>
  		<replaceName>MyRankInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_myrankinfo</name>
  		<replaceName>MyRankInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrankinfo</name>
  		<replaceName>MyRankInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWorldBossCrossDamageSingle& myrankinfo() const;
  inline ::pb::TWorldBossCrossDamageSingle* mutable_myrankinfo();
  inline ::pb::TWorldBossCrossDamageSingle* release_myrankinfo();
  inline void set_allocated_myrankinfo(::pb::TWorldBossCrossDamageSingle* myrankinfo);

  // repeated .pb.TWorldBossCrossRankInfoForRankId RankForRankIdArr = 7;
  inline int rankforrankidarr_size() const;
  inline void clear_rankforrankidarr();
  static const int kRankForRankIdArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetBossInfoRsp</name>
  	<Function>
  		<name>rankforrankidarr</name>
  		<replaceName>RankForRankIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankforrankidarr</name>
  		<replaceName>RankForRankIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankforrankidarr</name>
  		<replaceName>RankForRankIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankforrankidarr</name>
  		<replaceName>RankForRankIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankforrankidarr_size</name>
  		<replaceName>RankForRankIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWorldBossCrossRankInfoForRankId& rankforrankidarr(int index) const;
  inline ::pb::TWorldBossCrossRankInfoForRankId* mutable_rankforrankidarr(int index);
  inline ::pb::TWorldBossCrossRankInfoForRankId* add_rankforrankidarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossRankInfoForRankId >&
      rankforrankidarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossRankInfoForRankId >*
      mutable_rankforrankidarr();

  // optional uint64 DailyMaxDamage = 8;
  inline bool has_dailymaxdamage() const;
  inline void clear_dailymaxdamage();
  static const int kDailyMaxDamageFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetBossInfoRsp</name>
  	<Function>
  		<name>dailymaxdamage</name>
  		<replaceName>DailyMaxDamage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_dailymaxdamage</name>
  		<replaceName>DailyMaxDamage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dailymaxdamage</name>
  		<replaceName>DailyMaxDamage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 dailymaxdamage() const;
  inline void set_dailymaxdamage(::google::protobuf::uint64 value);

  // repeated .pb.TWorldBossCrossExchangeInfo ArrExchangeInfo = 9;
  inline int arrexchangeinfo_size() const;
  inline void clear_arrexchangeinfo();
  static const int kArrExchangeInfoFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetBossInfoRsp</name>
  	<Function>
  		<name>arrexchangeinfo</name>
  		<replaceName>ArrExchangeInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrexchangeinfo</name>
  		<replaceName>ArrExchangeInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrexchangeinfo</name>
  		<replaceName>ArrExchangeInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrexchangeinfo</name>
  		<replaceName>ArrExchangeInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrexchangeinfo_size</name>
  		<replaceName>ArrExchangeInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWorldBossCrossExchangeInfo& arrexchangeinfo(int index) const;
  inline ::pb::TWorldBossCrossExchangeInfo* mutable_arrexchangeinfo(int index);
  inline ::pb::TWorldBossCrossExchangeInfo* add_arrexchangeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossExchangeInfo >&
      arrexchangeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossExchangeInfo >*
      mutable_arrexchangeinfo();

  // repeated .pb.TWorldBossCrossShopInfo ArrRmbShop = 10;
  inline int arrrmbshop_size() const;
  inline void clear_arrrmbshop();
  static const int kArrRmbShopFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetBossInfoRsp</name>
  	<Function>
  		<name>arrrmbshop</name>
  		<replaceName>ArrRmbShop</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrmbshop</name>
  		<replaceName>ArrRmbShop</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrmbshop</name>
  		<replaceName>ArrRmbShop</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrmbshop</name>
  		<replaceName>ArrRmbShop</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrmbshop_size</name>
  		<replaceName>ArrRmbShop</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWorldBossCrossShopInfo& arrrmbshop(int index) const;
  inline ::pb::TWorldBossCrossShopInfo* mutable_arrrmbshop(int index);
  inline ::pb::TWorldBossCrossShopInfo* add_arrrmbshop();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossShopInfo >&
      arrrmbshop() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossShopInfo >*
      mutable_arrrmbshop();

  // repeated .pb.TCommonReward ArrRankReward = 11;
  inline int arrrankreward_size() const;
  inline void clear_arrrankreward();
  static const int kArrRankRewardFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetBossInfoRsp</name>
  	<Function>
  		<name>arrrankreward</name>
  		<replaceName>ArrRankReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrankreward</name>
  		<replaceName>ArrRankReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrankreward</name>
  		<replaceName>ArrRankReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrankreward</name>
  		<replaceName>ArrRankReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrankreward_size</name>
  		<replaceName>ArrRankReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrrankreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrrankreward(int index);
  inline ::pb::TCommonReward* add_arrrankreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrrankreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrrankreward();

  // optional uint32 IsRankRewardView = 12;
  inline bool has_isrankrewardview() const;
  inline void clear_isrankrewardview();
  static const int kIsRankRewardViewFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetBossInfoRsp</name>
  	<Function>
  		<name>isrankrewardview</name>
  		<replaceName>IsRankRewardView</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isrankrewardview</name>
  		<replaceName>IsRankRewardView</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isrankrewardview</name>
  		<replaceName>IsRankRewardView</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isrankrewardview() const;
  inline void set_isrankrewardview(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossGetBossInfoRsp)
 private:
  inline void set_has_crossteamid();
  inline void clear_has_crossteamid();
  inline void set_has_usedatknum();
  inline void clear_has_usedatknum();
  inline void set_has_buynum();
  inline void clear_has_buynum();
  inline void set_has_buyatknum();
  inline void clear_has_buyatknum();
  inline void set_has_myrankinfo();
  inline void clear_has_myrankinfo();
  inline void set_has_dailymaxdamage();
  inline void clear_has_dailymaxdamage();
  inline void set_has_isrankrewardview();
  inline void clear_has_isrankrewardview();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 crossteamid_;
  ::google::protobuf::uint32 usedatknum_;
  ::google::protobuf::uint32 buynum_;
  ::google::protobuf::uint32 buyatknum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > receiveddamagerewardtidarr_;
  ::pb::TWorldBossCrossDamageSingle* myrankinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossRankInfoForRankId > rankforrankidarr_;
  ::google::protobuf::uint64 dailymaxdamage_;
  ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossExchangeInfo > arrexchangeinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossShopInfo > arrrmbshop_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrrankreward_;
  ::google::protobuf::uint32 isrankrewardview_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossGetBossInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossGetAboveRankNRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossGetAboveRankNRsp : public ::google::protobuf::Message {
 public:
  TWorldBossCrossGetAboveRankNRsp();
  virtual ~TWorldBossCrossGetAboveRankNRsp();

  TWorldBossCrossGetAboveRankNRsp(const TWorldBossCrossGetAboveRankNRsp& from);

  inline TWorldBossCrossGetAboveRankNRsp& operator=(const TWorldBossCrossGetAboveRankNRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossGetAboveRankNRsp& default_instance();

  void Swap(TWorldBossCrossGetAboveRankNRsp* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossGetAboveRankNRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossGetAboveRankNRsp& from);
  void MergeFrom(const TWorldBossCrossGetAboveRankNRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TWorldBossCrossDamageSingle AboveRankArr = 1;
  inline int aboverankarr_size() const;
  inline void clear_aboverankarr();
  static const int kAboveRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetAboveRankNRsp</name>
  	<Function>
  		<name>aboverankarr</name>
  		<replaceName>AboveRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_aboverankarr</name>
  		<replaceName>AboveRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_aboverankarr</name>
  		<replaceName>AboveRankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_aboverankarr</name>
  		<replaceName>AboveRankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>aboverankarr_size</name>
  		<replaceName>AboveRankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWorldBossCrossDamageSingle& aboverankarr(int index) const;
  inline ::pb::TWorldBossCrossDamageSingle* mutable_aboverankarr(int index);
  inline ::pb::TWorldBossCrossDamageSingle* add_aboverankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >&
      aboverankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >*
      mutable_aboverankarr();

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossGetAboveRankNRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle > aboverankarr_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossGetAboveRankNRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossGetRankInfoByRankIdReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossGetRankInfoByRankIdReq : public ::google::protobuf::Message {
 public:
  TWorldBossCrossGetRankInfoByRankIdReq();
  virtual ~TWorldBossCrossGetRankInfoByRankIdReq();

  TWorldBossCrossGetRankInfoByRankIdReq(const TWorldBossCrossGetRankInfoByRankIdReq& from);

  inline TWorldBossCrossGetRankInfoByRankIdReq& operator=(const TWorldBossCrossGetRankInfoByRankIdReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossGetRankInfoByRankIdReq& default_instance();

  void Swap(TWorldBossCrossGetRankInfoByRankIdReq* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossGetRankInfoByRankIdReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossGetRankInfoByRankIdReq& from);
  void MergeFrom(const TWorldBossCrossGetRankInfoByRankIdReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RankId = 1;
  inline bool has_rankid() const;
  inline void clear_rankid();
  static const int kRankIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetRankInfoByRankIdReq</name>
  	<Function>
  		<name>rankid</name>
  		<replaceName>RankId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rankid</name>
  		<replaceName>RankId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankid</name>
  		<replaceName>RankId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rankid() const;
  inline void set_rankid(::google::protobuf::uint32 value);

  // optional uint32 Offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetRankInfoByRankIdReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 3;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetRankInfoByRankIdReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossGetRankInfoByRankIdReq)
 private:
  inline void set_has_rankid();
  inline void clear_has_rankid();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rankid_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossGetRankInfoByRankIdReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossGetRankInfoByRankIdRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossGetRankInfoByRankIdRsp : public ::google::protobuf::Message {
 public:
  TWorldBossCrossGetRankInfoByRankIdRsp();
  virtual ~TWorldBossCrossGetRankInfoByRankIdRsp();

  TWorldBossCrossGetRankInfoByRankIdRsp(const TWorldBossCrossGetRankInfoByRankIdRsp& from);

  inline TWorldBossCrossGetRankInfoByRankIdRsp& operator=(const TWorldBossCrossGetRankInfoByRankIdRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossGetRankInfoByRankIdRsp& default_instance();

  void Swap(TWorldBossCrossGetRankInfoByRankIdRsp* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossGetRankInfoByRankIdRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossGetRankInfoByRankIdRsp& from);
  void MergeFrom(const TWorldBossCrossGetRankInfoByRankIdRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 1;
  inline int damagerankarr_size() const;
  inline void clear_damagerankarr();
  static const int kDamageRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetRankInfoByRankIdRsp</name>
  	<Function>
  		<name>damagerankarr</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_damagerankarr</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_damagerankarr</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damagerankarr</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>damagerankarr_size</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWorldBossCrossDamageSingle& damagerankarr(int index) const;
  inline ::pb::TWorldBossCrossDamageSingle* mutable_damagerankarr(int index);
  inline ::pb::TWorldBossCrossDamageSingle* add_damagerankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >&
      damagerankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >*
      mutable_damagerankarr();

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossGetRankInfoByRankIdRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle > damagerankarr_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossGetRankInfoByRankIdRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossEnterBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossEnterBattleReq : public ::google::protobuf::Message {
 public:
  TWorldBossCrossEnterBattleReq();
  virtual ~TWorldBossCrossEnterBattleReq();

  TWorldBossCrossEnterBattleReq(const TWorldBossCrossEnterBattleReq& from);

  inline TWorldBossCrossEnterBattleReq& operator=(const TWorldBossCrossEnterBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossEnterBattleReq& default_instance();

  void Swap(TWorldBossCrossEnterBattleReq* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossEnterBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossEnterBattleReq& from);
  void MergeFrom(const TWorldBossCrossEnterBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossEnterBattleReq</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossEnterBattleReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossEnterBattleReq)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossEnterBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossEnterBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossEnterBattleRsp : public ::google::protobuf::Message {
 public:
  TWorldBossCrossEnterBattleRsp();
  virtual ~TWorldBossCrossEnterBattleRsp();

  TWorldBossCrossEnterBattleRsp(const TWorldBossCrossEnterBattleRsp& from);

  inline TWorldBossCrossEnterBattleRsp& operator=(const TWorldBossCrossEnterBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossEnterBattleRsp& default_instance();

  void Swap(TWorldBossCrossEnterBattleRsp* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossEnterBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossEnterBattleRsp& from);
  void MergeFrom(const TWorldBossCrossEnterBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleArgs BattleArgs = 1;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossEnterBattleRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // optional uint32 UsedAtkNum = 2;
  inline bool has_usedatknum() const;
  inline void clear_usedatknum();
  static const int kUsedAtkNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossEnterBattleRsp</name>
  	<Function>
  		<name>usedatknum</name>
  		<replaceName>UsedAtkNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usedatknum</name>
  		<replaceName>UsedAtkNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usedatknum</name>
  		<replaceName>UsedAtkNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 usedatknum() const;
  inline void set_usedatknum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossEnterBattleRsp)
 private:
  inline void set_has_battleargs();
  inline void clear_has_battleargs();
  inline void set_has_usedatknum();
  inline void clear_has_usedatknum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleArgs* battleargs_;
  ::google::protobuf::uint32 usedatknum_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossEnterBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossReportBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossReportBattleReq : public ::google::protobuf::Message {
 public:
  TWorldBossCrossReportBattleReq();
  virtual ~TWorldBossCrossReportBattleReq();

  TWorldBossCrossReportBattleReq(const TWorldBossCrossReportBattleReq& from);

  inline TWorldBossCrossReportBattleReq& operator=(const TWorldBossCrossReportBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossReportBattleReq& default_instance();

  void Swap(TWorldBossCrossReportBattleReq* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossReportBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossReportBattleReq& from);
  void MergeFrom(const TWorldBossCrossReportBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossReportBattleReq</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional bytes BattleRet = 2;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossReportBattleReq</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleret() const;
  inline void set_battleret(const ::std::string& value);
  inline void set_battleret(const char* value);
  inline void set_battleret(const void* value, size_t size);
  inline ::std::string* mutable_battleret();
  inline ::std::string* release_battleret();
  inline void set_allocated_battleret(::std::string* battleret);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossReportBattleReq)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_battleret();
  inline void clear_has_battleret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* battleret_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossReportBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossReportBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossReportBattleRsp : public ::google::protobuf::Message {
 public:
  TWorldBossCrossReportBattleRsp();
  virtual ~TWorldBossCrossReportBattleRsp();

  TWorldBossCrossReportBattleRsp(const TWorldBossCrossReportBattleRsp& from);

  inline TWorldBossCrossReportBattleRsp& operator=(const TWorldBossCrossReportBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossReportBattleRsp& default_instance();

  void Swap(TWorldBossCrossReportBattleRsp* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossReportBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossReportBattleRsp& from);
  void MergeFrom(const TWorldBossCrossReportBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsNewDamageRecord = 1;
  inline bool has_isnewdamagerecord() const;
  inline void clear_isnewdamagerecord();
  static const int kIsNewDamageRecordFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossReportBattleRsp</name>
  	<Function>
  		<name>isnewdamagerecord</name>
  		<replaceName>IsNewDamageRecord</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isnewdamagerecord</name>
  		<replaceName>IsNewDamageRecord</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isnewdamagerecord</name>
  		<replaceName>IsNewDamageRecord</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isnewdamagerecord() const;
  inline void set_isnewdamagerecord(bool value);

  // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 2;
  inline bool has_myrankinfo() const;
  inline void clear_myrankinfo();
  static const int kMyRankInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossReportBattleRsp</name>
  	<Function>
  		<name>myrankinfo</name>
  		<replaceName>MyRankInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrankinfo</name>
  		<replaceName>MyRankInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_myrankinfo</name>
  		<replaceName>MyRankInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrankinfo</name>
  		<replaceName>MyRankInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWorldBossCrossDamageSingle& myrankinfo() const;
  inline ::pb::TWorldBossCrossDamageSingle* mutable_myrankinfo();
  inline ::pb::TWorldBossCrossDamageSingle* release_myrankinfo();
  inline void set_allocated_myrankinfo(::pb::TWorldBossCrossDamageSingle* myrankinfo);

  // repeated .pb.TCommonReward DropArray = 3;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossReportBattleRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // optional uint64 DailyMaxDamage = 4;
  inline bool has_dailymaxdamage() const;
  inline void clear_dailymaxdamage();
  static const int kDailyMaxDamageFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossReportBattleRsp</name>
  	<Function>
  		<name>dailymaxdamage</name>
  		<replaceName>DailyMaxDamage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_dailymaxdamage</name>
  		<replaceName>DailyMaxDamage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dailymaxdamage</name>
  		<replaceName>DailyMaxDamage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 dailymaxdamage() const;
  inline void set_dailymaxdamage(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossReportBattleRsp)
 private:
  inline void set_has_isnewdamagerecord();
  inline void clear_has_isnewdamagerecord();
  inline void set_has_myrankinfo();
  inline void clear_has_myrankinfo();
  inline void set_has_dailymaxdamage();
  inline void clear_has_dailymaxdamage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TWorldBossCrossDamageSingle* myrankinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  ::google::protobuf::uint64 dailymaxdamage_;
  bool isnewdamagerecord_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossReportBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossBuyAtkNumReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossBuyAtkNumReq : public ::google::protobuf::Message {
 public:
  TWorldBossCrossBuyAtkNumReq();
  virtual ~TWorldBossCrossBuyAtkNumReq();

  TWorldBossCrossBuyAtkNumReq(const TWorldBossCrossBuyAtkNumReq& from);

  inline TWorldBossCrossBuyAtkNumReq& operator=(const TWorldBossCrossBuyAtkNumReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossBuyAtkNumReq& default_instance();

  void Swap(TWorldBossCrossBuyAtkNumReq* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossBuyAtkNumReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossBuyAtkNumReq& from);
  void MergeFrom(const TWorldBossCrossBuyAtkNumReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossBuyAtkNumReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossBuyAtkNumReq)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossBuyAtkNumReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossBuyAtkNumRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossBuyAtkNumRsp : public ::google::protobuf::Message {
 public:
  TWorldBossCrossBuyAtkNumRsp();
  virtual ~TWorldBossCrossBuyAtkNumRsp();

  TWorldBossCrossBuyAtkNumRsp(const TWorldBossCrossBuyAtkNumRsp& from);

  inline TWorldBossCrossBuyAtkNumRsp& operator=(const TWorldBossCrossBuyAtkNumRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossBuyAtkNumRsp& default_instance();

  void Swap(TWorldBossCrossBuyAtkNumRsp* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossBuyAtkNumRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossBuyAtkNumRsp& from);
  void MergeFrom(const TWorldBossCrossBuyAtkNumRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuyNum = 1;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossBuyAtkNumRsp</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // optional uint32 BuyAtkNum = 2;
  inline bool has_buyatknum() const;
  inline void clear_buyatknum();
  static const int kBuyAtkNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossBuyAtkNumRsp</name>
  	<Function>
  		<name>buyatknum</name>
  		<replaceName>BuyAtkNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buyatknum</name>
  		<replaceName>BuyAtkNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buyatknum</name>
  		<replaceName>BuyAtkNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buyatknum() const;
  inline void set_buyatknum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossBuyAtkNumRsp)
 private:
  inline void set_has_buynum();
  inline void clear_has_buynum();
  inline void set_has_buyatknum();
  inline void clear_has_buyatknum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buynum_;
  ::google::protobuf::uint32 buyatknum_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossBuyAtkNumRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossReceiveDamageRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossReceiveDamageRewardReq : public ::google::protobuf::Message {
 public:
  TWorldBossCrossReceiveDamageRewardReq();
  virtual ~TWorldBossCrossReceiveDamageRewardReq();

  TWorldBossCrossReceiveDamageRewardReq(const TWorldBossCrossReceiveDamageRewardReq& from);

  inline TWorldBossCrossReceiveDamageRewardReq& operator=(const TWorldBossCrossReceiveDamageRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossReceiveDamageRewardReq& default_instance();

  void Swap(TWorldBossCrossReceiveDamageRewardReq* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossReceiveDamageRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossReceiveDamageRewardReq& from);
  void MergeFrom(const TWorldBossCrossReceiveDamageRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RewardTid = 1;
  inline bool has_rewardtid() const;
  inline void clear_rewardtid();
  static const int kRewardTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossReceiveDamageRewardReq</name>
  	<Function>
  		<name>rewardtid</name>
  		<replaceName>RewardTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtid</name>
  		<replaceName>RewardTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtid</name>
  		<replaceName>RewardTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardtid() const;
  inline void set_rewardtid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossReceiveDamageRewardReq)
 private:
  inline void set_has_rewardtid();
  inline void clear_has_rewardtid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rewardtid_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossReceiveDamageRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossReceiveDamageRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossReceiveDamageRewardRsp : public ::google::protobuf::Message {
 public:
  TWorldBossCrossReceiveDamageRewardRsp();
  virtual ~TWorldBossCrossReceiveDamageRewardRsp();

  TWorldBossCrossReceiveDamageRewardRsp(const TWorldBossCrossReceiveDamageRewardRsp& from);

  inline TWorldBossCrossReceiveDamageRewardRsp& operator=(const TWorldBossCrossReceiveDamageRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossReceiveDamageRewardRsp& default_instance();

  void Swap(TWorldBossCrossReceiveDamageRewardRsp* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossReceiveDamageRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossReceiveDamageRewardRsp& from);
  void MergeFrom(const TWorldBossCrossReceiveDamageRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossReceiveDamageRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossReceiveDamageRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossReceiveDamageRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossAutoReceiveDamageRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossAutoReceiveDamageRewardRsp : public ::google::protobuf::Message {
 public:
  TWorldBossCrossAutoReceiveDamageRewardRsp();
  virtual ~TWorldBossCrossAutoReceiveDamageRewardRsp();

  TWorldBossCrossAutoReceiveDamageRewardRsp(const TWorldBossCrossAutoReceiveDamageRewardRsp& from);

  inline TWorldBossCrossAutoReceiveDamageRewardRsp& operator=(const TWorldBossCrossAutoReceiveDamageRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossAutoReceiveDamageRewardRsp& default_instance();

  void Swap(TWorldBossCrossAutoReceiveDamageRewardRsp* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossAutoReceiveDamageRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossAutoReceiveDamageRewardRsp& from);
  void MergeFrom(const TWorldBossCrossAutoReceiveDamageRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ReceivedRewardTidArr = 1;
  inline int receivedrewardtidarr_size() const;
  inline void clear_receivedrewardtidarr();
  static const int kReceivedRewardTidArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossAutoReceiveDamageRewardRsp</name>
  	<Function>
  		<name>receivedrewardtidarr</name>
  		<replaceName>ReceivedRewardTidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_receivedrewardtidarr</name>
  		<replaceName>ReceivedRewardTidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_receivedrewardtidarr</name>
  		<replaceName>ReceivedRewardTidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receivedrewardtidarr</name>
  		<replaceName>ReceivedRewardTidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>receivedrewardtidarr_size</name>
  		<replaceName>ReceivedRewardTidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 receivedrewardtidarr(int index) const;
  inline void set_receivedrewardtidarr(int index, ::google::protobuf::uint32 value);
  inline void add_receivedrewardtidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      receivedrewardtidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_receivedrewardtidarr();

  // repeated .pb.TCommonReward RewardArr = 2;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossAutoReceiveDamageRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossAutoReceiveDamageRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > receivedrewardtidarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossAutoReceiveDamageRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossUnit</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossUnit : public ::google::protobuf::Message {
 public:
  TWorldBossCrossUnit();
  virtual ~TWorldBossCrossUnit();

  TWorldBossCrossUnit(const TWorldBossCrossUnit& from);

  inline TWorldBossCrossUnit& operator=(const TWorldBossCrossUnit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossUnit& default_instance();

  void Swap(TWorldBossCrossUnit* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossUnit& from);
  void MergeFrom(const TWorldBossCrossUnit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossUnit</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossUnit</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 StarLv = 3;
  inline bool has_starlv() const;
  inline void clear_starlv();
  static const int kStarLvFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossUnit</name>
  	<Function>
  		<name>starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starlv() const;
  inline void set_starlv(::google::protobuf::uint32 value);

  // optional uint32 Level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossUnit</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossUnit)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_starlv();
  inline void clear_has_starlv();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 starlv_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossUnit* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossBattleRecord</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossBattleRecord : public ::google::protobuf::Message {
 public:
  TWorldBossCrossBattleRecord();
  virtual ~TWorldBossCrossBattleRecord();

  TWorldBossCrossBattleRecord(const TWorldBossCrossBattleRecord& from);

  inline TWorldBossCrossBattleRecord& operator=(const TWorldBossCrossBattleRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossBattleRecord& default_instance();

  void Swap(TWorldBossCrossBattleRecord* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossBattleRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossBattleRecord& from);
  void MergeFrom(const TWorldBossCrossBattleRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Rid = 1;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossBattleRecord</name>
  	<Function>
  		<name>rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rid() const;
  inline void set_rid(::google::protobuf::uint64 value);

  // optional uint64 BattleTime = 2;
  inline bool has_battletime() const;
  inline void clear_battletime();
  static const int kBattleTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossBattleRecord</name>
  	<Function>
  		<name>battletime</name>
  		<replaceName>BattleTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battletime</name>
  		<replaceName>BattleTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battletime</name>
  		<replaceName>BattleTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 battletime() const;
  inline void set_battletime(::google::protobuf::uint64 value);

  // optional uint64 Damage = 3;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossBattleRecord</name>
  	<Function>
  		<name>damage</name>
  		<replaceName>Damage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damage</name>
  		<replaceName>Damage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damage</name>
  		<replaceName>Damage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 damage() const;
  inline void set_damage(::google::protobuf::uint64 value);

  // repeated .pb.TWorldBossCrossUnit UnitArr = 4;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossBattleRecord</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWorldBossCrossUnit& unitarr(int index) const;
  inline ::pb::TWorldBossCrossUnit* mutable_unitarr(int index);
  inline ::pb::TWorldBossCrossUnit* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossUnit >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossUnit >*
      mutable_unitarr();

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossBattleRecord)
 private:
  inline void set_has_rid();
  inline void clear_has_rid();
  inline void set_has_battletime();
  inline void clear_has_battletime();
  inline void set_has_damage();
  inline void clear_has_damage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rid_;
  ::google::protobuf::uint64 battletime_;
  ::google::protobuf::uint64 damage_;
  ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossUnit > unitarr_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossBattleRecord* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossGetBattleRecordRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossGetBattleRecordRsp : public ::google::protobuf::Message {
 public:
  TWorldBossCrossGetBattleRecordRsp();
  virtual ~TWorldBossCrossGetBattleRecordRsp();

  TWorldBossCrossGetBattleRecordRsp(const TWorldBossCrossGetBattleRecordRsp& from);

  inline TWorldBossCrossGetBattleRecordRsp& operator=(const TWorldBossCrossGetBattleRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossGetBattleRecordRsp& default_instance();

  void Swap(TWorldBossCrossGetBattleRecordRsp* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossGetBattleRecordRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossGetBattleRecordRsp& from);
  void MergeFrom(const TWorldBossCrossGetBattleRecordRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TWorldBossCrossBattleRecord RecordArr = 1;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetBattleRecordRsp</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWorldBossCrossBattleRecord& recordarr(int index) const;
  inline ::pb::TWorldBossCrossBattleRecord* mutable_recordarr(int index);
  inline ::pb::TWorldBossCrossBattleRecord* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossBattleRecord >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossBattleRecord >*
      mutable_recordarr();

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossGetBattleRecordRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossBattleRecord > recordarr_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossGetBattleRecordRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossGetMaxBattleRecordReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossGetMaxBattleRecordReq : public ::google::protobuf::Message {
 public:
  TWorldBossCrossGetMaxBattleRecordReq();
  virtual ~TWorldBossCrossGetMaxBattleRecordReq();

  TWorldBossCrossGetMaxBattleRecordReq(const TWorldBossCrossGetMaxBattleRecordReq& from);

  inline TWorldBossCrossGetMaxBattleRecordReq& operator=(const TWorldBossCrossGetMaxBattleRecordReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossGetMaxBattleRecordReq& default_instance();

  void Swap(TWorldBossCrossGetMaxBattleRecordReq* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossGetMaxBattleRecordReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossGetMaxBattleRecordReq& from);
  void MergeFrom(const TWorldBossCrossGetMaxBattleRecordReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetMaxBattleRecordReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetMaxBattleRecordReq</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossGetMaxBattleRecordReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* serverid_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossGetMaxBattleRecordReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossGetMaxBattleRecordRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossGetMaxBattleRecordRsp : public ::google::protobuf::Message {
 public:
  TWorldBossCrossGetMaxBattleRecordRsp();
  virtual ~TWorldBossCrossGetMaxBattleRecordRsp();

  TWorldBossCrossGetMaxBattleRecordRsp(const TWorldBossCrossGetMaxBattleRecordRsp& from);

  inline TWorldBossCrossGetMaxBattleRecordRsp& operator=(const TWorldBossCrossGetMaxBattleRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossGetMaxBattleRecordRsp& default_instance();

  void Swap(TWorldBossCrossGetMaxBattleRecordRsp* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossGetMaxBattleRecordRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossGetMaxBattleRecordRsp& from);
  void MergeFrom(const TWorldBossCrossGetMaxBattleRecordRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes BattleRet = 2;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetMaxBattleRecordRsp</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleret() const;
  inline void set_battleret(const ::std::string& value);
  inline void set_battleret(const char* value);
  inline void set_battleret(const void* value, size_t size);
  inline ::std::string* mutable_battleret();
  inline ::std::string* release_battleret();
  inline void set_allocated_battleret(::std::string* battleret);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossGetMaxBattleRecordRsp)
 private:
  inline void set_has_battleret();
  inline void clear_has_battleret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* battleret_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossGetMaxBattleRecordRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossGetUserMaxBattleRidReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossGetUserMaxBattleRidReq : public ::google::protobuf::Message {
 public:
  TWorldBossCrossGetUserMaxBattleRidReq();
  virtual ~TWorldBossCrossGetUserMaxBattleRidReq();

  TWorldBossCrossGetUserMaxBattleRidReq(const TWorldBossCrossGetUserMaxBattleRidReq& from);

  inline TWorldBossCrossGetUserMaxBattleRidReq& operator=(const TWorldBossCrossGetUserMaxBattleRidReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossGetUserMaxBattleRidReq& default_instance();

  void Swap(TWorldBossCrossGetUserMaxBattleRidReq* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossGetUserMaxBattleRidReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossGetUserMaxBattleRidReq& from);
  void MergeFrom(const TWorldBossCrossGetUserMaxBattleRidReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetUserMaxBattleRidReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossGetUserMaxBattleRidReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossGetUserMaxBattleRidReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossGetUserMaxBattleRidRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossGetUserMaxBattleRidRsp : public ::google::protobuf::Message {
 public:
  TWorldBossCrossGetUserMaxBattleRidRsp();
  virtual ~TWorldBossCrossGetUserMaxBattleRidRsp();

  TWorldBossCrossGetUserMaxBattleRidRsp(const TWorldBossCrossGetUserMaxBattleRidRsp& from);

  inline TWorldBossCrossGetUserMaxBattleRidRsp& operator=(const TWorldBossCrossGetUserMaxBattleRidRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossGetUserMaxBattleRidRsp& default_instance();

  void Swap(TWorldBossCrossGetUserMaxBattleRidRsp* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossGetUserMaxBattleRidRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossGetUserMaxBattleRidRsp& from);
  void MergeFrom(const TWorldBossCrossGetUserMaxBattleRidRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Rid = 2;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetUserMaxBattleRidRsp</name>
  	<Function>
  		<name>rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rid() const;
  inline void set_rid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossGetUserMaxBattleRidRsp)
 private:
  inline void set_has_rid();
  inline void clear_has_rid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rid_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossGetUserMaxBattleRidRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossGetBossSimpleInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossGetBossSimpleInfoRsp : public ::google::protobuf::Message {
 public:
  TWorldBossCrossGetBossSimpleInfoRsp();
  virtual ~TWorldBossCrossGetBossSimpleInfoRsp();

  TWorldBossCrossGetBossSimpleInfoRsp(const TWorldBossCrossGetBossSimpleInfoRsp& from);

  inline TWorldBossCrossGetBossSimpleInfoRsp& operator=(const TWorldBossCrossGetBossSimpleInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossGetBossSimpleInfoRsp& default_instance();

  void Swap(TWorldBossCrossGetBossSimpleInfoRsp* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossGetBossSimpleInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossGetBossSimpleInfoRsp& from);
  void MergeFrom(const TWorldBossCrossGetBossSimpleInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TWorldBossCrossRankInfoForRankId RankForRankIdArr = 9;
  inline int rankforrankidarr_size() const;
  inline void clear_rankforrankidarr();
  static const int kRankForRankIdArrFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetBossSimpleInfoRsp</name>
  	<Function>
  		<name>rankforrankidarr</name>
  		<replaceName>RankForRankIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankforrankidarr</name>
  		<replaceName>RankForRankIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankforrankidarr</name>
  		<replaceName>RankForRankIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankforrankidarr</name>
  		<replaceName>RankForRankIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankforrankidarr_size</name>
  		<replaceName>RankForRankIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWorldBossCrossRankInfoForRankId& rankforrankidarr(int index) const;
  inline ::pb::TWorldBossCrossRankInfoForRankId* mutable_rankforrankidarr(int index);
  inline ::pb::TWorldBossCrossRankInfoForRankId* add_rankforrankidarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossRankInfoForRankId >&
      rankforrankidarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossRankInfoForRankId >*
      mutable_rankforrankidarr();

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossGetBossSimpleInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossRankInfoForRankId > rankforrankidarr_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossGetBossSimpleInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossExchangeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossExchangeReq : public ::google::protobuf::Message {
 public:
  TWorldBossCrossExchangeReq();
  virtual ~TWorldBossCrossExchangeReq();

  TWorldBossCrossExchangeReq(const TWorldBossCrossExchangeReq& from);

  inline TWorldBossCrossExchangeReq& operator=(const TWorldBossCrossExchangeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossExchangeReq& default_instance();

  void Swap(TWorldBossCrossExchangeReq* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossExchangeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossExchangeReq& from);
  void MergeFrom(const TWorldBossCrossExchangeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ExchangeId = 1;
  inline bool has_exchangeid() const;
  inline void clear_exchangeid();
  static const int kExchangeIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossExchangeReq</name>
  	<Function>
  		<name>exchangeid</name>
  		<replaceName>ExchangeId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_exchangeid</name>
  		<replaceName>ExchangeId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exchangeid</name>
  		<replaceName>ExchangeId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 exchangeid() const;
  inline void set_exchangeid(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossExchangeReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossExchangeReq)
 private:
  inline void set_has_exchangeid();
  inline void clear_has_exchangeid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 exchangeid_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossExchangeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossGetRankInfoTopNRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossGetRankInfoTopNRsp : public ::google::protobuf::Message {
 public:
  TWorldBossCrossGetRankInfoTopNRsp();
  virtual ~TWorldBossCrossGetRankInfoTopNRsp();

  TWorldBossCrossGetRankInfoTopNRsp(const TWorldBossCrossGetRankInfoTopNRsp& from);

  inline TWorldBossCrossGetRankInfoTopNRsp& operator=(const TWorldBossCrossGetRankInfoTopNRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossGetRankInfoTopNRsp& default_instance();

  void Swap(TWorldBossCrossGetRankInfoTopNRsp* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossGetRankInfoTopNRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossGetRankInfoTopNRsp& from);
  void MergeFrom(const TWorldBossCrossGetRankInfoTopNRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 1;
  inline int damagerankarr_size() const;
  inline void clear_damagerankarr();
  static const int kDamageRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetRankInfoTopNRsp</name>
  	<Function>
  		<name>damagerankarr</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_damagerankarr</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_damagerankarr</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damagerankarr</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>damagerankarr_size</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWorldBossCrossDamageSingle& damagerankarr(int index) const;
  inline ::pb::TWorldBossCrossDamageSingle* mutable_damagerankarr(int index);
  inline ::pb::TWorldBossCrossDamageSingle* add_damagerankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >&
      damagerankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >*
      mutable_damagerankarr();

  // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 2;
  inline bool has_myrankinfo() const;
  inline void clear_myrankinfo();
  static const int kMyRankInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetRankInfoTopNRsp</name>
  	<Function>
  		<name>myrankinfo</name>
  		<replaceName>MyRankInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrankinfo</name>
  		<replaceName>MyRankInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_myrankinfo</name>
  		<replaceName>MyRankInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrankinfo</name>
  		<replaceName>MyRankInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWorldBossCrossDamageSingle& myrankinfo() const;
  inline ::pb::TWorldBossCrossDamageSingle* mutable_myrankinfo();
  inline ::pb::TWorldBossCrossDamageSingle* release_myrankinfo();
  inline void set_allocated_myrankinfo(::pb::TWorldBossCrossDamageSingle* myrankinfo);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossGetRankInfoTopNRsp)
 private:
  inline void set_has_myrankinfo();
  inline void clear_has_myrankinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle > damagerankarr_;
  ::pb::TWorldBossCrossDamageSingle* myrankinfo_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossGetRankInfoTopNRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossGetRankInfoByLimitReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossGetRankInfoByLimitReq : public ::google::protobuf::Message {
 public:
  TWorldBossCrossGetRankInfoByLimitReq();
  virtual ~TWorldBossCrossGetRankInfoByLimitReq();

  TWorldBossCrossGetRankInfoByLimitReq(const TWorldBossCrossGetRankInfoByLimitReq& from);

  inline TWorldBossCrossGetRankInfoByLimitReq& operator=(const TWorldBossCrossGetRankInfoByLimitReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossGetRankInfoByLimitReq& default_instance();

  void Swap(TWorldBossCrossGetRankInfoByLimitReq* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossGetRankInfoByLimitReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossGetRankInfoByLimitReq& from);
  void MergeFrom(const TWorldBossCrossGetRankInfoByLimitReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetRankInfoByLimitReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetRankInfoByLimitReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossGetRankInfoByLimitReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossGetRankInfoByLimitReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossGetRankInfoByLimitRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossGetRankInfoByLimitRsp : public ::google::protobuf::Message {
 public:
  TWorldBossCrossGetRankInfoByLimitRsp();
  virtual ~TWorldBossCrossGetRankInfoByLimitRsp();

  TWorldBossCrossGetRankInfoByLimitRsp(const TWorldBossCrossGetRankInfoByLimitRsp& from);

  inline TWorldBossCrossGetRankInfoByLimitRsp& operator=(const TWorldBossCrossGetRankInfoByLimitRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossGetRankInfoByLimitRsp& default_instance();

  void Swap(TWorldBossCrossGetRankInfoByLimitRsp* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossGetRankInfoByLimitRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossGetRankInfoByLimitRsp& from);
  void MergeFrom(const TWorldBossCrossGetRankInfoByLimitRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 1;
  inline int damagerankarr_size() const;
  inline void clear_damagerankarr();
  static const int kDamageRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetRankInfoByLimitRsp</name>
  	<Function>
  		<name>damagerankarr</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_damagerankarr</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_damagerankarr</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damagerankarr</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>damagerankarr_size</name>
  		<replaceName>DamageRankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWorldBossCrossDamageSingle& damagerankarr(int index) const;
  inline ::pb::TWorldBossCrossDamageSingle* mutable_damagerankarr(int index);
  inline ::pb::TWorldBossCrossDamageSingle* add_damagerankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >&
      damagerankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >*
      mutable_damagerankarr();

  // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 2;
  inline bool has_myrankinfo() const;
  inline void clear_myrankinfo();
  static const int kMyRankInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossGetRankInfoByLimitRsp</name>
  	<Function>
  		<name>myrankinfo</name>
  		<replaceName>MyRankInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrankinfo</name>
  		<replaceName>MyRankInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_myrankinfo</name>
  		<replaceName>MyRankInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrankinfo</name>
  		<replaceName>MyRankInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWorldBossCrossDamageSingle& myrankinfo() const;
  inline ::pb::TWorldBossCrossDamageSingle* mutable_myrankinfo();
  inline ::pb::TWorldBossCrossDamageSingle* release_myrankinfo();
  inline void set_allocated_myrankinfo(::pb::TWorldBossCrossDamageSingle* myrankinfo);

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossGetRankInfoByLimitRsp)
 private:
  inline void set_has_myrankinfo();
  inline void clear_has_myrankinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle > damagerankarr_;
  ::pb::TWorldBossCrossDamageSingle* myrankinfo_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossGetRankInfoByLimitRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWorldBossCrossNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/WorldBossCross.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWorldBossCrossNotify : public ::google::protobuf::Message {
 public:
  TWorldBossCrossNotify();
  virtual ~TWorldBossCrossNotify();

  TWorldBossCrossNotify(const TWorldBossCrossNotify& from);

  inline TWorldBossCrossNotify& operator=(const TWorldBossCrossNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWorldBossCrossNotify& default_instance();

  void Swap(TWorldBossCrossNotify* other);

  // implements Message ----------------------------------------------

  TWorldBossCrossNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWorldBossCrossNotify& from);
  void MergeFrom(const TWorldBossCrossNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TWorldBossCrossShopInfo ArrRmbShop = 10;
  inline int arrrmbshop_size() const;
  inline void clear_arrrmbshop();
  static const int kArrRmbShopFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossNotify</name>
  	<Function>
  		<name>arrrmbshop</name>
  		<replaceName>ArrRmbShop</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrmbshop</name>
  		<replaceName>ArrRmbShop</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrmbshop</name>
  		<replaceName>ArrRmbShop</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrmbshop</name>
  		<replaceName>ArrRmbShop</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrmbshop_size</name>
  		<replaceName>ArrRmbShop</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWorldBossCrossShopInfo& arrrmbshop(int index) const;
  inline ::pb::TWorldBossCrossShopInfo* mutable_arrrmbshop(int index);
  inline ::pb::TWorldBossCrossShopInfo* add_arrrmbshop();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossShopInfo >&
      arrrmbshop() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossShopInfo >*
      mutable_arrrmbshop();

  // repeated .pb.TCommonReward ArrRankReward = 11;
  inline int arrrankreward_size() const;
  inline void clear_arrrankreward();
  static const int kArrRankRewardFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TWorldBossCrossNotify</name>
  	<Function>
  		<name>arrrankreward</name>
  		<replaceName>ArrRankReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrankreward</name>
  		<replaceName>ArrRankReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrankreward</name>
  		<replaceName>ArrRankReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrankreward</name>
  		<replaceName>ArrRankReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrankreward_size</name>
  		<replaceName>ArrRankReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrrankreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrrankreward(int index);
  inline ::pb::TCommonReward* add_arrrankreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrrankreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrrankreward();

  // @@protoc_insertion_point(class_scope:pb.TWorldBossCrossNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossShopInfo > arrrmbshop_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrrankreward_;
  friend void  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_AssignDesc_net_2fWorldBossCross_2eproto();
  friend void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto();

  void InitAsDefaultInstance();
  static TWorldBossCrossNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TWorldBossCrossExchangeInfo

// optional uint32 ExchangeId = 1;
inline bool TWorldBossCrossExchangeInfo::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossExchangeInfo::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossExchangeInfo::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossExchangeInfo::clear_exchangeid() {
  exchangeid_ = 0u;
  clear_has_exchangeid();
}
inline ::google::protobuf::uint32 TWorldBossCrossExchangeInfo::exchangeid() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossExchangeInfo.ExchangeId)
  return exchangeid_;
}
inline void TWorldBossCrossExchangeInfo::set_exchangeid(::google::protobuf::uint32 value) {
  set_has_exchangeid();
  exchangeid_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossExchangeInfo.ExchangeId)
}

// optional uint32 Num = 2;
inline bool TWorldBossCrossExchangeInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TWorldBossCrossExchangeInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TWorldBossCrossExchangeInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TWorldBossCrossExchangeInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TWorldBossCrossExchangeInfo::num() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossExchangeInfo.Num)
  return num_;
}
inline void TWorldBossCrossExchangeInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossExchangeInfo.Num)
}

// -------------------------------------------------------------------

// TWorldBossCrossShopInfo

// optional uint32 GoodsId = 1;
inline bool TWorldBossCrossShopInfo::has_goodsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossShopInfo::set_has_goodsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossShopInfo::clear_has_goodsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossShopInfo::clear_goodsid() {
  goodsid_ = 0u;
  clear_has_goodsid();
}
inline ::google::protobuf::uint32 TWorldBossCrossShopInfo::goodsid() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossShopInfo.GoodsId)
  return goodsid_;
}
inline void TWorldBossCrossShopInfo::set_goodsid(::google::protobuf::uint32 value) {
  set_has_goodsid();
  goodsid_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossShopInfo.GoodsId)
}

// optional uint32 BuyNum = 2;
inline bool TWorldBossCrossShopInfo::has_buynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TWorldBossCrossShopInfo::set_has_buynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TWorldBossCrossShopInfo::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TWorldBossCrossShopInfo::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TWorldBossCrossShopInfo::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossShopInfo.BuyNum)
  return buynum_;
}
inline void TWorldBossCrossShopInfo::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossShopInfo.BuyNum)
}

// -------------------------------------------------------------------

// TWorldBossCrossDamageSingle

// optional uint64 MaxDamage = 1;
inline bool TWorldBossCrossDamageSingle::has_maxdamage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossDamageSingle::set_has_maxdamage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossDamageSingle::clear_has_maxdamage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossDamageSingle::clear_maxdamage() {
  maxdamage_ = GOOGLE_ULONGLONG(0);
  clear_has_maxdamage();
}
inline ::google::protobuf::uint64 TWorldBossCrossDamageSingle::maxdamage() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossDamageSingle.MaxDamage)
  return maxdamage_;
}
inline void TWorldBossCrossDamageSingle::set_maxdamage(::google::protobuf::uint64 value) {
  set_has_maxdamage();
  maxdamage_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossDamageSingle.MaxDamage)
}

// optional uint32 Rank = 2;
inline bool TWorldBossCrossDamageSingle::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TWorldBossCrossDamageSingle::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TWorldBossCrossDamageSingle::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TWorldBossCrossDamageSingle::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TWorldBossCrossDamageSingle::rank() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossDamageSingle.Rank)
  return rank_;
}
inline void TWorldBossCrossDamageSingle::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossDamageSingle.Rank)
}

// optional .pb.TUserSimpleInfo UserSimple = 3;
inline bool TWorldBossCrossDamageSingle::has_usersimple() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TWorldBossCrossDamageSingle::set_has_usersimple() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TWorldBossCrossDamageSingle::clear_has_usersimple() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TWorldBossCrossDamageSingle::clear_usersimple() {
  if (usersimple_ != NULL) usersimple_->::pb::TUserSimpleInfo::Clear();
  clear_has_usersimple();
}
inline const ::pb::TUserSimpleInfo& TWorldBossCrossDamageSingle::usersimple() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossDamageSingle.UserSimple)
  return usersimple_ != NULL ? *usersimple_ : *default_instance_->usersimple_;
}
inline ::pb::TUserSimpleInfo* TWorldBossCrossDamageSingle::mutable_usersimple() {
  set_has_usersimple();
  if (usersimple_ == NULL) usersimple_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossDamageSingle.UserSimple)
  return usersimple_;
}
inline ::pb::TUserSimpleInfo* TWorldBossCrossDamageSingle::release_usersimple() {
  clear_has_usersimple();
  ::pb::TUserSimpleInfo* temp = usersimple_;
  usersimple_ = NULL;
  return temp;
}
inline void TWorldBossCrossDamageSingle::set_allocated_usersimple(::pb::TUserSimpleInfo* usersimple) {
  delete usersimple_;
  usersimple_ = usersimple;
  if (usersimple) {
    set_has_usersimple();
  } else {
    clear_has_usersimple();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TWorldBossCrossDamageSingle.UserSimple)
}

// -------------------------------------------------------------------

// TWorldBossCrossRankInfoForRankId

// optional uint32 RankId = 1;
inline bool TWorldBossCrossRankInfoForRankId::has_rankid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossRankInfoForRankId::set_has_rankid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossRankInfoForRankId::clear_has_rankid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossRankInfoForRankId::clear_rankid() {
  rankid_ = 0u;
  clear_has_rankid();
}
inline ::google::protobuf::uint32 TWorldBossCrossRankInfoForRankId::rankid() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossRankInfoForRankId.RankId)
  return rankid_;
}
inline void TWorldBossCrossRankInfoForRankId::set_rankid(::google::protobuf::uint32 value) {
  set_has_rankid();
  rankid_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossRankInfoForRankId.RankId)
}

// optional uint32 UserNum = 2;
inline bool TWorldBossCrossRankInfoForRankId::has_usernum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TWorldBossCrossRankInfoForRankId::set_has_usernum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TWorldBossCrossRankInfoForRankId::clear_has_usernum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TWorldBossCrossRankInfoForRankId::clear_usernum() {
  usernum_ = 0u;
  clear_has_usernum();
}
inline ::google::protobuf::uint32 TWorldBossCrossRankInfoForRankId::usernum() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossRankInfoForRankId.UserNum)
  return usernum_;
}
inline void TWorldBossCrossRankInfoForRankId::set_usernum(::google::protobuf::uint32 value) {
  set_has_usernum();
  usernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossRankInfoForRankId.UserNum)
}

// optional uint64 DamageMin = 3;
inline bool TWorldBossCrossRankInfoForRankId::has_damagemin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TWorldBossCrossRankInfoForRankId::set_has_damagemin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TWorldBossCrossRankInfoForRankId::clear_has_damagemin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TWorldBossCrossRankInfoForRankId::clear_damagemin() {
  damagemin_ = GOOGLE_ULONGLONG(0);
  clear_has_damagemin();
}
inline ::google::protobuf::uint64 TWorldBossCrossRankInfoForRankId::damagemin() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossRankInfoForRankId.DamageMin)
  return damagemin_;
}
inline void TWorldBossCrossRankInfoForRankId::set_damagemin(::google::protobuf::uint64 value) {
  set_has_damagemin();
  damagemin_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossRankInfoForRankId.DamageMin)
}

// repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 4;
inline int TWorldBossCrossRankInfoForRankId::damagerankarr_size() const {
  return damagerankarr_.size();
}
inline void TWorldBossCrossRankInfoForRankId::clear_damagerankarr() {
  damagerankarr_.Clear();
}
inline const ::pb::TWorldBossCrossDamageSingle& TWorldBossCrossRankInfoForRankId::damagerankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossRankInfoForRankId.DamageRankArr)
  return damagerankarr_.Get(index);
}
inline ::pb::TWorldBossCrossDamageSingle* TWorldBossCrossRankInfoForRankId::mutable_damagerankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossRankInfoForRankId.DamageRankArr)
  return damagerankarr_.Mutable(index);
}
inline ::pb::TWorldBossCrossDamageSingle* TWorldBossCrossRankInfoForRankId::add_damagerankarr() {
  // @@protoc_insertion_point(field_add:pb.TWorldBossCrossRankInfoForRankId.DamageRankArr)
  return damagerankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >&
TWorldBossCrossRankInfoForRankId::damagerankarr() const {
  // @@protoc_insertion_point(field_list:pb.TWorldBossCrossRankInfoForRankId.DamageRankArr)
  return damagerankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >*
TWorldBossCrossRankInfoForRankId::mutable_damagerankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWorldBossCrossRankInfoForRankId.DamageRankArr)
  return &damagerankarr_;
}

// -------------------------------------------------------------------

// TWorldBossCrossGetBossInfoRsp

// optional uint32 CrossTeamId = 1;
inline bool TWorldBossCrossGetBossInfoRsp::has_crossteamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossGetBossInfoRsp::set_has_crossteamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossGetBossInfoRsp::clear_has_crossteamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossGetBossInfoRsp::clear_crossteamid() {
  crossteamid_ = 0u;
  clear_has_crossteamid();
}
inline ::google::protobuf::uint32 TWorldBossCrossGetBossInfoRsp::crossteamid() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetBossInfoRsp.CrossTeamId)
  return crossteamid_;
}
inline void TWorldBossCrossGetBossInfoRsp::set_crossteamid(::google::protobuf::uint32 value) {
  set_has_crossteamid();
  crossteamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossGetBossInfoRsp.CrossTeamId)
}

// optional uint32 UsedAtkNum = 2;
inline bool TWorldBossCrossGetBossInfoRsp::has_usedatknum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TWorldBossCrossGetBossInfoRsp::set_has_usedatknum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TWorldBossCrossGetBossInfoRsp::clear_has_usedatknum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TWorldBossCrossGetBossInfoRsp::clear_usedatknum() {
  usedatknum_ = 0u;
  clear_has_usedatknum();
}
inline ::google::protobuf::uint32 TWorldBossCrossGetBossInfoRsp::usedatknum() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetBossInfoRsp.UsedAtkNum)
  return usedatknum_;
}
inline void TWorldBossCrossGetBossInfoRsp::set_usedatknum(::google::protobuf::uint32 value) {
  set_has_usedatknum();
  usedatknum_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossGetBossInfoRsp.UsedAtkNum)
}

// optional uint32 BuyNum = 3;
inline bool TWorldBossCrossGetBossInfoRsp::has_buynum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TWorldBossCrossGetBossInfoRsp::set_has_buynum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TWorldBossCrossGetBossInfoRsp::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TWorldBossCrossGetBossInfoRsp::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TWorldBossCrossGetBossInfoRsp::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetBossInfoRsp.BuyNum)
  return buynum_;
}
inline void TWorldBossCrossGetBossInfoRsp::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossGetBossInfoRsp.BuyNum)
}

// optional uint32 BuyAtkNum = 4;
inline bool TWorldBossCrossGetBossInfoRsp::has_buyatknum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TWorldBossCrossGetBossInfoRsp::set_has_buyatknum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TWorldBossCrossGetBossInfoRsp::clear_has_buyatknum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TWorldBossCrossGetBossInfoRsp::clear_buyatknum() {
  buyatknum_ = 0u;
  clear_has_buyatknum();
}
inline ::google::protobuf::uint32 TWorldBossCrossGetBossInfoRsp::buyatknum() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetBossInfoRsp.BuyAtkNum)
  return buyatknum_;
}
inline void TWorldBossCrossGetBossInfoRsp::set_buyatknum(::google::protobuf::uint32 value) {
  set_has_buyatknum();
  buyatknum_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossGetBossInfoRsp.BuyAtkNum)
}

// repeated uint32 ReceivedDamageRewardTidArr = 5;
inline int TWorldBossCrossGetBossInfoRsp::receiveddamagerewardtidarr_size() const {
  return receiveddamagerewardtidarr_.size();
}
inline void TWorldBossCrossGetBossInfoRsp::clear_receiveddamagerewardtidarr() {
  receiveddamagerewardtidarr_.Clear();
}
inline ::google::protobuf::uint32 TWorldBossCrossGetBossInfoRsp::receiveddamagerewardtidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetBossInfoRsp.ReceivedDamageRewardTidArr)
  return receiveddamagerewardtidarr_.Get(index);
}
inline void TWorldBossCrossGetBossInfoRsp::set_receiveddamagerewardtidarr(int index, ::google::protobuf::uint32 value) {
  receiveddamagerewardtidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossGetBossInfoRsp.ReceivedDamageRewardTidArr)
}
inline void TWorldBossCrossGetBossInfoRsp::add_receiveddamagerewardtidarr(::google::protobuf::uint32 value) {
  receiveddamagerewardtidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TWorldBossCrossGetBossInfoRsp.ReceivedDamageRewardTidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TWorldBossCrossGetBossInfoRsp::receiveddamagerewardtidarr() const {
  // @@protoc_insertion_point(field_list:pb.TWorldBossCrossGetBossInfoRsp.ReceivedDamageRewardTidArr)
  return receiveddamagerewardtidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TWorldBossCrossGetBossInfoRsp::mutable_receiveddamagerewardtidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWorldBossCrossGetBossInfoRsp.ReceivedDamageRewardTidArr)
  return &receiveddamagerewardtidarr_;
}

// optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 6;
inline bool TWorldBossCrossGetBossInfoRsp::has_myrankinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TWorldBossCrossGetBossInfoRsp::set_has_myrankinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TWorldBossCrossGetBossInfoRsp::clear_has_myrankinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TWorldBossCrossGetBossInfoRsp::clear_myrankinfo() {
  if (myrankinfo_ != NULL) myrankinfo_->::pb::TWorldBossCrossDamageSingle::Clear();
  clear_has_myrankinfo();
}
inline const ::pb::TWorldBossCrossDamageSingle& TWorldBossCrossGetBossInfoRsp::myrankinfo() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetBossInfoRsp.MyRankInfo)
  return myrankinfo_ != NULL ? *myrankinfo_ : *default_instance_->myrankinfo_;
}
inline ::pb::TWorldBossCrossDamageSingle* TWorldBossCrossGetBossInfoRsp::mutable_myrankinfo() {
  set_has_myrankinfo();
  if (myrankinfo_ == NULL) myrankinfo_ = new ::pb::TWorldBossCrossDamageSingle;
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossGetBossInfoRsp.MyRankInfo)
  return myrankinfo_;
}
inline ::pb::TWorldBossCrossDamageSingle* TWorldBossCrossGetBossInfoRsp::release_myrankinfo() {
  clear_has_myrankinfo();
  ::pb::TWorldBossCrossDamageSingle* temp = myrankinfo_;
  myrankinfo_ = NULL;
  return temp;
}
inline void TWorldBossCrossGetBossInfoRsp::set_allocated_myrankinfo(::pb::TWorldBossCrossDamageSingle* myrankinfo) {
  delete myrankinfo_;
  myrankinfo_ = myrankinfo;
  if (myrankinfo) {
    set_has_myrankinfo();
  } else {
    clear_has_myrankinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TWorldBossCrossGetBossInfoRsp.MyRankInfo)
}

// repeated .pb.TWorldBossCrossRankInfoForRankId RankForRankIdArr = 7;
inline int TWorldBossCrossGetBossInfoRsp::rankforrankidarr_size() const {
  return rankforrankidarr_.size();
}
inline void TWorldBossCrossGetBossInfoRsp::clear_rankforrankidarr() {
  rankforrankidarr_.Clear();
}
inline const ::pb::TWorldBossCrossRankInfoForRankId& TWorldBossCrossGetBossInfoRsp::rankforrankidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetBossInfoRsp.RankForRankIdArr)
  return rankforrankidarr_.Get(index);
}
inline ::pb::TWorldBossCrossRankInfoForRankId* TWorldBossCrossGetBossInfoRsp::mutable_rankforrankidarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossGetBossInfoRsp.RankForRankIdArr)
  return rankforrankidarr_.Mutable(index);
}
inline ::pb::TWorldBossCrossRankInfoForRankId* TWorldBossCrossGetBossInfoRsp::add_rankforrankidarr() {
  // @@protoc_insertion_point(field_add:pb.TWorldBossCrossGetBossInfoRsp.RankForRankIdArr)
  return rankforrankidarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossRankInfoForRankId >&
TWorldBossCrossGetBossInfoRsp::rankforrankidarr() const {
  // @@protoc_insertion_point(field_list:pb.TWorldBossCrossGetBossInfoRsp.RankForRankIdArr)
  return rankforrankidarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossRankInfoForRankId >*
TWorldBossCrossGetBossInfoRsp::mutable_rankforrankidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWorldBossCrossGetBossInfoRsp.RankForRankIdArr)
  return &rankforrankidarr_;
}

// optional uint64 DailyMaxDamage = 8;
inline bool TWorldBossCrossGetBossInfoRsp::has_dailymaxdamage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TWorldBossCrossGetBossInfoRsp::set_has_dailymaxdamage() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TWorldBossCrossGetBossInfoRsp::clear_has_dailymaxdamage() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TWorldBossCrossGetBossInfoRsp::clear_dailymaxdamage() {
  dailymaxdamage_ = GOOGLE_ULONGLONG(0);
  clear_has_dailymaxdamage();
}
inline ::google::protobuf::uint64 TWorldBossCrossGetBossInfoRsp::dailymaxdamage() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetBossInfoRsp.DailyMaxDamage)
  return dailymaxdamage_;
}
inline void TWorldBossCrossGetBossInfoRsp::set_dailymaxdamage(::google::protobuf::uint64 value) {
  set_has_dailymaxdamage();
  dailymaxdamage_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossGetBossInfoRsp.DailyMaxDamage)
}

// repeated .pb.TWorldBossCrossExchangeInfo ArrExchangeInfo = 9;
inline int TWorldBossCrossGetBossInfoRsp::arrexchangeinfo_size() const {
  return arrexchangeinfo_.size();
}
inline void TWorldBossCrossGetBossInfoRsp::clear_arrexchangeinfo() {
  arrexchangeinfo_.Clear();
}
inline const ::pb::TWorldBossCrossExchangeInfo& TWorldBossCrossGetBossInfoRsp::arrexchangeinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetBossInfoRsp.ArrExchangeInfo)
  return arrexchangeinfo_.Get(index);
}
inline ::pb::TWorldBossCrossExchangeInfo* TWorldBossCrossGetBossInfoRsp::mutable_arrexchangeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossGetBossInfoRsp.ArrExchangeInfo)
  return arrexchangeinfo_.Mutable(index);
}
inline ::pb::TWorldBossCrossExchangeInfo* TWorldBossCrossGetBossInfoRsp::add_arrexchangeinfo() {
  // @@protoc_insertion_point(field_add:pb.TWorldBossCrossGetBossInfoRsp.ArrExchangeInfo)
  return arrexchangeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossExchangeInfo >&
TWorldBossCrossGetBossInfoRsp::arrexchangeinfo() const {
  // @@protoc_insertion_point(field_list:pb.TWorldBossCrossGetBossInfoRsp.ArrExchangeInfo)
  return arrexchangeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossExchangeInfo >*
TWorldBossCrossGetBossInfoRsp::mutable_arrexchangeinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWorldBossCrossGetBossInfoRsp.ArrExchangeInfo)
  return &arrexchangeinfo_;
}

// repeated .pb.TWorldBossCrossShopInfo ArrRmbShop = 10;
inline int TWorldBossCrossGetBossInfoRsp::arrrmbshop_size() const {
  return arrrmbshop_.size();
}
inline void TWorldBossCrossGetBossInfoRsp::clear_arrrmbshop() {
  arrrmbshop_.Clear();
}
inline const ::pb::TWorldBossCrossShopInfo& TWorldBossCrossGetBossInfoRsp::arrrmbshop(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetBossInfoRsp.ArrRmbShop)
  return arrrmbshop_.Get(index);
}
inline ::pb::TWorldBossCrossShopInfo* TWorldBossCrossGetBossInfoRsp::mutable_arrrmbshop(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossGetBossInfoRsp.ArrRmbShop)
  return arrrmbshop_.Mutable(index);
}
inline ::pb::TWorldBossCrossShopInfo* TWorldBossCrossGetBossInfoRsp::add_arrrmbshop() {
  // @@protoc_insertion_point(field_add:pb.TWorldBossCrossGetBossInfoRsp.ArrRmbShop)
  return arrrmbshop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossShopInfo >&
TWorldBossCrossGetBossInfoRsp::arrrmbshop() const {
  // @@protoc_insertion_point(field_list:pb.TWorldBossCrossGetBossInfoRsp.ArrRmbShop)
  return arrrmbshop_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossShopInfo >*
TWorldBossCrossGetBossInfoRsp::mutable_arrrmbshop() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWorldBossCrossGetBossInfoRsp.ArrRmbShop)
  return &arrrmbshop_;
}

// repeated .pb.TCommonReward ArrRankReward = 11;
inline int TWorldBossCrossGetBossInfoRsp::arrrankreward_size() const {
  return arrrankreward_.size();
}
inline void TWorldBossCrossGetBossInfoRsp::clear_arrrankreward() {
  arrrankreward_.Clear();
}
inline const ::pb::TCommonReward& TWorldBossCrossGetBossInfoRsp::arrrankreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetBossInfoRsp.ArrRankReward)
  return arrrankreward_.Get(index);
}
inline ::pb::TCommonReward* TWorldBossCrossGetBossInfoRsp::mutable_arrrankreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossGetBossInfoRsp.ArrRankReward)
  return arrrankreward_.Mutable(index);
}
inline ::pb::TCommonReward* TWorldBossCrossGetBossInfoRsp::add_arrrankreward() {
  // @@protoc_insertion_point(field_add:pb.TWorldBossCrossGetBossInfoRsp.ArrRankReward)
  return arrrankreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TWorldBossCrossGetBossInfoRsp::arrrankreward() const {
  // @@protoc_insertion_point(field_list:pb.TWorldBossCrossGetBossInfoRsp.ArrRankReward)
  return arrrankreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TWorldBossCrossGetBossInfoRsp::mutable_arrrankreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWorldBossCrossGetBossInfoRsp.ArrRankReward)
  return &arrrankreward_;
}

// optional uint32 IsRankRewardView = 12;
inline bool TWorldBossCrossGetBossInfoRsp::has_isrankrewardview() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TWorldBossCrossGetBossInfoRsp::set_has_isrankrewardview() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TWorldBossCrossGetBossInfoRsp::clear_has_isrankrewardview() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TWorldBossCrossGetBossInfoRsp::clear_isrankrewardview() {
  isrankrewardview_ = 0u;
  clear_has_isrankrewardview();
}
inline ::google::protobuf::uint32 TWorldBossCrossGetBossInfoRsp::isrankrewardview() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetBossInfoRsp.IsRankRewardView)
  return isrankrewardview_;
}
inline void TWorldBossCrossGetBossInfoRsp::set_isrankrewardview(::google::protobuf::uint32 value) {
  set_has_isrankrewardview();
  isrankrewardview_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossGetBossInfoRsp.IsRankRewardView)
}

// -------------------------------------------------------------------

// TWorldBossCrossGetAboveRankNRsp

// repeated .pb.TWorldBossCrossDamageSingle AboveRankArr = 1;
inline int TWorldBossCrossGetAboveRankNRsp::aboverankarr_size() const {
  return aboverankarr_.size();
}
inline void TWorldBossCrossGetAboveRankNRsp::clear_aboverankarr() {
  aboverankarr_.Clear();
}
inline const ::pb::TWorldBossCrossDamageSingle& TWorldBossCrossGetAboveRankNRsp::aboverankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetAboveRankNRsp.AboveRankArr)
  return aboverankarr_.Get(index);
}
inline ::pb::TWorldBossCrossDamageSingle* TWorldBossCrossGetAboveRankNRsp::mutable_aboverankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossGetAboveRankNRsp.AboveRankArr)
  return aboverankarr_.Mutable(index);
}
inline ::pb::TWorldBossCrossDamageSingle* TWorldBossCrossGetAboveRankNRsp::add_aboverankarr() {
  // @@protoc_insertion_point(field_add:pb.TWorldBossCrossGetAboveRankNRsp.AboveRankArr)
  return aboverankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >&
TWorldBossCrossGetAboveRankNRsp::aboverankarr() const {
  // @@protoc_insertion_point(field_list:pb.TWorldBossCrossGetAboveRankNRsp.AboveRankArr)
  return aboverankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >*
TWorldBossCrossGetAboveRankNRsp::mutable_aboverankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWorldBossCrossGetAboveRankNRsp.AboveRankArr)
  return &aboverankarr_;
}

// -------------------------------------------------------------------

// TWorldBossCrossGetRankInfoByRankIdReq

// optional uint32 RankId = 1;
inline bool TWorldBossCrossGetRankInfoByRankIdReq::has_rankid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossGetRankInfoByRankIdReq::set_has_rankid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossGetRankInfoByRankIdReq::clear_has_rankid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossGetRankInfoByRankIdReq::clear_rankid() {
  rankid_ = 0u;
  clear_has_rankid();
}
inline ::google::protobuf::uint32 TWorldBossCrossGetRankInfoByRankIdReq::rankid() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetRankInfoByRankIdReq.RankId)
  return rankid_;
}
inline void TWorldBossCrossGetRankInfoByRankIdReq::set_rankid(::google::protobuf::uint32 value) {
  set_has_rankid();
  rankid_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossGetRankInfoByRankIdReq.RankId)
}

// optional uint32 Offset = 2;
inline bool TWorldBossCrossGetRankInfoByRankIdReq::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TWorldBossCrossGetRankInfoByRankIdReq::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TWorldBossCrossGetRankInfoByRankIdReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TWorldBossCrossGetRankInfoByRankIdReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TWorldBossCrossGetRankInfoByRankIdReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetRankInfoByRankIdReq.Offset)
  return offset_;
}
inline void TWorldBossCrossGetRankInfoByRankIdReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossGetRankInfoByRankIdReq.Offset)
}

// optional uint32 Limit = 3;
inline bool TWorldBossCrossGetRankInfoByRankIdReq::has_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TWorldBossCrossGetRankInfoByRankIdReq::set_has_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TWorldBossCrossGetRankInfoByRankIdReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TWorldBossCrossGetRankInfoByRankIdReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TWorldBossCrossGetRankInfoByRankIdReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetRankInfoByRankIdReq.Limit)
  return limit_;
}
inline void TWorldBossCrossGetRankInfoByRankIdReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossGetRankInfoByRankIdReq.Limit)
}

// -------------------------------------------------------------------

// TWorldBossCrossGetRankInfoByRankIdRsp

// repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 1;
inline int TWorldBossCrossGetRankInfoByRankIdRsp::damagerankarr_size() const {
  return damagerankarr_.size();
}
inline void TWorldBossCrossGetRankInfoByRankIdRsp::clear_damagerankarr() {
  damagerankarr_.Clear();
}
inline const ::pb::TWorldBossCrossDamageSingle& TWorldBossCrossGetRankInfoByRankIdRsp::damagerankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetRankInfoByRankIdRsp.DamageRankArr)
  return damagerankarr_.Get(index);
}
inline ::pb::TWorldBossCrossDamageSingle* TWorldBossCrossGetRankInfoByRankIdRsp::mutable_damagerankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossGetRankInfoByRankIdRsp.DamageRankArr)
  return damagerankarr_.Mutable(index);
}
inline ::pb::TWorldBossCrossDamageSingle* TWorldBossCrossGetRankInfoByRankIdRsp::add_damagerankarr() {
  // @@protoc_insertion_point(field_add:pb.TWorldBossCrossGetRankInfoByRankIdRsp.DamageRankArr)
  return damagerankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >&
TWorldBossCrossGetRankInfoByRankIdRsp::damagerankarr() const {
  // @@protoc_insertion_point(field_list:pb.TWorldBossCrossGetRankInfoByRankIdRsp.DamageRankArr)
  return damagerankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >*
TWorldBossCrossGetRankInfoByRankIdRsp::mutable_damagerankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWorldBossCrossGetRankInfoByRankIdRsp.DamageRankArr)
  return &damagerankarr_;
}

// -------------------------------------------------------------------

// TWorldBossCrossEnterBattleReq

// optional uint32 BossId = 1;
inline bool TWorldBossCrossEnterBattleReq::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossEnterBattleReq::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossEnterBattleReq::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossEnterBattleReq::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TWorldBossCrossEnterBattleReq::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossEnterBattleReq.BossId)
  return bossid_;
}
inline void TWorldBossCrossEnterBattleReq::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossEnterBattleReq.BossId)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 2;
inline bool TWorldBossCrossEnterBattleReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TWorldBossCrossEnterBattleReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TWorldBossCrossEnterBattleReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TWorldBossCrossEnterBattleReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TWorldBossCrossEnterBattleReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossEnterBattleReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TWorldBossCrossEnterBattleReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossEnterBattleReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TWorldBossCrossEnterBattleReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TWorldBossCrossEnterBattleReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TWorldBossCrossEnterBattleReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TWorldBossCrossEnterBattleRsp

// optional .pb.TBattleArgs BattleArgs = 1;
inline bool TWorldBossCrossEnterBattleRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossEnterBattleRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossEnterBattleRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossEnterBattleRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TWorldBossCrossEnterBattleRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossEnterBattleRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TWorldBossCrossEnterBattleRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossEnterBattleRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TWorldBossCrossEnterBattleRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TWorldBossCrossEnterBattleRsp::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TWorldBossCrossEnterBattleRsp.BattleArgs)
}

// optional uint32 UsedAtkNum = 2;
inline bool TWorldBossCrossEnterBattleRsp::has_usedatknum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TWorldBossCrossEnterBattleRsp::set_has_usedatknum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TWorldBossCrossEnterBattleRsp::clear_has_usedatknum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TWorldBossCrossEnterBattleRsp::clear_usedatknum() {
  usedatknum_ = 0u;
  clear_has_usedatknum();
}
inline ::google::protobuf::uint32 TWorldBossCrossEnterBattleRsp::usedatknum() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossEnterBattleRsp.UsedAtkNum)
  return usedatknum_;
}
inline void TWorldBossCrossEnterBattleRsp::set_usedatknum(::google::protobuf::uint32 value) {
  set_has_usedatknum();
  usedatknum_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossEnterBattleRsp.UsedAtkNum)
}

// -------------------------------------------------------------------

// TWorldBossCrossReportBattleReq

// optional uint32 BossId = 1;
inline bool TWorldBossCrossReportBattleReq::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossReportBattleReq::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossReportBattleReq::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossReportBattleReq::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TWorldBossCrossReportBattleReq::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossReportBattleReq.BossId)
  return bossid_;
}
inline void TWorldBossCrossReportBattleReq::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossReportBattleReq.BossId)
}

// optional bytes BattleRet = 2;
inline bool TWorldBossCrossReportBattleReq::has_battleret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TWorldBossCrossReportBattleReq::set_has_battleret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TWorldBossCrossReportBattleReq::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TWorldBossCrossReportBattleReq::clear_battleret() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_->clear();
  }
  clear_has_battleret();
}
inline const ::std::string& TWorldBossCrossReportBattleReq::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossReportBattleReq.BattleRet)
  return *battleret_;
}
inline void TWorldBossCrossReportBattleReq::set_battleret(const ::std::string& value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossReportBattleReq.BattleRet)
}
inline void TWorldBossCrossReportBattleReq::set_battleret(const char* value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TWorldBossCrossReportBattleReq.BattleRet)
}
inline void TWorldBossCrossReportBattleReq::set_battleret(const void* value, size_t size) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TWorldBossCrossReportBattleReq.BattleRet)
}
inline ::std::string* TWorldBossCrossReportBattleReq::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossReportBattleReq.BattleRet)
  return battleret_;
}
inline ::std::string* TWorldBossCrossReportBattleReq::release_battleret() {
  clear_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleret_;
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TWorldBossCrossReportBattleReq::set_allocated_battleret(::std::string* battleret) {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (battleret) {
    set_has_battleret();
    battleret_ = battleret;
  } else {
    clear_has_battleret();
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TWorldBossCrossReportBattleReq.BattleRet)
}

// -------------------------------------------------------------------

// TWorldBossCrossReportBattleRsp

// optional bool IsNewDamageRecord = 1;
inline bool TWorldBossCrossReportBattleRsp::has_isnewdamagerecord() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossReportBattleRsp::set_has_isnewdamagerecord() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossReportBattleRsp::clear_has_isnewdamagerecord() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossReportBattleRsp::clear_isnewdamagerecord() {
  isnewdamagerecord_ = false;
  clear_has_isnewdamagerecord();
}
inline bool TWorldBossCrossReportBattleRsp::isnewdamagerecord() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossReportBattleRsp.IsNewDamageRecord)
  return isnewdamagerecord_;
}
inline void TWorldBossCrossReportBattleRsp::set_isnewdamagerecord(bool value) {
  set_has_isnewdamagerecord();
  isnewdamagerecord_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossReportBattleRsp.IsNewDamageRecord)
}

// optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 2;
inline bool TWorldBossCrossReportBattleRsp::has_myrankinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TWorldBossCrossReportBattleRsp::set_has_myrankinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TWorldBossCrossReportBattleRsp::clear_has_myrankinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TWorldBossCrossReportBattleRsp::clear_myrankinfo() {
  if (myrankinfo_ != NULL) myrankinfo_->::pb::TWorldBossCrossDamageSingle::Clear();
  clear_has_myrankinfo();
}
inline const ::pb::TWorldBossCrossDamageSingle& TWorldBossCrossReportBattleRsp::myrankinfo() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossReportBattleRsp.MyRankInfo)
  return myrankinfo_ != NULL ? *myrankinfo_ : *default_instance_->myrankinfo_;
}
inline ::pb::TWorldBossCrossDamageSingle* TWorldBossCrossReportBattleRsp::mutable_myrankinfo() {
  set_has_myrankinfo();
  if (myrankinfo_ == NULL) myrankinfo_ = new ::pb::TWorldBossCrossDamageSingle;
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossReportBattleRsp.MyRankInfo)
  return myrankinfo_;
}
inline ::pb::TWorldBossCrossDamageSingle* TWorldBossCrossReportBattleRsp::release_myrankinfo() {
  clear_has_myrankinfo();
  ::pb::TWorldBossCrossDamageSingle* temp = myrankinfo_;
  myrankinfo_ = NULL;
  return temp;
}
inline void TWorldBossCrossReportBattleRsp::set_allocated_myrankinfo(::pb::TWorldBossCrossDamageSingle* myrankinfo) {
  delete myrankinfo_;
  myrankinfo_ = myrankinfo;
  if (myrankinfo) {
    set_has_myrankinfo();
  } else {
    clear_has_myrankinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TWorldBossCrossReportBattleRsp.MyRankInfo)
}

// repeated .pb.TCommonReward DropArray = 3;
inline int TWorldBossCrossReportBattleRsp::droparray_size() const {
  return droparray_.size();
}
inline void TWorldBossCrossReportBattleRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TWorldBossCrossReportBattleRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossReportBattleRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TWorldBossCrossReportBattleRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossReportBattleRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TWorldBossCrossReportBattleRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TWorldBossCrossReportBattleRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TWorldBossCrossReportBattleRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TWorldBossCrossReportBattleRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TWorldBossCrossReportBattleRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWorldBossCrossReportBattleRsp.DropArray)
  return &droparray_;
}

// optional uint64 DailyMaxDamage = 4;
inline bool TWorldBossCrossReportBattleRsp::has_dailymaxdamage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TWorldBossCrossReportBattleRsp::set_has_dailymaxdamage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TWorldBossCrossReportBattleRsp::clear_has_dailymaxdamage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TWorldBossCrossReportBattleRsp::clear_dailymaxdamage() {
  dailymaxdamage_ = GOOGLE_ULONGLONG(0);
  clear_has_dailymaxdamage();
}
inline ::google::protobuf::uint64 TWorldBossCrossReportBattleRsp::dailymaxdamage() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossReportBattleRsp.DailyMaxDamage)
  return dailymaxdamage_;
}
inline void TWorldBossCrossReportBattleRsp::set_dailymaxdamage(::google::protobuf::uint64 value) {
  set_has_dailymaxdamage();
  dailymaxdamage_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossReportBattleRsp.DailyMaxDamage)
}

// -------------------------------------------------------------------

// TWorldBossCrossBuyAtkNumReq

// optional uint32 Num = 1;
inline bool TWorldBossCrossBuyAtkNumReq::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossBuyAtkNumReq::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossBuyAtkNumReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossBuyAtkNumReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TWorldBossCrossBuyAtkNumReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossBuyAtkNumReq.Num)
  return num_;
}
inline void TWorldBossCrossBuyAtkNumReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossBuyAtkNumReq.Num)
}

// -------------------------------------------------------------------

// TWorldBossCrossBuyAtkNumRsp

// optional uint32 BuyNum = 1;
inline bool TWorldBossCrossBuyAtkNumRsp::has_buynum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossBuyAtkNumRsp::set_has_buynum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossBuyAtkNumRsp::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossBuyAtkNumRsp::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TWorldBossCrossBuyAtkNumRsp::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossBuyAtkNumRsp.BuyNum)
  return buynum_;
}
inline void TWorldBossCrossBuyAtkNumRsp::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossBuyAtkNumRsp.BuyNum)
}

// optional uint32 BuyAtkNum = 2;
inline bool TWorldBossCrossBuyAtkNumRsp::has_buyatknum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TWorldBossCrossBuyAtkNumRsp::set_has_buyatknum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TWorldBossCrossBuyAtkNumRsp::clear_has_buyatknum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TWorldBossCrossBuyAtkNumRsp::clear_buyatknum() {
  buyatknum_ = 0u;
  clear_has_buyatknum();
}
inline ::google::protobuf::uint32 TWorldBossCrossBuyAtkNumRsp::buyatknum() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossBuyAtkNumRsp.BuyAtkNum)
  return buyatknum_;
}
inline void TWorldBossCrossBuyAtkNumRsp::set_buyatknum(::google::protobuf::uint32 value) {
  set_has_buyatknum();
  buyatknum_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossBuyAtkNumRsp.BuyAtkNum)
}

// -------------------------------------------------------------------

// TWorldBossCrossReceiveDamageRewardReq

// optional uint32 RewardTid = 1;
inline bool TWorldBossCrossReceiveDamageRewardReq::has_rewardtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossReceiveDamageRewardReq::set_has_rewardtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossReceiveDamageRewardReq::clear_has_rewardtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossReceiveDamageRewardReq::clear_rewardtid() {
  rewardtid_ = 0u;
  clear_has_rewardtid();
}
inline ::google::protobuf::uint32 TWorldBossCrossReceiveDamageRewardReq::rewardtid() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossReceiveDamageRewardReq.RewardTid)
  return rewardtid_;
}
inline void TWorldBossCrossReceiveDamageRewardReq::set_rewardtid(::google::protobuf::uint32 value) {
  set_has_rewardtid();
  rewardtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossReceiveDamageRewardReq.RewardTid)
}

// -------------------------------------------------------------------

// TWorldBossCrossReceiveDamageRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TWorldBossCrossReceiveDamageRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TWorldBossCrossReceiveDamageRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TWorldBossCrossReceiveDamageRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossReceiveDamageRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TWorldBossCrossReceiveDamageRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossReceiveDamageRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TWorldBossCrossReceiveDamageRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TWorldBossCrossReceiveDamageRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TWorldBossCrossReceiveDamageRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TWorldBossCrossReceiveDamageRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TWorldBossCrossReceiveDamageRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWorldBossCrossReceiveDamageRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TWorldBossCrossAutoReceiveDamageRewardRsp

// repeated uint32 ReceivedRewardTidArr = 1;
inline int TWorldBossCrossAutoReceiveDamageRewardRsp::receivedrewardtidarr_size() const {
  return receivedrewardtidarr_.size();
}
inline void TWorldBossCrossAutoReceiveDamageRewardRsp::clear_receivedrewardtidarr() {
  receivedrewardtidarr_.Clear();
}
inline ::google::protobuf::uint32 TWorldBossCrossAutoReceiveDamageRewardRsp::receivedrewardtidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossAutoReceiveDamageRewardRsp.ReceivedRewardTidArr)
  return receivedrewardtidarr_.Get(index);
}
inline void TWorldBossCrossAutoReceiveDamageRewardRsp::set_receivedrewardtidarr(int index, ::google::protobuf::uint32 value) {
  receivedrewardtidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossAutoReceiveDamageRewardRsp.ReceivedRewardTidArr)
}
inline void TWorldBossCrossAutoReceiveDamageRewardRsp::add_receivedrewardtidarr(::google::protobuf::uint32 value) {
  receivedrewardtidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TWorldBossCrossAutoReceiveDamageRewardRsp.ReceivedRewardTidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TWorldBossCrossAutoReceiveDamageRewardRsp::receivedrewardtidarr() const {
  // @@protoc_insertion_point(field_list:pb.TWorldBossCrossAutoReceiveDamageRewardRsp.ReceivedRewardTidArr)
  return receivedrewardtidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TWorldBossCrossAutoReceiveDamageRewardRsp::mutable_receivedrewardtidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWorldBossCrossAutoReceiveDamageRewardRsp.ReceivedRewardTidArr)
  return &receivedrewardtidarr_;
}

// repeated .pb.TCommonReward RewardArr = 2;
inline int TWorldBossCrossAutoReceiveDamageRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TWorldBossCrossAutoReceiveDamageRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TWorldBossCrossAutoReceiveDamageRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossAutoReceiveDamageRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TWorldBossCrossAutoReceiveDamageRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossAutoReceiveDamageRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TWorldBossCrossAutoReceiveDamageRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TWorldBossCrossAutoReceiveDamageRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TWorldBossCrossAutoReceiveDamageRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TWorldBossCrossAutoReceiveDamageRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TWorldBossCrossAutoReceiveDamageRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWorldBossCrossAutoReceiveDamageRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TWorldBossCrossUnit

// optional uint32 Hid = 1;
inline bool TWorldBossCrossUnit::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossUnit::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossUnit::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossUnit::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TWorldBossCrossUnit::hid() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossUnit.Hid)
  return hid_;
}
inline void TWorldBossCrossUnit::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossUnit.Hid)
}

// optional uint32 Pos = 2;
inline bool TWorldBossCrossUnit::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TWorldBossCrossUnit::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TWorldBossCrossUnit::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TWorldBossCrossUnit::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TWorldBossCrossUnit::pos() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossUnit.Pos)
  return pos_;
}
inline void TWorldBossCrossUnit::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossUnit.Pos)
}

// optional uint32 StarLv = 3;
inline bool TWorldBossCrossUnit::has_starlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TWorldBossCrossUnit::set_has_starlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TWorldBossCrossUnit::clear_has_starlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TWorldBossCrossUnit::clear_starlv() {
  starlv_ = 0u;
  clear_has_starlv();
}
inline ::google::protobuf::uint32 TWorldBossCrossUnit::starlv() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossUnit.StarLv)
  return starlv_;
}
inline void TWorldBossCrossUnit::set_starlv(::google::protobuf::uint32 value) {
  set_has_starlv();
  starlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossUnit.StarLv)
}

// optional uint32 Level = 4;
inline bool TWorldBossCrossUnit::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TWorldBossCrossUnit::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TWorldBossCrossUnit::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TWorldBossCrossUnit::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TWorldBossCrossUnit::level() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossUnit.Level)
  return level_;
}
inline void TWorldBossCrossUnit::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossUnit.Level)
}

// -------------------------------------------------------------------

// TWorldBossCrossBattleRecord

// optional uint64 Rid = 1;
inline bool TWorldBossCrossBattleRecord::has_rid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossBattleRecord::set_has_rid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossBattleRecord::clear_has_rid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossBattleRecord::clear_rid() {
  rid_ = GOOGLE_ULONGLONG(0);
  clear_has_rid();
}
inline ::google::protobuf::uint64 TWorldBossCrossBattleRecord::rid() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossBattleRecord.Rid)
  return rid_;
}
inline void TWorldBossCrossBattleRecord::set_rid(::google::protobuf::uint64 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossBattleRecord.Rid)
}

// optional uint64 BattleTime = 2;
inline bool TWorldBossCrossBattleRecord::has_battletime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TWorldBossCrossBattleRecord::set_has_battletime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TWorldBossCrossBattleRecord::clear_has_battletime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TWorldBossCrossBattleRecord::clear_battletime() {
  battletime_ = GOOGLE_ULONGLONG(0);
  clear_has_battletime();
}
inline ::google::protobuf::uint64 TWorldBossCrossBattleRecord::battletime() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossBattleRecord.BattleTime)
  return battletime_;
}
inline void TWorldBossCrossBattleRecord::set_battletime(::google::protobuf::uint64 value) {
  set_has_battletime();
  battletime_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossBattleRecord.BattleTime)
}

// optional uint64 Damage = 3;
inline bool TWorldBossCrossBattleRecord::has_damage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TWorldBossCrossBattleRecord::set_has_damage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TWorldBossCrossBattleRecord::clear_has_damage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TWorldBossCrossBattleRecord::clear_damage() {
  damage_ = GOOGLE_ULONGLONG(0);
  clear_has_damage();
}
inline ::google::protobuf::uint64 TWorldBossCrossBattleRecord::damage() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossBattleRecord.Damage)
  return damage_;
}
inline void TWorldBossCrossBattleRecord::set_damage(::google::protobuf::uint64 value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossBattleRecord.Damage)
}

// repeated .pb.TWorldBossCrossUnit UnitArr = 4;
inline int TWorldBossCrossBattleRecord::unitarr_size() const {
  return unitarr_.size();
}
inline void TWorldBossCrossBattleRecord::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TWorldBossCrossUnit& TWorldBossCrossBattleRecord::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossBattleRecord.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TWorldBossCrossUnit* TWorldBossCrossBattleRecord::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossBattleRecord.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TWorldBossCrossUnit* TWorldBossCrossBattleRecord::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TWorldBossCrossBattleRecord.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossUnit >&
TWorldBossCrossBattleRecord::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TWorldBossCrossBattleRecord.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossUnit >*
TWorldBossCrossBattleRecord::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWorldBossCrossBattleRecord.UnitArr)
  return &unitarr_;
}

// -------------------------------------------------------------------

// TWorldBossCrossGetBattleRecordRsp

// repeated .pb.TWorldBossCrossBattleRecord RecordArr = 1;
inline int TWorldBossCrossGetBattleRecordRsp::recordarr_size() const {
  return recordarr_.size();
}
inline void TWorldBossCrossGetBattleRecordRsp::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TWorldBossCrossBattleRecord& TWorldBossCrossGetBattleRecordRsp::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetBattleRecordRsp.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TWorldBossCrossBattleRecord* TWorldBossCrossGetBattleRecordRsp::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossGetBattleRecordRsp.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TWorldBossCrossBattleRecord* TWorldBossCrossGetBattleRecordRsp::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TWorldBossCrossGetBattleRecordRsp.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossBattleRecord >&
TWorldBossCrossGetBattleRecordRsp::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TWorldBossCrossGetBattleRecordRsp.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossBattleRecord >*
TWorldBossCrossGetBattleRecordRsp::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWorldBossCrossGetBattleRecordRsp.RecordArr)
  return &recordarr_;
}

// -------------------------------------------------------------------

// TWorldBossCrossGetMaxBattleRecordReq

// optional uint64 Uid = 1;
inline bool TWorldBossCrossGetMaxBattleRecordReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossGetMaxBattleRecordReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossGetMaxBattleRecordReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossGetMaxBattleRecordReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TWorldBossCrossGetMaxBattleRecordReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetMaxBattleRecordReq.Uid)
  return uid_;
}
inline void TWorldBossCrossGetMaxBattleRecordReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossGetMaxBattleRecordReq.Uid)
}

// optional string ServerId = 2;
inline bool TWorldBossCrossGetMaxBattleRecordReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TWorldBossCrossGetMaxBattleRecordReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TWorldBossCrossGetMaxBattleRecordReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TWorldBossCrossGetMaxBattleRecordReq::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TWorldBossCrossGetMaxBattleRecordReq::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetMaxBattleRecordReq.ServerId)
  return *serverid_;
}
inline void TWorldBossCrossGetMaxBattleRecordReq::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossGetMaxBattleRecordReq.ServerId)
}
inline void TWorldBossCrossGetMaxBattleRecordReq::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TWorldBossCrossGetMaxBattleRecordReq.ServerId)
}
inline void TWorldBossCrossGetMaxBattleRecordReq::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TWorldBossCrossGetMaxBattleRecordReq.ServerId)
}
inline ::std::string* TWorldBossCrossGetMaxBattleRecordReq::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossGetMaxBattleRecordReq.ServerId)
  return serverid_;
}
inline ::std::string* TWorldBossCrossGetMaxBattleRecordReq::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TWorldBossCrossGetMaxBattleRecordReq::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TWorldBossCrossGetMaxBattleRecordReq.ServerId)
}

// -------------------------------------------------------------------

// TWorldBossCrossGetMaxBattleRecordRsp

// optional bytes BattleRet = 2;
inline bool TWorldBossCrossGetMaxBattleRecordRsp::has_battleret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossGetMaxBattleRecordRsp::set_has_battleret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossGetMaxBattleRecordRsp::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossGetMaxBattleRecordRsp::clear_battleret() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_->clear();
  }
  clear_has_battleret();
}
inline const ::std::string& TWorldBossCrossGetMaxBattleRecordRsp::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetMaxBattleRecordRsp.BattleRet)
  return *battleret_;
}
inline void TWorldBossCrossGetMaxBattleRecordRsp::set_battleret(const ::std::string& value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossGetMaxBattleRecordRsp.BattleRet)
}
inline void TWorldBossCrossGetMaxBattleRecordRsp::set_battleret(const char* value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TWorldBossCrossGetMaxBattleRecordRsp.BattleRet)
}
inline void TWorldBossCrossGetMaxBattleRecordRsp::set_battleret(const void* value, size_t size) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TWorldBossCrossGetMaxBattleRecordRsp.BattleRet)
}
inline ::std::string* TWorldBossCrossGetMaxBattleRecordRsp::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossGetMaxBattleRecordRsp.BattleRet)
  return battleret_;
}
inline ::std::string* TWorldBossCrossGetMaxBattleRecordRsp::release_battleret() {
  clear_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleret_;
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TWorldBossCrossGetMaxBattleRecordRsp::set_allocated_battleret(::std::string* battleret) {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (battleret) {
    set_has_battleret();
    battleret_ = battleret;
  } else {
    clear_has_battleret();
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TWorldBossCrossGetMaxBattleRecordRsp.BattleRet)
}

// -------------------------------------------------------------------

// TWorldBossCrossGetUserMaxBattleRidReq

// optional uint64 Uid = 1;
inline bool TWorldBossCrossGetUserMaxBattleRidReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossGetUserMaxBattleRidReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossGetUserMaxBattleRidReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossGetUserMaxBattleRidReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TWorldBossCrossGetUserMaxBattleRidReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetUserMaxBattleRidReq.Uid)
  return uid_;
}
inline void TWorldBossCrossGetUserMaxBattleRidReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossGetUserMaxBattleRidReq.Uid)
}

// -------------------------------------------------------------------

// TWorldBossCrossGetUserMaxBattleRidRsp

// optional uint64 Rid = 2;
inline bool TWorldBossCrossGetUserMaxBattleRidRsp::has_rid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossGetUserMaxBattleRidRsp::set_has_rid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossGetUserMaxBattleRidRsp::clear_has_rid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossGetUserMaxBattleRidRsp::clear_rid() {
  rid_ = GOOGLE_ULONGLONG(0);
  clear_has_rid();
}
inline ::google::protobuf::uint64 TWorldBossCrossGetUserMaxBattleRidRsp::rid() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetUserMaxBattleRidRsp.Rid)
  return rid_;
}
inline void TWorldBossCrossGetUserMaxBattleRidRsp::set_rid(::google::protobuf::uint64 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossGetUserMaxBattleRidRsp.Rid)
}

// -------------------------------------------------------------------

// TWorldBossCrossGetBossSimpleInfoRsp

// repeated .pb.TWorldBossCrossRankInfoForRankId RankForRankIdArr = 9;
inline int TWorldBossCrossGetBossSimpleInfoRsp::rankforrankidarr_size() const {
  return rankforrankidarr_.size();
}
inline void TWorldBossCrossGetBossSimpleInfoRsp::clear_rankforrankidarr() {
  rankforrankidarr_.Clear();
}
inline const ::pb::TWorldBossCrossRankInfoForRankId& TWorldBossCrossGetBossSimpleInfoRsp::rankforrankidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetBossSimpleInfoRsp.RankForRankIdArr)
  return rankforrankidarr_.Get(index);
}
inline ::pb::TWorldBossCrossRankInfoForRankId* TWorldBossCrossGetBossSimpleInfoRsp::mutable_rankforrankidarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossGetBossSimpleInfoRsp.RankForRankIdArr)
  return rankforrankidarr_.Mutable(index);
}
inline ::pb::TWorldBossCrossRankInfoForRankId* TWorldBossCrossGetBossSimpleInfoRsp::add_rankforrankidarr() {
  // @@protoc_insertion_point(field_add:pb.TWorldBossCrossGetBossSimpleInfoRsp.RankForRankIdArr)
  return rankforrankidarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossRankInfoForRankId >&
TWorldBossCrossGetBossSimpleInfoRsp::rankforrankidarr() const {
  // @@protoc_insertion_point(field_list:pb.TWorldBossCrossGetBossSimpleInfoRsp.RankForRankIdArr)
  return rankforrankidarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossRankInfoForRankId >*
TWorldBossCrossGetBossSimpleInfoRsp::mutable_rankforrankidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWorldBossCrossGetBossSimpleInfoRsp.RankForRankIdArr)
  return &rankforrankidarr_;
}

// -------------------------------------------------------------------

// TWorldBossCrossExchangeReq

// optional uint32 ExchangeId = 1;
inline bool TWorldBossCrossExchangeReq::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossExchangeReq::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossExchangeReq::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossExchangeReq::clear_exchangeid() {
  exchangeid_ = 0u;
  clear_has_exchangeid();
}
inline ::google::protobuf::uint32 TWorldBossCrossExchangeReq::exchangeid() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossExchangeReq.ExchangeId)
  return exchangeid_;
}
inline void TWorldBossCrossExchangeReq::set_exchangeid(::google::protobuf::uint32 value) {
  set_has_exchangeid();
  exchangeid_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossExchangeReq.ExchangeId)
}

// optional uint32 Num = 2;
inline bool TWorldBossCrossExchangeReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TWorldBossCrossExchangeReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TWorldBossCrossExchangeReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TWorldBossCrossExchangeReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TWorldBossCrossExchangeReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossExchangeReq.Num)
  return num_;
}
inline void TWorldBossCrossExchangeReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossExchangeReq.Num)
}

// -------------------------------------------------------------------

// TWorldBossCrossGetRankInfoTopNRsp

// repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 1;
inline int TWorldBossCrossGetRankInfoTopNRsp::damagerankarr_size() const {
  return damagerankarr_.size();
}
inline void TWorldBossCrossGetRankInfoTopNRsp::clear_damagerankarr() {
  damagerankarr_.Clear();
}
inline const ::pb::TWorldBossCrossDamageSingle& TWorldBossCrossGetRankInfoTopNRsp::damagerankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetRankInfoTopNRsp.DamageRankArr)
  return damagerankarr_.Get(index);
}
inline ::pb::TWorldBossCrossDamageSingle* TWorldBossCrossGetRankInfoTopNRsp::mutable_damagerankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossGetRankInfoTopNRsp.DamageRankArr)
  return damagerankarr_.Mutable(index);
}
inline ::pb::TWorldBossCrossDamageSingle* TWorldBossCrossGetRankInfoTopNRsp::add_damagerankarr() {
  // @@protoc_insertion_point(field_add:pb.TWorldBossCrossGetRankInfoTopNRsp.DamageRankArr)
  return damagerankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >&
TWorldBossCrossGetRankInfoTopNRsp::damagerankarr() const {
  // @@protoc_insertion_point(field_list:pb.TWorldBossCrossGetRankInfoTopNRsp.DamageRankArr)
  return damagerankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >*
TWorldBossCrossGetRankInfoTopNRsp::mutable_damagerankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWorldBossCrossGetRankInfoTopNRsp.DamageRankArr)
  return &damagerankarr_;
}

// optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 2;
inline bool TWorldBossCrossGetRankInfoTopNRsp::has_myrankinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TWorldBossCrossGetRankInfoTopNRsp::set_has_myrankinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TWorldBossCrossGetRankInfoTopNRsp::clear_has_myrankinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TWorldBossCrossGetRankInfoTopNRsp::clear_myrankinfo() {
  if (myrankinfo_ != NULL) myrankinfo_->::pb::TWorldBossCrossDamageSingle::Clear();
  clear_has_myrankinfo();
}
inline const ::pb::TWorldBossCrossDamageSingle& TWorldBossCrossGetRankInfoTopNRsp::myrankinfo() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetRankInfoTopNRsp.MyRankInfo)
  return myrankinfo_ != NULL ? *myrankinfo_ : *default_instance_->myrankinfo_;
}
inline ::pb::TWorldBossCrossDamageSingle* TWorldBossCrossGetRankInfoTopNRsp::mutable_myrankinfo() {
  set_has_myrankinfo();
  if (myrankinfo_ == NULL) myrankinfo_ = new ::pb::TWorldBossCrossDamageSingle;
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossGetRankInfoTopNRsp.MyRankInfo)
  return myrankinfo_;
}
inline ::pb::TWorldBossCrossDamageSingle* TWorldBossCrossGetRankInfoTopNRsp::release_myrankinfo() {
  clear_has_myrankinfo();
  ::pb::TWorldBossCrossDamageSingle* temp = myrankinfo_;
  myrankinfo_ = NULL;
  return temp;
}
inline void TWorldBossCrossGetRankInfoTopNRsp::set_allocated_myrankinfo(::pb::TWorldBossCrossDamageSingle* myrankinfo) {
  delete myrankinfo_;
  myrankinfo_ = myrankinfo;
  if (myrankinfo) {
    set_has_myrankinfo();
  } else {
    clear_has_myrankinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TWorldBossCrossGetRankInfoTopNRsp.MyRankInfo)
}

// -------------------------------------------------------------------

// TWorldBossCrossGetRankInfoByLimitReq

// optional uint32 Offset = 1;
inline bool TWorldBossCrossGetRankInfoByLimitReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWorldBossCrossGetRankInfoByLimitReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWorldBossCrossGetRankInfoByLimitReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWorldBossCrossGetRankInfoByLimitReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TWorldBossCrossGetRankInfoByLimitReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetRankInfoByLimitReq.Offset)
  return offset_;
}
inline void TWorldBossCrossGetRankInfoByLimitReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossGetRankInfoByLimitReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TWorldBossCrossGetRankInfoByLimitReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TWorldBossCrossGetRankInfoByLimitReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TWorldBossCrossGetRankInfoByLimitReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TWorldBossCrossGetRankInfoByLimitReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TWorldBossCrossGetRankInfoByLimitReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetRankInfoByLimitReq.Limit)
  return limit_;
}
inline void TWorldBossCrossGetRankInfoByLimitReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TWorldBossCrossGetRankInfoByLimitReq.Limit)
}

// -------------------------------------------------------------------

// TWorldBossCrossGetRankInfoByLimitRsp

// repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 1;
inline int TWorldBossCrossGetRankInfoByLimitRsp::damagerankarr_size() const {
  return damagerankarr_.size();
}
inline void TWorldBossCrossGetRankInfoByLimitRsp::clear_damagerankarr() {
  damagerankarr_.Clear();
}
inline const ::pb::TWorldBossCrossDamageSingle& TWorldBossCrossGetRankInfoByLimitRsp::damagerankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetRankInfoByLimitRsp.DamageRankArr)
  return damagerankarr_.Get(index);
}
inline ::pb::TWorldBossCrossDamageSingle* TWorldBossCrossGetRankInfoByLimitRsp::mutable_damagerankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossGetRankInfoByLimitRsp.DamageRankArr)
  return damagerankarr_.Mutable(index);
}
inline ::pb::TWorldBossCrossDamageSingle* TWorldBossCrossGetRankInfoByLimitRsp::add_damagerankarr() {
  // @@protoc_insertion_point(field_add:pb.TWorldBossCrossGetRankInfoByLimitRsp.DamageRankArr)
  return damagerankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >&
TWorldBossCrossGetRankInfoByLimitRsp::damagerankarr() const {
  // @@protoc_insertion_point(field_list:pb.TWorldBossCrossGetRankInfoByLimitRsp.DamageRankArr)
  return damagerankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossDamageSingle >*
TWorldBossCrossGetRankInfoByLimitRsp::mutable_damagerankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWorldBossCrossGetRankInfoByLimitRsp.DamageRankArr)
  return &damagerankarr_;
}

// optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 2;
inline bool TWorldBossCrossGetRankInfoByLimitRsp::has_myrankinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TWorldBossCrossGetRankInfoByLimitRsp::set_has_myrankinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TWorldBossCrossGetRankInfoByLimitRsp::clear_has_myrankinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TWorldBossCrossGetRankInfoByLimitRsp::clear_myrankinfo() {
  if (myrankinfo_ != NULL) myrankinfo_->::pb::TWorldBossCrossDamageSingle::Clear();
  clear_has_myrankinfo();
}
inline const ::pb::TWorldBossCrossDamageSingle& TWorldBossCrossGetRankInfoByLimitRsp::myrankinfo() const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossGetRankInfoByLimitRsp.MyRankInfo)
  return myrankinfo_ != NULL ? *myrankinfo_ : *default_instance_->myrankinfo_;
}
inline ::pb::TWorldBossCrossDamageSingle* TWorldBossCrossGetRankInfoByLimitRsp::mutable_myrankinfo() {
  set_has_myrankinfo();
  if (myrankinfo_ == NULL) myrankinfo_ = new ::pb::TWorldBossCrossDamageSingle;
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossGetRankInfoByLimitRsp.MyRankInfo)
  return myrankinfo_;
}
inline ::pb::TWorldBossCrossDamageSingle* TWorldBossCrossGetRankInfoByLimitRsp::release_myrankinfo() {
  clear_has_myrankinfo();
  ::pb::TWorldBossCrossDamageSingle* temp = myrankinfo_;
  myrankinfo_ = NULL;
  return temp;
}
inline void TWorldBossCrossGetRankInfoByLimitRsp::set_allocated_myrankinfo(::pb::TWorldBossCrossDamageSingle* myrankinfo) {
  delete myrankinfo_;
  myrankinfo_ = myrankinfo;
  if (myrankinfo) {
    set_has_myrankinfo();
  } else {
    clear_has_myrankinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TWorldBossCrossGetRankInfoByLimitRsp.MyRankInfo)
}

// -------------------------------------------------------------------

// TWorldBossCrossNotify

// repeated .pb.TWorldBossCrossShopInfo ArrRmbShop = 10;
inline int TWorldBossCrossNotify::arrrmbshop_size() const {
  return arrrmbshop_.size();
}
inline void TWorldBossCrossNotify::clear_arrrmbshop() {
  arrrmbshop_.Clear();
}
inline const ::pb::TWorldBossCrossShopInfo& TWorldBossCrossNotify::arrrmbshop(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossNotify.ArrRmbShop)
  return arrrmbshop_.Get(index);
}
inline ::pb::TWorldBossCrossShopInfo* TWorldBossCrossNotify::mutable_arrrmbshop(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossNotify.ArrRmbShop)
  return arrrmbshop_.Mutable(index);
}
inline ::pb::TWorldBossCrossShopInfo* TWorldBossCrossNotify::add_arrrmbshop() {
  // @@protoc_insertion_point(field_add:pb.TWorldBossCrossNotify.ArrRmbShop)
  return arrrmbshop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossShopInfo >&
TWorldBossCrossNotify::arrrmbshop() const {
  // @@protoc_insertion_point(field_list:pb.TWorldBossCrossNotify.ArrRmbShop)
  return arrrmbshop_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TWorldBossCrossShopInfo >*
TWorldBossCrossNotify::mutable_arrrmbshop() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWorldBossCrossNotify.ArrRmbShop)
  return &arrrmbshop_;
}

// repeated .pb.TCommonReward ArrRankReward = 11;
inline int TWorldBossCrossNotify::arrrankreward_size() const {
  return arrrankreward_.size();
}
inline void TWorldBossCrossNotify::clear_arrrankreward() {
  arrrankreward_.Clear();
}
inline const ::pb::TCommonReward& TWorldBossCrossNotify::arrrankreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWorldBossCrossNotify.ArrRankReward)
  return arrrankreward_.Get(index);
}
inline ::pb::TCommonReward* TWorldBossCrossNotify::mutable_arrrankreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TWorldBossCrossNotify.ArrRankReward)
  return arrrankreward_.Mutable(index);
}
inline ::pb::TCommonReward* TWorldBossCrossNotify::add_arrrankreward() {
  // @@protoc_insertion_point(field_add:pb.TWorldBossCrossNotify.ArrRankReward)
  return arrrankreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TWorldBossCrossNotify::arrrankreward() const {
  // @@protoc_insertion_point(field_list:pb.TWorldBossCrossNotify.ArrRankReward)
  return arrrankreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TWorldBossCrossNotify::mutable_arrrankreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWorldBossCrossNotify.ArrRankReward)
  return &arrrankreward_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fWorldBossCross_2eproto__INCLUDED
