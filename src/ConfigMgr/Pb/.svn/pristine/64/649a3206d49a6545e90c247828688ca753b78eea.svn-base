// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Chat.proto

#ifndef PROTOBUF_net_2fChat_2eproto__INCLUDED
#define PROTOBUF_net_2fChat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fChat_2eproto();
void protobuf_AssignDesc_net_2fChat_2eproto();
void protobuf_ShutdownFile_net_2fChat_2eproto();

class TChatMessage;
class TChatMessageTemplate;
class TBanInfo;
class TSpeakTime;
class TChatTmpChannelInfo;
class TChatGetInfoRsp;
class TChatTemplateMsgCdTime;
class TChatSendTemplateMsgReq;
class TChatSendPersonalMsgReq;
class TChatSendPersonalMsgRsp;
class TChatSendWorldMsgReq;
class TChatSendGuildMsgReq;
class TChatSendBroadCastReq;
class TChatUpdateChatInfoNotify;
class TChatNewMessageNotify;
class TChatSendTmpChannelMessageReq;
class TChatNewTmpChannelNotify;
class TChatDeleteTmpChannelNotify;
class TChatTmpChannelMessageNotify;
class TChatDeletePersonalMsgReq;
class TChatSendPersonalMsgByOtherServerReq;

enum EChatChannel {
  WORLD = 1,
  GUILD = 2,
  SYSTEM = 3,
  PERSONAL = 4,
  BROATCAST = 5,
  GROUP = 6,
  ADVENTURETEAM = 7,
  ANCHOR = 8,
  CHAT_CROSS_LEVY = 11,
  CHAT_CROSS_ALLIANCE = 12,
  CHAT_CROSS_PLATFORMARENA = 13
};
bool EChatChannel_IsValid(int value);
const EChatChannel EChatChannel_MIN = WORLD;
const EChatChannel EChatChannel_MAX = CHAT_CROSS_PLATFORMARENA;
const int EChatChannel_ARRAYSIZE = EChatChannel_MAX + 1;

const ::google::protobuf::EnumDescriptor* EChatChannel_descriptor();
inline const ::std::string& EChatChannel_Name(EChatChannel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EChatChannel_descriptor(), value);
}
inline bool EChatChannel_Parse(
    const ::std::string& name, EChatChannel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EChatChannel>(
    EChatChannel_descriptor(), name, value);
}
enum EChatMessageType {
  NORMAL_MSG = 1,
  VOICE_MSG = 2,
  BATTLE_MSG = 3,
  SQUAD_MSG = 4
};
bool EChatMessageType_IsValid(int value);
const EChatMessageType EChatMessageType_MIN = NORMAL_MSG;
const EChatMessageType EChatMessageType_MAX = SQUAD_MSG;
const int EChatMessageType_ARRAYSIZE = EChatMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EChatMessageType_descriptor();
inline const ::std::string& EChatMessageType_Name(EChatMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EChatMessageType_descriptor(), value);
}
inline bool EChatMessageType_Parse(
    const ::std::string& name, EChatMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EChatMessageType>(
    EChatMessageType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TChatMessage</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatMessage : public ::google::protobuf::Message {
 public:
  TChatMessage();
  virtual ~TChatMessage();

  TChatMessage(const TChatMessage& from);

  inline TChatMessage& operator=(const TChatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatMessage& default_instance();

  void Swap(TChatMessage* other);

  // implements Message ----------------------------------------------

  TChatMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatMessage& from);
  void MergeFrom(const TChatMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatMessage</name>
  	<Function>
  		<name>channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // optional .pb.TUserSimpleInfo SUserInfo = 2;
  inline bool has_suserinfo() const;
  inline void clear_suserinfo();
  static const int kSUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TChatMessage</name>
  	<Function>
  		<name>suserinfo</name>
  		<replaceName>SUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_suserinfo</name>
  		<replaceName>SUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_suserinfo</name>
  		<replaceName>SUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_suserinfo</name>
  		<replaceName>SUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& suserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_suserinfo();
  inline ::pb::TUserSimpleInfo* release_suserinfo();
  inline void set_allocated_suserinfo(::pb::TUserSimpleInfo* suserinfo);

  // optional uint32 MessageType = 3;
  inline bool has_messagetype() const;
  inline void clear_messagetype();
  static const int kMessageTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TChatMessage</name>
  	<Function>
  		<name>messagetype</name>
  		<replaceName>MessageType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_messagetype</name>
  		<replaceName>MessageType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_messagetype</name>
  		<replaceName>MessageType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 messagetype() const;
  inline void set_messagetype(::google::protobuf::uint32 value);

  // optional string Message = 4;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TChatMessage</name>
  	<Function>
  		<name>message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional uint64 MessageTime = 5;
  inline bool has_messagetime() const;
  inline void clear_messagetime();
  static const int kMessageTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TChatMessage</name>
  	<Function>
  		<name>messagetime</name>
  		<replaceName>MessageTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_messagetime</name>
  		<replaceName>MessageTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_messagetime</name>
  		<replaceName>MessageTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 messagetime() const;
  inline void set_messagetime(::google::protobuf::uint64 value);

  // optional .pb.TUserSimpleInfo RUserInfo = 6;
  inline bool has_ruserinfo() const;
  inline void clear_ruserinfo();
  static const int kRUserInfoFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TChatMessage</name>
  	<Function>
  		<name>ruserinfo</name>
  		<replaceName>RUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ruserinfo</name>
  		<replaceName>RUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_ruserinfo</name>
  		<replaceName>RUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ruserinfo</name>
  		<replaceName>RUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& ruserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_ruserinfo();
  inline ::pb::TUserSimpleInfo* release_ruserinfo();
  inline void set_allocated_ruserinfo(::pb::TUserSimpleInfo* ruserinfo);

  // optional .pb.TChatMessageTemplate MsgTmplInfo = 7;
  inline bool has_msgtmplinfo() const;
  inline void clear_msgtmplinfo();
  static const int kMsgTmplInfoFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TChatMessage</name>
  	<Function>
  		<name>msgtmplinfo</name>
  		<replaceName>MsgTmplInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_msgtmplinfo</name>
  		<replaceName>MsgTmplInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_msgtmplinfo</name>
  		<replaceName>MsgTmplInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_msgtmplinfo</name>
  		<replaceName>MsgTmplInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TChatMessageTemplate& msgtmplinfo() const;
  inline ::pb::TChatMessageTemplate* mutable_msgtmplinfo();
  inline ::pb::TChatMessageTemplate* release_msgtmplinfo();
  inline void set_allocated_msgtmplinfo(::pb::TChatMessageTemplate* msgtmplinfo);

  // optional uint64 ChannelBranchId = 8;
  inline bool has_channelbranchid() const;
  inline void clear_channelbranchid();
  static const int kChannelBranchIdFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TChatMessage</name>
  	<Function>
  		<name>channelbranchid</name>
  		<replaceName>ChannelBranchId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_channelbranchid</name>
  		<replaceName>ChannelBranchId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_channelbranchid</name>
  		<replaceName>ChannelBranchId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 channelbranchid() const;
  inline void set_channelbranchid(::google::protobuf::uint64 value);

  // optional string ExtraInfo = 9;
  inline bool has_extrainfo() const;
  inline void clear_extrainfo();
  static const int kExtraInfoFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TChatMessage</name>
  	<Function>
  		<name>extrainfo</name>
  		<replaceName>ExtraInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_extrainfo</name>
  		<replaceName>ExtraInfo</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_extrainfo</name>
  		<replaceName>ExtraInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& extrainfo() const;
  inline void set_extrainfo(const ::std::string& value);
  inline void set_extrainfo(const char* value);
  inline void set_extrainfo(const char* value, size_t size);
  inline ::std::string* mutable_extrainfo();
  inline ::std::string* release_extrainfo();
  inline void set_allocated_extrainfo(::std::string* extrainfo);

  // @@protoc_insertion_point(class_scope:pb.TChatMessage)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_suserinfo();
  inline void clear_has_suserinfo();
  inline void set_has_messagetype();
  inline void clear_has_messagetype();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_messagetime();
  inline void clear_has_messagetime();
  inline void set_has_ruserinfo();
  inline void clear_has_ruserinfo();
  inline void set_has_msgtmplinfo();
  inline void clear_has_msgtmplinfo();
  inline void set_has_channelbranchid();
  inline void clear_has_channelbranchid();
  inline void set_has_extrainfo();
  inline void clear_has_extrainfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* suserinfo_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 messagetype_;
  ::std::string* message_;
  ::google::protobuf::uint64 messagetime_;
  ::pb::TUserSimpleInfo* ruserinfo_;
  ::pb::TChatMessageTemplate* msgtmplinfo_;
  ::google::protobuf::uint64 channelbranchid_;
  ::std::string* extrainfo_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TChatMessage* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatMessageTemplate</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatMessageTemplate : public ::google::protobuf::Message {
 public:
  TChatMessageTemplate();
  virtual ~TChatMessageTemplate();

  TChatMessageTemplate(const TChatMessageTemplate& from);

  inline TChatMessageTemplate& operator=(const TChatMessageTemplate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatMessageTemplate& default_instance();

  void Swap(TChatMessageTemplate* other);

  // implements Message ----------------------------------------------

  TChatMessageTemplate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatMessageTemplate& from);
  void MergeFrom(const TChatMessageTemplate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MessageTid = 1;
  inline bool has_messagetid() const;
  inline void clear_messagetid();
  static const int kMessageTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatMessageTemplate</name>
  	<Function>
  		<name>messagetid</name>
  		<replaceName>MessageTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_messagetid</name>
  		<replaceName>MessageTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_messagetid</name>
  		<replaceName>MessageTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 messagetid() const;
  inline void set_messagetid(::google::protobuf::uint32 value);

  // repeated string MessageArgArray = 2;
  inline int messageargarray_size() const;
  inline void clear_messageargarray();
  static const int kMessageArgArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TChatMessageTemplate</name>
  	<Function>
  		<name>messageargarray</name>
  		<replaceName>MessageArgArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_messageargarray</name>
  		<replaceName>MessageArgArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_messageargarray</name>
  		<replaceName>MessageArgArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_messageargarray</name>
  		<replaceName>MessageArgArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>messageargarray_size</name>
  		<replaceName>MessageArgArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& messageargarray(int index) const;
  inline ::std::string* mutable_messageargarray(int index);
  inline void set_messageargarray(int index, const ::std::string& value);
  inline void set_messageargarray(int index, const char* value);
  inline void set_messageargarray(int index, const char* value, size_t size);
  inline ::std::string* add_messageargarray();
  inline void add_messageargarray(const ::std::string& value);
  inline void add_messageargarray(const char* value);
  inline void add_messageargarray(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& messageargarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_messageargarray();

  // repeated .pb.TUserSimpleInfo UserInfoArray = 3;
  inline int userinfoarray_size() const;
  inline void clear_userinfoarray();
  static const int kUserInfoArrayFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TChatMessageTemplate</name>
  	<Function>
  		<name>userinfoarray</name>
  		<replaceName>UserInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userinfoarray</name>
  		<replaceName>UserInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userinfoarray</name>
  		<replaceName>UserInfoArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfoarray</name>
  		<replaceName>UserInfoArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userinfoarray_size</name>
  		<replaceName>UserInfoArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfoarray(int index) const;
  inline ::pb::TUserSimpleInfo* mutable_userinfoarray(int index);
  inline ::pb::TUserSimpleInfo* add_userinfoarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
      userinfoarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
      mutable_userinfoarray();

  // @@protoc_insertion_point(class_scope:pb.TChatMessageTemplate)
 private:
  inline void set_has_messagetid();
  inline void clear_has_messagetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> messageargarray_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo > userinfoarray_;
  ::google::protobuf::uint32 messagetid_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TChatMessageTemplate* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBanInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBanInfo : public ::google::protobuf::Message {
 public:
  TBanInfo();
  virtual ~TBanInfo();

  TBanInfo(const TBanInfo& from);

  inline TBanInfo& operator=(const TBanInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBanInfo& default_instance();

  void Swap(TBanInfo* other);

  // implements Message ----------------------------------------------

  TBanInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBanInfo& from);
  void MergeFrom(const TBanInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 StartTime = 1;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBanInfo</name>
  	<Function>
  		<name>starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 starttime() const;
  inline void set_starttime(::google::protobuf::uint64 value);

  // optional uint32 Duration = 2;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBanInfo</name>
  	<Function>
  		<name>duration</name>
  		<replaceName>Duration</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_duration</name>
  		<replaceName>Duration</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_duration</name>
  		<replaceName>Duration</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 duration() const;
  inline void set_duration(::google::protobuf::uint32 value);

  // optional string Reason = 3;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBanInfo</name>
  	<Function>
  		<name>reason</name>
  		<replaceName>Reason</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reason</name>
  		<replaceName>Reason</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reason</name>
  		<replaceName>Reason</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:pb.TBanInfo)
 private:
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 starttime_;
  ::std::string* reason_;
  ::google::protobuf::uint32 duration_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TBanInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSpeakTime</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSpeakTime : public ::google::protobuf::Message {
 public:
  TSpeakTime();
  virtual ~TSpeakTime();

  TSpeakTime(const TSpeakTime& from);

  inline TSpeakTime& operator=(const TSpeakTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSpeakTime& default_instance();

  void Swap(TSpeakTime* other);

  // implements Message ----------------------------------------------

  TSpeakTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSpeakTime& from);
  void MergeFrom(const TSpeakTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSpeakTime</name>
  	<Function>
  		<name>channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // optional uint64 Time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSpeakTime</name>
  	<Function>
  		<name>time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TSpeakTime)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 channel_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TSpeakTime* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatTmpChannelInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatTmpChannelInfo : public ::google::protobuf::Message {
 public:
  TChatTmpChannelInfo();
  virtual ~TChatTmpChannelInfo();

  TChatTmpChannelInfo(const TChatTmpChannelInfo& from);

  inline TChatTmpChannelInfo& operator=(const TChatTmpChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatTmpChannelInfo& default_instance();

  void Swap(TChatTmpChannelInfo* other);

  // implements Message ----------------------------------------------

  TChatTmpChannelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatTmpChannelInfo& from);
  void MergeFrom(const TChatTmpChannelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatTmpChannelInfo</name>
  	<Function>
  		<name>channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // optional uint64 ChannelBranchId = 2;
  inline bool has_channelbranchid() const;
  inline void clear_channelbranchid();
  static const int kChannelBranchIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TChatTmpChannelInfo</name>
  	<Function>
  		<name>channelbranchid</name>
  		<replaceName>ChannelBranchId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_channelbranchid</name>
  		<replaceName>ChannelBranchId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_channelbranchid</name>
  		<replaceName>ChannelBranchId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 channelbranchid() const;
  inline void set_channelbranchid(::google::protobuf::uint64 value);

  // repeated .pb.TChatMessage MessageArray = 3;
  inline int messagearray_size() const;
  inline void clear_messagearray();
  static const int kMessageArrayFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TChatTmpChannelInfo</name>
  	<Function>
  		<name>messagearray</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_messagearray</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_messagearray</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_messagearray</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>messagearray_size</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TChatMessage& messagearray(int index) const;
  inline ::pb::TChatMessage* mutable_messagearray(int index);
  inline ::pb::TChatMessage* add_messagearray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage >&
      messagearray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage >*
      mutable_messagearray();

  // @@protoc_insertion_point(class_scope:pb.TChatTmpChannelInfo)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_channelbranchid();
  inline void clear_has_channelbranchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 channelbranchid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage > messagearray_;
  ::google::protobuf::uint32 channel_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TChatTmpChannelInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatGetInfoRsp : public ::google::protobuf::Message {
 public:
  TChatGetInfoRsp();
  virtual ~TChatGetInfoRsp();

  TChatGetInfoRsp(const TChatGetInfoRsp& from);

  inline TChatGetInfoRsp& operator=(const TChatGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatGetInfoRsp& default_instance();

  void Swap(TChatGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TChatGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatGetInfoRsp& from);
  void MergeFrom(const TChatGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TChatMessage MessageArray = 1;
  inline int messagearray_size() const;
  inline void clear_messagearray();
  static const int kMessageArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatGetInfoRsp</name>
  	<Function>
  		<name>messagearray</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_messagearray</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_messagearray</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_messagearray</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>messagearray_size</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TChatMessage& messagearray(int index) const;
  inline ::pb::TChatMessage* mutable_messagearray(int index);
  inline ::pb::TChatMessage* add_messagearray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage >&
      messagearray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage >*
      mutable_messagearray();

  // repeated .pb.TSpeakTime SpeakTimeArray = 2;
  inline int speaktimearray_size() const;
  inline void clear_speaktimearray();
  static const int kSpeakTimeArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TChatGetInfoRsp</name>
  	<Function>
  		<name>speaktimearray</name>
  		<replaceName>SpeakTimeArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_speaktimearray</name>
  		<replaceName>SpeakTimeArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_speaktimearray</name>
  		<replaceName>SpeakTimeArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_speaktimearray</name>
  		<replaceName>SpeakTimeArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>speaktimearray_size</name>
  		<replaceName>SpeakTimeArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSpeakTime& speaktimearray(int index) const;
  inline ::pb::TSpeakTime* mutable_speaktimearray(int index);
  inline ::pb::TSpeakTime* add_speaktimearray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSpeakTime >&
      speaktimearray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSpeakTime >*
      mutable_speaktimearray();

  // optional .pb.TBanInfo BanInfo = 3;
  inline bool has_baninfo() const;
  inline void clear_baninfo();
  static const int kBanInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TChatGetInfoRsp</name>
  	<Function>
  		<name>baninfo</name>
  		<replaceName>BanInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_baninfo</name>
  		<replaceName>BanInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_baninfo</name>
  		<replaceName>BanInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_baninfo</name>
  		<replaceName>BanInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBanInfo& baninfo() const;
  inline ::pb::TBanInfo* mutable_baninfo();
  inline ::pb::TBanInfo* release_baninfo();
  inline void set_allocated_baninfo(::pb::TBanInfo* baninfo);

  // repeated .pb.TUserSimpleInfo UserInfoArray = 4;
  inline int userinfoarray_size() const;
  inline void clear_userinfoarray();
  static const int kUserInfoArrayFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TChatGetInfoRsp</name>
  	<Function>
  		<name>userinfoarray</name>
  		<replaceName>UserInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userinfoarray</name>
  		<replaceName>UserInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userinfoarray</name>
  		<replaceName>UserInfoArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfoarray</name>
  		<replaceName>UserInfoArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userinfoarray_size</name>
  		<replaceName>UserInfoArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfoarray(int index) const;
  inline ::pb::TUserSimpleInfo* mutable_userinfoarray(int index);
  inline ::pb::TUserSimpleInfo* add_userinfoarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
      userinfoarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
      mutable_userinfoarray();

  // repeated .pb.TChatTmpChannelInfo TmpChannelArray = 5;
  inline int tmpchannelarray_size() const;
  inline void clear_tmpchannelarray();
  static const int kTmpChannelArrayFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TChatGetInfoRsp</name>
  	<Function>
  		<name>tmpchannelarray</name>
  		<replaceName>TmpChannelArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_tmpchannelarray</name>
  		<replaceName>TmpChannelArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_tmpchannelarray</name>
  		<replaceName>TmpChannelArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tmpchannelarray</name>
  		<replaceName>TmpChannelArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>tmpchannelarray_size</name>
  		<replaceName>TmpChannelArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TChatTmpChannelInfo& tmpchannelarray(int index) const;
  inline ::pb::TChatTmpChannelInfo* mutable_tmpchannelarray(int index);
  inline ::pb::TChatTmpChannelInfo* add_tmpchannelarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TChatTmpChannelInfo >&
      tmpchannelarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TChatTmpChannelInfo >*
      mutable_tmpchannelarray();

  // repeated .pb.TChatTemplateMsgCdTime TemplateMsgCdArray = 6;
  inline int templatemsgcdarray_size() const;
  inline void clear_templatemsgcdarray();
  static const int kTemplateMsgCdArrayFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TChatGetInfoRsp</name>
  	<Function>
  		<name>templatemsgcdarray</name>
  		<replaceName>TemplateMsgCdArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_templatemsgcdarray</name>
  		<replaceName>TemplateMsgCdArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_templatemsgcdarray</name>
  		<replaceName>TemplateMsgCdArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_templatemsgcdarray</name>
  		<replaceName>TemplateMsgCdArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>templatemsgcdarray_size</name>
  		<replaceName>TemplateMsgCdArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TChatTemplateMsgCdTime& templatemsgcdarray(int index) const;
  inline ::pb::TChatTemplateMsgCdTime* mutable_templatemsgcdarray(int index);
  inline ::pb::TChatTemplateMsgCdTime* add_templatemsgcdarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TChatTemplateMsgCdTime >&
      templatemsgcdarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TChatTemplateMsgCdTime >*
      mutable_templatemsgcdarray();

  // @@protoc_insertion_point(class_scope:pb.TChatGetInfoRsp)
 private:
  inline void set_has_baninfo();
  inline void clear_has_baninfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage > messagearray_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSpeakTime > speaktimearray_;
  ::pb::TBanInfo* baninfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo > userinfoarray_;
  ::google::protobuf::RepeatedPtrField< ::pb::TChatTmpChannelInfo > tmpchannelarray_;
  ::google::protobuf::RepeatedPtrField< ::pb::TChatTemplateMsgCdTime > templatemsgcdarray_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TChatGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatTemplateMsgCdTime</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatTemplateMsgCdTime : public ::google::protobuf::Message {
 public:
  TChatTemplateMsgCdTime();
  virtual ~TChatTemplateMsgCdTime();

  TChatTemplateMsgCdTime(const TChatTemplateMsgCdTime& from);

  inline TChatTemplateMsgCdTime& operator=(const TChatTemplateMsgCdTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatTemplateMsgCdTime& default_instance();

  void Swap(TChatTemplateMsgCdTime* other);

  // implements Message ----------------------------------------------

  TChatTemplateMsgCdTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatTemplateMsgCdTime& from);
  void MergeFrom(const TChatTemplateMsgCdTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MessageTid = 1;
  inline bool has_messagetid() const;
  inline void clear_messagetid();
  static const int kMessageTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatTemplateMsgCdTime</name>
  	<Function>
  		<name>messagetid</name>
  		<replaceName>MessageTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_messagetid</name>
  		<replaceName>MessageTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_messagetid</name>
  		<replaceName>MessageTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 messagetid() const;
  inline void set_messagetid(::google::protobuf::uint32 value);

  // optional uint64 LastSendTime = 2;
  inline bool has_lastsendtime() const;
  inline void clear_lastsendtime();
  static const int kLastSendTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TChatTemplateMsgCdTime</name>
  	<Function>
  		<name>lastsendtime</name>
  		<replaceName>LastSendTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lastsendtime</name>
  		<replaceName>LastSendTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lastsendtime</name>
  		<replaceName>LastSendTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 lastsendtime() const;
  inline void set_lastsendtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TChatTemplateMsgCdTime)
 private:
  inline void set_has_messagetid();
  inline void clear_has_messagetid();
  inline void set_has_lastsendtime();
  inline void clear_has_lastsendtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 lastsendtime_;
  ::google::protobuf::uint32 messagetid_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TChatTemplateMsgCdTime* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatSendTemplateMsgReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatSendTemplateMsgReq : public ::google::protobuf::Message {
 public:
  TChatSendTemplateMsgReq();
  virtual ~TChatSendTemplateMsgReq();

  TChatSendTemplateMsgReq(const TChatSendTemplateMsgReq& from);

  inline TChatSendTemplateMsgReq& operator=(const TChatSendTemplateMsgReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatSendTemplateMsgReq& default_instance();

  void Swap(TChatSendTemplateMsgReq* other);

  // implements Message ----------------------------------------------

  TChatSendTemplateMsgReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatSendTemplateMsgReq& from);
  void MergeFrom(const TChatSendTemplateMsgReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MessageTid = 1;
  inline bool has_messagetid() const;
  inline void clear_messagetid();
  static const int kMessageTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatSendTemplateMsgReq</name>
  	<Function>
  		<name>messagetid</name>
  		<replaceName>MessageTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_messagetid</name>
  		<replaceName>MessageTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_messagetid</name>
  		<replaceName>MessageTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 messagetid() const;
  inline void set_messagetid(::google::protobuf::uint32 value);

  // repeated string MessageArgArray = 2;
  inline int messageargarray_size() const;
  inline void clear_messageargarray();
  static const int kMessageArgArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TChatSendTemplateMsgReq</name>
  	<Function>
  		<name>messageargarray</name>
  		<replaceName>MessageArgArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_messageargarray</name>
  		<replaceName>MessageArgArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_messageargarray</name>
  		<replaceName>MessageArgArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_messageargarray</name>
  		<replaceName>MessageArgArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>messageargarray_size</name>
  		<replaceName>MessageArgArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& messageargarray(int index) const;
  inline ::std::string* mutable_messageargarray(int index);
  inline void set_messageargarray(int index, const ::std::string& value);
  inline void set_messageargarray(int index, const char* value);
  inline void set_messageargarray(int index, const char* value, size_t size);
  inline ::std::string* add_messageargarray();
  inline void add_messageargarray(const ::std::string& value);
  inline void add_messageargarray(const char* value);
  inline void add_messageargarray(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& messageargarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_messageargarray();

  // repeated uint64 UidArray = 3;
  inline int uidarray_size() const;
  inline void clear_uidarray();
  static const int kUidArrayFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TChatSendTemplateMsgReq</name>
  	<Function>
  		<name>uidarray</name>
  		<replaceName>UidArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_uidarray</name>
  		<replaceName>UidArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_uidarray</name>
  		<replaceName>UidArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uidarray</name>
  		<replaceName>UidArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>uidarray_size</name>
  		<replaceName>UidArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uidarray(int index) const;
  inline void set_uidarray(int index, ::google::protobuf::uint64 value);
  inline void add_uidarray(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uidarray() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uidarray();

  // optional uint32 Channel = 4;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TChatSendTemplateMsgReq</name>
  	<Function>
  		<name>channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TChatSendTemplateMsgReq)
 private:
  inline void set_has_messagetid();
  inline void clear_has_messagetid();
  inline void set_has_channel();
  inline void clear_has_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> messageargarray_;
  ::google::protobuf::uint32 messagetid_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uidarray_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TChatSendTemplateMsgReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatSendPersonalMsgReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatSendPersonalMsgReq : public ::google::protobuf::Message {
 public:
  TChatSendPersonalMsgReq();
  virtual ~TChatSendPersonalMsgReq();

  TChatSendPersonalMsgReq(const TChatSendPersonalMsgReq& from);

  inline TChatSendPersonalMsgReq& operator=(const TChatSendPersonalMsgReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatSendPersonalMsgReq& default_instance();

  void Swap(TChatSendPersonalMsgReq* other);

  // implements Message ----------------------------------------------

  TChatSendPersonalMsgReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatSendPersonalMsgReq& from);
  void MergeFrom(const TChatSendPersonalMsgReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ReceiveUid = 1;
  inline bool has_receiveuid() const;
  inline void clear_receiveuid();
  static const int kReceiveUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatSendPersonalMsgReq</name>
  	<Function>
  		<name>receiveuid</name>
  		<replaceName>ReceiveUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_receiveuid</name>
  		<replaceName>ReceiveUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receiveuid</name>
  		<replaceName>ReceiveUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 receiveuid() const;
  inline void set_receiveuid(::google::protobuf::uint64 value);

  // optional string Message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TChatSendPersonalMsgReq</name>
  	<Function>
  		<name>message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional uint32 MessageType = 3;
  inline bool has_messagetype() const;
  inline void clear_messagetype();
  static const int kMessageTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TChatSendPersonalMsgReq</name>
  	<Function>
  		<name>messagetype</name>
  		<replaceName>MessageType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_messagetype</name>
  		<replaceName>MessageType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_messagetype</name>
  		<replaceName>MessageType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 messagetype() const;
  inline void set_messagetype(::google::protobuf::uint32 value);

  // optional string ReceiverServerId = 4;
  inline bool has_receiverserverid() const;
  inline void clear_receiverserverid();
  static const int kReceiverServerIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TChatSendPersonalMsgReq</name>
  	<Function>
  		<name>receiverserverid</name>
  		<replaceName>ReceiverServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_receiverserverid</name>
  		<replaceName>ReceiverServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receiverserverid</name>
  		<replaceName>ReceiverServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& receiverserverid() const;
  inline void set_receiverserverid(const ::std::string& value);
  inline void set_receiverserverid(const char* value);
  inline void set_receiverserverid(const char* value, size_t size);
  inline ::std::string* mutable_receiverserverid();
  inline ::std::string* release_receiverserverid();
  inline void set_allocated_receiverserverid(::std::string* receiverserverid);

  // @@protoc_insertion_point(class_scope:pb.TChatSendPersonalMsgReq)
 private:
  inline void set_has_receiveuid();
  inline void clear_has_receiveuid();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_messagetype();
  inline void clear_has_messagetype();
  inline void set_has_receiverserverid();
  inline void clear_has_receiverserverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 receiveuid_;
  ::std::string* message_;
  ::std::string* receiverserverid_;
  ::google::protobuf::uint32 messagetype_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TChatSendPersonalMsgReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatSendPersonalMsgRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatSendPersonalMsgRsp : public ::google::protobuf::Message {
 public:
  TChatSendPersonalMsgRsp();
  virtual ~TChatSendPersonalMsgRsp();

  TChatSendPersonalMsgRsp(const TChatSendPersonalMsgRsp& from);

  inline TChatSendPersonalMsgRsp& operator=(const TChatSendPersonalMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatSendPersonalMsgRsp& default_instance();

  void Swap(TChatSendPersonalMsgRsp* other);

  // implements Message ----------------------------------------------

  TChatSendPersonalMsgRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatSendPersonalMsgRsp& from);
  void MergeFrom(const TChatSendPersonalMsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool ReceiverRefuse = 1;
  inline bool has_receiverrefuse() const;
  inline void clear_receiverrefuse();
  static const int kReceiverRefuseFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatSendPersonalMsgRsp</name>
  	<Function>
  		<name>receiverrefuse</name>
  		<replaceName>ReceiverRefuse</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_receiverrefuse</name>
  		<replaceName>ReceiverRefuse</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receiverrefuse</name>
  		<replaceName>ReceiverRefuse</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool receiverrefuse() const;
  inline void set_receiverrefuse(bool value);

  // @@protoc_insertion_point(class_scope:pb.TChatSendPersonalMsgRsp)
 private:
  inline void set_has_receiverrefuse();
  inline void clear_has_receiverrefuse();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool receiverrefuse_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TChatSendPersonalMsgRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatSendWorldMsgReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatSendWorldMsgReq : public ::google::protobuf::Message {
 public:
  TChatSendWorldMsgReq();
  virtual ~TChatSendWorldMsgReq();

  TChatSendWorldMsgReq(const TChatSendWorldMsgReq& from);

  inline TChatSendWorldMsgReq& operator=(const TChatSendWorldMsgReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatSendWorldMsgReq& default_instance();

  void Swap(TChatSendWorldMsgReq* other);

  // implements Message ----------------------------------------------

  TChatSendWorldMsgReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatSendWorldMsgReq& from);
  void MergeFrom(const TChatSendWorldMsgReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatSendWorldMsgReq</name>
  	<Function>
  		<name>message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional uint32 MessageType = 2;
  inline bool has_messagetype() const;
  inline void clear_messagetype();
  static const int kMessageTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TChatSendWorldMsgReq</name>
  	<Function>
  		<name>messagetype</name>
  		<replaceName>MessageType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_messagetype</name>
  		<replaceName>MessageType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_messagetype</name>
  		<replaceName>MessageType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 messagetype() const;
  inline void set_messagetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TChatSendWorldMsgReq)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_messagetype();
  inline void clear_has_messagetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  ::google::protobuf::uint32 messagetype_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TChatSendWorldMsgReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatSendGuildMsgReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatSendGuildMsgReq : public ::google::protobuf::Message {
 public:
  TChatSendGuildMsgReq();
  virtual ~TChatSendGuildMsgReq();

  TChatSendGuildMsgReq(const TChatSendGuildMsgReq& from);

  inline TChatSendGuildMsgReq& operator=(const TChatSendGuildMsgReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatSendGuildMsgReq& default_instance();

  void Swap(TChatSendGuildMsgReq* other);

  // implements Message ----------------------------------------------

  TChatSendGuildMsgReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatSendGuildMsgReq& from);
  void MergeFrom(const TChatSendGuildMsgReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatSendGuildMsgReq</name>
  	<Function>
  		<name>message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional uint32 MessageType = 2;
  inline bool has_messagetype() const;
  inline void clear_messagetype();
  static const int kMessageTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TChatSendGuildMsgReq</name>
  	<Function>
  		<name>messagetype</name>
  		<replaceName>MessageType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_messagetype</name>
  		<replaceName>MessageType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_messagetype</name>
  		<replaceName>MessageType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 messagetype() const;
  inline void set_messagetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TChatSendGuildMsgReq)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_messagetype();
  inline void clear_has_messagetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  ::google::protobuf::uint32 messagetype_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TChatSendGuildMsgReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatSendBroadCastReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatSendBroadCastReq : public ::google::protobuf::Message {
 public:
  TChatSendBroadCastReq();
  virtual ~TChatSendBroadCastReq();

  TChatSendBroadCastReq(const TChatSendBroadCastReq& from);

  inline TChatSendBroadCastReq& operator=(const TChatSendBroadCastReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatSendBroadCastReq& default_instance();

  void Swap(TChatSendBroadCastReq* other);

  // implements Message ----------------------------------------------

  TChatSendBroadCastReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatSendBroadCastReq& from);
  void MergeFrom(const TChatSendBroadCastReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ItemTid = 1;
  inline bool has_itemtid() const;
  inline void clear_itemtid();
  static const int kItemTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatSendBroadCastReq</name>
  	<Function>
  		<name>itemtid</name>
  		<replaceName>ItemTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemtid</name>
  		<replaceName>ItemTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemtid</name>
  		<replaceName>ItemTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 itemtid() const;
  inline void set_itemtid(::google::protobuf::uint32 value);

  // optional string Message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TChatSendBroadCastReq</name>
  	<Function>
  		<name>message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:pb.TChatSendBroadCastReq)
 private:
  inline void set_has_itemtid();
  inline void clear_has_itemtid();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  ::google::protobuf::uint32 itemtid_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TChatSendBroadCastReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatUpdateChatInfoNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatUpdateChatInfoNotify : public ::google::protobuf::Message {
 public:
  TChatUpdateChatInfoNotify();
  virtual ~TChatUpdateChatInfoNotify();

  TChatUpdateChatInfoNotify(const TChatUpdateChatInfoNotify& from);

  inline TChatUpdateChatInfoNotify& operator=(const TChatUpdateChatInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatUpdateChatInfoNotify& default_instance();

  void Swap(TChatUpdateChatInfoNotify* other);

  // implements Message ----------------------------------------------

  TChatUpdateChatInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatUpdateChatInfoNotify& from);
  void MergeFrom(const TChatUpdateChatInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBanInfo BanInfo = 1;
  inline bool has_baninfo() const;
  inline void clear_baninfo();
  static const int kBanInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatUpdateChatInfoNotify</name>
  	<Function>
  		<name>baninfo</name>
  		<replaceName>BanInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_baninfo</name>
  		<replaceName>BanInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_baninfo</name>
  		<replaceName>BanInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_baninfo</name>
  		<replaceName>BanInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBanInfo& baninfo() const;
  inline ::pb::TBanInfo* mutable_baninfo();
  inline ::pb::TBanInfo* release_baninfo();
  inline void set_allocated_baninfo(::pb::TBanInfo* baninfo);

  // @@protoc_insertion_point(class_scope:pb.TChatUpdateChatInfoNotify)
 private:
  inline void set_has_baninfo();
  inline void clear_has_baninfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBanInfo* baninfo_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TChatUpdateChatInfoNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatNewMessageNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatNewMessageNotify : public ::google::protobuf::Message {
 public:
  TChatNewMessageNotify();
  virtual ~TChatNewMessageNotify();

  TChatNewMessageNotify(const TChatNewMessageNotify& from);

  inline TChatNewMessageNotify& operator=(const TChatNewMessageNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatNewMessageNotify& default_instance();

  void Swap(TChatNewMessageNotify* other);

  // implements Message ----------------------------------------------

  TChatNewMessageNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatNewMessageNotify& from);
  void MergeFrom(const TChatNewMessageNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TChatMessage MessageArray = 1;
  inline int messagearray_size() const;
  inline void clear_messagearray();
  static const int kMessageArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatNewMessageNotify</name>
  	<Function>
  		<name>messagearray</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_messagearray</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_messagearray</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_messagearray</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>messagearray_size</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TChatMessage& messagearray(int index) const;
  inline ::pb::TChatMessage* mutable_messagearray(int index);
  inline ::pb::TChatMessage* add_messagearray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage >&
      messagearray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage >*
      mutable_messagearray();

  // @@protoc_insertion_point(class_scope:pb.TChatNewMessageNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage > messagearray_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TChatNewMessageNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatSendTmpChannelMessageReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatSendTmpChannelMessageReq : public ::google::protobuf::Message {
 public:
  TChatSendTmpChannelMessageReq();
  virtual ~TChatSendTmpChannelMessageReq();

  TChatSendTmpChannelMessageReq(const TChatSendTmpChannelMessageReq& from);

  inline TChatSendTmpChannelMessageReq& operator=(const TChatSendTmpChannelMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatSendTmpChannelMessageReq& default_instance();

  void Swap(TChatSendTmpChannelMessageReq* other);

  // implements Message ----------------------------------------------

  TChatSendTmpChannelMessageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatSendTmpChannelMessageReq& from);
  void MergeFrom(const TChatSendTmpChannelMessageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatSendTmpChannelMessageReq</name>
  	<Function>
  		<name>channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // optional uint64 ChannelBranchId = 2;
  inline bool has_channelbranchid() const;
  inline void clear_channelbranchid();
  static const int kChannelBranchIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TChatSendTmpChannelMessageReq</name>
  	<Function>
  		<name>channelbranchid</name>
  		<replaceName>ChannelBranchId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_channelbranchid</name>
  		<replaceName>ChannelBranchId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_channelbranchid</name>
  		<replaceName>ChannelBranchId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 channelbranchid() const;
  inline void set_channelbranchid(::google::protobuf::uint64 value);

  // optional string Message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TChatSendTmpChannelMessageReq</name>
  	<Function>
  		<name>message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional uint32 MessageType = 4;
  inline bool has_messagetype() const;
  inline void clear_messagetype();
  static const int kMessageTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TChatSendTmpChannelMessageReq</name>
  	<Function>
  		<name>messagetype</name>
  		<replaceName>MessageType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_messagetype</name>
  		<replaceName>MessageType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_messagetype</name>
  		<replaceName>MessageType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 messagetype() const;
  inline void set_messagetype(::google::protobuf::uint32 value);

  // optional string ExtraInfo = 5;
  inline bool has_extrainfo() const;
  inline void clear_extrainfo();
  static const int kExtraInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TChatSendTmpChannelMessageReq</name>
  	<Function>
  		<name>extrainfo</name>
  		<replaceName>ExtraInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_extrainfo</name>
  		<replaceName>ExtraInfo</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_extrainfo</name>
  		<replaceName>ExtraInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& extrainfo() const;
  inline void set_extrainfo(const ::std::string& value);
  inline void set_extrainfo(const char* value);
  inline void set_extrainfo(const char* value, size_t size);
  inline ::std::string* mutable_extrainfo();
  inline ::std::string* release_extrainfo();
  inline void set_allocated_extrainfo(::std::string* extrainfo);

  // @@protoc_insertion_point(class_scope:pb.TChatSendTmpChannelMessageReq)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_channelbranchid();
  inline void clear_has_channelbranchid();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_messagetype();
  inline void clear_has_messagetype();
  inline void set_has_extrainfo();
  inline void clear_has_extrainfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 channelbranchid_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 messagetype_;
  ::std::string* message_;
  ::std::string* extrainfo_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TChatSendTmpChannelMessageReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatNewTmpChannelNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatNewTmpChannelNotify : public ::google::protobuf::Message {
 public:
  TChatNewTmpChannelNotify();
  virtual ~TChatNewTmpChannelNotify();

  TChatNewTmpChannelNotify(const TChatNewTmpChannelNotify& from);

  inline TChatNewTmpChannelNotify& operator=(const TChatNewTmpChannelNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatNewTmpChannelNotify& default_instance();

  void Swap(TChatNewTmpChannelNotify* other);

  // implements Message ----------------------------------------------

  TChatNewTmpChannelNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatNewTmpChannelNotify& from);
  void MergeFrom(const TChatNewTmpChannelNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatNewTmpChannelNotify</name>
  	<Function>
  		<name>channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // optional uint64 ChannelBranchId = 2;
  inline bool has_channelbranchid() const;
  inline void clear_channelbranchid();
  static const int kChannelBranchIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TChatNewTmpChannelNotify</name>
  	<Function>
  		<name>channelbranchid</name>
  		<replaceName>ChannelBranchId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_channelbranchid</name>
  		<replaceName>ChannelBranchId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_channelbranchid</name>
  		<replaceName>ChannelBranchId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 channelbranchid() const;
  inline void set_channelbranchid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TChatNewTmpChannelNotify)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_channelbranchid();
  inline void clear_has_channelbranchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 channelbranchid_;
  ::google::protobuf::uint32 channel_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TChatNewTmpChannelNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatDeleteTmpChannelNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatDeleteTmpChannelNotify : public ::google::protobuf::Message {
 public:
  TChatDeleteTmpChannelNotify();
  virtual ~TChatDeleteTmpChannelNotify();

  TChatDeleteTmpChannelNotify(const TChatDeleteTmpChannelNotify& from);

  inline TChatDeleteTmpChannelNotify& operator=(const TChatDeleteTmpChannelNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatDeleteTmpChannelNotify& default_instance();

  void Swap(TChatDeleteTmpChannelNotify* other);

  // implements Message ----------------------------------------------

  TChatDeleteTmpChannelNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatDeleteTmpChannelNotify& from);
  void MergeFrom(const TChatDeleteTmpChannelNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatDeleteTmpChannelNotify</name>
  	<Function>
  		<name>channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_channel</name>
  		<replaceName>Channel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // optional uint64 ChannelBranchId = 2;
  inline bool has_channelbranchid() const;
  inline void clear_channelbranchid();
  static const int kChannelBranchIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TChatDeleteTmpChannelNotify</name>
  	<Function>
  		<name>channelbranchid</name>
  		<replaceName>ChannelBranchId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_channelbranchid</name>
  		<replaceName>ChannelBranchId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_channelbranchid</name>
  		<replaceName>ChannelBranchId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 channelbranchid() const;
  inline void set_channelbranchid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TChatDeleteTmpChannelNotify)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_channelbranchid();
  inline void clear_has_channelbranchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 channelbranchid_;
  ::google::protobuf::uint32 channel_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TChatDeleteTmpChannelNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatTmpChannelMessageNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatTmpChannelMessageNotify : public ::google::protobuf::Message {
 public:
  TChatTmpChannelMessageNotify();
  virtual ~TChatTmpChannelMessageNotify();

  TChatTmpChannelMessageNotify(const TChatTmpChannelMessageNotify& from);

  inline TChatTmpChannelMessageNotify& operator=(const TChatTmpChannelMessageNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatTmpChannelMessageNotify& default_instance();

  void Swap(TChatTmpChannelMessageNotify* other);

  // implements Message ----------------------------------------------

  TChatTmpChannelMessageNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatTmpChannelMessageNotify& from);
  void MergeFrom(const TChatTmpChannelMessageNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TChatMessage MessageArray = 1;
  inline int messagearray_size() const;
  inline void clear_messagearray();
  static const int kMessageArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatTmpChannelMessageNotify</name>
  	<Function>
  		<name>messagearray</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_messagearray</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_messagearray</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_messagearray</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>messagearray_size</name>
  		<replaceName>MessageArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TChatMessage& messagearray(int index) const;
  inline ::pb::TChatMessage* mutable_messagearray(int index);
  inline ::pb::TChatMessage* add_messagearray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage >&
      messagearray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage >*
      mutable_messagearray();

  // @@protoc_insertion_point(class_scope:pb.TChatTmpChannelMessageNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage > messagearray_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TChatTmpChannelMessageNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatDeletePersonalMsgReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatDeletePersonalMsgReq : public ::google::protobuf::Message {
 public:
  TChatDeletePersonalMsgReq();
  virtual ~TChatDeletePersonalMsgReq();

  TChatDeletePersonalMsgReq(const TChatDeletePersonalMsgReq& from);

  inline TChatDeletePersonalMsgReq& operator=(const TChatDeletePersonalMsgReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatDeletePersonalMsgReq& default_instance();

  void Swap(TChatDeletePersonalMsgReq* other);

  // implements Message ----------------------------------------------

  TChatDeletePersonalMsgReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatDeletePersonalMsgReq& from);
  void MergeFrom(const TChatDeletePersonalMsgReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatDeletePersonalMsgReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TChatDeletePersonalMsgReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TChatDeletePersonalMsgReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatSendPersonalMsgByOtherServerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Chat.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatSendPersonalMsgByOtherServerReq : public ::google::protobuf::Message {
 public:
  TChatSendPersonalMsgByOtherServerReq();
  virtual ~TChatSendPersonalMsgByOtherServerReq();

  TChatSendPersonalMsgByOtherServerReq(const TChatSendPersonalMsgByOtherServerReq& from);

  inline TChatSendPersonalMsgByOtherServerReq& operator=(const TChatSendPersonalMsgByOtherServerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatSendPersonalMsgByOtherServerReq& default_instance();

  void Swap(TChatSendPersonalMsgByOtherServerReq* other);

  // implements Message ----------------------------------------------

  TChatSendPersonalMsgByOtherServerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatSendPersonalMsgByOtherServerReq& from);
  void MergeFrom(const TChatSendPersonalMsgByOtherServerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo SenderUserInfo = 1;
  inline bool has_senderuserinfo() const;
  inline void clear_senderuserinfo();
  static const int kSenderUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatSendPersonalMsgByOtherServerReq</name>
  	<Function>
  		<name>senderuserinfo</name>
  		<replaceName>SenderUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_senderuserinfo</name>
  		<replaceName>SenderUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_senderuserinfo</name>
  		<replaceName>SenderUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_senderuserinfo</name>
  		<replaceName>SenderUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& senderuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_senderuserinfo();
  inline ::pb::TUserSimpleInfo* release_senderuserinfo();
  inline void set_allocated_senderuserinfo(::pb::TUserSimpleInfo* senderuserinfo);

  // optional string SenderServerId = 2;
  inline bool has_senderserverid() const;
  inline void clear_senderserverid();
  static const int kSenderServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TChatSendPersonalMsgByOtherServerReq</name>
  	<Function>
  		<name>senderserverid</name>
  		<replaceName>SenderServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_senderserverid</name>
  		<replaceName>SenderServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_senderserverid</name>
  		<replaceName>SenderServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& senderserverid() const;
  inline void set_senderserverid(const ::std::string& value);
  inline void set_senderserverid(const char* value);
  inline void set_senderserverid(const char* value, size_t size);
  inline ::std::string* mutable_senderserverid();
  inline ::std::string* release_senderserverid();
  inline void set_allocated_senderserverid(::std::string* senderserverid);

  // optional uint64 ReceiverUid = 3;
  inline bool has_receiveruid() const;
  inline void clear_receiveruid();
  static const int kReceiverUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TChatSendPersonalMsgByOtherServerReq</name>
  	<Function>
  		<name>receiveruid</name>
  		<replaceName>ReceiverUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_receiveruid</name>
  		<replaceName>ReceiverUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receiveruid</name>
  		<replaceName>ReceiverUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 receiveruid() const;
  inline void set_receiveruid(::google::protobuf::uint64 value);

  // optional string Message = 4;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TChatSendPersonalMsgByOtherServerReq</name>
  	<Function>
  		<name>message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_message</name>
  		<replaceName>Message</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional uint32 MessageType = 5;
  inline bool has_messagetype() const;
  inline void clear_messagetype();
  static const int kMessageTypeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TChatSendPersonalMsgByOtherServerReq</name>
  	<Function>
  		<name>messagetype</name>
  		<replaceName>MessageType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_messagetype</name>
  		<replaceName>MessageType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_messagetype</name>
  		<replaceName>MessageType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 messagetype() const;
  inline void set_messagetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TChatSendPersonalMsgByOtherServerReq)
 private:
  inline void set_has_senderuserinfo();
  inline void clear_has_senderuserinfo();
  inline void set_has_senderserverid();
  inline void clear_has_senderserverid();
  inline void set_has_receiveruid();
  inline void clear_has_receiveruid();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_messagetype();
  inline void clear_has_messagetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* senderuserinfo_;
  ::std::string* senderserverid_;
  ::google::protobuf::uint64 receiveruid_;
  ::std::string* message_;
  ::google::protobuf::uint32 messagetype_;
  friend void  protobuf_AddDesc_net_2fChat_2eproto();
  friend void protobuf_AssignDesc_net_2fChat_2eproto();
  friend void protobuf_ShutdownFile_net_2fChat_2eproto();

  void InitAsDefaultInstance();
  static TChatSendPersonalMsgByOtherServerReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TChatMessage

// optional uint32 Channel = 1;
inline bool TChatMessage::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TChatMessage::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TChatMessage::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TChatMessage::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 TChatMessage::channel() const {
  // @@protoc_insertion_point(field_get:pb.TChatMessage.Channel)
  return channel_;
}
inline void TChatMessage::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatMessage.Channel)
}

// optional .pb.TUserSimpleInfo SUserInfo = 2;
inline bool TChatMessage::has_suserinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TChatMessage::set_has_suserinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TChatMessage::clear_has_suserinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TChatMessage::clear_suserinfo() {
  if (suserinfo_ != NULL) suserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_suserinfo();
}
inline const ::pb::TUserSimpleInfo& TChatMessage::suserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TChatMessage.SUserInfo)
  return suserinfo_ != NULL ? *suserinfo_ : *default_instance_->suserinfo_;
}
inline ::pb::TUserSimpleInfo* TChatMessage::mutable_suserinfo() {
  set_has_suserinfo();
  if (suserinfo_ == NULL) suserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TChatMessage.SUserInfo)
  return suserinfo_;
}
inline ::pb::TUserSimpleInfo* TChatMessage::release_suserinfo() {
  clear_has_suserinfo();
  ::pb::TUserSimpleInfo* temp = suserinfo_;
  suserinfo_ = NULL;
  return temp;
}
inline void TChatMessage::set_allocated_suserinfo(::pb::TUserSimpleInfo* suserinfo) {
  delete suserinfo_;
  suserinfo_ = suserinfo;
  if (suserinfo) {
    set_has_suserinfo();
  } else {
    clear_has_suserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TChatMessage.SUserInfo)
}

// optional uint32 MessageType = 3;
inline bool TChatMessage::has_messagetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TChatMessage::set_has_messagetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TChatMessage::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TChatMessage::clear_messagetype() {
  messagetype_ = 0u;
  clear_has_messagetype();
}
inline ::google::protobuf::uint32 TChatMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:pb.TChatMessage.MessageType)
  return messagetype_;
}
inline void TChatMessage::set_messagetype(::google::protobuf::uint32 value) {
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatMessage.MessageType)
}

// optional string Message = 4;
inline bool TChatMessage::has_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TChatMessage::set_has_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TChatMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TChatMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& TChatMessage::message() const {
  // @@protoc_insertion_point(field_get:pb.TChatMessage.Message)
  return *message_;
}
inline void TChatMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TChatMessage.Message)
}
inline void TChatMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TChatMessage.Message)
}
inline void TChatMessage::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TChatMessage.Message)
}
inline ::std::string* TChatMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TChatMessage.Message)
  return message_;
}
inline ::std::string* TChatMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TChatMessage::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TChatMessage.Message)
}

// optional uint64 MessageTime = 5;
inline bool TChatMessage::has_messagetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TChatMessage::set_has_messagetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TChatMessage::clear_has_messagetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TChatMessage::clear_messagetime() {
  messagetime_ = GOOGLE_ULONGLONG(0);
  clear_has_messagetime();
}
inline ::google::protobuf::uint64 TChatMessage::messagetime() const {
  // @@protoc_insertion_point(field_get:pb.TChatMessage.MessageTime)
  return messagetime_;
}
inline void TChatMessage::set_messagetime(::google::protobuf::uint64 value) {
  set_has_messagetime();
  messagetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatMessage.MessageTime)
}

// optional .pb.TUserSimpleInfo RUserInfo = 6;
inline bool TChatMessage::has_ruserinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TChatMessage::set_has_ruserinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TChatMessage::clear_has_ruserinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TChatMessage::clear_ruserinfo() {
  if (ruserinfo_ != NULL) ruserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_ruserinfo();
}
inline const ::pb::TUserSimpleInfo& TChatMessage::ruserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TChatMessage.RUserInfo)
  return ruserinfo_ != NULL ? *ruserinfo_ : *default_instance_->ruserinfo_;
}
inline ::pb::TUserSimpleInfo* TChatMessage::mutable_ruserinfo() {
  set_has_ruserinfo();
  if (ruserinfo_ == NULL) ruserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TChatMessage.RUserInfo)
  return ruserinfo_;
}
inline ::pb::TUserSimpleInfo* TChatMessage::release_ruserinfo() {
  clear_has_ruserinfo();
  ::pb::TUserSimpleInfo* temp = ruserinfo_;
  ruserinfo_ = NULL;
  return temp;
}
inline void TChatMessage::set_allocated_ruserinfo(::pb::TUserSimpleInfo* ruserinfo) {
  delete ruserinfo_;
  ruserinfo_ = ruserinfo;
  if (ruserinfo) {
    set_has_ruserinfo();
  } else {
    clear_has_ruserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TChatMessage.RUserInfo)
}

// optional .pb.TChatMessageTemplate MsgTmplInfo = 7;
inline bool TChatMessage::has_msgtmplinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TChatMessage::set_has_msgtmplinfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TChatMessage::clear_has_msgtmplinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TChatMessage::clear_msgtmplinfo() {
  if (msgtmplinfo_ != NULL) msgtmplinfo_->::pb::TChatMessageTemplate::Clear();
  clear_has_msgtmplinfo();
}
inline const ::pb::TChatMessageTemplate& TChatMessage::msgtmplinfo() const {
  // @@protoc_insertion_point(field_get:pb.TChatMessage.MsgTmplInfo)
  return msgtmplinfo_ != NULL ? *msgtmplinfo_ : *default_instance_->msgtmplinfo_;
}
inline ::pb::TChatMessageTemplate* TChatMessage::mutable_msgtmplinfo() {
  set_has_msgtmplinfo();
  if (msgtmplinfo_ == NULL) msgtmplinfo_ = new ::pb::TChatMessageTemplate;
  // @@protoc_insertion_point(field_mutable:pb.TChatMessage.MsgTmplInfo)
  return msgtmplinfo_;
}
inline ::pb::TChatMessageTemplate* TChatMessage::release_msgtmplinfo() {
  clear_has_msgtmplinfo();
  ::pb::TChatMessageTemplate* temp = msgtmplinfo_;
  msgtmplinfo_ = NULL;
  return temp;
}
inline void TChatMessage::set_allocated_msgtmplinfo(::pb::TChatMessageTemplate* msgtmplinfo) {
  delete msgtmplinfo_;
  msgtmplinfo_ = msgtmplinfo;
  if (msgtmplinfo) {
    set_has_msgtmplinfo();
  } else {
    clear_has_msgtmplinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TChatMessage.MsgTmplInfo)
}

// optional uint64 ChannelBranchId = 8;
inline bool TChatMessage::has_channelbranchid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TChatMessage::set_has_channelbranchid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TChatMessage::clear_has_channelbranchid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TChatMessage::clear_channelbranchid() {
  channelbranchid_ = GOOGLE_ULONGLONG(0);
  clear_has_channelbranchid();
}
inline ::google::protobuf::uint64 TChatMessage::channelbranchid() const {
  // @@protoc_insertion_point(field_get:pb.TChatMessage.ChannelBranchId)
  return channelbranchid_;
}
inline void TChatMessage::set_channelbranchid(::google::protobuf::uint64 value) {
  set_has_channelbranchid();
  channelbranchid_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatMessage.ChannelBranchId)
}

// optional string ExtraInfo = 9;
inline bool TChatMessage::has_extrainfo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TChatMessage::set_has_extrainfo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TChatMessage::clear_has_extrainfo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TChatMessage::clear_extrainfo() {
  if (extrainfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extrainfo_->clear();
  }
  clear_has_extrainfo();
}
inline const ::std::string& TChatMessage::extrainfo() const {
  // @@protoc_insertion_point(field_get:pb.TChatMessage.ExtraInfo)
  return *extrainfo_;
}
inline void TChatMessage::set_extrainfo(const ::std::string& value) {
  set_has_extrainfo();
  if (extrainfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extrainfo_ = new ::std::string;
  }
  extrainfo_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TChatMessage.ExtraInfo)
}
inline void TChatMessage::set_extrainfo(const char* value) {
  set_has_extrainfo();
  if (extrainfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extrainfo_ = new ::std::string;
  }
  extrainfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TChatMessage.ExtraInfo)
}
inline void TChatMessage::set_extrainfo(const char* value, size_t size) {
  set_has_extrainfo();
  if (extrainfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extrainfo_ = new ::std::string;
  }
  extrainfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TChatMessage.ExtraInfo)
}
inline ::std::string* TChatMessage::mutable_extrainfo() {
  set_has_extrainfo();
  if (extrainfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extrainfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TChatMessage.ExtraInfo)
  return extrainfo_;
}
inline ::std::string* TChatMessage::release_extrainfo() {
  clear_has_extrainfo();
  if (extrainfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extrainfo_;
    extrainfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TChatMessage::set_allocated_extrainfo(::std::string* extrainfo) {
  if (extrainfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extrainfo_;
  }
  if (extrainfo) {
    set_has_extrainfo();
    extrainfo_ = extrainfo;
  } else {
    clear_has_extrainfo();
    extrainfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TChatMessage.ExtraInfo)
}

// -------------------------------------------------------------------

// TChatMessageTemplate

// optional uint32 MessageTid = 1;
inline bool TChatMessageTemplate::has_messagetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TChatMessageTemplate::set_has_messagetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TChatMessageTemplate::clear_has_messagetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TChatMessageTemplate::clear_messagetid() {
  messagetid_ = 0u;
  clear_has_messagetid();
}
inline ::google::protobuf::uint32 TChatMessageTemplate::messagetid() const {
  // @@protoc_insertion_point(field_get:pb.TChatMessageTemplate.MessageTid)
  return messagetid_;
}
inline void TChatMessageTemplate::set_messagetid(::google::protobuf::uint32 value) {
  set_has_messagetid();
  messagetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatMessageTemplate.MessageTid)
}

// repeated string MessageArgArray = 2;
inline int TChatMessageTemplate::messageargarray_size() const {
  return messageargarray_.size();
}
inline void TChatMessageTemplate::clear_messageargarray() {
  messageargarray_.Clear();
}
inline const ::std::string& TChatMessageTemplate::messageargarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TChatMessageTemplate.MessageArgArray)
  return messageargarray_.Get(index);
}
inline ::std::string* TChatMessageTemplate::mutable_messageargarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TChatMessageTemplate.MessageArgArray)
  return messageargarray_.Mutable(index);
}
inline void TChatMessageTemplate::set_messageargarray(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TChatMessageTemplate.MessageArgArray)
  messageargarray_.Mutable(index)->assign(value);
}
inline void TChatMessageTemplate::set_messageargarray(int index, const char* value) {
  messageargarray_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TChatMessageTemplate.MessageArgArray)
}
inline void TChatMessageTemplate::set_messageargarray(int index, const char* value, size_t size) {
  messageargarray_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TChatMessageTemplate.MessageArgArray)
}
inline ::std::string* TChatMessageTemplate::add_messageargarray() {
  return messageargarray_.Add();
}
inline void TChatMessageTemplate::add_messageargarray(const ::std::string& value) {
  messageargarray_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TChatMessageTemplate.MessageArgArray)
}
inline void TChatMessageTemplate::add_messageargarray(const char* value) {
  messageargarray_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TChatMessageTemplate.MessageArgArray)
}
inline void TChatMessageTemplate::add_messageargarray(const char* value, size_t size) {
  messageargarray_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TChatMessageTemplate.MessageArgArray)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TChatMessageTemplate::messageargarray() const {
  // @@protoc_insertion_point(field_list:pb.TChatMessageTemplate.MessageArgArray)
  return messageargarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TChatMessageTemplate::mutable_messageargarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TChatMessageTemplate.MessageArgArray)
  return &messageargarray_;
}

// repeated .pb.TUserSimpleInfo UserInfoArray = 3;
inline int TChatMessageTemplate::userinfoarray_size() const {
  return userinfoarray_.size();
}
inline void TChatMessageTemplate::clear_userinfoarray() {
  userinfoarray_.Clear();
}
inline const ::pb::TUserSimpleInfo& TChatMessageTemplate::userinfoarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TChatMessageTemplate.UserInfoArray)
  return userinfoarray_.Get(index);
}
inline ::pb::TUserSimpleInfo* TChatMessageTemplate::mutable_userinfoarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TChatMessageTemplate.UserInfoArray)
  return userinfoarray_.Mutable(index);
}
inline ::pb::TUserSimpleInfo* TChatMessageTemplate::add_userinfoarray() {
  // @@protoc_insertion_point(field_add:pb.TChatMessageTemplate.UserInfoArray)
  return userinfoarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
TChatMessageTemplate::userinfoarray() const {
  // @@protoc_insertion_point(field_list:pb.TChatMessageTemplate.UserInfoArray)
  return userinfoarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
TChatMessageTemplate::mutable_userinfoarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TChatMessageTemplate.UserInfoArray)
  return &userinfoarray_;
}

// -------------------------------------------------------------------

// TBanInfo

// optional uint64 StartTime = 1;
inline bool TBanInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBanInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBanInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBanInfo::clear_starttime() {
  starttime_ = GOOGLE_ULONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::uint64 TBanInfo::starttime() const {
  // @@protoc_insertion_point(field_get:pb.TBanInfo.StartTime)
  return starttime_;
}
inline void TBanInfo::set_starttime(::google::protobuf::uint64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBanInfo.StartTime)
}

// optional uint32 Duration = 2;
inline bool TBanInfo::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBanInfo::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBanInfo::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBanInfo::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 TBanInfo::duration() const {
  // @@protoc_insertion_point(field_get:pb.TBanInfo.Duration)
  return duration_;
}
inline void TBanInfo::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:pb.TBanInfo.Duration)
}

// optional string Reason = 3;
inline bool TBanInfo::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBanInfo::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBanInfo::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBanInfo::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& TBanInfo::reason() const {
  // @@protoc_insertion_point(field_get:pb.TBanInfo.Reason)
  return *reason_;
}
inline void TBanInfo::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBanInfo.Reason)
}
inline void TBanInfo::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBanInfo.Reason)
}
inline void TBanInfo::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBanInfo.Reason)
}
inline ::std::string* TBanInfo::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBanInfo.Reason)
  return reason_;
}
inline ::std::string* TBanInfo::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBanInfo::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBanInfo.Reason)
}

// -------------------------------------------------------------------

// TSpeakTime

// optional uint32 Channel = 1;
inline bool TSpeakTime::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSpeakTime::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSpeakTime::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSpeakTime::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 TSpeakTime::channel() const {
  // @@protoc_insertion_point(field_get:pb.TSpeakTime.Channel)
  return channel_;
}
inline void TSpeakTime::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:pb.TSpeakTime.Channel)
}

// optional uint64 Time = 2;
inline bool TSpeakTime::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSpeakTime::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSpeakTime::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSpeakTime::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 TSpeakTime::time() const {
  // @@protoc_insertion_point(field_get:pb.TSpeakTime.Time)
  return time_;
}
inline void TSpeakTime::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:pb.TSpeakTime.Time)
}

// -------------------------------------------------------------------

// TChatTmpChannelInfo

// optional uint32 Channel = 1;
inline bool TChatTmpChannelInfo::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TChatTmpChannelInfo::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TChatTmpChannelInfo::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TChatTmpChannelInfo::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 TChatTmpChannelInfo::channel() const {
  // @@protoc_insertion_point(field_get:pb.TChatTmpChannelInfo.Channel)
  return channel_;
}
inline void TChatTmpChannelInfo::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatTmpChannelInfo.Channel)
}

// optional uint64 ChannelBranchId = 2;
inline bool TChatTmpChannelInfo::has_channelbranchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TChatTmpChannelInfo::set_has_channelbranchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TChatTmpChannelInfo::clear_has_channelbranchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TChatTmpChannelInfo::clear_channelbranchid() {
  channelbranchid_ = GOOGLE_ULONGLONG(0);
  clear_has_channelbranchid();
}
inline ::google::protobuf::uint64 TChatTmpChannelInfo::channelbranchid() const {
  // @@protoc_insertion_point(field_get:pb.TChatTmpChannelInfo.ChannelBranchId)
  return channelbranchid_;
}
inline void TChatTmpChannelInfo::set_channelbranchid(::google::protobuf::uint64 value) {
  set_has_channelbranchid();
  channelbranchid_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatTmpChannelInfo.ChannelBranchId)
}

// repeated .pb.TChatMessage MessageArray = 3;
inline int TChatTmpChannelInfo::messagearray_size() const {
  return messagearray_.size();
}
inline void TChatTmpChannelInfo::clear_messagearray() {
  messagearray_.Clear();
}
inline const ::pb::TChatMessage& TChatTmpChannelInfo::messagearray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TChatTmpChannelInfo.MessageArray)
  return messagearray_.Get(index);
}
inline ::pb::TChatMessage* TChatTmpChannelInfo::mutable_messagearray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TChatTmpChannelInfo.MessageArray)
  return messagearray_.Mutable(index);
}
inline ::pb::TChatMessage* TChatTmpChannelInfo::add_messagearray() {
  // @@protoc_insertion_point(field_add:pb.TChatTmpChannelInfo.MessageArray)
  return messagearray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage >&
TChatTmpChannelInfo::messagearray() const {
  // @@protoc_insertion_point(field_list:pb.TChatTmpChannelInfo.MessageArray)
  return messagearray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage >*
TChatTmpChannelInfo::mutable_messagearray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TChatTmpChannelInfo.MessageArray)
  return &messagearray_;
}

// -------------------------------------------------------------------

// TChatGetInfoRsp

// repeated .pb.TChatMessage MessageArray = 1;
inline int TChatGetInfoRsp::messagearray_size() const {
  return messagearray_.size();
}
inline void TChatGetInfoRsp::clear_messagearray() {
  messagearray_.Clear();
}
inline const ::pb::TChatMessage& TChatGetInfoRsp::messagearray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TChatGetInfoRsp.MessageArray)
  return messagearray_.Get(index);
}
inline ::pb::TChatMessage* TChatGetInfoRsp::mutable_messagearray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TChatGetInfoRsp.MessageArray)
  return messagearray_.Mutable(index);
}
inline ::pb::TChatMessage* TChatGetInfoRsp::add_messagearray() {
  // @@protoc_insertion_point(field_add:pb.TChatGetInfoRsp.MessageArray)
  return messagearray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage >&
TChatGetInfoRsp::messagearray() const {
  // @@protoc_insertion_point(field_list:pb.TChatGetInfoRsp.MessageArray)
  return messagearray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage >*
TChatGetInfoRsp::mutable_messagearray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TChatGetInfoRsp.MessageArray)
  return &messagearray_;
}

// repeated .pb.TSpeakTime SpeakTimeArray = 2;
inline int TChatGetInfoRsp::speaktimearray_size() const {
  return speaktimearray_.size();
}
inline void TChatGetInfoRsp::clear_speaktimearray() {
  speaktimearray_.Clear();
}
inline const ::pb::TSpeakTime& TChatGetInfoRsp::speaktimearray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TChatGetInfoRsp.SpeakTimeArray)
  return speaktimearray_.Get(index);
}
inline ::pb::TSpeakTime* TChatGetInfoRsp::mutable_speaktimearray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TChatGetInfoRsp.SpeakTimeArray)
  return speaktimearray_.Mutable(index);
}
inline ::pb::TSpeakTime* TChatGetInfoRsp::add_speaktimearray() {
  // @@protoc_insertion_point(field_add:pb.TChatGetInfoRsp.SpeakTimeArray)
  return speaktimearray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSpeakTime >&
TChatGetInfoRsp::speaktimearray() const {
  // @@protoc_insertion_point(field_list:pb.TChatGetInfoRsp.SpeakTimeArray)
  return speaktimearray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSpeakTime >*
TChatGetInfoRsp::mutable_speaktimearray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TChatGetInfoRsp.SpeakTimeArray)
  return &speaktimearray_;
}

// optional .pb.TBanInfo BanInfo = 3;
inline bool TChatGetInfoRsp::has_baninfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TChatGetInfoRsp::set_has_baninfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TChatGetInfoRsp::clear_has_baninfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TChatGetInfoRsp::clear_baninfo() {
  if (baninfo_ != NULL) baninfo_->::pb::TBanInfo::Clear();
  clear_has_baninfo();
}
inline const ::pb::TBanInfo& TChatGetInfoRsp::baninfo() const {
  // @@protoc_insertion_point(field_get:pb.TChatGetInfoRsp.BanInfo)
  return baninfo_ != NULL ? *baninfo_ : *default_instance_->baninfo_;
}
inline ::pb::TBanInfo* TChatGetInfoRsp::mutable_baninfo() {
  set_has_baninfo();
  if (baninfo_ == NULL) baninfo_ = new ::pb::TBanInfo;
  // @@protoc_insertion_point(field_mutable:pb.TChatGetInfoRsp.BanInfo)
  return baninfo_;
}
inline ::pb::TBanInfo* TChatGetInfoRsp::release_baninfo() {
  clear_has_baninfo();
  ::pb::TBanInfo* temp = baninfo_;
  baninfo_ = NULL;
  return temp;
}
inline void TChatGetInfoRsp::set_allocated_baninfo(::pb::TBanInfo* baninfo) {
  delete baninfo_;
  baninfo_ = baninfo;
  if (baninfo) {
    set_has_baninfo();
  } else {
    clear_has_baninfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TChatGetInfoRsp.BanInfo)
}

// repeated .pb.TUserSimpleInfo UserInfoArray = 4;
inline int TChatGetInfoRsp::userinfoarray_size() const {
  return userinfoarray_.size();
}
inline void TChatGetInfoRsp::clear_userinfoarray() {
  userinfoarray_.Clear();
}
inline const ::pb::TUserSimpleInfo& TChatGetInfoRsp::userinfoarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TChatGetInfoRsp.UserInfoArray)
  return userinfoarray_.Get(index);
}
inline ::pb::TUserSimpleInfo* TChatGetInfoRsp::mutable_userinfoarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TChatGetInfoRsp.UserInfoArray)
  return userinfoarray_.Mutable(index);
}
inline ::pb::TUserSimpleInfo* TChatGetInfoRsp::add_userinfoarray() {
  // @@protoc_insertion_point(field_add:pb.TChatGetInfoRsp.UserInfoArray)
  return userinfoarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
TChatGetInfoRsp::userinfoarray() const {
  // @@protoc_insertion_point(field_list:pb.TChatGetInfoRsp.UserInfoArray)
  return userinfoarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
TChatGetInfoRsp::mutable_userinfoarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TChatGetInfoRsp.UserInfoArray)
  return &userinfoarray_;
}

// repeated .pb.TChatTmpChannelInfo TmpChannelArray = 5;
inline int TChatGetInfoRsp::tmpchannelarray_size() const {
  return tmpchannelarray_.size();
}
inline void TChatGetInfoRsp::clear_tmpchannelarray() {
  tmpchannelarray_.Clear();
}
inline const ::pb::TChatTmpChannelInfo& TChatGetInfoRsp::tmpchannelarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TChatGetInfoRsp.TmpChannelArray)
  return tmpchannelarray_.Get(index);
}
inline ::pb::TChatTmpChannelInfo* TChatGetInfoRsp::mutable_tmpchannelarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TChatGetInfoRsp.TmpChannelArray)
  return tmpchannelarray_.Mutable(index);
}
inline ::pb::TChatTmpChannelInfo* TChatGetInfoRsp::add_tmpchannelarray() {
  // @@protoc_insertion_point(field_add:pb.TChatGetInfoRsp.TmpChannelArray)
  return tmpchannelarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TChatTmpChannelInfo >&
TChatGetInfoRsp::tmpchannelarray() const {
  // @@protoc_insertion_point(field_list:pb.TChatGetInfoRsp.TmpChannelArray)
  return tmpchannelarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TChatTmpChannelInfo >*
TChatGetInfoRsp::mutable_tmpchannelarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TChatGetInfoRsp.TmpChannelArray)
  return &tmpchannelarray_;
}

// repeated .pb.TChatTemplateMsgCdTime TemplateMsgCdArray = 6;
inline int TChatGetInfoRsp::templatemsgcdarray_size() const {
  return templatemsgcdarray_.size();
}
inline void TChatGetInfoRsp::clear_templatemsgcdarray() {
  templatemsgcdarray_.Clear();
}
inline const ::pb::TChatTemplateMsgCdTime& TChatGetInfoRsp::templatemsgcdarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TChatGetInfoRsp.TemplateMsgCdArray)
  return templatemsgcdarray_.Get(index);
}
inline ::pb::TChatTemplateMsgCdTime* TChatGetInfoRsp::mutable_templatemsgcdarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TChatGetInfoRsp.TemplateMsgCdArray)
  return templatemsgcdarray_.Mutable(index);
}
inline ::pb::TChatTemplateMsgCdTime* TChatGetInfoRsp::add_templatemsgcdarray() {
  // @@protoc_insertion_point(field_add:pb.TChatGetInfoRsp.TemplateMsgCdArray)
  return templatemsgcdarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TChatTemplateMsgCdTime >&
TChatGetInfoRsp::templatemsgcdarray() const {
  // @@protoc_insertion_point(field_list:pb.TChatGetInfoRsp.TemplateMsgCdArray)
  return templatemsgcdarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TChatTemplateMsgCdTime >*
TChatGetInfoRsp::mutable_templatemsgcdarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TChatGetInfoRsp.TemplateMsgCdArray)
  return &templatemsgcdarray_;
}

// -------------------------------------------------------------------

// TChatTemplateMsgCdTime

// optional uint32 MessageTid = 1;
inline bool TChatTemplateMsgCdTime::has_messagetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TChatTemplateMsgCdTime::set_has_messagetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TChatTemplateMsgCdTime::clear_has_messagetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TChatTemplateMsgCdTime::clear_messagetid() {
  messagetid_ = 0u;
  clear_has_messagetid();
}
inline ::google::protobuf::uint32 TChatTemplateMsgCdTime::messagetid() const {
  // @@protoc_insertion_point(field_get:pb.TChatTemplateMsgCdTime.MessageTid)
  return messagetid_;
}
inline void TChatTemplateMsgCdTime::set_messagetid(::google::protobuf::uint32 value) {
  set_has_messagetid();
  messagetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatTemplateMsgCdTime.MessageTid)
}

// optional uint64 LastSendTime = 2;
inline bool TChatTemplateMsgCdTime::has_lastsendtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TChatTemplateMsgCdTime::set_has_lastsendtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TChatTemplateMsgCdTime::clear_has_lastsendtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TChatTemplateMsgCdTime::clear_lastsendtime() {
  lastsendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastsendtime();
}
inline ::google::protobuf::uint64 TChatTemplateMsgCdTime::lastsendtime() const {
  // @@protoc_insertion_point(field_get:pb.TChatTemplateMsgCdTime.LastSendTime)
  return lastsendtime_;
}
inline void TChatTemplateMsgCdTime::set_lastsendtime(::google::protobuf::uint64 value) {
  set_has_lastsendtime();
  lastsendtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatTemplateMsgCdTime.LastSendTime)
}

// -------------------------------------------------------------------

// TChatSendTemplateMsgReq

// optional uint32 MessageTid = 1;
inline bool TChatSendTemplateMsgReq::has_messagetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TChatSendTemplateMsgReq::set_has_messagetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TChatSendTemplateMsgReq::clear_has_messagetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TChatSendTemplateMsgReq::clear_messagetid() {
  messagetid_ = 0u;
  clear_has_messagetid();
}
inline ::google::protobuf::uint32 TChatSendTemplateMsgReq::messagetid() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendTemplateMsgReq.MessageTid)
  return messagetid_;
}
inline void TChatSendTemplateMsgReq::set_messagetid(::google::protobuf::uint32 value) {
  set_has_messagetid();
  messagetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatSendTemplateMsgReq.MessageTid)
}

// repeated string MessageArgArray = 2;
inline int TChatSendTemplateMsgReq::messageargarray_size() const {
  return messageargarray_.size();
}
inline void TChatSendTemplateMsgReq::clear_messageargarray() {
  messageargarray_.Clear();
}
inline const ::std::string& TChatSendTemplateMsgReq::messageargarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TChatSendTemplateMsgReq.MessageArgArray)
  return messageargarray_.Get(index);
}
inline ::std::string* TChatSendTemplateMsgReq::mutable_messageargarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TChatSendTemplateMsgReq.MessageArgArray)
  return messageargarray_.Mutable(index);
}
inline void TChatSendTemplateMsgReq::set_messageargarray(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TChatSendTemplateMsgReq.MessageArgArray)
  messageargarray_.Mutable(index)->assign(value);
}
inline void TChatSendTemplateMsgReq::set_messageargarray(int index, const char* value) {
  messageargarray_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TChatSendTemplateMsgReq.MessageArgArray)
}
inline void TChatSendTemplateMsgReq::set_messageargarray(int index, const char* value, size_t size) {
  messageargarray_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TChatSendTemplateMsgReq.MessageArgArray)
}
inline ::std::string* TChatSendTemplateMsgReq::add_messageargarray() {
  return messageargarray_.Add();
}
inline void TChatSendTemplateMsgReq::add_messageargarray(const ::std::string& value) {
  messageargarray_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TChatSendTemplateMsgReq.MessageArgArray)
}
inline void TChatSendTemplateMsgReq::add_messageargarray(const char* value) {
  messageargarray_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TChatSendTemplateMsgReq.MessageArgArray)
}
inline void TChatSendTemplateMsgReq::add_messageargarray(const char* value, size_t size) {
  messageargarray_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TChatSendTemplateMsgReq.MessageArgArray)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TChatSendTemplateMsgReq::messageargarray() const {
  // @@protoc_insertion_point(field_list:pb.TChatSendTemplateMsgReq.MessageArgArray)
  return messageargarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TChatSendTemplateMsgReq::mutable_messageargarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TChatSendTemplateMsgReq.MessageArgArray)
  return &messageargarray_;
}

// repeated uint64 UidArray = 3;
inline int TChatSendTemplateMsgReq::uidarray_size() const {
  return uidarray_.size();
}
inline void TChatSendTemplateMsgReq::clear_uidarray() {
  uidarray_.Clear();
}
inline ::google::protobuf::uint64 TChatSendTemplateMsgReq::uidarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TChatSendTemplateMsgReq.UidArray)
  return uidarray_.Get(index);
}
inline void TChatSendTemplateMsgReq::set_uidarray(int index, ::google::protobuf::uint64 value) {
  uidarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TChatSendTemplateMsgReq.UidArray)
}
inline void TChatSendTemplateMsgReq::add_uidarray(::google::protobuf::uint64 value) {
  uidarray_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TChatSendTemplateMsgReq.UidArray)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TChatSendTemplateMsgReq::uidarray() const {
  // @@protoc_insertion_point(field_list:pb.TChatSendTemplateMsgReq.UidArray)
  return uidarray_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TChatSendTemplateMsgReq::mutable_uidarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TChatSendTemplateMsgReq.UidArray)
  return &uidarray_;
}

// optional uint32 Channel = 4;
inline bool TChatSendTemplateMsgReq::has_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TChatSendTemplateMsgReq::set_has_channel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TChatSendTemplateMsgReq::clear_has_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TChatSendTemplateMsgReq::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 TChatSendTemplateMsgReq::channel() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendTemplateMsgReq.Channel)
  return channel_;
}
inline void TChatSendTemplateMsgReq::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatSendTemplateMsgReq.Channel)
}

// -------------------------------------------------------------------

// TChatSendPersonalMsgReq

// optional uint64 ReceiveUid = 1;
inline bool TChatSendPersonalMsgReq::has_receiveuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TChatSendPersonalMsgReq::set_has_receiveuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TChatSendPersonalMsgReq::clear_has_receiveuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TChatSendPersonalMsgReq::clear_receiveuid() {
  receiveuid_ = GOOGLE_ULONGLONG(0);
  clear_has_receiveuid();
}
inline ::google::protobuf::uint64 TChatSendPersonalMsgReq::receiveuid() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendPersonalMsgReq.ReceiveUid)
  return receiveuid_;
}
inline void TChatSendPersonalMsgReq::set_receiveuid(::google::protobuf::uint64 value) {
  set_has_receiveuid();
  receiveuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatSendPersonalMsgReq.ReceiveUid)
}

// optional string Message = 2;
inline bool TChatSendPersonalMsgReq::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TChatSendPersonalMsgReq::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TChatSendPersonalMsgReq::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TChatSendPersonalMsgReq::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& TChatSendPersonalMsgReq::message() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendPersonalMsgReq.Message)
  return *message_;
}
inline void TChatSendPersonalMsgReq::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TChatSendPersonalMsgReq.Message)
}
inline void TChatSendPersonalMsgReq::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TChatSendPersonalMsgReq.Message)
}
inline void TChatSendPersonalMsgReq::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TChatSendPersonalMsgReq.Message)
}
inline ::std::string* TChatSendPersonalMsgReq::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TChatSendPersonalMsgReq.Message)
  return message_;
}
inline ::std::string* TChatSendPersonalMsgReq::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TChatSendPersonalMsgReq::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TChatSendPersonalMsgReq.Message)
}

// optional uint32 MessageType = 3;
inline bool TChatSendPersonalMsgReq::has_messagetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TChatSendPersonalMsgReq::set_has_messagetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TChatSendPersonalMsgReq::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TChatSendPersonalMsgReq::clear_messagetype() {
  messagetype_ = 0u;
  clear_has_messagetype();
}
inline ::google::protobuf::uint32 TChatSendPersonalMsgReq::messagetype() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendPersonalMsgReq.MessageType)
  return messagetype_;
}
inline void TChatSendPersonalMsgReq::set_messagetype(::google::protobuf::uint32 value) {
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatSendPersonalMsgReq.MessageType)
}

// optional string ReceiverServerId = 4;
inline bool TChatSendPersonalMsgReq::has_receiverserverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TChatSendPersonalMsgReq::set_has_receiverserverid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TChatSendPersonalMsgReq::clear_has_receiverserverid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TChatSendPersonalMsgReq::clear_receiverserverid() {
  if (receiverserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receiverserverid_->clear();
  }
  clear_has_receiverserverid();
}
inline const ::std::string& TChatSendPersonalMsgReq::receiverserverid() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendPersonalMsgReq.ReceiverServerId)
  return *receiverserverid_;
}
inline void TChatSendPersonalMsgReq::set_receiverserverid(const ::std::string& value) {
  set_has_receiverserverid();
  if (receiverserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receiverserverid_ = new ::std::string;
  }
  receiverserverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TChatSendPersonalMsgReq.ReceiverServerId)
}
inline void TChatSendPersonalMsgReq::set_receiverserverid(const char* value) {
  set_has_receiverserverid();
  if (receiverserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receiverserverid_ = new ::std::string;
  }
  receiverserverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TChatSendPersonalMsgReq.ReceiverServerId)
}
inline void TChatSendPersonalMsgReq::set_receiverserverid(const char* value, size_t size) {
  set_has_receiverserverid();
  if (receiverserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receiverserverid_ = new ::std::string;
  }
  receiverserverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TChatSendPersonalMsgReq.ReceiverServerId)
}
inline ::std::string* TChatSendPersonalMsgReq::mutable_receiverserverid() {
  set_has_receiverserverid();
  if (receiverserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receiverserverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TChatSendPersonalMsgReq.ReceiverServerId)
  return receiverserverid_;
}
inline ::std::string* TChatSendPersonalMsgReq::release_receiverserverid() {
  clear_has_receiverserverid();
  if (receiverserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = receiverserverid_;
    receiverserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TChatSendPersonalMsgReq::set_allocated_receiverserverid(::std::string* receiverserverid) {
  if (receiverserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receiverserverid_;
  }
  if (receiverserverid) {
    set_has_receiverserverid();
    receiverserverid_ = receiverserverid;
  } else {
    clear_has_receiverserverid();
    receiverserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TChatSendPersonalMsgReq.ReceiverServerId)
}

// -------------------------------------------------------------------

// TChatSendPersonalMsgRsp

// optional bool ReceiverRefuse = 1;
inline bool TChatSendPersonalMsgRsp::has_receiverrefuse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TChatSendPersonalMsgRsp::set_has_receiverrefuse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TChatSendPersonalMsgRsp::clear_has_receiverrefuse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TChatSendPersonalMsgRsp::clear_receiverrefuse() {
  receiverrefuse_ = false;
  clear_has_receiverrefuse();
}
inline bool TChatSendPersonalMsgRsp::receiverrefuse() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendPersonalMsgRsp.ReceiverRefuse)
  return receiverrefuse_;
}
inline void TChatSendPersonalMsgRsp::set_receiverrefuse(bool value) {
  set_has_receiverrefuse();
  receiverrefuse_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatSendPersonalMsgRsp.ReceiverRefuse)
}

// -------------------------------------------------------------------

// TChatSendWorldMsgReq

// optional string Message = 1;
inline bool TChatSendWorldMsgReq::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TChatSendWorldMsgReq::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TChatSendWorldMsgReq::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TChatSendWorldMsgReq::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& TChatSendWorldMsgReq::message() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendWorldMsgReq.Message)
  return *message_;
}
inline void TChatSendWorldMsgReq::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TChatSendWorldMsgReq.Message)
}
inline void TChatSendWorldMsgReq::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TChatSendWorldMsgReq.Message)
}
inline void TChatSendWorldMsgReq::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TChatSendWorldMsgReq.Message)
}
inline ::std::string* TChatSendWorldMsgReq::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TChatSendWorldMsgReq.Message)
  return message_;
}
inline ::std::string* TChatSendWorldMsgReq::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TChatSendWorldMsgReq::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TChatSendWorldMsgReq.Message)
}

// optional uint32 MessageType = 2;
inline bool TChatSendWorldMsgReq::has_messagetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TChatSendWorldMsgReq::set_has_messagetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TChatSendWorldMsgReq::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TChatSendWorldMsgReq::clear_messagetype() {
  messagetype_ = 0u;
  clear_has_messagetype();
}
inline ::google::protobuf::uint32 TChatSendWorldMsgReq::messagetype() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendWorldMsgReq.MessageType)
  return messagetype_;
}
inline void TChatSendWorldMsgReq::set_messagetype(::google::protobuf::uint32 value) {
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatSendWorldMsgReq.MessageType)
}

// -------------------------------------------------------------------

// TChatSendGuildMsgReq

// optional string Message = 1;
inline bool TChatSendGuildMsgReq::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TChatSendGuildMsgReq::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TChatSendGuildMsgReq::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TChatSendGuildMsgReq::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& TChatSendGuildMsgReq::message() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendGuildMsgReq.Message)
  return *message_;
}
inline void TChatSendGuildMsgReq::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TChatSendGuildMsgReq.Message)
}
inline void TChatSendGuildMsgReq::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TChatSendGuildMsgReq.Message)
}
inline void TChatSendGuildMsgReq::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TChatSendGuildMsgReq.Message)
}
inline ::std::string* TChatSendGuildMsgReq::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TChatSendGuildMsgReq.Message)
  return message_;
}
inline ::std::string* TChatSendGuildMsgReq::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TChatSendGuildMsgReq::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TChatSendGuildMsgReq.Message)
}

// optional uint32 MessageType = 2;
inline bool TChatSendGuildMsgReq::has_messagetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TChatSendGuildMsgReq::set_has_messagetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TChatSendGuildMsgReq::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TChatSendGuildMsgReq::clear_messagetype() {
  messagetype_ = 0u;
  clear_has_messagetype();
}
inline ::google::protobuf::uint32 TChatSendGuildMsgReq::messagetype() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendGuildMsgReq.MessageType)
  return messagetype_;
}
inline void TChatSendGuildMsgReq::set_messagetype(::google::protobuf::uint32 value) {
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatSendGuildMsgReq.MessageType)
}

// -------------------------------------------------------------------

// TChatSendBroadCastReq

// optional uint32 ItemTid = 1;
inline bool TChatSendBroadCastReq::has_itemtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TChatSendBroadCastReq::set_has_itemtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TChatSendBroadCastReq::clear_has_itemtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TChatSendBroadCastReq::clear_itemtid() {
  itemtid_ = 0u;
  clear_has_itemtid();
}
inline ::google::protobuf::uint32 TChatSendBroadCastReq::itemtid() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendBroadCastReq.ItemTid)
  return itemtid_;
}
inline void TChatSendBroadCastReq::set_itemtid(::google::protobuf::uint32 value) {
  set_has_itemtid();
  itemtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatSendBroadCastReq.ItemTid)
}

// optional string Message = 2;
inline bool TChatSendBroadCastReq::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TChatSendBroadCastReq::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TChatSendBroadCastReq::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TChatSendBroadCastReq::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& TChatSendBroadCastReq::message() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendBroadCastReq.Message)
  return *message_;
}
inline void TChatSendBroadCastReq::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TChatSendBroadCastReq.Message)
}
inline void TChatSendBroadCastReq::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TChatSendBroadCastReq.Message)
}
inline void TChatSendBroadCastReq::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TChatSendBroadCastReq.Message)
}
inline ::std::string* TChatSendBroadCastReq::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TChatSendBroadCastReq.Message)
  return message_;
}
inline ::std::string* TChatSendBroadCastReq::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TChatSendBroadCastReq::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TChatSendBroadCastReq.Message)
}

// -------------------------------------------------------------------

// TChatUpdateChatInfoNotify

// optional .pb.TBanInfo BanInfo = 1;
inline bool TChatUpdateChatInfoNotify::has_baninfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TChatUpdateChatInfoNotify::set_has_baninfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TChatUpdateChatInfoNotify::clear_has_baninfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TChatUpdateChatInfoNotify::clear_baninfo() {
  if (baninfo_ != NULL) baninfo_->::pb::TBanInfo::Clear();
  clear_has_baninfo();
}
inline const ::pb::TBanInfo& TChatUpdateChatInfoNotify::baninfo() const {
  // @@protoc_insertion_point(field_get:pb.TChatUpdateChatInfoNotify.BanInfo)
  return baninfo_ != NULL ? *baninfo_ : *default_instance_->baninfo_;
}
inline ::pb::TBanInfo* TChatUpdateChatInfoNotify::mutable_baninfo() {
  set_has_baninfo();
  if (baninfo_ == NULL) baninfo_ = new ::pb::TBanInfo;
  // @@protoc_insertion_point(field_mutable:pb.TChatUpdateChatInfoNotify.BanInfo)
  return baninfo_;
}
inline ::pb::TBanInfo* TChatUpdateChatInfoNotify::release_baninfo() {
  clear_has_baninfo();
  ::pb::TBanInfo* temp = baninfo_;
  baninfo_ = NULL;
  return temp;
}
inline void TChatUpdateChatInfoNotify::set_allocated_baninfo(::pb::TBanInfo* baninfo) {
  delete baninfo_;
  baninfo_ = baninfo;
  if (baninfo) {
    set_has_baninfo();
  } else {
    clear_has_baninfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TChatUpdateChatInfoNotify.BanInfo)
}

// -------------------------------------------------------------------

// TChatNewMessageNotify

// repeated .pb.TChatMessage MessageArray = 1;
inline int TChatNewMessageNotify::messagearray_size() const {
  return messagearray_.size();
}
inline void TChatNewMessageNotify::clear_messagearray() {
  messagearray_.Clear();
}
inline const ::pb::TChatMessage& TChatNewMessageNotify::messagearray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TChatNewMessageNotify.MessageArray)
  return messagearray_.Get(index);
}
inline ::pb::TChatMessage* TChatNewMessageNotify::mutable_messagearray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TChatNewMessageNotify.MessageArray)
  return messagearray_.Mutable(index);
}
inline ::pb::TChatMessage* TChatNewMessageNotify::add_messagearray() {
  // @@protoc_insertion_point(field_add:pb.TChatNewMessageNotify.MessageArray)
  return messagearray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage >&
TChatNewMessageNotify::messagearray() const {
  // @@protoc_insertion_point(field_list:pb.TChatNewMessageNotify.MessageArray)
  return messagearray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage >*
TChatNewMessageNotify::mutable_messagearray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TChatNewMessageNotify.MessageArray)
  return &messagearray_;
}

// -------------------------------------------------------------------

// TChatSendTmpChannelMessageReq

// optional uint32 Channel = 1;
inline bool TChatSendTmpChannelMessageReq::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TChatSendTmpChannelMessageReq::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TChatSendTmpChannelMessageReq::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TChatSendTmpChannelMessageReq::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 TChatSendTmpChannelMessageReq::channel() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendTmpChannelMessageReq.Channel)
  return channel_;
}
inline void TChatSendTmpChannelMessageReq::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatSendTmpChannelMessageReq.Channel)
}

// optional uint64 ChannelBranchId = 2;
inline bool TChatSendTmpChannelMessageReq::has_channelbranchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TChatSendTmpChannelMessageReq::set_has_channelbranchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TChatSendTmpChannelMessageReq::clear_has_channelbranchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TChatSendTmpChannelMessageReq::clear_channelbranchid() {
  channelbranchid_ = GOOGLE_ULONGLONG(0);
  clear_has_channelbranchid();
}
inline ::google::protobuf::uint64 TChatSendTmpChannelMessageReq::channelbranchid() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendTmpChannelMessageReq.ChannelBranchId)
  return channelbranchid_;
}
inline void TChatSendTmpChannelMessageReq::set_channelbranchid(::google::protobuf::uint64 value) {
  set_has_channelbranchid();
  channelbranchid_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatSendTmpChannelMessageReq.ChannelBranchId)
}

// optional string Message = 3;
inline bool TChatSendTmpChannelMessageReq::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TChatSendTmpChannelMessageReq::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TChatSendTmpChannelMessageReq::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TChatSendTmpChannelMessageReq::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& TChatSendTmpChannelMessageReq::message() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendTmpChannelMessageReq.Message)
  return *message_;
}
inline void TChatSendTmpChannelMessageReq::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TChatSendTmpChannelMessageReq.Message)
}
inline void TChatSendTmpChannelMessageReq::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TChatSendTmpChannelMessageReq.Message)
}
inline void TChatSendTmpChannelMessageReq::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TChatSendTmpChannelMessageReq.Message)
}
inline ::std::string* TChatSendTmpChannelMessageReq::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TChatSendTmpChannelMessageReq.Message)
  return message_;
}
inline ::std::string* TChatSendTmpChannelMessageReq::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TChatSendTmpChannelMessageReq::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TChatSendTmpChannelMessageReq.Message)
}

// optional uint32 MessageType = 4;
inline bool TChatSendTmpChannelMessageReq::has_messagetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TChatSendTmpChannelMessageReq::set_has_messagetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TChatSendTmpChannelMessageReq::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TChatSendTmpChannelMessageReq::clear_messagetype() {
  messagetype_ = 0u;
  clear_has_messagetype();
}
inline ::google::protobuf::uint32 TChatSendTmpChannelMessageReq::messagetype() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendTmpChannelMessageReq.MessageType)
  return messagetype_;
}
inline void TChatSendTmpChannelMessageReq::set_messagetype(::google::protobuf::uint32 value) {
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatSendTmpChannelMessageReq.MessageType)
}

// optional string ExtraInfo = 5;
inline bool TChatSendTmpChannelMessageReq::has_extrainfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TChatSendTmpChannelMessageReq::set_has_extrainfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TChatSendTmpChannelMessageReq::clear_has_extrainfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TChatSendTmpChannelMessageReq::clear_extrainfo() {
  if (extrainfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extrainfo_->clear();
  }
  clear_has_extrainfo();
}
inline const ::std::string& TChatSendTmpChannelMessageReq::extrainfo() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendTmpChannelMessageReq.ExtraInfo)
  return *extrainfo_;
}
inline void TChatSendTmpChannelMessageReq::set_extrainfo(const ::std::string& value) {
  set_has_extrainfo();
  if (extrainfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extrainfo_ = new ::std::string;
  }
  extrainfo_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TChatSendTmpChannelMessageReq.ExtraInfo)
}
inline void TChatSendTmpChannelMessageReq::set_extrainfo(const char* value) {
  set_has_extrainfo();
  if (extrainfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extrainfo_ = new ::std::string;
  }
  extrainfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TChatSendTmpChannelMessageReq.ExtraInfo)
}
inline void TChatSendTmpChannelMessageReq::set_extrainfo(const char* value, size_t size) {
  set_has_extrainfo();
  if (extrainfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extrainfo_ = new ::std::string;
  }
  extrainfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TChatSendTmpChannelMessageReq.ExtraInfo)
}
inline ::std::string* TChatSendTmpChannelMessageReq::mutable_extrainfo() {
  set_has_extrainfo();
  if (extrainfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extrainfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TChatSendTmpChannelMessageReq.ExtraInfo)
  return extrainfo_;
}
inline ::std::string* TChatSendTmpChannelMessageReq::release_extrainfo() {
  clear_has_extrainfo();
  if (extrainfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extrainfo_;
    extrainfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TChatSendTmpChannelMessageReq::set_allocated_extrainfo(::std::string* extrainfo) {
  if (extrainfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extrainfo_;
  }
  if (extrainfo) {
    set_has_extrainfo();
    extrainfo_ = extrainfo;
  } else {
    clear_has_extrainfo();
    extrainfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TChatSendTmpChannelMessageReq.ExtraInfo)
}

// -------------------------------------------------------------------

// TChatNewTmpChannelNotify

// optional uint32 Channel = 1;
inline bool TChatNewTmpChannelNotify::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TChatNewTmpChannelNotify::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TChatNewTmpChannelNotify::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TChatNewTmpChannelNotify::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 TChatNewTmpChannelNotify::channel() const {
  // @@protoc_insertion_point(field_get:pb.TChatNewTmpChannelNotify.Channel)
  return channel_;
}
inline void TChatNewTmpChannelNotify::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatNewTmpChannelNotify.Channel)
}

// optional uint64 ChannelBranchId = 2;
inline bool TChatNewTmpChannelNotify::has_channelbranchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TChatNewTmpChannelNotify::set_has_channelbranchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TChatNewTmpChannelNotify::clear_has_channelbranchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TChatNewTmpChannelNotify::clear_channelbranchid() {
  channelbranchid_ = GOOGLE_ULONGLONG(0);
  clear_has_channelbranchid();
}
inline ::google::protobuf::uint64 TChatNewTmpChannelNotify::channelbranchid() const {
  // @@protoc_insertion_point(field_get:pb.TChatNewTmpChannelNotify.ChannelBranchId)
  return channelbranchid_;
}
inline void TChatNewTmpChannelNotify::set_channelbranchid(::google::protobuf::uint64 value) {
  set_has_channelbranchid();
  channelbranchid_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatNewTmpChannelNotify.ChannelBranchId)
}

// -------------------------------------------------------------------

// TChatDeleteTmpChannelNotify

// optional uint32 Channel = 1;
inline bool TChatDeleteTmpChannelNotify::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TChatDeleteTmpChannelNotify::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TChatDeleteTmpChannelNotify::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TChatDeleteTmpChannelNotify::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 TChatDeleteTmpChannelNotify::channel() const {
  // @@protoc_insertion_point(field_get:pb.TChatDeleteTmpChannelNotify.Channel)
  return channel_;
}
inline void TChatDeleteTmpChannelNotify::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatDeleteTmpChannelNotify.Channel)
}

// optional uint64 ChannelBranchId = 2;
inline bool TChatDeleteTmpChannelNotify::has_channelbranchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TChatDeleteTmpChannelNotify::set_has_channelbranchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TChatDeleteTmpChannelNotify::clear_has_channelbranchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TChatDeleteTmpChannelNotify::clear_channelbranchid() {
  channelbranchid_ = GOOGLE_ULONGLONG(0);
  clear_has_channelbranchid();
}
inline ::google::protobuf::uint64 TChatDeleteTmpChannelNotify::channelbranchid() const {
  // @@protoc_insertion_point(field_get:pb.TChatDeleteTmpChannelNotify.ChannelBranchId)
  return channelbranchid_;
}
inline void TChatDeleteTmpChannelNotify::set_channelbranchid(::google::protobuf::uint64 value) {
  set_has_channelbranchid();
  channelbranchid_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatDeleteTmpChannelNotify.ChannelBranchId)
}

// -------------------------------------------------------------------

// TChatTmpChannelMessageNotify

// repeated .pb.TChatMessage MessageArray = 1;
inline int TChatTmpChannelMessageNotify::messagearray_size() const {
  return messagearray_.size();
}
inline void TChatTmpChannelMessageNotify::clear_messagearray() {
  messagearray_.Clear();
}
inline const ::pb::TChatMessage& TChatTmpChannelMessageNotify::messagearray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TChatTmpChannelMessageNotify.MessageArray)
  return messagearray_.Get(index);
}
inline ::pb::TChatMessage* TChatTmpChannelMessageNotify::mutable_messagearray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TChatTmpChannelMessageNotify.MessageArray)
  return messagearray_.Mutable(index);
}
inline ::pb::TChatMessage* TChatTmpChannelMessageNotify::add_messagearray() {
  // @@protoc_insertion_point(field_add:pb.TChatTmpChannelMessageNotify.MessageArray)
  return messagearray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage >&
TChatTmpChannelMessageNotify::messagearray() const {
  // @@protoc_insertion_point(field_list:pb.TChatTmpChannelMessageNotify.MessageArray)
  return messagearray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TChatMessage >*
TChatTmpChannelMessageNotify::mutable_messagearray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TChatTmpChannelMessageNotify.MessageArray)
  return &messagearray_;
}

// -------------------------------------------------------------------

// TChatDeletePersonalMsgReq

// optional uint64 Uid = 1;
inline bool TChatDeletePersonalMsgReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TChatDeletePersonalMsgReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TChatDeletePersonalMsgReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TChatDeletePersonalMsgReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TChatDeletePersonalMsgReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TChatDeletePersonalMsgReq.Uid)
  return uid_;
}
inline void TChatDeletePersonalMsgReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatDeletePersonalMsgReq.Uid)
}

// -------------------------------------------------------------------

// TChatSendPersonalMsgByOtherServerReq

// optional .pb.TUserSimpleInfo SenderUserInfo = 1;
inline bool TChatSendPersonalMsgByOtherServerReq::has_senderuserinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TChatSendPersonalMsgByOtherServerReq::set_has_senderuserinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TChatSendPersonalMsgByOtherServerReq::clear_has_senderuserinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TChatSendPersonalMsgByOtherServerReq::clear_senderuserinfo() {
  if (senderuserinfo_ != NULL) senderuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_senderuserinfo();
}
inline const ::pb::TUserSimpleInfo& TChatSendPersonalMsgByOtherServerReq::senderuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendPersonalMsgByOtherServerReq.SenderUserInfo)
  return senderuserinfo_ != NULL ? *senderuserinfo_ : *default_instance_->senderuserinfo_;
}
inline ::pb::TUserSimpleInfo* TChatSendPersonalMsgByOtherServerReq::mutable_senderuserinfo() {
  set_has_senderuserinfo();
  if (senderuserinfo_ == NULL) senderuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TChatSendPersonalMsgByOtherServerReq.SenderUserInfo)
  return senderuserinfo_;
}
inline ::pb::TUserSimpleInfo* TChatSendPersonalMsgByOtherServerReq::release_senderuserinfo() {
  clear_has_senderuserinfo();
  ::pb::TUserSimpleInfo* temp = senderuserinfo_;
  senderuserinfo_ = NULL;
  return temp;
}
inline void TChatSendPersonalMsgByOtherServerReq::set_allocated_senderuserinfo(::pb::TUserSimpleInfo* senderuserinfo) {
  delete senderuserinfo_;
  senderuserinfo_ = senderuserinfo;
  if (senderuserinfo) {
    set_has_senderuserinfo();
  } else {
    clear_has_senderuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TChatSendPersonalMsgByOtherServerReq.SenderUserInfo)
}

// optional string SenderServerId = 2;
inline bool TChatSendPersonalMsgByOtherServerReq::has_senderserverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TChatSendPersonalMsgByOtherServerReq::set_has_senderserverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TChatSendPersonalMsgByOtherServerReq::clear_has_senderserverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TChatSendPersonalMsgByOtherServerReq::clear_senderserverid() {
  if (senderserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    senderserverid_->clear();
  }
  clear_has_senderserverid();
}
inline const ::std::string& TChatSendPersonalMsgByOtherServerReq::senderserverid() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendPersonalMsgByOtherServerReq.SenderServerId)
  return *senderserverid_;
}
inline void TChatSendPersonalMsgByOtherServerReq::set_senderserverid(const ::std::string& value) {
  set_has_senderserverid();
  if (senderserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    senderserverid_ = new ::std::string;
  }
  senderserverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TChatSendPersonalMsgByOtherServerReq.SenderServerId)
}
inline void TChatSendPersonalMsgByOtherServerReq::set_senderserverid(const char* value) {
  set_has_senderserverid();
  if (senderserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    senderserverid_ = new ::std::string;
  }
  senderserverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TChatSendPersonalMsgByOtherServerReq.SenderServerId)
}
inline void TChatSendPersonalMsgByOtherServerReq::set_senderserverid(const char* value, size_t size) {
  set_has_senderserverid();
  if (senderserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    senderserverid_ = new ::std::string;
  }
  senderserverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TChatSendPersonalMsgByOtherServerReq.SenderServerId)
}
inline ::std::string* TChatSendPersonalMsgByOtherServerReq::mutable_senderserverid() {
  set_has_senderserverid();
  if (senderserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    senderserverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TChatSendPersonalMsgByOtherServerReq.SenderServerId)
  return senderserverid_;
}
inline ::std::string* TChatSendPersonalMsgByOtherServerReq::release_senderserverid() {
  clear_has_senderserverid();
  if (senderserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = senderserverid_;
    senderserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TChatSendPersonalMsgByOtherServerReq::set_allocated_senderserverid(::std::string* senderserverid) {
  if (senderserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete senderserverid_;
  }
  if (senderserverid) {
    set_has_senderserverid();
    senderserverid_ = senderserverid;
  } else {
    clear_has_senderserverid();
    senderserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TChatSendPersonalMsgByOtherServerReq.SenderServerId)
}

// optional uint64 ReceiverUid = 3;
inline bool TChatSendPersonalMsgByOtherServerReq::has_receiveruid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TChatSendPersonalMsgByOtherServerReq::set_has_receiveruid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TChatSendPersonalMsgByOtherServerReq::clear_has_receiveruid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TChatSendPersonalMsgByOtherServerReq::clear_receiveruid() {
  receiveruid_ = GOOGLE_ULONGLONG(0);
  clear_has_receiveruid();
}
inline ::google::protobuf::uint64 TChatSendPersonalMsgByOtherServerReq::receiveruid() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendPersonalMsgByOtherServerReq.ReceiverUid)
  return receiveruid_;
}
inline void TChatSendPersonalMsgByOtherServerReq::set_receiveruid(::google::protobuf::uint64 value) {
  set_has_receiveruid();
  receiveruid_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatSendPersonalMsgByOtherServerReq.ReceiverUid)
}

// optional string Message = 4;
inline bool TChatSendPersonalMsgByOtherServerReq::has_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TChatSendPersonalMsgByOtherServerReq::set_has_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TChatSendPersonalMsgByOtherServerReq::clear_has_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TChatSendPersonalMsgByOtherServerReq::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& TChatSendPersonalMsgByOtherServerReq::message() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendPersonalMsgByOtherServerReq.Message)
  return *message_;
}
inline void TChatSendPersonalMsgByOtherServerReq::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TChatSendPersonalMsgByOtherServerReq.Message)
}
inline void TChatSendPersonalMsgByOtherServerReq::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TChatSendPersonalMsgByOtherServerReq.Message)
}
inline void TChatSendPersonalMsgByOtherServerReq::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TChatSendPersonalMsgByOtherServerReq.Message)
}
inline ::std::string* TChatSendPersonalMsgByOtherServerReq::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TChatSendPersonalMsgByOtherServerReq.Message)
  return message_;
}
inline ::std::string* TChatSendPersonalMsgByOtherServerReq::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TChatSendPersonalMsgByOtherServerReq::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TChatSendPersonalMsgByOtherServerReq.Message)
}

// optional uint32 MessageType = 5;
inline bool TChatSendPersonalMsgByOtherServerReq::has_messagetype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TChatSendPersonalMsgByOtherServerReq::set_has_messagetype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TChatSendPersonalMsgByOtherServerReq::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TChatSendPersonalMsgByOtherServerReq::clear_messagetype() {
  messagetype_ = 0u;
  clear_has_messagetype();
}
inline ::google::protobuf::uint32 TChatSendPersonalMsgByOtherServerReq::messagetype() const {
  // @@protoc_insertion_point(field_get:pb.TChatSendPersonalMsgByOtherServerReq.MessageType)
  return messagetype_;
}
inline void TChatSendPersonalMsgByOtherServerReq::set_messagetype(::google::protobuf::uint32 value) {
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatSendPersonalMsgByOtherServerReq.MessageType)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EChatChannel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EChatChannel>() {
  return ::pb::EChatChannel_descriptor();
}
template <> struct is_proto_enum< ::pb::EChatMessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EChatMessageType>() {
  return ::pb::EChatMessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fChat_2eproto__INCLUDED
