// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatMessageTemplate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatMessageTemplate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSpeakTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSpeakTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatTmpChannelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatTmpChannelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatTemplateMsgCdTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatTemplateMsgCdTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatSendTemplateMsgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatSendTemplateMsgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatSendPersonalMsgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatSendPersonalMsgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatSendPersonalMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatSendPersonalMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatSendWorldMsgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatSendWorldMsgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatSendGuildMsgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatSendGuildMsgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatSendBroadCastReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatSendBroadCastReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatUpdateChatInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatUpdateChatInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatNewMessageNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatNewMessageNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatSendTmpChannelMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatSendTmpChannelMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatNewTmpChannelNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatNewTmpChannelNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatDeleteTmpChannelNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatDeleteTmpChannelNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatTmpChannelMessageNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatTmpChannelMessageNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatDeletePersonalMsgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatDeletePersonalMsgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatSendPersonalMsgByOtherServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatSendPersonalMsgByOtherServerReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EChatChannel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EChatMessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fChat_2eproto() {
  protobuf_AddDesc_net_2fChat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Chat.proto");
  GOOGLE_CHECK(file != NULL);
  TChatMessage_descriptor_ = file->message_type(0);
  static const int TChatMessage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatMessage, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatMessage, suserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatMessage, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatMessage, messagetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatMessage, ruserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatMessage, msgtmplinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatMessage, channelbranchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatMessage, extrainfo_),
  };
  TChatMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatMessage_descriptor_,
      TChatMessage::default_instance_,
      TChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatMessage));
  TChatMessageTemplate_descriptor_ = file->message_type(1);
  static const int TChatMessageTemplate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatMessageTemplate, messagetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatMessageTemplate, messageargarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatMessageTemplate, userinfoarray_),
  };
  TChatMessageTemplate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatMessageTemplate_descriptor_,
      TChatMessageTemplate::default_instance_,
      TChatMessageTemplate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatMessageTemplate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatMessageTemplate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatMessageTemplate));
  TBanInfo_descriptor_ = file->message_type(2);
  static const int TBanInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBanInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBanInfo, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBanInfo, reason_),
  };
  TBanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBanInfo_descriptor_,
      TBanInfo::default_instance_,
      TBanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBanInfo));
  TSpeakTime_descriptor_ = file->message_type(3);
  static const int TSpeakTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSpeakTime, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSpeakTime, time_),
  };
  TSpeakTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSpeakTime_descriptor_,
      TSpeakTime::default_instance_,
      TSpeakTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSpeakTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSpeakTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSpeakTime));
  TChatTmpChannelInfo_descriptor_ = file->message_type(4);
  static const int TChatTmpChannelInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatTmpChannelInfo, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatTmpChannelInfo, channelbranchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatTmpChannelInfo, messagearray_),
  };
  TChatTmpChannelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatTmpChannelInfo_descriptor_,
      TChatTmpChannelInfo::default_instance_,
      TChatTmpChannelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatTmpChannelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatTmpChannelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatTmpChannelInfo));
  TChatGetInfoRsp_descriptor_ = file->message_type(5);
  static const int TChatGetInfoRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatGetInfoRsp, messagearray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatGetInfoRsp, speaktimearray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatGetInfoRsp, baninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatGetInfoRsp, userinfoarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatGetInfoRsp, tmpchannelarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatGetInfoRsp, templatemsgcdarray_),
  };
  TChatGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatGetInfoRsp_descriptor_,
      TChatGetInfoRsp::default_instance_,
      TChatGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatGetInfoRsp));
  TChatTemplateMsgCdTime_descriptor_ = file->message_type(6);
  static const int TChatTemplateMsgCdTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatTemplateMsgCdTime, messagetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatTemplateMsgCdTime, lastsendtime_),
  };
  TChatTemplateMsgCdTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatTemplateMsgCdTime_descriptor_,
      TChatTemplateMsgCdTime::default_instance_,
      TChatTemplateMsgCdTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatTemplateMsgCdTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatTemplateMsgCdTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatTemplateMsgCdTime));
  TChatSendTemplateMsgReq_descriptor_ = file->message_type(7);
  static const int TChatSendTemplateMsgReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendTemplateMsgReq, messagetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendTemplateMsgReq, messageargarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendTemplateMsgReq, uidarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendTemplateMsgReq, channel_),
  };
  TChatSendTemplateMsgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatSendTemplateMsgReq_descriptor_,
      TChatSendTemplateMsgReq::default_instance_,
      TChatSendTemplateMsgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendTemplateMsgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendTemplateMsgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatSendTemplateMsgReq));
  TChatSendPersonalMsgReq_descriptor_ = file->message_type(8);
  static const int TChatSendPersonalMsgReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendPersonalMsgReq, receiveuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendPersonalMsgReq, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendPersonalMsgReq, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendPersonalMsgReq, receiverserverid_),
  };
  TChatSendPersonalMsgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatSendPersonalMsgReq_descriptor_,
      TChatSendPersonalMsgReq::default_instance_,
      TChatSendPersonalMsgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendPersonalMsgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendPersonalMsgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatSendPersonalMsgReq));
  TChatSendPersonalMsgRsp_descriptor_ = file->message_type(9);
  static const int TChatSendPersonalMsgRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendPersonalMsgRsp, receiverrefuse_),
  };
  TChatSendPersonalMsgRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatSendPersonalMsgRsp_descriptor_,
      TChatSendPersonalMsgRsp::default_instance_,
      TChatSendPersonalMsgRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendPersonalMsgRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendPersonalMsgRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatSendPersonalMsgRsp));
  TChatSendWorldMsgReq_descriptor_ = file->message_type(10);
  static const int TChatSendWorldMsgReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendWorldMsgReq, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendWorldMsgReq, messagetype_),
  };
  TChatSendWorldMsgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatSendWorldMsgReq_descriptor_,
      TChatSendWorldMsgReq::default_instance_,
      TChatSendWorldMsgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendWorldMsgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendWorldMsgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatSendWorldMsgReq));
  TChatSendGuildMsgReq_descriptor_ = file->message_type(11);
  static const int TChatSendGuildMsgReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendGuildMsgReq, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendGuildMsgReq, messagetype_),
  };
  TChatSendGuildMsgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatSendGuildMsgReq_descriptor_,
      TChatSendGuildMsgReq::default_instance_,
      TChatSendGuildMsgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendGuildMsgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendGuildMsgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatSendGuildMsgReq));
  TChatSendBroadCastReq_descriptor_ = file->message_type(12);
  static const int TChatSendBroadCastReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendBroadCastReq, itemtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendBroadCastReq, message_),
  };
  TChatSendBroadCastReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatSendBroadCastReq_descriptor_,
      TChatSendBroadCastReq::default_instance_,
      TChatSendBroadCastReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendBroadCastReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendBroadCastReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatSendBroadCastReq));
  TChatUpdateChatInfoNotify_descriptor_ = file->message_type(13);
  static const int TChatUpdateChatInfoNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatUpdateChatInfoNotify, baninfo_),
  };
  TChatUpdateChatInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatUpdateChatInfoNotify_descriptor_,
      TChatUpdateChatInfoNotify::default_instance_,
      TChatUpdateChatInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatUpdateChatInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatUpdateChatInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatUpdateChatInfoNotify));
  TChatNewMessageNotify_descriptor_ = file->message_type(14);
  static const int TChatNewMessageNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatNewMessageNotify, messagearray_),
  };
  TChatNewMessageNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatNewMessageNotify_descriptor_,
      TChatNewMessageNotify::default_instance_,
      TChatNewMessageNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatNewMessageNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatNewMessageNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatNewMessageNotify));
  TChatSendTmpChannelMessageReq_descriptor_ = file->message_type(15);
  static const int TChatSendTmpChannelMessageReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendTmpChannelMessageReq, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendTmpChannelMessageReq, channelbranchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendTmpChannelMessageReq, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendTmpChannelMessageReq, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendTmpChannelMessageReq, extrainfo_),
  };
  TChatSendTmpChannelMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatSendTmpChannelMessageReq_descriptor_,
      TChatSendTmpChannelMessageReq::default_instance_,
      TChatSendTmpChannelMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendTmpChannelMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendTmpChannelMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatSendTmpChannelMessageReq));
  TChatNewTmpChannelNotify_descriptor_ = file->message_type(16);
  static const int TChatNewTmpChannelNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatNewTmpChannelNotify, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatNewTmpChannelNotify, channelbranchid_),
  };
  TChatNewTmpChannelNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatNewTmpChannelNotify_descriptor_,
      TChatNewTmpChannelNotify::default_instance_,
      TChatNewTmpChannelNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatNewTmpChannelNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatNewTmpChannelNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatNewTmpChannelNotify));
  TChatDeleteTmpChannelNotify_descriptor_ = file->message_type(17);
  static const int TChatDeleteTmpChannelNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatDeleteTmpChannelNotify, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatDeleteTmpChannelNotify, channelbranchid_),
  };
  TChatDeleteTmpChannelNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatDeleteTmpChannelNotify_descriptor_,
      TChatDeleteTmpChannelNotify::default_instance_,
      TChatDeleteTmpChannelNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatDeleteTmpChannelNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatDeleteTmpChannelNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatDeleteTmpChannelNotify));
  TChatTmpChannelMessageNotify_descriptor_ = file->message_type(18);
  static const int TChatTmpChannelMessageNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatTmpChannelMessageNotify, messagearray_),
  };
  TChatTmpChannelMessageNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatTmpChannelMessageNotify_descriptor_,
      TChatTmpChannelMessageNotify::default_instance_,
      TChatTmpChannelMessageNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatTmpChannelMessageNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatTmpChannelMessageNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatTmpChannelMessageNotify));
  TChatDeletePersonalMsgReq_descriptor_ = file->message_type(19);
  static const int TChatDeletePersonalMsgReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatDeletePersonalMsgReq, uid_),
  };
  TChatDeletePersonalMsgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatDeletePersonalMsgReq_descriptor_,
      TChatDeletePersonalMsgReq::default_instance_,
      TChatDeletePersonalMsgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatDeletePersonalMsgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatDeletePersonalMsgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatDeletePersonalMsgReq));
  TChatSendPersonalMsgByOtherServerReq_descriptor_ = file->message_type(20);
  static const int TChatSendPersonalMsgByOtherServerReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendPersonalMsgByOtherServerReq, senderuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendPersonalMsgByOtherServerReq, senderserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendPersonalMsgByOtherServerReq, receiveruid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendPersonalMsgByOtherServerReq, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendPersonalMsgByOtherServerReq, messagetype_),
  };
  TChatSendPersonalMsgByOtherServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatSendPersonalMsgByOtherServerReq_descriptor_,
      TChatSendPersonalMsgByOtherServerReq::default_instance_,
      TChatSendPersonalMsgByOtherServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendPersonalMsgByOtherServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatSendPersonalMsgByOtherServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatSendPersonalMsgByOtherServerReq));
  EChatChannel_descriptor_ = file->enum_type(0);
  EChatMessageType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fChat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatMessage_descriptor_, &TChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatMessageTemplate_descriptor_, &TChatMessageTemplate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBanInfo_descriptor_, &TBanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSpeakTime_descriptor_, &TSpeakTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatTmpChannelInfo_descriptor_, &TChatTmpChannelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatGetInfoRsp_descriptor_, &TChatGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatTemplateMsgCdTime_descriptor_, &TChatTemplateMsgCdTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatSendTemplateMsgReq_descriptor_, &TChatSendTemplateMsgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatSendPersonalMsgReq_descriptor_, &TChatSendPersonalMsgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatSendPersonalMsgRsp_descriptor_, &TChatSendPersonalMsgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatSendWorldMsgReq_descriptor_, &TChatSendWorldMsgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatSendGuildMsgReq_descriptor_, &TChatSendGuildMsgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatSendBroadCastReq_descriptor_, &TChatSendBroadCastReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatUpdateChatInfoNotify_descriptor_, &TChatUpdateChatInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatNewMessageNotify_descriptor_, &TChatNewMessageNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatSendTmpChannelMessageReq_descriptor_, &TChatSendTmpChannelMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatNewTmpChannelNotify_descriptor_, &TChatNewTmpChannelNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatDeleteTmpChannelNotify_descriptor_, &TChatDeleteTmpChannelNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatTmpChannelMessageNotify_descriptor_, &TChatTmpChannelMessageNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatDeletePersonalMsgReq_descriptor_, &TChatDeletePersonalMsgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatSendPersonalMsgByOtherServerReq_descriptor_, &TChatSendPersonalMsgByOtherServerReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fChat_2eproto() {
  delete TChatMessage::default_instance_;
  delete TChatMessage_reflection_;
  delete TChatMessageTemplate::default_instance_;
  delete TChatMessageTemplate_reflection_;
  delete TBanInfo::default_instance_;
  delete TBanInfo_reflection_;
  delete TSpeakTime::default_instance_;
  delete TSpeakTime_reflection_;
  delete TChatTmpChannelInfo::default_instance_;
  delete TChatTmpChannelInfo_reflection_;
  delete TChatGetInfoRsp::default_instance_;
  delete TChatGetInfoRsp_reflection_;
  delete TChatTemplateMsgCdTime::default_instance_;
  delete TChatTemplateMsgCdTime_reflection_;
  delete TChatSendTemplateMsgReq::default_instance_;
  delete TChatSendTemplateMsgReq_reflection_;
  delete TChatSendPersonalMsgReq::default_instance_;
  delete TChatSendPersonalMsgReq_reflection_;
  delete TChatSendPersonalMsgRsp::default_instance_;
  delete TChatSendPersonalMsgRsp_reflection_;
  delete TChatSendWorldMsgReq::default_instance_;
  delete TChatSendWorldMsgReq_reflection_;
  delete TChatSendGuildMsgReq::default_instance_;
  delete TChatSendGuildMsgReq_reflection_;
  delete TChatSendBroadCastReq::default_instance_;
  delete TChatSendBroadCastReq_reflection_;
  delete TChatUpdateChatInfoNotify::default_instance_;
  delete TChatUpdateChatInfoNotify_reflection_;
  delete TChatNewMessageNotify::default_instance_;
  delete TChatNewMessageNotify_reflection_;
  delete TChatSendTmpChannelMessageReq::default_instance_;
  delete TChatSendTmpChannelMessageReq_reflection_;
  delete TChatNewTmpChannelNotify::default_instance_;
  delete TChatNewTmpChannelNotify_reflection_;
  delete TChatDeleteTmpChannelNotify::default_instance_;
  delete TChatDeleteTmpChannelNotify_reflection_;
  delete TChatTmpChannelMessageNotify::default_instance_;
  delete TChatTmpChannelMessageNotify_reflection_;
  delete TChatDeletePersonalMsgReq::default_instance_;
  delete TChatDeletePersonalMsgReq_reflection_;
  delete TChatSendPersonalMsgByOtherServerReq::default_instance_;
  delete TChatSendPersonalMsgByOtherServerReq_reflection_;
}

void protobuf_AddDesc_net_2fChat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016net/Chat.proto\022\002pb\032\016net/User.proto\"\205\002\n"
    "\014TChatMessage\022\017\n\007Channel\030\001 \001(\r\022&\n\tSUserI"
    "nfo\030\002 \001(\0132\023.pb.TUserSimpleInfo\022\023\n\013Messag"
    "eType\030\003 \001(\r\022\017\n\007Message\030\004 \001(\t\022\023\n\013MessageT"
    "ime\030\005 \001(\004\022&\n\tRUserInfo\030\006 \001(\0132\023.pb.TUserS"
    "impleInfo\022-\n\013MsgTmplInfo\030\007 \001(\0132\030.pb.TCha"
    "tMessageTemplate\022\027\n\017ChannelBranchId\030\010 \001("
    "\004\022\021\n\tExtraInfo\030\t \001(\t\"o\n\024TChatMessageTemp"
    "late\022\022\n\nMessageTid\030\001 \001(\r\022\027\n\017MessageArgAr"
    "ray\030\002 \003(\t\022*\n\rUserInfoArray\030\003 \003(\0132\023.pb.TU"
    "serSimpleInfo\"\?\n\010TBanInfo\022\021\n\tStartTime\030\001"
    " \001(\004\022\020\n\010Duration\030\002 \001(\r\022\016\n\006Reason\030\003 \001(\t\"+"
    "\n\nTSpeakTime\022\017\n\007Channel\030\001 \001(\r\022\014\n\004Time\030\002 "
    "\001(\004\"g\n\023TChatTmpChannelInfo\022\017\n\007Channel\030\001 "
    "\001(\r\022\027\n\017ChannelBranchId\030\002 \001(\004\022&\n\014MessageA"
    "rray\030\003 \003(\0132\020.pb.TChatMessage\"\226\002\n\017TChatGe"
    "tInfoRsp\022&\n\014MessageArray\030\001 \003(\0132\020.pb.TCha"
    "tMessage\022&\n\016SpeakTimeArray\030\002 \003(\0132\016.pb.TS"
    "peakTime\022\035\n\007BanInfo\030\003 \001(\0132\014.pb.TBanInfo\022"
    "*\n\rUserInfoArray\030\004 \003(\0132\023.pb.TUserSimpleI"
    "nfo\0220\n\017TmpChannelArray\030\005 \003(\0132\027.pb.TChatT"
    "mpChannelInfo\0226\n\022TemplateMsgCdArray\030\006 \003("
    "\0132\032.pb.TChatTemplateMsgCdTime\"B\n\026TChatTe"
    "mplateMsgCdTime\022\022\n\nMessageTid\030\001 \001(\r\022\024\n\014L"
    "astSendTime\030\002 \001(\004\"i\n\027TChatSendTemplateMs"
    "gReq\022\022\n\nMessageTid\030\001 \001(\r\022\027\n\017MessageArgAr"
    "ray\030\002 \003(\t\022\020\n\010UidArray\030\003 \003(\004\022\017\n\007Channel\030\004"
    " \001(\r\"m\n\027TChatSendPersonalMsgReq\022\022\n\nRecei"
    "veUid\030\001 \001(\004\022\017\n\007Message\030\002 \001(\t\022\023\n\013MessageT"
    "ype\030\003 \001(\r\022\030\n\020ReceiverServerId\030\004 \001(\t\"1\n\027T"
    "ChatSendPersonalMsgRsp\022\026\n\016ReceiverRefuse"
    "\030\001 \001(\010\"<\n\024TChatSendWorldMsgReq\022\017\n\007Messag"
    "e\030\001 \001(\t\022\023\n\013MessageType\030\002 \001(\r\"<\n\024TChatSen"
    "dGuildMsgReq\022\017\n\007Message\030\001 \001(\t\022\023\n\013Message"
    "Type\030\002 \001(\r\"9\n\025TChatSendBroadCastReq\022\017\n\007I"
    "temTid\030\001 \001(\r\022\017\n\007Message\030\002 \001(\t\":\n\031TChatUp"
    "dateChatInfoNotify\022\035\n\007BanInfo\030\001 \001(\0132\014.pb"
    ".TBanInfo\"\?\n\025TChatNewMessageNotify\022&\n\014Me"
    "ssageArray\030\001 \003(\0132\020.pb.TChatMessage\"\202\001\n\035T"
    "ChatSendTmpChannelMessageReq\022\017\n\007Channel\030"
    "\001 \001(\r\022\027\n\017ChannelBranchId\030\002 \001(\004\022\017\n\007Messag"
    "e\030\003 \001(\t\022\023\n\013MessageType\030\004 \001(\r\022\021\n\tExtraInf"
    "o\030\005 \001(\t\"D\n\030TChatNewTmpChannelNotify\022\017\n\007C"
    "hannel\030\001 \001(\r\022\027\n\017ChannelBranchId\030\002 \001(\004\"G\n"
    "\033TChatDeleteTmpChannelNotify\022\017\n\007Channel\030"
    "\001 \001(\r\022\027\n\017ChannelBranchId\030\002 \001(\004\"F\n\034TChatT"
    "mpChannelMessageNotify\022&\n\014MessageArray\030\001"
    " \003(\0132\020.pb.TChatMessage\"(\n\031TChatDeletePer"
    "sonalMsgReq\022\013\n\003Uid\030\001 \001(\004\"\246\001\n$TChatSendPe"
    "rsonalMsgByOtherServerReq\022+\n\016SenderUserI"
    "nfo\030\001 \001(\0132\023.pb.TUserSimpleInfo\022\026\n\016Sender"
    "ServerId\030\002 \001(\t\022\023\n\013ReceiverUid\030\003 \001(\004\022\017\n\007M"
    "essage\030\004 \001(\t\022\023\n\013MessageType\030\005 \001(\r*\303\001\n\014EC"
    "hatChannel\022\t\n\005WORLD\020\001\022\t\n\005GUILD\020\002\022\n\n\006SYST"
    "EM\020\003\022\014\n\010PERSONAL\020\004\022\r\n\tBROATCAST\020\005\022\t\n\005GRO"
    "UP\020\006\022\021\n\rADVENTURETEAM\020\007\022\n\n\006ANCHOR\020\010\022\023\n\017C"
    "HAT_CROSS_LEVY\020\013\022\027\n\023CHAT_CROSS_ALLIANCE\020"
    "\014\022\034\n\030CHAT_CROSS_PLATFORMARENA\020\r*P\n\020EChat"
    "MessageType\022\016\n\nNORMAL_MSG\020\001\022\r\n\tVOICE_MSG"
    "\020\002\022\016\n\nBATTLE_MSG\020\003\022\r\n\tSQUAD_MSG\020\004", 2393);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Chat.proto", &protobuf_RegisterTypes);
  TChatMessage::default_instance_ = new TChatMessage();
  TChatMessageTemplate::default_instance_ = new TChatMessageTemplate();
  TBanInfo::default_instance_ = new TBanInfo();
  TSpeakTime::default_instance_ = new TSpeakTime();
  TChatTmpChannelInfo::default_instance_ = new TChatTmpChannelInfo();
  TChatGetInfoRsp::default_instance_ = new TChatGetInfoRsp();
  TChatTemplateMsgCdTime::default_instance_ = new TChatTemplateMsgCdTime();
  TChatSendTemplateMsgReq::default_instance_ = new TChatSendTemplateMsgReq();
  TChatSendPersonalMsgReq::default_instance_ = new TChatSendPersonalMsgReq();
  TChatSendPersonalMsgRsp::default_instance_ = new TChatSendPersonalMsgRsp();
  TChatSendWorldMsgReq::default_instance_ = new TChatSendWorldMsgReq();
  TChatSendGuildMsgReq::default_instance_ = new TChatSendGuildMsgReq();
  TChatSendBroadCastReq::default_instance_ = new TChatSendBroadCastReq();
  TChatUpdateChatInfoNotify::default_instance_ = new TChatUpdateChatInfoNotify();
  TChatNewMessageNotify::default_instance_ = new TChatNewMessageNotify();
  TChatSendTmpChannelMessageReq::default_instance_ = new TChatSendTmpChannelMessageReq();
  TChatNewTmpChannelNotify::default_instance_ = new TChatNewTmpChannelNotify();
  TChatDeleteTmpChannelNotify::default_instance_ = new TChatDeleteTmpChannelNotify();
  TChatTmpChannelMessageNotify::default_instance_ = new TChatTmpChannelMessageNotify();
  TChatDeletePersonalMsgReq::default_instance_ = new TChatDeletePersonalMsgReq();
  TChatSendPersonalMsgByOtherServerReq::default_instance_ = new TChatSendPersonalMsgByOtherServerReq();
  TChatMessage::default_instance_->InitAsDefaultInstance();
  TChatMessageTemplate::default_instance_->InitAsDefaultInstance();
  TBanInfo::default_instance_->InitAsDefaultInstance();
  TSpeakTime::default_instance_->InitAsDefaultInstance();
  TChatTmpChannelInfo::default_instance_->InitAsDefaultInstance();
  TChatGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TChatTemplateMsgCdTime::default_instance_->InitAsDefaultInstance();
  TChatSendTemplateMsgReq::default_instance_->InitAsDefaultInstance();
  TChatSendPersonalMsgReq::default_instance_->InitAsDefaultInstance();
  TChatSendPersonalMsgRsp::default_instance_->InitAsDefaultInstance();
  TChatSendWorldMsgReq::default_instance_->InitAsDefaultInstance();
  TChatSendGuildMsgReq::default_instance_->InitAsDefaultInstance();
  TChatSendBroadCastReq::default_instance_->InitAsDefaultInstance();
  TChatUpdateChatInfoNotify::default_instance_->InitAsDefaultInstance();
  TChatNewMessageNotify::default_instance_->InitAsDefaultInstance();
  TChatSendTmpChannelMessageReq::default_instance_->InitAsDefaultInstance();
  TChatNewTmpChannelNotify::default_instance_->InitAsDefaultInstance();
  TChatDeleteTmpChannelNotify::default_instance_->InitAsDefaultInstance();
  TChatTmpChannelMessageNotify::default_instance_->InitAsDefaultInstance();
  TChatDeletePersonalMsgReq::default_instance_->InitAsDefaultInstance();
  TChatSendPersonalMsgByOtherServerReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fChat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fChat_2eproto {
  StaticDescriptorInitializer_net_2fChat_2eproto() {
    protobuf_AddDesc_net_2fChat_2eproto();
  }
} static_descriptor_initializer_net_2fChat_2eproto_;
const ::google::protobuf::EnumDescriptor* EChatChannel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EChatChannel_descriptor_;
}
bool EChatChannel_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EChatMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EChatMessageType_descriptor_;
}
bool EChatMessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TChatMessage::kChannelFieldNumber;
const int TChatMessage::kSUserInfoFieldNumber;
const int TChatMessage::kMessageTypeFieldNumber;
const int TChatMessage::kMessageFieldNumber;
const int TChatMessage::kMessageTimeFieldNumber;
const int TChatMessage::kRUserInfoFieldNumber;
const int TChatMessage::kMsgTmplInfoFieldNumber;
const int TChatMessage::kChannelBranchIdFieldNumber;
const int TChatMessage::kExtraInfoFieldNumber;
#endif  // !_MSC_VER

TChatMessage::TChatMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatMessage)
}

void TChatMessage::InitAsDefaultInstance() {
  suserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
  ruserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
  msgtmplinfo_ = const_cast< ::pb::TChatMessageTemplate*>(&::pb::TChatMessageTemplate::default_instance());
}

TChatMessage::TChatMessage(const TChatMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatMessage)
}

void TChatMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_ = 0u;
  suserinfo_ = NULL;
  messagetype_ = 0u;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetime_ = GOOGLE_ULONGLONG(0);
  ruserinfo_ = NULL;
  msgtmplinfo_ = NULL;
  channelbranchid_ = GOOGLE_ULONGLONG(0);
  extrainfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatMessage::~TChatMessage() {
  // @@protoc_insertion_point(destructor:pb.TChatMessage)
  SharedDtor();
}

void TChatMessage::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (extrainfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extrainfo_;
  }
  if (this != default_instance_) {
    delete suserinfo_;
    delete ruserinfo_;
    delete msgtmplinfo_;
  }
}

void TChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatMessage_descriptor_;
}

const TChatMessage& TChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TChatMessage* TChatMessage::default_instance_ = NULL;

TChatMessage* TChatMessage::New() const {
  return new TChatMessage;
}

void TChatMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TChatMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(channel_, messagetype_);
    if (has_suserinfo()) {
      if (suserinfo_ != NULL) suserinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    messagetime_ = GOOGLE_ULONGLONG(0);
    if (has_ruserinfo()) {
      if (ruserinfo_ != NULL) ruserinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_msgtmplinfo()) {
      if (msgtmplinfo_ != NULL) msgtmplinfo_->::pb::TChatMessageTemplate::Clear();
    }
    channelbranchid_ = GOOGLE_ULONGLONG(0);
  }
  if (has_extrainfo()) {
    if (extrainfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      extrainfo_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Channel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo SUserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_SUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_suserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MessageType;
        break;
      }

      // optional uint32 MessageType = 3;
      case 3: {
        if (tag == 24) {
         parse_MessageType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messagetype_)));
          set_has_messagetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Message;
        break;
      }

      // optional string Message = 4;
      case 4: {
        if (tag == 34) {
         parse_Message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MessageTime;
        break;
      }

      // optional uint64 MessageTime = 5;
      case 5: {
        if (tag == 40) {
         parse_MessageTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &messagetime_)));
          set_has_messagetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_RUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo RUserInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_RUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ruserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_MsgTmplInfo;
        break;
      }

      // optional .pb.TChatMessageTemplate MsgTmplInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_MsgTmplInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgtmplinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ChannelBranchId;
        break;
      }

      // optional uint64 ChannelBranchId = 8;
      case 8: {
        if (tag == 64) {
         parse_ChannelBranchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channelbranchid_)));
          set_has_channelbranchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ExtraInfo;
        break;
      }

      // optional string ExtraInfo = 9;
      case 9: {
        if (tag == 74) {
         parse_ExtraInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extrainfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extrainfo().data(), this->extrainfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extrainfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatMessage)
  return false;
#undef DO_
}

void TChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatMessage)
  // optional uint32 Channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional .pb.TUserSimpleInfo SUserInfo = 2;
  if (has_suserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->suserinfo(), output);
  }

  // optional uint32 MessageType = 3;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->messagetype(), output);
  }

  // optional string Message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->message(), output);
  }

  // optional uint64 MessageTime = 5;
  if (has_messagetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->messagetime(), output);
  }

  // optional .pb.TUserSimpleInfo RUserInfo = 6;
  if (has_ruserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ruserinfo(), output);
  }

  // optional .pb.TChatMessageTemplate MsgTmplInfo = 7;
  if (has_msgtmplinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->msgtmplinfo(), output);
  }

  // optional uint64 ChannelBranchId = 8;
  if (has_channelbranchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->channelbranchid(), output);
  }

  // optional string ExtraInfo = 9;
  if (has_extrainfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extrainfo().data(), this->extrainfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extrainfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->extrainfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatMessage)
}

::google::protobuf::uint8* TChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatMessage)
  // optional uint32 Channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional .pb.TUserSimpleInfo SUserInfo = 2;
  if (has_suserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->suserinfo(), target);
  }

  // optional uint32 MessageType = 3;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->messagetype(), target);
  }

  // optional string Message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  // optional uint64 MessageTime = 5;
  if (has_messagetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->messagetime(), target);
  }

  // optional .pb.TUserSimpleInfo RUserInfo = 6;
  if (has_ruserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ruserinfo(), target);
  }

  // optional .pb.TChatMessageTemplate MsgTmplInfo = 7;
  if (has_msgtmplinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->msgtmplinfo(), target);
  }

  // optional uint64 ChannelBranchId = 8;
  if (has_channelbranchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->channelbranchid(), target);
  }

  // optional string ExtraInfo = 9;
  if (has_extrainfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extrainfo().data(), this->extrainfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extrainfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->extrainfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatMessage)
  return target;
}

int TChatMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional .pb.TUserSimpleInfo SUserInfo = 2;
    if (has_suserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->suserinfo());
    }

    // optional uint32 MessageType = 3;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messagetype());
    }

    // optional string Message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint64 MessageTime = 5;
    if (has_messagetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->messagetime());
    }

    // optional .pb.TUserSimpleInfo RUserInfo = 6;
    if (has_ruserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ruserinfo());
    }

    // optional .pb.TChatMessageTemplate MsgTmplInfo = 7;
    if (has_msgtmplinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgtmplinfo());
    }

    // optional uint64 ChannelBranchId = 8;
    if (has_channelbranchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channelbranchid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ExtraInfo = 9;
    if (has_extrainfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extrainfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatMessage::MergeFrom(const TChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_suserinfo()) {
      mutable_suserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.suserinfo());
    }
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_messagetime()) {
      set_messagetime(from.messagetime());
    }
    if (from.has_ruserinfo()) {
      mutable_ruserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.ruserinfo());
    }
    if (from.has_msgtmplinfo()) {
      mutable_msgtmplinfo()->::pb::TChatMessageTemplate::MergeFrom(from.msgtmplinfo());
    }
    if (from.has_channelbranchid()) {
      set_channelbranchid(from.channelbranchid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_extrainfo()) {
      set_extrainfo(from.extrainfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatMessage::CopyFrom(const TChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatMessage::IsInitialized() const {

  return true;
}

void TChatMessage::Swap(TChatMessage* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(suserinfo_, other->suserinfo_);
    std::swap(messagetype_, other->messagetype_);
    std::swap(message_, other->message_);
    std::swap(messagetime_, other->messagetime_);
    std::swap(ruserinfo_, other->ruserinfo_);
    std::swap(msgtmplinfo_, other->msgtmplinfo_);
    std::swap(channelbranchid_, other->channelbranchid_);
    std::swap(extrainfo_, other->extrainfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatMessage_descriptor_;
  metadata.reflection = TChatMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatMessageTemplate::kMessageTidFieldNumber;
const int TChatMessageTemplate::kMessageArgArrayFieldNumber;
const int TChatMessageTemplate::kUserInfoArrayFieldNumber;
#endif  // !_MSC_VER

TChatMessageTemplate::TChatMessageTemplate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatMessageTemplate)
}

void TChatMessageTemplate::InitAsDefaultInstance() {
}

TChatMessageTemplate::TChatMessageTemplate(const TChatMessageTemplate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatMessageTemplate)
}

void TChatMessageTemplate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  messagetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatMessageTemplate::~TChatMessageTemplate() {
  // @@protoc_insertion_point(destructor:pb.TChatMessageTemplate)
  SharedDtor();
}

void TChatMessageTemplate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TChatMessageTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatMessageTemplate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatMessageTemplate_descriptor_;
}

const TChatMessageTemplate& TChatMessageTemplate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TChatMessageTemplate* TChatMessageTemplate::default_instance_ = NULL;

TChatMessageTemplate* TChatMessageTemplate::New() const {
  return new TChatMessageTemplate;
}

void TChatMessageTemplate::Clear() {
  messagetid_ = 0u;
  messageargarray_.Clear();
  userinfoarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatMessageTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatMessageTemplate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MessageTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messagetid_)));
          set_has_messagetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MessageArgArray;
        break;
      }

      // repeated string MessageArgArray = 2;
      case 2: {
        if (tag == 18) {
         parse_MessageArgArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_messageargarray()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messageargarray(this->messageargarray_size() - 1).data(),
            this->messageargarray(this->messageargarray_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messageargarray");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MessageArgArray;
        if (input->ExpectTag(26)) goto parse_UserInfoArray;
        break;
      }

      // repeated .pb.TUserSimpleInfo UserInfoArray = 3;
      case 3: {
        if (tag == 26) {
         parse_UserInfoArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfoarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserInfoArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatMessageTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatMessageTemplate)
  return false;
#undef DO_
}

void TChatMessageTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatMessageTemplate)
  // optional uint32 MessageTid = 1;
  if (has_messagetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->messagetid(), output);
  }

  // repeated string MessageArgArray = 2;
  for (int i = 0; i < this->messageargarray_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->messageargarray(i).data(), this->messageargarray(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "messageargarray");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->messageargarray(i), output);
  }

  // repeated .pb.TUserSimpleInfo UserInfoArray = 3;
  for (int i = 0; i < this->userinfoarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfoarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatMessageTemplate)
}

::google::protobuf::uint8* TChatMessageTemplate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatMessageTemplate)
  // optional uint32 MessageTid = 1;
  if (has_messagetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->messagetid(), target);
  }

  // repeated string MessageArgArray = 2;
  for (int i = 0; i < this->messageargarray_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageargarray(i).data(), this->messageargarray(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messageargarray");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->messageargarray(i), target);
  }

  // repeated .pb.TUserSimpleInfo UserInfoArray = 3;
  for (int i = 0; i < this->userinfoarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfoarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatMessageTemplate)
  return target;
}

int TChatMessageTemplate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MessageTid = 1;
    if (has_messagetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messagetid());
    }

  }
  // repeated string MessageArgArray = 2;
  total_size += 1 * this->messageargarray_size();
  for (int i = 0; i < this->messageargarray_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->messageargarray(i));
  }

  // repeated .pb.TUserSimpleInfo UserInfoArray = 3;
  total_size += 1 * this->userinfoarray_size();
  for (int i = 0; i < this->userinfoarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfoarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatMessageTemplate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatMessageTemplate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatMessageTemplate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatMessageTemplate::MergeFrom(const TChatMessageTemplate& from) {
  GOOGLE_CHECK_NE(&from, this);
  messageargarray_.MergeFrom(from.messageargarray_);
  userinfoarray_.MergeFrom(from.userinfoarray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetid()) {
      set_messagetid(from.messagetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatMessageTemplate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatMessageTemplate::CopyFrom(const TChatMessageTemplate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatMessageTemplate::IsInitialized() const {

  return true;
}

void TChatMessageTemplate::Swap(TChatMessageTemplate* other) {
  if (other != this) {
    std::swap(messagetid_, other->messagetid_);
    messageargarray_.Swap(&other->messageargarray_);
    userinfoarray_.Swap(&other->userinfoarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatMessageTemplate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatMessageTemplate_descriptor_;
  metadata.reflection = TChatMessageTemplate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBanInfo::kStartTimeFieldNumber;
const int TBanInfo::kDurationFieldNumber;
const int TBanInfo::kReasonFieldNumber;
#endif  // !_MSC_VER

TBanInfo::TBanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBanInfo)
}

void TBanInfo::InitAsDefaultInstance() {
}

TBanInfo::TBanInfo(const TBanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBanInfo)
}

void TBanInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  starttime_ = GOOGLE_ULONGLONG(0);
  duration_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBanInfo::~TBanInfo() {
  // @@protoc_insertion_point(destructor:pb.TBanInfo)
  SharedDtor();
}

void TBanInfo::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void TBanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBanInfo_descriptor_;
}

const TBanInfo& TBanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TBanInfo* TBanInfo::default_instance_ = NULL;

TBanInfo* TBanInfo::New() const {
  return new TBanInfo;
}

void TBanInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    starttime_ = GOOGLE_ULONGLONG(0);
    duration_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBanInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 StartTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Duration;
        break;
      }

      // optional uint32 Duration = 2;
      case 2: {
        if (tag == 16) {
         parse_Duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Reason;
        break;
      }

      // optional string Reason = 3;
      case 3: {
        if (tag == 26) {
         parse_Reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBanInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBanInfo)
  return false;
#undef DO_
}

void TBanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBanInfo)
  // optional uint64 StartTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->starttime(), output);
  }

  // optional uint32 Duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->duration(), output);
  }

  // optional string Reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBanInfo)
}

::google::protobuf::uint8* TBanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBanInfo)
  // optional uint64 StartTime = 1;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->starttime(), target);
  }

  // optional uint32 Duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->duration(), target);
  }

  // optional string Reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBanInfo)
  return target;
}

int TBanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 StartTime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint32 Duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional string Reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBanInfo::MergeFrom(const TBanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBanInfo::CopyFrom(const TBanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBanInfo::IsInitialized() const {

  return true;
}

void TBanInfo::Swap(TBanInfo* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(duration_, other->duration_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBanInfo_descriptor_;
  metadata.reflection = TBanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSpeakTime::kChannelFieldNumber;
const int TSpeakTime::kTimeFieldNumber;
#endif  // !_MSC_VER

TSpeakTime::TSpeakTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSpeakTime)
}

void TSpeakTime::InitAsDefaultInstance() {
}

TSpeakTime::TSpeakTime(const TSpeakTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSpeakTime)
}

void TSpeakTime::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSpeakTime::~TSpeakTime() {
  // @@protoc_insertion_point(destructor:pb.TSpeakTime)
  SharedDtor();
}

void TSpeakTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSpeakTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSpeakTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSpeakTime_descriptor_;
}

const TSpeakTime& TSpeakTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TSpeakTime* TSpeakTime::default_instance_ = NULL;

TSpeakTime* TSpeakTime::New() const {
  return new TSpeakTime;
}

void TSpeakTime::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSpeakTime*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_, channel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSpeakTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSpeakTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Channel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Time;
        break;
      }

      // optional uint64 Time = 2;
      case 2: {
        if (tag == 16) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSpeakTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSpeakTime)
  return false;
#undef DO_
}

void TSpeakTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSpeakTime)
  // optional uint32 Channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional uint64 Time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSpeakTime)
}

::google::protobuf::uint8* TSpeakTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSpeakTime)
  // optional uint32 Channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional uint64 Time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSpeakTime)
  return target;
}

int TSpeakTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint64 Time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSpeakTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSpeakTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSpeakTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSpeakTime::MergeFrom(const TSpeakTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSpeakTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSpeakTime::CopyFrom(const TSpeakTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSpeakTime::IsInitialized() const {

  return true;
}

void TSpeakTime::Swap(TSpeakTime* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSpeakTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSpeakTime_descriptor_;
  metadata.reflection = TSpeakTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatTmpChannelInfo::kChannelFieldNumber;
const int TChatTmpChannelInfo::kChannelBranchIdFieldNumber;
const int TChatTmpChannelInfo::kMessageArrayFieldNumber;
#endif  // !_MSC_VER

TChatTmpChannelInfo::TChatTmpChannelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatTmpChannelInfo)
}

void TChatTmpChannelInfo::InitAsDefaultInstance() {
}

TChatTmpChannelInfo::TChatTmpChannelInfo(const TChatTmpChannelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatTmpChannelInfo)
}

void TChatTmpChannelInfo::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0u;
  channelbranchid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatTmpChannelInfo::~TChatTmpChannelInfo() {
  // @@protoc_insertion_point(destructor:pb.TChatTmpChannelInfo)
  SharedDtor();
}

void TChatTmpChannelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TChatTmpChannelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatTmpChannelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatTmpChannelInfo_descriptor_;
}

const TChatTmpChannelInfo& TChatTmpChannelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TChatTmpChannelInfo* TChatTmpChannelInfo::default_instance_ = NULL;

TChatTmpChannelInfo* TChatTmpChannelInfo::New() const {
  return new TChatTmpChannelInfo;
}

void TChatTmpChannelInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    channel_ = 0u;
    channelbranchid_ = GOOGLE_ULONGLONG(0);
  }
  messagearray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatTmpChannelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatTmpChannelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Channel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ChannelBranchId;
        break;
      }

      // optional uint64 ChannelBranchId = 2;
      case 2: {
        if (tag == 16) {
         parse_ChannelBranchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channelbranchid_)));
          set_has_channelbranchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MessageArray;
        break;
      }

      // repeated .pb.TChatMessage MessageArray = 3;
      case 3: {
        if (tag == 26) {
         parse_MessageArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messagearray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MessageArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatTmpChannelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatTmpChannelInfo)
  return false;
#undef DO_
}

void TChatTmpChannelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatTmpChannelInfo)
  // optional uint32 Channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional uint64 ChannelBranchId = 2;
  if (has_channelbranchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->channelbranchid(), output);
  }

  // repeated .pb.TChatMessage MessageArray = 3;
  for (int i = 0; i < this->messagearray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->messagearray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatTmpChannelInfo)
}

::google::protobuf::uint8* TChatTmpChannelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatTmpChannelInfo)
  // optional uint32 Channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional uint64 ChannelBranchId = 2;
  if (has_channelbranchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->channelbranchid(), target);
  }

  // repeated .pb.TChatMessage MessageArray = 3;
  for (int i = 0; i < this->messagearray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->messagearray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatTmpChannelInfo)
  return target;
}

int TChatTmpChannelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint64 ChannelBranchId = 2;
    if (has_channelbranchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channelbranchid());
    }

  }
  // repeated .pb.TChatMessage MessageArray = 3;
  total_size += 1 * this->messagearray_size();
  for (int i = 0; i < this->messagearray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messagearray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatTmpChannelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatTmpChannelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatTmpChannelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatTmpChannelInfo::MergeFrom(const TChatTmpChannelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  messagearray_.MergeFrom(from.messagearray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_channelbranchid()) {
      set_channelbranchid(from.channelbranchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatTmpChannelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatTmpChannelInfo::CopyFrom(const TChatTmpChannelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatTmpChannelInfo::IsInitialized() const {

  return true;
}

void TChatTmpChannelInfo::Swap(TChatTmpChannelInfo* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(channelbranchid_, other->channelbranchid_);
    messagearray_.Swap(&other->messagearray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatTmpChannelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatTmpChannelInfo_descriptor_;
  metadata.reflection = TChatTmpChannelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatGetInfoRsp::kMessageArrayFieldNumber;
const int TChatGetInfoRsp::kSpeakTimeArrayFieldNumber;
const int TChatGetInfoRsp::kBanInfoFieldNumber;
const int TChatGetInfoRsp::kUserInfoArrayFieldNumber;
const int TChatGetInfoRsp::kTmpChannelArrayFieldNumber;
const int TChatGetInfoRsp::kTemplateMsgCdArrayFieldNumber;
#endif  // !_MSC_VER

TChatGetInfoRsp::TChatGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatGetInfoRsp)
}

void TChatGetInfoRsp::InitAsDefaultInstance() {
  baninfo_ = const_cast< ::pb::TBanInfo*>(&::pb::TBanInfo::default_instance());
}

TChatGetInfoRsp::TChatGetInfoRsp(const TChatGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatGetInfoRsp)
}

void TChatGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  baninfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatGetInfoRsp::~TChatGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TChatGetInfoRsp)
  SharedDtor();
}

void TChatGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete baninfo_;
  }
}

void TChatGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatGetInfoRsp_descriptor_;
}

const TChatGetInfoRsp& TChatGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TChatGetInfoRsp* TChatGetInfoRsp::default_instance_ = NULL;

TChatGetInfoRsp* TChatGetInfoRsp::New() const {
  return new TChatGetInfoRsp;
}

void TChatGetInfoRsp::Clear() {
  if (has_baninfo()) {
    if (baninfo_ != NULL) baninfo_->::pb::TBanInfo::Clear();
  }
  messagearray_.Clear();
  speaktimearray_.Clear();
  userinfoarray_.Clear();
  tmpchannelarray_.Clear();
  templatemsgcdarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TChatMessage MessageArray = 1;
      case 1: {
        if (tag == 10) {
         parse_MessageArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messagearray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_MessageArray;
        if (input->ExpectTag(18)) goto parse_SpeakTimeArray;
        break;
      }

      // repeated .pb.TSpeakTime SpeakTimeArray = 2;
      case 2: {
        if (tag == 18) {
         parse_SpeakTimeArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speaktimearray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SpeakTimeArray;
        if (input->ExpectTag(26)) goto parse_BanInfo;
        break;
      }

      // optional .pb.TBanInfo BanInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_BanInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UserInfoArray;
        break;
      }

      // repeated .pb.TUserSimpleInfo UserInfoArray = 4;
      case 4: {
        if (tag == 34) {
         parse_UserInfoArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfoarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UserInfoArray;
        if (input->ExpectTag(42)) goto parse_TmpChannelArray;
        break;
      }

      // repeated .pb.TChatTmpChannelInfo TmpChannelArray = 5;
      case 5: {
        if (tag == 42) {
         parse_TmpChannelArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tmpchannelarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_TmpChannelArray;
        if (input->ExpectTag(50)) goto parse_TemplateMsgCdArray;
        break;
      }

      // repeated .pb.TChatTemplateMsgCdTime TemplateMsgCdArray = 6;
      case 6: {
        if (tag == 50) {
         parse_TemplateMsgCdArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_templatemsgcdarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_TemplateMsgCdArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatGetInfoRsp)
  return false;
#undef DO_
}

void TChatGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatGetInfoRsp)
  // repeated .pb.TChatMessage MessageArray = 1;
  for (int i = 0; i < this->messagearray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->messagearray(i), output);
  }

  // repeated .pb.TSpeakTime SpeakTimeArray = 2;
  for (int i = 0; i < this->speaktimearray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->speaktimearray(i), output);
  }

  // optional .pb.TBanInfo BanInfo = 3;
  if (has_baninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->baninfo(), output);
  }

  // repeated .pb.TUserSimpleInfo UserInfoArray = 4;
  for (int i = 0; i < this->userinfoarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userinfoarray(i), output);
  }

  // repeated .pb.TChatTmpChannelInfo TmpChannelArray = 5;
  for (int i = 0; i < this->tmpchannelarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tmpchannelarray(i), output);
  }

  // repeated .pb.TChatTemplateMsgCdTime TemplateMsgCdArray = 6;
  for (int i = 0; i < this->templatemsgcdarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->templatemsgcdarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatGetInfoRsp)
}

::google::protobuf::uint8* TChatGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatGetInfoRsp)
  // repeated .pb.TChatMessage MessageArray = 1;
  for (int i = 0; i < this->messagearray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->messagearray(i), target);
  }

  // repeated .pb.TSpeakTime SpeakTimeArray = 2;
  for (int i = 0; i < this->speaktimearray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->speaktimearray(i), target);
  }

  // optional .pb.TBanInfo BanInfo = 3;
  if (has_baninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->baninfo(), target);
  }

  // repeated .pb.TUserSimpleInfo UserInfoArray = 4;
  for (int i = 0; i < this->userinfoarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->userinfoarray(i), target);
  }

  // repeated .pb.TChatTmpChannelInfo TmpChannelArray = 5;
  for (int i = 0; i < this->tmpchannelarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tmpchannelarray(i), target);
  }

  // repeated .pb.TChatTemplateMsgCdTime TemplateMsgCdArray = 6;
  for (int i = 0; i < this->templatemsgcdarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->templatemsgcdarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatGetInfoRsp)
  return target;
}

int TChatGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .pb.TBanInfo BanInfo = 3;
    if (has_baninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baninfo());
    }

  }
  // repeated .pb.TChatMessage MessageArray = 1;
  total_size += 1 * this->messagearray_size();
  for (int i = 0; i < this->messagearray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messagearray(i));
  }

  // repeated .pb.TSpeakTime SpeakTimeArray = 2;
  total_size += 1 * this->speaktimearray_size();
  for (int i = 0; i < this->speaktimearray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speaktimearray(i));
  }

  // repeated .pb.TUserSimpleInfo UserInfoArray = 4;
  total_size += 1 * this->userinfoarray_size();
  for (int i = 0; i < this->userinfoarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfoarray(i));
  }

  // repeated .pb.TChatTmpChannelInfo TmpChannelArray = 5;
  total_size += 1 * this->tmpchannelarray_size();
  for (int i = 0; i < this->tmpchannelarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tmpchannelarray(i));
  }

  // repeated .pb.TChatTemplateMsgCdTime TemplateMsgCdArray = 6;
  total_size += 1 * this->templatemsgcdarray_size();
  for (int i = 0; i < this->templatemsgcdarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->templatemsgcdarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatGetInfoRsp::MergeFrom(const TChatGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  messagearray_.MergeFrom(from.messagearray_);
  speaktimearray_.MergeFrom(from.speaktimearray_);
  userinfoarray_.MergeFrom(from.userinfoarray_);
  tmpchannelarray_.MergeFrom(from.tmpchannelarray_);
  templatemsgcdarray_.MergeFrom(from.templatemsgcdarray_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_baninfo()) {
      mutable_baninfo()->::pb::TBanInfo::MergeFrom(from.baninfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatGetInfoRsp::CopyFrom(const TChatGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatGetInfoRsp::IsInitialized() const {

  return true;
}

void TChatGetInfoRsp::Swap(TChatGetInfoRsp* other) {
  if (other != this) {
    messagearray_.Swap(&other->messagearray_);
    speaktimearray_.Swap(&other->speaktimearray_);
    std::swap(baninfo_, other->baninfo_);
    userinfoarray_.Swap(&other->userinfoarray_);
    tmpchannelarray_.Swap(&other->tmpchannelarray_);
    templatemsgcdarray_.Swap(&other->templatemsgcdarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatGetInfoRsp_descriptor_;
  metadata.reflection = TChatGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatTemplateMsgCdTime::kMessageTidFieldNumber;
const int TChatTemplateMsgCdTime::kLastSendTimeFieldNumber;
#endif  // !_MSC_VER

TChatTemplateMsgCdTime::TChatTemplateMsgCdTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatTemplateMsgCdTime)
}

void TChatTemplateMsgCdTime::InitAsDefaultInstance() {
}

TChatTemplateMsgCdTime::TChatTemplateMsgCdTime(const TChatTemplateMsgCdTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatTemplateMsgCdTime)
}

void TChatTemplateMsgCdTime::SharedCtor() {
  _cached_size_ = 0;
  messagetid_ = 0u;
  lastsendtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatTemplateMsgCdTime::~TChatTemplateMsgCdTime() {
  // @@protoc_insertion_point(destructor:pb.TChatTemplateMsgCdTime)
  SharedDtor();
}

void TChatTemplateMsgCdTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TChatTemplateMsgCdTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatTemplateMsgCdTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatTemplateMsgCdTime_descriptor_;
}

const TChatTemplateMsgCdTime& TChatTemplateMsgCdTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TChatTemplateMsgCdTime* TChatTemplateMsgCdTime::default_instance_ = NULL;

TChatTemplateMsgCdTime* TChatTemplateMsgCdTime::New() const {
  return new TChatTemplateMsgCdTime;
}

void TChatTemplateMsgCdTime::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TChatTemplateMsgCdTime*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(lastsendtime_, messagetid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatTemplateMsgCdTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatTemplateMsgCdTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MessageTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messagetid_)));
          set_has_messagetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LastSendTime;
        break;
      }

      // optional uint64 LastSendTime = 2;
      case 2: {
        if (tag == 16) {
         parse_LastSendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastsendtime_)));
          set_has_lastsendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatTemplateMsgCdTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatTemplateMsgCdTime)
  return false;
#undef DO_
}

void TChatTemplateMsgCdTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatTemplateMsgCdTime)
  // optional uint32 MessageTid = 1;
  if (has_messagetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->messagetid(), output);
  }

  // optional uint64 LastSendTime = 2;
  if (has_lastsendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lastsendtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatTemplateMsgCdTime)
}

::google::protobuf::uint8* TChatTemplateMsgCdTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatTemplateMsgCdTime)
  // optional uint32 MessageTid = 1;
  if (has_messagetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->messagetid(), target);
  }

  // optional uint64 LastSendTime = 2;
  if (has_lastsendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lastsendtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatTemplateMsgCdTime)
  return target;
}

int TChatTemplateMsgCdTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MessageTid = 1;
    if (has_messagetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messagetid());
    }

    // optional uint64 LastSendTime = 2;
    if (has_lastsendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastsendtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatTemplateMsgCdTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatTemplateMsgCdTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatTemplateMsgCdTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatTemplateMsgCdTime::MergeFrom(const TChatTemplateMsgCdTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetid()) {
      set_messagetid(from.messagetid());
    }
    if (from.has_lastsendtime()) {
      set_lastsendtime(from.lastsendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatTemplateMsgCdTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatTemplateMsgCdTime::CopyFrom(const TChatTemplateMsgCdTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatTemplateMsgCdTime::IsInitialized() const {

  return true;
}

void TChatTemplateMsgCdTime::Swap(TChatTemplateMsgCdTime* other) {
  if (other != this) {
    std::swap(messagetid_, other->messagetid_);
    std::swap(lastsendtime_, other->lastsendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatTemplateMsgCdTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatTemplateMsgCdTime_descriptor_;
  metadata.reflection = TChatTemplateMsgCdTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatSendTemplateMsgReq::kMessageTidFieldNumber;
const int TChatSendTemplateMsgReq::kMessageArgArrayFieldNumber;
const int TChatSendTemplateMsgReq::kUidArrayFieldNumber;
const int TChatSendTemplateMsgReq::kChannelFieldNumber;
#endif  // !_MSC_VER

TChatSendTemplateMsgReq::TChatSendTemplateMsgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatSendTemplateMsgReq)
}

void TChatSendTemplateMsgReq::InitAsDefaultInstance() {
}

TChatSendTemplateMsgReq::TChatSendTemplateMsgReq(const TChatSendTemplateMsgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatSendTemplateMsgReq)
}

void TChatSendTemplateMsgReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  messagetid_ = 0u;
  channel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatSendTemplateMsgReq::~TChatSendTemplateMsgReq() {
  // @@protoc_insertion_point(destructor:pb.TChatSendTemplateMsgReq)
  SharedDtor();
}

void TChatSendTemplateMsgReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TChatSendTemplateMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatSendTemplateMsgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatSendTemplateMsgReq_descriptor_;
}

const TChatSendTemplateMsgReq& TChatSendTemplateMsgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TChatSendTemplateMsgReq* TChatSendTemplateMsgReq::default_instance_ = NULL;

TChatSendTemplateMsgReq* TChatSendTemplateMsgReq::New() const {
  return new TChatSendTemplateMsgReq;
}

void TChatSendTemplateMsgReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TChatSendTemplateMsgReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(messagetid_, channel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  messageargarray_.Clear();
  uidarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatSendTemplateMsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatSendTemplateMsgReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MessageTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messagetid_)));
          set_has_messagetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MessageArgArray;
        break;
      }

      // repeated string MessageArgArray = 2;
      case 2: {
        if (tag == 18) {
         parse_MessageArgArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_messageargarray()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messageargarray(this->messageargarray_size() - 1).data(),
            this->messageargarray(this->messageargarray_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messageargarray");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MessageArgArray;
        if (input->ExpectTag(24)) goto parse_UidArray;
        break;
      }

      // repeated uint64 UidArray = 3;
      case 3: {
        if (tag == 24) {
         parse_UidArray:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_uidarray())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uidarray())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_UidArray;
        if (input->ExpectTag(32)) goto parse_Channel;
        break;
      }

      // optional uint32 Channel = 4;
      case 4: {
        if (tag == 32) {
         parse_Channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatSendTemplateMsgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatSendTemplateMsgReq)
  return false;
#undef DO_
}

void TChatSendTemplateMsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatSendTemplateMsgReq)
  // optional uint32 MessageTid = 1;
  if (has_messagetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->messagetid(), output);
  }

  // repeated string MessageArgArray = 2;
  for (int i = 0; i < this->messageargarray_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->messageargarray(i).data(), this->messageargarray(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "messageargarray");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->messageargarray(i), output);
  }

  // repeated uint64 UidArray = 3;
  for (int i = 0; i < this->uidarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->uidarray(i), output);
  }

  // optional uint32 Channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatSendTemplateMsgReq)
}

::google::protobuf::uint8* TChatSendTemplateMsgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatSendTemplateMsgReq)
  // optional uint32 MessageTid = 1;
  if (has_messagetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->messagetid(), target);
  }

  // repeated string MessageArgArray = 2;
  for (int i = 0; i < this->messageargarray_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageargarray(i).data(), this->messageargarray(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messageargarray");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->messageargarray(i), target);
  }

  // repeated uint64 UidArray = 3;
  for (int i = 0; i < this->uidarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->uidarray(i), target);
  }

  // optional uint32 Channel = 4;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatSendTemplateMsgReq)
  return target;
}

int TChatSendTemplateMsgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MessageTid = 1;
    if (has_messagetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messagetid());
    }

    // optional uint32 Channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

  }
  // repeated string MessageArgArray = 2;
  total_size += 1 * this->messageargarray_size();
  for (int i = 0; i < this->messageargarray_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->messageargarray(i));
  }

  // repeated uint64 UidArray = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->uidarray_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uidarray(i));
    }
    total_size += 1 * this->uidarray_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatSendTemplateMsgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatSendTemplateMsgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatSendTemplateMsgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatSendTemplateMsgReq::MergeFrom(const TChatSendTemplateMsgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  messageargarray_.MergeFrom(from.messageargarray_);
  uidarray_.MergeFrom(from.uidarray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetid()) {
      set_messagetid(from.messagetid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatSendTemplateMsgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatSendTemplateMsgReq::CopyFrom(const TChatSendTemplateMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatSendTemplateMsgReq::IsInitialized() const {

  return true;
}

void TChatSendTemplateMsgReq::Swap(TChatSendTemplateMsgReq* other) {
  if (other != this) {
    std::swap(messagetid_, other->messagetid_);
    messageargarray_.Swap(&other->messageargarray_);
    uidarray_.Swap(&other->uidarray_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatSendTemplateMsgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatSendTemplateMsgReq_descriptor_;
  metadata.reflection = TChatSendTemplateMsgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatSendPersonalMsgReq::kReceiveUidFieldNumber;
const int TChatSendPersonalMsgReq::kMessageFieldNumber;
const int TChatSendPersonalMsgReq::kMessageTypeFieldNumber;
const int TChatSendPersonalMsgReq::kReceiverServerIdFieldNumber;
#endif  // !_MSC_VER

TChatSendPersonalMsgReq::TChatSendPersonalMsgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatSendPersonalMsgReq)
}

void TChatSendPersonalMsgReq::InitAsDefaultInstance() {
}

TChatSendPersonalMsgReq::TChatSendPersonalMsgReq(const TChatSendPersonalMsgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatSendPersonalMsgReq)
}

void TChatSendPersonalMsgReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  receiveuid_ = GOOGLE_ULONGLONG(0);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetype_ = 0u;
  receiverserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatSendPersonalMsgReq::~TChatSendPersonalMsgReq() {
  // @@protoc_insertion_point(destructor:pb.TChatSendPersonalMsgReq)
  SharedDtor();
}

void TChatSendPersonalMsgReq::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (receiverserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receiverserverid_;
  }
  if (this != default_instance_) {
  }
}

void TChatSendPersonalMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatSendPersonalMsgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatSendPersonalMsgReq_descriptor_;
}

const TChatSendPersonalMsgReq& TChatSendPersonalMsgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TChatSendPersonalMsgReq* TChatSendPersonalMsgReq::default_instance_ = NULL;

TChatSendPersonalMsgReq* TChatSendPersonalMsgReq::New() const {
  return new TChatSendPersonalMsgReq;
}

void TChatSendPersonalMsgReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    receiveuid_ = GOOGLE_ULONGLONG(0);
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    messagetype_ = 0u;
    if (has_receiverserverid()) {
      if (receiverserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        receiverserverid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatSendPersonalMsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatSendPersonalMsgReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ReceiveUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receiveuid_)));
          set_has_receiveuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Message;
        break;
      }

      // optional string Message = 2;
      case 2: {
        if (tag == 18) {
         parse_Message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MessageType;
        break;
      }

      // optional uint32 MessageType = 3;
      case 3: {
        if (tag == 24) {
         parse_MessageType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messagetype_)));
          set_has_messagetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ReceiverServerId;
        break;
      }

      // optional string ReceiverServerId = 4;
      case 4: {
        if (tag == 34) {
         parse_ReceiverServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiverserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->receiverserverid().data(), this->receiverserverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "receiverserverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatSendPersonalMsgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatSendPersonalMsgReq)
  return false;
#undef DO_
}

void TChatSendPersonalMsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatSendPersonalMsgReq)
  // optional uint64 ReceiveUid = 1;
  if (has_receiveuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->receiveuid(), output);
  }

  // optional string Message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional uint32 MessageType = 3;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->messagetype(), output);
  }

  // optional string ReceiverServerId = 4;
  if (has_receiverserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiverserverid().data(), this->receiverserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "receiverserverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->receiverserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatSendPersonalMsgReq)
}

::google::protobuf::uint8* TChatSendPersonalMsgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatSendPersonalMsgReq)
  // optional uint64 ReceiveUid = 1;
  if (has_receiveuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->receiveuid(), target);
  }

  // optional string Message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional uint32 MessageType = 3;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->messagetype(), target);
  }

  // optional string ReceiverServerId = 4;
  if (has_receiverserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->receiverserverid().data(), this->receiverserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "receiverserverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->receiverserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatSendPersonalMsgReq)
  return target;
}

int TChatSendPersonalMsgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ReceiveUid = 1;
    if (has_receiveuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receiveuid());
    }

    // optional string Message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 MessageType = 3;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messagetype());
    }

    // optional string ReceiverServerId = 4;
    if (has_receiverserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiverserverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatSendPersonalMsgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatSendPersonalMsgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatSendPersonalMsgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatSendPersonalMsgReq::MergeFrom(const TChatSendPersonalMsgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receiveuid()) {
      set_receiveuid(from.receiveuid());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_receiverserverid()) {
      set_receiverserverid(from.receiverserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatSendPersonalMsgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatSendPersonalMsgReq::CopyFrom(const TChatSendPersonalMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatSendPersonalMsgReq::IsInitialized() const {

  return true;
}

void TChatSendPersonalMsgReq::Swap(TChatSendPersonalMsgReq* other) {
  if (other != this) {
    std::swap(receiveuid_, other->receiveuid_);
    std::swap(message_, other->message_);
    std::swap(messagetype_, other->messagetype_);
    std::swap(receiverserverid_, other->receiverserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatSendPersonalMsgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatSendPersonalMsgReq_descriptor_;
  metadata.reflection = TChatSendPersonalMsgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatSendPersonalMsgRsp::kReceiverRefuseFieldNumber;
#endif  // !_MSC_VER

TChatSendPersonalMsgRsp::TChatSendPersonalMsgRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatSendPersonalMsgRsp)
}

void TChatSendPersonalMsgRsp::InitAsDefaultInstance() {
}

TChatSendPersonalMsgRsp::TChatSendPersonalMsgRsp(const TChatSendPersonalMsgRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatSendPersonalMsgRsp)
}

void TChatSendPersonalMsgRsp::SharedCtor() {
  _cached_size_ = 0;
  receiverrefuse_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatSendPersonalMsgRsp::~TChatSendPersonalMsgRsp() {
  // @@protoc_insertion_point(destructor:pb.TChatSendPersonalMsgRsp)
  SharedDtor();
}

void TChatSendPersonalMsgRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TChatSendPersonalMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatSendPersonalMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatSendPersonalMsgRsp_descriptor_;
}

const TChatSendPersonalMsgRsp& TChatSendPersonalMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TChatSendPersonalMsgRsp* TChatSendPersonalMsgRsp::default_instance_ = NULL;

TChatSendPersonalMsgRsp* TChatSendPersonalMsgRsp::New() const {
  return new TChatSendPersonalMsgRsp;
}

void TChatSendPersonalMsgRsp::Clear() {
  receiverrefuse_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatSendPersonalMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatSendPersonalMsgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ReceiverRefuse = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &receiverrefuse_)));
          set_has_receiverrefuse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatSendPersonalMsgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatSendPersonalMsgRsp)
  return false;
#undef DO_
}

void TChatSendPersonalMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatSendPersonalMsgRsp)
  // optional bool ReceiverRefuse = 1;
  if (has_receiverrefuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->receiverrefuse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatSendPersonalMsgRsp)
}

::google::protobuf::uint8* TChatSendPersonalMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatSendPersonalMsgRsp)
  // optional bool ReceiverRefuse = 1;
  if (has_receiverrefuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->receiverrefuse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatSendPersonalMsgRsp)
  return target;
}

int TChatSendPersonalMsgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool ReceiverRefuse = 1;
    if (has_receiverrefuse()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatSendPersonalMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatSendPersonalMsgRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatSendPersonalMsgRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatSendPersonalMsgRsp::MergeFrom(const TChatSendPersonalMsgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receiverrefuse()) {
      set_receiverrefuse(from.receiverrefuse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatSendPersonalMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatSendPersonalMsgRsp::CopyFrom(const TChatSendPersonalMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatSendPersonalMsgRsp::IsInitialized() const {

  return true;
}

void TChatSendPersonalMsgRsp::Swap(TChatSendPersonalMsgRsp* other) {
  if (other != this) {
    std::swap(receiverrefuse_, other->receiverrefuse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatSendPersonalMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatSendPersonalMsgRsp_descriptor_;
  metadata.reflection = TChatSendPersonalMsgRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatSendWorldMsgReq::kMessageFieldNumber;
const int TChatSendWorldMsgReq::kMessageTypeFieldNumber;
#endif  // !_MSC_VER

TChatSendWorldMsgReq::TChatSendWorldMsgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatSendWorldMsgReq)
}

void TChatSendWorldMsgReq::InitAsDefaultInstance() {
}

TChatSendWorldMsgReq::TChatSendWorldMsgReq(const TChatSendWorldMsgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatSendWorldMsgReq)
}

void TChatSendWorldMsgReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatSendWorldMsgReq::~TChatSendWorldMsgReq() {
  // @@protoc_insertion_point(destructor:pb.TChatSendWorldMsgReq)
  SharedDtor();
}

void TChatSendWorldMsgReq::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void TChatSendWorldMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatSendWorldMsgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatSendWorldMsgReq_descriptor_;
}

const TChatSendWorldMsgReq& TChatSendWorldMsgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TChatSendWorldMsgReq* TChatSendWorldMsgReq::default_instance_ = NULL;

TChatSendWorldMsgReq* TChatSendWorldMsgReq::New() const {
  return new TChatSendWorldMsgReq;
}

void TChatSendWorldMsgReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    messagetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatSendWorldMsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatSendWorldMsgReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MessageType;
        break;
      }

      // optional uint32 MessageType = 2;
      case 2: {
        if (tag == 16) {
         parse_MessageType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messagetype_)));
          set_has_messagetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatSendWorldMsgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatSendWorldMsgReq)
  return false;
#undef DO_
}

void TChatSendWorldMsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatSendWorldMsgReq)
  // optional string Message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional uint32 MessageType = 2;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->messagetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatSendWorldMsgReq)
}

::google::protobuf::uint8* TChatSendWorldMsgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatSendWorldMsgReq)
  // optional string Message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional uint32 MessageType = 2;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->messagetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatSendWorldMsgReq)
  return target;
}

int TChatSendWorldMsgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 MessageType = 2;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messagetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatSendWorldMsgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatSendWorldMsgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatSendWorldMsgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatSendWorldMsgReq::MergeFrom(const TChatSendWorldMsgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatSendWorldMsgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatSendWorldMsgReq::CopyFrom(const TChatSendWorldMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatSendWorldMsgReq::IsInitialized() const {

  return true;
}

void TChatSendWorldMsgReq::Swap(TChatSendWorldMsgReq* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(messagetype_, other->messagetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatSendWorldMsgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatSendWorldMsgReq_descriptor_;
  metadata.reflection = TChatSendWorldMsgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatSendGuildMsgReq::kMessageFieldNumber;
const int TChatSendGuildMsgReq::kMessageTypeFieldNumber;
#endif  // !_MSC_VER

TChatSendGuildMsgReq::TChatSendGuildMsgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatSendGuildMsgReq)
}

void TChatSendGuildMsgReq::InitAsDefaultInstance() {
}

TChatSendGuildMsgReq::TChatSendGuildMsgReq(const TChatSendGuildMsgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatSendGuildMsgReq)
}

void TChatSendGuildMsgReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatSendGuildMsgReq::~TChatSendGuildMsgReq() {
  // @@protoc_insertion_point(destructor:pb.TChatSendGuildMsgReq)
  SharedDtor();
}

void TChatSendGuildMsgReq::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void TChatSendGuildMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatSendGuildMsgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatSendGuildMsgReq_descriptor_;
}

const TChatSendGuildMsgReq& TChatSendGuildMsgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TChatSendGuildMsgReq* TChatSendGuildMsgReq::default_instance_ = NULL;

TChatSendGuildMsgReq* TChatSendGuildMsgReq::New() const {
  return new TChatSendGuildMsgReq;
}

void TChatSendGuildMsgReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    messagetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatSendGuildMsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatSendGuildMsgReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MessageType;
        break;
      }

      // optional uint32 MessageType = 2;
      case 2: {
        if (tag == 16) {
         parse_MessageType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messagetype_)));
          set_has_messagetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatSendGuildMsgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatSendGuildMsgReq)
  return false;
#undef DO_
}

void TChatSendGuildMsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatSendGuildMsgReq)
  // optional string Message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional uint32 MessageType = 2;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->messagetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatSendGuildMsgReq)
}

::google::protobuf::uint8* TChatSendGuildMsgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatSendGuildMsgReq)
  // optional string Message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional uint32 MessageType = 2;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->messagetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatSendGuildMsgReq)
  return target;
}

int TChatSendGuildMsgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 MessageType = 2;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messagetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatSendGuildMsgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatSendGuildMsgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatSendGuildMsgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatSendGuildMsgReq::MergeFrom(const TChatSendGuildMsgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatSendGuildMsgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatSendGuildMsgReq::CopyFrom(const TChatSendGuildMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatSendGuildMsgReq::IsInitialized() const {

  return true;
}

void TChatSendGuildMsgReq::Swap(TChatSendGuildMsgReq* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(messagetype_, other->messagetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatSendGuildMsgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatSendGuildMsgReq_descriptor_;
  metadata.reflection = TChatSendGuildMsgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatSendBroadCastReq::kItemTidFieldNumber;
const int TChatSendBroadCastReq::kMessageFieldNumber;
#endif  // !_MSC_VER

TChatSendBroadCastReq::TChatSendBroadCastReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatSendBroadCastReq)
}

void TChatSendBroadCastReq::InitAsDefaultInstance() {
}

TChatSendBroadCastReq::TChatSendBroadCastReq(const TChatSendBroadCastReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatSendBroadCastReq)
}

void TChatSendBroadCastReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemtid_ = 0u;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatSendBroadCastReq::~TChatSendBroadCastReq() {
  // @@protoc_insertion_point(destructor:pb.TChatSendBroadCastReq)
  SharedDtor();
}

void TChatSendBroadCastReq::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void TChatSendBroadCastReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatSendBroadCastReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatSendBroadCastReq_descriptor_;
}

const TChatSendBroadCastReq& TChatSendBroadCastReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TChatSendBroadCastReq* TChatSendBroadCastReq::default_instance_ = NULL;

TChatSendBroadCastReq* TChatSendBroadCastReq::New() const {
  return new TChatSendBroadCastReq;
}

void TChatSendBroadCastReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    itemtid_ = 0u;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatSendBroadCastReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatSendBroadCastReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ItemTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemtid_)));
          set_has_itemtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Message;
        break;
      }

      // optional string Message = 2;
      case 2: {
        if (tag == 18) {
         parse_Message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatSendBroadCastReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatSendBroadCastReq)
  return false;
#undef DO_
}

void TChatSendBroadCastReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatSendBroadCastReq)
  // optional uint32 ItemTid = 1;
  if (has_itemtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemtid(), output);
  }

  // optional string Message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatSendBroadCastReq)
}

::google::protobuf::uint8* TChatSendBroadCastReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatSendBroadCastReq)
  // optional uint32 ItemTid = 1;
  if (has_itemtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemtid(), target);
  }

  // optional string Message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatSendBroadCastReq)
  return target;
}

int TChatSendBroadCastReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemTid = 1;
    if (has_itemtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemtid());
    }

    // optional string Message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatSendBroadCastReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatSendBroadCastReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatSendBroadCastReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatSendBroadCastReq::MergeFrom(const TChatSendBroadCastReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemtid()) {
      set_itemtid(from.itemtid());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatSendBroadCastReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatSendBroadCastReq::CopyFrom(const TChatSendBroadCastReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatSendBroadCastReq::IsInitialized() const {

  return true;
}

void TChatSendBroadCastReq::Swap(TChatSendBroadCastReq* other) {
  if (other != this) {
    std::swap(itemtid_, other->itemtid_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatSendBroadCastReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatSendBroadCastReq_descriptor_;
  metadata.reflection = TChatSendBroadCastReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatUpdateChatInfoNotify::kBanInfoFieldNumber;
#endif  // !_MSC_VER

TChatUpdateChatInfoNotify::TChatUpdateChatInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatUpdateChatInfoNotify)
}

void TChatUpdateChatInfoNotify::InitAsDefaultInstance() {
  baninfo_ = const_cast< ::pb::TBanInfo*>(&::pb::TBanInfo::default_instance());
}

TChatUpdateChatInfoNotify::TChatUpdateChatInfoNotify(const TChatUpdateChatInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatUpdateChatInfoNotify)
}

void TChatUpdateChatInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  baninfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatUpdateChatInfoNotify::~TChatUpdateChatInfoNotify() {
  // @@protoc_insertion_point(destructor:pb.TChatUpdateChatInfoNotify)
  SharedDtor();
}

void TChatUpdateChatInfoNotify::SharedDtor() {
  if (this != default_instance_) {
    delete baninfo_;
  }
}

void TChatUpdateChatInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatUpdateChatInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatUpdateChatInfoNotify_descriptor_;
}

const TChatUpdateChatInfoNotify& TChatUpdateChatInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TChatUpdateChatInfoNotify* TChatUpdateChatInfoNotify::default_instance_ = NULL;

TChatUpdateChatInfoNotify* TChatUpdateChatInfoNotify::New() const {
  return new TChatUpdateChatInfoNotify;
}

void TChatUpdateChatInfoNotify::Clear() {
  if (has_baninfo()) {
    if (baninfo_ != NULL) baninfo_->::pb::TBanInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatUpdateChatInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatUpdateChatInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBanInfo BanInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatUpdateChatInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatUpdateChatInfoNotify)
  return false;
#undef DO_
}

void TChatUpdateChatInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatUpdateChatInfoNotify)
  // optional .pb.TBanInfo BanInfo = 1;
  if (has_baninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baninfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatUpdateChatInfoNotify)
}

::google::protobuf::uint8* TChatUpdateChatInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatUpdateChatInfoNotify)
  // optional .pb.TBanInfo BanInfo = 1;
  if (has_baninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baninfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatUpdateChatInfoNotify)
  return target;
}

int TChatUpdateChatInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBanInfo BanInfo = 1;
    if (has_baninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baninfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatUpdateChatInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatUpdateChatInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatUpdateChatInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatUpdateChatInfoNotify::MergeFrom(const TChatUpdateChatInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baninfo()) {
      mutable_baninfo()->::pb::TBanInfo::MergeFrom(from.baninfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatUpdateChatInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatUpdateChatInfoNotify::CopyFrom(const TChatUpdateChatInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatUpdateChatInfoNotify::IsInitialized() const {

  return true;
}

void TChatUpdateChatInfoNotify::Swap(TChatUpdateChatInfoNotify* other) {
  if (other != this) {
    std::swap(baninfo_, other->baninfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatUpdateChatInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatUpdateChatInfoNotify_descriptor_;
  metadata.reflection = TChatUpdateChatInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatNewMessageNotify::kMessageArrayFieldNumber;
#endif  // !_MSC_VER

TChatNewMessageNotify::TChatNewMessageNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatNewMessageNotify)
}

void TChatNewMessageNotify::InitAsDefaultInstance() {
}

TChatNewMessageNotify::TChatNewMessageNotify(const TChatNewMessageNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatNewMessageNotify)
}

void TChatNewMessageNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatNewMessageNotify::~TChatNewMessageNotify() {
  // @@protoc_insertion_point(destructor:pb.TChatNewMessageNotify)
  SharedDtor();
}

void TChatNewMessageNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TChatNewMessageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatNewMessageNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatNewMessageNotify_descriptor_;
}

const TChatNewMessageNotify& TChatNewMessageNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TChatNewMessageNotify* TChatNewMessageNotify::default_instance_ = NULL;

TChatNewMessageNotify* TChatNewMessageNotify::New() const {
  return new TChatNewMessageNotify;
}

void TChatNewMessageNotify::Clear() {
  messagearray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatNewMessageNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatNewMessageNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TChatMessage MessageArray = 1;
      case 1: {
        if (tag == 10) {
         parse_MessageArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messagearray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_MessageArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatNewMessageNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatNewMessageNotify)
  return false;
#undef DO_
}

void TChatNewMessageNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatNewMessageNotify)
  // repeated .pb.TChatMessage MessageArray = 1;
  for (int i = 0; i < this->messagearray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->messagearray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatNewMessageNotify)
}

::google::protobuf::uint8* TChatNewMessageNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatNewMessageNotify)
  // repeated .pb.TChatMessage MessageArray = 1;
  for (int i = 0; i < this->messagearray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->messagearray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatNewMessageNotify)
  return target;
}

int TChatNewMessageNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TChatMessage MessageArray = 1;
  total_size += 1 * this->messagearray_size();
  for (int i = 0; i < this->messagearray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messagearray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatNewMessageNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatNewMessageNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatNewMessageNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatNewMessageNotify::MergeFrom(const TChatNewMessageNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  messagearray_.MergeFrom(from.messagearray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatNewMessageNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatNewMessageNotify::CopyFrom(const TChatNewMessageNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatNewMessageNotify::IsInitialized() const {

  return true;
}

void TChatNewMessageNotify::Swap(TChatNewMessageNotify* other) {
  if (other != this) {
    messagearray_.Swap(&other->messagearray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatNewMessageNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatNewMessageNotify_descriptor_;
  metadata.reflection = TChatNewMessageNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatSendTmpChannelMessageReq::kChannelFieldNumber;
const int TChatSendTmpChannelMessageReq::kChannelBranchIdFieldNumber;
const int TChatSendTmpChannelMessageReq::kMessageFieldNumber;
const int TChatSendTmpChannelMessageReq::kMessageTypeFieldNumber;
const int TChatSendTmpChannelMessageReq::kExtraInfoFieldNumber;
#endif  // !_MSC_VER

TChatSendTmpChannelMessageReq::TChatSendTmpChannelMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatSendTmpChannelMessageReq)
}

void TChatSendTmpChannelMessageReq::InitAsDefaultInstance() {
}

TChatSendTmpChannelMessageReq::TChatSendTmpChannelMessageReq(const TChatSendTmpChannelMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatSendTmpChannelMessageReq)
}

void TChatSendTmpChannelMessageReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_ = 0u;
  channelbranchid_ = GOOGLE_ULONGLONG(0);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetype_ = 0u;
  extrainfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatSendTmpChannelMessageReq::~TChatSendTmpChannelMessageReq() {
  // @@protoc_insertion_point(destructor:pb.TChatSendTmpChannelMessageReq)
  SharedDtor();
}

void TChatSendTmpChannelMessageReq::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (extrainfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extrainfo_;
  }
  if (this != default_instance_) {
  }
}

void TChatSendTmpChannelMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatSendTmpChannelMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatSendTmpChannelMessageReq_descriptor_;
}

const TChatSendTmpChannelMessageReq& TChatSendTmpChannelMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TChatSendTmpChannelMessageReq* TChatSendTmpChannelMessageReq::default_instance_ = NULL;

TChatSendTmpChannelMessageReq* TChatSendTmpChannelMessageReq::New() const {
  return new TChatSendTmpChannelMessageReq;
}

void TChatSendTmpChannelMessageReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TChatSendTmpChannelMessageReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(channelbranchid_, messagetype_);
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    if (has_extrainfo()) {
      if (extrainfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extrainfo_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatSendTmpChannelMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatSendTmpChannelMessageReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Channel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ChannelBranchId;
        break;
      }

      // optional uint64 ChannelBranchId = 2;
      case 2: {
        if (tag == 16) {
         parse_ChannelBranchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channelbranchid_)));
          set_has_channelbranchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Message;
        break;
      }

      // optional string Message = 3;
      case 3: {
        if (tag == 26) {
         parse_Message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MessageType;
        break;
      }

      // optional uint32 MessageType = 4;
      case 4: {
        if (tag == 32) {
         parse_MessageType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messagetype_)));
          set_has_messagetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ExtraInfo;
        break;
      }

      // optional string ExtraInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_ExtraInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extrainfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extrainfo().data(), this->extrainfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extrainfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatSendTmpChannelMessageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatSendTmpChannelMessageReq)
  return false;
#undef DO_
}

void TChatSendTmpChannelMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatSendTmpChannelMessageReq)
  // optional uint32 Channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional uint64 ChannelBranchId = 2;
  if (has_channelbranchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->channelbranchid(), output);
  }

  // optional string Message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // optional uint32 MessageType = 4;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->messagetype(), output);
  }

  // optional string ExtraInfo = 5;
  if (has_extrainfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extrainfo().data(), this->extrainfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extrainfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->extrainfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatSendTmpChannelMessageReq)
}

::google::protobuf::uint8* TChatSendTmpChannelMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatSendTmpChannelMessageReq)
  // optional uint32 Channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional uint64 ChannelBranchId = 2;
  if (has_channelbranchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->channelbranchid(), target);
  }

  // optional string Message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // optional uint32 MessageType = 4;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->messagetype(), target);
  }

  // optional string ExtraInfo = 5;
  if (has_extrainfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extrainfo().data(), this->extrainfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extrainfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->extrainfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatSendTmpChannelMessageReq)
  return target;
}

int TChatSendTmpChannelMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint64 ChannelBranchId = 2;
    if (has_channelbranchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channelbranchid());
    }

    // optional string Message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 MessageType = 4;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messagetype());
    }

    // optional string ExtraInfo = 5;
    if (has_extrainfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extrainfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatSendTmpChannelMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatSendTmpChannelMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatSendTmpChannelMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatSendTmpChannelMessageReq::MergeFrom(const TChatSendTmpChannelMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_channelbranchid()) {
      set_channelbranchid(from.channelbranchid());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_extrainfo()) {
      set_extrainfo(from.extrainfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatSendTmpChannelMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatSendTmpChannelMessageReq::CopyFrom(const TChatSendTmpChannelMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatSendTmpChannelMessageReq::IsInitialized() const {

  return true;
}

void TChatSendTmpChannelMessageReq::Swap(TChatSendTmpChannelMessageReq* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(channelbranchid_, other->channelbranchid_);
    std::swap(message_, other->message_);
    std::swap(messagetype_, other->messagetype_);
    std::swap(extrainfo_, other->extrainfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatSendTmpChannelMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatSendTmpChannelMessageReq_descriptor_;
  metadata.reflection = TChatSendTmpChannelMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatNewTmpChannelNotify::kChannelFieldNumber;
const int TChatNewTmpChannelNotify::kChannelBranchIdFieldNumber;
#endif  // !_MSC_VER

TChatNewTmpChannelNotify::TChatNewTmpChannelNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatNewTmpChannelNotify)
}

void TChatNewTmpChannelNotify::InitAsDefaultInstance() {
}

TChatNewTmpChannelNotify::TChatNewTmpChannelNotify(const TChatNewTmpChannelNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatNewTmpChannelNotify)
}

void TChatNewTmpChannelNotify::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0u;
  channelbranchid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatNewTmpChannelNotify::~TChatNewTmpChannelNotify() {
  // @@protoc_insertion_point(destructor:pb.TChatNewTmpChannelNotify)
  SharedDtor();
}

void TChatNewTmpChannelNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TChatNewTmpChannelNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatNewTmpChannelNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatNewTmpChannelNotify_descriptor_;
}

const TChatNewTmpChannelNotify& TChatNewTmpChannelNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TChatNewTmpChannelNotify* TChatNewTmpChannelNotify::default_instance_ = NULL;

TChatNewTmpChannelNotify* TChatNewTmpChannelNotify::New() const {
  return new TChatNewTmpChannelNotify;
}

void TChatNewTmpChannelNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TChatNewTmpChannelNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(channelbranchid_, channel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatNewTmpChannelNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatNewTmpChannelNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Channel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ChannelBranchId;
        break;
      }

      // optional uint64 ChannelBranchId = 2;
      case 2: {
        if (tag == 16) {
         parse_ChannelBranchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channelbranchid_)));
          set_has_channelbranchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatNewTmpChannelNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatNewTmpChannelNotify)
  return false;
#undef DO_
}

void TChatNewTmpChannelNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatNewTmpChannelNotify)
  // optional uint32 Channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional uint64 ChannelBranchId = 2;
  if (has_channelbranchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->channelbranchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatNewTmpChannelNotify)
}

::google::protobuf::uint8* TChatNewTmpChannelNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatNewTmpChannelNotify)
  // optional uint32 Channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional uint64 ChannelBranchId = 2;
  if (has_channelbranchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->channelbranchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatNewTmpChannelNotify)
  return target;
}

int TChatNewTmpChannelNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint64 ChannelBranchId = 2;
    if (has_channelbranchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channelbranchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatNewTmpChannelNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatNewTmpChannelNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatNewTmpChannelNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatNewTmpChannelNotify::MergeFrom(const TChatNewTmpChannelNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_channelbranchid()) {
      set_channelbranchid(from.channelbranchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatNewTmpChannelNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatNewTmpChannelNotify::CopyFrom(const TChatNewTmpChannelNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatNewTmpChannelNotify::IsInitialized() const {

  return true;
}

void TChatNewTmpChannelNotify::Swap(TChatNewTmpChannelNotify* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(channelbranchid_, other->channelbranchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatNewTmpChannelNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatNewTmpChannelNotify_descriptor_;
  metadata.reflection = TChatNewTmpChannelNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatDeleteTmpChannelNotify::kChannelFieldNumber;
const int TChatDeleteTmpChannelNotify::kChannelBranchIdFieldNumber;
#endif  // !_MSC_VER

TChatDeleteTmpChannelNotify::TChatDeleteTmpChannelNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatDeleteTmpChannelNotify)
}

void TChatDeleteTmpChannelNotify::InitAsDefaultInstance() {
}

TChatDeleteTmpChannelNotify::TChatDeleteTmpChannelNotify(const TChatDeleteTmpChannelNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatDeleteTmpChannelNotify)
}

void TChatDeleteTmpChannelNotify::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0u;
  channelbranchid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatDeleteTmpChannelNotify::~TChatDeleteTmpChannelNotify() {
  // @@protoc_insertion_point(destructor:pb.TChatDeleteTmpChannelNotify)
  SharedDtor();
}

void TChatDeleteTmpChannelNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TChatDeleteTmpChannelNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatDeleteTmpChannelNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatDeleteTmpChannelNotify_descriptor_;
}

const TChatDeleteTmpChannelNotify& TChatDeleteTmpChannelNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TChatDeleteTmpChannelNotify* TChatDeleteTmpChannelNotify::default_instance_ = NULL;

TChatDeleteTmpChannelNotify* TChatDeleteTmpChannelNotify::New() const {
  return new TChatDeleteTmpChannelNotify;
}

void TChatDeleteTmpChannelNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TChatDeleteTmpChannelNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(channelbranchid_, channel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatDeleteTmpChannelNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatDeleteTmpChannelNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Channel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ChannelBranchId;
        break;
      }

      // optional uint64 ChannelBranchId = 2;
      case 2: {
        if (tag == 16) {
         parse_ChannelBranchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channelbranchid_)));
          set_has_channelbranchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatDeleteTmpChannelNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatDeleteTmpChannelNotify)
  return false;
#undef DO_
}

void TChatDeleteTmpChannelNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatDeleteTmpChannelNotify)
  // optional uint32 Channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional uint64 ChannelBranchId = 2;
  if (has_channelbranchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->channelbranchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatDeleteTmpChannelNotify)
}

::google::protobuf::uint8* TChatDeleteTmpChannelNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatDeleteTmpChannelNotify)
  // optional uint32 Channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional uint64 ChannelBranchId = 2;
  if (has_channelbranchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->channelbranchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatDeleteTmpChannelNotify)
  return target;
}

int TChatDeleteTmpChannelNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint64 ChannelBranchId = 2;
    if (has_channelbranchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channelbranchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatDeleteTmpChannelNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatDeleteTmpChannelNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatDeleteTmpChannelNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatDeleteTmpChannelNotify::MergeFrom(const TChatDeleteTmpChannelNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_channelbranchid()) {
      set_channelbranchid(from.channelbranchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatDeleteTmpChannelNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatDeleteTmpChannelNotify::CopyFrom(const TChatDeleteTmpChannelNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatDeleteTmpChannelNotify::IsInitialized() const {

  return true;
}

void TChatDeleteTmpChannelNotify::Swap(TChatDeleteTmpChannelNotify* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(channelbranchid_, other->channelbranchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatDeleteTmpChannelNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatDeleteTmpChannelNotify_descriptor_;
  metadata.reflection = TChatDeleteTmpChannelNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatTmpChannelMessageNotify::kMessageArrayFieldNumber;
#endif  // !_MSC_VER

TChatTmpChannelMessageNotify::TChatTmpChannelMessageNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatTmpChannelMessageNotify)
}

void TChatTmpChannelMessageNotify::InitAsDefaultInstance() {
}

TChatTmpChannelMessageNotify::TChatTmpChannelMessageNotify(const TChatTmpChannelMessageNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatTmpChannelMessageNotify)
}

void TChatTmpChannelMessageNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatTmpChannelMessageNotify::~TChatTmpChannelMessageNotify() {
  // @@protoc_insertion_point(destructor:pb.TChatTmpChannelMessageNotify)
  SharedDtor();
}

void TChatTmpChannelMessageNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TChatTmpChannelMessageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatTmpChannelMessageNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatTmpChannelMessageNotify_descriptor_;
}

const TChatTmpChannelMessageNotify& TChatTmpChannelMessageNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TChatTmpChannelMessageNotify* TChatTmpChannelMessageNotify::default_instance_ = NULL;

TChatTmpChannelMessageNotify* TChatTmpChannelMessageNotify::New() const {
  return new TChatTmpChannelMessageNotify;
}

void TChatTmpChannelMessageNotify::Clear() {
  messagearray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatTmpChannelMessageNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatTmpChannelMessageNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TChatMessage MessageArray = 1;
      case 1: {
        if (tag == 10) {
         parse_MessageArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messagearray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_MessageArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatTmpChannelMessageNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatTmpChannelMessageNotify)
  return false;
#undef DO_
}

void TChatTmpChannelMessageNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatTmpChannelMessageNotify)
  // repeated .pb.TChatMessage MessageArray = 1;
  for (int i = 0; i < this->messagearray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->messagearray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatTmpChannelMessageNotify)
}

::google::protobuf::uint8* TChatTmpChannelMessageNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatTmpChannelMessageNotify)
  // repeated .pb.TChatMessage MessageArray = 1;
  for (int i = 0; i < this->messagearray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->messagearray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatTmpChannelMessageNotify)
  return target;
}

int TChatTmpChannelMessageNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TChatMessage MessageArray = 1;
  total_size += 1 * this->messagearray_size();
  for (int i = 0; i < this->messagearray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messagearray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatTmpChannelMessageNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatTmpChannelMessageNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatTmpChannelMessageNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatTmpChannelMessageNotify::MergeFrom(const TChatTmpChannelMessageNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  messagearray_.MergeFrom(from.messagearray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatTmpChannelMessageNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatTmpChannelMessageNotify::CopyFrom(const TChatTmpChannelMessageNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatTmpChannelMessageNotify::IsInitialized() const {

  return true;
}

void TChatTmpChannelMessageNotify::Swap(TChatTmpChannelMessageNotify* other) {
  if (other != this) {
    messagearray_.Swap(&other->messagearray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatTmpChannelMessageNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatTmpChannelMessageNotify_descriptor_;
  metadata.reflection = TChatTmpChannelMessageNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatDeletePersonalMsgReq::kUidFieldNumber;
#endif  // !_MSC_VER

TChatDeletePersonalMsgReq::TChatDeletePersonalMsgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatDeletePersonalMsgReq)
}

void TChatDeletePersonalMsgReq::InitAsDefaultInstance() {
}

TChatDeletePersonalMsgReq::TChatDeletePersonalMsgReq(const TChatDeletePersonalMsgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatDeletePersonalMsgReq)
}

void TChatDeletePersonalMsgReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatDeletePersonalMsgReq::~TChatDeletePersonalMsgReq() {
  // @@protoc_insertion_point(destructor:pb.TChatDeletePersonalMsgReq)
  SharedDtor();
}

void TChatDeletePersonalMsgReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TChatDeletePersonalMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatDeletePersonalMsgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatDeletePersonalMsgReq_descriptor_;
}

const TChatDeletePersonalMsgReq& TChatDeletePersonalMsgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TChatDeletePersonalMsgReq* TChatDeletePersonalMsgReq::default_instance_ = NULL;

TChatDeletePersonalMsgReq* TChatDeletePersonalMsgReq::New() const {
  return new TChatDeletePersonalMsgReq;
}

void TChatDeletePersonalMsgReq::Clear() {
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatDeletePersonalMsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatDeletePersonalMsgReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatDeletePersonalMsgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatDeletePersonalMsgReq)
  return false;
#undef DO_
}

void TChatDeletePersonalMsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatDeletePersonalMsgReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatDeletePersonalMsgReq)
}

::google::protobuf::uint8* TChatDeletePersonalMsgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatDeletePersonalMsgReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatDeletePersonalMsgReq)
  return target;
}

int TChatDeletePersonalMsgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatDeletePersonalMsgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatDeletePersonalMsgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatDeletePersonalMsgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatDeletePersonalMsgReq::MergeFrom(const TChatDeletePersonalMsgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatDeletePersonalMsgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatDeletePersonalMsgReq::CopyFrom(const TChatDeletePersonalMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatDeletePersonalMsgReq::IsInitialized() const {

  return true;
}

void TChatDeletePersonalMsgReq::Swap(TChatDeletePersonalMsgReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatDeletePersonalMsgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatDeletePersonalMsgReq_descriptor_;
  metadata.reflection = TChatDeletePersonalMsgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatSendPersonalMsgByOtherServerReq::kSenderUserInfoFieldNumber;
const int TChatSendPersonalMsgByOtherServerReq::kSenderServerIdFieldNumber;
const int TChatSendPersonalMsgByOtherServerReq::kReceiverUidFieldNumber;
const int TChatSendPersonalMsgByOtherServerReq::kMessageFieldNumber;
const int TChatSendPersonalMsgByOtherServerReq::kMessageTypeFieldNumber;
#endif  // !_MSC_VER

TChatSendPersonalMsgByOtherServerReq::TChatSendPersonalMsgByOtherServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatSendPersonalMsgByOtherServerReq)
}

void TChatSendPersonalMsgByOtherServerReq::InitAsDefaultInstance() {
  senderuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TChatSendPersonalMsgByOtherServerReq::TChatSendPersonalMsgByOtherServerReq(const TChatSendPersonalMsgByOtherServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatSendPersonalMsgByOtherServerReq)
}

void TChatSendPersonalMsgByOtherServerReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  senderuserinfo_ = NULL;
  senderserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiveruid_ = GOOGLE_ULONGLONG(0);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatSendPersonalMsgByOtherServerReq::~TChatSendPersonalMsgByOtherServerReq() {
  // @@protoc_insertion_point(destructor:pb.TChatSendPersonalMsgByOtherServerReq)
  SharedDtor();
}

void TChatSendPersonalMsgByOtherServerReq::SharedDtor() {
  if (senderserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete senderserverid_;
  }
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
    delete senderuserinfo_;
  }
}

void TChatSendPersonalMsgByOtherServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatSendPersonalMsgByOtherServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatSendPersonalMsgByOtherServerReq_descriptor_;
}

const TChatSendPersonalMsgByOtherServerReq& TChatSendPersonalMsgByOtherServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChat_2eproto();
  return *default_instance_;
}

TChatSendPersonalMsgByOtherServerReq* TChatSendPersonalMsgByOtherServerReq::default_instance_ = NULL;

TChatSendPersonalMsgByOtherServerReq* TChatSendPersonalMsgByOtherServerReq::New() const {
  return new TChatSendPersonalMsgByOtherServerReq;
}

void TChatSendPersonalMsgByOtherServerReq::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_senderuserinfo()) {
      if (senderuserinfo_ != NULL) senderuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_senderserverid()) {
      if (senderserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        senderserverid_->clear();
      }
    }
    receiveruid_ = GOOGLE_ULONGLONG(0);
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    messagetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatSendPersonalMsgByOtherServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatSendPersonalMsgByOtherServerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo SenderUserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_senderuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SenderServerId;
        break;
      }

      // optional string SenderServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_SenderServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senderserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->senderserverid().data(), this->senderserverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "senderserverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ReceiverUid;
        break;
      }

      // optional uint64 ReceiverUid = 3;
      case 3: {
        if (tag == 24) {
         parse_ReceiverUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receiveruid_)));
          set_has_receiveruid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Message;
        break;
      }

      // optional string Message = 4;
      case 4: {
        if (tag == 34) {
         parse_Message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MessageType;
        break;
      }

      // optional uint32 MessageType = 5;
      case 5: {
        if (tag == 40) {
         parse_MessageType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messagetype_)));
          set_has_messagetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatSendPersonalMsgByOtherServerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatSendPersonalMsgByOtherServerReq)
  return false;
#undef DO_
}

void TChatSendPersonalMsgByOtherServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatSendPersonalMsgByOtherServerReq)
  // optional .pb.TUserSimpleInfo SenderUserInfo = 1;
  if (has_senderuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->senderuserinfo(), output);
  }

  // optional string SenderServerId = 2;
  if (has_senderserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->senderserverid().data(), this->senderserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "senderserverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->senderserverid(), output);
  }

  // optional uint64 ReceiverUid = 3;
  if (has_receiveruid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->receiveruid(), output);
  }

  // optional string Message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->message(), output);
  }

  // optional uint32 MessageType = 5;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->messagetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatSendPersonalMsgByOtherServerReq)
}

::google::protobuf::uint8* TChatSendPersonalMsgByOtherServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatSendPersonalMsgByOtherServerReq)
  // optional .pb.TUserSimpleInfo SenderUserInfo = 1;
  if (has_senderuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->senderuserinfo(), target);
  }

  // optional string SenderServerId = 2;
  if (has_senderserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->senderserverid().data(), this->senderserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "senderserverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->senderserverid(), target);
  }

  // optional uint64 ReceiverUid = 3;
  if (has_receiveruid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->receiveruid(), target);
  }

  // optional string Message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  // optional uint32 MessageType = 5;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->messagetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatSendPersonalMsgByOtherServerReq)
  return target;
}

int TChatSendPersonalMsgByOtherServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo SenderUserInfo = 1;
    if (has_senderuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->senderuserinfo());
    }

    // optional string SenderServerId = 2;
    if (has_senderserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->senderserverid());
    }

    // optional uint64 ReceiverUid = 3;
    if (has_receiveruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receiveruid());
    }

    // optional string Message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 MessageType = 5;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->messagetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatSendPersonalMsgByOtherServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatSendPersonalMsgByOtherServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatSendPersonalMsgByOtherServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatSendPersonalMsgByOtherServerReq::MergeFrom(const TChatSendPersonalMsgByOtherServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_senderuserinfo()) {
      mutable_senderuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.senderuserinfo());
    }
    if (from.has_senderserverid()) {
      set_senderserverid(from.senderserverid());
    }
    if (from.has_receiveruid()) {
      set_receiveruid(from.receiveruid());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatSendPersonalMsgByOtherServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatSendPersonalMsgByOtherServerReq::CopyFrom(const TChatSendPersonalMsgByOtherServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatSendPersonalMsgByOtherServerReq::IsInitialized() const {

  return true;
}

void TChatSendPersonalMsgByOtherServerReq::Swap(TChatSendPersonalMsgByOtherServerReq* other) {
  if (other != this) {
    std::swap(senderuserinfo_, other->senderuserinfo_);
    std::swap(senderserverid_, other->senderserverid_);
    std::swap(receiveruid_, other->receiveruid_);
    std::swap(message_, other->message_);
    std::swap(messagetype_, other->messagetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatSendPersonalMsgByOtherServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatSendPersonalMsgByOtherServerReq_descriptor_;
  metadata.reflection = TChatSendPersonalMsgByOtherServerReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
