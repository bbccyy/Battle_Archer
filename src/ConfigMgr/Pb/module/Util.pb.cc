// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/Util.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/Util.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* PbVector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbVector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbVector3_Int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbVector3_Int_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbQuaternion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbQuaternion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbVector2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbVector2_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbVector2_Int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbVector2_Int_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRect_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRect_Int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRect_Int_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fUtil_2eproto() {
  protobuf_AddDesc_module_2fUtil_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/Util.proto");
  GOOGLE_CHECK(file != NULL);
  PbVector3_descriptor_ = file->message_type(0);
  static const int PbVector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVector3, z_),
  };
  PbVector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbVector3_descriptor_,
      PbVector3::default_instance_,
      PbVector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbVector3));
  PbVector3_Int_descriptor_ = file->message_type(1);
  static const int PbVector3_Int_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVector3_Int, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVector3_Int, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVector3_Int, z_),
  };
  PbVector3_Int_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbVector3_Int_descriptor_,
      PbVector3_Int::default_instance_,
      PbVector3_Int_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVector3_Int, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVector3_Int, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbVector3_Int));
  PbQuaternion_descriptor_ = file->message_type(2);
  static const int PbQuaternion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbQuaternion, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbQuaternion, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbQuaternion, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbQuaternion, z_),
  };
  PbQuaternion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbQuaternion_descriptor_,
      PbQuaternion::default_instance_,
      PbQuaternion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbQuaternion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbQuaternion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbQuaternion));
  PbVector2_descriptor_ = file->message_type(3);
  static const int PbVector2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVector2, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVector2, y_),
  };
  PbVector2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbVector2_descriptor_,
      PbVector2::default_instance_,
      PbVector2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVector2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVector2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbVector2));
  PbVector2_Int_descriptor_ = file->message_type(4);
  static const int PbVector2_Int_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVector2_Int, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVector2_Int, y_),
  };
  PbVector2_Int_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbVector2_Int_descriptor_,
      PbVector2_Int::default_instance_,
      PbVector2_Int_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVector2_Int, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbVector2_Int, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbVector2_Int));
  PbRect_descriptor_ = file->message_type(5);
  static const int PbRect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRect, minpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRect, maxpoint_),
  };
  PbRect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRect_descriptor_,
      PbRect::default_instance_,
      PbRect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRect));
  PbRect_Int_descriptor_ = file->message_type(6);
  static const int PbRect_Int_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRect_Int, minpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRect_Int, maxpoint_),
  };
  PbRect_Int_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRect_Int_descriptor_,
      PbRect_Int::default_instance_,
      PbRect_Int_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRect_Int, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRect_Int, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRect_Int));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fUtil_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbVector3_descriptor_, &PbVector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbVector3_Int_descriptor_, &PbVector3_Int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbQuaternion_descriptor_, &PbQuaternion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbVector2_descriptor_, &PbVector2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbVector2_Int_descriptor_, &PbVector2_Int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRect_descriptor_, &PbRect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRect_Int_descriptor_, &PbRect_Int::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fUtil_2eproto() {
  delete PbVector3::default_instance_;
  delete PbVector3_reflection_;
  delete PbVector3_Int::default_instance_;
  delete PbVector3_Int_reflection_;
  delete PbQuaternion::default_instance_;
  delete PbQuaternion_reflection_;
  delete PbVector2::default_instance_;
  delete PbVector2_reflection_;
  delete PbVector2_Int::default_instance_;
  delete PbVector2_Int_reflection_;
  delete PbRect::default_instance_;
  delete PbRect_reflection_;
  delete PbRect_Int::default_instance_;
  delete PbRect_Int_reflection_;
}

void protobuf_AddDesc_module_2fUtil_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021module/Util.proto\022\002pb\",\n\tPbVector3\022\t\n\001"
    "x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"0\n\rPbVecto"
    "r3_Int\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001z\030\003 \001(\005\""
    ":\n\014PbQuaternion\022\t\n\001w\030\001 \002(\002\022\t\n\001x\030\002 \002(\002\022\t\n"
    "\001y\030\003 \002(\002\022\t\n\001z\030\004 \002(\002\"!\n\tPbVector2\022\t\n\001x\030\001 "
    "\002(\002\022\t\n\001y\030\002 \002(\002\"%\n\rPbVector2_Int\022\t\n\001x\030\001 \001"
    "(\005\022\t\n\001y\030\002 \001(\005\"J\n\006PbRect\022\037\n\010MinPoint\030\001 \002("
    "\0132\r.pb.PbVector2\022\037\n\010MaxPoint\030\002 \002(\0132\r.pb."
    "PbVector2\"V\n\nPbRect_Int\022#\n\010MinPoint\030\001 \001("
    "\0132\021.pb.PbVector2_Int\022#\n\010MaxPoint\030\002 \001(\0132\021"
    ".pb.PbVector2_Int", 417);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/Util.proto", &protobuf_RegisterTypes);
  PbVector3::default_instance_ = new PbVector3();
  PbVector3_Int::default_instance_ = new PbVector3_Int();
  PbQuaternion::default_instance_ = new PbQuaternion();
  PbVector2::default_instance_ = new PbVector2();
  PbVector2_Int::default_instance_ = new PbVector2_Int();
  PbRect::default_instance_ = new PbRect();
  PbRect_Int::default_instance_ = new PbRect_Int();
  PbVector3::default_instance_->InitAsDefaultInstance();
  PbVector3_Int::default_instance_->InitAsDefaultInstance();
  PbQuaternion::default_instance_->InitAsDefaultInstance();
  PbVector2::default_instance_->InitAsDefaultInstance();
  PbVector2_Int::default_instance_->InitAsDefaultInstance();
  PbRect::default_instance_->InitAsDefaultInstance();
  PbRect_Int::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fUtil_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fUtil_2eproto {
  StaticDescriptorInitializer_module_2fUtil_2eproto() {
    protobuf_AddDesc_module_2fUtil_2eproto();
  }
} static_descriptor_initializer_module_2fUtil_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PbVector3::kXFieldNumber;
const int PbVector3::kYFieldNumber;
const int PbVector3::kZFieldNumber;
#endif  // !_MSC_VER

PbVector3::PbVector3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PbVector3)
}

void PbVector3::InitAsDefaultInstance() {
}

PbVector3::PbVector3(const PbVector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PbVector3)
}

void PbVector3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbVector3::~PbVector3() {
  // @@protoc_insertion_point(destructor:pb.PbVector3)
  SharedDtor();
}

void PbVector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbVector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbVector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbVector3_descriptor_;
}

const PbVector3& PbVector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fUtil_2eproto();
  return *default_instance_;
}

PbVector3* PbVector3::default_instance_ = NULL;

PbVector3* PbVector3::New() const {
  return new PbVector3;
}

void PbVector3::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbVector3*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbVector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PbVector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PbVector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PbVector3)
  return false;
#undef DO_
}

void PbVector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PbVector3)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PbVector3)
}

::google::protobuf::uint8* PbVector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PbVector3)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PbVector3)
  return target;
}

int PbVector3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbVector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbVector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbVector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbVector3::MergeFrom(const PbVector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbVector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbVector3::CopyFrom(const PbVector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbVector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PbVector3::Swap(PbVector3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbVector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbVector3_descriptor_;
  metadata.reflection = PbVector3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbVector3_Int::kXFieldNumber;
const int PbVector3_Int::kYFieldNumber;
const int PbVector3_Int::kZFieldNumber;
#endif  // !_MSC_VER

PbVector3_Int::PbVector3_Int()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PbVector3_Int)
}

void PbVector3_Int::InitAsDefaultInstance() {
}

PbVector3_Int::PbVector3_Int(const PbVector3_Int& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PbVector3_Int)
}

void PbVector3_Int::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbVector3_Int::~PbVector3_Int() {
  // @@protoc_insertion_point(destructor:pb.PbVector3_Int)
  SharedDtor();
}

void PbVector3_Int::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbVector3_Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbVector3_Int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbVector3_Int_descriptor_;
}

const PbVector3_Int& PbVector3_Int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fUtil_2eproto();
  return *default_instance_;
}

PbVector3_Int* PbVector3_Int::default_instance_ = NULL;

PbVector3_Int* PbVector3_Int::New() const {
  return new PbVector3_Int;
}

void PbVector3_Int::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbVector3_Int*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbVector3_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PbVector3_Int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PbVector3_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PbVector3_Int)
  return false;
#undef DO_
}

void PbVector3_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PbVector3_Int)
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PbVector3_Int)
}

::google::protobuf::uint8* PbVector3_Int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PbVector3_Int)
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PbVector3_Int)
  return target;
}

int PbVector3_Int::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbVector3_Int::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbVector3_Int* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbVector3_Int*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbVector3_Int::MergeFrom(const PbVector3_Int& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbVector3_Int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbVector3_Int::CopyFrom(const PbVector3_Int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbVector3_Int::IsInitialized() const {

  return true;
}

void PbVector3_Int::Swap(PbVector3_Int* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbVector3_Int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbVector3_Int_descriptor_;
  metadata.reflection = PbVector3_Int_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbQuaternion::kWFieldNumber;
const int PbQuaternion::kXFieldNumber;
const int PbQuaternion::kYFieldNumber;
const int PbQuaternion::kZFieldNumber;
#endif  // !_MSC_VER

PbQuaternion::PbQuaternion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PbQuaternion)
}

void PbQuaternion::InitAsDefaultInstance() {
}

PbQuaternion::PbQuaternion(const PbQuaternion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PbQuaternion)
}

void PbQuaternion::SharedCtor() {
  _cached_size_ = 0;
  w_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbQuaternion::~PbQuaternion() {
  // @@protoc_insertion_point(destructor:pb.PbQuaternion)
  SharedDtor();
}

void PbQuaternion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbQuaternion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbQuaternion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbQuaternion_descriptor_;
}

const PbQuaternion& PbQuaternion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fUtil_2eproto();
  return *default_instance_;
}

PbQuaternion* PbQuaternion::default_instance_ = NULL;

PbQuaternion* PbQuaternion::New() const {
  return new PbQuaternion;
}

void PbQuaternion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbQuaternion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(w_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbQuaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PbQuaternion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float w = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // required float x = 2;
      case 2: {
        if (tag == 21) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // required float y = 3;
      case 3: {
        if (tag == 29) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_z;
        break;
      }

      // required float z = 4;
      case 4: {
        if (tag == 37) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PbQuaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PbQuaternion)
  return false;
#undef DO_
}

void PbQuaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PbQuaternion)
  // required float w = 1;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->w(), output);
  }

  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // required float z = 4;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PbQuaternion)
}

::google::protobuf::uint8* PbQuaternion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PbQuaternion)
  // required float w = 1;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->w(), target);
  }

  // required float x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // required float y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // required float z = 4;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PbQuaternion)
  return target;
}

int PbQuaternion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float w = 1;
    if (has_w()) {
      total_size += 1 + 4;
    }

    // required float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 4;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbQuaternion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbQuaternion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbQuaternion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbQuaternion::MergeFrom(const PbQuaternion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbQuaternion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbQuaternion::CopyFrom(const PbQuaternion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbQuaternion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PbQuaternion::Swap(PbQuaternion* other) {
  if (other != this) {
    std::swap(w_, other->w_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbQuaternion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbQuaternion_descriptor_;
  metadata.reflection = PbQuaternion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbVector2::kXFieldNumber;
const int PbVector2::kYFieldNumber;
#endif  // !_MSC_VER

PbVector2::PbVector2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PbVector2)
}

void PbVector2::InitAsDefaultInstance() {
}

PbVector2::PbVector2(const PbVector2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PbVector2)
}

void PbVector2::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbVector2::~PbVector2() {
  // @@protoc_insertion_point(destructor:pb.PbVector2)
  SharedDtor();
}

void PbVector2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbVector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbVector2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbVector2_descriptor_;
}

const PbVector2& PbVector2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fUtil_2eproto();
  return *default_instance_;
}

PbVector2* PbVector2::default_instance_ = NULL;

PbVector2* PbVector2::New() const {
  return new PbVector2;
}

void PbVector2::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbVector2*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbVector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PbVector2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PbVector2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PbVector2)
  return false;
#undef DO_
}

void PbVector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PbVector2)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PbVector2)
}

::google::protobuf::uint8* PbVector2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PbVector2)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PbVector2)
  return target;
}

int PbVector2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbVector2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbVector2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbVector2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbVector2::MergeFrom(const PbVector2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbVector2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbVector2::CopyFrom(const PbVector2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbVector2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PbVector2::Swap(PbVector2* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbVector2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbVector2_descriptor_;
  metadata.reflection = PbVector2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbVector2_Int::kXFieldNumber;
const int PbVector2_Int::kYFieldNumber;
#endif  // !_MSC_VER

PbVector2_Int::PbVector2_Int()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PbVector2_Int)
}

void PbVector2_Int::InitAsDefaultInstance() {
}

PbVector2_Int::PbVector2_Int(const PbVector2_Int& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PbVector2_Int)
}

void PbVector2_Int::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbVector2_Int::~PbVector2_Int() {
  // @@protoc_insertion_point(destructor:pb.PbVector2_Int)
  SharedDtor();
}

void PbVector2_Int::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbVector2_Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbVector2_Int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbVector2_Int_descriptor_;
}

const PbVector2_Int& PbVector2_Int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fUtil_2eproto();
  return *default_instance_;
}

PbVector2_Int* PbVector2_Int::default_instance_ = NULL;

PbVector2_Int* PbVector2_Int::New() const {
  return new PbVector2_Int;
}

void PbVector2_Int::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbVector2_Int*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbVector2_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PbVector2_Int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PbVector2_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PbVector2_Int)
  return false;
#undef DO_
}

void PbVector2_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PbVector2_Int)
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PbVector2_Int)
}

::google::protobuf::uint8* PbVector2_Int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PbVector2_Int)
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PbVector2_Int)
  return target;
}

int PbVector2_Int::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbVector2_Int::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbVector2_Int* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbVector2_Int*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbVector2_Int::MergeFrom(const PbVector2_Int& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbVector2_Int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbVector2_Int::CopyFrom(const PbVector2_Int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbVector2_Int::IsInitialized() const {

  return true;
}

void PbVector2_Int::Swap(PbVector2_Int* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbVector2_Int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbVector2_Int_descriptor_;
  metadata.reflection = PbVector2_Int_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRect::kMinPointFieldNumber;
const int PbRect::kMaxPointFieldNumber;
#endif  // !_MSC_VER

PbRect::PbRect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PbRect)
}

void PbRect::InitAsDefaultInstance() {
  minpoint_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
  maxpoint_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
}

PbRect::PbRect(const PbRect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PbRect)
}

void PbRect::SharedCtor() {
  _cached_size_ = 0;
  minpoint_ = NULL;
  maxpoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRect::~PbRect() {
  // @@protoc_insertion_point(destructor:pb.PbRect)
  SharedDtor();
}

void PbRect::SharedDtor() {
  if (this != default_instance_) {
    delete minpoint_;
    delete maxpoint_;
  }
}

void PbRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRect_descriptor_;
}

const PbRect& PbRect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fUtil_2eproto();
  return *default_instance_;
}

PbRect* PbRect::default_instance_ = NULL;

PbRect* PbRect::New() const {
  return new PbRect;
}

void PbRect::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_minpoint()) {
      if (minpoint_ != NULL) minpoint_->::pb::PbVector2::Clear();
    }
    if (has_maxpoint()) {
      if (maxpoint_ != NULL) maxpoint_->::pb::PbVector2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PbRect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.PbVector2 MinPoint = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_minpoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MaxPoint;
        break;
      }

      // required .pb.PbVector2 MaxPoint = 2;
      case 2: {
        if (tag == 18) {
         parse_MaxPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maxpoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PbRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PbRect)
  return false;
#undef DO_
}

void PbRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PbRect)
  // required .pb.PbVector2 MinPoint = 1;
  if (has_minpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->minpoint(), output);
  }

  // required .pb.PbVector2 MaxPoint = 2;
  if (has_maxpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->maxpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PbRect)
}

::google::protobuf::uint8* PbRect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PbRect)
  // required .pb.PbVector2 MinPoint = 1;
  if (has_minpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->minpoint(), target);
  }

  // required .pb.PbVector2 MaxPoint = 2;
  if (has_maxpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->maxpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PbRect)
  return target;
}

int PbRect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.PbVector2 MinPoint = 1;
    if (has_minpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->minpoint());
    }

    // required .pb.PbVector2 MaxPoint = 2;
    if (has_maxpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maxpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRect::MergeFrom(const PbRect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minpoint()) {
      mutable_minpoint()->::pb::PbVector2::MergeFrom(from.minpoint());
    }
    if (from.has_maxpoint()) {
      mutable_maxpoint()->::pb::PbVector2::MergeFrom(from.maxpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRect::CopyFrom(const PbRect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_minpoint()) {
    if (!this->minpoint().IsInitialized()) return false;
  }
  if (has_maxpoint()) {
    if (!this->maxpoint().IsInitialized()) return false;
  }
  return true;
}

void PbRect::Swap(PbRect* other) {
  if (other != this) {
    std::swap(minpoint_, other->minpoint_);
    std::swap(maxpoint_, other->maxpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRect_descriptor_;
  metadata.reflection = PbRect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRect_Int::kMinPointFieldNumber;
const int PbRect_Int::kMaxPointFieldNumber;
#endif  // !_MSC_VER

PbRect_Int::PbRect_Int()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PbRect_Int)
}

void PbRect_Int::InitAsDefaultInstance() {
  minpoint_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
  maxpoint_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
}

PbRect_Int::PbRect_Int(const PbRect_Int& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PbRect_Int)
}

void PbRect_Int::SharedCtor() {
  _cached_size_ = 0;
  minpoint_ = NULL;
  maxpoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRect_Int::~PbRect_Int() {
  // @@protoc_insertion_point(destructor:pb.PbRect_Int)
  SharedDtor();
}

void PbRect_Int::SharedDtor() {
  if (this != default_instance_) {
    delete minpoint_;
    delete maxpoint_;
  }
}

void PbRect_Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRect_Int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRect_Int_descriptor_;
}

const PbRect_Int& PbRect_Int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fUtil_2eproto();
  return *default_instance_;
}

PbRect_Int* PbRect_Int::default_instance_ = NULL;

PbRect_Int* PbRect_Int::New() const {
  return new PbRect_Int;
}

void PbRect_Int::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_minpoint()) {
      if (minpoint_ != NULL) minpoint_->::pb::PbVector2_Int::Clear();
    }
    if (has_maxpoint()) {
      if (maxpoint_ != NULL) maxpoint_->::pb::PbVector2_Int::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRect_Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PbRect_Int)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.PbVector2_Int MinPoint = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_minpoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MaxPoint;
        break;
      }

      // optional .pb.PbVector2_Int MaxPoint = 2;
      case 2: {
        if (tag == 18) {
         parse_MaxPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maxpoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PbRect_Int)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PbRect_Int)
  return false;
#undef DO_
}

void PbRect_Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PbRect_Int)
  // optional .pb.PbVector2_Int MinPoint = 1;
  if (has_minpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->minpoint(), output);
  }

  // optional .pb.PbVector2_Int MaxPoint = 2;
  if (has_maxpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->maxpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PbRect_Int)
}

::google::protobuf::uint8* PbRect_Int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PbRect_Int)
  // optional .pb.PbVector2_Int MinPoint = 1;
  if (has_minpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->minpoint(), target);
  }

  // optional .pb.PbVector2_Int MaxPoint = 2;
  if (has_maxpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->maxpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PbRect_Int)
  return target;
}

int PbRect_Int::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.PbVector2_Int MinPoint = 1;
    if (has_minpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->minpoint());
    }

    // optional .pb.PbVector2_Int MaxPoint = 2;
    if (has_maxpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maxpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRect_Int::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRect_Int* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRect_Int*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRect_Int::MergeFrom(const PbRect_Int& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minpoint()) {
      mutable_minpoint()->::pb::PbVector2_Int::MergeFrom(from.minpoint());
    }
    if (from.has_maxpoint()) {
      mutable_maxpoint()->::pb::PbVector2_Int::MergeFrom(from.maxpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRect_Int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRect_Int::CopyFrom(const PbRect_Int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRect_Int::IsInitialized() const {

  return true;
}

void PbRect_Int::Swap(PbRect_Int* other) {
  if (other != this) {
    std::swap(minpoint_, other->minpoint_);
    std::swap(maxpoint_, other->maxpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRect_Int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRect_Int_descriptor_;
  metadata.reflection = PbRect_Int_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
