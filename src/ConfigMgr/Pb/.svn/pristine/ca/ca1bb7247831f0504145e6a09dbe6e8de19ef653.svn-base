// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/RobField.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/RobField.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TRobFieldUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldArmy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldArmy_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldUserCanTouchBuildingTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldUserCanTouchBuildingTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldUserAutoTouchConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldUserAutoTouchConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldPriv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldPriv_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldBuildingAttacker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldBuildingAttacker_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldBuildingDefender_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldBuildingDefender_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldBuilding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldBuilding_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldEventUserEnter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldEventUserEnter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldEventUserLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldEventUserLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldEventUserMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldEventUserMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldEventUserFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldEventUserFight_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldEventUserTouch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldEventUserTouch_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldEventUserRevive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldEventUserRevive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldEventUserKillNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldEventUserKillNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldEventUserHpChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldEventUserHpChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldEventArmyGoalChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldEventArmyGoalChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldEventBuildingOwnerChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldEventBuildingOwnerChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldEventBuildingProgressChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldEventBuildingProgressChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldEventGameOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldEventGameOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldEventWrapper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldEventWrapper_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldWhole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldWhole_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldDelta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldDelta_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRobFieldSettle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRobFieldSettle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ERobType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERobFieldEntityType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERobFieldUserState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERobFieldEventType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fRobField_2eproto() {
  protobuf_AddDesc_net_2fRobField_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/RobField.proto");
  GOOGLE_CHECK(file != NULL);
  TRobFieldUser_descriptor_ = file->message_type(0);
  static const int TRobFieldUser_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldUser, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldUser, usersimpleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldUser, armyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldUser, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldUser, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldUser, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldUser, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldUser, curpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldUser, endpos_),
  };
  TRobFieldUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldUser_descriptor_,
      TRobFieldUser::default_instance_,
      TRobFieldUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldUser));
  TRobFieldArmy_descriptor_ = file->message_type(1);
  static const int TRobFieldArmy_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldArmy, armyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldArmy, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldArmy, extra_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldArmy, goal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldArmy, entityids_),
  };
  TRobFieldArmy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldArmy_descriptor_,
      TRobFieldArmy::default_instance_,
      TRobFieldArmy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldArmy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldArmy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldArmy));
  TRobFieldUserCanTouchBuildingTime_descriptor_ = file->message_type(2);
  static const int TRobFieldUserCanTouchBuildingTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldUserCanTouchBuildingTime, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldUserCanTouchBuildingTime, cantouchms_),
  };
  TRobFieldUserCanTouchBuildingTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldUserCanTouchBuildingTime_descriptor_,
      TRobFieldUserCanTouchBuildingTime::default_instance_,
      TRobFieldUserCanTouchBuildingTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldUserCanTouchBuildingTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldUserCanTouchBuildingTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldUserCanTouchBuildingTime));
  TRobFieldUserAutoTouchConfig_descriptor_ = file->message_type(3);
  static const int TRobFieldUserAutoTouchConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldUserAutoTouchConfig, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldUserAutoTouchConfig, isauto_),
  };
  TRobFieldUserAutoTouchConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldUserAutoTouchConfig_descriptor_,
      TRobFieldUserAutoTouchConfig::default_instance_,
      TRobFieldUserAutoTouchConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldUserAutoTouchConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldUserAutoTouchConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldUserAutoTouchConfig));
  TRobFieldPriv_descriptor_ = file->message_type(4);
  static const int TRobFieldPriv_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldPriv, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldPriv, canrevivetimems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldPriv, canatkusertimems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldPriv, cantouchbuildingtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldPriv, autotouchconfigs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldPriv, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldPriv, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldPriv, canmovetimems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldPriv, attacknum_),
  };
  TRobFieldPriv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldPriv_descriptor_,
      TRobFieldPriv::default_instance_,
      TRobFieldPriv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldPriv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldPriv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldPriv));
  TRobFieldBuildingAttacker_descriptor_ = file->message_type(5);
  static const int TRobFieldBuildingAttacker_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuildingAttacker, armyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuildingAttacker, damage_),
  };
  TRobFieldBuildingAttacker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldBuildingAttacker_descriptor_,
      TRobFieldBuildingAttacker::default_instance_,
      TRobFieldBuildingAttacker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuildingAttacker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuildingAttacker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldBuildingAttacker));
  TRobFieldBuildingDefender_descriptor_ = file->message_type(6);
  static const int TRobFieldBuildingDefender_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuildingDefender, armyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuildingDefender, repair_),
  };
  TRobFieldBuildingDefender_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldBuildingDefender_descriptor_,
      TRobFieldBuildingDefender::default_instance_,
      TRobFieldBuildingDefender_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuildingDefender, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuildingDefender, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldBuildingDefender));
  TRobFieldBuilding_descriptor_ = file->message_type(7);
  static const int TRobFieldBuilding_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuilding, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuilding, armyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuilding, ownertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuilding, initarmyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuilding, ownerchanged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuilding, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuilding, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuilding, attackers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuilding, defender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuilding, lastresumehptime_),
  };
  TRobFieldBuilding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldBuilding_descriptor_,
      TRobFieldBuilding::default_instance_,
      TRobFieldBuilding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuilding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldBuilding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldBuilding));
  TRobFieldEventUserEnter_descriptor_ = file->message_type(8);
  static const int TRobFieldEventUserEnter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserEnter, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserEnter, user_),
  };
  TRobFieldEventUserEnter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldEventUserEnter_descriptor_,
      TRobFieldEventUserEnter::default_instance_,
      TRobFieldEventUserEnter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserEnter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserEnter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldEventUserEnter));
  TRobFieldEventUserLeave_descriptor_ = file->message_type(9);
  static const int TRobFieldEventUserLeave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserLeave, entityid_),
  };
  TRobFieldEventUserLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldEventUserLeave_descriptor_,
      TRobFieldEventUserLeave::default_instance_,
      TRobFieldEventUserLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldEventUserLeave));
  TRobFieldEventUserMove_descriptor_ = file->message_type(10);
  static const int TRobFieldEventUserMove_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserMove, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserMove, curpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserMove, endpos_),
  };
  TRobFieldEventUserMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldEventUserMove_descriptor_,
      TRobFieldEventUserMove::default_instance_,
      TRobFieldEventUserMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldEventUserMove));
  TRobFieldEventUserFight_descriptor_ = file->message_type(11);
  static const int TRobFieldEventUserFight_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserFight, atkentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserFight, atkposthp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserFight, defentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserFight, defposthp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserFight, isatkwin_),
  };
  TRobFieldEventUserFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldEventUserFight_descriptor_,
      TRobFieldEventUserFight::default_instance_,
      TRobFieldEventUserFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldEventUserFight));
  TRobFieldEventUserTouch_descriptor_ = file->message_type(12);
  static const int TRobFieldEventUserTouch_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserTouch, userentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserTouch, userposthp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserTouch, buildingentityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserTouch, buildingposthp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserTouch, isdestroy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserTouch, deltahp_),
  };
  TRobFieldEventUserTouch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldEventUserTouch_descriptor_,
      TRobFieldEventUserTouch::default_instance_,
      TRobFieldEventUserTouch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserTouch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserTouch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldEventUserTouch));
  TRobFieldEventUserRevive_descriptor_ = file->message_type(13);
  static const int TRobFieldEventUserRevive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserRevive, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserRevive, revivepos_),
  };
  TRobFieldEventUserRevive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldEventUserRevive_descriptor_,
      TRobFieldEventUserRevive::default_instance_,
      TRobFieldEventUserRevive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserRevive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserRevive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldEventUserRevive));
  TRobFieldEventUserKillNum_descriptor_ = file->message_type(14);
  static const int TRobFieldEventUserKillNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserKillNum, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserKillNum, killnum_),
  };
  TRobFieldEventUserKillNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldEventUserKillNum_descriptor_,
      TRobFieldEventUserKillNum::default_instance_,
      TRobFieldEventUserKillNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserKillNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserKillNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldEventUserKillNum));
  TRobFieldEventUserHpChange_descriptor_ = file->message_type(15);
  static const int TRobFieldEventUserHpChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserHpChange, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserHpChange, curhp_),
  };
  TRobFieldEventUserHpChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldEventUserHpChange_descriptor_,
      TRobFieldEventUserHpChange::default_instance_,
      TRobFieldEventUserHpChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserHpChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventUserHpChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldEventUserHpChange));
  TRobFieldEventArmyGoalChange_descriptor_ = file->message_type(16);
  static const int TRobFieldEventArmyGoalChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventArmyGoalChange, armyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventArmyGoalChange, goal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventArmyGoalChange, changer_),
  };
  TRobFieldEventArmyGoalChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldEventArmyGoalChange_descriptor_,
      TRobFieldEventArmyGoalChange::default_instance_,
      TRobFieldEventArmyGoalChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventArmyGoalChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventArmyGoalChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldEventArmyGoalChange));
  TRobFieldEventBuildingOwnerChange_descriptor_ = file->message_type(17);
  static const int TRobFieldEventBuildingOwnerChange_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventBuildingOwnerChange, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventBuildingOwnerChange, armyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventBuildingOwnerChange, ownertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventBuildingOwnerChange, initarmyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventBuildingOwnerChange, ownerchanged_),
  };
  TRobFieldEventBuildingOwnerChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldEventBuildingOwnerChange_descriptor_,
      TRobFieldEventBuildingOwnerChange::default_instance_,
      TRobFieldEventBuildingOwnerChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventBuildingOwnerChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventBuildingOwnerChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldEventBuildingOwnerChange));
  TRobFieldEventBuildingProgressChange_descriptor_ = file->message_type(18);
  static const int TRobFieldEventBuildingProgressChange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventBuildingProgressChange, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventBuildingProgressChange, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventBuildingProgressChange, attackers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventBuildingProgressChange, defender_),
  };
  TRobFieldEventBuildingProgressChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldEventBuildingProgressChange_descriptor_,
      TRobFieldEventBuildingProgressChange::default_instance_,
      TRobFieldEventBuildingProgressChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventBuildingProgressChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventBuildingProgressChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldEventBuildingProgressChange));
  TRobFieldEventGameOver_descriptor_ = file->message_type(19);
  static const int TRobFieldEventGameOver_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventGameOver, winarmyid_),
  };
  TRobFieldEventGameOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldEventGameOver_descriptor_,
      TRobFieldEventGameOver::default_instance_,
      TRobFieldEventGameOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventGameOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventGameOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldEventGameOver));
  TRobFieldEventWrapper_descriptor_ = file->message_type(20);
  static const int TRobFieldEventWrapper_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventWrapper, offsetms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventWrapper, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventWrapper, eventdata_),
  };
  TRobFieldEventWrapper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldEventWrapper_descriptor_,
      TRobFieldEventWrapper::default_instance_,
      TRobFieldEventWrapper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventWrapper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldEventWrapper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldEventWrapper));
  TRobFieldWhole_descriptor_ = file->message_type(21);
  static const int TRobFieldWhole_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldWhole, robtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldWhole, fieldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldWhole, begtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldWhole, armys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldWhole, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldWhole, priv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldWhole, buildings_),
  };
  TRobFieldWhole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldWhole_descriptor_,
      TRobFieldWhole::default_instance_,
      TRobFieldWhole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldWhole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldWhole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldWhole));
  TRobFieldDelta_descriptor_ = file->message_type(22);
  static const int TRobFieldDelta_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldDelta, robtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldDelta, events_),
  };
  TRobFieldDelta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldDelta_descriptor_,
      TRobFieldDelta::default_instance_,
      TRobFieldDelta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldDelta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldDelta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldDelta));
  TRobFieldSettle_descriptor_ = file->message_type(23);
  static const int TRobFieldSettle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldSettle, robtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldSettle, winarmyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldSettle, armys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldSettle, priv_),
  };
  TRobFieldSettle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRobFieldSettle_descriptor_,
      TRobFieldSettle::default_instance_,
      TRobFieldSettle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldSettle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRobFieldSettle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRobFieldSettle));
  ERobType_descriptor_ = file->enum_type(0);
  ERobFieldEntityType_descriptor_ = file->enum_type(1);
  ERobFieldUserState_descriptor_ = file->enum_type(2);
  ERobFieldEventType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fRobField_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldUser_descriptor_, &TRobFieldUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldArmy_descriptor_, &TRobFieldArmy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldUserCanTouchBuildingTime_descriptor_, &TRobFieldUserCanTouchBuildingTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldUserAutoTouchConfig_descriptor_, &TRobFieldUserAutoTouchConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldPriv_descriptor_, &TRobFieldPriv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldBuildingAttacker_descriptor_, &TRobFieldBuildingAttacker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldBuildingDefender_descriptor_, &TRobFieldBuildingDefender::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldBuilding_descriptor_, &TRobFieldBuilding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldEventUserEnter_descriptor_, &TRobFieldEventUserEnter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldEventUserLeave_descriptor_, &TRobFieldEventUserLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldEventUserMove_descriptor_, &TRobFieldEventUserMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldEventUserFight_descriptor_, &TRobFieldEventUserFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldEventUserTouch_descriptor_, &TRobFieldEventUserTouch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldEventUserRevive_descriptor_, &TRobFieldEventUserRevive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldEventUserKillNum_descriptor_, &TRobFieldEventUserKillNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldEventUserHpChange_descriptor_, &TRobFieldEventUserHpChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldEventArmyGoalChange_descriptor_, &TRobFieldEventArmyGoalChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldEventBuildingOwnerChange_descriptor_, &TRobFieldEventBuildingOwnerChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldEventBuildingProgressChange_descriptor_, &TRobFieldEventBuildingProgressChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldEventGameOver_descriptor_, &TRobFieldEventGameOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldEventWrapper_descriptor_, &TRobFieldEventWrapper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldWhole_descriptor_, &TRobFieldWhole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldDelta_descriptor_, &TRobFieldDelta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRobFieldSettle_descriptor_, &TRobFieldSettle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fRobField_2eproto() {
  delete TRobFieldUser::default_instance_;
  delete TRobFieldUser_reflection_;
  delete TRobFieldArmy::default_instance_;
  delete TRobFieldArmy_reflection_;
  delete TRobFieldUserCanTouchBuildingTime::default_instance_;
  delete TRobFieldUserCanTouchBuildingTime_reflection_;
  delete TRobFieldUserAutoTouchConfig::default_instance_;
  delete TRobFieldUserAutoTouchConfig_reflection_;
  delete TRobFieldPriv::default_instance_;
  delete TRobFieldPriv_reflection_;
  delete TRobFieldBuildingAttacker::default_instance_;
  delete TRobFieldBuildingAttacker_reflection_;
  delete TRobFieldBuildingDefender::default_instance_;
  delete TRobFieldBuildingDefender_reflection_;
  delete TRobFieldBuilding::default_instance_;
  delete TRobFieldBuilding_reflection_;
  delete TRobFieldEventUserEnter::default_instance_;
  delete TRobFieldEventUserEnter_reflection_;
  delete TRobFieldEventUserLeave::default_instance_;
  delete TRobFieldEventUserLeave_reflection_;
  delete TRobFieldEventUserMove::default_instance_;
  delete TRobFieldEventUserMove_reflection_;
  delete TRobFieldEventUserFight::default_instance_;
  delete TRobFieldEventUserFight_reflection_;
  delete TRobFieldEventUserTouch::default_instance_;
  delete TRobFieldEventUserTouch_reflection_;
  delete TRobFieldEventUserRevive::default_instance_;
  delete TRobFieldEventUserRevive_reflection_;
  delete TRobFieldEventUserKillNum::default_instance_;
  delete TRobFieldEventUserKillNum_reflection_;
  delete TRobFieldEventUserHpChange::default_instance_;
  delete TRobFieldEventUserHpChange_reflection_;
  delete TRobFieldEventArmyGoalChange::default_instance_;
  delete TRobFieldEventArmyGoalChange_reflection_;
  delete TRobFieldEventBuildingOwnerChange::default_instance_;
  delete TRobFieldEventBuildingOwnerChange_reflection_;
  delete TRobFieldEventBuildingProgressChange::default_instance_;
  delete TRobFieldEventBuildingProgressChange_reflection_;
  delete TRobFieldEventGameOver::default_instance_;
  delete TRobFieldEventGameOver_reflection_;
  delete TRobFieldEventWrapper::default_instance_;
  delete TRobFieldEventWrapper_reflection_;
  delete TRobFieldWhole::default_instance_;
  delete TRobFieldWhole_reflection_;
  delete TRobFieldDelta::default_instance_;
  delete TRobFieldDelta_reflection_;
  delete TRobFieldSettle::default_instance_;
  delete TRobFieldSettle_reflection_;
}

void protobuf_AddDesc_net_2fRobField_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_module_2fUtil_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022net/RobField.proto\022\002pb\032\016net/User.proto"
    "\032\021module/Util.proto\"\370\001\n\rTRobFieldUser\022\020\n"
    "\010EntityId\030\001 \001(\004\022+\n\016UserSimpleInfo\030\002 \001(\0132"
    "\023.pb.TUserSimpleInfo\022\016\n\006ArmyId\030\003 \001(\004\022\r\n\005"
    "MaxHp\030\004 \001(\r\022\r\n\005CurHp\030\005 \001(\r\022%\n\005State\030\006 \001("
    "\0162\026.pb.ERobFieldUserState\022\r\n\005Speed\030\007 \001(\r"
    "\022!\n\006CurPos\030\010 \001(\0132\021.pb.PbVector2_Int\022!\n\006E"
    "ndPos\030\t \001(\0132\021.pb.PbVector2_Int\"]\n\rTRobFi"
    "eldArmy\022\016\n\006ArmyId\030\001 \001(\004\022\014\n\004Name\030\002 \001(\t\022\r\n"
    "\005Extra\030\003 \001(\014\022\014\n\004Goal\030\004 \001(\r\022\021\n\tEntityIds\030"
    "\005 \003(\004\"I\n!TRobFieldUserCanTouchBuildingTi"
    "me\022\020\n\010EntityId\030\001 \001(\004\022\022\n\nCanTouchMs\030\002 \001(\004"
    "\"@\n\034TRobFieldUserAutoTouchConfig\022\020\n\010Enti"
    "tyId\030\001 \001(\004\022\016\n\006IsAuto\030\002 \001(\010\"\240\002\n\rTRobField"
    "Priv\022\020\n\010EntityId\030\001 \001(\004\022\027\n\017CanReviveTimeM"
    "s\030\002 \001(\004\022\030\n\020CanAtkUserTimeMs\030\003 \001(\004\022D\n\025Can"
    "TouchBuildingTimes\030\004 \003(\0132%.pb.TRobFieldU"
    "serCanTouchBuildingTime\022:\n\020AutoTouchConf"
    "igs\030\005 \003(\0132 .pb.TRobFieldUserAutoTouchCon"
    "fig\022\r\n\005Score\030\006 \001(\r\022\017\n\007KillNum\030\007 \001(\r\022\025\n\rC"
    "anMoveTimeMs\030\010 \001(\004\022\021\n\tAttackNum\030\t \001(\r\";\n"
    "\031TRobFieldBuildingAttacker\022\016\n\006ArmyId\030\001 \001"
    "(\004\022\016\n\006Damage\030\002 \001(\r\";\n\031TRobFieldBuildingD"
    "efender\022\016\n\006ArmyId\030\001 \001(\004\022\016\n\006Repair\030\002 \001(\r\""
    "\215\002\n\021TRobFieldBuilding\022\020\n\010EntityId\030\001 \001(\004\022"
    "\016\n\006ArmyId\030\002 \001(\004\022\021\n\tOwnerTime\030\003 \001(\004\022\022\n\nIn"
    "itArmyId\030\004 \001(\004\022\024\n\014OwnerChanged\030\005 \001(\010\022\r\n\005"
    "MaxHp\030\006 \001(\r\022\r\n\005CurHp\030\007 \001(\r\0220\n\tAttackers\030"
    "\010 \003(\0132\035.pb.TRobFieldBuildingAttacker\022/\n\010"
    "Defender\030\t \001(\0132\035.pb.TRobFieldBuildingDef"
    "ender\022\030\n\020LastResumeHpTime\030\n \001(\004\"L\n\027TRobF"
    "ieldEventUserEnter\022\020\n\010EntityId\030\001 \001(\004\022\037\n\004"
    "User\030\002 \001(\0132\021.pb.TRobFieldUser\"+\n\027TRobFie"
    "ldEventUserLeave\022\020\n\010EntityId\030\001 \001(\004\"p\n\026TR"
    "obFieldEventUserMove\022\020\n\010EntityId\030\001 \001(\004\022!"
    "\n\006CurPos\030\002 \001(\0132\021.pb.PbVector2_Int\022!\n\006End"
    "Pos\030\003 \001(\0132\021.pb.PbVector2_Int\"{\n\027TRobFiel"
    "dEventUserFight\022\023\n\013AtkEntityId\030\001 \001(\004\022\021\n\t"
    "AtkPostHp\030\002 \001(\r\022\023\n\013DefEntityId\030\003 \001(\004\022\021\n\t"
    "DefPostHp\030\004 \001(\r\022\020\n\010IsAtkWin\030\005 \001(\010\"\231\001\n\027TR"
    "obFieldEventUserTouch\022\024\n\014UserEntityId\030\001 "
    "\001(\004\022\022\n\nUserPostHp\030\002 \001(\r\022\030\n\020BuildingEntit"
    "yId\030\003 \001(\004\022\026\n\016BuildingPostHp\030\004 \001(\r\022\021\n\tIsD"
    "estroy\030\005 \001(\010\022\017\n\007DeltaHp\030\006 \001(\r\"R\n\030TRobFie"
    "ldEventUserRevive\022\020\n\010EntityId\030\001 \001(\004\022$\n\tR"
    "evivePos\030\002 \001(\0132\021.pb.PbVector2_Int\">\n\031TRo"
    "bFieldEventUserKillNum\022\020\n\010EntityId\030\001 \001(\004"
    "\022\017\n\007KillNum\030\002 \001(\r\"=\n\032TRobFieldEventUserH"
    "pChange\022\020\n\010EntityId\030\001 \001(\004\022\r\n\005CurHp\030\002 \001(\r"
    "\"M\n\034TRobFieldEventArmyGoalChange\022\016\n\006Army"
    "Id\030\001 \001(\004\022\014\n\004Goal\030\002 \001(\r\022\017\n\007Changer\030\003 \001(\004\""
    "\202\001\n!TRobFieldEventBuildingOwnerChange\022\020\n"
    "\010EntityId\030\001 \001(\004\022\016\n\006ArmyId\030\002 \001(\004\022\021\n\tOwner"
    "Time\030\003 \001(\004\022\022\n\nInitArmyId\030\004 \001(\004\022\024\n\014OwnerC"
    "hanged\030\005 \001(\010\"\252\001\n$TRobFieldEventBuildingP"
    "rogressChange\022\020\n\010EntityId\030\001 \001(\004\022\r\n\005CurHp"
    "\030\002 \001(\r\0220\n\tAttackers\030\003 \003(\0132\035.pb.TRobField"
    "BuildingAttacker\022/\n\010Defender\030\004 \001(\0132\035.pb."
    "TRobFieldBuildingDefender\"+\n\026TRobFieldEv"
    "entGameOver\022\021\n\tWinArmyId\030\001 \001(\004\"g\n\025TRobFi"
    "eldEventWrapper\022\020\n\010OffsetMs\030\001 \001(\r\022)\n\tEve"
    "ntType\030\002 \001(\0162\026.pb.ERobFieldEventType\022\021\n\t"
    "EventData\030\003 \001(\014\"\340\001\n\016TRobFieldWhole\022\035\n\007Ro"
    "bType\030\001 \001(\0162\014.pb.ERobType\022\017\n\007FieldId\030\002 \001"
    "(\004\022\017\n\007BegTime\030\003 \001(\004\022 \n\005Armys\030\004 \003(\0132\021.pb."
    "TRobFieldArmy\022 \n\005Users\030\005 \003(\0132\021.pb.TRobFi"
    "eldUser\022\037\n\004Priv\030\006 \001(\0132\021.pb.TRobFieldPriv"
    "\022(\n\tBuildings\030\007 \003(\0132\025.pb.TRobFieldBuildi"
    "ng\"Z\n\016TRobFieldDelta\022\035\n\007RobType\030\001 \001(\0162\014."
    "pb.ERobType\022)\n\006Events\030\002 \003(\0132\031.pb.TRobFie"
    "ldEventWrapper\"\206\001\n\017TRobFieldSettle\022\035\n\007Ro"
    "bType\030\001 \001(\0162\014.pb.ERobType\022\021\n\tWinArmyId\030\002"
    " \001(\004\022 \n\005Armys\030\003 \003(\0132\021.pb.TRobFieldArmy\022\037"
    "\n\004Priv\030\004 \001(\0132\021.pb.TRobFieldPriv*O\n\010ERobT"
    "ype\022\025\n\021EROB_TYPE_CONQUER\020\000\022\023\n\017EROB_TYPE_"
    "ROYAL\020\001\022\027\n\023EROB_TYPE_SIEGEFLAG\020\002*\272\001\n\023ERo"
    "bFieldEntityType\022\037\n\033EROB_FIELD_ENTITY_TY"
    "PE_USER\020\000\022\037\n\033EROB_FIELD_ENTITY_TYPE_FLAG"
    "\020\002\022\037\n\033EROB_FIELD_ENTITY_TYPE_DOOR\020\003\022\037\n\033E"
    "ROB_FIELD_ENTITY_TYPE_TECH\020\004\022\037\n\033EROB_FIE"
    "LD_ENTITY_TYPE_HOME\020\005*w\n\022ERobFieldUserSt"
    "ate\022\037\n\033EROB_FIELD_USER_STATE_STAND\020\000\022 \n\034"
    "EROB_FIELD_USER_STATE_MOVING\020\001\022\036\n\032EROB_F"
    "IELD_USER_STATE_DEAD\020\002*\372\003\n\022ERobFieldEven"
    "tType\022$\n EROB_FIELD_EVENT_TYPE_USER_ENTE"
    "R\020\000\022$\n EROB_FIELD_EVENT_TYPE_USER_LEAVE\020"
    "\001\022#\n\037EROB_FIELD_EVENT_TYPE_USER_MOVE\020\002\022$"
    "\n EROB_FIELD_EVENT_TYPE_USER_FIGHT\020\003\022$\n "
    "EROB_FIELD_EVENT_TYPE_USER_TOUCH\020\004\022%\n!ER"
    "OB_FIELD_EVENT_TYPE_USER_REVIVE\020\005\022\'\n#ERO"
    "B_FIELD_EVENT_TYPE_USER_KILL_NUM\020\006\022(\n$ER"
    "OB_FIELD_EVENT_TYPE_USER_HP_CHANGE\020\007\022*\n&"
    "EROB_FIELD_EVENT_TYPE_ARMY_GOAL_CHANGE\020\010"
    "\022/\n+EROB_FIELD_EVENT_TYPE_BUILDING_OWNER"
    "_CHANGE\020\t\022,\n(EROB_FIELD_EVENT_TYPE_BUILD"
    "ING_HP_CHANGE\020\n\022\"\n\036EROB_FIELD_EVENT_TYPE"
    "_GAMEOVER\020\013", 3851);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/RobField.proto", &protobuf_RegisterTypes);
  TRobFieldUser::default_instance_ = new TRobFieldUser();
  TRobFieldArmy::default_instance_ = new TRobFieldArmy();
  TRobFieldUserCanTouchBuildingTime::default_instance_ = new TRobFieldUserCanTouchBuildingTime();
  TRobFieldUserAutoTouchConfig::default_instance_ = new TRobFieldUserAutoTouchConfig();
  TRobFieldPriv::default_instance_ = new TRobFieldPriv();
  TRobFieldBuildingAttacker::default_instance_ = new TRobFieldBuildingAttacker();
  TRobFieldBuildingDefender::default_instance_ = new TRobFieldBuildingDefender();
  TRobFieldBuilding::default_instance_ = new TRobFieldBuilding();
  TRobFieldEventUserEnter::default_instance_ = new TRobFieldEventUserEnter();
  TRobFieldEventUserLeave::default_instance_ = new TRobFieldEventUserLeave();
  TRobFieldEventUserMove::default_instance_ = new TRobFieldEventUserMove();
  TRobFieldEventUserFight::default_instance_ = new TRobFieldEventUserFight();
  TRobFieldEventUserTouch::default_instance_ = new TRobFieldEventUserTouch();
  TRobFieldEventUserRevive::default_instance_ = new TRobFieldEventUserRevive();
  TRobFieldEventUserKillNum::default_instance_ = new TRobFieldEventUserKillNum();
  TRobFieldEventUserHpChange::default_instance_ = new TRobFieldEventUserHpChange();
  TRobFieldEventArmyGoalChange::default_instance_ = new TRobFieldEventArmyGoalChange();
  TRobFieldEventBuildingOwnerChange::default_instance_ = new TRobFieldEventBuildingOwnerChange();
  TRobFieldEventBuildingProgressChange::default_instance_ = new TRobFieldEventBuildingProgressChange();
  TRobFieldEventGameOver::default_instance_ = new TRobFieldEventGameOver();
  TRobFieldEventWrapper::default_instance_ = new TRobFieldEventWrapper();
  TRobFieldWhole::default_instance_ = new TRobFieldWhole();
  TRobFieldDelta::default_instance_ = new TRobFieldDelta();
  TRobFieldSettle::default_instance_ = new TRobFieldSettle();
  TRobFieldUser::default_instance_->InitAsDefaultInstance();
  TRobFieldArmy::default_instance_->InitAsDefaultInstance();
  TRobFieldUserCanTouchBuildingTime::default_instance_->InitAsDefaultInstance();
  TRobFieldUserAutoTouchConfig::default_instance_->InitAsDefaultInstance();
  TRobFieldPriv::default_instance_->InitAsDefaultInstance();
  TRobFieldBuildingAttacker::default_instance_->InitAsDefaultInstance();
  TRobFieldBuildingDefender::default_instance_->InitAsDefaultInstance();
  TRobFieldBuilding::default_instance_->InitAsDefaultInstance();
  TRobFieldEventUserEnter::default_instance_->InitAsDefaultInstance();
  TRobFieldEventUserLeave::default_instance_->InitAsDefaultInstance();
  TRobFieldEventUserMove::default_instance_->InitAsDefaultInstance();
  TRobFieldEventUserFight::default_instance_->InitAsDefaultInstance();
  TRobFieldEventUserTouch::default_instance_->InitAsDefaultInstance();
  TRobFieldEventUserRevive::default_instance_->InitAsDefaultInstance();
  TRobFieldEventUserKillNum::default_instance_->InitAsDefaultInstance();
  TRobFieldEventUserHpChange::default_instance_->InitAsDefaultInstance();
  TRobFieldEventArmyGoalChange::default_instance_->InitAsDefaultInstance();
  TRobFieldEventBuildingOwnerChange::default_instance_->InitAsDefaultInstance();
  TRobFieldEventBuildingProgressChange::default_instance_->InitAsDefaultInstance();
  TRobFieldEventGameOver::default_instance_->InitAsDefaultInstance();
  TRobFieldEventWrapper::default_instance_->InitAsDefaultInstance();
  TRobFieldWhole::default_instance_->InitAsDefaultInstance();
  TRobFieldDelta::default_instance_->InitAsDefaultInstance();
  TRobFieldSettle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fRobField_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fRobField_2eproto {
  StaticDescriptorInitializer_net_2fRobField_2eproto() {
    protobuf_AddDesc_net_2fRobField_2eproto();
  }
} static_descriptor_initializer_net_2fRobField_2eproto_;
const ::google::protobuf::EnumDescriptor* ERobType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERobType_descriptor_;
}
bool ERobType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERobFieldEntityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERobFieldEntityType_descriptor_;
}
bool ERobFieldEntityType_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERobFieldUserState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERobFieldUserState_descriptor_;
}
bool ERobFieldUserState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERobFieldEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERobFieldEventType_descriptor_;
}
bool ERobFieldEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldUser::kEntityIdFieldNumber;
const int TRobFieldUser::kUserSimpleInfoFieldNumber;
const int TRobFieldUser::kArmyIdFieldNumber;
const int TRobFieldUser::kMaxHpFieldNumber;
const int TRobFieldUser::kCurHpFieldNumber;
const int TRobFieldUser::kStateFieldNumber;
const int TRobFieldUser::kSpeedFieldNumber;
const int TRobFieldUser::kCurPosFieldNumber;
const int TRobFieldUser::kEndPosFieldNumber;
#endif  // !_MSC_VER

TRobFieldUser::TRobFieldUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldUser)
}

void TRobFieldUser::InitAsDefaultInstance() {
  usersimpleinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
  curpos_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
  endpos_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
}

TRobFieldUser::TRobFieldUser(const TRobFieldUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldUser)
}

void TRobFieldUser::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = GOOGLE_ULONGLONG(0);
  usersimpleinfo_ = NULL;
  armyid_ = GOOGLE_ULONGLONG(0);
  maxhp_ = 0u;
  curhp_ = 0u;
  state_ = 0;
  speed_ = 0u;
  curpos_ = NULL;
  endpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldUser::~TRobFieldUser() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldUser)
  SharedDtor();
}

void TRobFieldUser::SharedDtor() {
  if (this != default_instance_) {
    delete usersimpleinfo_;
    delete curpos_;
    delete endpos_;
  }
}

void TRobFieldUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldUser_descriptor_;
}

const TRobFieldUser& TRobFieldUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldUser* TRobFieldUser::default_instance_ = NULL;

TRobFieldUser* TRobFieldUser::New() const {
  return new TRobFieldUser;
}

void TRobFieldUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRobFieldUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(armyid_, speed_);
    entityid_ = GOOGLE_ULONGLONG(0);
    if (has_usersimpleinfo()) {
      if (usersimpleinfo_ != NULL) usersimpleinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_curpos()) {
      if (curpos_ != NULL) curpos_->::pb::PbVector2_Int::Clear();
    }
  }
  if (has_endpos()) {
    if (endpos_ != NULL) endpos_->::pb::PbVector2_Int::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 EntityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserSimpleInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo UserSimpleInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_UserSimpleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usersimpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ArmyId;
        break;
      }

      // optional uint64 ArmyId = 3;
      case 3: {
        if (tag == 24) {
         parse_ArmyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &armyid_)));
          set_has_armyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MaxHp;
        break;
      }

      // optional uint32 MaxHp = 4;
      case 4: {
        if (tag == 32) {
         parse_MaxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CurHp;
        break;
      }

      // optional uint32 CurHp = 5;
      case 5: {
        if (tag == 40) {
         parse_CurHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_State;
        break;
      }

      // optional .pb.ERobFieldUserState State = 6;
      case 6: {
        if (tag == 48) {
         parse_State:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ERobFieldUserState_IsValid(value)) {
            set_state(static_cast< ::pb::ERobFieldUserState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Speed;
        break;
      }

      // optional uint32 Speed = 7;
      case 7: {
        if (tag == 56) {
         parse_Speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_CurPos;
        break;
      }

      // optional .pb.PbVector2_Int CurPos = 8;
      case 8: {
        if (tag == 66) {
         parse_CurPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_EndPos;
        break;
      }

      // optional .pb.PbVector2_Int EndPos = 9;
      case 9: {
        if (tag == 74) {
         parse_EndPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldUser)
  return false;
#undef DO_
}

void TRobFieldUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldUser)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->entityid(), output);
  }

  // optional .pb.TUserSimpleInfo UserSimpleInfo = 2;
  if (has_usersimpleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->usersimpleinfo(), output);
  }

  // optional uint64 ArmyId = 3;
  if (has_armyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->armyid(), output);
  }

  // optional uint32 MaxHp = 4;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxhp(), output);
  }

  // optional uint32 CurHp = 5;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->curhp(), output);
  }

  // optional .pb.ERobFieldUserState State = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  // optional uint32 Speed = 7;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->speed(), output);
  }

  // optional .pb.PbVector2_Int CurPos = 8;
  if (has_curpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->curpos(), output);
  }

  // optional .pb.PbVector2_Int EndPos = 9;
  if (has_endpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->endpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldUser)
}

::google::protobuf::uint8* TRobFieldUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldUser)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->entityid(), target);
  }

  // optional .pb.TUserSimpleInfo UserSimpleInfo = 2;
  if (has_usersimpleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->usersimpleinfo(), target);
  }

  // optional uint64 ArmyId = 3;
  if (has_armyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->armyid(), target);
  }

  // optional uint32 MaxHp = 4;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxhp(), target);
  }

  // optional uint32 CurHp = 5;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->curhp(), target);
  }

  // optional .pb.ERobFieldUserState State = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }

  // optional uint32 Speed = 7;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->speed(), target);
  }

  // optional .pb.PbVector2_Int CurPos = 8;
  if (has_curpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->curpos(), target);
  }

  // optional .pb.PbVector2_Int EndPos = 9;
  if (has_endpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->endpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldUser)
  return target;
}

int TRobFieldUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 EntityId = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entityid());
    }

    // optional .pb.TUserSimpleInfo UserSimpleInfo = 2;
    if (has_usersimpleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usersimpleinfo());
    }

    // optional uint64 ArmyId = 3;
    if (has_armyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->armyid());
    }

    // optional uint32 MaxHp = 4;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

    // optional uint32 CurHp = 5;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curhp());
    }

    // optional .pb.ERobFieldUserState State = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 Speed = 7;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // optional .pb.PbVector2_Int CurPos = 8;
    if (has_curpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curpos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.PbVector2_Int EndPos = 9;
    if (has_endpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldUser::MergeFrom(const TRobFieldUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_usersimpleinfo()) {
      mutable_usersimpleinfo()->::pb::TUserSimpleInfo::MergeFrom(from.usersimpleinfo());
    }
    if (from.has_armyid()) {
      set_armyid(from.armyid());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_curpos()) {
      mutable_curpos()->::pb::PbVector2_Int::MergeFrom(from.curpos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_endpos()) {
      mutable_endpos()->::pb::PbVector2_Int::MergeFrom(from.endpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldUser::CopyFrom(const TRobFieldUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldUser::IsInitialized() const {

  return true;
}

void TRobFieldUser::Swap(TRobFieldUser* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(usersimpleinfo_, other->usersimpleinfo_);
    std::swap(armyid_, other->armyid_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(curhp_, other->curhp_);
    std::swap(state_, other->state_);
    std::swap(speed_, other->speed_);
    std::swap(curpos_, other->curpos_);
    std::swap(endpos_, other->endpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldUser_descriptor_;
  metadata.reflection = TRobFieldUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldArmy::kArmyIdFieldNumber;
const int TRobFieldArmy::kNameFieldNumber;
const int TRobFieldArmy::kExtraFieldNumber;
const int TRobFieldArmy::kGoalFieldNumber;
const int TRobFieldArmy::kEntityIdsFieldNumber;
#endif  // !_MSC_VER

TRobFieldArmy::TRobFieldArmy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldArmy)
}

void TRobFieldArmy::InitAsDefaultInstance() {
}

TRobFieldArmy::TRobFieldArmy(const TRobFieldArmy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldArmy)
}

void TRobFieldArmy::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  armyid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  goal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldArmy::~TRobFieldArmy() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldArmy)
  SharedDtor();
}

void TRobFieldArmy::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (extra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extra_;
  }
  if (this != default_instance_) {
  }
}

void TRobFieldArmy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldArmy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldArmy_descriptor_;
}

const TRobFieldArmy& TRobFieldArmy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldArmy* TRobFieldArmy::default_instance_ = NULL;

TRobFieldArmy* TRobFieldArmy::New() const {
  return new TRobFieldArmy;
}

void TRobFieldArmy::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    armyid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_extra()) {
      if (extra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extra_->clear();
      }
    }
    goal_ = 0u;
  }
  entityids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldArmy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldArmy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ArmyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &armyid_)));
          set_has_armyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Extra;
        break;
      }

      // optional bytes Extra = 3;
      case 3: {
        if (tag == 26) {
         parse_Extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Goal;
        break;
      }

      // optional uint32 Goal = 4;
      case 4: {
        if (tag == 32) {
         parse_Goal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goal_)));
          set_has_goal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_EntityIds;
        break;
      }

      // repeated uint64 EntityIds = 5;
      case 5: {
        if (tag == 40) {
         parse_EntityIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_entityids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_entityids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_EntityIds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldArmy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldArmy)
  return false;
#undef DO_
}

void TRobFieldArmy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldArmy)
  // optional uint64 ArmyId = 1;
  if (has_armyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->armyid(), output);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bytes Extra = 3;
  if (has_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->extra(), output);
  }

  // optional uint32 Goal = 4;
  if (has_goal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->goal(), output);
  }

  // repeated uint64 EntityIds = 5;
  for (int i = 0; i < this->entityids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->entityids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldArmy)
}

::google::protobuf::uint8* TRobFieldArmy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldArmy)
  // optional uint64 ArmyId = 1;
  if (has_armyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->armyid(), target);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bytes Extra = 3;
  if (has_extra()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->extra(), target);
  }

  // optional uint32 Goal = 4;
  if (has_goal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->goal(), target);
  }

  // repeated uint64 EntityIds = 5;
  for (int i = 0; i < this->entityids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->entityids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldArmy)
  return target;
}

int TRobFieldArmy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ArmyId = 1;
    if (has_armyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->armyid());
    }

    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes Extra = 3;
    if (has_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extra());
    }

    // optional uint32 Goal = 4;
    if (has_goal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goal());
    }

  }
  // repeated uint64 EntityIds = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->entityids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->entityids(i));
    }
    total_size += 1 * this->entityids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldArmy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldArmy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldArmy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldArmy::MergeFrom(const TRobFieldArmy& from) {
  GOOGLE_CHECK_NE(&from, this);
  entityids_.MergeFrom(from.entityids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_armyid()) {
      set_armyid(from.armyid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_extra()) {
      set_extra(from.extra());
    }
    if (from.has_goal()) {
      set_goal(from.goal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldArmy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldArmy::CopyFrom(const TRobFieldArmy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldArmy::IsInitialized() const {

  return true;
}

void TRobFieldArmy::Swap(TRobFieldArmy* other) {
  if (other != this) {
    std::swap(armyid_, other->armyid_);
    std::swap(name_, other->name_);
    std::swap(extra_, other->extra_);
    std::swap(goal_, other->goal_);
    entityids_.Swap(&other->entityids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldArmy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldArmy_descriptor_;
  metadata.reflection = TRobFieldArmy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldUserCanTouchBuildingTime::kEntityIdFieldNumber;
const int TRobFieldUserCanTouchBuildingTime::kCanTouchMsFieldNumber;
#endif  // !_MSC_VER

TRobFieldUserCanTouchBuildingTime::TRobFieldUserCanTouchBuildingTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldUserCanTouchBuildingTime)
}

void TRobFieldUserCanTouchBuildingTime::InitAsDefaultInstance() {
}

TRobFieldUserCanTouchBuildingTime::TRobFieldUserCanTouchBuildingTime(const TRobFieldUserCanTouchBuildingTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldUserCanTouchBuildingTime)
}

void TRobFieldUserCanTouchBuildingTime::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = GOOGLE_ULONGLONG(0);
  cantouchms_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldUserCanTouchBuildingTime::~TRobFieldUserCanTouchBuildingTime() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldUserCanTouchBuildingTime)
  SharedDtor();
}

void TRobFieldUserCanTouchBuildingTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRobFieldUserCanTouchBuildingTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldUserCanTouchBuildingTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldUserCanTouchBuildingTime_descriptor_;
}

const TRobFieldUserCanTouchBuildingTime& TRobFieldUserCanTouchBuildingTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldUserCanTouchBuildingTime* TRobFieldUserCanTouchBuildingTime::default_instance_ = NULL;

TRobFieldUserCanTouchBuildingTime* TRobFieldUserCanTouchBuildingTime::New() const {
  return new TRobFieldUserCanTouchBuildingTime;
}

void TRobFieldUserCanTouchBuildingTime::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRobFieldUserCanTouchBuildingTime*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(entityid_, cantouchms_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldUserCanTouchBuildingTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldUserCanTouchBuildingTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 EntityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CanTouchMs;
        break;
      }

      // optional uint64 CanTouchMs = 2;
      case 2: {
        if (tag == 16) {
         parse_CanTouchMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cantouchms_)));
          set_has_cantouchms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldUserCanTouchBuildingTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldUserCanTouchBuildingTime)
  return false;
#undef DO_
}

void TRobFieldUserCanTouchBuildingTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldUserCanTouchBuildingTime)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->entityid(), output);
  }

  // optional uint64 CanTouchMs = 2;
  if (has_cantouchms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cantouchms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldUserCanTouchBuildingTime)
}

::google::protobuf::uint8* TRobFieldUserCanTouchBuildingTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldUserCanTouchBuildingTime)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->entityid(), target);
  }

  // optional uint64 CanTouchMs = 2;
  if (has_cantouchms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cantouchms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldUserCanTouchBuildingTime)
  return target;
}

int TRobFieldUserCanTouchBuildingTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 EntityId = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entityid());
    }

    // optional uint64 CanTouchMs = 2;
    if (has_cantouchms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cantouchms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldUserCanTouchBuildingTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldUserCanTouchBuildingTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldUserCanTouchBuildingTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldUserCanTouchBuildingTime::MergeFrom(const TRobFieldUserCanTouchBuildingTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_cantouchms()) {
      set_cantouchms(from.cantouchms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldUserCanTouchBuildingTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldUserCanTouchBuildingTime::CopyFrom(const TRobFieldUserCanTouchBuildingTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldUserCanTouchBuildingTime::IsInitialized() const {

  return true;
}

void TRobFieldUserCanTouchBuildingTime::Swap(TRobFieldUserCanTouchBuildingTime* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(cantouchms_, other->cantouchms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldUserCanTouchBuildingTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldUserCanTouchBuildingTime_descriptor_;
  metadata.reflection = TRobFieldUserCanTouchBuildingTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldUserAutoTouchConfig::kEntityIdFieldNumber;
const int TRobFieldUserAutoTouchConfig::kIsAutoFieldNumber;
#endif  // !_MSC_VER

TRobFieldUserAutoTouchConfig::TRobFieldUserAutoTouchConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldUserAutoTouchConfig)
}

void TRobFieldUserAutoTouchConfig::InitAsDefaultInstance() {
}

TRobFieldUserAutoTouchConfig::TRobFieldUserAutoTouchConfig(const TRobFieldUserAutoTouchConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldUserAutoTouchConfig)
}

void TRobFieldUserAutoTouchConfig::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = GOOGLE_ULONGLONG(0);
  isauto_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldUserAutoTouchConfig::~TRobFieldUserAutoTouchConfig() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldUserAutoTouchConfig)
  SharedDtor();
}

void TRobFieldUserAutoTouchConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRobFieldUserAutoTouchConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldUserAutoTouchConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldUserAutoTouchConfig_descriptor_;
}

const TRobFieldUserAutoTouchConfig& TRobFieldUserAutoTouchConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldUserAutoTouchConfig* TRobFieldUserAutoTouchConfig::default_instance_ = NULL;

TRobFieldUserAutoTouchConfig* TRobFieldUserAutoTouchConfig::New() const {
  return new TRobFieldUserAutoTouchConfig;
}

void TRobFieldUserAutoTouchConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRobFieldUserAutoTouchConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(entityid_, isauto_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldUserAutoTouchConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldUserAutoTouchConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 EntityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsAuto;
        break;
      }

      // optional bool IsAuto = 2;
      case 2: {
        if (tag == 16) {
         parse_IsAuto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isauto_)));
          set_has_isauto();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldUserAutoTouchConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldUserAutoTouchConfig)
  return false;
#undef DO_
}

void TRobFieldUserAutoTouchConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldUserAutoTouchConfig)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->entityid(), output);
  }

  // optional bool IsAuto = 2;
  if (has_isauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isauto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldUserAutoTouchConfig)
}

::google::protobuf::uint8* TRobFieldUserAutoTouchConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldUserAutoTouchConfig)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->entityid(), target);
  }

  // optional bool IsAuto = 2;
  if (has_isauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isauto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldUserAutoTouchConfig)
  return target;
}

int TRobFieldUserAutoTouchConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 EntityId = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entityid());
    }

    // optional bool IsAuto = 2;
    if (has_isauto()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldUserAutoTouchConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldUserAutoTouchConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldUserAutoTouchConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldUserAutoTouchConfig::MergeFrom(const TRobFieldUserAutoTouchConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_isauto()) {
      set_isauto(from.isauto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldUserAutoTouchConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldUserAutoTouchConfig::CopyFrom(const TRobFieldUserAutoTouchConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldUserAutoTouchConfig::IsInitialized() const {

  return true;
}

void TRobFieldUserAutoTouchConfig::Swap(TRobFieldUserAutoTouchConfig* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(isauto_, other->isauto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldUserAutoTouchConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldUserAutoTouchConfig_descriptor_;
  metadata.reflection = TRobFieldUserAutoTouchConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldPriv::kEntityIdFieldNumber;
const int TRobFieldPriv::kCanReviveTimeMsFieldNumber;
const int TRobFieldPriv::kCanAtkUserTimeMsFieldNumber;
const int TRobFieldPriv::kCanTouchBuildingTimesFieldNumber;
const int TRobFieldPriv::kAutoTouchConfigsFieldNumber;
const int TRobFieldPriv::kScoreFieldNumber;
const int TRobFieldPriv::kKillNumFieldNumber;
const int TRobFieldPriv::kCanMoveTimeMsFieldNumber;
const int TRobFieldPriv::kAttackNumFieldNumber;
#endif  // !_MSC_VER

TRobFieldPriv::TRobFieldPriv()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldPriv)
}

void TRobFieldPriv::InitAsDefaultInstance() {
}

TRobFieldPriv::TRobFieldPriv(const TRobFieldPriv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldPriv)
}

void TRobFieldPriv::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = GOOGLE_ULONGLONG(0);
  canrevivetimems_ = GOOGLE_ULONGLONG(0);
  canatkusertimems_ = GOOGLE_ULONGLONG(0);
  score_ = 0u;
  killnum_ = 0u;
  canmovetimems_ = GOOGLE_ULONGLONG(0);
  attacknum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldPriv::~TRobFieldPriv() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldPriv)
  SharedDtor();
}

void TRobFieldPriv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRobFieldPriv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldPriv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldPriv_descriptor_;
}

const TRobFieldPriv& TRobFieldPriv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldPriv* TRobFieldPriv::default_instance_ = NULL;

TRobFieldPriv* TRobFieldPriv::New() const {
  return new TRobFieldPriv;
}

void TRobFieldPriv::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRobFieldPriv*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 231) {
    ZR_(entityid_, canatkusertimems_);
    ZR_(score_, canmovetimems_);
  }
  attacknum_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  cantouchbuildingtimes_.Clear();
  autotouchconfigs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldPriv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldPriv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 EntityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CanReviveTimeMs;
        break;
      }

      // optional uint64 CanReviveTimeMs = 2;
      case 2: {
        if (tag == 16) {
         parse_CanReviveTimeMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &canrevivetimems_)));
          set_has_canrevivetimems();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CanAtkUserTimeMs;
        break;
      }

      // optional uint64 CanAtkUserTimeMs = 3;
      case 3: {
        if (tag == 24) {
         parse_CanAtkUserTimeMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &canatkusertimems_)));
          set_has_canatkusertimems();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CanTouchBuildingTimes;
        break;
      }

      // repeated .pb.TRobFieldUserCanTouchBuildingTime CanTouchBuildingTimes = 4;
      case 4: {
        if (tag == 34) {
         parse_CanTouchBuildingTimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cantouchbuildingtimes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CanTouchBuildingTimes;
        if (input->ExpectTag(42)) goto parse_AutoTouchConfigs;
        break;
      }

      // repeated .pb.TRobFieldUserAutoTouchConfig AutoTouchConfigs = 5;
      case 5: {
        if (tag == 42) {
         parse_AutoTouchConfigs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_autotouchconfigs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_AutoTouchConfigs;
        if (input->ExpectTag(48)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 6;
      case 6: {
        if (tag == 48) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_KillNum;
        break;
      }

      // optional uint32 KillNum = 7;
      case 7: {
        if (tag == 56) {
         parse_KillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_CanMoveTimeMs;
        break;
      }

      // optional uint64 CanMoveTimeMs = 8;
      case 8: {
        if (tag == 64) {
         parse_CanMoveTimeMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &canmovetimems_)));
          set_has_canmovetimems();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_AttackNum;
        break;
      }

      // optional uint32 AttackNum = 9;
      case 9: {
        if (tag == 72) {
         parse_AttackNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacknum_)));
          set_has_attacknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldPriv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldPriv)
  return false;
#undef DO_
}

void TRobFieldPriv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldPriv)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->entityid(), output);
  }

  // optional uint64 CanReviveTimeMs = 2;
  if (has_canrevivetimems()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->canrevivetimems(), output);
  }

  // optional uint64 CanAtkUserTimeMs = 3;
  if (has_canatkusertimems()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->canatkusertimems(), output);
  }

  // repeated .pb.TRobFieldUserCanTouchBuildingTime CanTouchBuildingTimes = 4;
  for (int i = 0; i < this->cantouchbuildingtimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cantouchbuildingtimes(i), output);
  }

  // repeated .pb.TRobFieldUserAutoTouchConfig AutoTouchConfigs = 5;
  for (int i = 0; i < this->autotouchconfigs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->autotouchconfigs(i), output);
  }

  // optional uint32 Score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->score(), output);
  }

  // optional uint32 KillNum = 7;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->killnum(), output);
  }

  // optional uint64 CanMoveTimeMs = 8;
  if (has_canmovetimems()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->canmovetimems(), output);
  }

  // optional uint32 AttackNum = 9;
  if (has_attacknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->attacknum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldPriv)
}

::google::protobuf::uint8* TRobFieldPriv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldPriv)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->entityid(), target);
  }

  // optional uint64 CanReviveTimeMs = 2;
  if (has_canrevivetimems()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->canrevivetimems(), target);
  }

  // optional uint64 CanAtkUserTimeMs = 3;
  if (has_canatkusertimems()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->canatkusertimems(), target);
  }

  // repeated .pb.TRobFieldUserCanTouchBuildingTime CanTouchBuildingTimes = 4;
  for (int i = 0; i < this->cantouchbuildingtimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cantouchbuildingtimes(i), target);
  }

  // repeated .pb.TRobFieldUserAutoTouchConfig AutoTouchConfigs = 5;
  for (int i = 0; i < this->autotouchconfigs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->autotouchconfigs(i), target);
  }

  // optional uint32 Score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->score(), target);
  }

  // optional uint32 KillNum = 7;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->killnum(), target);
  }

  // optional uint64 CanMoveTimeMs = 8;
  if (has_canmovetimems()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->canmovetimems(), target);
  }

  // optional uint32 AttackNum = 9;
  if (has_attacknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->attacknum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldPriv)
  return target;
}

int TRobFieldPriv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 EntityId = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entityid());
    }

    // optional uint64 CanReviveTimeMs = 2;
    if (has_canrevivetimems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->canrevivetimems());
    }

    // optional uint64 CanAtkUserTimeMs = 3;
    if (has_canatkusertimems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->canatkusertimems());
    }

    // optional uint32 Score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 KillNum = 7;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

    // optional uint64 CanMoveTimeMs = 8;
    if (has_canmovetimems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->canmovetimems());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 AttackNum = 9;
    if (has_attacknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacknum());
    }

  }
  // repeated .pb.TRobFieldUserCanTouchBuildingTime CanTouchBuildingTimes = 4;
  total_size += 1 * this->cantouchbuildingtimes_size();
  for (int i = 0; i < this->cantouchbuildingtimes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cantouchbuildingtimes(i));
  }

  // repeated .pb.TRobFieldUserAutoTouchConfig AutoTouchConfigs = 5;
  total_size += 1 * this->autotouchconfigs_size();
  for (int i = 0; i < this->autotouchconfigs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->autotouchconfigs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldPriv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldPriv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldPriv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldPriv::MergeFrom(const TRobFieldPriv& from) {
  GOOGLE_CHECK_NE(&from, this);
  cantouchbuildingtimes_.MergeFrom(from.cantouchbuildingtimes_);
  autotouchconfigs_.MergeFrom(from.autotouchconfigs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_canrevivetimems()) {
      set_canrevivetimems(from.canrevivetimems());
    }
    if (from.has_canatkusertimems()) {
      set_canatkusertimems(from.canatkusertimems());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_canmovetimems()) {
      set_canmovetimems(from.canmovetimems());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attacknum()) {
      set_attacknum(from.attacknum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldPriv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldPriv::CopyFrom(const TRobFieldPriv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldPriv::IsInitialized() const {

  return true;
}

void TRobFieldPriv::Swap(TRobFieldPriv* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(canrevivetimems_, other->canrevivetimems_);
    std::swap(canatkusertimems_, other->canatkusertimems_);
    cantouchbuildingtimes_.Swap(&other->cantouchbuildingtimes_);
    autotouchconfigs_.Swap(&other->autotouchconfigs_);
    std::swap(score_, other->score_);
    std::swap(killnum_, other->killnum_);
    std::swap(canmovetimems_, other->canmovetimems_);
    std::swap(attacknum_, other->attacknum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldPriv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldPriv_descriptor_;
  metadata.reflection = TRobFieldPriv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldBuildingAttacker::kArmyIdFieldNumber;
const int TRobFieldBuildingAttacker::kDamageFieldNumber;
#endif  // !_MSC_VER

TRobFieldBuildingAttacker::TRobFieldBuildingAttacker()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldBuildingAttacker)
}

void TRobFieldBuildingAttacker::InitAsDefaultInstance() {
}

TRobFieldBuildingAttacker::TRobFieldBuildingAttacker(const TRobFieldBuildingAttacker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldBuildingAttacker)
}

void TRobFieldBuildingAttacker::SharedCtor() {
  _cached_size_ = 0;
  armyid_ = GOOGLE_ULONGLONG(0);
  damage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldBuildingAttacker::~TRobFieldBuildingAttacker() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldBuildingAttacker)
  SharedDtor();
}

void TRobFieldBuildingAttacker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRobFieldBuildingAttacker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldBuildingAttacker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldBuildingAttacker_descriptor_;
}

const TRobFieldBuildingAttacker& TRobFieldBuildingAttacker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldBuildingAttacker* TRobFieldBuildingAttacker::default_instance_ = NULL;

TRobFieldBuildingAttacker* TRobFieldBuildingAttacker::New() const {
  return new TRobFieldBuildingAttacker;
}

void TRobFieldBuildingAttacker::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRobFieldBuildingAttacker*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(armyid_, damage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldBuildingAttacker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldBuildingAttacker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ArmyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &armyid_)));
          set_has_armyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Damage;
        break;
      }

      // optional uint32 Damage = 2;
      case 2: {
        if (tag == 16) {
         parse_Damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldBuildingAttacker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldBuildingAttacker)
  return false;
#undef DO_
}

void TRobFieldBuildingAttacker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldBuildingAttacker)
  // optional uint64 ArmyId = 1;
  if (has_armyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->armyid(), output);
  }

  // optional uint32 Damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldBuildingAttacker)
}

::google::protobuf::uint8* TRobFieldBuildingAttacker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldBuildingAttacker)
  // optional uint64 ArmyId = 1;
  if (has_armyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->armyid(), target);
  }

  // optional uint32 Damage = 2;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldBuildingAttacker)
  return target;
}

int TRobFieldBuildingAttacker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ArmyId = 1;
    if (has_armyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->armyid());
    }

    // optional uint32 Damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldBuildingAttacker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldBuildingAttacker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldBuildingAttacker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldBuildingAttacker::MergeFrom(const TRobFieldBuildingAttacker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_armyid()) {
      set_armyid(from.armyid());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldBuildingAttacker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldBuildingAttacker::CopyFrom(const TRobFieldBuildingAttacker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldBuildingAttacker::IsInitialized() const {

  return true;
}

void TRobFieldBuildingAttacker::Swap(TRobFieldBuildingAttacker* other) {
  if (other != this) {
    std::swap(armyid_, other->armyid_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldBuildingAttacker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldBuildingAttacker_descriptor_;
  metadata.reflection = TRobFieldBuildingAttacker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldBuildingDefender::kArmyIdFieldNumber;
const int TRobFieldBuildingDefender::kRepairFieldNumber;
#endif  // !_MSC_VER

TRobFieldBuildingDefender::TRobFieldBuildingDefender()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldBuildingDefender)
}

void TRobFieldBuildingDefender::InitAsDefaultInstance() {
}

TRobFieldBuildingDefender::TRobFieldBuildingDefender(const TRobFieldBuildingDefender& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldBuildingDefender)
}

void TRobFieldBuildingDefender::SharedCtor() {
  _cached_size_ = 0;
  armyid_ = GOOGLE_ULONGLONG(0);
  repair_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldBuildingDefender::~TRobFieldBuildingDefender() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldBuildingDefender)
  SharedDtor();
}

void TRobFieldBuildingDefender::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRobFieldBuildingDefender::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldBuildingDefender::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldBuildingDefender_descriptor_;
}

const TRobFieldBuildingDefender& TRobFieldBuildingDefender::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldBuildingDefender* TRobFieldBuildingDefender::default_instance_ = NULL;

TRobFieldBuildingDefender* TRobFieldBuildingDefender::New() const {
  return new TRobFieldBuildingDefender;
}

void TRobFieldBuildingDefender::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRobFieldBuildingDefender*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(armyid_, repair_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldBuildingDefender::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldBuildingDefender)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ArmyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &armyid_)));
          set_has_armyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Repair;
        break;
      }

      // optional uint32 Repair = 2;
      case 2: {
        if (tag == 16) {
         parse_Repair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repair_)));
          set_has_repair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldBuildingDefender)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldBuildingDefender)
  return false;
#undef DO_
}

void TRobFieldBuildingDefender::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldBuildingDefender)
  // optional uint64 ArmyId = 1;
  if (has_armyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->armyid(), output);
  }

  // optional uint32 Repair = 2;
  if (has_repair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->repair(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldBuildingDefender)
}

::google::protobuf::uint8* TRobFieldBuildingDefender::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldBuildingDefender)
  // optional uint64 ArmyId = 1;
  if (has_armyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->armyid(), target);
  }

  // optional uint32 Repair = 2;
  if (has_repair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->repair(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldBuildingDefender)
  return target;
}

int TRobFieldBuildingDefender::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ArmyId = 1;
    if (has_armyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->armyid());
    }

    // optional uint32 Repair = 2;
    if (has_repair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repair());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldBuildingDefender::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldBuildingDefender* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldBuildingDefender*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldBuildingDefender::MergeFrom(const TRobFieldBuildingDefender& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_armyid()) {
      set_armyid(from.armyid());
    }
    if (from.has_repair()) {
      set_repair(from.repair());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldBuildingDefender::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldBuildingDefender::CopyFrom(const TRobFieldBuildingDefender& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldBuildingDefender::IsInitialized() const {

  return true;
}

void TRobFieldBuildingDefender::Swap(TRobFieldBuildingDefender* other) {
  if (other != this) {
    std::swap(armyid_, other->armyid_);
    std::swap(repair_, other->repair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldBuildingDefender::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldBuildingDefender_descriptor_;
  metadata.reflection = TRobFieldBuildingDefender_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldBuilding::kEntityIdFieldNumber;
const int TRobFieldBuilding::kArmyIdFieldNumber;
const int TRobFieldBuilding::kOwnerTimeFieldNumber;
const int TRobFieldBuilding::kInitArmyIdFieldNumber;
const int TRobFieldBuilding::kOwnerChangedFieldNumber;
const int TRobFieldBuilding::kMaxHpFieldNumber;
const int TRobFieldBuilding::kCurHpFieldNumber;
const int TRobFieldBuilding::kAttackersFieldNumber;
const int TRobFieldBuilding::kDefenderFieldNumber;
const int TRobFieldBuilding::kLastResumeHpTimeFieldNumber;
#endif  // !_MSC_VER

TRobFieldBuilding::TRobFieldBuilding()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldBuilding)
}

void TRobFieldBuilding::InitAsDefaultInstance() {
  defender_ = const_cast< ::pb::TRobFieldBuildingDefender*>(&::pb::TRobFieldBuildingDefender::default_instance());
}

TRobFieldBuilding::TRobFieldBuilding(const TRobFieldBuilding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldBuilding)
}

void TRobFieldBuilding::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = GOOGLE_ULONGLONG(0);
  armyid_ = GOOGLE_ULONGLONG(0);
  ownertime_ = GOOGLE_ULONGLONG(0);
  initarmyid_ = GOOGLE_ULONGLONG(0);
  ownerchanged_ = false;
  maxhp_ = 0u;
  curhp_ = 0u;
  defender_ = NULL;
  lastresumehptime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldBuilding::~TRobFieldBuilding() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldBuilding)
  SharedDtor();
}

void TRobFieldBuilding::SharedDtor() {
  if (this != default_instance_) {
    delete defender_;
  }
}

void TRobFieldBuilding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldBuilding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldBuilding_descriptor_;
}

const TRobFieldBuilding& TRobFieldBuilding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldBuilding* TRobFieldBuilding::default_instance_ = NULL;

TRobFieldBuilding* TRobFieldBuilding::New() const {
  return new TRobFieldBuilding;
}

void TRobFieldBuilding::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRobFieldBuilding*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(entityid_, maxhp_);
    curhp_ = 0u;
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_defender()) {
      if (defender_ != NULL) defender_->::pb::TRobFieldBuildingDefender::Clear();
    }
    lastresumehptime_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attackers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldBuilding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldBuilding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 EntityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ArmyId;
        break;
      }

      // optional uint64 ArmyId = 2;
      case 2: {
        if (tag == 16) {
         parse_ArmyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &armyid_)));
          set_has_armyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_OwnerTime;
        break;
      }

      // optional uint64 OwnerTime = 3;
      case 3: {
        if (tag == 24) {
         parse_OwnerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownertime_)));
          set_has_ownertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_InitArmyId;
        break;
      }

      // optional uint64 InitArmyId = 4;
      case 4: {
        if (tag == 32) {
         parse_InitArmyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &initarmyid_)));
          set_has_initarmyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_OwnerChanged;
        break;
      }

      // optional bool OwnerChanged = 5;
      case 5: {
        if (tag == 40) {
         parse_OwnerChanged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ownerchanged_)));
          set_has_ownerchanged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_MaxHp;
        break;
      }

      // optional uint32 MaxHp = 6;
      case 6: {
        if (tag == 48) {
         parse_MaxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_CurHp;
        break;
      }

      // optional uint32 CurHp = 7;
      case 7: {
        if (tag == 56) {
         parse_CurHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Attackers;
        break;
      }

      // repeated .pb.TRobFieldBuildingAttacker Attackers = 8;
      case 8: {
        if (tag == 66) {
         parse_Attackers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attackers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Attackers;
        if (input->ExpectTag(74)) goto parse_Defender;
        break;
      }

      // optional .pb.TRobFieldBuildingDefender Defender = 9;
      case 9: {
        if (tag == 74) {
         parse_Defender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defender()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_LastResumeHpTime;
        break;
      }

      // optional uint64 LastResumeHpTime = 10;
      case 10: {
        if (tag == 80) {
         parse_LastResumeHpTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastresumehptime_)));
          set_has_lastresumehptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldBuilding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldBuilding)
  return false;
#undef DO_
}

void TRobFieldBuilding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldBuilding)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->entityid(), output);
  }

  // optional uint64 ArmyId = 2;
  if (has_armyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->armyid(), output);
  }

  // optional uint64 OwnerTime = 3;
  if (has_ownertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ownertime(), output);
  }

  // optional uint64 InitArmyId = 4;
  if (has_initarmyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->initarmyid(), output);
  }

  // optional bool OwnerChanged = 5;
  if (has_ownerchanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ownerchanged(), output);
  }

  // optional uint32 MaxHp = 6;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->maxhp(), output);
  }

  // optional uint32 CurHp = 7;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->curhp(), output);
  }

  // repeated .pb.TRobFieldBuildingAttacker Attackers = 8;
  for (int i = 0; i < this->attackers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->attackers(i), output);
  }

  // optional .pb.TRobFieldBuildingDefender Defender = 9;
  if (has_defender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->defender(), output);
  }

  // optional uint64 LastResumeHpTime = 10;
  if (has_lastresumehptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->lastresumehptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldBuilding)
}

::google::protobuf::uint8* TRobFieldBuilding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldBuilding)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->entityid(), target);
  }

  // optional uint64 ArmyId = 2;
  if (has_armyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->armyid(), target);
  }

  // optional uint64 OwnerTime = 3;
  if (has_ownertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ownertime(), target);
  }

  // optional uint64 InitArmyId = 4;
  if (has_initarmyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->initarmyid(), target);
  }

  // optional bool OwnerChanged = 5;
  if (has_ownerchanged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ownerchanged(), target);
  }

  // optional uint32 MaxHp = 6;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->maxhp(), target);
  }

  // optional uint32 CurHp = 7;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->curhp(), target);
  }

  // repeated .pb.TRobFieldBuildingAttacker Attackers = 8;
  for (int i = 0; i < this->attackers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->attackers(i), target);
  }

  // optional .pb.TRobFieldBuildingDefender Defender = 9;
  if (has_defender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->defender(), target);
  }

  // optional uint64 LastResumeHpTime = 10;
  if (has_lastresumehptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->lastresumehptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldBuilding)
  return target;
}

int TRobFieldBuilding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 EntityId = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entityid());
    }

    // optional uint64 ArmyId = 2;
    if (has_armyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->armyid());
    }

    // optional uint64 OwnerTime = 3;
    if (has_ownertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownertime());
    }

    // optional uint64 InitArmyId = 4;
    if (has_initarmyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->initarmyid());
    }

    // optional bool OwnerChanged = 5;
    if (has_ownerchanged()) {
      total_size += 1 + 1;
    }

    // optional uint32 MaxHp = 6;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

    // optional uint32 CurHp = 7;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curhp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.TRobFieldBuildingDefender Defender = 9;
    if (has_defender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defender());
    }

    // optional uint64 LastResumeHpTime = 10;
    if (has_lastresumehptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastresumehptime());
    }

  }
  // repeated .pb.TRobFieldBuildingAttacker Attackers = 8;
  total_size += 1 * this->attackers_size();
  for (int i = 0; i < this->attackers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attackers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldBuilding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldBuilding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldBuilding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldBuilding::MergeFrom(const TRobFieldBuilding& from) {
  GOOGLE_CHECK_NE(&from, this);
  attackers_.MergeFrom(from.attackers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_armyid()) {
      set_armyid(from.armyid());
    }
    if (from.has_ownertime()) {
      set_ownertime(from.ownertime());
    }
    if (from.has_initarmyid()) {
      set_initarmyid(from.initarmyid());
    }
    if (from.has_ownerchanged()) {
      set_ownerchanged(from.ownerchanged());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_defender()) {
      mutable_defender()->::pb::TRobFieldBuildingDefender::MergeFrom(from.defender());
    }
    if (from.has_lastresumehptime()) {
      set_lastresumehptime(from.lastresumehptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldBuilding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldBuilding::CopyFrom(const TRobFieldBuilding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldBuilding::IsInitialized() const {

  return true;
}

void TRobFieldBuilding::Swap(TRobFieldBuilding* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(armyid_, other->armyid_);
    std::swap(ownertime_, other->ownertime_);
    std::swap(initarmyid_, other->initarmyid_);
    std::swap(ownerchanged_, other->ownerchanged_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(curhp_, other->curhp_);
    attackers_.Swap(&other->attackers_);
    std::swap(defender_, other->defender_);
    std::swap(lastresumehptime_, other->lastresumehptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldBuilding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldBuilding_descriptor_;
  metadata.reflection = TRobFieldBuilding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldEventUserEnter::kEntityIdFieldNumber;
const int TRobFieldEventUserEnter::kUserFieldNumber;
#endif  // !_MSC_VER

TRobFieldEventUserEnter::TRobFieldEventUserEnter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldEventUserEnter)
}

void TRobFieldEventUserEnter::InitAsDefaultInstance() {
  user_ = const_cast< ::pb::TRobFieldUser*>(&::pb::TRobFieldUser::default_instance());
}

TRobFieldEventUserEnter::TRobFieldEventUserEnter(const TRobFieldEventUserEnter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldEventUserEnter)
}

void TRobFieldEventUserEnter::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = GOOGLE_ULONGLONG(0);
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldEventUserEnter::~TRobFieldEventUserEnter() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldEventUserEnter)
  SharedDtor();
}

void TRobFieldEventUserEnter::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void TRobFieldEventUserEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldEventUserEnter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldEventUserEnter_descriptor_;
}

const TRobFieldEventUserEnter& TRobFieldEventUserEnter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldEventUserEnter* TRobFieldEventUserEnter::default_instance_ = NULL;

TRobFieldEventUserEnter* TRobFieldEventUserEnter::New() const {
  return new TRobFieldEventUserEnter;
}

void TRobFieldEventUserEnter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    entityid_ = GOOGLE_ULONGLONG(0);
    if (has_user()) {
      if (user_ != NULL) user_->::pb::TRobFieldUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldEventUserEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldEventUserEnter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 EntityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_User;
        break;
      }

      // optional .pb.TRobFieldUser User = 2;
      case 2: {
        if (tag == 18) {
         parse_User:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldEventUserEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldEventUserEnter)
  return false;
#undef DO_
}

void TRobFieldEventUserEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldEventUserEnter)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->entityid(), output);
  }

  // optional .pb.TRobFieldUser User = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldEventUserEnter)
}

::google::protobuf::uint8* TRobFieldEventUserEnter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldEventUserEnter)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->entityid(), target);
  }

  // optional .pb.TRobFieldUser User = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldEventUserEnter)
  return target;
}

int TRobFieldEventUserEnter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 EntityId = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entityid());
    }

    // optional .pb.TRobFieldUser User = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldEventUserEnter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldEventUserEnter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldEventUserEnter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldEventUserEnter::MergeFrom(const TRobFieldEventUserEnter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_user()) {
      mutable_user()->::pb::TRobFieldUser::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldEventUserEnter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldEventUserEnter::CopyFrom(const TRobFieldEventUserEnter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldEventUserEnter::IsInitialized() const {

  return true;
}

void TRobFieldEventUserEnter::Swap(TRobFieldEventUserEnter* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldEventUserEnter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldEventUserEnter_descriptor_;
  metadata.reflection = TRobFieldEventUserEnter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldEventUserLeave::kEntityIdFieldNumber;
#endif  // !_MSC_VER

TRobFieldEventUserLeave::TRobFieldEventUserLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldEventUserLeave)
}

void TRobFieldEventUserLeave::InitAsDefaultInstance() {
}

TRobFieldEventUserLeave::TRobFieldEventUserLeave(const TRobFieldEventUserLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldEventUserLeave)
}

void TRobFieldEventUserLeave::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldEventUserLeave::~TRobFieldEventUserLeave() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldEventUserLeave)
  SharedDtor();
}

void TRobFieldEventUserLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRobFieldEventUserLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldEventUserLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldEventUserLeave_descriptor_;
}

const TRobFieldEventUserLeave& TRobFieldEventUserLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldEventUserLeave* TRobFieldEventUserLeave::default_instance_ = NULL;

TRobFieldEventUserLeave* TRobFieldEventUserLeave::New() const {
  return new TRobFieldEventUserLeave;
}

void TRobFieldEventUserLeave::Clear() {
  entityid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldEventUserLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldEventUserLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 EntityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldEventUserLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldEventUserLeave)
  return false;
#undef DO_
}

void TRobFieldEventUserLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldEventUserLeave)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->entityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldEventUserLeave)
}

::google::protobuf::uint8* TRobFieldEventUserLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldEventUserLeave)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->entityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldEventUserLeave)
  return target;
}

int TRobFieldEventUserLeave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 EntityId = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldEventUserLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldEventUserLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldEventUserLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldEventUserLeave::MergeFrom(const TRobFieldEventUserLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldEventUserLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldEventUserLeave::CopyFrom(const TRobFieldEventUserLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldEventUserLeave::IsInitialized() const {

  return true;
}

void TRobFieldEventUserLeave::Swap(TRobFieldEventUserLeave* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldEventUserLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldEventUserLeave_descriptor_;
  metadata.reflection = TRobFieldEventUserLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldEventUserMove::kEntityIdFieldNumber;
const int TRobFieldEventUserMove::kCurPosFieldNumber;
const int TRobFieldEventUserMove::kEndPosFieldNumber;
#endif  // !_MSC_VER

TRobFieldEventUserMove::TRobFieldEventUserMove()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldEventUserMove)
}

void TRobFieldEventUserMove::InitAsDefaultInstance() {
  curpos_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
  endpos_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
}

TRobFieldEventUserMove::TRobFieldEventUserMove(const TRobFieldEventUserMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldEventUserMove)
}

void TRobFieldEventUserMove::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = GOOGLE_ULONGLONG(0);
  curpos_ = NULL;
  endpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldEventUserMove::~TRobFieldEventUserMove() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldEventUserMove)
  SharedDtor();
}

void TRobFieldEventUserMove::SharedDtor() {
  if (this != default_instance_) {
    delete curpos_;
    delete endpos_;
  }
}

void TRobFieldEventUserMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldEventUserMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldEventUserMove_descriptor_;
}

const TRobFieldEventUserMove& TRobFieldEventUserMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldEventUserMove* TRobFieldEventUserMove::default_instance_ = NULL;

TRobFieldEventUserMove* TRobFieldEventUserMove::New() const {
  return new TRobFieldEventUserMove;
}

void TRobFieldEventUserMove::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    entityid_ = GOOGLE_ULONGLONG(0);
    if (has_curpos()) {
      if (curpos_ != NULL) curpos_->::pb::PbVector2_Int::Clear();
    }
    if (has_endpos()) {
      if (endpos_ != NULL) endpos_->::pb::PbVector2_Int::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldEventUserMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldEventUserMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 EntityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CurPos;
        break;
      }

      // optional .pb.PbVector2_Int CurPos = 2;
      case 2: {
        if (tag == 18) {
         parse_CurPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_EndPos;
        break;
      }

      // optional .pb.PbVector2_Int EndPos = 3;
      case 3: {
        if (tag == 26) {
         parse_EndPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldEventUserMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldEventUserMove)
  return false;
#undef DO_
}

void TRobFieldEventUserMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldEventUserMove)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->entityid(), output);
  }

  // optional .pb.PbVector2_Int CurPos = 2;
  if (has_curpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->curpos(), output);
  }

  // optional .pb.PbVector2_Int EndPos = 3;
  if (has_endpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->endpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldEventUserMove)
}

::google::protobuf::uint8* TRobFieldEventUserMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldEventUserMove)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->entityid(), target);
  }

  // optional .pb.PbVector2_Int CurPos = 2;
  if (has_curpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->curpos(), target);
  }

  // optional .pb.PbVector2_Int EndPos = 3;
  if (has_endpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->endpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldEventUserMove)
  return target;
}

int TRobFieldEventUserMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 EntityId = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entityid());
    }

    // optional .pb.PbVector2_Int CurPos = 2;
    if (has_curpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curpos());
    }

    // optional .pb.PbVector2_Int EndPos = 3;
    if (has_endpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldEventUserMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldEventUserMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldEventUserMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldEventUserMove::MergeFrom(const TRobFieldEventUserMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_curpos()) {
      mutable_curpos()->::pb::PbVector2_Int::MergeFrom(from.curpos());
    }
    if (from.has_endpos()) {
      mutable_endpos()->::pb::PbVector2_Int::MergeFrom(from.endpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldEventUserMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldEventUserMove::CopyFrom(const TRobFieldEventUserMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldEventUserMove::IsInitialized() const {

  return true;
}

void TRobFieldEventUserMove::Swap(TRobFieldEventUserMove* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(curpos_, other->curpos_);
    std::swap(endpos_, other->endpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldEventUserMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldEventUserMove_descriptor_;
  metadata.reflection = TRobFieldEventUserMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldEventUserFight::kAtkEntityIdFieldNumber;
const int TRobFieldEventUserFight::kAtkPostHpFieldNumber;
const int TRobFieldEventUserFight::kDefEntityIdFieldNumber;
const int TRobFieldEventUserFight::kDefPostHpFieldNumber;
const int TRobFieldEventUserFight::kIsAtkWinFieldNumber;
#endif  // !_MSC_VER

TRobFieldEventUserFight::TRobFieldEventUserFight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldEventUserFight)
}

void TRobFieldEventUserFight::InitAsDefaultInstance() {
}

TRobFieldEventUserFight::TRobFieldEventUserFight(const TRobFieldEventUserFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldEventUserFight)
}

void TRobFieldEventUserFight::SharedCtor() {
  _cached_size_ = 0;
  atkentityid_ = GOOGLE_ULONGLONG(0);
  atkposthp_ = 0u;
  defentityid_ = GOOGLE_ULONGLONG(0);
  defposthp_ = 0u;
  isatkwin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldEventUserFight::~TRobFieldEventUserFight() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldEventUserFight)
  SharedDtor();
}

void TRobFieldEventUserFight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRobFieldEventUserFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldEventUserFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldEventUserFight_descriptor_;
}

const TRobFieldEventUserFight& TRobFieldEventUserFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldEventUserFight* TRobFieldEventUserFight::default_instance_ = NULL;

TRobFieldEventUserFight* TRobFieldEventUserFight::New() const {
  return new TRobFieldEventUserFight;
}

void TRobFieldEventUserFight::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRobFieldEventUserFight*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(atkentityid_, isatkwin_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldEventUserFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldEventUserFight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 AtkEntityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &atkentityid_)));
          set_has_atkentityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AtkPostHp;
        break;
      }

      // optional uint32 AtkPostHp = 2;
      case 2: {
        if (tag == 16) {
         parse_AtkPostHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkposthp_)));
          set_has_atkposthp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DefEntityId;
        break;
      }

      // optional uint64 DefEntityId = 3;
      case 3: {
        if (tag == 24) {
         parse_DefEntityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &defentityid_)));
          set_has_defentityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DefPostHp;
        break;
      }

      // optional uint32 DefPostHp = 4;
      case 4: {
        if (tag == 32) {
         parse_DefPostHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defposthp_)));
          set_has_defposthp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_IsAtkWin;
        break;
      }

      // optional bool IsAtkWin = 5;
      case 5: {
        if (tag == 40) {
         parse_IsAtkWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isatkwin_)));
          set_has_isatkwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldEventUserFight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldEventUserFight)
  return false;
#undef DO_
}

void TRobFieldEventUserFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldEventUserFight)
  // optional uint64 AtkEntityId = 1;
  if (has_atkentityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->atkentityid(), output);
  }

  // optional uint32 AtkPostHp = 2;
  if (has_atkposthp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->atkposthp(), output);
  }

  // optional uint64 DefEntityId = 3;
  if (has_defentityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->defentityid(), output);
  }

  // optional uint32 DefPostHp = 4;
  if (has_defposthp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->defposthp(), output);
  }

  // optional bool IsAtkWin = 5;
  if (has_isatkwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isatkwin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldEventUserFight)
}

::google::protobuf::uint8* TRobFieldEventUserFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldEventUserFight)
  // optional uint64 AtkEntityId = 1;
  if (has_atkentityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->atkentityid(), target);
  }

  // optional uint32 AtkPostHp = 2;
  if (has_atkposthp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->atkposthp(), target);
  }

  // optional uint64 DefEntityId = 3;
  if (has_defentityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->defentityid(), target);
  }

  // optional uint32 DefPostHp = 4;
  if (has_defposthp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->defposthp(), target);
  }

  // optional bool IsAtkWin = 5;
  if (has_isatkwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isatkwin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldEventUserFight)
  return target;
}

int TRobFieldEventUserFight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 AtkEntityId = 1;
    if (has_atkentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->atkentityid());
    }

    // optional uint32 AtkPostHp = 2;
    if (has_atkposthp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkposthp());
    }

    // optional uint64 DefEntityId = 3;
    if (has_defentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->defentityid());
    }

    // optional uint32 DefPostHp = 4;
    if (has_defposthp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defposthp());
    }

    // optional bool IsAtkWin = 5;
    if (has_isatkwin()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldEventUserFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldEventUserFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldEventUserFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldEventUserFight::MergeFrom(const TRobFieldEventUserFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atkentityid()) {
      set_atkentityid(from.atkentityid());
    }
    if (from.has_atkposthp()) {
      set_atkposthp(from.atkposthp());
    }
    if (from.has_defentityid()) {
      set_defentityid(from.defentityid());
    }
    if (from.has_defposthp()) {
      set_defposthp(from.defposthp());
    }
    if (from.has_isatkwin()) {
      set_isatkwin(from.isatkwin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldEventUserFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldEventUserFight::CopyFrom(const TRobFieldEventUserFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldEventUserFight::IsInitialized() const {

  return true;
}

void TRobFieldEventUserFight::Swap(TRobFieldEventUserFight* other) {
  if (other != this) {
    std::swap(atkentityid_, other->atkentityid_);
    std::swap(atkposthp_, other->atkposthp_);
    std::swap(defentityid_, other->defentityid_);
    std::swap(defposthp_, other->defposthp_);
    std::swap(isatkwin_, other->isatkwin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldEventUserFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldEventUserFight_descriptor_;
  metadata.reflection = TRobFieldEventUserFight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldEventUserTouch::kUserEntityIdFieldNumber;
const int TRobFieldEventUserTouch::kUserPostHpFieldNumber;
const int TRobFieldEventUserTouch::kBuildingEntityIdFieldNumber;
const int TRobFieldEventUserTouch::kBuildingPostHpFieldNumber;
const int TRobFieldEventUserTouch::kIsDestroyFieldNumber;
const int TRobFieldEventUserTouch::kDeltaHpFieldNumber;
#endif  // !_MSC_VER

TRobFieldEventUserTouch::TRobFieldEventUserTouch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldEventUserTouch)
}

void TRobFieldEventUserTouch::InitAsDefaultInstance() {
}

TRobFieldEventUserTouch::TRobFieldEventUserTouch(const TRobFieldEventUserTouch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldEventUserTouch)
}

void TRobFieldEventUserTouch::SharedCtor() {
  _cached_size_ = 0;
  userentityid_ = GOOGLE_ULONGLONG(0);
  userposthp_ = 0u;
  buildingentityid_ = GOOGLE_ULONGLONG(0);
  buildingposthp_ = 0u;
  isdestroy_ = false;
  deltahp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldEventUserTouch::~TRobFieldEventUserTouch() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldEventUserTouch)
  SharedDtor();
}

void TRobFieldEventUserTouch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRobFieldEventUserTouch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldEventUserTouch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldEventUserTouch_descriptor_;
}

const TRobFieldEventUserTouch& TRobFieldEventUserTouch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldEventUserTouch* TRobFieldEventUserTouch::default_instance_ = NULL;

TRobFieldEventUserTouch* TRobFieldEventUserTouch::New() const {
  return new TRobFieldEventUserTouch;
}

void TRobFieldEventUserTouch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRobFieldEventUserTouch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(userentityid_, deltahp_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldEventUserTouch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldEventUserTouch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 UserEntityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userentityid_)));
          set_has_userentityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UserPostHp;
        break;
      }

      // optional uint32 UserPostHp = 2;
      case 2: {
        if (tag == 16) {
         parse_UserPostHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userposthp_)));
          set_has_userposthp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BuildingEntityId;
        break;
      }

      // optional uint64 BuildingEntityId = 3;
      case 3: {
        if (tag == 24) {
         parse_BuildingEntityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buildingentityid_)));
          set_has_buildingentityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BuildingPostHp;
        break;
      }

      // optional uint32 BuildingPostHp = 4;
      case 4: {
        if (tag == 32) {
         parse_BuildingPostHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildingposthp_)));
          set_has_buildingposthp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_IsDestroy;
        break;
      }

      // optional bool IsDestroy = 5;
      case 5: {
        if (tag == 40) {
         parse_IsDestroy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdestroy_)));
          set_has_isdestroy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_DeltaHp;
        break;
      }

      // optional uint32 DeltaHp = 6;
      case 6: {
        if (tag == 48) {
         parse_DeltaHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deltahp_)));
          set_has_deltahp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldEventUserTouch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldEventUserTouch)
  return false;
#undef DO_
}

void TRobFieldEventUserTouch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldEventUserTouch)
  // optional uint64 UserEntityId = 1;
  if (has_userentityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userentityid(), output);
  }

  // optional uint32 UserPostHp = 2;
  if (has_userposthp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userposthp(), output);
  }

  // optional uint64 BuildingEntityId = 3;
  if (has_buildingentityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->buildingentityid(), output);
  }

  // optional uint32 BuildingPostHp = 4;
  if (has_buildingposthp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buildingposthp(), output);
  }

  // optional bool IsDestroy = 5;
  if (has_isdestroy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isdestroy(), output);
  }

  // optional uint32 DeltaHp = 6;
  if (has_deltahp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->deltahp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldEventUserTouch)
}

::google::protobuf::uint8* TRobFieldEventUserTouch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldEventUserTouch)
  // optional uint64 UserEntityId = 1;
  if (has_userentityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userentityid(), target);
  }

  // optional uint32 UserPostHp = 2;
  if (has_userposthp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userposthp(), target);
  }

  // optional uint64 BuildingEntityId = 3;
  if (has_buildingentityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->buildingentityid(), target);
  }

  // optional uint32 BuildingPostHp = 4;
  if (has_buildingposthp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buildingposthp(), target);
  }

  // optional bool IsDestroy = 5;
  if (has_isdestroy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isdestroy(), target);
  }

  // optional uint32 DeltaHp = 6;
  if (has_deltahp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->deltahp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldEventUserTouch)
  return target;
}

int TRobFieldEventUserTouch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 UserEntityId = 1;
    if (has_userentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userentityid());
    }

    // optional uint32 UserPostHp = 2;
    if (has_userposthp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userposthp());
    }

    // optional uint64 BuildingEntityId = 3;
    if (has_buildingentityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buildingentityid());
    }

    // optional uint32 BuildingPostHp = 4;
    if (has_buildingposthp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildingposthp());
    }

    // optional bool IsDestroy = 5;
    if (has_isdestroy()) {
      total_size += 1 + 1;
    }

    // optional uint32 DeltaHp = 6;
    if (has_deltahp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deltahp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldEventUserTouch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldEventUserTouch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldEventUserTouch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldEventUserTouch::MergeFrom(const TRobFieldEventUserTouch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userentityid()) {
      set_userentityid(from.userentityid());
    }
    if (from.has_userposthp()) {
      set_userposthp(from.userposthp());
    }
    if (from.has_buildingentityid()) {
      set_buildingentityid(from.buildingentityid());
    }
    if (from.has_buildingposthp()) {
      set_buildingposthp(from.buildingposthp());
    }
    if (from.has_isdestroy()) {
      set_isdestroy(from.isdestroy());
    }
    if (from.has_deltahp()) {
      set_deltahp(from.deltahp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldEventUserTouch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldEventUserTouch::CopyFrom(const TRobFieldEventUserTouch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldEventUserTouch::IsInitialized() const {

  return true;
}

void TRobFieldEventUserTouch::Swap(TRobFieldEventUserTouch* other) {
  if (other != this) {
    std::swap(userentityid_, other->userentityid_);
    std::swap(userposthp_, other->userposthp_);
    std::swap(buildingentityid_, other->buildingentityid_);
    std::swap(buildingposthp_, other->buildingposthp_);
    std::swap(isdestroy_, other->isdestroy_);
    std::swap(deltahp_, other->deltahp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldEventUserTouch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldEventUserTouch_descriptor_;
  metadata.reflection = TRobFieldEventUserTouch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldEventUserRevive::kEntityIdFieldNumber;
const int TRobFieldEventUserRevive::kRevivePosFieldNumber;
#endif  // !_MSC_VER

TRobFieldEventUserRevive::TRobFieldEventUserRevive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldEventUserRevive)
}

void TRobFieldEventUserRevive::InitAsDefaultInstance() {
  revivepos_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
}

TRobFieldEventUserRevive::TRobFieldEventUserRevive(const TRobFieldEventUserRevive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldEventUserRevive)
}

void TRobFieldEventUserRevive::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = GOOGLE_ULONGLONG(0);
  revivepos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldEventUserRevive::~TRobFieldEventUserRevive() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldEventUserRevive)
  SharedDtor();
}

void TRobFieldEventUserRevive::SharedDtor() {
  if (this != default_instance_) {
    delete revivepos_;
  }
}

void TRobFieldEventUserRevive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldEventUserRevive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldEventUserRevive_descriptor_;
}

const TRobFieldEventUserRevive& TRobFieldEventUserRevive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldEventUserRevive* TRobFieldEventUserRevive::default_instance_ = NULL;

TRobFieldEventUserRevive* TRobFieldEventUserRevive::New() const {
  return new TRobFieldEventUserRevive;
}

void TRobFieldEventUserRevive::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    entityid_ = GOOGLE_ULONGLONG(0);
    if (has_revivepos()) {
      if (revivepos_ != NULL) revivepos_->::pb::PbVector2_Int::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldEventUserRevive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldEventUserRevive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 EntityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RevivePos;
        break;
      }

      // optional .pb.PbVector2_Int RevivePos = 2;
      case 2: {
        if (tag == 18) {
         parse_RevivePos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revivepos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldEventUserRevive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldEventUserRevive)
  return false;
#undef DO_
}

void TRobFieldEventUserRevive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldEventUserRevive)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->entityid(), output);
  }

  // optional .pb.PbVector2_Int RevivePos = 2;
  if (has_revivepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->revivepos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldEventUserRevive)
}

::google::protobuf::uint8* TRobFieldEventUserRevive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldEventUserRevive)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->entityid(), target);
  }

  // optional .pb.PbVector2_Int RevivePos = 2;
  if (has_revivepos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->revivepos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldEventUserRevive)
  return target;
}

int TRobFieldEventUserRevive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 EntityId = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entityid());
    }

    // optional .pb.PbVector2_Int RevivePos = 2;
    if (has_revivepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revivepos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldEventUserRevive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldEventUserRevive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldEventUserRevive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldEventUserRevive::MergeFrom(const TRobFieldEventUserRevive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_revivepos()) {
      mutable_revivepos()->::pb::PbVector2_Int::MergeFrom(from.revivepos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldEventUserRevive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldEventUserRevive::CopyFrom(const TRobFieldEventUserRevive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldEventUserRevive::IsInitialized() const {

  return true;
}

void TRobFieldEventUserRevive::Swap(TRobFieldEventUserRevive* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(revivepos_, other->revivepos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldEventUserRevive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldEventUserRevive_descriptor_;
  metadata.reflection = TRobFieldEventUserRevive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldEventUserKillNum::kEntityIdFieldNumber;
const int TRobFieldEventUserKillNum::kKillNumFieldNumber;
#endif  // !_MSC_VER

TRobFieldEventUserKillNum::TRobFieldEventUserKillNum()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldEventUserKillNum)
}

void TRobFieldEventUserKillNum::InitAsDefaultInstance() {
}

TRobFieldEventUserKillNum::TRobFieldEventUserKillNum(const TRobFieldEventUserKillNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldEventUserKillNum)
}

void TRobFieldEventUserKillNum::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = GOOGLE_ULONGLONG(0);
  killnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldEventUserKillNum::~TRobFieldEventUserKillNum() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldEventUserKillNum)
  SharedDtor();
}

void TRobFieldEventUserKillNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRobFieldEventUserKillNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldEventUserKillNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldEventUserKillNum_descriptor_;
}

const TRobFieldEventUserKillNum& TRobFieldEventUserKillNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldEventUserKillNum* TRobFieldEventUserKillNum::default_instance_ = NULL;

TRobFieldEventUserKillNum* TRobFieldEventUserKillNum::New() const {
  return new TRobFieldEventUserKillNum;
}

void TRobFieldEventUserKillNum::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRobFieldEventUserKillNum*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(entityid_, killnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldEventUserKillNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldEventUserKillNum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 EntityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_KillNum;
        break;
      }

      // optional uint32 KillNum = 2;
      case 2: {
        if (tag == 16) {
         parse_KillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldEventUserKillNum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldEventUserKillNum)
  return false;
#undef DO_
}

void TRobFieldEventUserKillNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldEventUserKillNum)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->entityid(), output);
  }

  // optional uint32 KillNum = 2;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->killnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldEventUserKillNum)
}

::google::protobuf::uint8* TRobFieldEventUserKillNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldEventUserKillNum)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->entityid(), target);
  }

  // optional uint32 KillNum = 2;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->killnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldEventUserKillNum)
  return target;
}

int TRobFieldEventUserKillNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 EntityId = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entityid());
    }

    // optional uint32 KillNum = 2;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldEventUserKillNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldEventUserKillNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldEventUserKillNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldEventUserKillNum::MergeFrom(const TRobFieldEventUserKillNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldEventUserKillNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldEventUserKillNum::CopyFrom(const TRobFieldEventUserKillNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldEventUserKillNum::IsInitialized() const {

  return true;
}

void TRobFieldEventUserKillNum::Swap(TRobFieldEventUserKillNum* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(killnum_, other->killnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldEventUserKillNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldEventUserKillNum_descriptor_;
  metadata.reflection = TRobFieldEventUserKillNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldEventUserHpChange::kEntityIdFieldNumber;
const int TRobFieldEventUserHpChange::kCurHpFieldNumber;
#endif  // !_MSC_VER

TRobFieldEventUserHpChange::TRobFieldEventUserHpChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldEventUserHpChange)
}

void TRobFieldEventUserHpChange::InitAsDefaultInstance() {
}

TRobFieldEventUserHpChange::TRobFieldEventUserHpChange(const TRobFieldEventUserHpChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldEventUserHpChange)
}

void TRobFieldEventUserHpChange::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = GOOGLE_ULONGLONG(0);
  curhp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldEventUserHpChange::~TRobFieldEventUserHpChange() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldEventUserHpChange)
  SharedDtor();
}

void TRobFieldEventUserHpChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRobFieldEventUserHpChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldEventUserHpChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldEventUserHpChange_descriptor_;
}

const TRobFieldEventUserHpChange& TRobFieldEventUserHpChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldEventUserHpChange* TRobFieldEventUserHpChange::default_instance_ = NULL;

TRobFieldEventUserHpChange* TRobFieldEventUserHpChange::New() const {
  return new TRobFieldEventUserHpChange;
}

void TRobFieldEventUserHpChange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRobFieldEventUserHpChange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(entityid_, curhp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldEventUserHpChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldEventUserHpChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 EntityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CurHp;
        break;
      }

      // optional uint32 CurHp = 2;
      case 2: {
        if (tag == 16) {
         parse_CurHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldEventUserHpChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldEventUserHpChange)
  return false;
#undef DO_
}

void TRobFieldEventUserHpChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldEventUserHpChange)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->entityid(), output);
  }

  // optional uint32 CurHp = 2;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curhp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldEventUserHpChange)
}

::google::protobuf::uint8* TRobFieldEventUserHpChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldEventUserHpChange)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->entityid(), target);
  }

  // optional uint32 CurHp = 2;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curhp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldEventUserHpChange)
  return target;
}

int TRobFieldEventUserHpChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 EntityId = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entityid());
    }

    // optional uint32 CurHp = 2;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curhp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldEventUserHpChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldEventUserHpChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldEventUserHpChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldEventUserHpChange::MergeFrom(const TRobFieldEventUserHpChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldEventUserHpChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldEventUserHpChange::CopyFrom(const TRobFieldEventUserHpChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldEventUserHpChange::IsInitialized() const {

  return true;
}

void TRobFieldEventUserHpChange::Swap(TRobFieldEventUserHpChange* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(curhp_, other->curhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldEventUserHpChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldEventUserHpChange_descriptor_;
  metadata.reflection = TRobFieldEventUserHpChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldEventArmyGoalChange::kArmyIdFieldNumber;
const int TRobFieldEventArmyGoalChange::kGoalFieldNumber;
const int TRobFieldEventArmyGoalChange::kChangerFieldNumber;
#endif  // !_MSC_VER

TRobFieldEventArmyGoalChange::TRobFieldEventArmyGoalChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldEventArmyGoalChange)
}

void TRobFieldEventArmyGoalChange::InitAsDefaultInstance() {
}

TRobFieldEventArmyGoalChange::TRobFieldEventArmyGoalChange(const TRobFieldEventArmyGoalChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldEventArmyGoalChange)
}

void TRobFieldEventArmyGoalChange::SharedCtor() {
  _cached_size_ = 0;
  armyid_ = GOOGLE_ULONGLONG(0);
  goal_ = 0u;
  changer_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldEventArmyGoalChange::~TRobFieldEventArmyGoalChange() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldEventArmyGoalChange)
  SharedDtor();
}

void TRobFieldEventArmyGoalChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRobFieldEventArmyGoalChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldEventArmyGoalChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldEventArmyGoalChange_descriptor_;
}

const TRobFieldEventArmyGoalChange& TRobFieldEventArmyGoalChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldEventArmyGoalChange* TRobFieldEventArmyGoalChange::default_instance_ = NULL;

TRobFieldEventArmyGoalChange* TRobFieldEventArmyGoalChange::New() const {
  return new TRobFieldEventArmyGoalChange;
}

void TRobFieldEventArmyGoalChange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRobFieldEventArmyGoalChange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(armyid_, goal_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldEventArmyGoalChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldEventArmyGoalChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ArmyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &armyid_)));
          set_has_armyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Goal;
        break;
      }

      // optional uint32 Goal = 2;
      case 2: {
        if (tag == 16) {
         parse_Goal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goal_)));
          set_has_goal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Changer;
        break;
      }

      // optional uint64 Changer = 3;
      case 3: {
        if (tag == 24) {
         parse_Changer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &changer_)));
          set_has_changer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldEventArmyGoalChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldEventArmyGoalChange)
  return false;
#undef DO_
}

void TRobFieldEventArmyGoalChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldEventArmyGoalChange)
  // optional uint64 ArmyId = 1;
  if (has_armyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->armyid(), output);
  }

  // optional uint32 Goal = 2;
  if (has_goal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goal(), output);
  }

  // optional uint64 Changer = 3;
  if (has_changer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->changer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldEventArmyGoalChange)
}

::google::protobuf::uint8* TRobFieldEventArmyGoalChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldEventArmyGoalChange)
  // optional uint64 ArmyId = 1;
  if (has_armyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->armyid(), target);
  }

  // optional uint32 Goal = 2;
  if (has_goal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goal(), target);
  }

  // optional uint64 Changer = 3;
  if (has_changer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->changer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldEventArmyGoalChange)
  return target;
}

int TRobFieldEventArmyGoalChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ArmyId = 1;
    if (has_armyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->armyid());
    }

    // optional uint32 Goal = 2;
    if (has_goal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goal());
    }

    // optional uint64 Changer = 3;
    if (has_changer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->changer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldEventArmyGoalChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldEventArmyGoalChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldEventArmyGoalChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldEventArmyGoalChange::MergeFrom(const TRobFieldEventArmyGoalChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_armyid()) {
      set_armyid(from.armyid());
    }
    if (from.has_goal()) {
      set_goal(from.goal());
    }
    if (from.has_changer()) {
      set_changer(from.changer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldEventArmyGoalChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldEventArmyGoalChange::CopyFrom(const TRobFieldEventArmyGoalChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldEventArmyGoalChange::IsInitialized() const {

  return true;
}

void TRobFieldEventArmyGoalChange::Swap(TRobFieldEventArmyGoalChange* other) {
  if (other != this) {
    std::swap(armyid_, other->armyid_);
    std::swap(goal_, other->goal_);
    std::swap(changer_, other->changer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldEventArmyGoalChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldEventArmyGoalChange_descriptor_;
  metadata.reflection = TRobFieldEventArmyGoalChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldEventBuildingOwnerChange::kEntityIdFieldNumber;
const int TRobFieldEventBuildingOwnerChange::kArmyIdFieldNumber;
const int TRobFieldEventBuildingOwnerChange::kOwnerTimeFieldNumber;
const int TRobFieldEventBuildingOwnerChange::kInitArmyIdFieldNumber;
const int TRobFieldEventBuildingOwnerChange::kOwnerChangedFieldNumber;
#endif  // !_MSC_VER

TRobFieldEventBuildingOwnerChange::TRobFieldEventBuildingOwnerChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldEventBuildingOwnerChange)
}

void TRobFieldEventBuildingOwnerChange::InitAsDefaultInstance() {
}

TRobFieldEventBuildingOwnerChange::TRobFieldEventBuildingOwnerChange(const TRobFieldEventBuildingOwnerChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldEventBuildingOwnerChange)
}

void TRobFieldEventBuildingOwnerChange::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = GOOGLE_ULONGLONG(0);
  armyid_ = GOOGLE_ULONGLONG(0);
  ownertime_ = GOOGLE_ULONGLONG(0);
  initarmyid_ = GOOGLE_ULONGLONG(0);
  ownerchanged_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldEventBuildingOwnerChange::~TRobFieldEventBuildingOwnerChange() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldEventBuildingOwnerChange)
  SharedDtor();
}

void TRobFieldEventBuildingOwnerChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRobFieldEventBuildingOwnerChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldEventBuildingOwnerChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldEventBuildingOwnerChange_descriptor_;
}

const TRobFieldEventBuildingOwnerChange& TRobFieldEventBuildingOwnerChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldEventBuildingOwnerChange* TRobFieldEventBuildingOwnerChange::default_instance_ = NULL;

TRobFieldEventBuildingOwnerChange* TRobFieldEventBuildingOwnerChange::New() const {
  return new TRobFieldEventBuildingOwnerChange;
}

void TRobFieldEventBuildingOwnerChange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRobFieldEventBuildingOwnerChange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(entityid_, ownerchanged_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldEventBuildingOwnerChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldEventBuildingOwnerChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 EntityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ArmyId;
        break;
      }

      // optional uint64 ArmyId = 2;
      case 2: {
        if (tag == 16) {
         parse_ArmyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &armyid_)));
          set_has_armyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_OwnerTime;
        break;
      }

      // optional uint64 OwnerTime = 3;
      case 3: {
        if (tag == 24) {
         parse_OwnerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownertime_)));
          set_has_ownertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_InitArmyId;
        break;
      }

      // optional uint64 InitArmyId = 4;
      case 4: {
        if (tag == 32) {
         parse_InitArmyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &initarmyid_)));
          set_has_initarmyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_OwnerChanged;
        break;
      }

      // optional bool OwnerChanged = 5;
      case 5: {
        if (tag == 40) {
         parse_OwnerChanged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ownerchanged_)));
          set_has_ownerchanged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldEventBuildingOwnerChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldEventBuildingOwnerChange)
  return false;
#undef DO_
}

void TRobFieldEventBuildingOwnerChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldEventBuildingOwnerChange)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->entityid(), output);
  }

  // optional uint64 ArmyId = 2;
  if (has_armyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->armyid(), output);
  }

  // optional uint64 OwnerTime = 3;
  if (has_ownertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ownertime(), output);
  }

  // optional uint64 InitArmyId = 4;
  if (has_initarmyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->initarmyid(), output);
  }

  // optional bool OwnerChanged = 5;
  if (has_ownerchanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ownerchanged(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldEventBuildingOwnerChange)
}

::google::protobuf::uint8* TRobFieldEventBuildingOwnerChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldEventBuildingOwnerChange)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->entityid(), target);
  }

  // optional uint64 ArmyId = 2;
  if (has_armyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->armyid(), target);
  }

  // optional uint64 OwnerTime = 3;
  if (has_ownertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ownertime(), target);
  }

  // optional uint64 InitArmyId = 4;
  if (has_initarmyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->initarmyid(), target);
  }

  // optional bool OwnerChanged = 5;
  if (has_ownerchanged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ownerchanged(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldEventBuildingOwnerChange)
  return target;
}

int TRobFieldEventBuildingOwnerChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 EntityId = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entityid());
    }

    // optional uint64 ArmyId = 2;
    if (has_armyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->armyid());
    }

    // optional uint64 OwnerTime = 3;
    if (has_ownertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownertime());
    }

    // optional uint64 InitArmyId = 4;
    if (has_initarmyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->initarmyid());
    }

    // optional bool OwnerChanged = 5;
    if (has_ownerchanged()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldEventBuildingOwnerChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldEventBuildingOwnerChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldEventBuildingOwnerChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldEventBuildingOwnerChange::MergeFrom(const TRobFieldEventBuildingOwnerChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_armyid()) {
      set_armyid(from.armyid());
    }
    if (from.has_ownertime()) {
      set_ownertime(from.ownertime());
    }
    if (from.has_initarmyid()) {
      set_initarmyid(from.initarmyid());
    }
    if (from.has_ownerchanged()) {
      set_ownerchanged(from.ownerchanged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldEventBuildingOwnerChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldEventBuildingOwnerChange::CopyFrom(const TRobFieldEventBuildingOwnerChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldEventBuildingOwnerChange::IsInitialized() const {

  return true;
}

void TRobFieldEventBuildingOwnerChange::Swap(TRobFieldEventBuildingOwnerChange* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(armyid_, other->armyid_);
    std::swap(ownertime_, other->ownertime_);
    std::swap(initarmyid_, other->initarmyid_);
    std::swap(ownerchanged_, other->ownerchanged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldEventBuildingOwnerChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldEventBuildingOwnerChange_descriptor_;
  metadata.reflection = TRobFieldEventBuildingOwnerChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldEventBuildingProgressChange::kEntityIdFieldNumber;
const int TRobFieldEventBuildingProgressChange::kCurHpFieldNumber;
const int TRobFieldEventBuildingProgressChange::kAttackersFieldNumber;
const int TRobFieldEventBuildingProgressChange::kDefenderFieldNumber;
#endif  // !_MSC_VER

TRobFieldEventBuildingProgressChange::TRobFieldEventBuildingProgressChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldEventBuildingProgressChange)
}

void TRobFieldEventBuildingProgressChange::InitAsDefaultInstance() {
  defender_ = const_cast< ::pb::TRobFieldBuildingDefender*>(&::pb::TRobFieldBuildingDefender::default_instance());
}

TRobFieldEventBuildingProgressChange::TRobFieldEventBuildingProgressChange(const TRobFieldEventBuildingProgressChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldEventBuildingProgressChange)
}

void TRobFieldEventBuildingProgressChange::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = GOOGLE_ULONGLONG(0);
  curhp_ = 0u;
  defender_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldEventBuildingProgressChange::~TRobFieldEventBuildingProgressChange() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldEventBuildingProgressChange)
  SharedDtor();
}

void TRobFieldEventBuildingProgressChange::SharedDtor() {
  if (this != default_instance_) {
    delete defender_;
  }
}

void TRobFieldEventBuildingProgressChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldEventBuildingProgressChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldEventBuildingProgressChange_descriptor_;
}

const TRobFieldEventBuildingProgressChange& TRobFieldEventBuildingProgressChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldEventBuildingProgressChange* TRobFieldEventBuildingProgressChange::default_instance_ = NULL;

TRobFieldEventBuildingProgressChange* TRobFieldEventBuildingProgressChange::New() const {
  return new TRobFieldEventBuildingProgressChange;
}

void TRobFieldEventBuildingProgressChange::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    entityid_ = GOOGLE_ULONGLONG(0);
    curhp_ = 0u;
    if (has_defender()) {
      if (defender_ != NULL) defender_->::pb::TRobFieldBuildingDefender::Clear();
    }
  }
  attackers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldEventBuildingProgressChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldEventBuildingProgressChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 EntityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CurHp;
        break;
      }

      // optional uint32 CurHp = 2;
      case 2: {
        if (tag == 16) {
         parse_CurHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Attackers;
        break;
      }

      // repeated .pb.TRobFieldBuildingAttacker Attackers = 3;
      case 3: {
        if (tag == 26) {
         parse_Attackers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attackers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Attackers;
        if (input->ExpectTag(34)) goto parse_Defender;
        break;
      }

      // optional .pb.TRobFieldBuildingDefender Defender = 4;
      case 4: {
        if (tag == 34) {
         parse_Defender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defender()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldEventBuildingProgressChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldEventBuildingProgressChange)
  return false;
#undef DO_
}

void TRobFieldEventBuildingProgressChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldEventBuildingProgressChange)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->entityid(), output);
  }

  // optional uint32 CurHp = 2;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curhp(), output);
  }

  // repeated .pb.TRobFieldBuildingAttacker Attackers = 3;
  for (int i = 0; i < this->attackers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attackers(i), output);
  }

  // optional .pb.TRobFieldBuildingDefender Defender = 4;
  if (has_defender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->defender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldEventBuildingProgressChange)
}

::google::protobuf::uint8* TRobFieldEventBuildingProgressChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldEventBuildingProgressChange)
  // optional uint64 EntityId = 1;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->entityid(), target);
  }

  // optional uint32 CurHp = 2;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curhp(), target);
  }

  // repeated .pb.TRobFieldBuildingAttacker Attackers = 3;
  for (int i = 0; i < this->attackers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attackers(i), target);
  }

  // optional .pb.TRobFieldBuildingDefender Defender = 4;
  if (has_defender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->defender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldEventBuildingProgressChange)
  return target;
}

int TRobFieldEventBuildingProgressChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 EntityId = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entityid());
    }

    // optional uint32 CurHp = 2;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curhp());
    }

    // optional .pb.TRobFieldBuildingDefender Defender = 4;
    if (has_defender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defender());
    }

  }
  // repeated .pb.TRobFieldBuildingAttacker Attackers = 3;
  total_size += 1 * this->attackers_size();
  for (int i = 0; i < this->attackers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attackers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldEventBuildingProgressChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldEventBuildingProgressChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldEventBuildingProgressChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldEventBuildingProgressChange::MergeFrom(const TRobFieldEventBuildingProgressChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  attackers_.MergeFrom(from.attackers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_defender()) {
      mutable_defender()->::pb::TRobFieldBuildingDefender::MergeFrom(from.defender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldEventBuildingProgressChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldEventBuildingProgressChange::CopyFrom(const TRobFieldEventBuildingProgressChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldEventBuildingProgressChange::IsInitialized() const {

  return true;
}

void TRobFieldEventBuildingProgressChange::Swap(TRobFieldEventBuildingProgressChange* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(curhp_, other->curhp_);
    attackers_.Swap(&other->attackers_);
    std::swap(defender_, other->defender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldEventBuildingProgressChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldEventBuildingProgressChange_descriptor_;
  metadata.reflection = TRobFieldEventBuildingProgressChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldEventGameOver::kWinArmyIdFieldNumber;
#endif  // !_MSC_VER

TRobFieldEventGameOver::TRobFieldEventGameOver()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldEventGameOver)
}

void TRobFieldEventGameOver::InitAsDefaultInstance() {
}

TRobFieldEventGameOver::TRobFieldEventGameOver(const TRobFieldEventGameOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldEventGameOver)
}

void TRobFieldEventGameOver::SharedCtor() {
  _cached_size_ = 0;
  winarmyid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldEventGameOver::~TRobFieldEventGameOver() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldEventGameOver)
  SharedDtor();
}

void TRobFieldEventGameOver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRobFieldEventGameOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldEventGameOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldEventGameOver_descriptor_;
}

const TRobFieldEventGameOver& TRobFieldEventGameOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldEventGameOver* TRobFieldEventGameOver::default_instance_ = NULL;

TRobFieldEventGameOver* TRobFieldEventGameOver::New() const {
  return new TRobFieldEventGameOver;
}

void TRobFieldEventGameOver::Clear() {
  winarmyid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldEventGameOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldEventGameOver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 WinArmyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &winarmyid_)));
          set_has_winarmyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldEventGameOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldEventGameOver)
  return false;
#undef DO_
}

void TRobFieldEventGameOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldEventGameOver)
  // optional uint64 WinArmyId = 1;
  if (has_winarmyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->winarmyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldEventGameOver)
}

::google::protobuf::uint8* TRobFieldEventGameOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldEventGameOver)
  // optional uint64 WinArmyId = 1;
  if (has_winarmyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->winarmyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldEventGameOver)
  return target;
}

int TRobFieldEventGameOver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 WinArmyId = 1;
    if (has_winarmyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->winarmyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldEventGameOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldEventGameOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldEventGameOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldEventGameOver::MergeFrom(const TRobFieldEventGameOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winarmyid()) {
      set_winarmyid(from.winarmyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldEventGameOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldEventGameOver::CopyFrom(const TRobFieldEventGameOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldEventGameOver::IsInitialized() const {

  return true;
}

void TRobFieldEventGameOver::Swap(TRobFieldEventGameOver* other) {
  if (other != this) {
    std::swap(winarmyid_, other->winarmyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldEventGameOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldEventGameOver_descriptor_;
  metadata.reflection = TRobFieldEventGameOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldEventWrapper::kOffsetMsFieldNumber;
const int TRobFieldEventWrapper::kEventTypeFieldNumber;
const int TRobFieldEventWrapper::kEventDataFieldNumber;
#endif  // !_MSC_VER

TRobFieldEventWrapper::TRobFieldEventWrapper()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldEventWrapper)
}

void TRobFieldEventWrapper::InitAsDefaultInstance() {
}

TRobFieldEventWrapper::TRobFieldEventWrapper(const TRobFieldEventWrapper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldEventWrapper)
}

void TRobFieldEventWrapper::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  offsetms_ = 0u;
  eventtype_ = 0;
  eventdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldEventWrapper::~TRobFieldEventWrapper() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldEventWrapper)
  SharedDtor();
}

void TRobFieldEventWrapper::SharedDtor() {
  if (eventdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete eventdata_;
  }
  if (this != default_instance_) {
  }
}

void TRobFieldEventWrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldEventWrapper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldEventWrapper_descriptor_;
}

const TRobFieldEventWrapper& TRobFieldEventWrapper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldEventWrapper* TRobFieldEventWrapper::default_instance_ = NULL;

TRobFieldEventWrapper* TRobFieldEventWrapper::New() const {
  return new TRobFieldEventWrapper;
}

void TRobFieldEventWrapper::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRobFieldEventWrapper*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(offsetms_, eventtype_);
    if (has_eventdata()) {
      if (eventdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        eventdata_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldEventWrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldEventWrapper)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 OffsetMs = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offsetms_)));
          set_has_offsetms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EventType;
        break;
      }

      // optional .pb.ERobFieldEventType EventType = 2;
      case 2: {
        if (tag == 16) {
         parse_EventType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ERobFieldEventType_IsValid(value)) {
            set_eventtype(static_cast< ::pb::ERobFieldEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_EventData;
        break;
      }

      // optional bytes EventData = 3;
      case 3: {
        if (tag == 26) {
         parse_EventData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_eventdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldEventWrapper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldEventWrapper)
  return false;
#undef DO_
}

void TRobFieldEventWrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldEventWrapper)
  // optional uint32 OffsetMs = 1;
  if (has_offsetms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offsetms(), output);
  }

  // optional .pb.ERobFieldEventType EventType = 2;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eventtype(), output);
  }

  // optional bytes EventData = 3;
  if (has_eventdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->eventdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldEventWrapper)
}

::google::protobuf::uint8* TRobFieldEventWrapper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldEventWrapper)
  // optional uint32 OffsetMs = 1;
  if (has_offsetms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offsetms(), target);
  }

  // optional .pb.ERobFieldEventType EventType = 2;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eventtype(), target);
  }

  // optional bytes EventData = 3;
  if (has_eventdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->eventdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldEventWrapper)
  return target;
}

int TRobFieldEventWrapper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 OffsetMs = 1;
    if (has_offsetms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offsetms());
    }

    // optional .pb.ERobFieldEventType EventType = 2;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
    }

    // optional bytes EventData = 3;
    if (has_eventdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->eventdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldEventWrapper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldEventWrapper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldEventWrapper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldEventWrapper::MergeFrom(const TRobFieldEventWrapper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offsetms()) {
      set_offsetms(from.offsetms());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_eventdata()) {
      set_eventdata(from.eventdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldEventWrapper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldEventWrapper::CopyFrom(const TRobFieldEventWrapper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldEventWrapper::IsInitialized() const {

  return true;
}

void TRobFieldEventWrapper::Swap(TRobFieldEventWrapper* other) {
  if (other != this) {
    std::swap(offsetms_, other->offsetms_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(eventdata_, other->eventdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldEventWrapper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldEventWrapper_descriptor_;
  metadata.reflection = TRobFieldEventWrapper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldWhole::kRobTypeFieldNumber;
const int TRobFieldWhole::kFieldIdFieldNumber;
const int TRobFieldWhole::kBegTimeFieldNumber;
const int TRobFieldWhole::kArmysFieldNumber;
const int TRobFieldWhole::kUsersFieldNumber;
const int TRobFieldWhole::kPrivFieldNumber;
const int TRobFieldWhole::kBuildingsFieldNumber;
#endif  // !_MSC_VER

TRobFieldWhole::TRobFieldWhole()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldWhole)
}

void TRobFieldWhole::InitAsDefaultInstance() {
  priv_ = const_cast< ::pb::TRobFieldPriv*>(&::pb::TRobFieldPriv::default_instance());
}

TRobFieldWhole::TRobFieldWhole(const TRobFieldWhole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldWhole)
}

void TRobFieldWhole::SharedCtor() {
  _cached_size_ = 0;
  robtype_ = 0;
  fieldid_ = GOOGLE_ULONGLONG(0);
  begtime_ = GOOGLE_ULONGLONG(0);
  priv_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldWhole::~TRobFieldWhole() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldWhole)
  SharedDtor();
}

void TRobFieldWhole::SharedDtor() {
  if (this != default_instance_) {
    delete priv_;
  }
}

void TRobFieldWhole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldWhole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldWhole_descriptor_;
}

const TRobFieldWhole& TRobFieldWhole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldWhole* TRobFieldWhole::default_instance_ = NULL;

TRobFieldWhole* TRobFieldWhole::New() const {
  return new TRobFieldWhole;
}

void TRobFieldWhole::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRobFieldWhole*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 39) {
    ZR_(fieldid_, begtime_);
    robtype_ = 0;
    if (has_priv()) {
      if (priv_ != NULL) priv_->::pb::TRobFieldPriv::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  armys_.Clear();
  users_.Clear();
  buildings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldWhole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldWhole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ERobType RobType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ERobType_IsValid(value)) {
            set_robtype(static_cast< ::pb::ERobType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FieldId;
        break;
      }

      // optional uint64 FieldId = 2;
      case 2: {
        if (tag == 16) {
         parse_FieldId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fieldid_)));
          set_has_fieldid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BegTime;
        break;
      }

      // optional uint64 BegTime = 3;
      case 3: {
        if (tag == 24) {
         parse_BegTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begtime_)));
          set_has_begtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Armys;
        break;
      }

      // repeated .pb.TRobFieldArmy Armys = 4;
      case 4: {
        if (tag == 34) {
         parse_Armys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_armys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Armys;
        if (input->ExpectTag(42)) goto parse_Users;
        break;
      }

      // repeated .pb.TRobFieldUser Users = 5;
      case 5: {
        if (tag == 42) {
         parse_Users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Users;
        if (input->ExpectTag(50)) goto parse_Priv;
        break;
      }

      // optional .pb.TRobFieldPriv Priv = 6;
      case 6: {
        if (tag == 50) {
         parse_Priv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_priv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Buildings;
        break;
      }

      // repeated .pb.TRobFieldBuilding Buildings = 7;
      case 7: {
        if (tag == 58) {
         parse_Buildings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Buildings;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldWhole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldWhole)
  return false;
#undef DO_
}

void TRobFieldWhole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldWhole)
  // optional .pb.ERobType RobType = 1;
  if (has_robtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->robtype(), output);
  }

  // optional uint64 FieldId = 2;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fieldid(), output);
  }

  // optional uint64 BegTime = 3;
  if (has_begtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->begtime(), output);
  }

  // repeated .pb.TRobFieldArmy Armys = 4;
  for (int i = 0; i < this->armys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->armys(i), output);
  }

  // repeated .pb.TRobFieldUser Users = 5;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->users(i), output);
  }

  // optional .pb.TRobFieldPriv Priv = 6;
  if (has_priv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->priv(), output);
  }

  // repeated .pb.TRobFieldBuilding Buildings = 7;
  for (int i = 0; i < this->buildings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->buildings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldWhole)
}

::google::protobuf::uint8* TRobFieldWhole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldWhole)
  // optional .pb.ERobType RobType = 1;
  if (has_robtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->robtype(), target);
  }

  // optional uint64 FieldId = 2;
  if (has_fieldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fieldid(), target);
  }

  // optional uint64 BegTime = 3;
  if (has_begtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->begtime(), target);
  }

  // repeated .pb.TRobFieldArmy Armys = 4;
  for (int i = 0; i < this->armys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->armys(i), target);
  }

  // repeated .pb.TRobFieldUser Users = 5;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->users(i), target);
  }

  // optional .pb.TRobFieldPriv Priv = 6;
  if (has_priv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->priv(), target);
  }

  // repeated .pb.TRobFieldBuilding Buildings = 7;
  for (int i = 0; i < this->buildings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->buildings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldWhole)
  return target;
}

int TRobFieldWhole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ERobType RobType = 1;
    if (has_robtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->robtype());
    }

    // optional uint64 FieldId = 2;
    if (has_fieldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fieldid());
    }

    // optional uint64 BegTime = 3;
    if (has_begtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begtime());
    }

    // optional .pb.TRobFieldPriv Priv = 6;
    if (has_priv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->priv());
    }

  }
  // repeated .pb.TRobFieldArmy Armys = 4;
  total_size += 1 * this->armys_size();
  for (int i = 0; i < this->armys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->armys(i));
  }

  // repeated .pb.TRobFieldUser Users = 5;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  // repeated .pb.TRobFieldBuilding Buildings = 7;
  total_size += 1 * this->buildings_size();
  for (int i = 0; i < this->buildings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldWhole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldWhole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldWhole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldWhole::MergeFrom(const TRobFieldWhole& from) {
  GOOGLE_CHECK_NE(&from, this);
  armys_.MergeFrom(from.armys_);
  users_.MergeFrom(from.users_);
  buildings_.MergeFrom(from.buildings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robtype()) {
      set_robtype(from.robtype());
    }
    if (from.has_fieldid()) {
      set_fieldid(from.fieldid());
    }
    if (from.has_begtime()) {
      set_begtime(from.begtime());
    }
    if (from.has_priv()) {
      mutable_priv()->::pb::TRobFieldPriv::MergeFrom(from.priv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldWhole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldWhole::CopyFrom(const TRobFieldWhole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldWhole::IsInitialized() const {

  return true;
}

void TRobFieldWhole::Swap(TRobFieldWhole* other) {
  if (other != this) {
    std::swap(robtype_, other->robtype_);
    std::swap(fieldid_, other->fieldid_);
    std::swap(begtime_, other->begtime_);
    armys_.Swap(&other->armys_);
    users_.Swap(&other->users_);
    std::swap(priv_, other->priv_);
    buildings_.Swap(&other->buildings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldWhole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldWhole_descriptor_;
  metadata.reflection = TRobFieldWhole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldDelta::kRobTypeFieldNumber;
const int TRobFieldDelta::kEventsFieldNumber;
#endif  // !_MSC_VER

TRobFieldDelta::TRobFieldDelta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldDelta)
}

void TRobFieldDelta::InitAsDefaultInstance() {
}

TRobFieldDelta::TRobFieldDelta(const TRobFieldDelta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldDelta)
}

void TRobFieldDelta::SharedCtor() {
  _cached_size_ = 0;
  robtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldDelta::~TRobFieldDelta() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldDelta)
  SharedDtor();
}

void TRobFieldDelta::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRobFieldDelta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldDelta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldDelta_descriptor_;
}

const TRobFieldDelta& TRobFieldDelta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldDelta* TRobFieldDelta::default_instance_ = NULL;

TRobFieldDelta* TRobFieldDelta::New() const {
  return new TRobFieldDelta;
}

void TRobFieldDelta::Clear() {
  robtype_ = 0;
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldDelta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldDelta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ERobType RobType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ERobType_IsValid(value)) {
            set_robtype(static_cast< ::pb::ERobType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Events;
        break;
      }

      // repeated .pb.TRobFieldEventWrapper Events = 2;
      case 2: {
        if (tag == 18) {
         parse_Events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Events;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldDelta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldDelta)
  return false;
#undef DO_
}

void TRobFieldDelta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldDelta)
  // optional .pb.ERobType RobType = 1;
  if (has_robtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->robtype(), output);
  }

  // repeated .pb.TRobFieldEventWrapper Events = 2;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->events(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldDelta)
}

::google::protobuf::uint8* TRobFieldDelta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldDelta)
  // optional .pb.ERobType RobType = 1;
  if (has_robtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->robtype(), target);
  }

  // repeated .pb.TRobFieldEventWrapper Events = 2;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->events(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldDelta)
  return target;
}

int TRobFieldDelta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ERobType RobType = 1;
    if (has_robtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->robtype());
    }

  }
  // repeated .pb.TRobFieldEventWrapper Events = 2;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldDelta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldDelta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldDelta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldDelta::MergeFrom(const TRobFieldDelta& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robtype()) {
      set_robtype(from.robtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldDelta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldDelta::CopyFrom(const TRobFieldDelta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldDelta::IsInitialized() const {

  return true;
}

void TRobFieldDelta::Swap(TRobFieldDelta* other) {
  if (other != this) {
    std::swap(robtype_, other->robtype_);
    events_.Swap(&other->events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldDelta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldDelta_descriptor_;
  metadata.reflection = TRobFieldDelta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRobFieldSettle::kRobTypeFieldNumber;
const int TRobFieldSettle::kWinArmyIdFieldNumber;
const int TRobFieldSettle::kArmysFieldNumber;
const int TRobFieldSettle::kPrivFieldNumber;
#endif  // !_MSC_VER

TRobFieldSettle::TRobFieldSettle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRobFieldSettle)
}

void TRobFieldSettle::InitAsDefaultInstance() {
  priv_ = const_cast< ::pb::TRobFieldPriv*>(&::pb::TRobFieldPriv::default_instance());
}

TRobFieldSettle::TRobFieldSettle(const TRobFieldSettle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRobFieldSettle)
}

void TRobFieldSettle::SharedCtor() {
  _cached_size_ = 0;
  robtype_ = 0;
  winarmyid_ = GOOGLE_ULONGLONG(0);
  priv_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRobFieldSettle::~TRobFieldSettle() {
  // @@protoc_insertion_point(destructor:pb.TRobFieldSettle)
  SharedDtor();
}

void TRobFieldSettle::SharedDtor() {
  if (this != default_instance_) {
    delete priv_;
  }
}

void TRobFieldSettle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRobFieldSettle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRobFieldSettle_descriptor_;
}

const TRobFieldSettle& TRobFieldSettle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRobField_2eproto();
  return *default_instance_;
}

TRobFieldSettle* TRobFieldSettle::default_instance_ = NULL;

TRobFieldSettle* TRobFieldSettle::New() const {
  return new TRobFieldSettle;
}

void TRobFieldSettle::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    robtype_ = 0;
    winarmyid_ = GOOGLE_ULONGLONG(0);
    if (has_priv()) {
      if (priv_ != NULL) priv_->::pb::TRobFieldPriv::Clear();
    }
  }
  armys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRobFieldSettle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRobFieldSettle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ERobType RobType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ERobType_IsValid(value)) {
            set_robtype(static_cast< ::pb::ERobType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_WinArmyId;
        break;
      }

      // optional uint64 WinArmyId = 2;
      case 2: {
        if (tag == 16) {
         parse_WinArmyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &winarmyid_)));
          set_has_winarmyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Armys;
        break;
      }

      // repeated .pb.TRobFieldArmy Armys = 3;
      case 3: {
        if (tag == 26) {
         parse_Armys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_armys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Armys;
        if (input->ExpectTag(34)) goto parse_Priv;
        break;
      }

      // optional .pb.TRobFieldPriv Priv = 4;
      case 4: {
        if (tag == 34) {
         parse_Priv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_priv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRobFieldSettle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRobFieldSettle)
  return false;
#undef DO_
}

void TRobFieldSettle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRobFieldSettle)
  // optional .pb.ERobType RobType = 1;
  if (has_robtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->robtype(), output);
  }

  // optional uint64 WinArmyId = 2;
  if (has_winarmyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->winarmyid(), output);
  }

  // repeated .pb.TRobFieldArmy Armys = 3;
  for (int i = 0; i < this->armys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->armys(i), output);
  }

  // optional .pb.TRobFieldPriv Priv = 4;
  if (has_priv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->priv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRobFieldSettle)
}

::google::protobuf::uint8* TRobFieldSettle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRobFieldSettle)
  // optional .pb.ERobType RobType = 1;
  if (has_robtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->robtype(), target);
  }

  // optional uint64 WinArmyId = 2;
  if (has_winarmyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->winarmyid(), target);
  }

  // repeated .pb.TRobFieldArmy Armys = 3;
  for (int i = 0; i < this->armys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->armys(i), target);
  }

  // optional .pb.TRobFieldPriv Priv = 4;
  if (has_priv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->priv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRobFieldSettle)
  return target;
}

int TRobFieldSettle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ERobType RobType = 1;
    if (has_robtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->robtype());
    }

    // optional uint64 WinArmyId = 2;
    if (has_winarmyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->winarmyid());
    }

    // optional .pb.TRobFieldPriv Priv = 4;
    if (has_priv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->priv());
    }

  }
  // repeated .pb.TRobFieldArmy Armys = 3;
  total_size += 1 * this->armys_size();
  for (int i = 0; i < this->armys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->armys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRobFieldSettle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRobFieldSettle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRobFieldSettle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRobFieldSettle::MergeFrom(const TRobFieldSettle& from) {
  GOOGLE_CHECK_NE(&from, this);
  armys_.MergeFrom(from.armys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robtype()) {
      set_robtype(from.robtype());
    }
    if (from.has_winarmyid()) {
      set_winarmyid(from.winarmyid());
    }
    if (from.has_priv()) {
      mutable_priv()->::pb::TRobFieldPriv::MergeFrom(from.priv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRobFieldSettle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRobFieldSettle::CopyFrom(const TRobFieldSettle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRobFieldSettle::IsInitialized() const {

  return true;
}

void TRobFieldSettle::Swap(TRobFieldSettle* other) {
  if (other != this) {
    std::swap(robtype_, other->robtype_);
    std::swap(winarmyid_, other->winarmyid_);
    armys_.Swap(&other->armys_);
    std::swap(priv_, other->priv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRobFieldSettle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRobFieldSettle_descriptor_;
  metadata.reflection = TRobFieldSettle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
