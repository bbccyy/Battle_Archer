// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Sign.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Sign.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TSignReceiveRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSignReceiveRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSignGetSignInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSignGetSignInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSignGetSignInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSignGetSignInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSignSignReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSignSignReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSignSignRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSignSignRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSignSupplementSignReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSignSupplementSignReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSignSupplementSignRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSignSupplementSignRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSignReceiveAccuSignRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSignReceiveAccuSignRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSignReceiveAccuSignRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSignReceiveAccuSignRewardRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fSign_2eproto() {
  protobuf_AddDesc_net_2fSign_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Sign.proto");
  GOOGLE_CHECK(file != NULL);
  TSignReceiveRewardInfo_descriptor_ = file->message_type(0);
  static const int TSignReceiveRewardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignReceiveRewardInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignReceiveRewardInfo, receivetime_),
  };
  TSignReceiveRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSignReceiveRewardInfo_descriptor_,
      TSignReceiveRewardInfo::default_instance_,
      TSignReceiveRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignReceiveRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignReceiveRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSignReceiveRewardInfo));
  TSignGetSignInfoReq_descriptor_ = file->message_type(1);
  static const int TSignGetSignInfoReq_offsets_[1] = {
  };
  TSignGetSignInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSignGetSignInfoReq_descriptor_,
      TSignGetSignInfoReq::default_instance_,
      TSignGetSignInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignGetSignInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignGetSignInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSignGetSignInfoReq));
  TSignGetSignInfoRsp_descriptor_ = file->message_type(2);
  static const int TSignGetSignInfoRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignGetSignInfoRsp, cycleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignGetSignInfoRsp, curdaynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignGetSignInfoRsp, supplementnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignGetSignInfoRsp, accudaynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignGetSignInfoRsp, daysignreceivearray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignGetSignInfoRsp, accusignreceivearray_),
  };
  TSignGetSignInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSignGetSignInfoRsp_descriptor_,
      TSignGetSignInfoRsp::default_instance_,
      TSignGetSignInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignGetSignInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignGetSignInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSignGetSignInfoRsp));
  TSignSignReq_descriptor_ = file->message_type(3);
  static const int TSignSignReq_offsets_[1] = {
  };
  TSignSignReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSignSignReq_descriptor_,
      TSignSignReq::default_instance_,
      TSignSignReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignSignReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignSignReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSignSignReq));
  TSignSignRsp_descriptor_ = file->message_type(4);
  static const int TSignSignRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignSignRsp, rewardarray_),
  };
  TSignSignRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSignSignRsp_descriptor_,
      TSignSignRsp::default_instance_,
      TSignSignRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignSignRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignSignRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSignSignRsp));
  TSignSupplementSignReq_descriptor_ = file->message_type(5);
  static const int TSignSupplementSignReq_offsets_[1] = {
  };
  TSignSupplementSignReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSignSupplementSignReq_descriptor_,
      TSignSupplementSignReq::default_instance_,
      TSignSupplementSignReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignSupplementSignReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignSupplementSignReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSignSupplementSignReq));
  TSignSupplementSignRsp_descriptor_ = file->message_type(6);
  static const int TSignSupplementSignRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignSupplementSignRsp, rewardarray_),
  };
  TSignSupplementSignRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSignSupplementSignRsp_descriptor_,
      TSignSupplementSignRsp::default_instance_,
      TSignSupplementSignRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignSupplementSignRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignSupplementSignRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSignSupplementSignRsp));
  TSignReceiveAccuSignRewardReq_descriptor_ = file->message_type(7);
  static const int TSignReceiveAccuSignRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignReceiveAccuSignRewardReq, id_),
  };
  TSignReceiveAccuSignRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSignReceiveAccuSignRewardReq_descriptor_,
      TSignReceiveAccuSignRewardReq::default_instance_,
      TSignReceiveAccuSignRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignReceiveAccuSignRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignReceiveAccuSignRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSignReceiveAccuSignRewardReq));
  TSignReceiveAccuSignRewardRsp_descriptor_ = file->message_type(8);
  static const int TSignReceiveAccuSignRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignReceiveAccuSignRewardRsp, rewardarray_),
  };
  TSignReceiveAccuSignRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSignReceiveAccuSignRewardRsp_descriptor_,
      TSignReceiveAccuSignRewardRsp::default_instance_,
      TSignReceiveAccuSignRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignReceiveAccuSignRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSignReceiveAccuSignRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSignReceiveAccuSignRewardRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fSign_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSignReceiveRewardInfo_descriptor_, &TSignReceiveRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSignGetSignInfoReq_descriptor_, &TSignGetSignInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSignGetSignInfoRsp_descriptor_, &TSignGetSignInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSignSignReq_descriptor_, &TSignSignReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSignSignRsp_descriptor_, &TSignSignRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSignSupplementSignReq_descriptor_, &TSignSupplementSignReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSignSupplementSignRsp_descriptor_, &TSignSupplementSignRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSignReceiveAccuSignRewardReq_descriptor_, &TSignReceiveAccuSignRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSignReceiveAccuSignRewardRsp_descriptor_, &TSignReceiveAccuSignRewardRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fSign_2eproto() {
  delete TSignReceiveRewardInfo::default_instance_;
  delete TSignReceiveRewardInfo_reflection_;
  delete TSignGetSignInfoReq::default_instance_;
  delete TSignGetSignInfoReq_reflection_;
  delete TSignGetSignInfoRsp::default_instance_;
  delete TSignGetSignInfoRsp_reflection_;
  delete TSignSignReq::default_instance_;
  delete TSignSignReq_reflection_;
  delete TSignSignRsp::default_instance_;
  delete TSignSignRsp_reflection_;
  delete TSignSupplementSignReq::default_instance_;
  delete TSignSupplementSignReq_reflection_;
  delete TSignSupplementSignRsp::default_instance_;
  delete TSignSupplementSignRsp_reflection_;
  delete TSignReceiveAccuSignRewardReq::default_instance_;
  delete TSignReceiveAccuSignRewardReq_reflection_;
  delete TSignReceiveAccuSignRewardRsp::default_instance_;
  delete TSignReceiveAccuSignRewardRsp_reflection_;
}

void protobuf_AddDesc_net_2fSign_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016net/Sign.proto\022\002pb\032\026net/CommonReward.p"
    "roto\"9\n\026TSignReceiveRewardInfo\022\n\n\002Id\030\001 \001"
    "(\r\022\023\n\013ReceiveTime\030\002 \001(\004\"\025\n\023TSignGetSignI"
    "nfoReq\"\327\001\n\023TSignGetSignInfoRsp\022\017\n\007CycleI"
    "d\030\001 \001(\r\022\021\n\tCurDayNum\030\002 \001(\r\022\025\n\rSupplement"
    "Num\030\003 \001(\r\022\022\n\nAccuDayNum\030\004 \001(\r\0227\n\023DaySign"
    "ReceiveArray\030\005 \003(\0132\032.pb.TSignReceiveRewa"
    "rdInfo\0228\n\024AccuSignReceiveArray\030\006 \003(\0132\032.p"
    "b.TSignReceiveRewardInfo\"\016\n\014TSignSignReq"
    "\"6\n\014TSignSignRsp\022&\n\013RewardArray\030\001 \003(\0132\021."
    "pb.TCommonReward\"\030\n\026TSignSupplementSignR"
    "eq\"@\n\026TSignSupplementSignRsp\022&\n\013RewardAr"
    "ray\030\001 \003(\0132\021.pb.TCommonReward\"+\n\035TSignRec"
    "eiveAccuSignRewardReq\022\n\n\002Id\030\001 \001(\r\"G\n\035TSi"
    "gnReceiveAccuSignRewardRsp\022&\n\013RewardArra"
    "y\030\001 \003(\0132\021.pb.TCommonReward", 626);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Sign.proto", &protobuf_RegisterTypes);
  TSignReceiveRewardInfo::default_instance_ = new TSignReceiveRewardInfo();
  TSignGetSignInfoReq::default_instance_ = new TSignGetSignInfoReq();
  TSignGetSignInfoRsp::default_instance_ = new TSignGetSignInfoRsp();
  TSignSignReq::default_instance_ = new TSignSignReq();
  TSignSignRsp::default_instance_ = new TSignSignRsp();
  TSignSupplementSignReq::default_instance_ = new TSignSupplementSignReq();
  TSignSupplementSignRsp::default_instance_ = new TSignSupplementSignRsp();
  TSignReceiveAccuSignRewardReq::default_instance_ = new TSignReceiveAccuSignRewardReq();
  TSignReceiveAccuSignRewardRsp::default_instance_ = new TSignReceiveAccuSignRewardRsp();
  TSignReceiveRewardInfo::default_instance_->InitAsDefaultInstance();
  TSignGetSignInfoReq::default_instance_->InitAsDefaultInstance();
  TSignGetSignInfoRsp::default_instance_->InitAsDefaultInstance();
  TSignSignReq::default_instance_->InitAsDefaultInstance();
  TSignSignRsp::default_instance_->InitAsDefaultInstance();
  TSignSupplementSignReq::default_instance_->InitAsDefaultInstance();
  TSignSupplementSignRsp::default_instance_->InitAsDefaultInstance();
  TSignReceiveAccuSignRewardReq::default_instance_->InitAsDefaultInstance();
  TSignReceiveAccuSignRewardRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fSign_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fSign_2eproto {
  StaticDescriptorInitializer_net_2fSign_2eproto() {
    protobuf_AddDesc_net_2fSign_2eproto();
  }
} static_descriptor_initializer_net_2fSign_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TSignReceiveRewardInfo::kIdFieldNumber;
const int TSignReceiveRewardInfo::kReceiveTimeFieldNumber;
#endif  // !_MSC_VER

TSignReceiveRewardInfo::TSignReceiveRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSignReceiveRewardInfo)
}

void TSignReceiveRewardInfo::InitAsDefaultInstance() {
}

TSignReceiveRewardInfo::TSignReceiveRewardInfo(const TSignReceiveRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSignReceiveRewardInfo)
}

void TSignReceiveRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  receivetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSignReceiveRewardInfo::~TSignReceiveRewardInfo() {
  // @@protoc_insertion_point(destructor:pb.TSignReceiveRewardInfo)
  SharedDtor();
}

void TSignReceiveRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSignReceiveRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSignReceiveRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSignReceiveRewardInfo_descriptor_;
}

const TSignReceiveRewardInfo& TSignReceiveRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSign_2eproto();
  return *default_instance_;
}

TSignReceiveRewardInfo* TSignReceiveRewardInfo::default_instance_ = NULL;

TSignReceiveRewardInfo* TSignReceiveRewardInfo::New() const {
  return new TSignReceiveRewardInfo;
}

void TSignReceiveRewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSignReceiveRewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(receivetime_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSignReceiveRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSignReceiveRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ReceiveTime;
        break;
      }

      // optional uint64 ReceiveTime = 2;
      case 2: {
        if (tag == 16) {
         parse_ReceiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receivetime_)));
          set_has_receivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSignReceiveRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSignReceiveRewardInfo)
  return false;
#undef DO_
}

void TSignReceiveRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSignReceiveRewardInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 ReceiveTime = 2;
  if (has_receivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->receivetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSignReceiveRewardInfo)
}

::google::protobuf::uint8* TSignReceiveRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSignReceiveRewardInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 ReceiveTime = 2;
  if (has_receivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->receivetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSignReceiveRewardInfo)
  return target;
}

int TSignReceiveRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 ReceiveTime = 2;
    if (has_receivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receivetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSignReceiveRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSignReceiveRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSignReceiveRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSignReceiveRewardInfo::MergeFrom(const TSignReceiveRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_receivetime()) {
      set_receivetime(from.receivetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSignReceiveRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSignReceiveRewardInfo::CopyFrom(const TSignReceiveRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSignReceiveRewardInfo::IsInitialized() const {

  return true;
}

void TSignReceiveRewardInfo::Swap(TSignReceiveRewardInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(receivetime_, other->receivetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSignReceiveRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSignReceiveRewardInfo_descriptor_;
  metadata.reflection = TSignReceiveRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TSignGetSignInfoReq::TSignGetSignInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSignGetSignInfoReq)
}

void TSignGetSignInfoReq::InitAsDefaultInstance() {
}

TSignGetSignInfoReq::TSignGetSignInfoReq(const TSignGetSignInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSignGetSignInfoReq)
}

void TSignGetSignInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSignGetSignInfoReq::~TSignGetSignInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TSignGetSignInfoReq)
  SharedDtor();
}

void TSignGetSignInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSignGetSignInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSignGetSignInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSignGetSignInfoReq_descriptor_;
}

const TSignGetSignInfoReq& TSignGetSignInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSign_2eproto();
  return *default_instance_;
}

TSignGetSignInfoReq* TSignGetSignInfoReq::default_instance_ = NULL;

TSignGetSignInfoReq* TSignGetSignInfoReq::New() const {
  return new TSignGetSignInfoReq;
}

void TSignGetSignInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSignGetSignInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSignGetSignInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSignGetSignInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSignGetSignInfoReq)
  return false;
#undef DO_
}

void TSignGetSignInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSignGetSignInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSignGetSignInfoReq)
}

::google::protobuf::uint8* TSignGetSignInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSignGetSignInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSignGetSignInfoReq)
  return target;
}

int TSignGetSignInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSignGetSignInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSignGetSignInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSignGetSignInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSignGetSignInfoReq::MergeFrom(const TSignGetSignInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSignGetSignInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSignGetSignInfoReq::CopyFrom(const TSignGetSignInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSignGetSignInfoReq::IsInitialized() const {

  return true;
}

void TSignGetSignInfoReq::Swap(TSignGetSignInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSignGetSignInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSignGetSignInfoReq_descriptor_;
  metadata.reflection = TSignGetSignInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSignGetSignInfoRsp::kCycleIdFieldNumber;
const int TSignGetSignInfoRsp::kCurDayNumFieldNumber;
const int TSignGetSignInfoRsp::kSupplementNumFieldNumber;
const int TSignGetSignInfoRsp::kAccuDayNumFieldNumber;
const int TSignGetSignInfoRsp::kDaySignReceiveArrayFieldNumber;
const int TSignGetSignInfoRsp::kAccuSignReceiveArrayFieldNumber;
#endif  // !_MSC_VER

TSignGetSignInfoRsp::TSignGetSignInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSignGetSignInfoRsp)
}

void TSignGetSignInfoRsp::InitAsDefaultInstance() {
}

TSignGetSignInfoRsp::TSignGetSignInfoRsp(const TSignGetSignInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSignGetSignInfoRsp)
}

void TSignGetSignInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  cycleid_ = 0u;
  curdaynum_ = 0u;
  supplementnum_ = 0u;
  accudaynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSignGetSignInfoRsp::~TSignGetSignInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TSignGetSignInfoRsp)
  SharedDtor();
}

void TSignGetSignInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSignGetSignInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSignGetSignInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSignGetSignInfoRsp_descriptor_;
}

const TSignGetSignInfoRsp& TSignGetSignInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSign_2eproto();
  return *default_instance_;
}

TSignGetSignInfoRsp* TSignGetSignInfoRsp::default_instance_ = NULL;

TSignGetSignInfoRsp* TSignGetSignInfoRsp::New() const {
  return new TSignGetSignInfoRsp;
}

void TSignGetSignInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSignGetSignInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cycleid_, accudaynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  daysignreceivearray_.Clear();
  accusignreceivearray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSignGetSignInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSignGetSignInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CycleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cycleid_)));
          set_has_cycleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CurDayNum;
        break;
      }

      // optional uint32 CurDayNum = 2;
      case 2: {
        if (tag == 16) {
         parse_CurDayNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curdaynum_)));
          set_has_curdaynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SupplementNum;
        break;
      }

      // optional uint32 SupplementNum = 3;
      case 3: {
        if (tag == 24) {
         parse_SupplementNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &supplementnum_)));
          set_has_supplementnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AccuDayNum;
        break;
      }

      // optional uint32 AccuDayNum = 4;
      case 4: {
        if (tag == 32) {
         parse_AccuDayNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accudaynum_)));
          set_has_accudaynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DaySignReceiveArray;
        break;
      }

      // repeated .pb.TSignReceiveRewardInfo DaySignReceiveArray = 5;
      case 5: {
        if (tag == 42) {
         parse_DaySignReceiveArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daysignreceivearray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DaySignReceiveArray;
        if (input->ExpectTag(50)) goto parse_AccuSignReceiveArray;
        break;
      }

      // repeated .pb.TSignReceiveRewardInfo AccuSignReceiveArray = 6;
      case 6: {
        if (tag == 50) {
         parse_AccuSignReceiveArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accusignreceivearray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_AccuSignReceiveArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSignGetSignInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSignGetSignInfoRsp)
  return false;
#undef DO_
}

void TSignGetSignInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSignGetSignInfoRsp)
  // optional uint32 CycleId = 1;
  if (has_cycleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cycleid(), output);
  }

  // optional uint32 CurDayNum = 2;
  if (has_curdaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curdaynum(), output);
  }

  // optional uint32 SupplementNum = 3;
  if (has_supplementnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->supplementnum(), output);
  }

  // optional uint32 AccuDayNum = 4;
  if (has_accudaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->accudaynum(), output);
  }

  // repeated .pb.TSignReceiveRewardInfo DaySignReceiveArray = 5;
  for (int i = 0; i < this->daysignreceivearray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->daysignreceivearray(i), output);
  }

  // repeated .pb.TSignReceiveRewardInfo AccuSignReceiveArray = 6;
  for (int i = 0; i < this->accusignreceivearray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->accusignreceivearray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSignGetSignInfoRsp)
}

::google::protobuf::uint8* TSignGetSignInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSignGetSignInfoRsp)
  // optional uint32 CycleId = 1;
  if (has_cycleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cycleid(), target);
  }

  // optional uint32 CurDayNum = 2;
  if (has_curdaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curdaynum(), target);
  }

  // optional uint32 SupplementNum = 3;
  if (has_supplementnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->supplementnum(), target);
  }

  // optional uint32 AccuDayNum = 4;
  if (has_accudaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->accudaynum(), target);
  }

  // repeated .pb.TSignReceiveRewardInfo DaySignReceiveArray = 5;
  for (int i = 0; i < this->daysignreceivearray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->daysignreceivearray(i), target);
  }

  // repeated .pb.TSignReceiveRewardInfo AccuSignReceiveArray = 6;
  for (int i = 0; i < this->accusignreceivearray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->accusignreceivearray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSignGetSignInfoRsp)
  return target;
}

int TSignGetSignInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CycleId = 1;
    if (has_cycleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cycleid());
    }

    // optional uint32 CurDayNum = 2;
    if (has_curdaynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curdaynum());
    }

    // optional uint32 SupplementNum = 3;
    if (has_supplementnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->supplementnum());
    }

    // optional uint32 AccuDayNum = 4;
    if (has_accudaynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accudaynum());
    }

  }
  // repeated .pb.TSignReceiveRewardInfo DaySignReceiveArray = 5;
  total_size += 1 * this->daysignreceivearray_size();
  for (int i = 0; i < this->daysignreceivearray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daysignreceivearray(i));
  }

  // repeated .pb.TSignReceiveRewardInfo AccuSignReceiveArray = 6;
  total_size += 1 * this->accusignreceivearray_size();
  for (int i = 0; i < this->accusignreceivearray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accusignreceivearray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSignGetSignInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSignGetSignInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSignGetSignInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSignGetSignInfoRsp::MergeFrom(const TSignGetSignInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  daysignreceivearray_.MergeFrom(from.daysignreceivearray_);
  accusignreceivearray_.MergeFrom(from.accusignreceivearray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cycleid()) {
      set_cycleid(from.cycleid());
    }
    if (from.has_curdaynum()) {
      set_curdaynum(from.curdaynum());
    }
    if (from.has_supplementnum()) {
      set_supplementnum(from.supplementnum());
    }
    if (from.has_accudaynum()) {
      set_accudaynum(from.accudaynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSignGetSignInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSignGetSignInfoRsp::CopyFrom(const TSignGetSignInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSignGetSignInfoRsp::IsInitialized() const {

  return true;
}

void TSignGetSignInfoRsp::Swap(TSignGetSignInfoRsp* other) {
  if (other != this) {
    std::swap(cycleid_, other->cycleid_);
    std::swap(curdaynum_, other->curdaynum_);
    std::swap(supplementnum_, other->supplementnum_);
    std::swap(accudaynum_, other->accudaynum_);
    daysignreceivearray_.Swap(&other->daysignreceivearray_);
    accusignreceivearray_.Swap(&other->accusignreceivearray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSignGetSignInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSignGetSignInfoRsp_descriptor_;
  metadata.reflection = TSignGetSignInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TSignSignReq::TSignSignReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSignSignReq)
}

void TSignSignReq::InitAsDefaultInstance() {
}

TSignSignReq::TSignSignReq(const TSignSignReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSignSignReq)
}

void TSignSignReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSignSignReq::~TSignSignReq() {
  // @@protoc_insertion_point(destructor:pb.TSignSignReq)
  SharedDtor();
}

void TSignSignReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSignSignReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSignSignReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSignSignReq_descriptor_;
}

const TSignSignReq& TSignSignReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSign_2eproto();
  return *default_instance_;
}

TSignSignReq* TSignSignReq::default_instance_ = NULL;

TSignSignReq* TSignSignReq::New() const {
  return new TSignSignReq;
}

void TSignSignReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSignSignReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSignSignReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSignSignReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSignSignReq)
  return false;
#undef DO_
}

void TSignSignReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSignSignReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSignSignReq)
}

::google::protobuf::uint8* TSignSignReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSignSignReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSignSignReq)
  return target;
}

int TSignSignReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSignSignReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSignSignReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSignSignReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSignSignReq::MergeFrom(const TSignSignReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSignSignReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSignSignReq::CopyFrom(const TSignSignReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSignSignReq::IsInitialized() const {

  return true;
}

void TSignSignReq::Swap(TSignSignReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSignSignReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSignSignReq_descriptor_;
  metadata.reflection = TSignSignReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSignSignRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TSignSignRsp::TSignSignRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSignSignRsp)
}

void TSignSignRsp::InitAsDefaultInstance() {
}

TSignSignRsp::TSignSignRsp(const TSignSignRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSignSignRsp)
}

void TSignSignRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSignSignRsp::~TSignSignRsp() {
  // @@protoc_insertion_point(destructor:pb.TSignSignRsp)
  SharedDtor();
}

void TSignSignRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSignSignRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSignSignRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSignSignRsp_descriptor_;
}

const TSignSignRsp& TSignSignRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSign_2eproto();
  return *default_instance_;
}

TSignSignRsp* TSignSignRsp::default_instance_ = NULL;

TSignSignRsp* TSignSignRsp::New() const {
  return new TSignSignRsp;
}

void TSignSignRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSignSignRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSignSignRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSignSignRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSignSignRsp)
  return false;
#undef DO_
}

void TSignSignRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSignSignRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSignSignRsp)
}

::google::protobuf::uint8* TSignSignRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSignSignRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSignSignRsp)
  return target;
}

int TSignSignRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSignSignRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSignSignRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSignSignRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSignSignRsp::MergeFrom(const TSignSignRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSignSignRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSignSignRsp::CopyFrom(const TSignSignRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSignSignRsp::IsInitialized() const {

  return true;
}

void TSignSignRsp::Swap(TSignSignRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSignSignRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSignSignRsp_descriptor_;
  metadata.reflection = TSignSignRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TSignSupplementSignReq::TSignSupplementSignReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSignSupplementSignReq)
}

void TSignSupplementSignReq::InitAsDefaultInstance() {
}

TSignSupplementSignReq::TSignSupplementSignReq(const TSignSupplementSignReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSignSupplementSignReq)
}

void TSignSupplementSignReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSignSupplementSignReq::~TSignSupplementSignReq() {
  // @@protoc_insertion_point(destructor:pb.TSignSupplementSignReq)
  SharedDtor();
}

void TSignSupplementSignReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSignSupplementSignReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSignSupplementSignReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSignSupplementSignReq_descriptor_;
}

const TSignSupplementSignReq& TSignSupplementSignReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSign_2eproto();
  return *default_instance_;
}

TSignSupplementSignReq* TSignSupplementSignReq::default_instance_ = NULL;

TSignSupplementSignReq* TSignSupplementSignReq::New() const {
  return new TSignSupplementSignReq;
}

void TSignSupplementSignReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSignSupplementSignReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSignSupplementSignReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSignSupplementSignReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSignSupplementSignReq)
  return false;
#undef DO_
}

void TSignSupplementSignReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSignSupplementSignReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSignSupplementSignReq)
}

::google::protobuf::uint8* TSignSupplementSignReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSignSupplementSignReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSignSupplementSignReq)
  return target;
}

int TSignSupplementSignReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSignSupplementSignReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSignSupplementSignReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSignSupplementSignReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSignSupplementSignReq::MergeFrom(const TSignSupplementSignReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSignSupplementSignReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSignSupplementSignReq::CopyFrom(const TSignSupplementSignReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSignSupplementSignReq::IsInitialized() const {

  return true;
}

void TSignSupplementSignReq::Swap(TSignSupplementSignReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSignSupplementSignReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSignSupplementSignReq_descriptor_;
  metadata.reflection = TSignSupplementSignReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSignSupplementSignRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TSignSupplementSignRsp::TSignSupplementSignRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSignSupplementSignRsp)
}

void TSignSupplementSignRsp::InitAsDefaultInstance() {
}

TSignSupplementSignRsp::TSignSupplementSignRsp(const TSignSupplementSignRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSignSupplementSignRsp)
}

void TSignSupplementSignRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSignSupplementSignRsp::~TSignSupplementSignRsp() {
  // @@protoc_insertion_point(destructor:pb.TSignSupplementSignRsp)
  SharedDtor();
}

void TSignSupplementSignRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSignSupplementSignRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSignSupplementSignRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSignSupplementSignRsp_descriptor_;
}

const TSignSupplementSignRsp& TSignSupplementSignRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSign_2eproto();
  return *default_instance_;
}

TSignSupplementSignRsp* TSignSupplementSignRsp::default_instance_ = NULL;

TSignSupplementSignRsp* TSignSupplementSignRsp::New() const {
  return new TSignSupplementSignRsp;
}

void TSignSupplementSignRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSignSupplementSignRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSignSupplementSignRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSignSupplementSignRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSignSupplementSignRsp)
  return false;
#undef DO_
}

void TSignSupplementSignRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSignSupplementSignRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSignSupplementSignRsp)
}

::google::protobuf::uint8* TSignSupplementSignRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSignSupplementSignRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSignSupplementSignRsp)
  return target;
}

int TSignSupplementSignRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSignSupplementSignRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSignSupplementSignRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSignSupplementSignRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSignSupplementSignRsp::MergeFrom(const TSignSupplementSignRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSignSupplementSignRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSignSupplementSignRsp::CopyFrom(const TSignSupplementSignRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSignSupplementSignRsp::IsInitialized() const {

  return true;
}

void TSignSupplementSignRsp::Swap(TSignSupplementSignRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSignSupplementSignRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSignSupplementSignRsp_descriptor_;
  metadata.reflection = TSignSupplementSignRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSignReceiveAccuSignRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

TSignReceiveAccuSignRewardReq::TSignReceiveAccuSignRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSignReceiveAccuSignRewardReq)
}

void TSignReceiveAccuSignRewardReq::InitAsDefaultInstance() {
}

TSignReceiveAccuSignRewardReq::TSignReceiveAccuSignRewardReq(const TSignReceiveAccuSignRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSignReceiveAccuSignRewardReq)
}

void TSignReceiveAccuSignRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSignReceiveAccuSignRewardReq::~TSignReceiveAccuSignRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TSignReceiveAccuSignRewardReq)
  SharedDtor();
}

void TSignReceiveAccuSignRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSignReceiveAccuSignRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSignReceiveAccuSignRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSignReceiveAccuSignRewardReq_descriptor_;
}

const TSignReceiveAccuSignRewardReq& TSignReceiveAccuSignRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSign_2eproto();
  return *default_instance_;
}

TSignReceiveAccuSignRewardReq* TSignReceiveAccuSignRewardReq::default_instance_ = NULL;

TSignReceiveAccuSignRewardReq* TSignReceiveAccuSignRewardReq::New() const {
  return new TSignReceiveAccuSignRewardReq;
}

void TSignReceiveAccuSignRewardReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSignReceiveAccuSignRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSignReceiveAccuSignRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSignReceiveAccuSignRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSignReceiveAccuSignRewardReq)
  return false;
#undef DO_
}

void TSignReceiveAccuSignRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSignReceiveAccuSignRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSignReceiveAccuSignRewardReq)
}

::google::protobuf::uint8* TSignReceiveAccuSignRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSignReceiveAccuSignRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSignReceiveAccuSignRewardReq)
  return target;
}

int TSignReceiveAccuSignRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSignReceiveAccuSignRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSignReceiveAccuSignRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSignReceiveAccuSignRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSignReceiveAccuSignRewardReq::MergeFrom(const TSignReceiveAccuSignRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSignReceiveAccuSignRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSignReceiveAccuSignRewardReq::CopyFrom(const TSignReceiveAccuSignRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSignReceiveAccuSignRewardReq::IsInitialized() const {

  return true;
}

void TSignReceiveAccuSignRewardReq::Swap(TSignReceiveAccuSignRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSignReceiveAccuSignRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSignReceiveAccuSignRewardReq_descriptor_;
  metadata.reflection = TSignReceiveAccuSignRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSignReceiveAccuSignRewardRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TSignReceiveAccuSignRewardRsp::TSignReceiveAccuSignRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSignReceiveAccuSignRewardRsp)
}

void TSignReceiveAccuSignRewardRsp::InitAsDefaultInstance() {
}

TSignReceiveAccuSignRewardRsp::TSignReceiveAccuSignRewardRsp(const TSignReceiveAccuSignRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSignReceiveAccuSignRewardRsp)
}

void TSignReceiveAccuSignRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSignReceiveAccuSignRewardRsp::~TSignReceiveAccuSignRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TSignReceiveAccuSignRewardRsp)
  SharedDtor();
}

void TSignReceiveAccuSignRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSignReceiveAccuSignRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSignReceiveAccuSignRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSignReceiveAccuSignRewardRsp_descriptor_;
}

const TSignReceiveAccuSignRewardRsp& TSignReceiveAccuSignRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSign_2eproto();
  return *default_instance_;
}

TSignReceiveAccuSignRewardRsp* TSignReceiveAccuSignRewardRsp::default_instance_ = NULL;

TSignReceiveAccuSignRewardRsp* TSignReceiveAccuSignRewardRsp::New() const {
  return new TSignReceiveAccuSignRewardRsp;
}

void TSignReceiveAccuSignRewardRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSignReceiveAccuSignRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSignReceiveAccuSignRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSignReceiveAccuSignRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSignReceiveAccuSignRewardRsp)
  return false;
#undef DO_
}

void TSignReceiveAccuSignRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSignReceiveAccuSignRewardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSignReceiveAccuSignRewardRsp)
}

::google::protobuf::uint8* TSignReceiveAccuSignRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSignReceiveAccuSignRewardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSignReceiveAccuSignRewardRsp)
  return target;
}

int TSignReceiveAccuSignRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSignReceiveAccuSignRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSignReceiveAccuSignRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSignReceiveAccuSignRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSignReceiveAccuSignRewardRsp::MergeFrom(const TSignReceiveAccuSignRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSignReceiveAccuSignRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSignReceiveAccuSignRewardRsp::CopyFrom(const TSignReceiveAccuSignRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSignReceiveAccuSignRewardRsp::IsInitialized() const {

  return true;
}

void TSignReceiveAccuSignRewardRsp::Swap(TSignReceiveAccuSignRewardRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSignReceiveAccuSignRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSignReceiveAccuSignRewardRsp_descriptor_;
  metadata.reflection = TSignReceiveAccuSignRewardRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
