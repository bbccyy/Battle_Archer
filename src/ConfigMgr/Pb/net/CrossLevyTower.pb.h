// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossLevyTower.proto

#ifndef PROTOBUF_net_2fCrossLevyTower_2eproto__INCLUDED
#define PROTOBUF_net_2fCrossLevyTower_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Battle.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
void protobuf_AssignDesc_net_2fCrossLevyTower_2eproto();
void protobuf_ShutdownFile_net_2fCrossLevyTower_2eproto();

class TCrossLevyGetTowerInfoRsp;
class TCrossLevyEnterTowerBattleReq;
class TCrossLevyEnterTowerBattleRsp;
class TCrossLevyReportTowerBattleReq;
class TCrossLevyReportTowerBattleRsp;
class TCrossLevyTowerAverageAttr;
class TCrossLevyGetTowerAverageAttrReq;
class TCrossLevyGetTowerAverageAttrRsp;
class TCrossLevyTowerBattleSquadInfo;
class TCrossLevyTowerFightAttr;
class TCrossLevyGetTowerBattleArgsReq;
class TCrossLevyGetTowerBattleArgsRsp;
class TCrossLevyReportTowerBattleResultReq;
class TCrossLevyReportTowerBattleResultRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TCrossLevyGetTowerInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetTowerInfoRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyGetTowerInfoRsp();
  virtual ~TCrossLevyGetTowerInfoRsp();

  TCrossLevyGetTowerInfoRsp(const TCrossLevyGetTowerInfoRsp& from);

  inline TCrossLevyGetTowerInfoRsp& operator=(const TCrossLevyGetTowerInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetTowerInfoRsp& default_instance();

  void Swap(TCrossLevyGetTowerInfoRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetTowerInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetTowerInfoRsp& from);
  void MergeFrom(const TCrossLevyGetTowerInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 PassLayerId = 1;
  inline bool has_passlayerid() const;
  inline void clear_passlayerid();
  static const int kPassLayerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetTowerInfoRsp</name>
  	<Function>
  		<name>passlayerid</name>
  		<replaceName>PassLayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_passlayerid</name>
  		<replaceName>PassLayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_passlayerid</name>
  		<replaceName>PassLayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 passlayerid() const;
  inline void set_passlayerid(::google::protobuf::uint32 value);

  // optional uint32 AttackLayerId = 2;
  inline bool has_attacklayerid() const;
  inline void clear_attacklayerid();
  static const int kAttackLayerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetTowerInfoRsp</name>
  	<Function>
  		<name>attacklayerid</name>
  		<replaceName>AttackLayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attacklayerid</name>
  		<replaceName>AttackLayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attacklayerid</name>
  		<replaceName>AttackLayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attacklayerid() const;
  inline void set_attacklayerid(::google::protobuf::uint32 value);

  // repeated uint32 AttackMonsterIdArr = 3;
  inline int attackmonsteridarr_size() const;
  inline void clear_attackmonsteridarr();
  static const int kAttackMonsterIdArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetTowerInfoRsp</name>
  	<Function>
  		<name>attackmonsteridarr</name>
  		<replaceName>AttackMonsterIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_attackmonsteridarr</name>
  		<replaceName>AttackMonsterIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_attackmonsteridarr</name>
  		<replaceName>AttackMonsterIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackmonsteridarr</name>
  		<replaceName>AttackMonsterIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>attackmonsteridarr_size</name>
  		<replaceName>AttackMonsterIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attackmonsteridarr(int index) const;
  inline void set_attackmonsteridarr(int index, ::google::protobuf::uint32 value);
  inline void add_attackmonsteridarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      attackmonsteridarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_attackmonsteridarr();

  // optional uint32 LoseNum = 4;
  inline bool has_losenum() const;
  inline void clear_losenum();
  static const int kLoseNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetTowerInfoRsp</name>
  	<Function>
  		<name>losenum</name>
  		<replaceName>LoseNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_losenum</name>
  		<replaceName>LoseNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_losenum</name>
  		<replaceName>LoseNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 losenum() const;
  inline void set_losenum(::google::protobuf::uint32 value);

  // optional .pb.TGroupMatchArgs BattleArgs = 5;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetTowerInfoRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGroupMatchArgs& battleargs() const;
  inline ::pb::TGroupMatchArgs* mutable_battleargs();
  inline ::pb::TGroupMatchArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TGroupMatchArgs* battleargs);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetTowerInfoRsp)
 private:
  inline void set_has_passlayerid();
  inline void clear_has_passlayerid();
  inline void set_has_attacklayerid();
  inline void clear_has_attacklayerid();
  inline void set_has_losenum();
  inline void clear_has_losenum();
  inline void set_has_battleargs();
  inline void clear_has_battleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 passlayerid_;
  ::google::protobuf::uint32 attacklayerid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > attackmonsteridarr_;
  ::pb::TGroupMatchArgs* battleargs_;
  ::google::protobuf::uint32 losenum_;
  friend void  protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyTower_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetTowerInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyEnterTowerBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyEnterTowerBattleReq : public ::google::protobuf::Message {
 public:
  TCrossLevyEnterTowerBattleReq();
  virtual ~TCrossLevyEnterTowerBattleReq();

  TCrossLevyEnterTowerBattleReq(const TCrossLevyEnterTowerBattleReq& from);

  inline TCrossLevyEnterTowerBattleReq& operator=(const TCrossLevyEnterTowerBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyEnterTowerBattleReq& default_instance();

  void Swap(TCrossLevyEnterTowerBattleReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyEnterTowerBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyEnterTowerBattleReq& from);
  void MergeFrom(const TCrossLevyEnterTowerBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerId = 1;
  inline bool has_layerid() const;
  inline void clear_layerid();
  static const int kLayerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyEnterTowerBattleReq</name>
  	<Function>
  		<name>layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerid() const;
  inline void set_layerid(::google::protobuf::uint32 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyEnterTowerBattleReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyEnterTowerBattleReq)
 private:
  inline void set_has_layerid();
  inline void clear_has_layerid();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  ::google::protobuf::uint32 layerid_;
  friend void  protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyTower_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyEnterTowerBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyEnterTowerBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyEnterTowerBattleRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyEnterTowerBattleRsp();
  virtual ~TCrossLevyEnterTowerBattleRsp();

  TCrossLevyEnterTowerBattleRsp(const TCrossLevyEnterTowerBattleRsp& from);

  inline TCrossLevyEnterTowerBattleRsp& operator=(const TCrossLevyEnterTowerBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyEnterTowerBattleRsp& default_instance();

  void Swap(TCrossLevyEnterTowerBattleRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyEnterTowerBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyEnterTowerBattleRsp& from);
  void MergeFrom(const TCrossLevyEnterTowerBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LeftChallengeNum = 1;
  inline bool has_leftchallengenum() const;
  inline void clear_leftchallengenum();
  static const int kLeftChallengeNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyEnterTowerBattleRsp</name>
  	<Function>
  		<name>leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 leftchallengenum() const;
  inline void set_leftchallengenum(::google::protobuf::uint32 value);

  // optional .pb.TGroupMatchArgs BattleArgs = 2;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyEnterTowerBattleRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGroupMatchArgs& battleargs() const;
  inline ::pb::TGroupMatchArgs* mutable_battleargs();
  inline ::pb::TGroupMatchArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TGroupMatchArgs* battleargs);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyEnterTowerBattleRsp)
 private:
  inline void set_has_leftchallengenum();
  inline void clear_has_leftchallengenum();
  inline void set_has_battleargs();
  inline void clear_has_battleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGroupMatchArgs* battleargs_;
  ::google::protobuf::uint32 leftchallengenum_;
  friend void  protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyTower_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyEnterTowerBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyReportTowerBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyReportTowerBattleReq : public ::google::protobuf::Message {
 public:
  TCrossLevyReportTowerBattleReq();
  virtual ~TCrossLevyReportTowerBattleReq();

  TCrossLevyReportTowerBattleReq(const TCrossLevyReportTowerBattleReq& from);

  inline TCrossLevyReportTowerBattleReq& operator=(const TCrossLevyReportTowerBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyReportTowerBattleReq& default_instance();

  void Swap(TCrossLevyReportTowerBattleReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyReportTowerBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyReportTowerBattleReq& from);
  void MergeFrom(const TCrossLevyReportTowerBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerId = 1;
  inline bool has_layerid() const;
  inline void clear_layerid();
  static const int kLayerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportTowerBattleReq</name>
  	<Function>
  		<name>layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerid() const;
  inline void set_layerid(::google::protobuf::uint32 value);

  // optional bytes BattleRet = 2;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportTowerBattleReq</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleret() const;
  inline void set_battleret(const ::std::string& value);
  inline void set_battleret(const char* value);
  inline void set_battleret(const void* value, size_t size);
  inline ::std::string* mutable_battleret();
  inline ::std::string* release_battleret();
  inline void set_allocated_battleret(::std::string* battleret);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyReportTowerBattleReq)
 private:
  inline void set_has_layerid();
  inline void clear_has_layerid();
  inline void set_has_battleret();
  inline void clear_has_battleret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* battleret_;
  ::google::protobuf::uint32 layerid_;
  friend void  protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyTower_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyReportTowerBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyReportTowerBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyReportTowerBattleRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyReportTowerBattleRsp();
  virtual ~TCrossLevyReportTowerBattleRsp();

  TCrossLevyReportTowerBattleRsp(const TCrossLevyReportTowerBattleRsp& from);

  inline TCrossLevyReportTowerBattleRsp& operator=(const TCrossLevyReportTowerBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyReportTowerBattleRsp& default_instance();

  void Swap(TCrossLevyReportTowerBattleRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyReportTowerBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyReportTowerBattleRsp& from);
  void MergeFrom(const TCrossLevyReportTowerBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsWin = 1;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportTowerBattleRsp</name>
  	<Function>
  		<name>iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool iswin() const;
  inline void set_iswin(bool value);

  // optional uint32 PassLayerId = 2;
  inline bool has_passlayerid() const;
  inline void clear_passlayerid();
  static const int kPassLayerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportTowerBattleRsp</name>
  	<Function>
  		<name>passlayerid</name>
  		<replaceName>PassLayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_passlayerid</name>
  		<replaceName>PassLayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_passlayerid</name>
  		<replaceName>PassLayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 passlayerid() const;
  inline void set_passlayerid(::google::protobuf::uint32 value);

  // optional uint32 AttackLayerId = 3;
  inline bool has_attacklayerid() const;
  inline void clear_attacklayerid();
  static const int kAttackLayerIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportTowerBattleRsp</name>
  	<Function>
  		<name>attacklayerid</name>
  		<replaceName>AttackLayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attacklayerid</name>
  		<replaceName>AttackLayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attacklayerid</name>
  		<replaceName>AttackLayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attacklayerid() const;
  inline void set_attacklayerid(::google::protobuf::uint32 value);

  // repeated uint32 AttackMonsterIdArr = 4;
  inline int attackmonsteridarr_size() const;
  inline void clear_attackmonsteridarr();
  static const int kAttackMonsterIdArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportTowerBattleRsp</name>
  	<Function>
  		<name>attackmonsteridarr</name>
  		<replaceName>AttackMonsterIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_attackmonsteridarr</name>
  		<replaceName>AttackMonsterIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_attackmonsteridarr</name>
  		<replaceName>AttackMonsterIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackmonsteridarr</name>
  		<replaceName>AttackMonsterIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>attackmonsteridarr_size</name>
  		<replaceName>AttackMonsterIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attackmonsteridarr(int index) const;
  inline void set_attackmonsteridarr(int index, ::google::protobuf::uint32 value);
  inline void add_attackmonsteridarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      attackmonsteridarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_attackmonsteridarr();

  // optional uint32 LoseNum = 5;
  inline bool has_losenum() const;
  inline void clear_losenum();
  static const int kLoseNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportTowerBattleRsp</name>
  	<Function>
  		<name>losenum</name>
  		<replaceName>LoseNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_losenum</name>
  		<replaceName>LoseNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_losenum</name>
  		<replaceName>LoseNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 losenum() const;
  inline void set_losenum(::google::protobuf::uint32 value);

  // optional .pb.TGroupMatchArgs NextBattleArgs = 6;
  inline bool has_nextbattleargs() const;
  inline void clear_nextbattleargs();
  static const int kNextBattleArgsFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportTowerBattleRsp</name>
  	<Function>
  		<name>nextbattleargs</name>
  		<replaceName>NextBattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_nextbattleargs</name>
  		<replaceName>NextBattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_nextbattleargs</name>
  		<replaceName>NextBattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nextbattleargs</name>
  		<replaceName>NextBattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGroupMatchArgs& nextbattleargs() const;
  inline ::pb::TGroupMatchArgs* mutable_nextbattleargs();
  inline ::pb::TGroupMatchArgs* release_nextbattleargs();
  inline void set_allocated_nextbattleargs(::pb::TGroupMatchArgs* nextbattleargs);

  // optional uint32 LeftChallengeNum = 7;
  inline bool has_leftchallengenum() const;
  inline void clear_leftchallengenum();
  static const int kLeftChallengeNumFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportTowerBattleRsp</name>
  	<Function>
  		<name>leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 leftchallengenum() const;
  inline void set_leftchallengenum(::google::protobuf::uint32 value);

  // optional uint32 LevyScores = 8;
  inline bool has_levyscores() const;
  inline void clear_levyscores();
  static const int kLevyScoresFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportTowerBattleRsp</name>
  	<Function>
  		<name>levyscores</name>
  		<replaceName>LevyScores</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_levyscores</name>
  		<replaceName>LevyScores</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_levyscores</name>
  		<replaceName>LevyScores</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 levyscores() const;
  inline void set_levyscores(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward RewardArr = 9;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportTowerBattleRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional uint32 RewardChallengeNum = 10;
  inline bool has_rewardchallengenum() const;
  inline void clear_rewardchallengenum();
  static const int kRewardChallengeNumFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportTowerBattleRsp</name>
  	<Function>
  		<name>rewardchallengenum</name>
  		<replaceName>RewardChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardchallengenum</name>
  		<replaceName>RewardChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardchallengenum</name>
  		<replaceName>RewardChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardchallengenum() const;
  inline void set_rewardchallengenum(::google::protobuf::uint32 value);

  // optional uint32 RewardLevyScores = 11;
  inline bool has_rewardlevyscores() const;
  inline void clear_rewardlevyscores();
  static const int kRewardLevyScoresFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportTowerBattleRsp</name>
  	<Function>
  		<name>rewardlevyscores</name>
  		<replaceName>RewardLevyScores</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardlevyscores</name>
  		<replaceName>RewardLevyScores</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardlevyscores</name>
  		<replaceName>RewardLevyScores</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardlevyscores() const;
  inline void set_rewardlevyscores(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyReportTowerBattleRsp)
 private:
  inline void set_has_iswin();
  inline void clear_has_iswin();
  inline void set_has_passlayerid();
  inline void clear_has_passlayerid();
  inline void set_has_attacklayerid();
  inline void clear_has_attacklayerid();
  inline void set_has_losenum();
  inline void clear_has_losenum();
  inline void set_has_nextbattleargs();
  inline void clear_has_nextbattleargs();
  inline void set_has_leftchallengenum();
  inline void clear_has_leftchallengenum();
  inline void set_has_levyscores();
  inline void clear_has_levyscores();
  inline void set_has_rewardchallengenum();
  inline void clear_has_rewardchallengenum();
  inline void set_has_rewardlevyscores();
  inline void clear_has_rewardlevyscores();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool iswin_;
  ::google::protobuf::uint32 passlayerid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > attackmonsteridarr_;
  ::google::protobuf::uint32 attacklayerid_;
  ::google::protobuf::uint32 losenum_;
  ::pb::TGroupMatchArgs* nextbattleargs_;
  ::google::protobuf::uint32 leftchallengenum_;
  ::google::protobuf::uint32 levyscores_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 rewardchallengenum_;
  ::google::protobuf::uint32 rewardlevyscores_;
  friend void  protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyTower_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyReportTowerBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyTowerAverageAttr</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyTowerAverageAttr : public ::google::protobuf::Message {
 public:
  TCrossLevyTowerAverageAttr();
  virtual ~TCrossLevyTowerAverageAttr();

  TCrossLevyTowerAverageAttr(const TCrossLevyTowerAverageAttr& from);

  inline TCrossLevyTowerAverageAttr& operator=(const TCrossLevyTowerAverageAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyTowerAverageAttr& default_instance();

  void Swap(TCrossLevyTowerAverageAttr* other);

  // implements Message ----------------------------------------------

  TCrossLevyTowerAverageAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyTowerAverageAttr& from);
  void MergeFrom(const TCrossLevyTowerAverageAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AttrId = 1;
  inline bool has_attrid() const;
  inline void clear_attrid();
  static const int kAttrIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyTowerAverageAttr</name>
  	<Function>
  		<name>attrid</name>
  		<replaceName>AttrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attrid</name>
  		<replaceName>AttrId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attrid</name>
  		<replaceName>AttrId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attrid() const;
  inline void set_attrid(::google::protobuf::uint32 value);

  // optional uint64 Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyTowerAverageAttr</name>
  	<Function>
  		<name>value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyTowerAverageAttr)
 private:
  inline void set_has_attrid();
  inline void clear_has_attrid();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 value_;
  ::google::protobuf::uint32 attrid_;
  friend void  protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyTower_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyTowerAverageAttr* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetTowerAverageAttrReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetTowerAverageAttrReq : public ::google::protobuf::Message {
 public:
  TCrossLevyGetTowerAverageAttrReq();
  virtual ~TCrossLevyGetTowerAverageAttrReq();

  TCrossLevyGetTowerAverageAttrReq(const TCrossLevyGetTowerAverageAttrReq& from);

  inline TCrossLevyGetTowerAverageAttrReq& operator=(const TCrossLevyGetTowerAverageAttrReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetTowerAverageAttrReq& default_instance();

  void Swap(TCrossLevyGetTowerAverageAttrReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetTowerAverageAttrReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetTowerAverageAttrReq& from);
  void MergeFrom(const TCrossLevyGetTowerAverageAttrReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetTowerAverageAttrReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // repeated uint32 ExpectAttrIdArr = 2;
  inline int expectattridarr_size() const;
  inline void clear_expectattridarr();
  static const int kExpectAttrIdArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetTowerAverageAttrReq</name>
  	<Function>
  		<name>expectattridarr</name>
  		<replaceName>ExpectAttrIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_expectattridarr</name>
  		<replaceName>ExpectAttrIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_expectattridarr</name>
  		<replaceName>ExpectAttrIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_expectattridarr</name>
  		<replaceName>ExpectAttrIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>expectattridarr_size</name>
  		<replaceName>ExpectAttrIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 expectattridarr(int index) const;
  inline void set_expectattridarr(int index, ::google::protobuf::uint32 value);
  inline void add_expectattridarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      expectattridarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_expectattridarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetTowerAverageAttrReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > expectattridarr_;
  friend void  protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyTower_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetTowerAverageAttrReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetTowerAverageAttrRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetTowerAverageAttrRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyGetTowerAverageAttrRsp();
  virtual ~TCrossLevyGetTowerAverageAttrRsp();

  TCrossLevyGetTowerAverageAttrRsp(const TCrossLevyGetTowerAverageAttrRsp& from);

  inline TCrossLevyGetTowerAverageAttrRsp& operator=(const TCrossLevyGetTowerAverageAttrRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetTowerAverageAttrRsp& default_instance();

  void Swap(TCrossLevyGetTowerAverageAttrRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetTowerAverageAttrRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetTowerAverageAttrRsp& from);
  void MergeFrom(const TCrossLevyGetTowerAverageAttrRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossLevyTowerAverageAttr AverageAttrArr = 1;
  inline int averageattrarr_size() const;
  inline void clear_averageattrarr();
  static const int kAverageAttrArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetTowerAverageAttrRsp</name>
  	<Function>
  		<name>averageattrarr</name>
  		<replaceName>AverageAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_averageattrarr</name>
  		<replaceName>AverageAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_averageattrarr</name>
  		<replaceName>AverageAttrArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_averageattrarr</name>
  		<replaceName>AverageAttrArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>averageattrarr_size</name>
  		<replaceName>AverageAttrArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyTowerAverageAttr& averageattrarr(int index) const;
  inline ::pb::TCrossLevyTowerAverageAttr* mutable_averageattrarr(int index);
  inline ::pb::TCrossLevyTowerAverageAttr* add_averageattrarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerAverageAttr >&
      averageattrarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerAverageAttr >*
      mutable_averageattrarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetTowerAverageAttrRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerAverageAttr > averageattrarr_;
  friend void  protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyTower_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetTowerAverageAttrRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyTowerBattleSquadInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyTowerBattleSquadInfo : public ::google::protobuf::Message {
 public:
  TCrossLevyTowerBattleSquadInfo();
  virtual ~TCrossLevyTowerBattleSquadInfo();

  TCrossLevyTowerBattleSquadInfo(const TCrossLevyTowerBattleSquadInfo& from);

  inline TCrossLevyTowerBattleSquadInfo& operator=(const TCrossLevyTowerBattleSquadInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyTowerBattleSquadInfo& default_instance();

  void Swap(TCrossLevyTowerBattleSquadInfo* other);

  // implements Message ----------------------------------------------

  TCrossLevyTowerBattleSquadInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyTowerBattleSquadInfo& from);
  void MergeFrom(const TCrossLevyTowerBattleSquadInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 Squad = 1;
  inline int squad_size() const;
  inline void clear_squad();
  static const int kSquadFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyTowerBattleSquadInfo</name>
  	<Function>
  		<name>squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squad_size</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 squad(int index) const;
  inline void set_squad(int index, ::google::protobuf::uint32 value);
  inline void add_squad(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      squad() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_squad();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyTowerBattleSquadInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > squad_;
  friend void  protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyTower_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyTowerBattleSquadInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyTowerFightAttr</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyTowerFightAttr : public ::google::protobuf::Message {
 public:
  TCrossLevyTowerFightAttr();
  virtual ~TCrossLevyTowerFightAttr();

  TCrossLevyTowerFightAttr(const TCrossLevyTowerFightAttr& from);

  inline TCrossLevyTowerFightAttr& operator=(const TCrossLevyTowerFightAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyTowerFightAttr& default_instance();

  void Swap(TCrossLevyTowerFightAttr* other);

  // implements Message ----------------------------------------------

  TCrossLevyTowerFightAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyTowerFightAttr& from);
  void MergeFrom(const TCrossLevyTowerFightAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AttrId = 1;
  inline bool has_attrid() const;
  inline void clear_attrid();
  static const int kAttrIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyTowerFightAttr</name>
  	<Function>
  		<name>attrid</name>
  		<replaceName>AttrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attrid</name>
  		<replaceName>AttrId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attrid</name>
  		<replaceName>AttrId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attrid() const;
  inline void set_attrid(::google::protobuf::uint32 value);

  // optional int32 PercentVal = 2;
  inline bool has_percentval() const;
  inline void clear_percentval();
  static const int kPercentValFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyTowerFightAttr</name>
  	<Function>
  		<name>percentval</name>
  		<replaceName>PercentVal</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_percentval</name>
  		<replaceName>PercentVal</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_percentval</name>
  		<replaceName>PercentVal</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 percentval() const;
  inline void set_percentval(::google::protobuf::int32 value);

  // optional uint64 ExtraVal = 3;
  inline bool has_extraval() const;
  inline void clear_extraval();
  static const int kExtraValFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyTowerFightAttr</name>
  	<Function>
  		<name>extraval</name>
  		<replaceName>ExtraVal</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_extraval</name>
  		<replaceName>ExtraVal</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_extraval</name>
  		<replaceName>ExtraVal</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 extraval() const;
  inline void set_extraval(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyTowerFightAttr)
 private:
  inline void set_has_attrid();
  inline void clear_has_attrid();
  inline void set_has_percentval();
  inline void clear_has_percentval();
  inline void set_has_extraval();
  inline void clear_has_extraval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 attrid_;
  ::google::protobuf::int32 percentval_;
  ::google::protobuf::uint64 extraval_;
  friend void  protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyTower_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyTowerFightAttr* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetTowerBattleArgsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetTowerBattleArgsReq : public ::google::protobuf::Message {
 public:
  TCrossLevyGetTowerBattleArgsReq();
  virtual ~TCrossLevyGetTowerBattleArgsReq();

  TCrossLevyGetTowerBattleArgsReq(const TCrossLevyGetTowerBattleArgsReq& from);

  inline TCrossLevyGetTowerBattleArgsReq& operator=(const TCrossLevyGetTowerBattleArgsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetTowerBattleArgsReq& default_instance();

  void Swap(TCrossLevyGetTowerBattleArgsReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetTowerBattleArgsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetTowerBattleArgsReq& from);
  void MergeFrom(const TCrossLevyGetTowerBattleArgsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetTowerBattleArgsReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional bool IsEnter = 2;
  inline bool has_isenter() const;
  inline void clear_isenter();
  static const int kIsEnterFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetTowerBattleArgsReq</name>
  	<Function>
  		<name>isenter</name>
  		<replaceName>IsEnter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isenter</name>
  		<replaceName>IsEnter</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isenter</name>
  		<replaceName>IsEnter</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isenter() const;
  inline void set_isenter(bool value);

  // repeated .pb.TCrossLevyTowerBattleSquadInfo SquadArr = 3;
  inline int squadarr_size() const;
  inline void clear_squadarr();
  static const int kSquadArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetTowerBattleArgsReq</name>
  	<Function>
  		<name>squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadarr</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squadarr_size</name>
  		<replaceName>SquadArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyTowerBattleSquadInfo& squadarr(int index) const;
  inline ::pb::TCrossLevyTowerBattleSquadInfo* mutable_squadarr(int index);
  inline ::pb::TCrossLevyTowerBattleSquadInfo* add_squadarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerBattleSquadInfo >&
      squadarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerBattleSquadInfo >*
      mutable_squadarr();

  // repeated uint32 BattleInfoIdArr = 4;
  inline int battleinfoidarr_size() const;
  inline void clear_battleinfoidarr();
  static const int kBattleInfoIdArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetTowerBattleArgsReq</name>
  	<Function>
  		<name>battleinfoidarr</name>
  		<replaceName>BattleInfoIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_battleinfoidarr</name>
  		<replaceName>BattleInfoIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_battleinfoidarr</name>
  		<replaceName>BattleInfoIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleinfoidarr</name>
  		<replaceName>BattleInfoIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>battleinfoidarr_size</name>
  		<replaceName>BattleInfoIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleinfoidarr(int index) const;
  inline void set_battleinfoidarr(int index, ::google::protobuf::uint32 value);
  inline void add_battleinfoidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      battleinfoidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_battleinfoidarr();

  // optional uint32 MonsterAdjustConfId = 5;
  inline bool has_monsteradjustconfid() const;
  inline void clear_monsteradjustconfid();
  static const int kMonsterAdjustConfIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetTowerBattleArgsReq</name>
  	<Function>
  		<name>monsteradjustconfid</name>
  		<replaceName>MonsterAdjustConfId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsteradjustconfid</name>
  		<replaceName>MonsterAdjustConfId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsteradjustconfid</name>
  		<replaceName>MonsterAdjustConfId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 monsteradjustconfid() const;
  inline void set_monsteradjustconfid(::google::protobuf::uint32 value);

  // repeated .pb.TCrossLevyTowerAverageAttr AverageAttrArr = 6;
  inline int averageattrarr_size() const;
  inline void clear_averageattrarr();
  static const int kAverageAttrArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetTowerBattleArgsReq</name>
  	<Function>
  		<name>averageattrarr</name>
  		<replaceName>AverageAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_averageattrarr</name>
  		<replaceName>AverageAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_averageattrarr</name>
  		<replaceName>AverageAttrArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_averageattrarr</name>
  		<replaceName>AverageAttrArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>averageattrarr_size</name>
  		<replaceName>AverageAttrArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyTowerAverageAttr& averageattrarr(int index) const;
  inline ::pb::TCrossLevyTowerAverageAttr* mutable_averageattrarr(int index);
  inline ::pb::TCrossLevyTowerAverageAttr* add_averageattrarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerAverageAttr >&
      averageattrarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerAverageAttr >*
      mutable_averageattrarr();

  // optional .pb.TBattleCheckParam BattleCheckParam = 7;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetTowerBattleArgsReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // repeated .pb.TCrossLevyTowerFightAttr FightAttrArr = 8;
  inline int fightattrarr_size() const;
  inline void clear_fightattrarr();
  static const int kFightAttrArrFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetTowerBattleArgsReq</name>
  	<Function>
  		<name>fightattrarr</name>
  		<replaceName>FightAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fightattrarr</name>
  		<replaceName>FightAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fightattrarr</name>
  		<replaceName>FightAttrArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightattrarr</name>
  		<replaceName>FightAttrArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fightattrarr_size</name>
  		<replaceName>FightAttrArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyTowerFightAttr& fightattrarr(int index) const;
  inline ::pb::TCrossLevyTowerFightAttr* mutable_fightattrarr(int index);
  inline ::pb::TCrossLevyTowerFightAttr* add_fightattrarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerFightAttr >&
      fightattrarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerFightAttr >*
      mutable_fightattrarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetTowerBattleArgsReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_isenter();
  inline void clear_has_isenter();
  inline void set_has_monsteradjustconfid();
  inline void clear_has_monsteradjustconfid();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerBattleSquadInfo > squadarr_;
  bool isenter_;
  ::google::protobuf::uint32 monsteradjustconfid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > battleinfoidarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerAverageAttr > averageattrarr_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerFightAttr > fightattrarr_;
  friend void  protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyTower_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetTowerBattleArgsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetTowerBattleArgsRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetTowerBattleArgsRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyGetTowerBattleArgsRsp();
  virtual ~TCrossLevyGetTowerBattleArgsRsp();

  TCrossLevyGetTowerBattleArgsRsp(const TCrossLevyGetTowerBattleArgsRsp& from);

  inline TCrossLevyGetTowerBattleArgsRsp& operator=(const TCrossLevyGetTowerBattleArgsRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetTowerBattleArgsRsp& default_instance();

  void Swap(TCrossLevyGetTowerBattleArgsRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetTowerBattleArgsRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetTowerBattleArgsRsp& from);
  void MergeFrom(const TCrossLevyGetTowerBattleArgsRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGroupMatchArgs BattleArgs = 1;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetTowerBattleArgsRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGroupMatchArgs& battleargs() const;
  inline ::pb::TGroupMatchArgs* mutable_battleargs();
  inline ::pb::TGroupMatchArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TGroupMatchArgs* battleargs);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetTowerBattleArgsRsp)
 private:
  inline void set_has_battleargs();
  inline void clear_has_battleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGroupMatchArgs* battleargs_;
  friend void  protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyTower_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetTowerBattleArgsRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyReportTowerBattleResultReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyReportTowerBattleResultReq : public ::google::protobuf::Message {
 public:
  TCrossLevyReportTowerBattleResultReq();
  virtual ~TCrossLevyReportTowerBattleResultReq();

  TCrossLevyReportTowerBattleResultReq(const TCrossLevyReportTowerBattleResultReq& from);

  inline TCrossLevyReportTowerBattleResultReq& operator=(const TCrossLevyReportTowerBattleResultReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyReportTowerBattleResultReq& default_instance();

  void Swap(TCrossLevyReportTowerBattleResultReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyReportTowerBattleResultReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyReportTowerBattleResultReq& from);
  void MergeFrom(const TCrossLevyReportTowerBattleResultReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportTowerBattleResultReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportTowerBattleResultReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // optional .pb.TGroupMatchResult BattleRet = 3;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportTowerBattleResultReq</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGroupMatchResult& battleret() const;
  inline ::pb::TGroupMatchResult* mutable_battleret();
  inline ::pb::TGroupMatchResult* release_battleret();
  inline void set_allocated_battleret(::pb::TGroupMatchResult* battleret);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyReportTowerBattleResultReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();
  inline void set_has_battleret();
  inline void clear_has_battleret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  ::pb::TGroupMatchResult* battleret_;
  friend void  protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyTower_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyReportTowerBattleResultReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyReportTowerBattleResultRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevyTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyReportTowerBattleResultRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyReportTowerBattleResultRsp();
  virtual ~TCrossLevyReportTowerBattleResultRsp();

  TCrossLevyReportTowerBattleResultRsp(const TCrossLevyReportTowerBattleResultRsp& from);

  inline TCrossLevyReportTowerBattleResultRsp& operator=(const TCrossLevyReportTowerBattleResultRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyReportTowerBattleResultRsp& default_instance();

  void Swap(TCrossLevyReportTowerBattleResultRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyReportTowerBattleResultRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyReportTowerBattleResultRsp& from);
  void MergeFrom(const TCrossLevyReportTowerBattleResultRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsWin = 1;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportTowerBattleResultRsp</name>
  	<Function>
  		<name>iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool iswin() const;
  inline void set_iswin(bool value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyReportTowerBattleResultRsp)
 private:
  inline void set_has_iswin();
  inline void clear_has_iswin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool iswin_;
  friend void  protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevyTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevyTower_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyReportTowerBattleResultRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TCrossLevyGetTowerInfoRsp

// optional uint32 PassLayerId = 1;
inline bool TCrossLevyGetTowerInfoRsp::has_passlayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyGetTowerInfoRsp::set_has_passlayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyGetTowerInfoRsp::clear_has_passlayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyGetTowerInfoRsp::clear_passlayerid() {
  passlayerid_ = 0u;
  clear_has_passlayerid();
}
inline ::google::protobuf::uint32 TCrossLevyGetTowerInfoRsp::passlayerid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetTowerInfoRsp.PassLayerId)
  return passlayerid_;
}
inline void TCrossLevyGetTowerInfoRsp::set_passlayerid(::google::protobuf::uint32 value) {
  set_has_passlayerid();
  passlayerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetTowerInfoRsp.PassLayerId)
}

// optional uint32 AttackLayerId = 2;
inline bool TCrossLevyGetTowerInfoRsp::has_attacklayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyGetTowerInfoRsp::set_has_attacklayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyGetTowerInfoRsp::clear_has_attacklayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyGetTowerInfoRsp::clear_attacklayerid() {
  attacklayerid_ = 0u;
  clear_has_attacklayerid();
}
inline ::google::protobuf::uint32 TCrossLevyGetTowerInfoRsp::attacklayerid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetTowerInfoRsp.AttackLayerId)
  return attacklayerid_;
}
inline void TCrossLevyGetTowerInfoRsp::set_attacklayerid(::google::protobuf::uint32 value) {
  set_has_attacklayerid();
  attacklayerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetTowerInfoRsp.AttackLayerId)
}

// repeated uint32 AttackMonsterIdArr = 3;
inline int TCrossLevyGetTowerInfoRsp::attackmonsteridarr_size() const {
  return attackmonsteridarr_.size();
}
inline void TCrossLevyGetTowerInfoRsp::clear_attackmonsteridarr() {
  attackmonsteridarr_.Clear();
}
inline ::google::protobuf::uint32 TCrossLevyGetTowerInfoRsp::attackmonsteridarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetTowerInfoRsp.AttackMonsterIdArr)
  return attackmonsteridarr_.Get(index);
}
inline void TCrossLevyGetTowerInfoRsp::set_attackmonsteridarr(int index, ::google::protobuf::uint32 value) {
  attackmonsteridarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetTowerInfoRsp.AttackMonsterIdArr)
}
inline void TCrossLevyGetTowerInfoRsp::add_attackmonsteridarr(::google::protobuf::uint32 value) {
  attackmonsteridarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetTowerInfoRsp.AttackMonsterIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TCrossLevyGetTowerInfoRsp::attackmonsteridarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetTowerInfoRsp.AttackMonsterIdArr)
  return attackmonsteridarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TCrossLevyGetTowerInfoRsp::mutable_attackmonsteridarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetTowerInfoRsp.AttackMonsterIdArr)
  return &attackmonsteridarr_;
}

// optional uint32 LoseNum = 4;
inline bool TCrossLevyGetTowerInfoRsp::has_losenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossLevyGetTowerInfoRsp::set_has_losenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossLevyGetTowerInfoRsp::clear_has_losenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossLevyGetTowerInfoRsp::clear_losenum() {
  losenum_ = 0u;
  clear_has_losenum();
}
inline ::google::protobuf::uint32 TCrossLevyGetTowerInfoRsp::losenum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetTowerInfoRsp.LoseNum)
  return losenum_;
}
inline void TCrossLevyGetTowerInfoRsp::set_losenum(::google::protobuf::uint32 value) {
  set_has_losenum();
  losenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetTowerInfoRsp.LoseNum)
}

// optional .pb.TGroupMatchArgs BattleArgs = 5;
inline bool TCrossLevyGetTowerInfoRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossLevyGetTowerInfoRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossLevyGetTowerInfoRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossLevyGetTowerInfoRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TGroupMatchArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TGroupMatchArgs& TCrossLevyGetTowerInfoRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetTowerInfoRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TGroupMatchArgs* TCrossLevyGetTowerInfoRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TGroupMatchArgs;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetTowerInfoRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TGroupMatchArgs* TCrossLevyGetTowerInfoRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TGroupMatchArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TCrossLevyGetTowerInfoRsp::set_allocated_battleargs(::pb::TGroupMatchArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyGetTowerInfoRsp.BattleArgs)
}

// -------------------------------------------------------------------

// TCrossLevyEnterTowerBattleReq

// optional uint32 LayerId = 1;
inline bool TCrossLevyEnterTowerBattleReq::has_layerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyEnterTowerBattleReq::set_has_layerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyEnterTowerBattleReq::clear_has_layerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyEnterTowerBattleReq::clear_layerid() {
  layerid_ = 0u;
  clear_has_layerid();
}
inline ::google::protobuf::uint32 TCrossLevyEnterTowerBattleReq::layerid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyEnterTowerBattleReq.LayerId)
  return layerid_;
}
inline void TCrossLevyEnterTowerBattleReq::set_layerid(::google::protobuf::uint32 value) {
  set_has_layerid();
  layerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyEnterTowerBattleReq.LayerId)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 2;
inline bool TCrossLevyEnterTowerBattleReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyEnterTowerBattleReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyEnterTowerBattleReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyEnterTowerBattleReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TCrossLevyEnterTowerBattleReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyEnterTowerBattleReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TCrossLevyEnterTowerBattleReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyEnterTowerBattleReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TCrossLevyEnterTowerBattleReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TCrossLevyEnterTowerBattleReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyEnterTowerBattleReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TCrossLevyEnterTowerBattleRsp

// optional uint32 LeftChallengeNum = 1;
inline bool TCrossLevyEnterTowerBattleRsp::has_leftchallengenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyEnterTowerBattleRsp::set_has_leftchallengenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyEnterTowerBattleRsp::clear_has_leftchallengenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyEnterTowerBattleRsp::clear_leftchallengenum() {
  leftchallengenum_ = 0u;
  clear_has_leftchallengenum();
}
inline ::google::protobuf::uint32 TCrossLevyEnterTowerBattleRsp::leftchallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyEnterTowerBattleRsp.LeftChallengeNum)
  return leftchallengenum_;
}
inline void TCrossLevyEnterTowerBattleRsp::set_leftchallengenum(::google::protobuf::uint32 value) {
  set_has_leftchallengenum();
  leftchallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyEnterTowerBattleRsp.LeftChallengeNum)
}

// optional .pb.TGroupMatchArgs BattleArgs = 2;
inline bool TCrossLevyEnterTowerBattleRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyEnterTowerBattleRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyEnterTowerBattleRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyEnterTowerBattleRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TGroupMatchArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TGroupMatchArgs& TCrossLevyEnterTowerBattleRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyEnterTowerBattleRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TGroupMatchArgs* TCrossLevyEnterTowerBattleRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TGroupMatchArgs;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyEnterTowerBattleRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TGroupMatchArgs* TCrossLevyEnterTowerBattleRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TGroupMatchArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TCrossLevyEnterTowerBattleRsp::set_allocated_battleargs(::pb::TGroupMatchArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyEnterTowerBattleRsp.BattleArgs)
}

// -------------------------------------------------------------------

// TCrossLevyReportTowerBattleReq

// optional uint32 LayerId = 1;
inline bool TCrossLevyReportTowerBattleReq::has_layerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyReportTowerBattleReq::set_has_layerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyReportTowerBattleReq::clear_has_layerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyReportTowerBattleReq::clear_layerid() {
  layerid_ = 0u;
  clear_has_layerid();
}
inline ::google::protobuf::uint32 TCrossLevyReportTowerBattleReq::layerid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportTowerBattleReq.LayerId)
  return layerid_;
}
inline void TCrossLevyReportTowerBattleReq::set_layerid(::google::protobuf::uint32 value) {
  set_has_layerid();
  layerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportTowerBattleReq.LayerId)
}

// optional bytes BattleRet = 2;
inline bool TCrossLevyReportTowerBattleReq::has_battleret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyReportTowerBattleReq::set_has_battleret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyReportTowerBattleReq::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyReportTowerBattleReq::clear_battleret() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_->clear();
  }
  clear_has_battleret();
}
inline const ::std::string& TCrossLevyReportTowerBattleReq::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportTowerBattleReq.BattleRet)
  return *battleret_;
}
inline void TCrossLevyReportTowerBattleReq::set_battleret(const ::std::string& value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportTowerBattleReq.BattleRet)
}
inline void TCrossLevyReportTowerBattleReq::set_battleret(const char* value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossLevyReportTowerBattleReq.BattleRet)
}
inline void TCrossLevyReportTowerBattleReq::set_battleret(const void* value, size_t size) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossLevyReportTowerBattleReq.BattleRet)
}
inline ::std::string* TCrossLevyReportTowerBattleReq::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyReportTowerBattleReq.BattleRet)
  return battleret_;
}
inline ::std::string* TCrossLevyReportTowerBattleReq::release_battleret() {
  clear_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleret_;
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossLevyReportTowerBattleReq::set_allocated_battleret(::std::string* battleret) {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (battleret) {
    set_has_battleret();
    battleret_ = battleret;
  } else {
    clear_has_battleret();
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyReportTowerBattleReq.BattleRet)
}

// -------------------------------------------------------------------

// TCrossLevyReportTowerBattleRsp

// optional bool IsWin = 1;
inline bool TCrossLevyReportTowerBattleRsp::has_iswin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyReportTowerBattleRsp::set_has_iswin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyReportTowerBattleRsp::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyReportTowerBattleRsp::clear_iswin() {
  iswin_ = false;
  clear_has_iswin();
}
inline bool TCrossLevyReportTowerBattleRsp::iswin() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportTowerBattleRsp.IsWin)
  return iswin_;
}
inline void TCrossLevyReportTowerBattleRsp::set_iswin(bool value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportTowerBattleRsp.IsWin)
}

// optional uint32 PassLayerId = 2;
inline bool TCrossLevyReportTowerBattleRsp::has_passlayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyReportTowerBattleRsp::set_has_passlayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyReportTowerBattleRsp::clear_has_passlayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyReportTowerBattleRsp::clear_passlayerid() {
  passlayerid_ = 0u;
  clear_has_passlayerid();
}
inline ::google::protobuf::uint32 TCrossLevyReportTowerBattleRsp::passlayerid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportTowerBattleRsp.PassLayerId)
  return passlayerid_;
}
inline void TCrossLevyReportTowerBattleRsp::set_passlayerid(::google::protobuf::uint32 value) {
  set_has_passlayerid();
  passlayerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportTowerBattleRsp.PassLayerId)
}

// optional uint32 AttackLayerId = 3;
inline bool TCrossLevyReportTowerBattleRsp::has_attacklayerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyReportTowerBattleRsp::set_has_attacklayerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyReportTowerBattleRsp::clear_has_attacklayerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyReportTowerBattleRsp::clear_attacklayerid() {
  attacklayerid_ = 0u;
  clear_has_attacklayerid();
}
inline ::google::protobuf::uint32 TCrossLevyReportTowerBattleRsp::attacklayerid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportTowerBattleRsp.AttackLayerId)
  return attacklayerid_;
}
inline void TCrossLevyReportTowerBattleRsp::set_attacklayerid(::google::protobuf::uint32 value) {
  set_has_attacklayerid();
  attacklayerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportTowerBattleRsp.AttackLayerId)
}

// repeated uint32 AttackMonsterIdArr = 4;
inline int TCrossLevyReportTowerBattleRsp::attackmonsteridarr_size() const {
  return attackmonsteridarr_.size();
}
inline void TCrossLevyReportTowerBattleRsp::clear_attackmonsteridarr() {
  attackmonsteridarr_.Clear();
}
inline ::google::protobuf::uint32 TCrossLevyReportTowerBattleRsp::attackmonsteridarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportTowerBattleRsp.AttackMonsterIdArr)
  return attackmonsteridarr_.Get(index);
}
inline void TCrossLevyReportTowerBattleRsp::set_attackmonsteridarr(int index, ::google::protobuf::uint32 value) {
  attackmonsteridarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportTowerBattleRsp.AttackMonsterIdArr)
}
inline void TCrossLevyReportTowerBattleRsp::add_attackmonsteridarr(::google::protobuf::uint32 value) {
  attackmonsteridarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossLevyReportTowerBattleRsp.AttackMonsterIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TCrossLevyReportTowerBattleRsp::attackmonsteridarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyReportTowerBattleRsp.AttackMonsterIdArr)
  return attackmonsteridarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TCrossLevyReportTowerBattleRsp::mutable_attackmonsteridarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyReportTowerBattleRsp.AttackMonsterIdArr)
  return &attackmonsteridarr_;
}

// optional uint32 LoseNum = 5;
inline bool TCrossLevyReportTowerBattleRsp::has_losenum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossLevyReportTowerBattleRsp::set_has_losenum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossLevyReportTowerBattleRsp::clear_has_losenum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossLevyReportTowerBattleRsp::clear_losenum() {
  losenum_ = 0u;
  clear_has_losenum();
}
inline ::google::protobuf::uint32 TCrossLevyReportTowerBattleRsp::losenum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportTowerBattleRsp.LoseNum)
  return losenum_;
}
inline void TCrossLevyReportTowerBattleRsp::set_losenum(::google::protobuf::uint32 value) {
  set_has_losenum();
  losenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportTowerBattleRsp.LoseNum)
}

// optional .pb.TGroupMatchArgs NextBattleArgs = 6;
inline bool TCrossLevyReportTowerBattleRsp::has_nextbattleargs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCrossLevyReportTowerBattleRsp::set_has_nextbattleargs() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCrossLevyReportTowerBattleRsp::clear_has_nextbattleargs() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCrossLevyReportTowerBattleRsp::clear_nextbattleargs() {
  if (nextbattleargs_ != NULL) nextbattleargs_->::pb::TGroupMatchArgs::Clear();
  clear_has_nextbattleargs();
}
inline const ::pb::TGroupMatchArgs& TCrossLevyReportTowerBattleRsp::nextbattleargs() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportTowerBattleRsp.NextBattleArgs)
  return nextbattleargs_ != NULL ? *nextbattleargs_ : *default_instance_->nextbattleargs_;
}
inline ::pb::TGroupMatchArgs* TCrossLevyReportTowerBattleRsp::mutable_nextbattleargs() {
  set_has_nextbattleargs();
  if (nextbattleargs_ == NULL) nextbattleargs_ = new ::pb::TGroupMatchArgs;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyReportTowerBattleRsp.NextBattleArgs)
  return nextbattleargs_;
}
inline ::pb::TGroupMatchArgs* TCrossLevyReportTowerBattleRsp::release_nextbattleargs() {
  clear_has_nextbattleargs();
  ::pb::TGroupMatchArgs* temp = nextbattleargs_;
  nextbattleargs_ = NULL;
  return temp;
}
inline void TCrossLevyReportTowerBattleRsp::set_allocated_nextbattleargs(::pb::TGroupMatchArgs* nextbattleargs) {
  delete nextbattleargs_;
  nextbattleargs_ = nextbattleargs;
  if (nextbattleargs) {
    set_has_nextbattleargs();
  } else {
    clear_has_nextbattleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyReportTowerBattleRsp.NextBattleArgs)
}

// optional uint32 LeftChallengeNum = 7;
inline bool TCrossLevyReportTowerBattleRsp::has_leftchallengenum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCrossLevyReportTowerBattleRsp::set_has_leftchallengenum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCrossLevyReportTowerBattleRsp::clear_has_leftchallengenum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCrossLevyReportTowerBattleRsp::clear_leftchallengenum() {
  leftchallengenum_ = 0u;
  clear_has_leftchallengenum();
}
inline ::google::protobuf::uint32 TCrossLevyReportTowerBattleRsp::leftchallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportTowerBattleRsp.LeftChallengeNum)
  return leftchallengenum_;
}
inline void TCrossLevyReportTowerBattleRsp::set_leftchallengenum(::google::protobuf::uint32 value) {
  set_has_leftchallengenum();
  leftchallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportTowerBattleRsp.LeftChallengeNum)
}

// optional uint32 LevyScores = 8;
inline bool TCrossLevyReportTowerBattleRsp::has_levyscores() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TCrossLevyReportTowerBattleRsp::set_has_levyscores() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TCrossLevyReportTowerBattleRsp::clear_has_levyscores() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TCrossLevyReportTowerBattleRsp::clear_levyscores() {
  levyscores_ = 0u;
  clear_has_levyscores();
}
inline ::google::protobuf::uint32 TCrossLevyReportTowerBattleRsp::levyscores() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportTowerBattleRsp.LevyScores)
  return levyscores_;
}
inline void TCrossLevyReportTowerBattleRsp::set_levyscores(::google::protobuf::uint32 value) {
  set_has_levyscores();
  levyscores_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportTowerBattleRsp.LevyScores)
}

// repeated .pb.TCommonReward RewardArr = 9;
inline int TCrossLevyReportTowerBattleRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TCrossLevyReportTowerBattleRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TCrossLevyReportTowerBattleRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportTowerBattleRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TCrossLevyReportTowerBattleRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyReportTowerBattleRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TCrossLevyReportTowerBattleRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyReportTowerBattleRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TCrossLevyReportTowerBattleRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyReportTowerBattleRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TCrossLevyReportTowerBattleRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyReportTowerBattleRsp.RewardArr)
  return &rewardarr_;
}

// optional uint32 RewardChallengeNum = 10;
inline bool TCrossLevyReportTowerBattleRsp::has_rewardchallengenum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TCrossLevyReportTowerBattleRsp::set_has_rewardchallengenum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TCrossLevyReportTowerBattleRsp::clear_has_rewardchallengenum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TCrossLevyReportTowerBattleRsp::clear_rewardchallengenum() {
  rewardchallengenum_ = 0u;
  clear_has_rewardchallengenum();
}
inline ::google::protobuf::uint32 TCrossLevyReportTowerBattleRsp::rewardchallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportTowerBattleRsp.RewardChallengeNum)
  return rewardchallengenum_;
}
inline void TCrossLevyReportTowerBattleRsp::set_rewardchallengenum(::google::protobuf::uint32 value) {
  set_has_rewardchallengenum();
  rewardchallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportTowerBattleRsp.RewardChallengeNum)
}

// optional uint32 RewardLevyScores = 11;
inline bool TCrossLevyReportTowerBattleRsp::has_rewardlevyscores() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TCrossLevyReportTowerBattleRsp::set_has_rewardlevyscores() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TCrossLevyReportTowerBattleRsp::clear_has_rewardlevyscores() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TCrossLevyReportTowerBattleRsp::clear_rewardlevyscores() {
  rewardlevyscores_ = 0u;
  clear_has_rewardlevyscores();
}
inline ::google::protobuf::uint32 TCrossLevyReportTowerBattleRsp::rewardlevyscores() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportTowerBattleRsp.RewardLevyScores)
  return rewardlevyscores_;
}
inline void TCrossLevyReportTowerBattleRsp::set_rewardlevyscores(::google::protobuf::uint32 value) {
  set_has_rewardlevyscores();
  rewardlevyscores_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportTowerBattleRsp.RewardLevyScores)
}

// -------------------------------------------------------------------

// TCrossLevyTowerAverageAttr

// optional uint32 AttrId = 1;
inline bool TCrossLevyTowerAverageAttr::has_attrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyTowerAverageAttr::set_has_attrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyTowerAverageAttr::clear_has_attrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyTowerAverageAttr::clear_attrid() {
  attrid_ = 0u;
  clear_has_attrid();
}
inline ::google::protobuf::uint32 TCrossLevyTowerAverageAttr::attrid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyTowerAverageAttr.AttrId)
  return attrid_;
}
inline void TCrossLevyTowerAverageAttr::set_attrid(::google::protobuf::uint32 value) {
  set_has_attrid();
  attrid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyTowerAverageAttr.AttrId)
}

// optional uint64 Value = 2;
inline bool TCrossLevyTowerAverageAttr::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyTowerAverageAttr::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyTowerAverageAttr::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyTowerAverageAttr::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 TCrossLevyTowerAverageAttr::value() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyTowerAverageAttr.Value)
  return value_;
}
inline void TCrossLevyTowerAverageAttr::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyTowerAverageAttr.Value)
}

// -------------------------------------------------------------------

// TCrossLevyGetTowerAverageAttrReq

// optional uint64 Uid = 1;
inline bool TCrossLevyGetTowerAverageAttrReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyGetTowerAverageAttrReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyGetTowerAverageAttrReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyGetTowerAverageAttrReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCrossLevyGetTowerAverageAttrReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetTowerAverageAttrReq.Uid)
  return uid_;
}
inline void TCrossLevyGetTowerAverageAttrReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetTowerAverageAttrReq.Uid)
}

// repeated uint32 ExpectAttrIdArr = 2;
inline int TCrossLevyGetTowerAverageAttrReq::expectattridarr_size() const {
  return expectattridarr_.size();
}
inline void TCrossLevyGetTowerAverageAttrReq::clear_expectattridarr() {
  expectattridarr_.Clear();
}
inline ::google::protobuf::uint32 TCrossLevyGetTowerAverageAttrReq::expectattridarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetTowerAverageAttrReq.ExpectAttrIdArr)
  return expectattridarr_.Get(index);
}
inline void TCrossLevyGetTowerAverageAttrReq::set_expectattridarr(int index, ::google::protobuf::uint32 value) {
  expectattridarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetTowerAverageAttrReq.ExpectAttrIdArr)
}
inline void TCrossLevyGetTowerAverageAttrReq::add_expectattridarr(::google::protobuf::uint32 value) {
  expectattridarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetTowerAverageAttrReq.ExpectAttrIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TCrossLevyGetTowerAverageAttrReq::expectattridarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetTowerAverageAttrReq.ExpectAttrIdArr)
  return expectattridarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TCrossLevyGetTowerAverageAttrReq::mutable_expectattridarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetTowerAverageAttrReq.ExpectAttrIdArr)
  return &expectattridarr_;
}

// -------------------------------------------------------------------

// TCrossLevyGetTowerAverageAttrRsp

// repeated .pb.TCrossLevyTowerAverageAttr AverageAttrArr = 1;
inline int TCrossLevyGetTowerAverageAttrRsp::averageattrarr_size() const {
  return averageattrarr_.size();
}
inline void TCrossLevyGetTowerAverageAttrRsp::clear_averageattrarr() {
  averageattrarr_.Clear();
}
inline const ::pb::TCrossLevyTowerAverageAttr& TCrossLevyGetTowerAverageAttrRsp::averageattrarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetTowerAverageAttrRsp.AverageAttrArr)
  return averageattrarr_.Get(index);
}
inline ::pb::TCrossLevyTowerAverageAttr* TCrossLevyGetTowerAverageAttrRsp::mutable_averageattrarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetTowerAverageAttrRsp.AverageAttrArr)
  return averageattrarr_.Mutable(index);
}
inline ::pb::TCrossLevyTowerAverageAttr* TCrossLevyGetTowerAverageAttrRsp::add_averageattrarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetTowerAverageAttrRsp.AverageAttrArr)
  return averageattrarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerAverageAttr >&
TCrossLevyGetTowerAverageAttrRsp::averageattrarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetTowerAverageAttrRsp.AverageAttrArr)
  return averageattrarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerAverageAttr >*
TCrossLevyGetTowerAverageAttrRsp::mutable_averageattrarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetTowerAverageAttrRsp.AverageAttrArr)
  return &averageattrarr_;
}

// -------------------------------------------------------------------

// TCrossLevyTowerBattleSquadInfo

// repeated uint32 Squad = 1;
inline int TCrossLevyTowerBattleSquadInfo::squad_size() const {
  return squad_.size();
}
inline void TCrossLevyTowerBattleSquadInfo::clear_squad() {
  squad_.Clear();
}
inline ::google::protobuf::uint32 TCrossLevyTowerBattleSquadInfo::squad(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyTowerBattleSquadInfo.Squad)
  return squad_.Get(index);
}
inline void TCrossLevyTowerBattleSquadInfo::set_squad(int index, ::google::protobuf::uint32 value) {
  squad_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossLevyTowerBattleSquadInfo.Squad)
}
inline void TCrossLevyTowerBattleSquadInfo::add_squad(::google::protobuf::uint32 value) {
  squad_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossLevyTowerBattleSquadInfo.Squad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TCrossLevyTowerBattleSquadInfo::squad() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyTowerBattleSquadInfo.Squad)
  return squad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TCrossLevyTowerBattleSquadInfo::mutable_squad() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyTowerBattleSquadInfo.Squad)
  return &squad_;
}

// -------------------------------------------------------------------

// TCrossLevyTowerFightAttr

// optional uint32 AttrId = 1;
inline bool TCrossLevyTowerFightAttr::has_attrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyTowerFightAttr::set_has_attrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyTowerFightAttr::clear_has_attrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyTowerFightAttr::clear_attrid() {
  attrid_ = 0u;
  clear_has_attrid();
}
inline ::google::protobuf::uint32 TCrossLevyTowerFightAttr::attrid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyTowerFightAttr.AttrId)
  return attrid_;
}
inline void TCrossLevyTowerFightAttr::set_attrid(::google::protobuf::uint32 value) {
  set_has_attrid();
  attrid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyTowerFightAttr.AttrId)
}

// optional int32 PercentVal = 2;
inline bool TCrossLevyTowerFightAttr::has_percentval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyTowerFightAttr::set_has_percentval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyTowerFightAttr::clear_has_percentval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyTowerFightAttr::clear_percentval() {
  percentval_ = 0;
  clear_has_percentval();
}
inline ::google::protobuf::int32 TCrossLevyTowerFightAttr::percentval() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyTowerFightAttr.PercentVal)
  return percentval_;
}
inline void TCrossLevyTowerFightAttr::set_percentval(::google::protobuf::int32 value) {
  set_has_percentval();
  percentval_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyTowerFightAttr.PercentVal)
}

// optional uint64 ExtraVal = 3;
inline bool TCrossLevyTowerFightAttr::has_extraval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyTowerFightAttr::set_has_extraval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyTowerFightAttr::clear_has_extraval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyTowerFightAttr::clear_extraval() {
  extraval_ = GOOGLE_ULONGLONG(0);
  clear_has_extraval();
}
inline ::google::protobuf::uint64 TCrossLevyTowerFightAttr::extraval() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyTowerFightAttr.ExtraVal)
  return extraval_;
}
inline void TCrossLevyTowerFightAttr::set_extraval(::google::protobuf::uint64 value) {
  set_has_extraval();
  extraval_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyTowerFightAttr.ExtraVal)
}

// -------------------------------------------------------------------

// TCrossLevyGetTowerBattleArgsReq

// optional uint64 Uid = 1;
inline bool TCrossLevyGetTowerBattleArgsReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyGetTowerBattleArgsReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyGetTowerBattleArgsReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyGetTowerBattleArgsReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCrossLevyGetTowerBattleArgsReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetTowerBattleArgsReq.Uid)
  return uid_;
}
inline void TCrossLevyGetTowerBattleArgsReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetTowerBattleArgsReq.Uid)
}

// optional bool IsEnter = 2;
inline bool TCrossLevyGetTowerBattleArgsReq::has_isenter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyGetTowerBattleArgsReq::set_has_isenter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyGetTowerBattleArgsReq::clear_has_isenter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyGetTowerBattleArgsReq::clear_isenter() {
  isenter_ = false;
  clear_has_isenter();
}
inline bool TCrossLevyGetTowerBattleArgsReq::isenter() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetTowerBattleArgsReq.IsEnter)
  return isenter_;
}
inline void TCrossLevyGetTowerBattleArgsReq::set_isenter(bool value) {
  set_has_isenter();
  isenter_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetTowerBattleArgsReq.IsEnter)
}

// repeated .pb.TCrossLevyTowerBattleSquadInfo SquadArr = 3;
inline int TCrossLevyGetTowerBattleArgsReq::squadarr_size() const {
  return squadarr_.size();
}
inline void TCrossLevyGetTowerBattleArgsReq::clear_squadarr() {
  squadarr_.Clear();
}
inline const ::pb::TCrossLevyTowerBattleSquadInfo& TCrossLevyGetTowerBattleArgsReq::squadarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetTowerBattleArgsReq.SquadArr)
  return squadarr_.Get(index);
}
inline ::pb::TCrossLevyTowerBattleSquadInfo* TCrossLevyGetTowerBattleArgsReq::mutable_squadarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetTowerBattleArgsReq.SquadArr)
  return squadarr_.Mutable(index);
}
inline ::pb::TCrossLevyTowerBattleSquadInfo* TCrossLevyGetTowerBattleArgsReq::add_squadarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetTowerBattleArgsReq.SquadArr)
  return squadarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerBattleSquadInfo >&
TCrossLevyGetTowerBattleArgsReq::squadarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetTowerBattleArgsReq.SquadArr)
  return squadarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerBattleSquadInfo >*
TCrossLevyGetTowerBattleArgsReq::mutable_squadarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetTowerBattleArgsReq.SquadArr)
  return &squadarr_;
}

// repeated uint32 BattleInfoIdArr = 4;
inline int TCrossLevyGetTowerBattleArgsReq::battleinfoidarr_size() const {
  return battleinfoidarr_.size();
}
inline void TCrossLevyGetTowerBattleArgsReq::clear_battleinfoidarr() {
  battleinfoidarr_.Clear();
}
inline ::google::protobuf::uint32 TCrossLevyGetTowerBattleArgsReq::battleinfoidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetTowerBattleArgsReq.BattleInfoIdArr)
  return battleinfoidarr_.Get(index);
}
inline void TCrossLevyGetTowerBattleArgsReq::set_battleinfoidarr(int index, ::google::protobuf::uint32 value) {
  battleinfoidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetTowerBattleArgsReq.BattleInfoIdArr)
}
inline void TCrossLevyGetTowerBattleArgsReq::add_battleinfoidarr(::google::protobuf::uint32 value) {
  battleinfoidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetTowerBattleArgsReq.BattleInfoIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TCrossLevyGetTowerBattleArgsReq::battleinfoidarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetTowerBattleArgsReq.BattleInfoIdArr)
  return battleinfoidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TCrossLevyGetTowerBattleArgsReq::mutable_battleinfoidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetTowerBattleArgsReq.BattleInfoIdArr)
  return &battleinfoidarr_;
}

// optional uint32 MonsterAdjustConfId = 5;
inline bool TCrossLevyGetTowerBattleArgsReq::has_monsteradjustconfid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossLevyGetTowerBattleArgsReq::set_has_monsteradjustconfid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossLevyGetTowerBattleArgsReq::clear_has_monsteradjustconfid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossLevyGetTowerBattleArgsReq::clear_monsteradjustconfid() {
  monsteradjustconfid_ = 0u;
  clear_has_monsteradjustconfid();
}
inline ::google::protobuf::uint32 TCrossLevyGetTowerBattleArgsReq::monsteradjustconfid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetTowerBattleArgsReq.MonsterAdjustConfId)
  return monsteradjustconfid_;
}
inline void TCrossLevyGetTowerBattleArgsReq::set_monsteradjustconfid(::google::protobuf::uint32 value) {
  set_has_monsteradjustconfid();
  monsteradjustconfid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetTowerBattleArgsReq.MonsterAdjustConfId)
}

// repeated .pb.TCrossLevyTowerAverageAttr AverageAttrArr = 6;
inline int TCrossLevyGetTowerBattleArgsReq::averageattrarr_size() const {
  return averageattrarr_.size();
}
inline void TCrossLevyGetTowerBattleArgsReq::clear_averageattrarr() {
  averageattrarr_.Clear();
}
inline const ::pb::TCrossLevyTowerAverageAttr& TCrossLevyGetTowerBattleArgsReq::averageattrarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetTowerBattleArgsReq.AverageAttrArr)
  return averageattrarr_.Get(index);
}
inline ::pb::TCrossLevyTowerAverageAttr* TCrossLevyGetTowerBattleArgsReq::mutable_averageattrarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetTowerBattleArgsReq.AverageAttrArr)
  return averageattrarr_.Mutable(index);
}
inline ::pb::TCrossLevyTowerAverageAttr* TCrossLevyGetTowerBattleArgsReq::add_averageattrarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetTowerBattleArgsReq.AverageAttrArr)
  return averageattrarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerAverageAttr >&
TCrossLevyGetTowerBattleArgsReq::averageattrarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetTowerBattleArgsReq.AverageAttrArr)
  return averageattrarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerAverageAttr >*
TCrossLevyGetTowerBattleArgsReq::mutable_averageattrarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetTowerBattleArgsReq.AverageAttrArr)
  return &averageattrarr_;
}

// optional .pb.TBattleCheckParam BattleCheckParam = 7;
inline bool TCrossLevyGetTowerBattleArgsReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCrossLevyGetTowerBattleArgsReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCrossLevyGetTowerBattleArgsReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCrossLevyGetTowerBattleArgsReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TCrossLevyGetTowerBattleArgsReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetTowerBattleArgsReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TCrossLevyGetTowerBattleArgsReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetTowerBattleArgsReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TCrossLevyGetTowerBattleArgsReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TCrossLevyGetTowerBattleArgsReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyGetTowerBattleArgsReq.BattleCheckParam)
}

// repeated .pb.TCrossLevyTowerFightAttr FightAttrArr = 8;
inline int TCrossLevyGetTowerBattleArgsReq::fightattrarr_size() const {
  return fightattrarr_.size();
}
inline void TCrossLevyGetTowerBattleArgsReq::clear_fightattrarr() {
  fightattrarr_.Clear();
}
inline const ::pb::TCrossLevyTowerFightAttr& TCrossLevyGetTowerBattleArgsReq::fightattrarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetTowerBattleArgsReq.FightAttrArr)
  return fightattrarr_.Get(index);
}
inline ::pb::TCrossLevyTowerFightAttr* TCrossLevyGetTowerBattleArgsReq::mutable_fightattrarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetTowerBattleArgsReq.FightAttrArr)
  return fightattrarr_.Mutable(index);
}
inline ::pb::TCrossLevyTowerFightAttr* TCrossLevyGetTowerBattleArgsReq::add_fightattrarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetTowerBattleArgsReq.FightAttrArr)
  return fightattrarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerFightAttr >&
TCrossLevyGetTowerBattleArgsReq::fightattrarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetTowerBattleArgsReq.FightAttrArr)
  return fightattrarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyTowerFightAttr >*
TCrossLevyGetTowerBattleArgsReq::mutable_fightattrarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetTowerBattleArgsReq.FightAttrArr)
  return &fightattrarr_;
}

// -------------------------------------------------------------------

// TCrossLevyGetTowerBattleArgsRsp

// optional .pb.TGroupMatchArgs BattleArgs = 1;
inline bool TCrossLevyGetTowerBattleArgsRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyGetTowerBattleArgsRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyGetTowerBattleArgsRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyGetTowerBattleArgsRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TGroupMatchArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TGroupMatchArgs& TCrossLevyGetTowerBattleArgsRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetTowerBattleArgsRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TGroupMatchArgs* TCrossLevyGetTowerBattleArgsRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TGroupMatchArgs;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetTowerBattleArgsRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TGroupMatchArgs* TCrossLevyGetTowerBattleArgsRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TGroupMatchArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TCrossLevyGetTowerBattleArgsRsp::set_allocated_battleargs(::pb::TGroupMatchArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyGetTowerBattleArgsRsp.BattleArgs)
}

// -------------------------------------------------------------------

// TCrossLevyReportTowerBattleResultReq

// optional uint64 Uid = 1;
inline bool TCrossLevyReportTowerBattleResultReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyReportTowerBattleResultReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyReportTowerBattleResultReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyReportTowerBattleResultReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCrossLevyReportTowerBattleResultReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportTowerBattleResultReq.Uid)
  return uid_;
}
inline void TCrossLevyReportTowerBattleResultReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportTowerBattleResultReq.Uid)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 2;
inline bool TCrossLevyReportTowerBattleResultReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyReportTowerBattleResultReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyReportTowerBattleResultReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyReportTowerBattleResultReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TCrossLevyReportTowerBattleResultReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportTowerBattleResultReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TCrossLevyReportTowerBattleResultReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyReportTowerBattleResultReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TCrossLevyReportTowerBattleResultReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TCrossLevyReportTowerBattleResultReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyReportTowerBattleResultReq.BattleCheckParam)
}

// optional .pb.TGroupMatchResult BattleRet = 3;
inline bool TCrossLevyReportTowerBattleResultReq::has_battleret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyReportTowerBattleResultReq::set_has_battleret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyReportTowerBattleResultReq::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyReportTowerBattleResultReq::clear_battleret() {
  if (battleret_ != NULL) battleret_->::pb::TGroupMatchResult::Clear();
  clear_has_battleret();
}
inline const ::pb::TGroupMatchResult& TCrossLevyReportTowerBattleResultReq::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportTowerBattleResultReq.BattleRet)
  return battleret_ != NULL ? *battleret_ : *default_instance_->battleret_;
}
inline ::pb::TGroupMatchResult* TCrossLevyReportTowerBattleResultReq::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == NULL) battleret_ = new ::pb::TGroupMatchResult;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyReportTowerBattleResultReq.BattleRet)
  return battleret_;
}
inline ::pb::TGroupMatchResult* TCrossLevyReportTowerBattleResultReq::release_battleret() {
  clear_has_battleret();
  ::pb::TGroupMatchResult* temp = battleret_;
  battleret_ = NULL;
  return temp;
}
inline void TCrossLevyReportTowerBattleResultReq::set_allocated_battleret(::pb::TGroupMatchResult* battleret) {
  delete battleret_;
  battleret_ = battleret;
  if (battleret) {
    set_has_battleret();
  } else {
    clear_has_battleret();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyReportTowerBattleResultReq.BattleRet)
}

// -------------------------------------------------------------------

// TCrossLevyReportTowerBattleResultRsp

// optional bool IsWin = 1;
inline bool TCrossLevyReportTowerBattleResultRsp::has_iswin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyReportTowerBattleResultRsp::set_has_iswin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyReportTowerBattleResultRsp::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyReportTowerBattleResultRsp::clear_iswin() {
  iswin_ = false;
  clear_has_iswin();
}
inline bool TCrossLevyReportTowerBattleResultRsp::iswin() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportTowerBattleResultRsp.IsWin)
  return iswin_;
}
inline void TCrossLevyReportTowerBattleResultRsp::set_iswin(bool value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportTowerBattleResultRsp.IsWin)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fCrossLevyTower_2eproto__INCLUDED
