// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/TreasureSystem.proto

#ifndef PROTOBUF_net_2fTreasureSystem_2eproto__INCLUDED
#define PROTOBUF_net_2fTreasureSystem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fTreasureSystem_2eproto();
void protobuf_AssignDesc_net_2fTreasureSystem_2eproto();
void protobuf_ShutdownFile_net_2fTreasureSystem_2eproto();

class TTreasureAccSingle;
class TTreasureItemAccSingle;
class TTreasureUnionAccSingle;
class TTreasureGetTreasureSystemInfoRsp;
class TTreasureSystemRewardAchievementReq;
class TTreasureSystemNotify;
class TTreasureSystemActivityUnionReq;

enum ETreasureAccType {
  LevyCrossWinUserCount = 1,
  GoldHeroNum = 2,
  PassInstanceCommonCount = 3,
  PassTowerCount = 4,
  PassCampTowerCount = 5,
  PassInstanceEliteCount = 6,
  WorldBossDamageTotal = 7,
  PubGoldHeroCount = 8,
  PubCampCount = 9,
  PassExpeditionCount = 10,
  ArenaChallengeCount = 11,
  ArenaHighOrderChallengeCount = 12,
  BeastInstanceBossCount = 13,
  LevyWinUserCount = 14,
  GuildWarAttackCount = 15,
  TowerDefensePassRound = 16,
  CrossChallengeGuessWinCount = 17,
  AdventureCount = 18,
  PubgSurviveRound = 19,
  PubgWinNum = 20,
  AllianceDoneFiveStarTaskNum = 21,
  AllianceDoneTaskNum = 22,
  CrossChallengeWinNum = 23,
  ExecuteConsumeNum = 24,
  ConquerAttackNum = 25
};
bool ETreasureAccType_IsValid(int value);
const ETreasureAccType ETreasureAccType_MIN = LevyCrossWinUserCount;
const ETreasureAccType ETreasureAccType_MAX = ConquerAttackNum;
const int ETreasureAccType_ARRAYSIZE = ETreasureAccType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETreasureAccType_descriptor();
inline const ::std::string& ETreasureAccType_Name(ETreasureAccType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETreasureAccType_descriptor(), value);
}
inline bool ETreasureAccType_Parse(
    const ::std::string& name, ETreasureAccType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETreasureAccType>(
    ETreasureAccType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TTreasureAccSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TreasureSystem.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreasureAccSingle : public ::google::protobuf::Message {
 public:
  TTreasureAccSingle();
  virtual ~TTreasureAccSingle();

  TTreasureAccSingle(const TTreasureAccSingle& from);

  inline TTreasureAccSingle& operator=(const TTreasureAccSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreasureAccSingle& default_instance();

  void Swap(TTreasureAccSingle* other);

  // implements Message ----------------------------------------------

  TTreasureAccSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreasureAccSingle& from);
  void MergeFrom(const TTreasureAccSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ETreasureAccType Id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTreasureAccSingle</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ETreasureAccType id() const;
  inline void set_id(::pb::ETreasureAccType value);

  // optional uint64 Progress = 3;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTreasureAccSingle</name>
  	<Function>
  		<name>progress</name>
  		<replaceName>Progress</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_progress</name>
  		<replaceName>Progress</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_progress</name>
  		<replaceName>Progress</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 progress() const;
  inline void set_progress(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TTreasureAccSingle)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_progress();
  inline void clear_has_progress();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 progress_;
  int id_;
  friend void  protobuf_AddDesc_net_2fTreasureSystem_2eproto();
  friend void protobuf_AssignDesc_net_2fTreasureSystem_2eproto();
  friend void protobuf_ShutdownFile_net_2fTreasureSystem_2eproto();

  void InitAsDefaultInstance();
  static TTreasureAccSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTreasureItemAccSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TreasureSystem.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreasureItemAccSingle : public ::google::protobuf::Message {
 public:
  TTreasureItemAccSingle();
  virtual ~TTreasureItemAccSingle();

  TTreasureItemAccSingle(const TTreasureItemAccSingle& from);

  inline TTreasureItemAccSingle& operator=(const TTreasureItemAccSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreasureItemAccSingle& default_instance();

  void Swap(TTreasureItemAccSingle* other);

  // implements Message ----------------------------------------------

  TTreasureItemAccSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreasureItemAccSingle& from);
  void MergeFrom(const TTreasureItemAccSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TreasureTid = 1;
  inline bool has_treasuretid() const;
  inline void clear_treasuretid();
  static const int kTreasureTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTreasureItemAccSingle</name>
  	<Function>
  		<name>treasuretid</name>
  		<replaceName>TreasureTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_treasuretid</name>
  		<replaceName>TreasureTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_treasuretid</name>
  		<replaceName>TreasureTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 treasuretid() const;
  inline void set_treasuretid(::google::protobuf::uint32 value);

  // repeated .pb.TTreasureAccSingle AccArr = 3;
  inline int accarr_size() const;
  inline void clear_accarr();
  static const int kAccArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTreasureItemAccSingle</name>
  	<Function>
  		<name>accarr</name>
  		<replaceName>AccArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_accarr</name>
  		<replaceName>AccArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_accarr</name>
  		<replaceName>AccArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_accarr</name>
  		<replaceName>AccArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>accarr_size</name>
  		<replaceName>AccArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTreasureAccSingle& accarr(int index) const;
  inline ::pb::TTreasureAccSingle* mutable_accarr(int index);
  inline ::pb::TTreasureAccSingle* add_accarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureAccSingle >&
      accarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureAccSingle >*
      mutable_accarr();

  // @@protoc_insertion_point(class_scope:pb.TTreasureItemAccSingle)
 private:
  inline void set_has_treasuretid();
  inline void clear_has_treasuretid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTreasureAccSingle > accarr_;
  ::google::protobuf::uint32 treasuretid_;
  friend void  protobuf_AddDesc_net_2fTreasureSystem_2eproto();
  friend void protobuf_AssignDesc_net_2fTreasureSystem_2eproto();
  friend void protobuf_ShutdownFile_net_2fTreasureSystem_2eproto();

  void InitAsDefaultInstance();
  static TTreasureItemAccSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTreasureUnionAccSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TreasureSystem.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreasureUnionAccSingle : public ::google::protobuf::Message {
 public:
  TTreasureUnionAccSingle();
  virtual ~TTreasureUnionAccSingle();

  TTreasureUnionAccSingle(const TTreasureUnionAccSingle& from);

  inline TTreasureUnionAccSingle& operator=(const TTreasureUnionAccSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreasureUnionAccSingle& default_instance();

  void Swap(TTreasureUnionAccSingle* other);

  // implements Message ----------------------------------------------

  TTreasureUnionAccSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreasureUnionAccSingle& from);
  void MergeFrom(const TTreasureUnionAccSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 UnionTid = 1;
  inline bool has_uniontid() const;
  inline void clear_uniontid();
  static const int kUnionTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTreasureUnionAccSingle</name>
  	<Function>
  		<name>uniontid</name>
  		<replaceName>UnionTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uniontid</name>
  		<replaceName>UnionTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uniontid</name>
  		<replaceName>UnionTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 uniontid() const;
  inline void set_uniontid(::google::protobuf::uint32 value);

  // repeated .pb.TTreasureAccSingle AccArr = 3;
  inline int accarr_size() const;
  inline void clear_accarr();
  static const int kAccArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTreasureUnionAccSingle</name>
  	<Function>
  		<name>accarr</name>
  		<replaceName>AccArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_accarr</name>
  		<replaceName>AccArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_accarr</name>
  		<replaceName>AccArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_accarr</name>
  		<replaceName>AccArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>accarr_size</name>
  		<replaceName>AccArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTreasureAccSingle& accarr(int index) const;
  inline ::pb::TTreasureAccSingle* mutable_accarr(int index);
  inline ::pb::TTreasureAccSingle* add_accarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureAccSingle >&
      accarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureAccSingle >*
      mutable_accarr();

  // @@protoc_insertion_point(class_scope:pb.TTreasureUnionAccSingle)
 private:
  inline void set_has_uniontid();
  inline void clear_has_uniontid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTreasureAccSingle > accarr_;
  ::google::protobuf::uint32 uniontid_;
  friend void  protobuf_AddDesc_net_2fTreasureSystem_2eproto();
  friend void protobuf_AssignDesc_net_2fTreasureSystem_2eproto();
  friend void protobuf_ShutdownFile_net_2fTreasureSystem_2eproto();

  void InitAsDefaultInstance();
  static TTreasureUnionAccSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTreasureGetTreasureSystemInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TreasureSystem.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreasureGetTreasureSystemInfoRsp : public ::google::protobuf::Message {
 public:
  TTreasureGetTreasureSystemInfoRsp();
  virtual ~TTreasureGetTreasureSystemInfoRsp();

  TTreasureGetTreasureSystemInfoRsp(const TTreasureGetTreasureSystemInfoRsp& from);

  inline TTreasureGetTreasureSystemInfoRsp& operator=(const TTreasureGetTreasureSystemInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreasureGetTreasureSystemInfoRsp& default_instance();

  void Swap(TTreasureGetTreasureSystemInfoRsp* other);

  // implements Message ----------------------------------------------

  TTreasureGetTreasureSystemInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreasureGetTreasureSystemInfoRsp& from);
  void MergeFrom(const TTreasureGetTreasureSystemInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTreasureItemAccSingle TreasureAccArr = 1;
  inline int treasureaccarr_size() const;
  inline void clear_treasureaccarr();
  static const int kTreasureAccArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTreasureGetTreasureSystemInfoRsp</name>
  	<Function>
  		<name>treasureaccarr</name>
  		<replaceName>TreasureAccArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_treasureaccarr</name>
  		<replaceName>TreasureAccArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_treasureaccarr</name>
  		<replaceName>TreasureAccArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_treasureaccarr</name>
  		<replaceName>TreasureAccArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>treasureaccarr_size</name>
  		<replaceName>TreasureAccArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTreasureItemAccSingle& treasureaccarr(int index) const;
  inline ::pb::TTreasureItemAccSingle* mutable_treasureaccarr(int index);
  inline ::pb::TTreasureItemAccSingle* add_treasureaccarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItemAccSingle >&
      treasureaccarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItemAccSingle >*
      mutable_treasureaccarr();

  // repeated uint32 RewardedArr = 2;
  inline int rewardedarr_size() const;
  inline void clear_rewardedarr();
  static const int kRewardedArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTreasureGetTreasureSystemInfoRsp</name>
  	<Function>
  		<name>rewardedarr</name>
  		<replaceName>RewardedArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardedarr</name>
  		<replaceName>RewardedArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardedarr</name>
  		<replaceName>RewardedArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardedarr</name>
  		<replaceName>RewardedArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardedarr_size</name>
  		<replaceName>RewardedArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardedarr(int index) const;
  inline void set_rewardedarr(int index, ::google::protobuf::uint32 value);
  inline void add_rewardedarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rewardedarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rewardedarr();

  // repeated .pb.TTreasureUnionAccSingle UnionArr = 3;
  inline int unionarr_size() const;
  inline void clear_unionarr();
  static const int kUnionArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTreasureGetTreasureSystemInfoRsp</name>
  	<Function>
  		<name>unionarr</name>
  		<replaceName>UnionArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unionarr</name>
  		<replaceName>UnionArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unionarr</name>
  		<replaceName>UnionArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unionarr</name>
  		<replaceName>UnionArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unionarr_size</name>
  		<replaceName>UnionArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTreasureUnionAccSingle& unionarr(int index) const;
  inline ::pb::TTreasureUnionAccSingle* mutable_unionarr(int index);
  inline ::pb::TTreasureUnionAccSingle* add_unionarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureUnionAccSingle >&
      unionarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureUnionAccSingle >*
      mutable_unionarr();

  // @@protoc_insertion_point(class_scope:pb.TTreasureGetTreasureSystemInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItemAccSingle > treasureaccarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rewardedarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTreasureUnionAccSingle > unionarr_;
  friend void  protobuf_AddDesc_net_2fTreasureSystem_2eproto();
  friend void protobuf_AssignDesc_net_2fTreasureSystem_2eproto();
  friend void protobuf_ShutdownFile_net_2fTreasureSystem_2eproto();

  void InitAsDefaultInstance();
  static TTreasureGetTreasureSystemInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTreasureSystemRewardAchievementReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TreasureSystem.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreasureSystemRewardAchievementReq : public ::google::protobuf::Message {
 public:
  TTreasureSystemRewardAchievementReq();
  virtual ~TTreasureSystemRewardAchievementReq();

  TTreasureSystemRewardAchievementReq(const TTreasureSystemRewardAchievementReq& from);

  inline TTreasureSystemRewardAchievementReq& operator=(const TTreasureSystemRewardAchievementReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreasureSystemRewardAchievementReq& default_instance();

  void Swap(TTreasureSystemRewardAchievementReq* other);

  // implements Message ----------------------------------------------

  TTreasureSystemRewardAchievementReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreasureSystemRewardAchievementReq& from);
  void MergeFrom(const TTreasureSystemRewardAchievementReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTreasureSystemRewardAchievementReq</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTreasureSystemRewardAchievementReq)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tid_;
  friend void  protobuf_AddDesc_net_2fTreasureSystem_2eproto();
  friend void protobuf_AssignDesc_net_2fTreasureSystem_2eproto();
  friend void protobuf_ShutdownFile_net_2fTreasureSystem_2eproto();

  void InitAsDefaultInstance();
  static TTreasureSystemRewardAchievementReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTreasureSystemNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TreasureSystem.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreasureSystemNotify : public ::google::protobuf::Message {
 public:
  TTreasureSystemNotify();
  virtual ~TTreasureSystemNotify();

  TTreasureSystemNotify(const TTreasureSystemNotify& from);

  inline TTreasureSystemNotify& operator=(const TTreasureSystemNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreasureSystemNotify& default_instance();

  void Swap(TTreasureSystemNotify* other);

  // implements Message ----------------------------------------------

  TTreasureSystemNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreasureSystemNotify& from);
  void MergeFrom(const TTreasureSystemNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTreasureItemAccSingle TreasureAccArr = 1;
  inline int treasureaccarr_size() const;
  inline void clear_treasureaccarr();
  static const int kTreasureAccArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTreasureSystemNotify</name>
  	<Function>
  		<name>treasureaccarr</name>
  		<replaceName>TreasureAccArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_treasureaccarr</name>
  		<replaceName>TreasureAccArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_treasureaccarr</name>
  		<replaceName>TreasureAccArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_treasureaccarr</name>
  		<replaceName>TreasureAccArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>treasureaccarr_size</name>
  		<replaceName>TreasureAccArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTreasureItemAccSingle& treasureaccarr(int index) const;
  inline ::pb::TTreasureItemAccSingle* mutable_treasureaccarr(int index);
  inline ::pb::TTreasureItemAccSingle* add_treasureaccarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItemAccSingle >&
      treasureaccarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItemAccSingle >*
      mutable_treasureaccarr();

  // repeated .pb.TTreasureUnionAccSingle UnionArr = 3;
  inline int unionarr_size() const;
  inline void clear_unionarr();
  static const int kUnionArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTreasureSystemNotify</name>
  	<Function>
  		<name>unionarr</name>
  		<replaceName>UnionArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unionarr</name>
  		<replaceName>UnionArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unionarr</name>
  		<replaceName>UnionArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unionarr</name>
  		<replaceName>UnionArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unionarr_size</name>
  		<replaceName>UnionArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTreasureUnionAccSingle& unionarr(int index) const;
  inline ::pb::TTreasureUnionAccSingle* mutable_unionarr(int index);
  inline ::pb::TTreasureUnionAccSingle* add_unionarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureUnionAccSingle >&
      unionarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureUnionAccSingle >*
      mutable_unionarr();

  // @@protoc_insertion_point(class_scope:pb.TTreasureSystemNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItemAccSingle > treasureaccarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTreasureUnionAccSingle > unionarr_;
  friend void  protobuf_AddDesc_net_2fTreasureSystem_2eproto();
  friend void protobuf_AssignDesc_net_2fTreasureSystem_2eproto();
  friend void protobuf_ShutdownFile_net_2fTreasureSystem_2eproto();

  void InitAsDefaultInstance();
  static TTreasureSystemNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTreasureSystemActivityUnionReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TreasureSystem.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreasureSystemActivityUnionReq : public ::google::protobuf::Message {
 public:
  TTreasureSystemActivityUnionReq();
  virtual ~TTreasureSystemActivityUnionReq();

  TTreasureSystemActivityUnionReq(const TTreasureSystemActivityUnionReq& from);

  inline TTreasureSystemActivityUnionReq& operator=(const TTreasureSystemActivityUnionReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreasureSystemActivityUnionReq& default_instance();

  void Swap(TTreasureSystemActivityUnionReq* other);

  // implements Message ----------------------------------------------

  TTreasureSystemActivityUnionReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreasureSystemActivityUnionReq& from);
  void MergeFrom(const TTreasureSystemActivityUnionReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTreasureSystemActivityUnionReq</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTreasureSystemActivityUnionReq)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tid_;
  friend void  protobuf_AddDesc_net_2fTreasureSystem_2eproto();
  friend void protobuf_AssignDesc_net_2fTreasureSystem_2eproto();
  friend void protobuf_ShutdownFile_net_2fTreasureSystem_2eproto();

  void InitAsDefaultInstance();
  static TTreasureSystemActivityUnionReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TTreasureAccSingle

// optional .pb.ETreasureAccType Id = 2;
inline bool TTreasureAccSingle::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTreasureAccSingle::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTreasureAccSingle::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTreasureAccSingle::clear_id() {
  id_ = 1;
  clear_has_id();
}
inline ::pb::ETreasureAccType TTreasureAccSingle::id() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureAccSingle.Id)
  return static_cast< ::pb::ETreasureAccType >(id_);
}
inline void TTreasureAccSingle::set_id(::pb::ETreasureAccType value) {
  assert(::pb::ETreasureAccType_IsValid(value));
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureAccSingle.Id)
}

// optional uint64 Progress = 3;
inline bool TTreasureAccSingle::has_progress() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTreasureAccSingle::set_has_progress() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTreasureAccSingle::clear_has_progress() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTreasureAccSingle::clear_progress() {
  progress_ = GOOGLE_ULONGLONG(0);
  clear_has_progress();
}
inline ::google::protobuf::uint64 TTreasureAccSingle::progress() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureAccSingle.Progress)
  return progress_;
}
inline void TTreasureAccSingle::set_progress(::google::protobuf::uint64 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureAccSingle.Progress)
}

// -------------------------------------------------------------------

// TTreasureItemAccSingle

// optional uint32 TreasureTid = 1;
inline bool TTreasureItemAccSingle::has_treasuretid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTreasureItemAccSingle::set_has_treasuretid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTreasureItemAccSingle::clear_has_treasuretid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTreasureItemAccSingle::clear_treasuretid() {
  treasuretid_ = 0u;
  clear_has_treasuretid();
}
inline ::google::protobuf::uint32 TTreasureItemAccSingle::treasuretid() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureItemAccSingle.TreasureTid)
  return treasuretid_;
}
inline void TTreasureItemAccSingle::set_treasuretid(::google::protobuf::uint32 value) {
  set_has_treasuretid();
  treasuretid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureItemAccSingle.TreasureTid)
}

// repeated .pb.TTreasureAccSingle AccArr = 3;
inline int TTreasureItemAccSingle::accarr_size() const {
  return accarr_.size();
}
inline void TTreasureItemAccSingle::clear_accarr() {
  accarr_.Clear();
}
inline const ::pb::TTreasureAccSingle& TTreasureItemAccSingle::accarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTreasureItemAccSingle.AccArr)
  return accarr_.Get(index);
}
inline ::pb::TTreasureAccSingle* TTreasureItemAccSingle::mutable_accarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTreasureItemAccSingle.AccArr)
  return accarr_.Mutable(index);
}
inline ::pb::TTreasureAccSingle* TTreasureItemAccSingle::add_accarr() {
  // @@protoc_insertion_point(field_add:pb.TTreasureItemAccSingle.AccArr)
  return accarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureAccSingle >&
TTreasureItemAccSingle::accarr() const {
  // @@protoc_insertion_point(field_list:pb.TTreasureItemAccSingle.AccArr)
  return accarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureAccSingle >*
TTreasureItemAccSingle::mutable_accarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTreasureItemAccSingle.AccArr)
  return &accarr_;
}

// -------------------------------------------------------------------

// TTreasureUnionAccSingle

// optional uint32 UnionTid = 1;
inline bool TTreasureUnionAccSingle::has_uniontid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTreasureUnionAccSingle::set_has_uniontid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTreasureUnionAccSingle::clear_has_uniontid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTreasureUnionAccSingle::clear_uniontid() {
  uniontid_ = 0u;
  clear_has_uniontid();
}
inline ::google::protobuf::uint32 TTreasureUnionAccSingle::uniontid() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureUnionAccSingle.UnionTid)
  return uniontid_;
}
inline void TTreasureUnionAccSingle::set_uniontid(::google::protobuf::uint32 value) {
  set_has_uniontid();
  uniontid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureUnionAccSingle.UnionTid)
}

// repeated .pb.TTreasureAccSingle AccArr = 3;
inline int TTreasureUnionAccSingle::accarr_size() const {
  return accarr_.size();
}
inline void TTreasureUnionAccSingle::clear_accarr() {
  accarr_.Clear();
}
inline const ::pb::TTreasureAccSingle& TTreasureUnionAccSingle::accarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTreasureUnionAccSingle.AccArr)
  return accarr_.Get(index);
}
inline ::pb::TTreasureAccSingle* TTreasureUnionAccSingle::mutable_accarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTreasureUnionAccSingle.AccArr)
  return accarr_.Mutable(index);
}
inline ::pb::TTreasureAccSingle* TTreasureUnionAccSingle::add_accarr() {
  // @@protoc_insertion_point(field_add:pb.TTreasureUnionAccSingle.AccArr)
  return accarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureAccSingle >&
TTreasureUnionAccSingle::accarr() const {
  // @@protoc_insertion_point(field_list:pb.TTreasureUnionAccSingle.AccArr)
  return accarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureAccSingle >*
TTreasureUnionAccSingle::mutable_accarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTreasureUnionAccSingle.AccArr)
  return &accarr_;
}

// -------------------------------------------------------------------

// TTreasureGetTreasureSystemInfoRsp

// repeated .pb.TTreasureItemAccSingle TreasureAccArr = 1;
inline int TTreasureGetTreasureSystemInfoRsp::treasureaccarr_size() const {
  return treasureaccarr_.size();
}
inline void TTreasureGetTreasureSystemInfoRsp::clear_treasureaccarr() {
  treasureaccarr_.Clear();
}
inline const ::pb::TTreasureItemAccSingle& TTreasureGetTreasureSystemInfoRsp::treasureaccarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTreasureGetTreasureSystemInfoRsp.TreasureAccArr)
  return treasureaccarr_.Get(index);
}
inline ::pb::TTreasureItemAccSingle* TTreasureGetTreasureSystemInfoRsp::mutable_treasureaccarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTreasureGetTreasureSystemInfoRsp.TreasureAccArr)
  return treasureaccarr_.Mutable(index);
}
inline ::pb::TTreasureItemAccSingle* TTreasureGetTreasureSystemInfoRsp::add_treasureaccarr() {
  // @@protoc_insertion_point(field_add:pb.TTreasureGetTreasureSystemInfoRsp.TreasureAccArr)
  return treasureaccarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItemAccSingle >&
TTreasureGetTreasureSystemInfoRsp::treasureaccarr() const {
  // @@protoc_insertion_point(field_list:pb.TTreasureGetTreasureSystemInfoRsp.TreasureAccArr)
  return treasureaccarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItemAccSingle >*
TTreasureGetTreasureSystemInfoRsp::mutable_treasureaccarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTreasureGetTreasureSystemInfoRsp.TreasureAccArr)
  return &treasureaccarr_;
}

// repeated uint32 RewardedArr = 2;
inline int TTreasureGetTreasureSystemInfoRsp::rewardedarr_size() const {
  return rewardedarr_.size();
}
inline void TTreasureGetTreasureSystemInfoRsp::clear_rewardedarr() {
  rewardedarr_.Clear();
}
inline ::google::protobuf::uint32 TTreasureGetTreasureSystemInfoRsp::rewardedarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTreasureGetTreasureSystemInfoRsp.RewardedArr)
  return rewardedarr_.Get(index);
}
inline void TTreasureGetTreasureSystemInfoRsp::set_rewardedarr(int index, ::google::protobuf::uint32 value) {
  rewardedarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TTreasureGetTreasureSystemInfoRsp.RewardedArr)
}
inline void TTreasureGetTreasureSystemInfoRsp::add_rewardedarr(::google::protobuf::uint32 value) {
  rewardedarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TTreasureGetTreasureSystemInfoRsp.RewardedArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TTreasureGetTreasureSystemInfoRsp::rewardedarr() const {
  // @@protoc_insertion_point(field_list:pb.TTreasureGetTreasureSystemInfoRsp.RewardedArr)
  return rewardedarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TTreasureGetTreasureSystemInfoRsp::mutable_rewardedarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTreasureGetTreasureSystemInfoRsp.RewardedArr)
  return &rewardedarr_;
}

// repeated .pb.TTreasureUnionAccSingle UnionArr = 3;
inline int TTreasureGetTreasureSystemInfoRsp::unionarr_size() const {
  return unionarr_.size();
}
inline void TTreasureGetTreasureSystemInfoRsp::clear_unionarr() {
  unionarr_.Clear();
}
inline const ::pb::TTreasureUnionAccSingle& TTreasureGetTreasureSystemInfoRsp::unionarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTreasureGetTreasureSystemInfoRsp.UnionArr)
  return unionarr_.Get(index);
}
inline ::pb::TTreasureUnionAccSingle* TTreasureGetTreasureSystemInfoRsp::mutable_unionarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTreasureGetTreasureSystemInfoRsp.UnionArr)
  return unionarr_.Mutable(index);
}
inline ::pb::TTreasureUnionAccSingle* TTreasureGetTreasureSystemInfoRsp::add_unionarr() {
  // @@protoc_insertion_point(field_add:pb.TTreasureGetTreasureSystemInfoRsp.UnionArr)
  return unionarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureUnionAccSingle >&
TTreasureGetTreasureSystemInfoRsp::unionarr() const {
  // @@protoc_insertion_point(field_list:pb.TTreasureGetTreasureSystemInfoRsp.UnionArr)
  return unionarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureUnionAccSingle >*
TTreasureGetTreasureSystemInfoRsp::mutable_unionarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTreasureGetTreasureSystemInfoRsp.UnionArr)
  return &unionarr_;
}

// -------------------------------------------------------------------

// TTreasureSystemRewardAchievementReq

// optional uint32 Tid = 1;
inline bool TTreasureSystemRewardAchievementReq::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTreasureSystemRewardAchievementReq::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTreasureSystemRewardAchievementReq::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTreasureSystemRewardAchievementReq::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TTreasureSystemRewardAchievementReq::tid() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureSystemRewardAchievementReq.Tid)
  return tid_;
}
inline void TTreasureSystemRewardAchievementReq::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureSystemRewardAchievementReq.Tid)
}

// -------------------------------------------------------------------

// TTreasureSystemNotify

// repeated .pb.TTreasureItemAccSingle TreasureAccArr = 1;
inline int TTreasureSystemNotify::treasureaccarr_size() const {
  return treasureaccarr_.size();
}
inline void TTreasureSystemNotify::clear_treasureaccarr() {
  treasureaccarr_.Clear();
}
inline const ::pb::TTreasureItemAccSingle& TTreasureSystemNotify::treasureaccarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTreasureSystemNotify.TreasureAccArr)
  return treasureaccarr_.Get(index);
}
inline ::pb::TTreasureItemAccSingle* TTreasureSystemNotify::mutable_treasureaccarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTreasureSystemNotify.TreasureAccArr)
  return treasureaccarr_.Mutable(index);
}
inline ::pb::TTreasureItemAccSingle* TTreasureSystemNotify::add_treasureaccarr() {
  // @@protoc_insertion_point(field_add:pb.TTreasureSystemNotify.TreasureAccArr)
  return treasureaccarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItemAccSingle >&
TTreasureSystemNotify::treasureaccarr() const {
  // @@protoc_insertion_point(field_list:pb.TTreasureSystemNotify.TreasureAccArr)
  return treasureaccarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureItemAccSingle >*
TTreasureSystemNotify::mutable_treasureaccarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTreasureSystemNotify.TreasureAccArr)
  return &treasureaccarr_;
}

// repeated .pb.TTreasureUnionAccSingle UnionArr = 3;
inline int TTreasureSystemNotify::unionarr_size() const {
  return unionarr_.size();
}
inline void TTreasureSystemNotify::clear_unionarr() {
  unionarr_.Clear();
}
inline const ::pb::TTreasureUnionAccSingle& TTreasureSystemNotify::unionarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTreasureSystemNotify.UnionArr)
  return unionarr_.Get(index);
}
inline ::pb::TTreasureUnionAccSingle* TTreasureSystemNotify::mutable_unionarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTreasureSystemNotify.UnionArr)
  return unionarr_.Mutable(index);
}
inline ::pb::TTreasureUnionAccSingle* TTreasureSystemNotify::add_unionarr() {
  // @@protoc_insertion_point(field_add:pb.TTreasureSystemNotify.UnionArr)
  return unionarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureUnionAccSingle >&
TTreasureSystemNotify::unionarr() const {
  // @@protoc_insertion_point(field_list:pb.TTreasureSystemNotify.UnionArr)
  return unionarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureUnionAccSingle >*
TTreasureSystemNotify::mutable_unionarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTreasureSystemNotify.UnionArr)
  return &unionarr_;
}

// -------------------------------------------------------------------

// TTreasureSystemActivityUnionReq

// optional uint32 Tid = 1;
inline bool TTreasureSystemActivityUnionReq::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTreasureSystemActivityUnionReq::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTreasureSystemActivityUnionReq::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTreasureSystemActivityUnionReq::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TTreasureSystemActivityUnionReq::tid() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureSystemActivityUnionReq.Tid)
  return tid_;
}
inline void TTreasureSystemActivityUnionReq::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureSystemActivityUnionReq.Tid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::ETreasureAccType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ETreasureAccType>() {
  return ::pb::ETreasureAccType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fTreasureSystem_2eproto__INCLUDED
