// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/EffectAudio.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/EffectAudio.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* EffectAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EffectAudio_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fEffectAudio_2eproto() {
  protobuf_AddDesc_module_2fEffectAudio_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/EffectAudio.proto");
  GOOGLE_CHECK(file != NULL);
  EffectAudio_descriptor_ = file->message_type(0);
  static const int EffectAudio_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAudio, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAudio, effectname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAudio, audioinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAudio, destroyaudioinfo_),
  };
  EffectAudio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EffectAudio_descriptor_,
      EffectAudio::default_instance_,
      EffectAudio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAudio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAudio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EffectAudio));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fEffectAudio_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EffectAudio_descriptor_, &EffectAudio::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fEffectAudio_2eproto() {
  delete EffectAudio::default_instance_;
  delete EffectAudio_reflection_;
}

void protobuf_AddDesc_module_2fEffectAudio_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fAudioDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030module/EffectAudio.proto\022\002pb\032\030module/A"
    "udioDefine.proto\"{\n\013EffectAudio\022\n\n\002Id\030\001 "
    "\001(\005\022\022\n\nEffectName\030\002 \001(\t\022#\n\014AudioInfoArr\030"
    "\003 \003(\0132\r.pb.AudioInfo\022\'\n\020DestroyAudioInfo"
    "\030\004 \001(\0132\r.pb.AudioInfo", 181);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/EffectAudio.proto", &protobuf_RegisterTypes);
  EffectAudio::default_instance_ = new EffectAudio();
  EffectAudio::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fEffectAudio_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fEffectAudio_2eproto {
  StaticDescriptorInitializer_module_2fEffectAudio_2eproto() {
    protobuf_AddDesc_module_2fEffectAudio_2eproto();
  }
} static_descriptor_initializer_module_2fEffectAudio_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EffectAudio::kIdFieldNumber;
const int EffectAudio::kEffectNameFieldNumber;
const int EffectAudio::kAudioInfoArrFieldNumber;
const int EffectAudio::kDestroyAudioInfoFieldNumber;
#endif  // !_MSC_VER

EffectAudio::EffectAudio()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.EffectAudio)
}

void EffectAudio::InitAsDefaultInstance() {
  destroyaudioinfo_ = const_cast< ::pb::AudioInfo*>(&::pb::AudioInfo::default_instance());
}

EffectAudio::EffectAudio(const EffectAudio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.EffectAudio)
}

void EffectAudio::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  effectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destroyaudioinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EffectAudio::~EffectAudio() {
  // @@protoc_insertion_point(destructor:pb.EffectAudio)
  SharedDtor();
}

void EffectAudio::SharedDtor() {
  if (effectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete effectname_;
  }
  if (this != default_instance_) {
    delete destroyaudioinfo_;
  }
}

void EffectAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EffectAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EffectAudio_descriptor_;
}

const EffectAudio& EffectAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fEffectAudio_2eproto();
  return *default_instance_;
}

EffectAudio* EffectAudio::default_instance_ = NULL;

EffectAudio* EffectAudio::New() const {
  return new EffectAudio;
}

void EffectAudio::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    id_ = 0;
    if (has_effectname()) {
      if (effectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        effectname_->clear();
      }
    }
    if (has_destroyaudioinfo()) {
      if (destroyaudioinfo_ != NULL) destroyaudioinfo_->::pb::AudioInfo::Clear();
    }
  }
  audioinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EffectAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.EffectAudio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_EffectName;
        break;
      }

      // optional string EffectName = 2;
      case 2: {
        if (tag == 18) {
         parse_EffectName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effectname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->effectname().data(), this->effectname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "effectname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AudioInfoArr;
        break;
      }

      // repeated .pb.AudioInfo AudioInfoArr = 3;
      case 3: {
        if (tag == 26) {
         parse_AudioInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_audioinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AudioInfoArr;
        if (input->ExpectTag(34)) goto parse_DestroyAudioInfo;
        break;
      }

      // optional .pb.AudioInfo DestroyAudioInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_DestroyAudioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destroyaudioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.EffectAudio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.EffectAudio)
  return false;
#undef DO_
}

void EffectAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.EffectAudio)
  // optional int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string EffectName = 2;
  if (has_effectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effectname().data(), this->effectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "effectname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->effectname(), output);
  }

  // repeated .pb.AudioInfo AudioInfoArr = 3;
  for (int i = 0; i < this->audioinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->audioinfoarr(i), output);
  }

  // optional .pb.AudioInfo DestroyAudioInfo = 4;
  if (has_destroyaudioinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->destroyaudioinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.EffectAudio)
}

::google::protobuf::uint8* EffectAudio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.EffectAudio)
  // optional int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string EffectName = 2;
  if (has_effectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effectname().data(), this->effectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "effectname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->effectname(), target);
  }

  // repeated .pb.AudioInfo AudioInfoArr = 3;
  for (int i = 0; i < this->audioinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->audioinfoarr(i), target);
  }

  // optional .pb.AudioInfo DestroyAudioInfo = 4;
  if (has_destroyaudioinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->destroyaudioinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.EffectAudio)
  return target;
}

int EffectAudio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string EffectName = 2;
    if (has_effectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effectname());
    }

    // optional .pb.AudioInfo DestroyAudioInfo = 4;
    if (has_destroyaudioinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destroyaudioinfo());
    }

  }
  // repeated .pb.AudioInfo AudioInfoArr = 3;
  total_size += 1 * this->audioinfoarr_size();
  for (int i = 0; i < this->audioinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->audioinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectAudio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EffectAudio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EffectAudio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EffectAudio::MergeFrom(const EffectAudio& from) {
  GOOGLE_CHECK_NE(&from, this);
  audioinfoarr_.MergeFrom(from.audioinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_effectname()) {
      set_effectname(from.effectname());
    }
    if (from.has_destroyaudioinfo()) {
      mutable_destroyaudioinfo()->::pb::AudioInfo::MergeFrom(from.destroyaudioinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EffectAudio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectAudio::CopyFrom(const EffectAudio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectAudio::IsInitialized() const {

  return true;
}

void EffectAudio::Swap(EffectAudio* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(effectname_, other->effectname_);
    audioinfoarr_.Swap(&other->audioinfoarr_);
    std::swap(destroyaudioinfo_, other->destroyaudioinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EffectAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EffectAudio_descriptor_;
  metadata.reflection = EffectAudio_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
