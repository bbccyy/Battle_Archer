// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SceneConf3d.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/SceneConf3d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* PointElement3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointElement3_reflection_ = NULL;
const ::google::protobuf::Descriptor* RectArea3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RectArea3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Destructable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Destructable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Camera3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Camera3_reflection_ = NULL;
const ::google::protobuf::Descriptor* CustomArea3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CustomArea3_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockLineFastFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockLineFastFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDSpawnMapping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDSpawnMapping_reflection_ = NULL;
const ::google::protobuf::Descriptor* StripInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StripInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnimAsset3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnimAsset3_reflection_ = NULL;
const ::google::protobuf::Descriptor* StaticAsset3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StaticAsset3_reflection_ = NULL;
const ::google::protobuf::Descriptor* EffectAsset3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EffectAsset3_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeapTrackPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeapTrackPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeapTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeapTrack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurveTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurveTrack_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathTrack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraTrackPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraTrackPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraTrack_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldConf3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldConf3_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneConf3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneConf3d_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fSceneConf3d_2eproto() {
  protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/SceneConf3d.proto");
  GOOGLE_CHECK(file != NULL);
  PointElement3_descriptor_ = file->message_type(0);
  static const int PointElement3_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointElement3, elementtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointElement3, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointElement3, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointElement3, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointElement3, jumptracknamearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointElement3, pathtrackindex_),
  };
  PointElement3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointElement3_descriptor_,
      PointElement3::default_instance_,
      PointElement3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointElement3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointElement3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointElement3));
  RectArea3_descriptor_ = file->message_type(1);
  static const int RectArea3_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea3, elementtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea3, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea3, rectinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea3, centerposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea3, visible_),
  };
  RectArea3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RectArea3_descriptor_,
      RectArea3::default_instance_,
      RectArea3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectArea3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RectArea3));
  Destructable_descriptor_ = file->message_type(2);
  static const int Destructable_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destructable, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destructable, artobjectname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destructable, artobjectposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destructable, destructableeffectpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destructable, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destructable, rectinfo_),
  };
  Destructable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Destructable_descriptor_,
      Destructable::default_instance_,
      Destructable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destructable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destructable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Destructable));
  Camera3_descriptor_ = file->message_type(3);
  static const int Camera3_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera3, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera3, fov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera3, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera3, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera3, followtargetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera3, elementtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera3, localrotation_),
  };
  Camera3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Camera3_descriptor_,
      Camera3::default_instance_,
      Camera3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Camera3));
  CustomArea3_descriptor_ = file->message_type(4);
  static const int CustomArea3_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomArea3, elementtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomArea3, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomArea3, pointarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomArea3, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomArea3, index_),
  };
  CustomArea3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CustomArea3_descriptor_,
      CustomArea3::default_instance_,
      CustomArea3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomArea3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomArea3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CustomArea3));
  BlockLineFastFilter_descriptor_ = file->message_type(5);
  static const int BlockLineFastFilter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLineFastFilter, stripwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLineFastFilter, colstrips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLineFastFilter, rowstrips_),
  };
  BlockLineFastFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockLineFastFilter_descriptor_,
      BlockLineFastFilter::default_instance_,
      BlockLineFastFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLineFastFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockLineFastFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockLineFastFilter));
  TDSpawnMapping_descriptor_ = file->message_type(6);
  static const int TDSpawnMapping_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDSpawnMapping, platindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDSpawnMapping, meleeindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDSpawnMapping, platwidth_),
  };
  TDSpawnMapping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDSpawnMapping_descriptor_,
      TDSpawnMapping::default_instance_,
      TDSpawnMapping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDSpawnMapping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDSpawnMapping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDSpawnMapping));
  StripInfo_descriptor_ = file->message_type(7);
  static const int StripInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripInfo, blocklinearr_),
  };
  StripInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StripInfo_descriptor_,
      StripInfo::default_instance_,
      StripInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StripInfo));
  AnimAsset3_descriptor_ = file->message_type(8);
  static const int AnimAsset3_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset3, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset3, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset3, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset3, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset3, assetpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset3, defaultanim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset3, visible_),
  };
  AnimAsset3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnimAsset3_descriptor_,
      AnimAsset3::default_instance_,
      AnimAsset3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimAsset3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnimAsset3));
  StaticAsset3_descriptor_ = file->message_type(9);
  static const int StaticAsset3_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset3, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset3, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset3, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset3, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset3, assetpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset3, visible_),
  };
  StaticAsset3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StaticAsset3_descriptor_,
      StaticAsset3::default_instance_,
      StaticAsset3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticAsset3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StaticAsset3));
  EffectAsset3_descriptor_ = file->message_type(10);
  static const int EffectAsset3_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAsset3, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAsset3, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAsset3, assetpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAsset3, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAsset3, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAsset3, scale_),
  };
  EffectAsset3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EffectAsset3_descriptor_,
      EffectAsset3::default_instance_,
      EffectAsset3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAsset3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectAsset3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EffectAsset3));
  LeapTrackPoint_descriptor_ = file->message_type(11);
  static const int LeapTrackPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeapTrackPoint, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeapTrackPoint, tonexttrackpointtime_),
  };
  LeapTrackPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeapTrackPoint_descriptor_,
      LeapTrackPoint::default_instance_,
      LeapTrackPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeapTrackPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeapTrackPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeapTrackPoint));
  LeapTrack_descriptor_ = file->message_type(12);
  static const int LeapTrack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeapTrack, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeapTrack, pointarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeapTrack, droptime_),
  };
  LeapTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeapTrack_descriptor_,
      LeapTrack::default_instance_,
      LeapTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeapTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeapTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeapTrack));
  CurveTrack_descriptor_ = file->message_type(13);
  static const int CurveTrack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveTrack, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveTrack, pointpositionarr_),
  };
  CurveTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurveTrack_descriptor_,
      CurveTrack::default_instance_,
      CurveTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurveTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurveTrack));
  PathPoint_descriptor_ = file->message_type(14);
  static const int PathPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, pointevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, point_),
  };
  PathPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathPoint_descriptor_,
      PathPoint::default_instance_,
      PathPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathPoint));
  PathTrack_descriptor_ = file->message_type(15);
  static const int PathTrack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTrack, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTrack, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTrack, pointarr_),
  };
  PathTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathTrack_descriptor_,
      PathTrack::default_instance_,
      PathTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathTrack));
  CameraTrackPoint_descriptor_ = file->message_type(16);
  static const int CameraTrackPoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraTrackPoint, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraTrackPoint, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraTrackPoint, starttime_),
  };
  CameraTrackPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraTrackPoint_descriptor_,
      CameraTrackPoint::default_instance_,
      CameraTrackPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraTrackPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraTrackPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraTrackPoint));
  CameraTrack_descriptor_ = file->message_type(17);
  static const int CameraTrack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraTrack, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraTrack, animrespath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraTrack, pointarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraTrack, length_),
  };
  CameraTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraTrack_descriptor_,
      CameraTrack::default_instance_,
      CameraTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraTrack));
  FieldConf3_descriptor_ = file->message_type(18);
  static const int FieldConf3_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, fieldconfname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, pointelementarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, rectareaarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, camerainfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, customareaarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, animassetarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, staticassetarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, effectassetarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, rootposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, rootdirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, standardlineposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, lenandwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, destructablearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, cutscenecameratrackname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, positionlineposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, needsynctimeline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, pathtrackarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, spawnmapping_),
  };
  FieldConf3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FieldConf3_descriptor_,
      FieldConf3::default_instance_,
      FieldConf3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldConf3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FieldConf3));
  SceneConf3d_descriptor_ = file->message_type(19);
  static const int SceneConf3d_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConf3d, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConf3d, confname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConf3d, artscenepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConf3d, fieldconfarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConf3d, leaptrackarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConf3d, griddatapath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConf3d, cameratrackarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConf3d, curvetrackarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConf3d, scenecamera_),
  };
  SceneConf3d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneConf3d_descriptor_,
      SceneConf3d::default_instance_,
      SceneConf3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConf3d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConf3d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneConf3d));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fSceneConf3d_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointElement3_descriptor_, &PointElement3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RectArea3_descriptor_, &RectArea3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Destructable_descriptor_, &Destructable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Camera3_descriptor_, &Camera3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CustomArea3_descriptor_, &CustomArea3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockLineFastFilter_descriptor_, &BlockLineFastFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDSpawnMapping_descriptor_, &TDSpawnMapping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StripInfo_descriptor_, &StripInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnimAsset3_descriptor_, &AnimAsset3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StaticAsset3_descriptor_, &StaticAsset3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EffectAsset3_descriptor_, &EffectAsset3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeapTrackPoint_descriptor_, &LeapTrackPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeapTrack_descriptor_, &LeapTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurveTrack_descriptor_, &CurveTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathPoint_descriptor_, &PathPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathTrack_descriptor_, &PathTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraTrackPoint_descriptor_, &CameraTrackPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraTrack_descriptor_, &CameraTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FieldConf3_descriptor_, &FieldConf3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneConf3d_descriptor_, &SceneConf3d::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fSceneConf3d_2eproto() {
  delete PointElement3::default_instance_;
  delete PointElement3_reflection_;
  delete RectArea3::default_instance_;
  delete RectArea3_reflection_;
  delete Destructable::default_instance_;
  delete Destructable_reflection_;
  delete Camera3::default_instance_;
  delete Camera3_reflection_;
  delete CustomArea3::default_instance_;
  delete CustomArea3_reflection_;
  delete BlockLineFastFilter::default_instance_;
  delete BlockLineFastFilter_reflection_;
  delete TDSpawnMapping::default_instance_;
  delete TDSpawnMapping_reflection_;
  delete StripInfo::default_instance_;
  delete StripInfo_reflection_;
  delete AnimAsset3::default_instance_;
  delete AnimAsset3_reflection_;
  delete StaticAsset3::default_instance_;
  delete StaticAsset3_reflection_;
  delete EffectAsset3::default_instance_;
  delete EffectAsset3_reflection_;
  delete LeapTrackPoint::default_instance_;
  delete LeapTrackPoint_reflection_;
  delete LeapTrack::default_instance_;
  delete LeapTrack_reflection_;
  delete CurveTrack::default_instance_;
  delete CurveTrack_reflection_;
  delete PathPoint::default_instance_;
  delete PathPoint_reflection_;
  delete PathTrack::default_instance_;
  delete PathTrack_reflection_;
  delete CameraTrackPoint::default_instance_;
  delete CameraTrackPoint_reflection_;
  delete CameraTrack::default_instance_;
  delete CameraTrack_reflection_;
  delete FieldConf3::default_instance_;
  delete FieldConf3_reflection_;
  delete SceneConf3d::default_instance_;
  delete SceneConf3d_reflection_;
}

void protobuf_AddDesc_module_2fSceneConf3d_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fSceneElementDefine_2eproto();
  ::pb::protobuf_AddDesc_module_2fUtil_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030module/SceneConf3d.proto\022\002pb\032\037module/S"
    "ceneElementDefine.proto\032\021module/Util.pro"
    "to\"\306\001\n\rPointElement3\022*\n\013ElementType\030\001 \002("
    "\0162\025.pb.ESceneElementType\022\014\n\004Name\030\002 \002(\t\022#"
    "\n\010Position\030\003 \002(\0132\021.pb.PbVector3_Int\022$\n\tD"
    "irection\030\004 \001(\0132\021.pb.PbVector3_Int\022\030\n\020Jum"
    "pTrackNameArr\030\005 \003(\t\022\026\n\016PathTrackIndex\030\006 "
    "\001(\005\"\243\001\n\tRectArea3\022*\n\013ElementType\030\001 \002(\0162\025"
    ".pb.ESceneElementType\022\014\n\004Name\030\002 \002(\t\022 \n\010R"
    "ectInfo\030\003 \002(\0132\016.pb.PbRect_Int\022)\n\016CenterP"
    "osition\030\004 \002(\0132\021.pb.PbVector3_Int\022\017\n\007Visi"
    "ble\030\005 \002(\010\"\260\001\n\014Destructable\022\014\n\004Name\030\001 \001(\t"
    "\022\025\n\rArtObjectName\030\002 \001(\t\022,\n\021ArtObjectPosi"
    "tion\030\003 \001(\0132\021.pb.PbVector3_Int\022\036\n\026Destruc"
    "tableEffectPath\030\004 \001(\t\022\013\n\003Tid\030\005 \001(\r\022 \n\010Re"
    "ctInfo\030\006 \001(\0132\016.pb.PbRect_Int\"\336\001\n\007Camera3"
    "\022\014\n\004Name\030\001 \002(\t\022\013\n\003Fov\030\002 \002(\002\022#\n\010Position\030"
    "\003 \002(\0132\021.pb.PbVector3_Int\022$\n\tDirection\030\004 "
    "\002(\0132\021.pb.PbVector3_Int\022\030\n\020FollowTargetNa"
    "me\030\005 \002(\t\022*\n\013ElementType\030\006 \001(\0162\025.pb.EScen"
    "eElementType\022\'\n\rLocalRotation\030\007 \001(\0132\020.pb"
    ".PbQuaternion\"\214\001\n\013CustomArea3\022*\n\013Element"
    "Type\030\001 \002(\0162\025.pb.ESceneElementType\022\014\n\004Nam"
    "e\030\002 \002(\t\022#\n\010PointArr\030\003 \003(\0132\021.pb.PbVector3"
    "_Int\022\017\n\007Visible\030\004 \002(\010\022\r\n\005Index\030\005 \001(\005\"m\n\023"
    "BlockLineFastFilter\022\022\n\nStripWidth\030\001 \001(\005\022"
    " \n\tColStrips\030\002 \003(\0132\r.pb.StripInfo\022 \n\tRow"
    "Strips\030\003 \003(\0132\r.pb.StripInfo\"J\n\016TDSpawnMa"
    "pping\022\021\n\tPlatIndex\030\001 \001(\005\022\022\n\nMeleeIndex\030\002"
    " \001(\005\022\021\n\tPlatWidth\030\003 \001(\005\"0\n\tStripInfo\022\r\n\005"
    "Index\030\001 \001(\005\022\024\n\014BlockLineArr\030\002 \003(\005\"\300\001\n\nAn"
    "imAsset3\022\014\n\004Name\030\001 \002(\t\022#\n\010Position\030\002 \002(\013"
    "2\021.pb.PbVector3_Int\022$\n\tDirection\030\003 \002(\0132\021"
    ".pb.PbVector3_Int\022 \n\005Scale\030\004 \002(\0132\021.pb.Pb"
    "Vector3_Int\022\021\n\tAssetPath\030\005 \002(\t\022\023\n\013Defaul"
    "tAnim\030\006 \001(\t\022\017\n\007Visible\030\007 \002(\010\"\255\001\n\014StaticA"
    "sset3\022\014\n\004Name\030\001 \002(\t\022#\n\010Position\030\002 \002(\0132\021."
    "pb.PbVector3_Int\022$\n\tDirection\030\003 \002(\0132\021.pb"
    ".PbVector3_Int\022 \n\005Scale\030\004 \002(\0132\021.pb.PbVec"
    "tor3_Int\022\021\n\tAssetPath\030\005 \002(\t\022\017\n\007Visible\030\006"
    " \002(\010\"\255\001\n\014EffectAsset3\022\014\n\004Name\030\001 \002(\t\022#\n\010P"
    "osition\030\002 \002(\0132\021.pb.PbVector3_Int\022\021\n\tAsse"
    "tPath\030\003 \002(\t\022\017\n\007Visible\030\004 \002(\010\022$\n\tDirectio"
    "n\030\005 \001(\0132\021.pb.PbVector3_Int\022 \n\005Scale\030\006 \001("
    "\0132\021.pb.PbVector3_Int\"S\n\016LeapTrackPoint\022#"
    "\n\010Position\030\001 \001(\0132\021.pb.PbVector3_Int\022\034\n\024T"
    "oNextTrackPointTime\030\002 \001(\002\"Q\n\tLeapTrack\022\014"
    "\n\004Name\030\001 \001(\t\022$\n\010PointArr\030\002 \003(\0132\022.pb.Leap"
    "TrackPoint\022\020\n\010DropTime\030\003 \001(\002\"G\n\nCurveTra"
    "ck\022\014\n\004Name\030\001 \001(\t\022+\n\020PointPositionArr\030\002 \003"
    "(\0132\021.pb.PbVector3_Int\"A\n\tPathPoint\022\022\n\nPo"
    "intEvent\030\001 \001(\005\022 \n\005Point\030\002 \001(\0132\021.pb.PbVec"
    "tor3_Int\"I\n\tPathTrack\022\014\n\004Name\030\001 \001(\t\022\r\n\005I"
    "ndex\030\002 \001(\005\022\037\n\010PointArr\030\003 \003(\0132\r.pb.PathPo"
    "int\"n\n\020CameraTrackPoint\022#\n\010Position\030\001 \001("
    "\0132\021.pb.PbVector3_Int\022\"\n\010Rotation\030\002 \001(\0132\020"
    ".pb.PbQuaternion\022\021\n\tStartTime\030\003 \001(\002\"h\n\013C"
    "ameraTrack\022\014\n\004Name\030\001 \001(\t\022\023\n\013AnimResPath\030"
    "\002 \001(\t\022&\n\010PointArr\030\003 \003(\0132\024.pb.CameraTrack"
    "Point\022\016\n\006Length\030\004 \001(\002\"\304\005\n\nFieldConf3\022\025\n\r"
    "FieldConfName\030\001 \002(\t\022*\n\017PointElementArr\030\002"
    " \003(\0132\021.pb.PointElement3\022\"\n\013RectAreaArr\030\003"
    " \003(\0132\r.pb.RectArea3\022\"\n\rCameraInfoArr\030\004 \003"
    "(\0132\013.pb.Camera3\022&\n\rCustomAreaArr\030\005 \003(\0132\017"
    ".pb.CustomArea3\022$\n\014AnimAssetArr\030\006 \003(\0132\016."
    "pb.AnimAsset3\022(\n\016StaticAssetArr\030\007 \003(\0132\020."
    "pb.StaticAsset3\022(\n\016EffectAssetArr\030\010 \003(\0132"
    "\020.pb.EffectAsset3\022\'\n\014RootPosition\030\t \001(\0132"
    "\021.pb.PbVector3_Int\022(\n\rRootDirection\030\n \001("
    "\0132\021.pb.PbVector3_Int\022\030\n\020StandardlinePosX"
    "\030\013 \001(\005\022$\n\tLenAndWid\030\014 \001(\0132\021.pb.PbVector2"
    "_Int\022)\n\017DestructableArr\030\r \003(\0132\020.pb.Destr"
    "uctable\022\037\n\027CutSceneCameraTrackName\030\016 \001(\t"
    "\022\030\n\020PositionlinePosX\030\017 \003(\005\022\030\n\020NeedSyncTi"
    "meline\030\020 \001(\010\022#\n\014PathTrackArr\030\021 \003(\0132\r.pb."
    "PathTrack\022\'\n\006Filter\030\022 \001(\0132\027.pb.BlockLine"
    "FastFilter\022(\n\014SpawnMapping\030\023 \003(\0132\022.pb.TD"
    "SpawnMapping\"\224\002\n\013SceneConf3d\022\n\n\002Id\030\001 \002(\005"
    "\022\020\n\010ConfName\030\002 \002(\t\022\024\n\014ArtScenePath\030\003 \002(\t"
    "\022$\n\014FieldConfArr\030\004 \003(\0132\016.pb.FieldConf3\022#"
    "\n\014LeapTrackArr\030\005 \003(\0132\r.pb.LeapTrack\022\024\n\014G"
    "ridDataPath\030\006 \001(\t\022\'\n\016CameraTrackArr\030\007 \003("
    "\0132\017.pb.CameraTrack\022%\n\rCurveTrackArr\030\010 \003("
    "\0132\016.pb.CurveTrack\022 \n\013SceneCamera\030\t \001(\0132\013"
    ".pb.Camera3", 3371);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/SceneConf3d.proto", &protobuf_RegisterTypes);
  PointElement3::default_instance_ = new PointElement3();
  RectArea3::default_instance_ = new RectArea3();
  Destructable::default_instance_ = new Destructable();
  Camera3::default_instance_ = new Camera3();
  CustomArea3::default_instance_ = new CustomArea3();
  BlockLineFastFilter::default_instance_ = new BlockLineFastFilter();
  TDSpawnMapping::default_instance_ = new TDSpawnMapping();
  StripInfo::default_instance_ = new StripInfo();
  AnimAsset3::default_instance_ = new AnimAsset3();
  StaticAsset3::default_instance_ = new StaticAsset3();
  EffectAsset3::default_instance_ = new EffectAsset3();
  LeapTrackPoint::default_instance_ = new LeapTrackPoint();
  LeapTrack::default_instance_ = new LeapTrack();
  CurveTrack::default_instance_ = new CurveTrack();
  PathPoint::default_instance_ = new PathPoint();
  PathTrack::default_instance_ = new PathTrack();
  CameraTrackPoint::default_instance_ = new CameraTrackPoint();
  CameraTrack::default_instance_ = new CameraTrack();
  FieldConf3::default_instance_ = new FieldConf3();
  SceneConf3d::default_instance_ = new SceneConf3d();
  PointElement3::default_instance_->InitAsDefaultInstance();
  RectArea3::default_instance_->InitAsDefaultInstance();
  Destructable::default_instance_->InitAsDefaultInstance();
  Camera3::default_instance_->InitAsDefaultInstance();
  CustomArea3::default_instance_->InitAsDefaultInstance();
  BlockLineFastFilter::default_instance_->InitAsDefaultInstance();
  TDSpawnMapping::default_instance_->InitAsDefaultInstance();
  StripInfo::default_instance_->InitAsDefaultInstance();
  AnimAsset3::default_instance_->InitAsDefaultInstance();
  StaticAsset3::default_instance_->InitAsDefaultInstance();
  EffectAsset3::default_instance_->InitAsDefaultInstance();
  LeapTrackPoint::default_instance_->InitAsDefaultInstance();
  LeapTrack::default_instance_->InitAsDefaultInstance();
  CurveTrack::default_instance_->InitAsDefaultInstance();
  PathPoint::default_instance_->InitAsDefaultInstance();
  PathTrack::default_instance_->InitAsDefaultInstance();
  CameraTrackPoint::default_instance_->InitAsDefaultInstance();
  CameraTrack::default_instance_->InitAsDefaultInstance();
  FieldConf3::default_instance_->InitAsDefaultInstance();
  SceneConf3d::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fSceneConf3d_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fSceneConf3d_2eproto {
  StaticDescriptorInitializer_module_2fSceneConf3d_2eproto() {
    protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  }
} static_descriptor_initializer_module_2fSceneConf3d_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PointElement3::kElementTypeFieldNumber;
const int PointElement3::kNameFieldNumber;
const int PointElement3::kPositionFieldNumber;
const int PointElement3::kDirectionFieldNumber;
const int PointElement3::kJumpTrackNameArrFieldNumber;
const int PointElement3::kPathTrackIndexFieldNumber;
#endif  // !_MSC_VER

PointElement3::PointElement3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PointElement3)
}

void PointElement3::InitAsDefaultInstance() {
  position_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
  direction_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
}

PointElement3::PointElement3(const PointElement3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PointElement3)
}

void PointElement3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  elementtype_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = NULL;
  direction_ = NULL;
  pathtrackindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointElement3::~PointElement3() {
  // @@protoc_insertion_point(destructor:pb.PointElement3)
  SharedDtor();
}

void PointElement3::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete position_;
    delete direction_;
  }
}

void PointElement3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointElement3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointElement3_descriptor_;
}

const PointElement3& PointElement3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

PointElement3* PointElement3::default_instance_ = NULL;

PointElement3* PointElement3::New() const {
  return new PointElement3;
}

void PointElement3::Clear() {
  if (_has_bits_[0 / 32] & 47) {
    elementtype_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::pb::PbVector3_Int::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::pb::PbVector3_Int::Clear();
    }
    pathtrackindex_ = 0;
  }
  jumptracknamearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointElement3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PointElement3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.ESceneElementType ElementType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ESceneElementType_IsValid(value)) {
            set_elementtype(static_cast< ::pb::ESceneElementType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Position;
        break;
      }

      // required .pb.PbVector3_Int Position = 3;
      case 3: {
        if (tag == 26) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Direction;
        break;
      }

      // optional .pb.PbVector3_Int Direction = 4;
      case 4: {
        if (tag == 34) {
         parse_Direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_JumpTrackNameArr;
        break;
      }

      // repeated string JumpTrackNameArr = 5;
      case 5: {
        if (tag == 42) {
         parse_JumpTrackNameArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_jumptracknamearr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jumptracknamearr(this->jumptracknamearr_size() - 1).data(),
            this->jumptracknamearr(this->jumptracknamearr_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jumptracknamearr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_JumpTrackNameArr;
        if (input->ExpectTag(48)) goto parse_PathTrackIndex;
        break;
      }

      // optional int32 PathTrackIndex = 6;
      case 6: {
        if (tag == 48) {
         parse_PathTrackIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pathtrackindex_)));
          set_has_pathtrackindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PointElement3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PointElement3)
  return false;
#undef DO_
}

void PointElement3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PointElement3)
  // required .pb.ESceneElementType ElementType = 1;
  if (has_elementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->elementtype(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required .pb.PbVector3_Int Position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  // optional .pb.PbVector3_Int Direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->direction(), output);
  }

  // repeated string JumpTrackNameArr = 5;
  for (int i = 0; i < this->jumptracknamearr_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->jumptracknamearr(i).data(), this->jumptracknamearr(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "jumptracknamearr");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->jumptracknamearr(i), output);
  }

  // optional int32 PathTrackIndex = 6;
  if (has_pathtrackindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pathtrackindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PointElement3)
}

::google::protobuf::uint8* PointElement3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PointElement3)
  // required .pb.ESceneElementType ElementType = 1;
  if (has_elementtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->elementtype(), target);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .pb.PbVector3_Int Position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  // optional .pb.PbVector3_Int Direction = 4;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->direction(), target);
  }

  // repeated string JumpTrackNameArr = 5;
  for (int i = 0; i < this->jumptracknamearr_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jumptracknamearr(i).data(), this->jumptracknamearr(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jumptracknamearr");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->jumptracknamearr(i), target);
  }

  // optional int32 PathTrackIndex = 6;
  if (has_pathtrackindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pathtrackindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PointElement3)
  return target;
}

int PointElement3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.ESceneElementType ElementType = 1;
    if (has_elementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->elementtype());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .pb.PbVector3_Int Position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .pb.PbVector3_Int Direction = 4;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // optional int32 PathTrackIndex = 6;
    if (has_pathtrackindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pathtrackindex());
    }

  }
  // repeated string JumpTrackNameArr = 5;
  total_size += 1 * this->jumptracknamearr_size();
  for (int i = 0; i < this->jumptracknamearr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->jumptracknamearr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointElement3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointElement3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointElement3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointElement3::MergeFrom(const PointElement3& from) {
  GOOGLE_CHECK_NE(&from, this);
  jumptracknamearr_.MergeFrom(from.jumptracknamearr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elementtype()) {
      set_elementtype(from.elementtype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_position()) {
      mutable_position()->::pb::PbVector3_Int::MergeFrom(from.position());
    }
    if (from.has_direction()) {
      mutable_direction()->::pb::PbVector3_Int::MergeFrom(from.direction());
    }
    if (from.has_pathtrackindex()) {
      set_pathtrackindex(from.pathtrackindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointElement3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointElement3::CopyFrom(const PointElement3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointElement3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PointElement3::Swap(PointElement3* other) {
  if (other != this) {
    std::swap(elementtype_, other->elementtype_);
    std::swap(name_, other->name_);
    std::swap(position_, other->position_);
    std::swap(direction_, other->direction_);
    jumptracknamearr_.Swap(&other->jumptracknamearr_);
    std::swap(pathtrackindex_, other->pathtrackindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointElement3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointElement3_descriptor_;
  metadata.reflection = PointElement3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RectArea3::kElementTypeFieldNumber;
const int RectArea3::kNameFieldNumber;
const int RectArea3::kRectInfoFieldNumber;
const int RectArea3::kCenterPositionFieldNumber;
const int RectArea3::kVisibleFieldNumber;
#endif  // !_MSC_VER

RectArea3::RectArea3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RectArea3)
}

void RectArea3::InitAsDefaultInstance() {
  rectinfo_ = const_cast< ::pb::PbRect_Int*>(&::pb::PbRect_Int::default_instance());
  centerposition_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
}

RectArea3::RectArea3(const RectArea3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.RectArea3)
}

void RectArea3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  elementtype_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rectinfo_ = NULL;
  centerposition_ = NULL;
  visible_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RectArea3::~RectArea3() {
  // @@protoc_insertion_point(destructor:pb.RectArea3)
  SharedDtor();
}

void RectArea3::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete rectinfo_;
    delete centerposition_;
  }
}

void RectArea3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RectArea3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RectArea3_descriptor_;
}

const RectArea3& RectArea3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

RectArea3* RectArea3::default_instance_ = NULL;

RectArea3* RectArea3::New() const {
  return new RectArea3;
}

void RectArea3::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    elementtype_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_rectinfo()) {
      if (rectinfo_ != NULL) rectinfo_->::pb::PbRect_Int::Clear();
    }
    if (has_centerposition()) {
      if (centerposition_ != NULL) centerposition_->::pb::PbVector3_Int::Clear();
    }
    visible_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RectArea3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RectArea3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.ESceneElementType ElementType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ESceneElementType_IsValid(value)) {
            set_elementtype(static_cast< ::pb::ESceneElementType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RectInfo;
        break;
      }

      // required .pb.PbRect_Int RectInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_RectInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rectinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CenterPosition;
        break;
      }

      // required .pb.PbVector3_Int CenterPosition = 4;
      case 4: {
        if (tag == 34) {
         parse_CenterPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_centerposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Visible;
        break;
      }

      // required bool Visible = 5;
      case 5: {
        if (tag == 40) {
         parse_Visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RectArea3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RectArea3)
  return false;
#undef DO_
}

void RectArea3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RectArea3)
  // required .pb.ESceneElementType ElementType = 1;
  if (has_elementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->elementtype(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required .pb.PbRect_Int RectInfo = 3;
  if (has_rectinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rectinfo(), output);
  }

  // required .pb.PbVector3_Int CenterPosition = 4;
  if (has_centerposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->centerposition(), output);
  }

  // required bool Visible = 5;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->visible(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RectArea3)
}

::google::protobuf::uint8* RectArea3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RectArea3)
  // required .pb.ESceneElementType ElementType = 1;
  if (has_elementtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->elementtype(), target);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .pb.PbRect_Int RectInfo = 3;
  if (has_rectinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rectinfo(), target);
  }

  // required .pb.PbVector3_Int CenterPosition = 4;
  if (has_centerposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->centerposition(), target);
  }

  // required bool Visible = 5;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->visible(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RectArea3)
  return target;
}

int RectArea3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.ESceneElementType ElementType = 1;
    if (has_elementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->elementtype());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .pb.PbRect_Int RectInfo = 3;
    if (has_rectinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rectinfo());
    }

    // required .pb.PbVector3_Int CenterPosition = 4;
    if (has_centerposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->centerposition());
    }

    // required bool Visible = 5;
    if (has_visible()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RectArea3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RectArea3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RectArea3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RectArea3::MergeFrom(const RectArea3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elementtype()) {
      set_elementtype(from.elementtype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rectinfo()) {
      mutable_rectinfo()->::pb::PbRect_Int::MergeFrom(from.rectinfo());
    }
    if (from.has_centerposition()) {
      mutable_centerposition()->::pb::PbVector3_Int::MergeFrom(from.centerposition());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RectArea3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RectArea3::CopyFrom(const RectArea3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectArea3::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RectArea3::Swap(RectArea3* other) {
  if (other != this) {
    std::swap(elementtype_, other->elementtype_);
    std::swap(name_, other->name_);
    std::swap(rectinfo_, other->rectinfo_);
    std::swap(centerposition_, other->centerposition_);
    std::swap(visible_, other->visible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RectArea3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RectArea3_descriptor_;
  metadata.reflection = RectArea3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Destructable::kNameFieldNumber;
const int Destructable::kArtObjectNameFieldNumber;
const int Destructable::kArtObjectPositionFieldNumber;
const int Destructable::kDestructableEffectPathFieldNumber;
const int Destructable::kTidFieldNumber;
const int Destructable::kRectInfoFieldNumber;
#endif  // !_MSC_VER

Destructable::Destructable()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Destructable)
}

void Destructable::InitAsDefaultInstance() {
  artobjectposition_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
  rectinfo_ = const_cast< ::pb::PbRect_Int*>(&::pb::PbRect_Int::default_instance());
}

Destructable::Destructable(const Destructable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Destructable)
}

void Destructable::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artobjectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artobjectposition_ = NULL;
  destructableeffectpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tid_ = 0u;
  rectinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Destructable::~Destructable() {
  // @@protoc_insertion_point(destructor:pb.Destructable)
  SharedDtor();
}

void Destructable::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (artobjectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete artobjectname_;
  }
  if (destructableeffectpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete destructableeffectpath_;
  }
  if (this != default_instance_) {
    delete artobjectposition_;
    delete rectinfo_;
  }
}

void Destructable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Destructable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Destructable_descriptor_;
}

const Destructable& Destructable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

Destructable* Destructable::default_instance_ = NULL;

Destructable* Destructable::New() const {
  return new Destructable;
}

void Destructable::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_artobjectname()) {
      if (artobjectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        artobjectname_->clear();
      }
    }
    if (has_artobjectposition()) {
      if (artobjectposition_ != NULL) artobjectposition_->::pb::PbVector3_Int::Clear();
    }
    if (has_destructableeffectpath()) {
      if (destructableeffectpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        destructableeffectpath_->clear();
      }
    }
    tid_ = 0u;
    if (has_rectinfo()) {
      if (rectinfo_ != NULL) rectinfo_->::pb::PbRect_Int::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Destructable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Destructable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArtObjectName;
        break;
      }

      // optional string ArtObjectName = 2;
      case 2: {
        if (tag == 18) {
         parse_ArtObjectName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artobjectname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->artobjectname().data(), this->artobjectname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artobjectname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArtObjectPosition;
        break;
      }

      // optional .pb.PbVector3_Int ArtObjectPosition = 3;
      case 3: {
        if (tag == 26) {
         parse_ArtObjectPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_artobjectposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_DestructableEffectPath;
        break;
      }

      // optional string DestructableEffectPath = 4;
      case 4: {
        if (tag == 34) {
         parse_DestructableEffectPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destructableeffectpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destructableeffectpath().data(), this->destructableeffectpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "destructableeffectpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Tid;
        break;
      }

      // optional uint32 Tid = 5;
      case 5: {
        if (tag == 40) {
         parse_Tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_RectInfo;
        break;
      }

      // optional .pb.PbRect_Int RectInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_RectInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rectinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Destructable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Destructable)
  return false;
#undef DO_
}

void Destructable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Destructable)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string ArtObjectName = 2;
  if (has_artobjectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artobjectname().data(), this->artobjectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artobjectname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->artobjectname(), output);
  }

  // optional .pb.PbVector3_Int ArtObjectPosition = 3;
  if (has_artobjectposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->artobjectposition(), output);
  }

  // optional string DestructableEffectPath = 4;
  if (has_destructableeffectpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destructableeffectpath().data(), this->destructableeffectpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "destructableeffectpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->destructableeffectpath(), output);
  }

  // optional uint32 Tid = 5;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tid(), output);
  }

  // optional .pb.PbRect_Int RectInfo = 6;
  if (has_rectinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rectinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Destructable)
}

::google::protobuf::uint8* Destructable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Destructable)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string ArtObjectName = 2;
  if (has_artobjectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artobjectname().data(), this->artobjectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artobjectname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->artobjectname(), target);
  }

  // optional .pb.PbVector3_Int ArtObjectPosition = 3;
  if (has_artobjectposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->artobjectposition(), target);
  }

  // optional string DestructableEffectPath = 4;
  if (has_destructableeffectpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destructableeffectpath().data(), this->destructableeffectpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "destructableeffectpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->destructableeffectpath(), target);
  }

  // optional uint32 Tid = 5;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tid(), target);
  }

  // optional .pb.PbRect_Int RectInfo = 6;
  if (has_rectinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rectinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Destructable)
  return target;
}

int Destructable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string ArtObjectName = 2;
    if (has_artobjectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artobjectname());
    }

    // optional .pb.PbVector3_Int ArtObjectPosition = 3;
    if (has_artobjectposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->artobjectposition());
    }

    // optional string DestructableEffectPath = 4;
    if (has_destructableeffectpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destructableeffectpath());
    }

    // optional uint32 Tid = 5;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional .pb.PbRect_Int RectInfo = 6;
    if (has_rectinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rectinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Destructable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Destructable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Destructable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Destructable::MergeFrom(const Destructable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_artobjectname()) {
      set_artobjectname(from.artobjectname());
    }
    if (from.has_artobjectposition()) {
      mutable_artobjectposition()->::pb::PbVector3_Int::MergeFrom(from.artobjectposition());
    }
    if (from.has_destructableeffectpath()) {
      set_destructableeffectpath(from.destructableeffectpath());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_rectinfo()) {
      mutable_rectinfo()->::pb::PbRect_Int::MergeFrom(from.rectinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Destructable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Destructable::CopyFrom(const Destructable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Destructable::IsInitialized() const {

  return true;
}

void Destructable::Swap(Destructable* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(artobjectname_, other->artobjectname_);
    std::swap(artobjectposition_, other->artobjectposition_);
    std::swap(destructableeffectpath_, other->destructableeffectpath_);
    std::swap(tid_, other->tid_);
    std::swap(rectinfo_, other->rectinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Destructable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Destructable_descriptor_;
  metadata.reflection = Destructable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Camera3::kNameFieldNumber;
const int Camera3::kFovFieldNumber;
const int Camera3::kPositionFieldNumber;
const int Camera3::kDirectionFieldNumber;
const int Camera3::kFollowTargetNameFieldNumber;
const int Camera3::kElementTypeFieldNumber;
const int Camera3::kLocalRotationFieldNumber;
#endif  // !_MSC_VER

Camera3::Camera3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Camera3)
}

void Camera3::InitAsDefaultInstance() {
  position_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
  direction_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
  localrotation_ = const_cast< ::pb::PbQuaternion*>(&::pb::PbQuaternion::default_instance());
}

Camera3::Camera3(const Camera3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Camera3)
}

void Camera3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fov_ = 0;
  position_ = NULL;
  direction_ = NULL;
  followtargetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  elementtype_ = 1;
  localrotation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Camera3::~Camera3() {
  // @@protoc_insertion_point(destructor:pb.Camera3)
  SharedDtor();
}

void Camera3::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (followtargetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete followtargetname_;
  }
  if (this != default_instance_) {
    delete position_;
    delete direction_;
    delete localrotation_;
  }
}

void Camera3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camera3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camera3_descriptor_;
}

const Camera3& Camera3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

Camera3* Camera3::default_instance_ = NULL;

Camera3* Camera3::New() const {
  return new Camera3;
}

void Camera3::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    fov_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::pb::PbVector3_Int::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::pb::PbVector3_Int::Clear();
    }
    if (has_followtargetname()) {
      if (followtargetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        followtargetname_->clear();
      }
    }
    elementtype_ = 1;
    if (has_localrotation()) {
      if (localrotation_ != NULL) localrotation_->::pb::PbQuaternion::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Camera3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Camera3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_Fov;
        break;
      }

      // required float Fov = 2;
      case 2: {
        if (tag == 21) {
         parse_Fov:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fov_)));
          set_has_fov();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Position;
        break;
      }

      // required .pb.PbVector3_Int Position = 3;
      case 3: {
        if (tag == 26) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Direction;
        break;
      }

      // required .pb.PbVector3_Int Direction = 4;
      case 4: {
        if (tag == 34) {
         parse_Direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_FollowTargetName;
        break;
      }

      // required string FollowTargetName = 5;
      case 5: {
        if (tag == 42) {
         parse_FollowTargetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_followtargetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->followtargetname().data(), this->followtargetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "followtargetname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ElementType;
        break;
      }

      // optional .pb.ESceneElementType ElementType = 6;
      case 6: {
        if (tag == 48) {
         parse_ElementType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ESceneElementType_IsValid(value)) {
            set_elementtype(static_cast< ::pb::ESceneElementType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_LocalRotation;
        break;
      }

      // optional .pb.PbQuaternion LocalRotation = 7;
      case 7: {
        if (tag == 58) {
         parse_LocalRotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localrotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Camera3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Camera3)
  return false;
#undef DO_
}

void Camera3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Camera3)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required float Fov = 2;
  if (has_fov()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fov(), output);
  }

  // required .pb.PbVector3_Int Position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  // required .pb.PbVector3_Int Direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->direction(), output);
  }

  // required string FollowTargetName = 5;
  if (has_followtargetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->followtargetname().data(), this->followtargetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "followtargetname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->followtargetname(), output);
  }

  // optional .pb.ESceneElementType ElementType = 6;
  if (has_elementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->elementtype(), output);
  }

  // optional .pb.PbQuaternion LocalRotation = 7;
  if (has_localrotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->localrotation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Camera3)
}

::google::protobuf::uint8* Camera3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Camera3)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required float Fov = 2;
  if (has_fov()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fov(), target);
  }

  // required .pb.PbVector3_Int Position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  // required .pb.PbVector3_Int Direction = 4;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->direction(), target);
  }

  // required string FollowTargetName = 5;
  if (has_followtargetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->followtargetname().data(), this->followtargetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "followtargetname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->followtargetname(), target);
  }

  // optional .pb.ESceneElementType ElementType = 6;
  if (has_elementtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->elementtype(), target);
  }

  // optional .pb.PbQuaternion LocalRotation = 7;
  if (has_localrotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->localrotation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Camera3)
  return target;
}

int Camera3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required float Fov = 2;
    if (has_fov()) {
      total_size += 1 + 4;
    }

    // required .pb.PbVector3_Int Position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required .pb.PbVector3_Int Direction = 4;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // required string FollowTargetName = 5;
    if (has_followtargetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->followtargetname());
    }

    // optional .pb.ESceneElementType ElementType = 6;
    if (has_elementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->elementtype());
    }

    // optional .pb.PbQuaternion LocalRotation = 7;
    if (has_localrotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->localrotation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camera3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Camera3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Camera3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Camera3::MergeFrom(const Camera3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fov()) {
      set_fov(from.fov());
    }
    if (from.has_position()) {
      mutable_position()->::pb::PbVector3_Int::MergeFrom(from.position());
    }
    if (from.has_direction()) {
      mutable_direction()->::pb::PbVector3_Int::MergeFrom(from.direction());
    }
    if (from.has_followtargetname()) {
      set_followtargetname(from.followtargetname());
    }
    if (from.has_elementtype()) {
      set_elementtype(from.elementtype());
    }
    if (from.has_localrotation()) {
      mutable_localrotation()->::pb::PbQuaternion::MergeFrom(from.localrotation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Camera3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camera3::CopyFrom(const Camera3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera3::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_localrotation()) {
    if (!this->localrotation().IsInitialized()) return false;
  }
  return true;
}

void Camera3::Swap(Camera3* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(fov_, other->fov_);
    std::swap(position_, other->position_);
    std::swap(direction_, other->direction_);
    std::swap(followtargetname_, other->followtargetname_);
    std::swap(elementtype_, other->elementtype_);
    std::swap(localrotation_, other->localrotation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Camera3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Camera3_descriptor_;
  metadata.reflection = Camera3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CustomArea3::kElementTypeFieldNumber;
const int CustomArea3::kNameFieldNumber;
const int CustomArea3::kPointArrFieldNumber;
const int CustomArea3::kVisibleFieldNumber;
const int CustomArea3::kIndexFieldNumber;
#endif  // !_MSC_VER

CustomArea3::CustomArea3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CustomArea3)
}

void CustomArea3::InitAsDefaultInstance() {
}

CustomArea3::CustomArea3(const CustomArea3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.CustomArea3)
}

void CustomArea3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  elementtype_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visible_ = false;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CustomArea3::~CustomArea3() {
  // @@protoc_insertion_point(destructor:pb.CustomArea3)
  SharedDtor();
}

void CustomArea3::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CustomArea3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomArea3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CustomArea3_descriptor_;
}

const CustomArea3& CustomArea3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

CustomArea3* CustomArea3::default_instance_ = NULL;

CustomArea3* CustomArea3::New() const {
  return new CustomArea3;
}

void CustomArea3::Clear() {
  if (_has_bits_[0 / 32] & 27) {
    elementtype_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    visible_ = false;
    index_ = 0;
  }
  pointarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CustomArea3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CustomArea3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.ESceneElementType ElementType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ESceneElementType_IsValid(value)) {
            set_elementtype(static_cast< ::pb::ESceneElementType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PointArr;
        break;
      }

      // repeated .pb.PbVector3_Int PointArr = 3;
      case 3: {
        if (tag == 26) {
         parse_PointArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PointArr;
        if (input->ExpectTag(32)) goto parse_Visible;
        break;
      }

      // required bool Visible = 4;
      case 4: {
        if (tag == 32) {
         parse_Visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Index;
        break;
      }

      // optional int32 Index = 5;
      case 5: {
        if (tag == 40) {
         parse_Index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CustomArea3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CustomArea3)
  return false;
#undef DO_
}

void CustomArea3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CustomArea3)
  // required .pb.ESceneElementType ElementType = 1;
  if (has_elementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->elementtype(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .pb.PbVector3_Int PointArr = 3;
  for (int i = 0; i < this->pointarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pointarr(i), output);
  }

  // required bool Visible = 4;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->visible(), output);
  }

  // optional int32 Index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CustomArea3)
}

::google::protobuf::uint8* CustomArea3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CustomArea3)
  // required .pb.ESceneElementType ElementType = 1;
  if (has_elementtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->elementtype(), target);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .pb.PbVector3_Int PointArr = 3;
  for (int i = 0; i < this->pointarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pointarr(i), target);
  }

  // required bool Visible = 4;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->visible(), target);
  }

  // optional int32 Index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CustomArea3)
  return target;
}

int CustomArea3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.ESceneElementType ElementType = 1;
    if (has_elementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->elementtype());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required bool Visible = 4;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional int32 Index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  // repeated .pb.PbVector3_Int PointArr = 3;
  total_size += 1 * this->pointarr_size();
  for (int i = 0; i < this->pointarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomArea3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CustomArea3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CustomArea3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CustomArea3::MergeFrom(const CustomArea3& from) {
  GOOGLE_CHECK_NE(&from, this);
  pointarr_.MergeFrom(from.pointarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elementtype()) {
      set_elementtype(from.elementtype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CustomArea3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomArea3::CopyFrom(const CustomArea3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomArea3::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void CustomArea3::Swap(CustomArea3* other) {
  if (other != this) {
    std::swap(elementtype_, other->elementtype_);
    std::swap(name_, other->name_);
    pointarr_.Swap(&other->pointarr_);
    std::swap(visible_, other->visible_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CustomArea3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CustomArea3_descriptor_;
  metadata.reflection = CustomArea3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockLineFastFilter::kStripWidthFieldNumber;
const int BlockLineFastFilter::kColStripsFieldNumber;
const int BlockLineFastFilter::kRowStripsFieldNumber;
#endif  // !_MSC_VER

BlockLineFastFilter::BlockLineFastFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BlockLineFastFilter)
}

void BlockLineFastFilter::InitAsDefaultInstance() {
}

BlockLineFastFilter::BlockLineFastFilter(const BlockLineFastFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BlockLineFastFilter)
}

void BlockLineFastFilter::SharedCtor() {
  _cached_size_ = 0;
  stripwidth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockLineFastFilter::~BlockLineFastFilter() {
  // @@protoc_insertion_point(destructor:pb.BlockLineFastFilter)
  SharedDtor();
}

void BlockLineFastFilter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockLineFastFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockLineFastFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockLineFastFilter_descriptor_;
}

const BlockLineFastFilter& BlockLineFastFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

BlockLineFastFilter* BlockLineFastFilter::default_instance_ = NULL;

BlockLineFastFilter* BlockLineFastFilter::New() const {
  return new BlockLineFastFilter;
}

void BlockLineFastFilter::Clear() {
  stripwidth_ = 0;
  colstrips_.Clear();
  rowstrips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockLineFastFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BlockLineFastFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 StripWidth = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stripwidth_)));
          set_has_stripwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ColStrips;
        break;
      }

      // repeated .pb.StripInfo ColStrips = 2;
      case 2: {
        if (tag == 18) {
         parse_ColStrips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_colstrips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ColStrips;
        if (input->ExpectTag(26)) goto parse_RowStrips;
        break;
      }

      // repeated .pb.StripInfo RowStrips = 3;
      case 3: {
        if (tag == 26) {
         parse_RowStrips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rowstrips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RowStrips;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BlockLineFastFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BlockLineFastFilter)
  return false;
#undef DO_
}

void BlockLineFastFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BlockLineFastFilter)
  // optional int32 StripWidth = 1;
  if (has_stripwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stripwidth(), output);
  }

  // repeated .pb.StripInfo ColStrips = 2;
  for (int i = 0; i < this->colstrips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->colstrips(i), output);
  }

  // repeated .pb.StripInfo RowStrips = 3;
  for (int i = 0; i < this->rowstrips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rowstrips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BlockLineFastFilter)
}

::google::protobuf::uint8* BlockLineFastFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BlockLineFastFilter)
  // optional int32 StripWidth = 1;
  if (has_stripwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stripwidth(), target);
  }

  // repeated .pb.StripInfo ColStrips = 2;
  for (int i = 0; i < this->colstrips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->colstrips(i), target);
  }

  // repeated .pb.StripInfo RowStrips = 3;
  for (int i = 0; i < this->rowstrips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rowstrips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BlockLineFastFilter)
  return target;
}

int BlockLineFastFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 StripWidth = 1;
    if (has_stripwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stripwidth());
    }

  }
  // repeated .pb.StripInfo ColStrips = 2;
  total_size += 1 * this->colstrips_size();
  for (int i = 0; i < this->colstrips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->colstrips(i));
  }

  // repeated .pb.StripInfo RowStrips = 3;
  total_size += 1 * this->rowstrips_size();
  for (int i = 0; i < this->rowstrips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rowstrips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockLineFastFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockLineFastFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockLineFastFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockLineFastFilter::MergeFrom(const BlockLineFastFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  colstrips_.MergeFrom(from.colstrips_);
  rowstrips_.MergeFrom(from.rowstrips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stripwidth()) {
      set_stripwidth(from.stripwidth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockLineFastFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockLineFastFilter::CopyFrom(const BlockLineFastFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockLineFastFilter::IsInitialized() const {

  return true;
}

void BlockLineFastFilter::Swap(BlockLineFastFilter* other) {
  if (other != this) {
    std::swap(stripwidth_, other->stripwidth_);
    colstrips_.Swap(&other->colstrips_);
    rowstrips_.Swap(&other->rowstrips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockLineFastFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockLineFastFilter_descriptor_;
  metadata.reflection = BlockLineFastFilter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDSpawnMapping::kPlatIndexFieldNumber;
const int TDSpawnMapping::kMeleeIndexFieldNumber;
const int TDSpawnMapping::kPlatWidthFieldNumber;
#endif  // !_MSC_VER

TDSpawnMapping::TDSpawnMapping()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDSpawnMapping)
}

void TDSpawnMapping::InitAsDefaultInstance() {
}

TDSpawnMapping::TDSpawnMapping(const TDSpawnMapping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDSpawnMapping)
}

void TDSpawnMapping::SharedCtor() {
  _cached_size_ = 0;
  platindex_ = 0;
  meleeindex_ = 0;
  platwidth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDSpawnMapping::~TDSpawnMapping() {
  // @@protoc_insertion_point(destructor:pb.TDSpawnMapping)
  SharedDtor();
}

void TDSpawnMapping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDSpawnMapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDSpawnMapping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDSpawnMapping_descriptor_;
}

const TDSpawnMapping& TDSpawnMapping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

TDSpawnMapping* TDSpawnMapping::default_instance_ = NULL;

TDSpawnMapping* TDSpawnMapping::New() const {
  return new TDSpawnMapping;
}

void TDSpawnMapping::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TDSpawnMapping*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(platindex_, platwidth_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDSpawnMapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDSpawnMapping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PlatIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platindex_)));
          set_has_platindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MeleeIndex;
        break;
      }

      // optional int32 MeleeIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_MeleeIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meleeindex_)));
          set_has_meleeindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PlatWidth;
        break;
      }

      // optional int32 PlatWidth = 3;
      case 3: {
        if (tag == 24) {
         parse_PlatWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platwidth_)));
          set_has_platwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDSpawnMapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDSpawnMapping)
  return false;
#undef DO_
}

void TDSpawnMapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDSpawnMapping)
  // optional int32 PlatIndex = 1;
  if (has_platindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->platindex(), output);
  }

  // optional int32 MeleeIndex = 2;
  if (has_meleeindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->meleeindex(), output);
  }

  // optional int32 PlatWidth = 3;
  if (has_platwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->platwidth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDSpawnMapping)
}

::google::protobuf::uint8* TDSpawnMapping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDSpawnMapping)
  // optional int32 PlatIndex = 1;
  if (has_platindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->platindex(), target);
  }

  // optional int32 MeleeIndex = 2;
  if (has_meleeindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->meleeindex(), target);
  }

  // optional int32 PlatWidth = 3;
  if (has_platwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->platwidth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDSpawnMapping)
  return target;
}

int TDSpawnMapping::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PlatIndex = 1;
    if (has_platindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platindex());
    }

    // optional int32 MeleeIndex = 2;
    if (has_meleeindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->meleeindex());
    }

    // optional int32 PlatWidth = 3;
    if (has_platwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platwidth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDSpawnMapping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDSpawnMapping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDSpawnMapping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDSpawnMapping::MergeFrom(const TDSpawnMapping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platindex()) {
      set_platindex(from.platindex());
    }
    if (from.has_meleeindex()) {
      set_meleeindex(from.meleeindex());
    }
    if (from.has_platwidth()) {
      set_platwidth(from.platwidth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDSpawnMapping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDSpawnMapping::CopyFrom(const TDSpawnMapping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDSpawnMapping::IsInitialized() const {

  return true;
}

void TDSpawnMapping::Swap(TDSpawnMapping* other) {
  if (other != this) {
    std::swap(platindex_, other->platindex_);
    std::swap(meleeindex_, other->meleeindex_);
    std::swap(platwidth_, other->platwidth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDSpawnMapping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDSpawnMapping_descriptor_;
  metadata.reflection = TDSpawnMapping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StripInfo::kIndexFieldNumber;
const int StripInfo::kBlockLineArrFieldNumber;
#endif  // !_MSC_VER

StripInfo::StripInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.StripInfo)
}

void StripInfo::InitAsDefaultInstance() {
}

StripInfo::StripInfo(const StripInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.StripInfo)
}

void StripInfo::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StripInfo::~StripInfo() {
  // @@protoc_insertion_point(destructor:pb.StripInfo)
  SharedDtor();
}

void StripInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StripInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StripInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StripInfo_descriptor_;
}

const StripInfo& StripInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

StripInfo* StripInfo::default_instance_ = NULL;

StripInfo* StripInfo::New() const {
  return new StripInfo;
}

void StripInfo::Clear() {
  index_ = 0;
  blocklinearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StripInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.StripInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BlockLineArr;
        break;
      }

      // repeated int32 BlockLineArr = 2;
      case 2: {
        if (tag == 16) {
         parse_BlockLineArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_blocklinearr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_blocklinearr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BlockLineArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.StripInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.StripInfo)
  return false;
#undef DO_
}

void StripInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.StripInfo)
  // optional int32 Index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // repeated int32 BlockLineArr = 2;
  for (int i = 0; i < this->blocklinearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->blocklinearr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.StripInfo)
}

::google::protobuf::uint8* StripInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.StripInfo)
  // optional int32 Index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // repeated int32 BlockLineArr = 2;
  for (int i = 0; i < this->blocklinearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->blocklinearr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.StripInfo)
  return target;
}

int StripInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  // repeated int32 BlockLineArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->blocklinearr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->blocklinearr(i));
    }
    total_size += 1 * this->blocklinearr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StripInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StripInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StripInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StripInfo::MergeFrom(const StripInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  blocklinearr_.MergeFrom(from.blocklinearr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StripInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripInfo::CopyFrom(const StripInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripInfo::IsInitialized() const {

  return true;
}

void StripInfo::Swap(StripInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    blocklinearr_.Swap(&other->blocklinearr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StripInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StripInfo_descriptor_;
  metadata.reflection = StripInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnimAsset3::kNameFieldNumber;
const int AnimAsset3::kPositionFieldNumber;
const int AnimAsset3::kDirectionFieldNumber;
const int AnimAsset3::kScaleFieldNumber;
const int AnimAsset3::kAssetPathFieldNumber;
const int AnimAsset3::kDefaultAnimFieldNumber;
const int AnimAsset3::kVisibleFieldNumber;
#endif  // !_MSC_VER

AnimAsset3::AnimAsset3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AnimAsset3)
}

void AnimAsset3::InitAsDefaultInstance() {
  position_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
  direction_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
  scale_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
}

AnimAsset3::AnimAsset3(const AnimAsset3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AnimAsset3)
}

void AnimAsset3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = NULL;
  direction_ = NULL;
  scale_ = NULL;
  assetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defaultanim_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visible_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnimAsset3::~AnimAsset3() {
  // @@protoc_insertion_point(destructor:pb.AnimAsset3)
  SharedDtor();
}

void AnimAsset3::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete assetpath_;
  }
  if (defaultanim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete defaultanim_;
  }
  if (this != default_instance_) {
    delete position_;
    delete direction_;
    delete scale_;
  }
}

void AnimAsset3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnimAsset3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnimAsset3_descriptor_;
}

const AnimAsset3& AnimAsset3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

AnimAsset3* AnimAsset3::default_instance_ = NULL;

AnimAsset3* AnimAsset3::New() const {
  return new AnimAsset3;
}

void AnimAsset3::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::pb::PbVector3_Int::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::pb::PbVector3_Int::Clear();
    }
    if (has_scale()) {
      if (scale_ != NULL) scale_->::pb::PbVector3_Int::Clear();
    }
    if (has_assetpath()) {
      if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        assetpath_->clear();
      }
    }
    if (has_defaultanim()) {
      if (defaultanim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        defaultanim_->clear();
      }
    }
    visible_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnimAsset3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AnimAsset3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Position;
        break;
      }

      // required .pb.PbVector3_Int Position = 2;
      case 2: {
        if (tag == 18) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Direction;
        break;
      }

      // required .pb.PbVector3_Int Direction = 3;
      case 3: {
        if (tag == 26) {
         parse_Direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Scale;
        break;
      }

      // required .pb.PbVector3_Int Scale = 4;
      case 4: {
        if (tag == 34) {
         parse_Scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_AssetPath;
        break;
      }

      // required string AssetPath = 5;
      case 5: {
        if (tag == 42) {
         parse_AssetPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assetpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->assetpath().data(), this->assetpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "assetpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_DefaultAnim;
        break;
      }

      // optional string DefaultAnim = 6;
      case 6: {
        if (tag == 50) {
         parse_DefaultAnim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defaultanim()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->defaultanim().data(), this->defaultanim().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "defaultanim");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Visible;
        break;
      }

      // required bool Visible = 7;
      case 7: {
        if (tag == 56) {
         parse_Visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AnimAsset3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AnimAsset3)
  return false;
#undef DO_
}

void AnimAsset3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AnimAsset3)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .pb.PbVector3_Int Position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  // required .pb.PbVector3_Int Direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->direction(), output);
  }

  // required .pb.PbVector3_Int Scale = 4;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->scale(), output);
  }

  // required string AssetPath = 5;
  if (has_assetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetpath().data(), this->assetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->assetpath(), output);
  }

  // optional string DefaultAnim = 6;
  if (has_defaultanim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defaultanim().data(), this->defaultanim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defaultanim");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->defaultanim(), output);
  }

  // required bool Visible = 7;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->visible(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AnimAsset3)
}

::google::protobuf::uint8* AnimAsset3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AnimAsset3)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .pb.PbVector3_Int Position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  // required .pb.PbVector3_Int Direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->direction(), target);
  }

  // required .pb.PbVector3_Int Scale = 4;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->scale(), target);
  }

  // required string AssetPath = 5;
  if (has_assetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetpath().data(), this->assetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->assetpath(), target);
  }

  // optional string DefaultAnim = 6;
  if (has_defaultanim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defaultanim().data(), this->defaultanim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defaultanim");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->defaultanim(), target);
  }

  // required bool Visible = 7;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->visible(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AnimAsset3)
  return target;
}

int AnimAsset3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .pb.PbVector3_Int Position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required .pb.PbVector3_Int Direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // required .pb.PbVector3_Int Scale = 4;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

    // required string AssetPath = 5;
    if (has_assetpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assetpath());
    }

    // optional string DefaultAnim = 6;
    if (has_defaultanim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defaultanim());
    }

    // required bool Visible = 7;
    if (has_visible()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnimAsset3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnimAsset3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnimAsset3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnimAsset3::MergeFrom(const AnimAsset3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_position()) {
      mutable_position()->::pb::PbVector3_Int::MergeFrom(from.position());
    }
    if (from.has_direction()) {
      mutable_direction()->::pb::PbVector3_Int::MergeFrom(from.direction());
    }
    if (from.has_scale()) {
      mutable_scale()->::pb::PbVector3_Int::MergeFrom(from.scale());
    }
    if (from.has_assetpath()) {
      set_assetpath(from.assetpath());
    }
    if (from.has_defaultanim()) {
      set_defaultanim(from.defaultanim());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnimAsset3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimAsset3::CopyFrom(const AnimAsset3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimAsset3::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  return true;
}

void AnimAsset3::Swap(AnimAsset3* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(position_, other->position_);
    std::swap(direction_, other->direction_);
    std::swap(scale_, other->scale_);
    std::swap(assetpath_, other->assetpath_);
    std::swap(defaultanim_, other->defaultanim_);
    std::swap(visible_, other->visible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnimAsset3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnimAsset3_descriptor_;
  metadata.reflection = AnimAsset3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StaticAsset3::kNameFieldNumber;
const int StaticAsset3::kPositionFieldNumber;
const int StaticAsset3::kDirectionFieldNumber;
const int StaticAsset3::kScaleFieldNumber;
const int StaticAsset3::kAssetPathFieldNumber;
const int StaticAsset3::kVisibleFieldNumber;
#endif  // !_MSC_VER

StaticAsset3::StaticAsset3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.StaticAsset3)
}

void StaticAsset3::InitAsDefaultInstance() {
  position_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
  direction_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
  scale_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
}

StaticAsset3::StaticAsset3(const StaticAsset3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.StaticAsset3)
}

void StaticAsset3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = NULL;
  direction_ = NULL;
  scale_ = NULL;
  assetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visible_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StaticAsset3::~StaticAsset3() {
  // @@protoc_insertion_point(destructor:pb.StaticAsset3)
  SharedDtor();
}

void StaticAsset3::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete assetpath_;
  }
  if (this != default_instance_) {
    delete position_;
    delete direction_;
    delete scale_;
  }
}

void StaticAsset3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaticAsset3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StaticAsset3_descriptor_;
}

const StaticAsset3& StaticAsset3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

StaticAsset3* StaticAsset3::default_instance_ = NULL;

StaticAsset3* StaticAsset3::New() const {
  return new StaticAsset3;
}

void StaticAsset3::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::pb::PbVector3_Int::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::pb::PbVector3_Int::Clear();
    }
    if (has_scale()) {
      if (scale_ != NULL) scale_->::pb::PbVector3_Int::Clear();
    }
    if (has_assetpath()) {
      if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        assetpath_->clear();
      }
    }
    visible_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StaticAsset3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.StaticAsset3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Position;
        break;
      }

      // required .pb.PbVector3_Int Position = 2;
      case 2: {
        if (tag == 18) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Direction;
        break;
      }

      // required .pb.PbVector3_Int Direction = 3;
      case 3: {
        if (tag == 26) {
         parse_Direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Scale;
        break;
      }

      // required .pb.PbVector3_Int Scale = 4;
      case 4: {
        if (tag == 34) {
         parse_Scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_AssetPath;
        break;
      }

      // required string AssetPath = 5;
      case 5: {
        if (tag == 42) {
         parse_AssetPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assetpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->assetpath().data(), this->assetpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "assetpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Visible;
        break;
      }

      // required bool Visible = 6;
      case 6: {
        if (tag == 48) {
         parse_Visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.StaticAsset3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.StaticAsset3)
  return false;
#undef DO_
}

void StaticAsset3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.StaticAsset3)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .pb.PbVector3_Int Position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  // required .pb.PbVector3_Int Direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->direction(), output);
  }

  // required .pb.PbVector3_Int Scale = 4;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->scale(), output);
  }

  // required string AssetPath = 5;
  if (has_assetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetpath().data(), this->assetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->assetpath(), output);
  }

  // required bool Visible = 6;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->visible(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.StaticAsset3)
}

::google::protobuf::uint8* StaticAsset3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.StaticAsset3)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .pb.PbVector3_Int Position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  // required .pb.PbVector3_Int Direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->direction(), target);
  }

  // required .pb.PbVector3_Int Scale = 4;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->scale(), target);
  }

  // required string AssetPath = 5;
  if (has_assetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetpath().data(), this->assetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->assetpath(), target);
  }

  // required bool Visible = 6;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->visible(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.StaticAsset3)
  return target;
}

int StaticAsset3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .pb.PbVector3_Int Position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required .pb.PbVector3_Int Direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // required .pb.PbVector3_Int Scale = 4;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

    // required string AssetPath = 5;
    if (has_assetpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assetpath());
    }

    // required bool Visible = 6;
    if (has_visible()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaticAsset3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StaticAsset3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StaticAsset3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StaticAsset3::MergeFrom(const StaticAsset3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_position()) {
      mutable_position()->::pb::PbVector3_Int::MergeFrom(from.position());
    }
    if (from.has_direction()) {
      mutable_direction()->::pb::PbVector3_Int::MergeFrom(from.direction());
    }
    if (from.has_scale()) {
      mutable_scale()->::pb::PbVector3_Int::MergeFrom(from.scale());
    }
    if (from.has_assetpath()) {
      set_assetpath(from.assetpath());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StaticAsset3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticAsset3::CopyFrom(const StaticAsset3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticAsset3::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void StaticAsset3::Swap(StaticAsset3* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(position_, other->position_);
    std::swap(direction_, other->direction_);
    std::swap(scale_, other->scale_);
    std::swap(assetpath_, other->assetpath_);
    std::swap(visible_, other->visible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StaticAsset3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StaticAsset3_descriptor_;
  metadata.reflection = StaticAsset3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EffectAsset3::kNameFieldNumber;
const int EffectAsset3::kPositionFieldNumber;
const int EffectAsset3::kAssetPathFieldNumber;
const int EffectAsset3::kVisibleFieldNumber;
const int EffectAsset3::kDirectionFieldNumber;
const int EffectAsset3::kScaleFieldNumber;
#endif  // !_MSC_VER

EffectAsset3::EffectAsset3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.EffectAsset3)
}

void EffectAsset3::InitAsDefaultInstance() {
  position_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
  direction_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
  scale_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
}

EffectAsset3::EffectAsset3(const EffectAsset3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.EffectAsset3)
}

void EffectAsset3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = NULL;
  assetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visible_ = false;
  direction_ = NULL;
  scale_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EffectAsset3::~EffectAsset3() {
  // @@protoc_insertion_point(destructor:pb.EffectAsset3)
  SharedDtor();
}

void EffectAsset3::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete assetpath_;
  }
  if (this != default_instance_) {
    delete position_;
    delete direction_;
    delete scale_;
  }
}

void EffectAsset3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EffectAsset3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EffectAsset3_descriptor_;
}

const EffectAsset3& EffectAsset3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

EffectAsset3* EffectAsset3::default_instance_ = NULL;

EffectAsset3* EffectAsset3::New() const {
  return new EffectAsset3;
}

void EffectAsset3::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::pb::PbVector3_Int::Clear();
    }
    if (has_assetpath()) {
      if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        assetpath_->clear();
      }
    }
    visible_ = false;
    if (has_direction()) {
      if (direction_ != NULL) direction_->::pb::PbVector3_Int::Clear();
    }
    if (has_scale()) {
      if (scale_ != NULL) scale_->::pb::PbVector3_Int::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EffectAsset3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.EffectAsset3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Position;
        break;
      }

      // required .pb.PbVector3_Int Position = 2;
      case 2: {
        if (tag == 18) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AssetPath;
        break;
      }

      // required string AssetPath = 3;
      case 3: {
        if (tag == 26) {
         parse_AssetPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assetpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->assetpath().data(), this->assetpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "assetpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Visible;
        break;
      }

      // required bool Visible = 4;
      case 4: {
        if (tag == 32) {
         parse_Visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Direction;
        break;
      }

      // optional .pb.PbVector3_Int Direction = 5;
      case 5: {
        if (tag == 42) {
         parse_Direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Scale;
        break;
      }

      // optional .pb.PbVector3_Int Scale = 6;
      case 6: {
        if (tag == 50) {
         parse_Scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.EffectAsset3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.EffectAsset3)
  return false;
#undef DO_
}

void EffectAsset3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.EffectAsset3)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .pb.PbVector3_Int Position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  // required string AssetPath = 3;
  if (has_assetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetpath().data(), this->assetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->assetpath(), output);
  }

  // required bool Visible = 4;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->visible(), output);
  }

  // optional .pb.PbVector3_Int Direction = 5;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->direction(), output);
  }

  // optional .pb.PbVector3_Int Scale = 6;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->scale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.EffectAsset3)
}

::google::protobuf::uint8* EffectAsset3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.EffectAsset3)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .pb.PbVector3_Int Position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  // required string AssetPath = 3;
  if (has_assetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->assetpath().data(), this->assetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "assetpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->assetpath(), target);
  }

  // required bool Visible = 4;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->visible(), target);
  }

  // optional .pb.PbVector3_Int Direction = 5;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->direction(), target);
  }

  // optional .pb.PbVector3_Int Scale = 6;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->scale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.EffectAsset3)
  return target;
}

int EffectAsset3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .pb.PbVector3_Int Position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required string AssetPath = 3;
    if (has_assetpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assetpath());
    }

    // required bool Visible = 4;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional .pb.PbVector3_Int Direction = 5;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // optional .pb.PbVector3_Int Scale = 6;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectAsset3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EffectAsset3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EffectAsset3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EffectAsset3::MergeFrom(const EffectAsset3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_position()) {
      mutable_position()->::pb::PbVector3_Int::MergeFrom(from.position());
    }
    if (from.has_assetpath()) {
      set_assetpath(from.assetpath());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_direction()) {
      mutable_direction()->::pb::PbVector3_Int::MergeFrom(from.direction());
    }
    if (from.has_scale()) {
      mutable_scale()->::pb::PbVector3_Int::MergeFrom(from.scale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EffectAsset3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectAsset3::CopyFrom(const EffectAsset3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectAsset3::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void EffectAsset3::Swap(EffectAsset3* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(position_, other->position_);
    std::swap(assetpath_, other->assetpath_);
    std::swap(visible_, other->visible_);
    std::swap(direction_, other->direction_);
    std::swap(scale_, other->scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EffectAsset3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EffectAsset3_descriptor_;
  metadata.reflection = EffectAsset3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeapTrackPoint::kPositionFieldNumber;
const int LeapTrackPoint::kToNextTrackPointTimeFieldNumber;
#endif  // !_MSC_VER

LeapTrackPoint::LeapTrackPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.LeapTrackPoint)
}

void LeapTrackPoint::InitAsDefaultInstance() {
  position_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
}

LeapTrackPoint::LeapTrackPoint(const LeapTrackPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.LeapTrackPoint)
}

void LeapTrackPoint::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  tonexttrackpointtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeapTrackPoint::~LeapTrackPoint() {
  // @@protoc_insertion_point(destructor:pb.LeapTrackPoint)
  SharedDtor();
}

void LeapTrackPoint::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void LeapTrackPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeapTrackPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeapTrackPoint_descriptor_;
}

const LeapTrackPoint& LeapTrackPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

LeapTrackPoint* LeapTrackPoint::default_instance_ = NULL;

LeapTrackPoint* LeapTrackPoint::New() const {
  return new LeapTrackPoint;
}

void LeapTrackPoint::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_position()) {
      if (position_ != NULL) position_->::pb::PbVector3_Int::Clear();
    }
    tonexttrackpointtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeapTrackPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.LeapTrackPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.PbVector3_Int Position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_ToNextTrackPointTime;
        break;
      }

      // optional float ToNextTrackPointTime = 2;
      case 2: {
        if (tag == 21) {
         parse_ToNextTrackPointTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tonexttrackpointtime_)));
          set_has_tonexttrackpointtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.LeapTrackPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.LeapTrackPoint)
  return false;
#undef DO_
}

void LeapTrackPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.LeapTrackPoint)
  // optional .pb.PbVector3_Int Position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  // optional float ToNextTrackPointTime = 2;
  if (has_tonexttrackpointtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->tonexttrackpointtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.LeapTrackPoint)
}

::google::protobuf::uint8* LeapTrackPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LeapTrackPoint)
  // optional .pb.PbVector3_Int Position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  // optional float ToNextTrackPointTime = 2;
  if (has_tonexttrackpointtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->tonexttrackpointtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LeapTrackPoint)
  return target;
}

int LeapTrackPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.PbVector3_Int Position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional float ToNextTrackPointTime = 2;
    if (has_tonexttrackpointtime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeapTrackPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeapTrackPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeapTrackPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeapTrackPoint::MergeFrom(const LeapTrackPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::pb::PbVector3_Int::MergeFrom(from.position());
    }
    if (from.has_tonexttrackpointtime()) {
      set_tonexttrackpointtime(from.tonexttrackpointtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeapTrackPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeapTrackPoint::CopyFrom(const LeapTrackPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeapTrackPoint::IsInitialized() const {

  return true;
}

void LeapTrackPoint::Swap(LeapTrackPoint* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(tonexttrackpointtime_, other->tonexttrackpointtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeapTrackPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeapTrackPoint_descriptor_;
  metadata.reflection = LeapTrackPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeapTrack::kNameFieldNumber;
const int LeapTrack::kPointArrFieldNumber;
const int LeapTrack::kDropTimeFieldNumber;
#endif  // !_MSC_VER

LeapTrack::LeapTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.LeapTrack)
}

void LeapTrack::InitAsDefaultInstance() {
}

LeapTrack::LeapTrack(const LeapTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.LeapTrack)
}

void LeapTrack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  droptime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeapTrack::~LeapTrack() {
  // @@protoc_insertion_point(destructor:pb.LeapTrack)
  SharedDtor();
}

void LeapTrack::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void LeapTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeapTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeapTrack_descriptor_;
}

const LeapTrack& LeapTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

LeapTrack* LeapTrack::default_instance_ = NULL;

LeapTrack* LeapTrack::New() const {
  return new LeapTrack;
}

void LeapTrack::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    droptime_ = 0;
  }
  pointarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeapTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.LeapTrack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PointArr;
        break;
      }

      // repeated .pb.LeapTrackPoint PointArr = 2;
      case 2: {
        if (tag == 18) {
         parse_PointArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PointArr;
        if (input->ExpectTag(29)) goto parse_DropTime;
        break;
      }

      // optional float DropTime = 3;
      case 3: {
        if (tag == 29) {
         parse_DropTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &droptime_)));
          set_has_droptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.LeapTrack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.LeapTrack)
  return false;
#undef DO_
}

void LeapTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.LeapTrack)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .pb.LeapTrackPoint PointArr = 2;
  for (int i = 0; i < this->pointarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pointarr(i), output);
  }

  // optional float DropTime = 3;
  if (has_droptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->droptime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.LeapTrack)
}

::google::protobuf::uint8* LeapTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LeapTrack)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .pb.LeapTrackPoint PointArr = 2;
  for (int i = 0; i < this->pointarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pointarr(i), target);
  }

  // optional float DropTime = 3;
  if (has_droptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->droptime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LeapTrack)
  return target;
}

int LeapTrack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional float DropTime = 3;
    if (has_droptime()) {
      total_size += 1 + 4;
    }

  }
  // repeated .pb.LeapTrackPoint PointArr = 2;
  total_size += 1 * this->pointarr_size();
  for (int i = 0; i < this->pointarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeapTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeapTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeapTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeapTrack::MergeFrom(const LeapTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  pointarr_.MergeFrom(from.pointarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_droptime()) {
      set_droptime(from.droptime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeapTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeapTrack::CopyFrom(const LeapTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeapTrack::IsInitialized() const {

  return true;
}

void LeapTrack::Swap(LeapTrack* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    pointarr_.Swap(&other->pointarr_);
    std::swap(droptime_, other->droptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeapTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeapTrack_descriptor_;
  metadata.reflection = LeapTrack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurveTrack::kNameFieldNumber;
const int CurveTrack::kPointPositionArrFieldNumber;
#endif  // !_MSC_VER

CurveTrack::CurveTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CurveTrack)
}

void CurveTrack::InitAsDefaultInstance() {
}

CurveTrack::CurveTrack(const CurveTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.CurveTrack)
}

void CurveTrack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurveTrack::~CurveTrack() {
  // @@protoc_insertion_point(destructor:pb.CurveTrack)
  SharedDtor();
}

void CurveTrack::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CurveTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurveTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurveTrack_descriptor_;
}

const CurveTrack& CurveTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

CurveTrack* CurveTrack::default_instance_ = NULL;

CurveTrack* CurveTrack::New() const {
  return new CurveTrack;
}

void CurveTrack::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  pointpositionarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurveTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CurveTrack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PointPositionArr;
        break;
      }

      // repeated .pb.PbVector3_Int PointPositionArr = 2;
      case 2: {
        if (tag == 18) {
         parse_PointPositionArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointpositionarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PointPositionArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CurveTrack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CurveTrack)
  return false;
#undef DO_
}

void CurveTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CurveTrack)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .pb.PbVector3_Int PointPositionArr = 2;
  for (int i = 0; i < this->pointpositionarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pointpositionarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CurveTrack)
}

::google::protobuf::uint8* CurveTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CurveTrack)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .pb.PbVector3_Int PointPositionArr = 2;
  for (int i = 0; i < this->pointpositionarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pointpositionarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CurveTrack)
  return target;
}

int CurveTrack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .pb.PbVector3_Int PointPositionArr = 2;
  total_size += 1 * this->pointpositionarr_size();
  for (int i = 0; i < this->pointpositionarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointpositionarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurveTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurveTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurveTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurveTrack::MergeFrom(const CurveTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  pointpositionarr_.MergeFrom(from.pointpositionarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurveTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurveTrack::CopyFrom(const CurveTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurveTrack::IsInitialized() const {

  return true;
}

void CurveTrack::Swap(CurveTrack* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    pointpositionarr_.Swap(&other->pointpositionarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurveTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurveTrack_descriptor_;
  metadata.reflection = CurveTrack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PathPoint::kPointEventFieldNumber;
const int PathPoint::kPointFieldNumber;
#endif  // !_MSC_VER

PathPoint::PathPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PathPoint)
}

void PathPoint::InitAsDefaultInstance() {
  point_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
}

PathPoint::PathPoint(const PathPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PathPoint)
}

void PathPoint::SharedCtor() {
  _cached_size_ = 0;
  pointevent_ = 0;
  point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathPoint::~PathPoint() {
  // @@protoc_insertion_point(destructor:pb.PathPoint)
  SharedDtor();
}

void PathPoint::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void PathPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathPoint_descriptor_;
}

const PathPoint& PathPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

PathPoint* PathPoint::default_instance_ = NULL;

PathPoint* PathPoint::New() const {
  return new PathPoint;
}

void PathPoint::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    pointevent_ = 0;
    if (has_point()) {
      if (point_ != NULL) point_->::pb::PbVector3_Int::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PathPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PointEvent = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointevent_)));
          set_has_pointevent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Point;
        break;
      }

      // optional .pb.PbVector3_Int Point = 2;
      case 2: {
        if (tag == 18) {
         parse_Point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PathPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PathPoint)
  return false;
#undef DO_
}

void PathPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PathPoint)
  // optional int32 PointEvent = 1;
  if (has_pointevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pointevent(), output);
  }

  // optional .pb.PbVector3_Int Point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PathPoint)
}

::google::protobuf::uint8* PathPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PathPoint)
  // optional int32 PointEvent = 1;
  if (has_pointevent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pointevent(), target);
  }

  // optional .pb.PbVector3_Int Point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PathPoint)
  return target;
}

int PathPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PointEvent = 1;
    if (has_pointevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pointevent());
    }

    // optional .pb.PbVector3_Int Point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathPoint::MergeFrom(const PathPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pointevent()) {
      set_pointevent(from.pointevent());
    }
    if (from.has_point()) {
      mutable_point()->::pb::PbVector3_Int::MergeFrom(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPoint::CopyFrom(const PathPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPoint::IsInitialized() const {

  return true;
}

void PathPoint::Swap(PathPoint* other) {
  if (other != this) {
    std::swap(pointevent_, other->pointevent_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathPoint_descriptor_;
  metadata.reflection = PathPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PathTrack::kNameFieldNumber;
const int PathTrack::kIndexFieldNumber;
const int PathTrack::kPointArrFieldNumber;
#endif  // !_MSC_VER

PathTrack::PathTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PathTrack)
}

void PathTrack::InitAsDefaultInstance() {
}

PathTrack::PathTrack(const PathTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PathTrack)
}

void PathTrack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathTrack::~PathTrack() {
  // @@protoc_insertion_point(destructor:pb.PathTrack)
  SharedDtor();
}

void PathTrack::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PathTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathTrack_descriptor_;
}

const PathTrack& PathTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

PathTrack* PathTrack::default_instance_ = NULL;

PathTrack* PathTrack::New() const {
  return new PathTrack;
}

void PathTrack::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    index_ = 0;
  }
  pointarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PathTrack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Index;
        break;
      }

      // optional int32 Index = 2;
      case 2: {
        if (tag == 16) {
         parse_Index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PointArr;
        break;
      }

      // repeated .pb.PathPoint PointArr = 3;
      case 3: {
        if (tag == 26) {
         parse_PointArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PointArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PathTrack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PathTrack)
  return false;
#undef DO_
}

void PathTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PathTrack)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 Index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // repeated .pb.PathPoint PointArr = 3;
  for (int i = 0; i < this->pointarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pointarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PathTrack)
}

::google::protobuf::uint8* PathTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PathTrack)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 Index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // repeated .pb.PathPoint PointArr = 3;
  for (int i = 0; i < this->pointarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pointarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PathTrack)
  return target;
}

int PathTrack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 Index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  // repeated .pb.PathPoint PointArr = 3;
  total_size += 1 * this->pointarr_size();
  for (int i = 0; i < this->pointarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathTrack::MergeFrom(const PathTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  pointarr_.MergeFrom(from.pointarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathTrack::CopyFrom(const PathTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathTrack::IsInitialized() const {

  return true;
}

void PathTrack::Swap(PathTrack* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(index_, other->index_);
    pointarr_.Swap(&other->pointarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathTrack_descriptor_;
  metadata.reflection = PathTrack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraTrackPoint::kPositionFieldNumber;
const int CameraTrackPoint::kRotationFieldNumber;
const int CameraTrackPoint::kStartTimeFieldNumber;
#endif  // !_MSC_VER

CameraTrackPoint::CameraTrackPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CameraTrackPoint)
}

void CameraTrackPoint::InitAsDefaultInstance() {
  position_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
  rotation_ = const_cast< ::pb::PbQuaternion*>(&::pb::PbQuaternion::default_instance());
}

CameraTrackPoint::CameraTrackPoint(const CameraTrackPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.CameraTrackPoint)
}

void CameraTrackPoint::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  rotation_ = NULL;
  starttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraTrackPoint::~CameraTrackPoint() {
  // @@protoc_insertion_point(destructor:pb.CameraTrackPoint)
  SharedDtor();
}

void CameraTrackPoint::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete rotation_;
  }
}

void CameraTrackPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraTrackPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraTrackPoint_descriptor_;
}

const CameraTrackPoint& CameraTrackPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

CameraTrackPoint* CameraTrackPoint::default_instance_ = NULL;

CameraTrackPoint* CameraTrackPoint::New() const {
  return new CameraTrackPoint;
}

void CameraTrackPoint::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_position()) {
      if (position_ != NULL) position_->::pb::PbVector3_Int::Clear();
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::pb::PbQuaternion::Clear();
    }
    starttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraTrackPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CameraTrackPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.PbVector3_Int Position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Rotation;
        break;
      }

      // optional .pb.PbQuaternion Rotation = 2;
      case 2: {
        if (tag == 18) {
         parse_Rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_StartTime;
        break;
      }

      // optional float StartTime = 3;
      case 3: {
        if (tag == 29) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CameraTrackPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CameraTrackPoint)
  return false;
#undef DO_
}

void CameraTrackPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CameraTrackPoint)
  // optional .pb.PbVector3_Int Position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  // optional .pb.PbQuaternion Rotation = 2;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rotation(), output);
  }

  // optional float StartTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->starttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CameraTrackPoint)
}

::google::protobuf::uint8* CameraTrackPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CameraTrackPoint)
  // optional .pb.PbVector3_Int Position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  // optional .pb.PbQuaternion Rotation = 2;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rotation(), target);
  }

  // optional float StartTime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->starttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CameraTrackPoint)
  return target;
}

int CameraTrackPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.PbVector3_Int Position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .pb.PbQuaternion Rotation = 2;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }

    // optional float StartTime = 3;
    if (has_starttime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraTrackPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraTrackPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraTrackPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraTrackPoint::MergeFrom(const CameraTrackPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::pb::PbVector3_Int::MergeFrom(from.position());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::pb::PbQuaternion::MergeFrom(from.rotation());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraTrackPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraTrackPoint::CopyFrom(const CameraTrackPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraTrackPoint::IsInitialized() const {

  if (has_rotation()) {
    if (!this->rotation().IsInitialized()) return false;
  }
  return true;
}

void CameraTrackPoint::Swap(CameraTrackPoint* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(rotation_, other->rotation_);
    std::swap(starttime_, other->starttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraTrackPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraTrackPoint_descriptor_;
  metadata.reflection = CameraTrackPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraTrack::kNameFieldNumber;
const int CameraTrack::kAnimResPathFieldNumber;
const int CameraTrack::kPointArrFieldNumber;
const int CameraTrack::kLengthFieldNumber;
#endif  // !_MSC_VER

CameraTrack::CameraTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CameraTrack)
}

void CameraTrack::InitAsDefaultInstance() {
}

CameraTrack::CameraTrack(const CameraTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.CameraTrack)
}

void CameraTrack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  animrespath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraTrack::~CameraTrack() {
  // @@protoc_insertion_point(destructor:pb.CameraTrack)
  SharedDtor();
}

void CameraTrack::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (animrespath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete animrespath_;
  }
  if (this != default_instance_) {
  }
}

void CameraTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraTrack_descriptor_;
}

const CameraTrack& CameraTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

CameraTrack* CameraTrack::default_instance_ = NULL;

CameraTrack* CameraTrack::New() const {
  return new CameraTrack;
}

void CameraTrack::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_animrespath()) {
      if (animrespath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        animrespath_->clear();
      }
    }
    length_ = 0;
  }
  pointarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CameraTrack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AnimResPath;
        break;
      }

      // optional string AnimResPath = 2;
      case 2: {
        if (tag == 18) {
         parse_AnimResPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_animrespath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->animrespath().data(), this->animrespath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "animrespath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PointArr;
        break;
      }

      // repeated .pb.CameraTrackPoint PointArr = 3;
      case 3: {
        if (tag == 26) {
         parse_PointArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PointArr;
        if (input->ExpectTag(37)) goto parse_Length;
        break;
      }

      // optional float Length = 4;
      case 4: {
        if (tag == 37) {
         parse_Length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CameraTrack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CameraTrack)
  return false;
#undef DO_
}

void CameraTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CameraTrack)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string AnimResPath = 2;
  if (has_animrespath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animrespath().data(), this->animrespath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animrespath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->animrespath(), output);
  }

  // repeated .pb.CameraTrackPoint PointArr = 3;
  for (int i = 0; i < this->pointarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pointarr(i), output);
  }

  // optional float Length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CameraTrack)
}

::google::protobuf::uint8* CameraTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CameraTrack)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string AnimResPath = 2;
  if (has_animrespath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animrespath().data(), this->animrespath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animrespath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->animrespath(), target);
  }

  // repeated .pb.CameraTrackPoint PointArr = 3;
  for (int i = 0; i < this->pointarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pointarr(i), target);
  }

  // optional float Length = 4;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CameraTrack)
  return target;
}

int CameraTrack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string AnimResPath = 2;
    if (has_animrespath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->animrespath());
    }

    // optional float Length = 4;
    if (has_length()) {
      total_size += 1 + 4;
    }

  }
  // repeated .pb.CameraTrackPoint PointArr = 3;
  total_size += 1 * this->pointarr_size();
  for (int i = 0; i < this->pointarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraTrack::MergeFrom(const CameraTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  pointarr_.MergeFrom(from.pointarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_animrespath()) {
      set_animrespath(from.animrespath());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraTrack::CopyFrom(const CameraTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraTrack::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->pointarr())) return false;
  return true;
}

void CameraTrack::Swap(CameraTrack* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(animrespath_, other->animrespath_);
    pointarr_.Swap(&other->pointarr_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraTrack_descriptor_;
  metadata.reflection = CameraTrack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FieldConf3::kFieldConfNameFieldNumber;
const int FieldConf3::kPointElementArrFieldNumber;
const int FieldConf3::kRectAreaArrFieldNumber;
const int FieldConf3::kCameraInfoArrFieldNumber;
const int FieldConf3::kCustomAreaArrFieldNumber;
const int FieldConf3::kAnimAssetArrFieldNumber;
const int FieldConf3::kStaticAssetArrFieldNumber;
const int FieldConf3::kEffectAssetArrFieldNumber;
const int FieldConf3::kRootPositionFieldNumber;
const int FieldConf3::kRootDirectionFieldNumber;
const int FieldConf3::kStandardlinePosXFieldNumber;
const int FieldConf3::kLenAndWidFieldNumber;
const int FieldConf3::kDestructableArrFieldNumber;
const int FieldConf3::kCutSceneCameraTrackNameFieldNumber;
const int FieldConf3::kPositionlinePosXFieldNumber;
const int FieldConf3::kNeedSyncTimelineFieldNumber;
const int FieldConf3::kPathTrackArrFieldNumber;
const int FieldConf3::kFilterFieldNumber;
const int FieldConf3::kSpawnMappingFieldNumber;
#endif  // !_MSC_VER

FieldConf3::FieldConf3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.FieldConf3)
}

void FieldConf3::InitAsDefaultInstance() {
  rootposition_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
  rootdirection_ = const_cast< ::pb::PbVector3_Int*>(&::pb::PbVector3_Int::default_instance());
  lenandwid_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
  filter_ = const_cast< ::pb::BlockLineFastFilter*>(&::pb::BlockLineFastFilter::default_instance());
}

FieldConf3::FieldConf3(const FieldConf3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.FieldConf3)
}

void FieldConf3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fieldconfname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rootposition_ = NULL;
  rootdirection_ = NULL;
  standardlineposx_ = 0;
  lenandwid_ = NULL;
  cutscenecameratrackname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needsynctimeline_ = false;
  filter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldConf3::~FieldConf3() {
  // @@protoc_insertion_point(destructor:pb.FieldConf3)
  SharedDtor();
}

void FieldConf3::SharedDtor() {
  if (fieldconfname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fieldconfname_;
  }
  if (cutscenecameratrackname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cutscenecameratrackname_;
  }
  if (this != default_instance_) {
    delete rootposition_;
    delete rootdirection_;
    delete lenandwid_;
    delete filter_;
  }
}

void FieldConf3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldConf3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldConf3_descriptor_;
}

const FieldConf3& FieldConf3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

FieldConf3* FieldConf3::default_instance_ = NULL;

FieldConf3* FieldConf3::New() const {
  return new FieldConf3;
}

void FieldConf3::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FieldConf3*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (has_fieldconfname()) {
    if (fieldconfname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      fieldconfname_->clear();
    }
  }
  if (_has_bits_[8 / 32] & 44800) {
    ZR_(standardlineposx_, needsynctimeline_);
    if (has_rootposition()) {
      if (rootposition_ != NULL) rootposition_->::pb::PbVector3_Int::Clear();
    }
    if (has_rootdirection()) {
      if (rootdirection_ != NULL) rootdirection_->::pb::PbVector3_Int::Clear();
    }
    if (has_lenandwid()) {
      if (lenandwid_ != NULL) lenandwid_->::pb::PbVector2_Int::Clear();
    }
    if (has_cutscenecameratrackname()) {
      if (cutscenecameratrackname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cutscenecameratrackname_->clear();
      }
    }
  }
  if (has_filter()) {
    if (filter_ != NULL) filter_->::pb::BlockLineFastFilter::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  pointelementarr_.Clear();
  rectareaarr_.Clear();
  camerainfoarr_.Clear();
  customareaarr_.Clear();
  animassetarr_.Clear();
  staticassetarr_.Clear();
  effectassetarr_.Clear();
  destructablearr_.Clear();
  positionlineposx_.Clear();
  pathtrackarr_.Clear();
  spawnmapping_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FieldConf3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.FieldConf3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string FieldConfName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fieldconfname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fieldconfname().data(), this->fieldconfname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fieldconfname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PointElementArr;
        break;
      }

      // repeated .pb.PointElement3 PointElementArr = 2;
      case 2: {
        if (tag == 18) {
         parse_PointElementArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointelementarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PointElementArr;
        if (input->ExpectTag(26)) goto parse_RectAreaArr;
        break;
      }

      // repeated .pb.RectArea3 RectAreaArr = 3;
      case 3: {
        if (tag == 26) {
         parse_RectAreaArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rectareaarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RectAreaArr;
        if (input->ExpectTag(34)) goto parse_CameraInfoArr;
        break;
      }

      // repeated .pb.Camera3 CameraInfoArr = 4;
      case 4: {
        if (tag == 34) {
         parse_CameraInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camerainfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CameraInfoArr;
        if (input->ExpectTag(42)) goto parse_CustomAreaArr;
        break;
      }

      // repeated .pb.CustomArea3 CustomAreaArr = 5;
      case 5: {
        if (tag == 42) {
         parse_CustomAreaArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customareaarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_CustomAreaArr;
        if (input->ExpectTag(50)) goto parse_AnimAssetArr;
        break;
      }

      // repeated .pb.AnimAsset3 AnimAssetArr = 6;
      case 6: {
        if (tag == 50) {
         parse_AnimAssetArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animassetarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_AnimAssetArr;
        if (input->ExpectTag(58)) goto parse_StaticAssetArr;
        break;
      }

      // repeated .pb.StaticAsset3 StaticAssetArr = 7;
      case 7: {
        if (tag == 58) {
         parse_StaticAssetArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_staticassetarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_StaticAssetArr;
        if (input->ExpectTag(66)) goto parse_EffectAssetArr;
        break;
      }

      // repeated .pb.EffectAsset3 EffectAssetArr = 8;
      case 8: {
        if (tag == 66) {
         parse_EffectAssetArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effectassetarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_EffectAssetArr;
        if (input->ExpectTag(74)) goto parse_RootPosition;
        break;
      }

      // optional .pb.PbVector3_Int RootPosition = 9;
      case 9: {
        if (tag == 74) {
         parse_RootPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rootposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_RootDirection;
        break;
      }

      // optional .pb.PbVector3_Int RootDirection = 10;
      case 10: {
        if (tag == 82) {
         parse_RootDirection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rootdirection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_StandardlinePosX;
        break;
      }

      // optional int32 StandardlinePosX = 11;
      case 11: {
        if (tag == 88) {
         parse_StandardlinePosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &standardlineposx_)));
          set_has_standardlineposx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_LenAndWid;
        break;
      }

      // optional .pb.PbVector2_Int LenAndWid = 12;
      case 12: {
        if (tag == 98) {
         parse_LenAndWid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lenandwid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_DestructableArr;
        break;
      }

      // repeated .pb.Destructable DestructableArr = 13;
      case 13: {
        if (tag == 106) {
         parse_DestructableArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_destructablearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_DestructableArr;
        if (input->ExpectTag(114)) goto parse_CutSceneCameraTrackName;
        break;
      }

      // optional string CutSceneCameraTrackName = 14;
      case 14: {
        if (tag == 114) {
         parse_CutSceneCameraTrackName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cutscenecameratrackname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cutscenecameratrackname().data(), this->cutscenecameratrackname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cutscenecameratrackname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_PositionlinePosX;
        break;
      }

      // repeated int32 PositionlinePosX = 15;
      case 15: {
        if (tag == 120) {
         parse_PositionlinePosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_positionlineposx())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_positionlineposx())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_PositionlinePosX;
        if (input->ExpectTag(128)) goto parse_NeedSyncTimeline;
        break;
      }

      // optional bool NeedSyncTimeline = 16;
      case 16: {
        if (tag == 128) {
         parse_NeedSyncTimeline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needsynctimeline_)));
          set_has_needsynctimeline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_PathTrackArr;
        break;
      }

      // repeated .pb.PathTrack PathTrackArr = 17;
      case 17: {
        if (tag == 138) {
         parse_PathTrackArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pathtrackarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_PathTrackArr;
        if (input->ExpectTag(146)) goto parse_Filter;
        break;
      }

      // optional .pb.BlockLineFastFilter Filter = 18;
      case 18: {
        if (tag == 146) {
         parse_Filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_SpawnMapping;
        break;
      }

      // repeated .pb.TDSpawnMapping SpawnMapping = 19;
      case 19: {
        if (tag == 154) {
         parse_SpawnMapping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spawnmapping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_SpawnMapping;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.FieldConf3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.FieldConf3)
  return false;
#undef DO_
}

void FieldConf3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.FieldConf3)
  // required string FieldConfName = 1;
  if (has_fieldconfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldconfname().data(), this->fieldconfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fieldconfname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fieldconfname(), output);
  }

  // repeated .pb.PointElement3 PointElementArr = 2;
  for (int i = 0; i < this->pointelementarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pointelementarr(i), output);
  }

  // repeated .pb.RectArea3 RectAreaArr = 3;
  for (int i = 0; i < this->rectareaarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rectareaarr(i), output);
  }

  // repeated .pb.Camera3 CameraInfoArr = 4;
  for (int i = 0; i < this->camerainfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->camerainfoarr(i), output);
  }

  // repeated .pb.CustomArea3 CustomAreaArr = 5;
  for (int i = 0; i < this->customareaarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->customareaarr(i), output);
  }

  // repeated .pb.AnimAsset3 AnimAssetArr = 6;
  for (int i = 0; i < this->animassetarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->animassetarr(i), output);
  }

  // repeated .pb.StaticAsset3 StaticAssetArr = 7;
  for (int i = 0; i < this->staticassetarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->staticassetarr(i), output);
  }

  // repeated .pb.EffectAsset3 EffectAssetArr = 8;
  for (int i = 0; i < this->effectassetarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->effectassetarr(i), output);
  }

  // optional .pb.PbVector3_Int RootPosition = 9;
  if (has_rootposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->rootposition(), output);
  }

  // optional .pb.PbVector3_Int RootDirection = 10;
  if (has_rootdirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->rootdirection(), output);
  }

  // optional int32 StandardlinePosX = 11;
  if (has_standardlineposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->standardlineposx(), output);
  }

  // optional .pb.PbVector2_Int LenAndWid = 12;
  if (has_lenandwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->lenandwid(), output);
  }

  // repeated .pb.Destructable DestructableArr = 13;
  for (int i = 0; i < this->destructablearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->destructablearr(i), output);
  }

  // optional string CutSceneCameraTrackName = 14;
  if (has_cutscenecameratrackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cutscenecameratrackname().data(), this->cutscenecameratrackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cutscenecameratrackname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->cutscenecameratrackname(), output);
  }

  // repeated int32 PositionlinePosX = 15;
  for (int i = 0; i < this->positionlineposx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->positionlineposx(i), output);
  }

  // optional bool NeedSyncTimeline = 16;
  if (has_needsynctimeline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->needsynctimeline(), output);
  }

  // repeated .pb.PathTrack PathTrackArr = 17;
  for (int i = 0; i < this->pathtrackarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->pathtrackarr(i), output);
  }

  // optional .pb.BlockLineFastFilter Filter = 18;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->filter(), output);
  }

  // repeated .pb.TDSpawnMapping SpawnMapping = 19;
  for (int i = 0; i < this->spawnmapping_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->spawnmapping(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.FieldConf3)
}

::google::protobuf::uint8* FieldConf3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.FieldConf3)
  // required string FieldConfName = 1;
  if (has_fieldconfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldconfname().data(), this->fieldconfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fieldconfname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fieldconfname(), target);
  }

  // repeated .pb.PointElement3 PointElementArr = 2;
  for (int i = 0; i < this->pointelementarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pointelementarr(i), target);
  }

  // repeated .pb.RectArea3 RectAreaArr = 3;
  for (int i = 0; i < this->rectareaarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rectareaarr(i), target);
  }

  // repeated .pb.Camera3 CameraInfoArr = 4;
  for (int i = 0; i < this->camerainfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->camerainfoarr(i), target);
  }

  // repeated .pb.CustomArea3 CustomAreaArr = 5;
  for (int i = 0; i < this->customareaarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->customareaarr(i), target);
  }

  // repeated .pb.AnimAsset3 AnimAssetArr = 6;
  for (int i = 0; i < this->animassetarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->animassetarr(i), target);
  }

  // repeated .pb.StaticAsset3 StaticAssetArr = 7;
  for (int i = 0; i < this->staticassetarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->staticassetarr(i), target);
  }

  // repeated .pb.EffectAsset3 EffectAssetArr = 8;
  for (int i = 0; i < this->effectassetarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->effectassetarr(i), target);
  }

  // optional .pb.PbVector3_Int RootPosition = 9;
  if (has_rootposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->rootposition(), target);
  }

  // optional .pb.PbVector3_Int RootDirection = 10;
  if (has_rootdirection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->rootdirection(), target);
  }

  // optional int32 StandardlinePosX = 11;
  if (has_standardlineposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->standardlineposx(), target);
  }

  // optional .pb.PbVector2_Int LenAndWid = 12;
  if (has_lenandwid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->lenandwid(), target);
  }

  // repeated .pb.Destructable DestructableArr = 13;
  for (int i = 0; i < this->destructablearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->destructablearr(i), target);
  }

  // optional string CutSceneCameraTrackName = 14;
  if (has_cutscenecameratrackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cutscenecameratrackname().data(), this->cutscenecameratrackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cutscenecameratrackname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->cutscenecameratrackname(), target);
  }

  // repeated int32 PositionlinePosX = 15;
  for (int i = 0; i < this->positionlineposx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->positionlineposx(i), target);
  }

  // optional bool NeedSyncTimeline = 16;
  if (has_needsynctimeline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->needsynctimeline(), target);
  }

  // repeated .pb.PathTrack PathTrackArr = 17;
  for (int i = 0; i < this->pathtrackarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->pathtrackarr(i), target);
  }

  // optional .pb.BlockLineFastFilter Filter = 18;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->filter(), target);
  }

  // repeated .pb.TDSpawnMapping SpawnMapping = 19;
  for (int i = 0; i < this->spawnmapping_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->spawnmapping(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.FieldConf3)
  return target;
}

int FieldConf3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string FieldConfName = 1;
    if (has_fieldconfname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fieldconfname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.PbVector3_Int RootPosition = 9;
    if (has_rootposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rootposition());
    }

    // optional .pb.PbVector3_Int RootDirection = 10;
    if (has_rootdirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rootdirection());
    }

    // optional int32 StandardlinePosX = 11;
    if (has_standardlineposx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->standardlineposx());
    }

    // optional .pb.PbVector2_Int LenAndWid = 12;
    if (has_lenandwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lenandwid());
    }

    // optional string CutSceneCameraTrackName = 14;
    if (has_cutscenecameratrackname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cutscenecameratrackname());
    }

    // optional bool NeedSyncTimeline = 16;
    if (has_needsynctimeline()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional .pb.BlockLineFastFilter Filter = 18;
    if (has_filter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }

  }
  // repeated .pb.PointElement3 PointElementArr = 2;
  total_size += 1 * this->pointelementarr_size();
  for (int i = 0; i < this->pointelementarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointelementarr(i));
  }

  // repeated .pb.RectArea3 RectAreaArr = 3;
  total_size += 1 * this->rectareaarr_size();
  for (int i = 0; i < this->rectareaarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rectareaarr(i));
  }

  // repeated .pb.Camera3 CameraInfoArr = 4;
  total_size += 1 * this->camerainfoarr_size();
  for (int i = 0; i < this->camerainfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camerainfoarr(i));
  }

  // repeated .pb.CustomArea3 CustomAreaArr = 5;
  total_size += 1 * this->customareaarr_size();
  for (int i = 0; i < this->customareaarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customareaarr(i));
  }

  // repeated .pb.AnimAsset3 AnimAssetArr = 6;
  total_size += 1 * this->animassetarr_size();
  for (int i = 0; i < this->animassetarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animassetarr(i));
  }

  // repeated .pb.StaticAsset3 StaticAssetArr = 7;
  total_size += 1 * this->staticassetarr_size();
  for (int i = 0; i < this->staticassetarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->staticassetarr(i));
  }

  // repeated .pb.EffectAsset3 EffectAssetArr = 8;
  total_size += 1 * this->effectassetarr_size();
  for (int i = 0; i < this->effectassetarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effectassetarr(i));
  }

  // repeated .pb.Destructable DestructableArr = 13;
  total_size += 1 * this->destructablearr_size();
  for (int i = 0; i < this->destructablearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->destructablearr(i));
  }

  // repeated int32 PositionlinePosX = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->positionlineposx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->positionlineposx(i));
    }
    total_size += 1 * this->positionlineposx_size() + data_size;
  }

  // repeated .pb.PathTrack PathTrackArr = 17;
  total_size += 2 * this->pathtrackarr_size();
  for (int i = 0; i < this->pathtrackarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pathtrackarr(i));
  }

  // repeated .pb.TDSpawnMapping SpawnMapping = 19;
  total_size += 2 * this->spawnmapping_size();
  for (int i = 0; i < this->spawnmapping_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spawnmapping(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldConf3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FieldConf3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FieldConf3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FieldConf3::MergeFrom(const FieldConf3& from) {
  GOOGLE_CHECK_NE(&from, this);
  pointelementarr_.MergeFrom(from.pointelementarr_);
  rectareaarr_.MergeFrom(from.rectareaarr_);
  camerainfoarr_.MergeFrom(from.camerainfoarr_);
  customareaarr_.MergeFrom(from.customareaarr_);
  animassetarr_.MergeFrom(from.animassetarr_);
  staticassetarr_.MergeFrom(from.staticassetarr_);
  effectassetarr_.MergeFrom(from.effectassetarr_);
  destructablearr_.MergeFrom(from.destructablearr_);
  positionlineposx_.MergeFrom(from.positionlineposx_);
  pathtrackarr_.MergeFrom(from.pathtrackarr_);
  spawnmapping_.MergeFrom(from.spawnmapping_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fieldconfname()) {
      set_fieldconfname(from.fieldconfname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rootposition()) {
      mutable_rootposition()->::pb::PbVector3_Int::MergeFrom(from.rootposition());
    }
    if (from.has_rootdirection()) {
      mutable_rootdirection()->::pb::PbVector3_Int::MergeFrom(from.rootdirection());
    }
    if (from.has_standardlineposx()) {
      set_standardlineposx(from.standardlineposx());
    }
    if (from.has_lenandwid()) {
      mutable_lenandwid()->::pb::PbVector2_Int::MergeFrom(from.lenandwid());
    }
    if (from.has_cutscenecameratrackname()) {
      set_cutscenecameratrackname(from.cutscenecameratrackname());
    }
    if (from.has_needsynctimeline()) {
      set_needsynctimeline(from.needsynctimeline());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_filter()) {
      mutable_filter()->::pb::BlockLineFastFilter::MergeFrom(from.filter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FieldConf3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldConf3::CopyFrom(const FieldConf3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldConf3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->pointelementarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rectareaarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->camerainfoarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->customareaarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->animassetarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->staticassetarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->effectassetarr())) return false;
  return true;
}

void FieldConf3::Swap(FieldConf3* other) {
  if (other != this) {
    std::swap(fieldconfname_, other->fieldconfname_);
    pointelementarr_.Swap(&other->pointelementarr_);
    rectareaarr_.Swap(&other->rectareaarr_);
    camerainfoarr_.Swap(&other->camerainfoarr_);
    customareaarr_.Swap(&other->customareaarr_);
    animassetarr_.Swap(&other->animassetarr_);
    staticassetarr_.Swap(&other->staticassetarr_);
    effectassetarr_.Swap(&other->effectassetarr_);
    std::swap(rootposition_, other->rootposition_);
    std::swap(rootdirection_, other->rootdirection_);
    std::swap(standardlineposx_, other->standardlineposx_);
    std::swap(lenandwid_, other->lenandwid_);
    destructablearr_.Swap(&other->destructablearr_);
    std::swap(cutscenecameratrackname_, other->cutscenecameratrackname_);
    positionlineposx_.Swap(&other->positionlineposx_);
    std::swap(needsynctimeline_, other->needsynctimeline_);
    pathtrackarr_.Swap(&other->pathtrackarr_);
    std::swap(filter_, other->filter_);
    spawnmapping_.Swap(&other->spawnmapping_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FieldConf3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldConf3_descriptor_;
  metadata.reflection = FieldConf3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneConf3d::kIdFieldNumber;
const int SceneConf3d::kConfNameFieldNumber;
const int SceneConf3d::kArtScenePathFieldNumber;
const int SceneConf3d::kFieldConfArrFieldNumber;
const int SceneConf3d::kLeapTrackArrFieldNumber;
const int SceneConf3d::kGridDataPathFieldNumber;
const int SceneConf3d::kCameraTrackArrFieldNumber;
const int SceneConf3d::kCurveTrackArrFieldNumber;
const int SceneConf3d::kSceneCameraFieldNumber;
#endif  // !_MSC_VER

SceneConf3d::SceneConf3d()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SceneConf3d)
}

void SceneConf3d::InitAsDefaultInstance() {
  scenecamera_ = const_cast< ::pb::Camera3*>(&::pb::Camera3::default_instance());
}

SceneConf3d::SceneConf3d(const SceneConf3d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SceneConf3d)
}

void SceneConf3d::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artscenepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  griddatapath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scenecamera_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneConf3d::~SceneConf3d() {
  // @@protoc_insertion_point(destructor:pb.SceneConf3d)
  SharedDtor();
}

void SceneConf3d::SharedDtor() {
  if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete confname_;
  }
  if (artscenepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete artscenepath_;
  }
  if (griddatapath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete griddatapath_;
  }
  if (this != default_instance_) {
    delete scenecamera_;
  }
}

void SceneConf3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneConf3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneConf3d_descriptor_;
}

const SceneConf3d& SceneConf3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConf3d_2eproto();
  return *default_instance_;
}

SceneConf3d* SceneConf3d::default_instance_ = NULL;

SceneConf3d* SceneConf3d::New() const {
  return new SceneConf3d;
}

void SceneConf3d::Clear() {
  if (_has_bits_[0 / 32] & 39) {
    id_ = 0;
    if (has_confname()) {
      if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        confname_->clear();
      }
    }
    if (has_artscenepath()) {
      if (artscenepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        artscenepath_->clear();
      }
    }
    if (has_griddatapath()) {
      if (griddatapath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        griddatapath_->clear();
      }
    }
  }
  if (has_scenecamera()) {
    if (scenecamera_ != NULL) scenecamera_->::pb::Camera3::Clear();
  }
  fieldconfarr_.Clear();
  leaptrackarr_.Clear();
  cameratrackarr_.Clear();
  curvetrackarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneConf3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SceneConf3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ConfName;
        break;
      }

      // required string ConfName = 2;
      case 2: {
        if (tag == 18) {
         parse_ConfName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->confname().data(), this->confname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "confname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArtScenePath;
        break;
      }

      // required string ArtScenePath = 3;
      case 3: {
        if (tag == 26) {
         parse_ArtScenePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artscenepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->artscenepath().data(), this->artscenepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artscenepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_FieldConfArr;
        break;
      }

      // repeated .pb.FieldConf3 FieldConfArr = 4;
      case 4: {
        if (tag == 34) {
         parse_FieldConfArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldconfarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_FieldConfArr;
        if (input->ExpectTag(42)) goto parse_LeapTrackArr;
        break;
      }

      // repeated .pb.LeapTrack LeapTrackArr = 5;
      case 5: {
        if (tag == 42) {
         parse_LeapTrackArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leaptrackarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_LeapTrackArr;
        if (input->ExpectTag(50)) goto parse_GridDataPath;
        break;
      }

      // optional string GridDataPath = 6;
      case 6: {
        if (tag == 50) {
         parse_GridDataPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_griddatapath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->griddatapath().data(), this->griddatapath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "griddatapath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_CameraTrackArr;
        break;
      }

      // repeated .pb.CameraTrack CameraTrackArr = 7;
      case 7: {
        if (tag == 58) {
         parse_CameraTrackArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cameratrackarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_CameraTrackArr;
        if (input->ExpectTag(66)) goto parse_CurveTrackArr;
        break;
      }

      // repeated .pb.CurveTrack CurveTrackArr = 8;
      case 8: {
        if (tag == 66) {
         parse_CurveTrackArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_curvetrackarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_CurveTrackArr;
        if (input->ExpectTag(74)) goto parse_SceneCamera;
        break;
      }

      // optional .pb.Camera3 SceneCamera = 9;
      case 9: {
        if (tag == 74) {
         parse_SceneCamera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scenecamera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SceneConf3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SceneConf3d)
  return false;
#undef DO_
}

void SceneConf3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SceneConf3d)
  // required int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string ConfName = 2;
  if (has_confname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confname().data(), this->confname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->confname(), output);
  }

  // required string ArtScenePath = 3;
  if (has_artscenepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artscenepath().data(), this->artscenepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artscenepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->artscenepath(), output);
  }

  // repeated .pb.FieldConf3 FieldConfArr = 4;
  for (int i = 0; i < this->fieldconfarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fieldconfarr(i), output);
  }

  // repeated .pb.LeapTrack LeapTrackArr = 5;
  for (int i = 0; i < this->leaptrackarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->leaptrackarr(i), output);
  }

  // optional string GridDataPath = 6;
  if (has_griddatapath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->griddatapath().data(), this->griddatapath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "griddatapath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->griddatapath(), output);
  }

  // repeated .pb.CameraTrack CameraTrackArr = 7;
  for (int i = 0; i < this->cameratrackarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->cameratrackarr(i), output);
  }

  // repeated .pb.CurveTrack CurveTrackArr = 8;
  for (int i = 0; i < this->curvetrackarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->curvetrackarr(i), output);
  }

  // optional .pb.Camera3 SceneCamera = 9;
  if (has_scenecamera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->scenecamera(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SceneConf3d)
}

::google::protobuf::uint8* SceneConf3d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SceneConf3d)
  // required int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string ConfName = 2;
  if (has_confname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confname().data(), this->confname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->confname(), target);
  }

  // required string ArtScenePath = 3;
  if (has_artscenepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artscenepath().data(), this->artscenepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artscenepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->artscenepath(), target);
  }

  // repeated .pb.FieldConf3 FieldConfArr = 4;
  for (int i = 0; i < this->fieldconfarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fieldconfarr(i), target);
  }

  // repeated .pb.LeapTrack LeapTrackArr = 5;
  for (int i = 0; i < this->leaptrackarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->leaptrackarr(i), target);
  }

  // optional string GridDataPath = 6;
  if (has_griddatapath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->griddatapath().data(), this->griddatapath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "griddatapath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->griddatapath(), target);
  }

  // repeated .pb.CameraTrack CameraTrackArr = 7;
  for (int i = 0; i < this->cameratrackarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->cameratrackarr(i), target);
  }

  // repeated .pb.CurveTrack CurveTrackArr = 8;
  for (int i = 0; i < this->curvetrackarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->curvetrackarr(i), target);
  }

  // optional .pb.Camera3 SceneCamera = 9;
  if (has_scenecamera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->scenecamera(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SceneConf3d)
  return target;
}

int SceneConf3d::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string ConfName = 2;
    if (has_confname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->confname());
    }

    // required string ArtScenePath = 3;
    if (has_artscenepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artscenepath());
    }

    // optional string GridDataPath = 6;
    if (has_griddatapath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->griddatapath());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.Camera3 SceneCamera = 9;
    if (has_scenecamera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scenecamera());
    }

  }
  // repeated .pb.FieldConf3 FieldConfArr = 4;
  total_size += 1 * this->fieldconfarr_size();
  for (int i = 0; i < this->fieldconfarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldconfarr(i));
  }

  // repeated .pb.LeapTrack LeapTrackArr = 5;
  total_size += 1 * this->leaptrackarr_size();
  for (int i = 0; i < this->leaptrackarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leaptrackarr(i));
  }

  // repeated .pb.CameraTrack CameraTrackArr = 7;
  total_size += 1 * this->cameratrackarr_size();
  for (int i = 0; i < this->cameratrackarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cameratrackarr(i));
  }

  // repeated .pb.CurveTrack CurveTrackArr = 8;
  total_size += 1 * this->curvetrackarr_size();
  for (int i = 0; i < this->curvetrackarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->curvetrackarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneConf3d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneConf3d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneConf3d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneConf3d::MergeFrom(const SceneConf3d& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldconfarr_.MergeFrom(from.fieldconfarr_);
  leaptrackarr_.MergeFrom(from.leaptrackarr_);
  cameratrackarr_.MergeFrom(from.cameratrackarr_);
  curvetrackarr_.MergeFrom(from.curvetrackarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_confname()) {
      set_confname(from.confname());
    }
    if (from.has_artscenepath()) {
      set_artscenepath(from.artscenepath());
    }
    if (from.has_griddatapath()) {
      set_griddatapath(from.griddatapath());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scenecamera()) {
      mutable_scenecamera()->::pb::Camera3::MergeFrom(from.scenecamera());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneConf3d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneConf3d::CopyFrom(const SceneConf3d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneConf3d::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->fieldconfarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cameratrackarr())) return false;
  if (has_scenecamera()) {
    if (!this->scenecamera().IsInitialized()) return false;
  }
  return true;
}

void SceneConf3d::Swap(SceneConf3d* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(confname_, other->confname_);
    std::swap(artscenepath_, other->artscenepath_);
    fieldconfarr_.Swap(&other->fieldconfarr_);
    leaptrackarr_.Swap(&other->leaptrackarr_);
    std::swap(griddatapath_, other->griddatapath_);
    cameratrackarr_.Swap(&other->cameratrackarr_);
    curvetrackarr_.Swap(&other->curvetrackarr_);
    std::swap(scenecamera_, other->scenecamera_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneConf3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneConf3d_descriptor_;
  metadata.reflection = SceneConf3d_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
