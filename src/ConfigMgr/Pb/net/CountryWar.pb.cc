// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CountryWar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/CountryWar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TCountryWarUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarGuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarGuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarGridInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarGridInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarGarrisonInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarGarrisonInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarGridUserCityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarGridUserCityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarGridNpcBuildingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarGridNpcBuildingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarHpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarHpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarGridFirstInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarGridFirstInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarGridKillSiegeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarGridKillSiegeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarGridMonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarGridMonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarGridResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarGridResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarGridTreasureInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarGridTreasureInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarMarchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarMarchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarEnterCountryWarReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarEnterCountryWarReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarEnterCountryWarRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarEnterCountryWarRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarGetMapInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarGetMapInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarGetMapInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarGetMapInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarAttackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarAttackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarCollectResourceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarCollectResourceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarSnatchResourceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarSnatchResourceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarCollectReturnReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarCollectReturnReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarSearchTreasureReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarSearchTreasureReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarDigTreasureReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarDigTreasureReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarGarrisonGridReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarGarrisonGridReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarTransportReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarTransportReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarInvestigateGridReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarInvestigateGridReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarMarchSpeedUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarMarchSpeedUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarMarchReturnReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarMarchReturnReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarGarrisonReturnReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarGarrisonReturnReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarDrawReturnReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarDrawReturnReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarMoveCityReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarMoveCityReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarMoveCityRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarMoveCityRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarInitiateAssemblyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarInitiateAssemblyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarCancelAssemblyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarCancelAssemblyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarJoinAssemblyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarJoinAssemblyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarLeaveAssemblyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarLeaveAssemblyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarAssemblyTeamHeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarAssemblyTeamHeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarAssemblyTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarAssemblyTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarAssemblyUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarAssemblyUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarAssemblyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarAssemblyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarGetAssemblyListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarGetAssemblyListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarGetAssemblyListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarGetAssemblyListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarGridNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarGridNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarMarchNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarMarchNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarUserGuildInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarUserGuildInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCountryWarAssemblyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCountryWarAssemblyNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EMarchType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAssemblyStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAssemblyTeamStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fCountryWar_2eproto() {
  protobuf_AddDesc_net_2fCountryWar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/CountryWar.proto");
  GOOGLE_CHECK(file != NULL);
  TCountryWarUserInfo_descriptor_ = file->message_type(0);
  static const int TCountryWarUserInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarUserInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarUserInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarUserInfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarUserInfo, guildid_),
  };
  TCountryWarUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarUserInfo_descriptor_,
      TCountryWarUserInfo::default_instance_,
      TCountryWarUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarUserInfo));
  TCountryWarGuildInfo_descriptor_ = file->message_type(1);
  static const int TCountryWarGuildInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGuildInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGuildInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGuildInfo, guildname_),
  };
  TCountryWarGuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarGuildInfo_descriptor_,
      TCountryWarGuildInfo::default_instance_,
      TCountryWarGuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarGuildInfo));
  TCountryWarGridInfo_descriptor_ = file->message_type(2);
  static const int TCountryWarGridInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridInfo, gridindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridInfo, gridtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridInfo, garrisoninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridInfo, usercityinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridInfo, npccityinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridInfo, npcfortinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridInfo, monsterinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridInfo, resourceinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridInfo, treasureinfo_),
  };
  TCountryWarGridInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarGridInfo_descriptor_,
      TCountryWarGridInfo::default_instance_,
      TCountryWarGridInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarGridInfo));
  TCountryWarGarrisonInfo_descriptor_ = file->message_type(3);
  static const int TCountryWarGarrisonInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGarrisonInfo, garrisonnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGarrisonInfo, lastestuid_),
  };
  TCountryWarGarrisonInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarGarrisonInfo_descriptor_,
      TCountryWarGarrisonInfo::default_instance_,
      TCountryWarGarrisonInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGarrisonInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGarrisonInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarGarrisonInfo));
  TCountryWarGridUserCityInfo_descriptor_ = file->message_type(4);
  static const int TCountryWarGridUserCityInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridUserCityInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridUserCityInfo, currdur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridUserCityInfo, maxdur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridUserCityInfo, recovertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridUserCityInfo, recoverspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridUserCityInfo, citylv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridUserCityInfo, isfreewar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridUserCityInfo, warendtime_),
  };
  TCountryWarGridUserCityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarGridUserCityInfo_descriptor_,
      TCountryWarGridUserCityInfo::default_instance_,
      TCountryWarGridUserCityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridUserCityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridUserCityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarGridUserCityInfo));
  TCountryWarGridNpcBuildingInfo_descriptor_ = file->message_type(5);
  static const int TCountryWarGridNpcBuildingInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridNpcBuildingInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridNpcBuildingInfo, occupytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridNpcBuildingInfo, currdur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridNpcBuildingInfo, recovertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridNpcBuildingInfo, killednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridNpcBuildingInfo, resettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridNpcBuildingInfo, garrhparray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridNpcBuildingInfo, firstinfo_),
  };
  TCountryWarGridNpcBuildingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarGridNpcBuildingInfo_descriptor_,
      TCountryWarGridNpcBuildingInfo::default_instance_,
      TCountryWarGridNpcBuildingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridNpcBuildingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridNpcBuildingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarGridNpcBuildingInfo));
  TCountryWarHpInfo_descriptor_ = file->message_type(6);
  static const int TCountryWarHpInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarHpInfo, htid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarHpInfo, hpnum_),
  };
  TCountryWarHpInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarHpInfo_descriptor_,
      TCountryWarHpInfo::default_instance_,
      TCountryWarHpInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarHpInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarHpInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarHpInfo));
  TCountryWarGridFirstInfo_descriptor_ = file->message_type(7);
  static const int TCountryWarGridFirstInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridFirstInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridFirstInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridFirstInfo, occupytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridFirstInfo, firstsiegeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridFirstInfo, firstkillinfo_),
  };
  TCountryWarGridFirstInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarGridFirstInfo_descriptor_,
      TCountryWarGridFirstInfo::default_instance_,
      TCountryWarGridFirstInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridFirstInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridFirstInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarGridFirstInfo));
  TCountryWarGridKillSiegeInfo_descriptor_ = file->message_type(8);
  static const int TCountryWarGridKillSiegeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridKillSiegeInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridKillSiegeInfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridKillSiegeInfo, num_),
  };
  TCountryWarGridKillSiegeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarGridKillSiegeInfo_descriptor_,
      TCountryWarGridKillSiegeInfo::default_instance_,
      TCountryWarGridKillSiegeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridKillSiegeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridKillSiegeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarGridKillSiegeInfo));
  TCountryWarGridMonsterInfo_descriptor_ = file->message_type(9);
  static const int TCountryWarGridMonsterInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridMonsterInfo, monsterhparray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridMonsterInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridMonsterInfo, endtime_),
  };
  TCountryWarGridMonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarGridMonsterInfo_descriptor_,
      TCountryWarGridMonsterInfo::default_instance_,
      TCountryWarGridMonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridMonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridMonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarGridMonsterInfo));
  TCountryWarGridResourceInfo_descriptor_ = file->message_type(10);
  static const int TCountryWarGridResourceInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridResourceInfo, resourcenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridResourceInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridResourceInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridResourceInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridResourceInfo, endtime_),
  };
  TCountryWarGridResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarGridResourceInfo_descriptor_,
      TCountryWarGridResourceInfo::default_instance_,
      TCountryWarGridResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarGridResourceInfo));
  TCountryWarGridTreasureInfo_descriptor_ = file->message_type(11);
  static const int TCountryWarGridTreasureInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridTreasureInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridTreasureInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridTreasureInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridTreasureInfo, treasureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridTreasureInfo, monsterhparray_),
  };
  TCountryWarGridTreasureInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarGridTreasureInfo_descriptor_,
      TCountryWarGridTreasureInfo::default_instance_,
      TCountryWarGridTreasureInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridTreasureInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridTreasureInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarGridTreasureInfo));
  TCountryWarMarchInfo_descriptor_ = file->message_type(12);
  static const int TCountryWarMarchInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchInfo, marchtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchInfo, startgridindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchInfo, endgridindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchInfo, speeduptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchInfo, dispercent_),
  };
  TCountryWarMarchInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarMarchInfo_descriptor_,
      TCountryWarMarchInfo::default_instance_,
      TCountryWarMarchInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarMarchInfo));
  TCountryWarEnterCountryWarReq_descriptor_ = file->message_type(13);
  static const int TCountryWarEnterCountryWarReq_offsets_[1] = {
  };
  TCountryWarEnterCountryWarReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarEnterCountryWarReq_descriptor_,
      TCountryWarEnterCountryWarReq::default_instance_,
      TCountryWarEnterCountryWarReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarEnterCountryWarReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarEnterCountryWarReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarEnterCountryWarReq));
  TCountryWarEnterCountryWarRsp_descriptor_ = file->message_type(14);
  static const int TCountryWarEnterCountryWarRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarEnterCountryWarRsp, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarEnterCountryWarRsp, gridindex_),
  };
  TCountryWarEnterCountryWarRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarEnterCountryWarRsp_descriptor_,
      TCountryWarEnterCountryWarRsp::default_instance_,
      TCountryWarEnterCountryWarRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarEnterCountryWarRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarEnterCountryWarRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarEnterCountryWarRsp));
  TCountryWarGetMapInfoReq_descriptor_ = file->message_type(15);
  static const int TCountryWarGetMapInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGetMapInfoReq, gridindex_),
  };
  TCountryWarGetMapInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarGetMapInfoReq_descriptor_,
      TCountryWarGetMapInfoReq::default_instance_,
      TCountryWarGetMapInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGetMapInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGetMapInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarGetMapInfoReq));
  TCountryWarGetMapInfoRsp_descriptor_ = file->message_type(16);
  static const int TCountryWarGetMapInfoRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGetMapInfoRsp, gridarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGetMapInfoRsp, marcharr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGetMapInfoRsp, userarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGetMapInfoRsp, guildarr_),
  };
  TCountryWarGetMapInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarGetMapInfoRsp_descriptor_,
      TCountryWarGetMapInfoRsp::default_instance_,
      TCountryWarGetMapInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGetMapInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGetMapInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarGetMapInfoRsp));
  TCountryWarAttackReq_descriptor_ = file->message_type(17);
  static const int TCountryWarAttackReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAttackReq, targetgridindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAttackReq, teamid_),
  };
  TCountryWarAttackReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarAttackReq_descriptor_,
      TCountryWarAttackReq::default_instance_,
      TCountryWarAttackReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAttackReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAttackReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarAttackReq));
  TCountryWarCollectResourceReq_descriptor_ = file->message_type(18);
  static const int TCountryWarCollectResourceReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarCollectResourceReq, targetgridindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarCollectResourceReq, teamid_),
  };
  TCountryWarCollectResourceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarCollectResourceReq_descriptor_,
      TCountryWarCollectResourceReq::default_instance_,
      TCountryWarCollectResourceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarCollectResourceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarCollectResourceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarCollectResourceReq));
  TCountryWarSnatchResourceReq_descriptor_ = file->message_type(19);
  static const int TCountryWarSnatchResourceReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarSnatchResourceReq, targetgridindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarSnatchResourceReq, teamid_),
  };
  TCountryWarSnatchResourceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarSnatchResourceReq_descriptor_,
      TCountryWarSnatchResourceReq::default_instance_,
      TCountryWarSnatchResourceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarSnatchResourceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarSnatchResourceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarSnatchResourceReq));
  TCountryWarCollectReturnReq_descriptor_ = file->message_type(20);
  static const int TCountryWarCollectReturnReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarCollectReturnReq, teamid_),
  };
  TCountryWarCollectReturnReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarCollectReturnReq_descriptor_,
      TCountryWarCollectReturnReq::default_instance_,
      TCountryWarCollectReturnReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarCollectReturnReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarCollectReturnReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarCollectReturnReq));
  TCountryWarSearchTreasureReq_descriptor_ = file->message_type(21);
  static const int TCountryWarSearchTreasureReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarSearchTreasureReq, targetgridindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarSearchTreasureReq, hidarr_),
  };
  TCountryWarSearchTreasureReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarSearchTreasureReq_descriptor_,
      TCountryWarSearchTreasureReq::default_instance_,
      TCountryWarSearchTreasureReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarSearchTreasureReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarSearchTreasureReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarSearchTreasureReq));
  TCountryWarDigTreasureReq_descriptor_ = file->message_type(22);
  static const int TCountryWarDigTreasureReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarDigTreasureReq, targetgridindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarDigTreasureReq, teamid_),
  };
  TCountryWarDigTreasureReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarDigTreasureReq_descriptor_,
      TCountryWarDigTreasureReq::default_instance_,
      TCountryWarDigTreasureReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarDigTreasureReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarDigTreasureReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarDigTreasureReq));
  TCountryWarGarrisonGridReq_descriptor_ = file->message_type(23);
  static const int TCountryWarGarrisonGridReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGarrisonGridReq, targetgridindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGarrisonGridReq, teamid_),
  };
  TCountryWarGarrisonGridReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarGarrisonGridReq_descriptor_,
      TCountryWarGarrisonGridReq::default_instance_,
      TCountryWarGarrisonGridReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGarrisonGridReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGarrisonGridReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarGarrisonGridReq));
  TCountryWarTransportReq_descriptor_ = file->message_type(24);
  static const int TCountryWarTransportReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarTransportReq, targetuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarTransportReq, hidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarTransportReq, rewardarr_),
  };
  TCountryWarTransportReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarTransportReq_descriptor_,
      TCountryWarTransportReq::default_instance_,
      TCountryWarTransportReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarTransportReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarTransportReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarTransportReq));
  TCountryWarInvestigateGridReq_descriptor_ = file->message_type(25);
  static const int TCountryWarInvestigateGridReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarInvestigateGridReq, targetgridindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarInvestigateGridReq, hidarr_),
  };
  TCountryWarInvestigateGridReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarInvestigateGridReq_descriptor_,
      TCountryWarInvestigateGridReq::default_instance_,
      TCountryWarInvestigateGridReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarInvestigateGridReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarInvestigateGridReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarInvestigateGridReq));
  TCountryWarMarchSpeedUpReq_descriptor_ = file->message_type(26);
  static const int TCountryWarMarchSpeedUpReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchSpeedUpReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchSpeedUpReq, itemtid_),
  };
  TCountryWarMarchSpeedUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarMarchSpeedUpReq_descriptor_,
      TCountryWarMarchSpeedUpReq::default_instance_,
      TCountryWarMarchSpeedUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchSpeedUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchSpeedUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarMarchSpeedUpReq));
  TCountryWarMarchReturnReq_descriptor_ = file->message_type(27);
  static const int TCountryWarMarchReturnReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchReturnReq, teamid_),
  };
  TCountryWarMarchReturnReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarMarchReturnReq_descriptor_,
      TCountryWarMarchReturnReq::default_instance_,
      TCountryWarMarchReturnReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchReturnReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchReturnReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarMarchReturnReq));
  TCountryWarGarrisonReturnReq_descriptor_ = file->message_type(28);
  static const int TCountryWarGarrisonReturnReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGarrisonReturnReq, teamid_),
  };
  TCountryWarGarrisonReturnReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarGarrisonReturnReq_descriptor_,
      TCountryWarGarrisonReturnReq::default_instance_,
      TCountryWarGarrisonReturnReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGarrisonReturnReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGarrisonReturnReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarGarrisonReturnReq));
  TCountryWarDrawReturnReq_descriptor_ = file->message_type(29);
  static const int TCountryWarDrawReturnReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarDrawReturnReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarDrawReturnReq, gridindex_),
  };
  TCountryWarDrawReturnReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarDrawReturnReq_descriptor_,
      TCountryWarDrawReturnReq::default_instance_,
      TCountryWarDrawReturnReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarDrawReturnReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarDrawReturnReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarDrawReturnReq));
  TCountryWarMoveCityReq_descriptor_ = file->message_type(30);
  static const int TCountryWarMoveCityReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMoveCityReq, isrand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMoveCityReq, targetgridindex_),
  };
  TCountryWarMoveCityReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarMoveCityReq_descriptor_,
      TCountryWarMoveCityReq::default_instance_,
      TCountryWarMoveCityReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMoveCityReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMoveCityReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarMoveCityReq));
  TCountryWarMoveCityRsp_descriptor_ = file->message_type(31);
  static const int TCountryWarMoveCityRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMoveCityRsp, gridindex_),
  };
  TCountryWarMoveCityRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarMoveCityRsp_descriptor_,
      TCountryWarMoveCityRsp::default_instance_,
      TCountryWarMoveCityRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMoveCityRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMoveCityRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarMoveCityRsp));
  TCountryWarInitiateAssemblyReq_descriptor_ = file->message_type(32);
  static const int TCountryWarInitiateAssemblyReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarInitiateAssemblyReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarInitiateAssemblyReq, targetgridindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarInitiateAssemblyReq, durationtime_),
  };
  TCountryWarInitiateAssemblyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarInitiateAssemblyReq_descriptor_,
      TCountryWarInitiateAssemblyReq::default_instance_,
      TCountryWarInitiateAssemblyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarInitiateAssemblyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarInitiateAssemblyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarInitiateAssemblyReq));
  TCountryWarCancelAssemblyReq_descriptor_ = file->message_type(33);
  static const int TCountryWarCancelAssemblyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarCancelAssemblyReq, assemblyid_),
  };
  TCountryWarCancelAssemblyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarCancelAssemblyReq_descriptor_,
      TCountryWarCancelAssemblyReq::default_instance_,
      TCountryWarCancelAssemblyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarCancelAssemblyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarCancelAssemblyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarCancelAssemblyReq));
  TCountryWarJoinAssemblyReq_descriptor_ = file->message_type(34);
  static const int TCountryWarJoinAssemblyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarJoinAssemblyReq, assemblyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarJoinAssemblyReq, teamid_),
  };
  TCountryWarJoinAssemblyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarJoinAssemblyReq_descriptor_,
      TCountryWarJoinAssemblyReq::default_instance_,
      TCountryWarJoinAssemblyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarJoinAssemblyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarJoinAssemblyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarJoinAssemblyReq));
  TCountryWarLeaveAssemblyReq_descriptor_ = file->message_type(35);
  static const int TCountryWarLeaveAssemblyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarLeaveAssemblyReq, teamid_),
  };
  TCountryWarLeaveAssemblyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarLeaveAssemblyReq_descriptor_,
      TCountryWarLeaveAssemblyReq::default_instance_,
      TCountryWarLeaveAssemblyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarLeaveAssemblyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarLeaveAssemblyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarLeaveAssemblyReq));
  TCountryWarAssemblyTeamHeroInfo_descriptor_ = file->message_type(36);
  static const int TCountryWarAssemblyTeamHeroInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyTeamHeroInfo, htid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyTeamHeroInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyTeamHeroInfo, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyTeamHeroInfo, troopsnum_),
  };
  TCountryWarAssemblyTeamHeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarAssemblyTeamHeroInfo_descriptor_,
      TCountryWarAssemblyTeamHeroInfo::default_instance_,
      TCountryWarAssemblyTeamHeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyTeamHeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyTeamHeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarAssemblyTeamHeroInfo));
  TCountryWarAssemblyTeamInfo_descriptor_ = file->message_type(37);
  static const int TCountryWarAssemblyTeamInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyTeamInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyTeamInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyTeamInfo, teamstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyTeamInfo, maxtroopsnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyTeamInfo, troopsnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyTeamInfo, heroinfoarr_),
  };
  TCountryWarAssemblyTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarAssemblyTeamInfo_descriptor_,
      TCountryWarAssemblyTeamInfo::default_instance_,
      TCountryWarAssemblyTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarAssemblyTeamInfo));
  TCountryWarAssemblyUserInfo_descriptor_ = file->message_type(38);
  static const int TCountryWarAssemblyUserInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyUserInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyUserInfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyUserInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyUserInfo, citylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyUserInfo, cityindex_),
  };
  TCountryWarAssemblyUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarAssemblyUserInfo_descriptor_,
      TCountryWarAssemblyUserInfo::default_instance_,
      TCountryWarAssemblyUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarAssemblyUserInfo));
  TCountryWarAssemblyInfo_descriptor_ = file->message_type(39);
  static const int TCountryWarAssemblyInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyInfo, assemblyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyInfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyInfo, maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyInfo, gridindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyInfo, marchendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyInfo, endgridindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyInfo, endgridtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyInfo, endtreasureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyInfo, targetuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyInfo, arrteaminfo_),
  };
  TCountryWarAssemblyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarAssemblyInfo_descriptor_,
      TCountryWarAssemblyInfo::default_instance_,
      TCountryWarAssemblyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarAssemblyInfo));
  TCountryWarGetAssemblyListReq_descriptor_ = file->message_type(40);
  static const int TCountryWarGetAssemblyListReq_offsets_[1] = {
  };
  TCountryWarGetAssemblyListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarGetAssemblyListReq_descriptor_,
      TCountryWarGetAssemblyListReq::default_instance_,
      TCountryWarGetAssemblyListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGetAssemblyListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGetAssemblyListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarGetAssemblyListReq));
  TCountryWarGetAssemblyListRsp_descriptor_ = file->message_type(41);
  static const int TCountryWarGetAssemblyListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGetAssemblyListRsp, assemblydataarray_),
  };
  TCountryWarGetAssemblyListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarGetAssemblyListRsp_descriptor_,
      TCountryWarGetAssemblyListRsp::default_instance_,
      TCountryWarGetAssemblyListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGetAssemblyListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGetAssemblyListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarGetAssemblyListRsp));
  TCountryWarGridNotify_descriptor_ = file->message_type(42);
  static const int TCountryWarGridNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridNotify, gridarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridNotify, userarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridNotify, guildarr_),
  };
  TCountryWarGridNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarGridNotify_descriptor_,
      TCountryWarGridNotify::default_instance_,
      TCountryWarGridNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarGridNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarGridNotify));
  TCountryWarMarchNotify_descriptor_ = file->message_type(43);
  static const int TCountryWarMarchNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchNotify, marcharr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchNotify, userarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchNotify, guildarr_),
  };
  TCountryWarMarchNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarMarchNotify_descriptor_,
      TCountryWarMarchNotify::default_instance_,
      TCountryWarMarchNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarMarchNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarMarchNotify));
  TCountryWarUserGuildInfoNotify_descriptor_ = file->message_type(44);
  static const int TCountryWarUserGuildInfoNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarUserGuildInfoNotify, userarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarUserGuildInfoNotify, guildarr_),
  };
  TCountryWarUserGuildInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarUserGuildInfoNotify_descriptor_,
      TCountryWarUserGuildInfoNotify::default_instance_,
      TCountryWarUserGuildInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarUserGuildInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarUserGuildInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarUserGuildInfoNotify));
  TCountryWarAssemblyNotify_descriptor_ = file->message_type(45);
  static const int TCountryWarAssemblyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyNotify, assemblydataarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyNotify, removeassemblyid_),
  };
  TCountryWarAssemblyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCountryWarAssemblyNotify_descriptor_,
      TCountryWarAssemblyNotify::default_instance_,
      TCountryWarAssemblyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCountryWarAssemblyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCountryWarAssemblyNotify));
  EMarchType_descriptor_ = file->enum_type(0);
  EAssemblyStatus_descriptor_ = file->enum_type(1);
  EAssemblyTeamStatus_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fCountryWar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarUserInfo_descriptor_, &TCountryWarUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarGuildInfo_descriptor_, &TCountryWarGuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarGridInfo_descriptor_, &TCountryWarGridInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarGarrisonInfo_descriptor_, &TCountryWarGarrisonInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarGridUserCityInfo_descriptor_, &TCountryWarGridUserCityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarGridNpcBuildingInfo_descriptor_, &TCountryWarGridNpcBuildingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarHpInfo_descriptor_, &TCountryWarHpInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarGridFirstInfo_descriptor_, &TCountryWarGridFirstInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarGridKillSiegeInfo_descriptor_, &TCountryWarGridKillSiegeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarGridMonsterInfo_descriptor_, &TCountryWarGridMonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarGridResourceInfo_descriptor_, &TCountryWarGridResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarGridTreasureInfo_descriptor_, &TCountryWarGridTreasureInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarMarchInfo_descriptor_, &TCountryWarMarchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarEnterCountryWarReq_descriptor_, &TCountryWarEnterCountryWarReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarEnterCountryWarRsp_descriptor_, &TCountryWarEnterCountryWarRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarGetMapInfoReq_descriptor_, &TCountryWarGetMapInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarGetMapInfoRsp_descriptor_, &TCountryWarGetMapInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarAttackReq_descriptor_, &TCountryWarAttackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarCollectResourceReq_descriptor_, &TCountryWarCollectResourceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarSnatchResourceReq_descriptor_, &TCountryWarSnatchResourceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarCollectReturnReq_descriptor_, &TCountryWarCollectReturnReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarSearchTreasureReq_descriptor_, &TCountryWarSearchTreasureReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarDigTreasureReq_descriptor_, &TCountryWarDigTreasureReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarGarrisonGridReq_descriptor_, &TCountryWarGarrisonGridReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarTransportReq_descriptor_, &TCountryWarTransportReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarInvestigateGridReq_descriptor_, &TCountryWarInvestigateGridReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarMarchSpeedUpReq_descriptor_, &TCountryWarMarchSpeedUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarMarchReturnReq_descriptor_, &TCountryWarMarchReturnReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarGarrisonReturnReq_descriptor_, &TCountryWarGarrisonReturnReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarDrawReturnReq_descriptor_, &TCountryWarDrawReturnReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarMoveCityReq_descriptor_, &TCountryWarMoveCityReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarMoveCityRsp_descriptor_, &TCountryWarMoveCityRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarInitiateAssemblyReq_descriptor_, &TCountryWarInitiateAssemblyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarCancelAssemblyReq_descriptor_, &TCountryWarCancelAssemblyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarJoinAssemblyReq_descriptor_, &TCountryWarJoinAssemblyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarLeaveAssemblyReq_descriptor_, &TCountryWarLeaveAssemblyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarAssemblyTeamHeroInfo_descriptor_, &TCountryWarAssemblyTeamHeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarAssemblyTeamInfo_descriptor_, &TCountryWarAssemblyTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarAssemblyUserInfo_descriptor_, &TCountryWarAssemblyUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarAssemblyInfo_descriptor_, &TCountryWarAssemblyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarGetAssemblyListReq_descriptor_, &TCountryWarGetAssemblyListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarGetAssemblyListRsp_descriptor_, &TCountryWarGetAssemblyListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarGridNotify_descriptor_, &TCountryWarGridNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarMarchNotify_descriptor_, &TCountryWarMarchNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarUserGuildInfoNotify_descriptor_, &TCountryWarUserGuildInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCountryWarAssemblyNotify_descriptor_, &TCountryWarAssemblyNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fCountryWar_2eproto() {
  delete TCountryWarUserInfo::default_instance_;
  delete TCountryWarUserInfo_reflection_;
  delete TCountryWarGuildInfo::default_instance_;
  delete TCountryWarGuildInfo_reflection_;
  delete TCountryWarGridInfo::default_instance_;
  delete TCountryWarGridInfo_reflection_;
  delete TCountryWarGarrisonInfo::default_instance_;
  delete TCountryWarGarrisonInfo_reflection_;
  delete TCountryWarGridUserCityInfo::default_instance_;
  delete TCountryWarGridUserCityInfo_reflection_;
  delete TCountryWarGridNpcBuildingInfo::default_instance_;
  delete TCountryWarGridNpcBuildingInfo_reflection_;
  delete TCountryWarHpInfo::default_instance_;
  delete TCountryWarHpInfo_reflection_;
  delete TCountryWarGridFirstInfo::default_instance_;
  delete TCountryWarGridFirstInfo_reflection_;
  delete TCountryWarGridKillSiegeInfo::default_instance_;
  delete TCountryWarGridKillSiegeInfo_reflection_;
  delete TCountryWarGridMonsterInfo::default_instance_;
  delete TCountryWarGridMonsterInfo_reflection_;
  delete TCountryWarGridResourceInfo::default_instance_;
  delete TCountryWarGridResourceInfo_reflection_;
  delete TCountryWarGridTreasureInfo::default_instance_;
  delete TCountryWarGridTreasureInfo_reflection_;
  delete TCountryWarMarchInfo::default_instance_;
  delete TCountryWarMarchInfo_reflection_;
  delete TCountryWarEnterCountryWarReq::default_instance_;
  delete TCountryWarEnterCountryWarReq_reflection_;
  delete TCountryWarEnterCountryWarRsp::default_instance_;
  delete TCountryWarEnterCountryWarRsp_reflection_;
  delete TCountryWarGetMapInfoReq::default_instance_;
  delete TCountryWarGetMapInfoReq_reflection_;
  delete TCountryWarGetMapInfoRsp::default_instance_;
  delete TCountryWarGetMapInfoRsp_reflection_;
  delete TCountryWarAttackReq::default_instance_;
  delete TCountryWarAttackReq_reflection_;
  delete TCountryWarCollectResourceReq::default_instance_;
  delete TCountryWarCollectResourceReq_reflection_;
  delete TCountryWarSnatchResourceReq::default_instance_;
  delete TCountryWarSnatchResourceReq_reflection_;
  delete TCountryWarCollectReturnReq::default_instance_;
  delete TCountryWarCollectReturnReq_reflection_;
  delete TCountryWarSearchTreasureReq::default_instance_;
  delete TCountryWarSearchTreasureReq_reflection_;
  delete TCountryWarDigTreasureReq::default_instance_;
  delete TCountryWarDigTreasureReq_reflection_;
  delete TCountryWarGarrisonGridReq::default_instance_;
  delete TCountryWarGarrisonGridReq_reflection_;
  delete TCountryWarTransportReq::default_instance_;
  delete TCountryWarTransportReq_reflection_;
  delete TCountryWarInvestigateGridReq::default_instance_;
  delete TCountryWarInvestigateGridReq_reflection_;
  delete TCountryWarMarchSpeedUpReq::default_instance_;
  delete TCountryWarMarchSpeedUpReq_reflection_;
  delete TCountryWarMarchReturnReq::default_instance_;
  delete TCountryWarMarchReturnReq_reflection_;
  delete TCountryWarGarrisonReturnReq::default_instance_;
  delete TCountryWarGarrisonReturnReq_reflection_;
  delete TCountryWarDrawReturnReq::default_instance_;
  delete TCountryWarDrawReturnReq_reflection_;
  delete TCountryWarMoveCityReq::default_instance_;
  delete TCountryWarMoveCityReq_reflection_;
  delete TCountryWarMoveCityRsp::default_instance_;
  delete TCountryWarMoveCityRsp_reflection_;
  delete TCountryWarInitiateAssemblyReq::default_instance_;
  delete TCountryWarInitiateAssemblyReq_reflection_;
  delete TCountryWarCancelAssemblyReq::default_instance_;
  delete TCountryWarCancelAssemblyReq_reflection_;
  delete TCountryWarJoinAssemblyReq::default_instance_;
  delete TCountryWarJoinAssemblyReq_reflection_;
  delete TCountryWarLeaveAssemblyReq::default_instance_;
  delete TCountryWarLeaveAssemblyReq_reflection_;
  delete TCountryWarAssemblyTeamHeroInfo::default_instance_;
  delete TCountryWarAssemblyTeamHeroInfo_reflection_;
  delete TCountryWarAssemblyTeamInfo::default_instance_;
  delete TCountryWarAssemblyTeamInfo_reflection_;
  delete TCountryWarAssemblyUserInfo::default_instance_;
  delete TCountryWarAssemblyUserInfo_reflection_;
  delete TCountryWarAssemblyInfo::default_instance_;
  delete TCountryWarAssemblyInfo_reflection_;
  delete TCountryWarGetAssemblyListReq::default_instance_;
  delete TCountryWarGetAssemblyListReq_reflection_;
  delete TCountryWarGetAssemblyListRsp::default_instance_;
  delete TCountryWarGetAssemblyListRsp_reflection_;
  delete TCountryWarGridNotify::default_instance_;
  delete TCountryWarGridNotify_reflection_;
  delete TCountryWarMarchNotify::default_instance_;
  delete TCountryWarMarchNotify_reflection_;
  delete TCountryWarUserGuildInfoNotify::default_instance_;
  delete TCountryWarUserGuildInfoNotify_reflection_;
  delete TCountryWarAssemblyNotify::default_instance_;
  delete TCountryWarAssemblyNotify_reflection_;
}

void protobuf_AddDesc_net_2fCountryWar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024net/CountryWar.proto\022\002pb\032\026net/CommonRe"
    "ward.proto\"T\n\023TCountryWarUserInfo\022\013\n\003Uid"
    "\030\001 \001(\004\022\020\n\010ServerId\030\002 \001(\t\022\r\n\005Uname\030\003 \001(\t\022"
    "\017\n\007GuildId\030\004 \001(\004\"L\n\024TCountryWarGuildInfo"
    "\022\017\n\007GuildId\030\001 \001(\004\022\020\n\010ServerId\030\002 \001(\t\022\021\n\tG"
    "uildName\030\003 \001(\t\"\271\003\n\023TCountryWarGridInfo\022\021"
    "\n\tGridIndex\030\001 \001(\r\022\020\n\010GridType\030\002 \001(\r\0221\n\014G"
    "arrisonInfo\030\003 \001(\0132\033.pb.TCountryWarGarris"
    "onInfo\0225\n\014UserCityInfo\030\004 \001(\0132\037.pb.TCount"
    "ryWarGridUserCityInfo\0227\n\013NpcCityInfo\030\005 \001"
    "(\0132\".pb.TCountryWarGridNpcBuildingInfo\0227"
    "\n\013NpcFortInfo\030\006 \001(\0132\".pb.TCountryWarGrid"
    "NpcBuildingInfo\0223\n\013MonsterInfo\030\007 \001(\0132\036.p"
    "b.TCountryWarGridMonsterInfo\0225\n\014Resource"
    "Info\030\010 \001(\0132\037.pb.TCountryWarGridResourceI"
    "nfo\0225\n\014TreasureInfo\030\t \001(\0132\037.pb.TCountryW"
    "arGridTreasureInfo\"B\n\027TCountryWarGarriso"
    "nInfo\022\023\n\013GarrisonNum\030\001 \001(\r\022\022\n\nLastestUid"
    "\030\002 \001(\004\"\255\001\n\033TCountryWarGridUserCityInfo\022\013"
    "\n\003Uid\030\001 \001(\004\022\017\n\007CurrDur\030\002 \001(\r\022\016\n\006MaxDur\030\003"
    " \001(\r\022\023\n\013RecoverTime\030\004 \001(\004\022\024\n\014RecoverSpee"
    "d\030\005 \001(\r\022\016\n\006CityLv\030\006 \001(\r\022\021\n\tIsFreeWar\030\007 \001"
    "(\010\022\022\n\nWarEndTime\030\010 \001(\004\"\356\001\n\036TCountryWarGr"
    "idNpcBuildingInfo\022\017\n\007GuildId\030\001 \001(\004\022\022\n\nOc"
    "cupyTime\030\002 \001(\004\022\017\n\007CurrDur\030\003 \001(\r\022\023\n\013Recov"
    "erTime\030\004 \001(\004\022\021\n\tKilledNum\030\005 \001(\r\022\021\n\tReset"
    "Time\030\006 \001(\004\022*\n\013GarrHpArray\030\007 \003(\0132\025.pb.TCo"
    "untryWarHpInfo\022/\n\tFirstInfo\030\010 \001(\0132\034.pb.T"
    "CountryWarGridFirstInfo\"0\n\021TCountryWarHp"
    "Info\022\014\n\004Htid\030\001 \001(\r\022\r\n\005HpNum\030\002 \001(\r\"\305\001\n\030TC"
    "ountryWarGridFirstInfo\022\017\n\007GuildId\030\001 \001(\004\022"
    "\021\n\tGuildName\030\002 \001(\t\022\022\n\nOccupyTime\030\003 \001(\004\0228"
    "\n\016FirstSiegeInfo\030\004 \003(\0132 .pb.TCountryWarG"
    "ridKillSiegeInfo\0227\n\rFirstKillInfo\030\005 \003(\0132"
    " .pb.TCountryWarGridKillSiegeInfo\"G\n\034TCo"
    "untryWarGridKillSiegeInfo\022\013\n\003Uid\030\001 \001(\004\022\r"
    "\n\005Uname\030\002 \001(\t\022\013\n\003Num\030\003 \001(\r\"o\n\032TCountryWa"
    "rGridMonsterInfo\022-\n\016MonsterHpArray\030\001 \003(\013"
    "2\025.pb.TCountryWarHpInfo\022\021\n\tStartTime\030\002 \001"
    "(\004\022\017\n\007EndTime\030\003 \001(\004\"s\n\033TCountryWarGridRe"
    "sourceInfo\022\023\n\013ResourceNum\030\001 \001(\r\022\013\n\003Uid\030\002"
    " \001(\004\022\016\n\006TeamId\030\003 \001(\r\022\021\n\tStartTime\030\004 \001(\004\022"
    "\017\n\007EndTime\030\005 \001(\004\"\221\001\n\033TCountryWarGridTrea"
    "sureInfo\022\021\n\tStartTime\030\001 \001(\004\022\017\n\007EndTime\030\002"
    " \001(\004\022\013\n\003Uid\030\003 \001(\004\022\022\n\nTreasureId\030\004 \001(\r\022-\n"
    "\016MonsterHpArray\030\005 \003(\0132\025.pb.TCountryWarHp"
    "Info\"\321\001\n\024TCountryWarMarchInfo\022\013\n\003Uid\030\001 \001"
    "(\004\022!\n\tMarchType\030\002 \001(\0162\016.pb.EMarchType\022\016\n"
    "\006TeamId\030\003 \001(\r\022\026\n\016StartGridIndex\030\004 \001(\r\022\024\n"
    "\014EndGridIndex\030\005 \001(\r\022\021\n\tStartTime\030\006 \001(\004\022\017"
    "\n\007EndTime\030\007 \001(\004\022\023\n\013SpeedUpTime\030\010 \001(\004\022\022\n\n"
    "DisPercent\030\t \001(\r\"\037\n\035TCountryWarEnterCoun"
    "tryWarReq\"A\n\035TCountryWarEnterCountryWarR"
    "sp\022\r\n\005MapId\030\001 \001(\r\022\021\n\tGridIndex\030\002 \001(\r\"-\n\030"
    "TCountryWarGetMapInfoReq\022\021\n\tGridIndex\030\001 "
    "\001(\r\"\306\001\n\030TCountryWarGetMapInfoRsp\022(\n\007Grid"
    "Arr\030\001 \003(\0132\027.pb.TCountryWarGridInfo\022*\n\010Ma"
    "rchArr\030\002 \003(\0132\030.pb.TCountryWarMarchInfo\022("
    "\n\007UserArr\030\003 \003(\0132\027.pb.TCountryWarUserInfo"
    "\022*\n\010GuildArr\030\004 \003(\0132\030.pb.TCountryWarGuild"
    "Info\"\?\n\024TCountryWarAttackReq\022\027\n\017TargetGr"
    "idIndex\030\001 \001(\r\022\016\n\006TeamId\030\002 \001(\r\"H\n\035TCountr"
    "yWarCollectResourceReq\022\027\n\017TargetGridInde"
    "x\030\001 \001(\r\022\016\n\006TeamId\030\002 \001(\r\"G\n\034TCountryWarSn"
    "atchResourceReq\022\027\n\017TargetGridIndex\030\001 \001(\r"
    "\022\016\n\006TeamId\030\002 \001(\r\"-\n\033TCountryWarCollectRe"
    "turnReq\022\016\n\006TeamId\030\001 \001(\r\"G\n\034TCountryWarSe"
    "archTreasureReq\022\027\n\017TargetGridIndex\030\001 \001(\r"
    "\022\016\n\006HidArr\030\002 \003(\r\"D\n\031TCountryWarDigTreasu"
    "reReq\022\027\n\017TargetGridIndex\030\001 \001(\r\022\016\n\006TeamId"
    "\030\002 \001(\r\"E\n\032TCountryWarGarrisonGridReq\022\027\n\017"
    "TargetGridIndex\030\001 \001(\r\022\016\n\006TeamId\030\002 \001(\r\"b\n"
    "\027TCountryWarTransportReq\022\021\n\tTargetUid\030\001 "
    "\001(\004\022\016\n\006HidArr\030\002 \003(\r\022$\n\tRewardArr\030\003 \003(\0132\021"
    ".pb.TCommonReward\"H\n\035TCountryWarInvestig"
    "ateGridReq\022\027\n\017TargetGridIndex\030\001 \001(\r\022\016\n\006H"
    "idArr\030\002 \003(\r\"=\n\032TCountryWarMarchSpeedUpRe"
    "q\022\016\n\006TeamId\030\001 \001(\r\022\017\n\007ItemTid\030\002 \001(\r\"+\n\031TC"
    "ountryWarMarchReturnReq\022\016\n\006TeamId\030\001 \001(\r\""
    ".\n\034TCountryWarGarrisonReturnReq\022\016\n\006TeamI"
    "d\030\001 \001(\r\"=\n\030TCountryWarDrawReturnReq\022\016\n\006T"
    "eamId\030\001 \001(\r\022\021\n\tGridIndex\030\002 \001(\r\"A\n\026TCount"
    "ryWarMoveCityReq\022\016\n\006IsRand\030\001 \001(\010\022\027\n\017Targ"
    "etGridIndex\030\002 \001(\r\"+\n\026TCountryWarMoveCity"
    "Rsp\022\021\n\tGridIndex\030\001 \001(\r\"_\n\036TCountryWarIni"
    "tiateAssemblyReq\022\016\n\006TeamId\030\001 \001(\r\022\027\n\017Targ"
    "etGridIndex\030\002 \001(\r\022\024\n\014DurationTime\030\003 \001(\r\""
    "2\n\034TCountryWarCancelAssemblyReq\022\022\n\nAssem"
    "blyId\030\001 \001(\r\"@\n\032TCountryWarJoinAssemblyRe"
    "q\022\022\n\nAssemblyId\030\001 \001(\r\022\016\n\006TeamId\030\002 \001(\r\"-\n"
    "\033TCountryWarLeaveAssemblyReq\022\016\n\006TeamId\030\001"
    " \001(\r\"_\n\037TCountryWarAssemblyTeamHeroInfo\022"
    "\014\n\004Htid\030\001 \001(\r\022\r\n\005Level\030\002 \001(\r\022\014\n\004Star\030\003 \001"
    "(\r\022\021\n\tTroopsNum\030\004 \001(\r\"\360\001\n\033TCountryWarAss"
    "emblyTeamInfo\0221\n\010UserInfo\030\001 \001(\0132\037.pb.TCo"
    "untryWarAssemblyUserInfo\022\016\n\006TeamId\030\002 \001(\r"
    "\022+\n\nTeamStatus\030\003 \001(\0162\027.pb.EAssemblyTeamS"
    "tatus\022\024\n\014MaxTroopsNum\030\004 \001(\r\022\021\n\tTroopsNum"
    "\030\005 \001(\r\0228\n\013HeroInfoArr\030\006 \003(\0132#.pb.TCountr"
    "yWarAssemblyTeamHeroInfo\"n\n\033TCountryWarA"
    "ssemblyUserInfo\022\013\n\003Uid\030\001 \001(\004\022\r\n\005Uname\030\002 "
    "\001(\t\022\r\n\005Level\030\003 \001(\r\022\021\n\tCityLevel\030\004 \001(\r\022\021\n"
    "\tCityIndex\030\005 \001(\r\"\375\002\n\027TCountryWarAssembly"
    "Info\022\022\n\nAssemblyId\030\001 \001(\r\022\013\n\003Uid\030\002 \001(\004\022\r\n"
    "\005Uname\030\003 \001(\t\022\016\n\006MaxNum\030\004 \001(\r\022\021\n\tGridInde"
    "x\030\005 \001(\r\022\022\n\nCreateTime\030\006 \001(\004\022\017\n\007EndTime\030\007"
    " \001(\004\022\024\n\014MarchEndTime\030\010 \001(\004\022\024\n\014EndGridInd"
    "ex\030\t \001(\r\022\023\n\013EndGridType\030\n \001(\r\022\025\n\rEndTrea"
    "sureId\030\013 \001(\r\0227\n\016TargetUserInfo\030\014 \001(\0132\037.p"
    "b.TCountryWarAssemblyUserInfo\022#\n\006Status\030"
    "\r \001(\0162\023.pb.EAssemblyStatus\0224\n\013ArrTeamInf"
    "o\030\016 \003(\0132\037.pb.TCountryWarAssemblyTeamInfo"
    "\"\037\n\035TCountryWarGetAssemblyListReq\"W\n\035TCo"
    "untryWarGetAssemblyListRsp\0226\n\021AssemblyDa"
    "taArray\030\001 \003(\0132\033.pb.TCountryWarAssemblyIn"
    "fo\"\227\001\n\025TCountryWarGridNotify\022(\n\007GridArr\030"
    "\001 \003(\0132\027.pb.TCountryWarGridInfo\022(\n\007UserAr"
    "r\030\002 \003(\0132\027.pb.TCountryWarUserInfo\022*\n\010Guil"
    "dArr\030\003 \003(\0132\030.pb.TCountryWarGuildInfo\"\232\001\n"
    "\026TCountryWarMarchNotify\022*\n\010MarchArr\030\001 \003("
    "\0132\030.pb.TCountryWarMarchInfo\022(\n\007UserArr\030\002"
    " \003(\0132\027.pb.TCountryWarUserInfo\022*\n\010GuildAr"
    "r\030\003 \003(\0132\030.pb.TCountryWarGuildInfo\"v\n\036TCo"
    "untryWarUserGuildInfoNotify\022(\n\007UserArr\030\003"
    " \003(\0132\027.pb.TCountryWarUserInfo\022*\n\010GuildAr"
    "r\030\004 \003(\0132\030.pb.TCountryWarGuildInfo\"m\n\031TCo"
    "untryWarAssemblyNotify\0226\n\021AssemblyDataAr"
    "ray\030\001 \003(\0132\033.pb.TCountryWarAssemblyInfo\022\030"
    "\n\020RemoveAssemblyId\030\002 \003(\r*\211\006\n\nEMarchType\022"
    "\022\n\016ATTACK_MONSTER\020\001\022\022\n\016ATTACK_NPCCITY\020\002\022"
    "\022\n\016ATTACK_NPCFORT\020\003\022\023\n\017ATTACK_USERCITY\020\004"
    "\022\013\n\007COLLECT\020\005\022\017\n\013COLLECTIONG\020\006\022\022\n\016SNATCH"
    "_COLLECT\020\007\022\025\n\021SNATCH_COLLECTING\020\010\022\023\n\017SEA"
    "RCH_TREASURE\020\t\022\r\n\tSEARCHING\020\n\022\026\n\022DIG_TRE"
    "ASURE_CHEST\020\013\022\030\n\024DIG_TREASURE_MONSTER\020\014\022"
    "\014\n\010GARRISON\020\r\022\022\n\016ITEM_TRANSPORT\020\016\022\026\n\022RES"
    "OURCE_TRANSPORT\020\017\022\017\n\013INVESTIGATE\020\020\022\017\n\013AS"
    "SEMLY_ING\020\021\022\021\n\rJOIN_ASSEMBLY\020\022\022\033\n\027ASSEMB"
    "LY_ATTACK_MONSTER\020\023\022\033\n\027ASSEMBLY_ATTACK_N"
    "PCCITY\020\024\022\033\n\027ASSEMBLY_ATTACK_NPCFORT\020\025\022\034\n"
    "\030ASSEMBLY_ATTACK_USERCITY\020\026\022\035\n\031ASSEMBLY_"
    "TREASURE_MONSTER\020\027\022\027\n\023DRAW_ATTACK_NPCCIT"
    "Y\020\030\022\027\n\023DRAW_ATTACK_NPCFORT\020\031\022\030\n\024DRAW_ATT"
    "ACK_USERCITY\020\032\022 \n\034DRAW_ASSEMBLY_ATTACK_N"
    "PCCITY\020\033\022 \n\034DRAW_ASSEMBLY_ATTACK_NPCFORT"
    "\020\034\022!\n\035DRAW_ASSEMBLY_ATTACK_USERCITY\020\035\022\024\n"
    "\020DRAW_COLLECTIONG\020\036\022\027\n\023DRAW_SNATCH_COLLE"
    "CT\020\037\022\032\n\026DRAW_SNATCH_COLLECTING\020 \022\n\n\006RETU"
    "RN\020c*A\n\017EAssemblyStatus\022\023\n\017IN_THE_ASSEMB"
    "LY\020\001\022\031\n\025FINISH_ASSEMBLY_MARCH\020\002*N\n\023EAsse"
    "mblyTeamStatus\022\017\n\013NOT_ARRIVED\020\001\022\013\n\007ARRIV"
    "ED\020\002\022\013\n\007IN_DRAW\020\003\022\014\n\010FINISHED\020\004", 6071);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/CountryWar.proto", &protobuf_RegisterTypes);
  TCountryWarUserInfo::default_instance_ = new TCountryWarUserInfo();
  TCountryWarGuildInfo::default_instance_ = new TCountryWarGuildInfo();
  TCountryWarGridInfo::default_instance_ = new TCountryWarGridInfo();
  TCountryWarGarrisonInfo::default_instance_ = new TCountryWarGarrisonInfo();
  TCountryWarGridUserCityInfo::default_instance_ = new TCountryWarGridUserCityInfo();
  TCountryWarGridNpcBuildingInfo::default_instance_ = new TCountryWarGridNpcBuildingInfo();
  TCountryWarHpInfo::default_instance_ = new TCountryWarHpInfo();
  TCountryWarGridFirstInfo::default_instance_ = new TCountryWarGridFirstInfo();
  TCountryWarGridKillSiegeInfo::default_instance_ = new TCountryWarGridKillSiegeInfo();
  TCountryWarGridMonsterInfo::default_instance_ = new TCountryWarGridMonsterInfo();
  TCountryWarGridResourceInfo::default_instance_ = new TCountryWarGridResourceInfo();
  TCountryWarGridTreasureInfo::default_instance_ = new TCountryWarGridTreasureInfo();
  TCountryWarMarchInfo::default_instance_ = new TCountryWarMarchInfo();
  TCountryWarEnterCountryWarReq::default_instance_ = new TCountryWarEnterCountryWarReq();
  TCountryWarEnterCountryWarRsp::default_instance_ = new TCountryWarEnterCountryWarRsp();
  TCountryWarGetMapInfoReq::default_instance_ = new TCountryWarGetMapInfoReq();
  TCountryWarGetMapInfoRsp::default_instance_ = new TCountryWarGetMapInfoRsp();
  TCountryWarAttackReq::default_instance_ = new TCountryWarAttackReq();
  TCountryWarCollectResourceReq::default_instance_ = new TCountryWarCollectResourceReq();
  TCountryWarSnatchResourceReq::default_instance_ = new TCountryWarSnatchResourceReq();
  TCountryWarCollectReturnReq::default_instance_ = new TCountryWarCollectReturnReq();
  TCountryWarSearchTreasureReq::default_instance_ = new TCountryWarSearchTreasureReq();
  TCountryWarDigTreasureReq::default_instance_ = new TCountryWarDigTreasureReq();
  TCountryWarGarrisonGridReq::default_instance_ = new TCountryWarGarrisonGridReq();
  TCountryWarTransportReq::default_instance_ = new TCountryWarTransportReq();
  TCountryWarInvestigateGridReq::default_instance_ = new TCountryWarInvestigateGridReq();
  TCountryWarMarchSpeedUpReq::default_instance_ = new TCountryWarMarchSpeedUpReq();
  TCountryWarMarchReturnReq::default_instance_ = new TCountryWarMarchReturnReq();
  TCountryWarGarrisonReturnReq::default_instance_ = new TCountryWarGarrisonReturnReq();
  TCountryWarDrawReturnReq::default_instance_ = new TCountryWarDrawReturnReq();
  TCountryWarMoveCityReq::default_instance_ = new TCountryWarMoveCityReq();
  TCountryWarMoveCityRsp::default_instance_ = new TCountryWarMoveCityRsp();
  TCountryWarInitiateAssemblyReq::default_instance_ = new TCountryWarInitiateAssemblyReq();
  TCountryWarCancelAssemblyReq::default_instance_ = new TCountryWarCancelAssemblyReq();
  TCountryWarJoinAssemblyReq::default_instance_ = new TCountryWarJoinAssemblyReq();
  TCountryWarLeaveAssemblyReq::default_instance_ = new TCountryWarLeaveAssemblyReq();
  TCountryWarAssemblyTeamHeroInfo::default_instance_ = new TCountryWarAssemblyTeamHeroInfo();
  TCountryWarAssemblyTeamInfo::default_instance_ = new TCountryWarAssemblyTeamInfo();
  TCountryWarAssemblyUserInfo::default_instance_ = new TCountryWarAssemblyUserInfo();
  TCountryWarAssemblyInfo::default_instance_ = new TCountryWarAssemblyInfo();
  TCountryWarGetAssemblyListReq::default_instance_ = new TCountryWarGetAssemblyListReq();
  TCountryWarGetAssemblyListRsp::default_instance_ = new TCountryWarGetAssemblyListRsp();
  TCountryWarGridNotify::default_instance_ = new TCountryWarGridNotify();
  TCountryWarMarchNotify::default_instance_ = new TCountryWarMarchNotify();
  TCountryWarUserGuildInfoNotify::default_instance_ = new TCountryWarUserGuildInfoNotify();
  TCountryWarAssemblyNotify::default_instance_ = new TCountryWarAssemblyNotify();
  TCountryWarUserInfo::default_instance_->InitAsDefaultInstance();
  TCountryWarGuildInfo::default_instance_->InitAsDefaultInstance();
  TCountryWarGridInfo::default_instance_->InitAsDefaultInstance();
  TCountryWarGarrisonInfo::default_instance_->InitAsDefaultInstance();
  TCountryWarGridUserCityInfo::default_instance_->InitAsDefaultInstance();
  TCountryWarGridNpcBuildingInfo::default_instance_->InitAsDefaultInstance();
  TCountryWarHpInfo::default_instance_->InitAsDefaultInstance();
  TCountryWarGridFirstInfo::default_instance_->InitAsDefaultInstance();
  TCountryWarGridKillSiegeInfo::default_instance_->InitAsDefaultInstance();
  TCountryWarGridMonsterInfo::default_instance_->InitAsDefaultInstance();
  TCountryWarGridResourceInfo::default_instance_->InitAsDefaultInstance();
  TCountryWarGridTreasureInfo::default_instance_->InitAsDefaultInstance();
  TCountryWarMarchInfo::default_instance_->InitAsDefaultInstance();
  TCountryWarEnterCountryWarReq::default_instance_->InitAsDefaultInstance();
  TCountryWarEnterCountryWarRsp::default_instance_->InitAsDefaultInstance();
  TCountryWarGetMapInfoReq::default_instance_->InitAsDefaultInstance();
  TCountryWarGetMapInfoRsp::default_instance_->InitAsDefaultInstance();
  TCountryWarAttackReq::default_instance_->InitAsDefaultInstance();
  TCountryWarCollectResourceReq::default_instance_->InitAsDefaultInstance();
  TCountryWarSnatchResourceReq::default_instance_->InitAsDefaultInstance();
  TCountryWarCollectReturnReq::default_instance_->InitAsDefaultInstance();
  TCountryWarSearchTreasureReq::default_instance_->InitAsDefaultInstance();
  TCountryWarDigTreasureReq::default_instance_->InitAsDefaultInstance();
  TCountryWarGarrisonGridReq::default_instance_->InitAsDefaultInstance();
  TCountryWarTransportReq::default_instance_->InitAsDefaultInstance();
  TCountryWarInvestigateGridReq::default_instance_->InitAsDefaultInstance();
  TCountryWarMarchSpeedUpReq::default_instance_->InitAsDefaultInstance();
  TCountryWarMarchReturnReq::default_instance_->InitAsDefaultInstance();
  TCountryWarGarrisonReturnReq::default_instance_->InitAsDefaultInstance();
  TCountryWarDrawReturnReq::default_instance_->InitAsDefaultInstance();
  TCountryWarMoveCityReq::default_instance_->InitAsDefaultInstance();
  TCountryWarMoveCityRsp::default_instance_->InitAsDefaultInstance();
  TCountryWarInitiateAssemblyReq::default_instance_->InitAsDefaultInstance();
  TCountryWarCancelAssemblyReq::default_instance_->InitAsDefaultInstance();
  TCountryWarJoinAssemblyReq::default_instance_->InitAsDefaultInstance();
  TCountryWarLeaveAssemblyReq::default_instance_->InitAsDefaultInstance();
  TCountryWarAssemblyTeamHeroInfo::default_instance_->InitAsDefaultInstance();
  TCountryWarAssemblyTeamInfo::default_instance_->InitAsDefaultInstance();
  TCountryWarAssemblyUserInfo::default_instance_->InitAsDefaultInstance();
  TCountryWarAssemblyInfo::default_instance_->InitAsDefaultInstance();
  TCountryWarGetAssemblyListReq::default_instance_->InitAsDefaultInstance();
  TCountryWarGetAssemblyListRsp::default_instance_->InitAsDefaultInstance();
  TCountryWarGridNotify::default_instance_->InitAsDefaultInstance();
  TCountryWarMarchNotify::default_instance_->InitAsDefaultInstance();
  TCountryWarUserGuildInfoNotify::default_instance_->InitAsDefaultInstance();
  TCountryWarAssemblyNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fCountryWar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fCountryWar_2eproto {
  StaticDescriptorInitializer_net_2fCountryWar_2eproto() {
    protobuf_AddDesc_net_2fCountryWar_2eproto();
  }
} static_descriptor_initializer_net_2fCountryWar_2eproto_;
const ::google::protobuf::EnumDescriptor* EMarchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMarchType_descriptor_;
}
bool EMarchType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAssemblyStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAssemblyStatus_descriptor_;
}
bool EAssemblyStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAssemblyTeamStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAssemblyTeamStatus_descriptor_;
}
bool EAssemblyTeamStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarUserInfo::kUidFieldNumber;
const int TCountryWarUserInfo::kServerIdFieldNumber;
const int TCountryWarUserInfo::kUnameFieldNumber;
const int TCountryWarUserInfo::kGuildIdFieldNumber;
#endif  // !_MSC_VER

TCountryWarUserInfo::TCountryWarUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarUserInfo)
}

void TCountryWarUserInfo::InitAsDefaultInstance() {
}

TCountryWarUserInfo::TCountryWarUserInfo(const TCountryWarUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarUserInfo)
}

void TCountryWarUserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarUserInfo::~TCountryWarUserInfo() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarUserInfo)
  SharedDtor();
}

void TCountryWarUserInfo::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (this != default_instance_) {
  }
}

void TCountryWarUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarUserInfo_descriptor_;
}

const TCountryWarUserInfo& TCountryWarUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarUserInfo* TCountryWarUserInfo::default_instance_ = NULL;

TCountryWarUserInfo* TCountryWarUserInfo::New() const {
  return new TCountryWarUserInfo;
}

void TCountryWarUserInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
    guildid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Uname;
        break;
      }

      // optional string Uname = 3;
      case 3: {
        if (tag == 26) {
         parse_Uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_GuildId;
        break;
      }

      // optional uint64 GuildId = 4;
      case 4: {
        if (tag == 32) {
         parse_GuildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarUserInfo)
  return false;
#undef DO_
}

void TCountryWarUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarUserInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  // optional string Uname = 3;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uname(), output);
  }

  // optional uint64 GuildId = 4;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarUserInfo)
}

::google::protobuf::uint8* TCountryWarUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarUserInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  // optional string Uname = 3;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uname(), target);
  }

  // optional uint64 GuildId = 4;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarUserInfo)
  return target;
}

int TCountryWarUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional string Uname = 3;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint64 GuildId = 4;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarUserInfo::MergeFrom(const TCountryWarUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarUserInfo::CopyFrom(const TCountryWarUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarUserInfo::IsInitialized() const {

  return true;
}

void TCountryWarUserInfo::Swap(TCountryWarUserInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(serverid_, other->serverid_);
    std::swap(uname_, other->uname_);
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarUserInfo_descriptor_;
  metadata.reflection = TCountryWarUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarGuildInfo::kGuildIdFieldNumber;
const int TCountryWarGuildInfo::kServerIdFieldNumber;
const int TCountryWarGuildInfo::kGuildNameFieldNumber;
#endif  // !_MSC_VER

TCountryWarGuildInfo::TCountryWarGuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarGuildInfo)
}

void TCountryWarGuildInfo::InitAsDefaultInstance() {
}

TCountryWarGuildInfo::TCountryWarGuildInfo(const TCountryWarGuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarGuildInfo)
}

void TCountryWarGuildInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarGuildInfo::~TCountryWarGuildInfo() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarGuildInfo)
  SharedDtor();
}

void TCountryWarGuildInfo::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void TCountryWarGuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarGuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarGuildInfo_descriptor_;
}

const TCountryWarGuildInfo& TCountryWarGuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarGuildInfo* TCountryWarGuildInfo::default_instance_ = NULL;

TCountryWarGuildInfo* TCountryWarGuildInfo::New() const {
  return new TCountryWarGuildInfo;
}

void TCountryWarGuildInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarGuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarGuildInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GuildName;
        break;
      }

      // optional string GuildName = 3;
      case 3: {
        if (tag == 26) {
         parse_GuildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarGuildInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarGuildInfo)
  return false;
#undef DO_
}

void TCountryWarGuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarGuildInfo)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  // optional string GuildName = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guildname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarGuildInfo)
}

::google::protobuf::uint8* TCountryWarGuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarGuildInfo)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  // optional string GuildName = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guildname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarGuildInfo)
  return target;
}

int TCountryWarGuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional string GuildName = 3;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarGuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarGuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarGuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarGuildInfo::MergeFrom(const TCountryWarGuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarGuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarGuildInfo::CopyFrom(const TCountryWarGuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarGuildInfo::IsInitialized() const {

  return true;
}

void TCountryWarGuildInfo::Swap(TCountryWarGuildInfo* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(serverid_, other->serverid_);
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarGuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarGuildInfo_descriptor_;
  metadata.reflection = TCountryWarGuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarGridInfo::kGridIndexFieldNumber;
const int TCountryWarGridInfo::kGridTypeFieldNumber;
const int TCountryWarGridInfo::kGarrisonInfoFieldNumber;
const int TCountryWarGridInfo::kUserCityInfoFieldNumber;
const int TCountryWarGridInfo::kNpcCityInfoFieldNumber;
const int TCountryWarGridInfo::kNpcFortInfoFieldNumber;
const int TCountryWarGridInfo::kMonsterInfoFieldNumber;
const int TCountryWarGridInfo::kResourceInfoFieldNumber;
const int TCountryWarGridInfo::kTreasureInfoFieldNumber;
#endif  // !_MSC_VER

TCountryWarGridInfo::TCountryWarGridInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarGridInfo)
}

void TCountryWarGridInfo::InitAsDefaultInstance() {
  garrisoninfo_ = const_cast< ::pb::TCountryWarGarrisonInfo*>(&::pb::TCountryWarGarrisonInfo::default_instance());
  usercityinfo_ = const_cast< ::pb::TCountryWarGridUserCityInfo*>(&::pb::TCountryWarGridUserCityInfo::default_instance());
  npccityinfo_ = const_cast< ::pb::TCountryWarGridNpcBuildingInfo*>(&::pb::TCountryWarGridNpcBuildingInfo::default_instance());
  npcfortinfo_ = const_cast< ::pb::TCountryWarGridNpcBuildingInfo*>(&::pb::TCountryWarGridNpcBuildingInfo::default_instance());
  monsterinfo_ = const_cast< ::pb::TCountryWarGridMonsterInfo*>(&::pb::TCountryWarGridMonsterInfo::default_instance());
  resourceinfo_ = const_cast< ::pb::TCountryWarGridResourceInfo*>(&::pb::TCountryWarGridResourceInfo::default_instance());
  treasureinfo_ = const_cast< ::pb::TCountryWarGridTreasureInfo*>(&::pb::TCountryWarGridTreasureInfo::default_instance());
}

TCountryWarGridInfo::TCountryWarGridInfo(const TCountryWarGridInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarGridInfo)
}

void TCountryWarGridInfo::SharedCtor() {
  _cached_size_ = 0;
  gridindex_ = 0u;
  gridtype_ = 0u;
  garrisoninfo_ = NULL;
  usercityinfo_ = NULL;
  npccityinfo_ = NULL;
  npcfortinfo_ = NULL;
  monsterinfo_ = NULL;
  resourceinfo_ = NULL;
  treasureinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarGridInfo::~TCountryWarGridInfo() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarGridInfo)
  SharedDtor();
}

void TCountryWarGridInfo::SharedDtor() {
  if (this != default_instance_) {
    delete garrisoninfo_;
    delete usercityinfo_;
    delete npccityinfo_;
    delete npcfortinfo_;
    delete monsterinfo_;
    delete resourceinfo_;
    delete treasureinfo_;
  }
}

void TCountryWarGridInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarGridInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarGridInfo_descriptor_;
}

const TCountryWarGridInfo& TCountryWarGridInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarGridInfo* TCountryWarGridInfo::default_instance_ = NULL;

TCountryWarGridInfo* TCountryWarGridInfo::New() const {
  return new TCountryWarGridInfo;
}

void TCountryWarGridInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarGridInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gridindex_, gridtype_);
    if (has_garrisoninfo()) {
      if (garrisoninfo_ != NULL) garrisoninfo_->::pb::TCountryWarGarrisonInfo::Clear();
    }
    if (has_usercityinfo()) {
      if (usercityinfo_ != NULL) usercityinfo_->::pb::TCountryWarGridUserCityInfo::Clear();
    }
    if (has_npccityinfo()) {
      if (npccityinfo_ != NULL) npccityinfo_->::pb::TCountryWarGridNpcBuildingInfo::Clear();
    }
    if (has_npcfortinfo()) {
      if (npcfortinfo_ != NULL) npcfortinfo_->::pb::TCountryWarGridNpcBuildingInfo::Clear();
    }
    if (has_monsterinfo()) {
      if (monsterinfo_ != NULL) monsterinfo_->::pb::TCountryWarGridMonsterInfo::Clear();
    }
    if (has_resourceinfo()) {
      if (resourceinfo_ != NULL) resourceinfo_->::pb::TCountryWarGridResourceInfo::Clear();
    }
  }
  if (has_treasureinfo()) {
    if (treasureinfo_ != NULL) treasureinfo_->::pb::TCountryWarGridTreasureInfo::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarGridInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarGridInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GridIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridindex_)));
          set_has_gridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GridType;
        break;
      }

      // optional uint32 GridType = 2;
      case 2: {
        if (tag == 16) {
         parse_GridType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridtype_)));
          set_has_gridtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GarrisonInfo;
        break;
      }

      // optional .pb.TCountryWarGarrisonInfo GarrisonInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_GarrisonInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_garrisoninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UserCityInfo;
        break;
      }

      // optional .pb.TCountryWarGridUserCityInfo UserCityInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_UserCityInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usercityinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_NpcCityInfo;
        break;
      }

      // optional .pb.TCountryWarGridNpcBuildingInfo NpcCityInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_NpcCityInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_npccityinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_NpcFortInfo;
        break;
      }

      // optional .pb.TCountryWarGridNpcBuildingInfo NpcFortInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_NpcFortInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_npcfortinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_MonsterInfo;
        break;
      }

      // optional .pb.TCountryWarGridMonsterInfo MonsterInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_MonsterInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monsterinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ResourceInfo;
        break;
      }

      // optional .pb.TCountryWarGridResourceInfo ResourceInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_ResourceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resourceinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_TreasureInfo;
        break;
      }

      // optional .pb.TCountryWarGridTreasureInfo TreasureInfo = 9;
      case 9: {
        if (tag == 74) {
         parse_TreasureInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treasureinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarGridInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarGridInfo)
  return false;
#undef DO_
}

void TCountryWarGridInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarGridInfo)
  // optional uint32 GridIndex = 1;
  if (has_gridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gridindex(), output);
  }

  // optional uint32 GridType = 2;
  if (has_gridtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gridtype(), output);
  }

  // optional .pb.TCountryWarGarrisonInfo GarrisonInfo = 3;
  if (has_garrisoninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->garrisoninfo(), output);
  }

  // optional .pb.TCountryWarGridUserCityInfo UserCityInfo = 4;
  if (has_usercityinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->usercityinfo(), output);
  }

  // optional .pb.TCountryWarGridNpcBuildingInfo NpcCityInfo = 5;
  if (has_npccityinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->npccityinfo(), output);
  }

  // optional .pb.TCountryWarGridNpcBuildingInfo NpcFortInfo = 6;
  if (has_npcfortinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->npcfortinfo(), output);
  }

  // optional .pb.TCountryWarGridMonsterInfo MonsterInfo = 7;
  if (has_monsterinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->monsterinfo(), output);
  }

  // optional .pb.TCountryWarGridResourceInfo ResourceInfo = 8;
  if (has_resourceinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->resourceinfo(), output);
  }

  // optional .pb.TCountryWarGridTreasureInfo TreasureInfo = 9;
  if (has_treasureinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->treasureinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarGridInfo)
}

::google::protobuf::uint8* TCountryWarGridInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarGridInfo)
  // optional uint32 GridIndex = 1;
  if (has_gridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gridindex(), target);
  }

  // optional uint32 GridType = 2;
  if (has_gridtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gridtype(), target);
  }

  // optional .pb.TCountryWarGarrisonInfo GarrisonInfo = 3;
  if (has_garrisoninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->garrisoninfo(), target);
  }

  // optional .pb.TCountryWarGridUserCityInfo UserCityInfo = 4;
  if (has_usercityinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->usercityinfo(), target);
  }

  // optional .pb.TCountryWarGridNpcBuildingInfo NpcCityInfo = 5;
  if (has_npccityinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->npccityinfo(), target);
  }

  // optional .pb.TCountryWarGridNpcBuildingInfo NpcFortInfo = 6;
  if (has_npcfortinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->npcfortinfo(), target);
  }

  // optional .pb.TCountryWarGridMonsterInfo MonsterInfo = 7;
  if (has_monsterinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->monsterinfo(), target);
  }

  // optional .pb.TCountryWarGridResourceInfo ResourceInfo = 8;
  if (has_resourceinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->resourceinfo(), target);
  }

  // optional .pb.TCountryWarGridTreasureInfo TreasureInfo = 9;
  if (has_treasureinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->treasureinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarGridInfo)
  return target;
}

int TCountryWarGridInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GridIndex = 1;
    if (has_gridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridindex());
    }

    // optional uint32 GridType = 2;
    if (has_gridtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridtype());
    }

    // optional .pb.TCountryWarGarrisonInfo GarrisonInfo = 3;
    if (has_garrisoninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->garrisoninfo());
    }

    // optional .pb.TCountryWarGridUserCityInfo UserCityInfo = 4;
    if (has_usercityinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usercityinfo());
    }

    // optional .pb.TCountryWarGridNpcBuildingInfo NpcCityInfo = 5;
    if (has_npccityinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->npccityinfo());
    }

    // optional .pb.TCountryWarGridNpcBuildingInfo NpcFortInfo = 6;
    if (has_npcfortinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->npcfortinfo());
    }

    // optional .pb.TCountryWarGridMonsterInfo MonsterInfo = 7;
    if (has_monsterinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monsterinfo());
    }

    // optional .pb.TCountryWarGridResourceInfo ResourceInfo = 8;
    if (has_resourceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resourceinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.TCountryWarGridTreasureInfo TreasureInfo = 9;
    if (has_treasureinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treasureinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarGridInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarGridInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarGridInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarGridInfo::MergeFrom(const TCountryWarGridInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gridindex()) {
      set_gridindex(from.gridindex());
    }
    if (from.has_gridtype()) {
      set_gridtype(from.gridtype());
    }
    if (from.has_garrisoninfo()) {
      mutable_garrisoninfo()->::pb::TCountryWarGarrisonInfo::MergeFrom(from.garrisoninfo());
    }
    if (from.has_usercityinfo()) {
      mutable_usercityinfo()->::pb::TCountryWarGridUserCityInfo::MergeFrom(from.usercityinfo());
    }
    if (from.has_npccityinfo()) {
      mutable_npccityinfo()->::pb::TCountryWarGridNpcBuildingInfo::MergeFrom(from.npccityinfo());
    }
    if (from.has_npcfortinfo()) {
      mutable_npcfortinfo()->::pb::TCountryWarGridNpcBuildingInfo::MergeFrom(from.npcfortinfo());
    }
    if (from.has_monsterinfo()) {
      mutable_monsterinfo()->::pb::TCountryWarGridMonsterInfo::MergeFrom(from.monsterinfo());
    }
    if (from.has_resourceinfo()) {
      mutable_resourceinfo()->::pb::TCountryWarGridResourceInfo::MergeFrom(from.resourceinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_treasureinfo()) {
      mutable_treasureinfo()->::pb::TCountryWarGridTreasureInfo::MergeFrom(from.treasureinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarGridInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarGridInfo::CopyFrom(const TCountryWarGridInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarGridInfo::IsInitialized() const {

  return true;
}

void TCountryWarGridInfo::Swap(TCountryWarGridInfo* other) {
  if (other != this) {
    std::swap(gridindex_, other->gridindex_);
    std::swap(gridtype_, other->gridtype_);
    std::swap(garrisoninfo_, other->garrisoninfo_);
    std::swap(usercityinfo_, other->usercityinfo_);
    std::swap(npccityinfo_, other->npccityinfo_);
    std::swap(npcfortinfo_, other->npcfortinfo_);
    std::swap(monsterinfo_, other->monsterinfo_);
    std::swap(resourceinfo_, other->resourceinfo_);
    std::swap(treasureinfo_, other->treasureinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarGridInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarGridInfo_descriptor_;
  metadata.reflection = TCountryWarGridInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarGarrisonInfo::kGarrisonNumFieldNumber;
const int TCountryWarGarrisonInfo::kLastestUidFieldNumber;
#endif  // !_MSC_VER

TCountryWarGarrisonInfo::TCountryWarGarrisonInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarGarrisonInfo)
}

void TCountryWarGarrisonInfo::InitAsDefaultInstance() {
}

TCountryWarGarrisonInfo::TCountryWarGarrisonInfo(const TCountryWarGarrisonInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarGarrisonInfo)
}

void TCountryWarGarrisonInfo::SharedCtor() {
  _cached_size_ = 0;
  garrisonnum_ = 0u;
  lastestuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarGarrisonInfo::~TCountryWarGarrisonInfo() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarGarrisonInfo)
  SharedDtor();
}

void TCountryWarGarrisonInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarGarrisonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarGarrisonInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarGarrisonInfo_descriptor_;
}

const TCountryWarGarrisonInfo& TCountryWarGarrisonInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarGarrisonInfo* TCountryWarGarrisonInfo::default_instance_ = NULL;

TCountryWarGarrisonInfo* TCountryWarGarrisonInfo::New() const {
  return new TCountryWarGarrisonInfo;
}

void TCountryWarGarrisonInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarGarrisonInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(lastestuid_, garrisonnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarGarrisonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarGarrisonInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GarrisonNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &garrisonnum_)));
          set_has_garrisonnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LastestUid;
        break;
      }

      // optional uint64 LastestUid = 2;
      case 2: {
        if (tag == 16) {
         parse_LastestUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastestuid_)));
          set_has_lastestuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarGarrisonInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarGarrisonInfo)
  return false;
#undef DO_
}

void TCountryWarGarrisonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarGarrisonInfo)
  // optional uint32 GarrisonNum = 1;
  if (has_garrisonnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->garrisonnum(), output);
  }

  // optional uint64 LastestUid = 2;
  if (has_lastestuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lastestuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarGarrisonInfo)
}

::google::protobuf::uint8* TCountryWarGarrisonInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarGarrisonInfo)
  // optional uint32 GarrisonNum = 1;
  if (has_garrisonnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->garrisonnum(), target);
  }

  // optional uint64 LastestUid = 2;
  if (has_lastestuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lastestuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarGarrisonInfo)
  return target;
}

int TCountryWarGarrisonInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GarrisonNum = 1;
    if (has_garrisonnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->garrisonnum());
    }

    // optional uint64 LastestUid = 2;
    if (has_lastestuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastestuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarGarrisonInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarGarrisonInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarGarrisonInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarGarrisonInfo::MergeFrom(const TCountryWarGarrisonInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_garrisonnum()) {
      set_garrisonnum(from.garrisonnum());
    }
    if (from.has_lastestuid()) {
      set_lastestuid(from.lastestuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarGarrisonInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarGarrisonInfo::CopyFrom(const TCountryWarGarrisonInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarGarrisonInfo::IsInitialized() const {

  return true;
}

void TCountryWarGarrisonInfo::Swap(TCountryWarGarrisonInfo* other) {
  if (other != this) {
    std::swap(garrisonnum_, other->garrisonnum_);
    std::swap(lastestuid_, other->lastestuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarGarrisonInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarGarrisonInfo_descriptor_;
  metadata.reflection = TCountryWarGarrisonInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarGridUserCityInfo::kUidFieldNumber;
const int TCountryWarGridUserCityInfo::kCurrDurFieldNumber;
const int TCountryWarGridUserCityInfo::kMaxDurFieldNumber;
const int TCountryWarGridUserCityInfo::kRecoverTimeFieldNumber;
const int TCountryWarGridUserCityInfo::kRecoverSpeedFieldNumber;
const int TCountryWarGridUserCityInfo::kCityLvFieldNumber;
const int TCountryWarGridUserCityInfo::kIsFreeWarFieldNumber;
const int TCountryWarGridUserCityInfo::kWarEndTimeFieldNumber;
#endif  // !_MSC_VER

TCountryWarGridUserCityInfo::TCountryWarGridUserCityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarGridUserCityInfo)
}

void TCountryWarGridUserCityInfo::InitAsDefaultInstance() {
}

TCountryWarGridUserCityInfo::TCountryWarGridUserCityInfo(const TCountryWarGridUserCityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarGridUserCityInfo)
}

void TCountryWarGridUserCityInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  currdur_ = 0u;
  maxdur_ = 0u;
  recovertime_ = GOOGLE_ULONGLONG(0);
  recoverspeed_ = 0u;
  citylv_ = 0u;
  isfreewar_ = false;
  warendtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarGridUserCityInfo::~TCountryWarGridUserCityInfo() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarGridUserCityInfo)
  SharedDtor();
}

void TCountryWarGridUserCityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarGridUserCityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarGridUserCityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarGridUserCityInfo_descriptor_;
}

const TCountryWarGridUserCityInfo& TCountryWarGridUserCityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarGridUserCityInfo* TCountryWarGridUserCityInfo::default_instance_ = NULL;

TCountryWarGridUserCityInfo* TCountryWarGridUserCityInfo::New() const {
  return new TCountryWarGridUserCityInfo;
}

void TCountryWarGridUserCityInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarGridUserCityInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, isfreewar_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarGridUserCityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarGridUserCityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CurrDur;
        break;
      }

      // optional uint32 CurrDur = 2;
      case 2: {
        if (tag == 16) {
         parse_CurrDur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currdur_)));
          set_has_currdur();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MaxDur;
        break;
      }

      // optional uint32 MaxDur = 3;
      case 3: {
        if (tag == 24) {
         parse_MaxDur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxdur_)));
          set_has_maxdur();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RecoverTime;
        break;
      }

      // optional uint64 RecoverTime = 4;
      case 4: {
        if (tag == 32) {
         parse_RecoverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recovertime_)));
          set_has_recovertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_RecoverSpeed;
        break;
      }

      // optional uint32 RecoverSpeed = 5;
      case 5: {
        if (tag == 40) {
         parse_RecoverSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recoverspeed_)));
          set_has_recoverspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_CityLv;
        break;
      }

      // optional uint32 CityLv = 6;
      case 6: {
        if (tag == 48) {
         parse_CityLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &citylv_)));
          set_has_citylv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_IsFreeWar;
        break;
      }

      // optional bool IsFreeWar = 7;
      case 7: {
        if (tag == 56) {
         parse_IsFreeWar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfreewar_)));
          set_has_isfreewar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_WarEndTime;
        break;
      }

      // optional uint64 WarEndTime = 8;
      case 8: {
        if (tag == 64) {
         parse_WarEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &warendtime_)));
          set_has_warendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarGridUserCityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarGridUserCityInfo)
  return false;
#undef DO_
}

void TCountryWarGridUserCityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarGridUserCityInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 CurrDur = 2;
  if (has_currdur()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->currdur(), output);
  }

  // optional uint32 MaxDur = 3;
  if (has_maxdur()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxdur(), output);
  }

  // optional uint64 RecoverTime = 4;
  if (has_recovertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->recovertime(), output);
  }

  // optional uint32 RecoverSpeed = 5;
  if (has_recoverspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->recoverspeed(), output);
  }

  // optional uint32 CityLv = 6;
  if (has_citylv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->citylv(), output);
  }

  // optional bool IsFreeWar = 7;
  if (has_isfreewar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isfreewar(), output);
  }

  // optional uint64 WarEndTime = 8;
  if (has_warendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->warendtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarGridUserCityInfo)
}

::google::protobuf::uint8* TCountryWarGridUserCityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarGridUserCityInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 CurrDur = 2;
  if (has_currdur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->currdur(), target);
  }

  // optional uint32 MaxDur = 3;
  if (has_maxdur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxdur(), target);
  }

  // optional uint64 RecoverTime = 4;
  if (has_recovertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->recovertime(), target);
  }

  // optional uint32 RecoverSpeed = 5;
  if (has_recoverspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->recoverspeed(), target);
  }

  // optional uint32 CityLv = 6;
  if (has_citylv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->citylv(), target);
  }

  // optional bool IsFreeWar = 7;
  if (has_isfreewar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isfreewar(), target);
  }

  // optional uint64 WarEndTime = 8;
  if (has_warendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->warendtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarGridUserCityInfo)
  return target;
}

int TCountryWarGridUserCityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 CurrDur = 2;
    if (has_currdur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currdur());
    }

    // optional uint32 MaxDur = 3;
    if (has_maxdur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxdur());
    }

    // optional uint64 RecoverTime = 4;
    if (has_recovertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recovertime());
    }

    // optional uint32 RecoverSpeed = 5;
    if (has_recoverspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recoverspeed());
    }

    // optional uint32 CityLv = 6;
    if (has_citylv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->citylv());
    }

    // optional bool IsFreeWar = 7;
    if (has_isfreewar()) {
      total_size += 1 + 1;
    }

    // optional uint64 WarEndTime = 8;
    if (has_warendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->warendtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarGridUserCityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarGridUserCityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarGridUserCityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarGridUserCityInfo::MergeFrom(const TCountryWarGridUserCityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_currdur()) {
      set_currdur(from.currdur());
    }
    if (from.has_maxdur()) {
      set_maxdur(from.maxdur());
    }
    if (from.has_recovertime()) {
      set_recovertime(from.recovertime());
    }
    if (from.has_recoverspeed()) {
      set_recoverspeed(from.recoverspeed());
    }
    if (from.has_citylv()) {
      set_citylv(from.citylv());
    }
    if (from.has_isfreewar()) {
      set_isfreewar(from.isfreewar());
    }
    if (from.has_warendtime()) {
      set_warendtime(from.warendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarGridUserCityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarGridUserCityInfo::CopyFrom(const TCountryWarGridUserCityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarGridUserCityInfo::IsInitialized() const {

  return true;
}

void TCountryWarGridUserCityInfo::Swap(TCountryWarGridUserCityInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(currdur_, other->currdur_);
    std::swap(maxdur_, other->maxdur_);
    std::swap(recovertime_, other->recovertime_);
    std::swap(recoverspeed_, other->recoverspeed_);
    std::swap(citylv_, other->citylv_);
    std::swap(isfreewar_, other->isfreewar_);
    std::swap(warendtime_, other->warendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarGridUserCityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarGridUserCityInfo_descriptor_;
  metadata.reflection = TCountryWarGridUserCityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarGridNpcBuildingInfo::kGuildIdFieldNumber;
const int TCountryWarGridNpcBuildingInfo::kOccupyTimeFieldNumber;
const int TCountryWarGridNpcBuildingInfo::kCurrDurFieldNumber;
const int TCountryWarGridNpcBuildingInfo::kRecoverTimeFieldNumber;
const int TCountryWarGridNpcBuildingInfo::kKilledNumFieldNumber;
const int TCountryWarGridNpcBuildingInfo::kResetTimeFieldNumber;
const int TCountryWarGridNpcBuildingInfo::kGarrHpArrayFieldNumber;
const int TCountryWarGridNpcBuildingInfo::kFirstInfoFieldNumber;
#endif  // !_MSC_VER

TCountryWarGridNpcBuildingInfo::TCountryWarGridNpcBuildingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarGridNpcBuildingInfo)
}

void TCountryWarGridNpcBuildingInfo::InitAsDefaultInstance() {
  firstinfo_ = const_cast< ::pb::TCountryWarGridFirstInfo*>(&::pb::TCountryWarGridFirstInfo::default_instance());
}

TCountryWarGridNpcBuildingInfo::TCountryWarGridNpcBuildingInfo(const TCountryWarGridNpcBuildingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarGridNpcBuildingInfo)
}

void TCountryWarGridNpcBuildingInfo::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  occupytime_ = GOOGLE_ULONGLONG(0);
  currdur_ = 0u;
  recovertime_ = GOOGLE_ULONGLONG(0);
  killednum_ = 0u;
  resettime_ = GOOGLE_ULONGLONG(0);
  firstinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarGridNpcBuildingInfo::~TCountryWarGridNpcBuildingInfo() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarGridNpcBuildingInfo)
  SharedDtor();
}

void TCountryWarGridNpcBuildingInfo::SharedDtor() {
  if (this != default_instance_) {
    delete firstinfo_;
  }
}

void TCountryWarGridNpcBuildingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarGridNpcBuildingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarGridNpcBuildingInfo_descriptor_;
}

const TCountryWarGridNpcBuildingInfo& TCountryWarGridNpcBuildingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarGridNpcBuildingInfo* TCountryWarGridNpcBuildingInfo::default_instance_ = NULL;

TCountryWarGridNpcBuildingInfo* TCountryWarGridNpcBuildingInfo::New() const {
  return new TCountryWarGridNpcBuildingInfo;
}

void TCountryWarGridNpcBuildingInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarGridNpcBuildingInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(guildid_, resettime_);
    if (has_firstinfo()) {
      if (firstinfo_ != NULL) firstinfo_->::pb::TCountryWarGridFirstInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  garrhparray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarGridNpcBuildingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarGridNpcBuildingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OccupyTime;
        break;
      }

      // optional uint64 OccupyTime = 2;
      case 2: {
        if (tag == 16) {
         parse_OccupyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &occupytime_)));
          set_has_occupytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CurrDur;
        break;
      }

      // optional uint32 CurrDur = 3;
      case 3: {
        if (tag == 24) {
         parse_CurrDur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currdur_)));
          set_has_currdur();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RecoverTime;
        break;
      }

      // optional uint64 RecoverTime = 4;
      case 4: {
        if (tag == 32) {
         parse_RecoverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recovertime_)));
          set_has_recovertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_KilledNum;
        break;
      }

      // optional uint32 KilledNum = 5;
      case 5: {
        if (tag == 40) {
         parse_KilledNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killednum_)));
          set_has_killednum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ResetTime;
        break;
      }

      // optional uint64 ResetTime = 6;
      case 6: {
        if (tag == 48) {
         parse_ResetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_GarrHpArray;
        break;
      }

      // repeated .pb.TCountryWarHpInfo GarrHpArray = 7;
      case 7: {
        if (tag == 58) {
         parse_GarrHpArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_garrhparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_GarrHpArray;
        if (input->ExpectTag(66)) goto parse_FirstInfo;
        break;
      }

      // optional .pb.TCountryWarGridFirstInfo FirstInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_FirstInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_firstinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarGridNpcBuildingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarGridNpcBuildingInfo)
  return false;
#undef DO_
}

void TCountryWarGridNpcBuildingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarGridNpcBuildingInfo)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional uint64 OccupyTime = 2;
  if (has_occupytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->occupytime(), output);
  }

  // optional uint32 CurrDur = 3;
  if (has_currdur()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->currdur(), output);
  }

  // optional uint64 RecoverTime = 4;
  if (has_recovertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->recovertime(), output);
  }

  // optional uint32 KilledNum = 5;
  if (has_killednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->killednum(), output);
  }

  // optional uint64 ResetTime = 6;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->resettime(), output);
  }

  // repeated .pb.TCountryWarHpInfo GarrHpArray = 7;
  for (int i = 0; i < this->garrhparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->garrhparray(i), output);
  }

  // optional .pb.TCountryWarGridFirstInfo FirstInfo = 8;
  if (has_firstinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->firstinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarGridNpcBuildingInfo)
}

::google::protobuf::uint8* TCountryWarGridNpcBuildingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarGridNpcBuildingInfo)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional uint64 OccupyTime = 2;
  if (has_occupytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->occupytime(), target);
  }

  // optional uint32 CurrDur = 3;
  if (has_currdur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->currdur(), target);
  }

  // optional uint64 RecoverTime = 4;
  if (has_recovertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->recovertime(), target);
  }

  // optional uint32 KilledNum = 5;
  if (has_killednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->killednum(), target);
  }

  // optional uint64 ResetTime = 6;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->resettime(), target);
  }

  // repeated .pb.TCountryWarHpInfo GarrHpArray = 7;
  for (int i = 0; i < this->garrhparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->garrhparray(i), target);
  }

  // optional .pb.TCountryWarGridFirstInfo FirstInfo = 8;
  if (has_firstinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->firstinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarGridNpcBuildingInfo)
  return target;
}

int TCountryWarGridNpcBuildingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint64 OccupyTime = 2;
    if (has_occupytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->occupytime());
    }

    // optional uint32 CurrDur = 3;
    if (has_currdur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currdur());
    }

    // optional uint64 RecoverTime = 4;
    if (has_recovertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recovertime());
    }

    // optional uint32 KilledNum = 5;
    if (has_killednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killednum());
    }

    // optional uint64 ResetTime = 6;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resettime());
    }

    // optional .pb.TCountryWarGridFirstInfo FirstInfo = 8;
    if (has_firstinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->firstinfo());
    }

  }
  // repeated .pb.TCountryWarHpInfo GarrHpArray = 7;
  total_size += 1 * this->garrhparray_size();
  for (int i = 0; i < this->garrhparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->garrhparray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarGridNpcBuildingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarGridNpcBuildingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarGridNpcBuildingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarGridNpcBuildingInfo::MergeFrom(const TCountryWarGridNpcBuildingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  garrhparray_.MergeFrom(from.garrhparray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_occupytime()) {
      set_occupytime(from.occupytime());
    }
    if (from.has_currdur()) {
      set_currdur(from.currdur());
    }
    if (from.has_recovertime()) {
      set_recovertime(from.recovertime());
    }
    if (from.has_killednum()) {
      set_killednum(from.killednum());
    }
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
    if (from.has_firstinfo()) {
      mutable_firstinfo()->::pb::TCountryWarGridFirstInfo::MergeFrom(from.firstinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarGridNpcBuildingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarGridNpcBuildingInfo::CopyFrom(const TCountryWarGridNpcBuildingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarGridNpcBuildingInfo::IsInitialized() const {

  return true;
}

void TCountryWarGridNpcBuildingInfo::Swap(TCountryWarGridNpcBuildingInfo* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(occupytime_, other->occupytime_);
    std::swap(currdur_, other->currdur_);
    std::swap(recovertime_, other->recovertime_);
    std::swap(killednum_, other->killednum_);
    std::swap(resettime_, other->resettime_);
    garrhparray_.Swap(&other->garrhparray_);
    std::swap(firstinfo_, other->firstinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarGridNpcBuildingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarGridNpcBuildingInfo_descriptor_;
  metadata.reflection = TCountryWarGridNpcBuildingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarHpInfo::kHtidFieldNumber;
const int TCountryWarHpInfo::kHpNumFieldNumber;
#endif  // !_MSC_VER

TCountryWarHpInfo::TCountryWarHpInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarHpInfo)
}

void TCountryWarHpInfo::InitAsDefaultInstance() {
}

TCountryWarHpInfo::TCountryWarHpInfo(const TCountryWarHpInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarHpInfo)
}

void TCountryWarHpInfo::SharedCtor() {
  _cached_size_ = 0;
  htid_ = 0u;
  hpnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarHpInfo::~TCountryWarHpInfo() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarHpInfo)
  SharedDtor();
}

void TCountryWarHpInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarHpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarHpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarHpInfo_descriptor_;
}

const TCountryWarHpInfo& TCountryWarHpInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarHpInfo* TCountryWarHpInfo::default_instance_ = NULL;

TCountryWarHpInfo* TCountryWarHpInfo::New() const {
  return new TCountryWarHpInfo;
}

void TCountryWarHpInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarHpInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(htid_, hpnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarHpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarHpInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Htid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HpNum;
        break;
      }

      // optional uint32 HpNum = 2;
      case 2: {
        if (tag == 16) {
         parse_HpNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hpnum_)));
          set_has_hpnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarHpInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarHpInfo)
  return false;
#undef DO_
}

void TCountryWarHpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarHpInfo)
  // optional uint32 Htid = 1;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->htid(), output);
  }

  // optional uint32 HpNum = 2;
  if (has_hpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hpnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarHpInfo)
}

::google::protobuf::uint8* TCountryWarHpInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarHpInfo)
  // optional uint32 Htid = 1;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->htid(), target);
  }

  // optional uint32 HpNum = 2;
  if (has_hpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hpnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarHpInfo)
  return target;
}

int TCountryWarHpInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Htid = 1;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

    // optional uint32 HpNum = 2;
    if (has_hpnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hpnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarHpInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarHpInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarHpInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarHpInfo::MergeFrom(const TCountryWarHpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_htid()) {
      set_htid(from.htid());
    }
    if (from.has_hpnum()) {
      set_hpnum(from.hpnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarHpInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarHpInfo::CopyFrom(const TCountryWarHpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarHpInfo::IsInitialized() const {

  return true;
}

void TCountryWarHpInfo::Swap(TCountryWarHpInfo* other) {
  if (other != this) {
    std::swap(htid_, other->htid_);
    std::swap(hpnum_, other->hpnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarHpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarHpInfo_descriptor_;
  metadata.reflection = TCountryWarHpInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarGridFirstInfo::kGuildIdFieldNumber;
const int TCountryWarGridFirstInfo::kGuildNameFieldNumber;
const int TCountryWarGridFirstInfo::kOccupyTimeFieldNumber;
const int TCountryWarGridFirstInfo::kFirstSiegeInfoFieldNumber;
const int TCountryWarGridFirstInfo::kFirstKillInfoFieldNumber;
#endif  // !_MSC_VER

TCountryWarGridFirstInfo::TCountryWarGridFirstInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarGridFirstInfo)
}

void TCountryWarGridFirstInfo::InitAsDefaultInstance() {
}

TCountryWarGridFirstInfo::TCountryWarGridFirstInfo(const TCountryWarGridFirstInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarGridFirstInfo)
}

void TCountryWarGridFirstInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  occupytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarGridFirstInfo::~TCountryWarGridFirstInfo() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarGridFirstInfo)
  SharedDtor();
}

void TCountryWarGridFirstInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void TCountryWarGridFirstInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarGridFirstInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarGridFirstInfo_descriptor_;
}

const TCountryWarGridFirstInfo& TCountryWarGridFirstInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarGridFirstInfo* TCountryWarGridFirstInfo::default_instance_ = NULL;

TCountryWarGridFirstInfo* TCountryWarGridFirstInfo::New() const {
  return new TCountryWarGridFirstInfo;
}

void TCountryWarGridFirstInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    occupytime_ = GOOGLE_ULONGLONG(0);
  }
  firstsiegeinfo_.Clear();
  firstkillinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarGridFirstInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarGridFirstInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GuildName;
        break;
      }

      // optional string GuildName = 2;
      case 2: {
        if (tag == 18) {
         parse_GuildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_OccupyTime;
        break;
      }

      // optional uint64 OccupyTime = 3;
      case 3: {
        if (tag == 24) {
         parse_OccupyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &occupytime_)));
          set_has_occupytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_FirstSiegeInfo;
        break;
      }

      // repeated .pb.TCountryWarGridKillSiegeInfo FirstSiegeInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_FirstSiegeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_firstsiegeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_FirstSiegeInfo;
        if (input->ExpectTag(42)) goto parse_FirstKillInfo;
        break;
      }

      // repeated .pb.TCountryWarGridKillSiegeInfo FirstKillInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_FirstKillInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_firstkillinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_FirstKillInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarGridFirstInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarGridFirstInfo)
  return false;
#undef DO_
}

void TCountryWarGridFirstInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarGridFirstInfo)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional string GuildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guildname(), output);
  }

  // optional uint64 OccupyTime = 3;
  if (has_occupytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->occupytime(), output);
  }

  // repeated .pb.TCountryWarGridKillSiegeInfo FirstSiegeInfo = 4;
  for (int i = 0; i < this->firstsiegeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->firstsiegeinfo(i), output);
  }

  // repeated .pb.TCountryWarGridKillSiegeInfo FirstKillInfo = 5;
  for (int i = 0; i < this->firstkillinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->firstkillinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarGridFirstInfo)
}

::google::protobuf::uint8* TCountryWarGridFirstInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarGridFirstInfo)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional string GuildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }

  // optional uint64 OccupyTime = 3;
  if (has_occupytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->occupytime(), target);
  }

  // repeated .pb.TCountryWarGridKillSiegeInfo FirstSiegeInfo = 4;
  for (int i = 0; i < this->firstsiegeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->firstsiegeinfo(i), target);
  }

  // repeated .pb.TCountryWarGridKillSiegeInfo FirstKillInfo = 5;
  for (int i = 0; i < this->firstkillinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->firstkillinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarGridFirstInfo)
  return target;
}

int TCountryWarGridFirstInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string GuildName = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint64 OccupyTime = 3;
    if (has_occupytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->occupytime());
    }

  }
  // repeated .pb.TCountryWarGridKillSiegeInfo FirstSiegeInfo = 4;
  total_size += 1 * this->firstsiegeinfo_size();
  for (int i = 0; i < this->firstsiegeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->firstsiegeinfo(i));
  }

  // repeated .pb.TCountryWarGridKillSiegeInfo FirstKillInfo = 5;
  total_size += 1 * this->firstkillinfo_size();
  for (int i = 0; i < this->firstkillinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->firstkillinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarGridFirstInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarGridFirstInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarGridFirstInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarGridFirstInfo::MergeFrom(const TCountryWarGridFirstInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  firstsiegeinfo_.MergeFrom(from.firstsiegeinfo_);
  firstkillinfo_.MergeFrom(from.firstkillinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_occupytime()) {
      set_occupytime(from.occupytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarGridFirstInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarGridFirstInfo::CopyFrom(const TCountryWarGridFirstInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarGridFirstInfo::IsInitialized() const {

  return true;
}

void TCountryWarGridFirstInfo::Swap(TCountryWarGridFirstInfo* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(occupytime_, other->occupytime_);
    firstsiegeinfo_.Swap(&other->firstsiegeinfo_);
    firstkillinfo_.Swap(&other->firstkillinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarGridFirstInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarGridFirstInfo_descriptor_;
  metadata.reflection = TCountryWarGridFirstInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarGridKillSiegeInfo::kUidFieldNumber;
const int TCountryWarGridKillSiegeInfo::kUnameFieldNumber;
const int TCountryWarGridKillSiegeInfo::kNumFieldNumber;
#endif  // !_MSC_VER

TCountryWarGridKillSiegeInfo::TCountryWarGridKillSiegeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarGridKillSiegeInfo)
}

void TCountryWarGridKillSiegeInfo::InitAsDefaultInstance() {
}

TCountryWarGridKillSiegeInfo::TCountryWarGridKillSiegeInfo(const TCountryWarGridKillSiegeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarGridKillSiegeInfo)
}

void TCountryWarGridKillSiegeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarGridKillSiegeInfo::~TCountryWarGridKillSiegeInfo() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarGridKillSiegeInfo)
  SharedDtor();
}

void TCountryWarGridKillSiegeInfo::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (this != default_instance_) {
  }
}

void TCountryWarGridKillSiegeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarGridKillSiegeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarGridKillSiegeInfo_descriptor_;
}

const TCountryWarGridKillSiegeInfo& TCountryWarGridKillSiegeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarGridKillSiegeInfo* TCountryWarGridKillSiegeInfo::default_instance_ = NULL;

TCountryWarGridKillSiegeInfo* TCountryWarGridKillSiegeInfo::New() const {
  return new TCountryWarGridKillSiegeInfo;
}

void TCountryWarGridKillSiegeInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarGridKillSiegeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarGridKillSiegeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Uname;
        break;
      }

      // optional string Uname = 2;
      case 2: {
        if (tag == 18) {
         parse_Uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 3;
      case 3: {
        if (tag == 24) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarGridKillSiegeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarGridKillSiegeInfo)
  return false;
#undef DO_
}

void TCountryWarGridKillSiegeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarGridKillSiegeInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uname(), output);
  }

  // optional uint32 Num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarGridKillSiegeInfo)
}

::google::protobuf::uint8* TCountryWarGridKillSiegeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarGridKillSiegeInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uname(), target);
  }

  // optional uint32 Num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarGridKillSiegeInfo)
  return target;
}

int TCountryWarGridKillSiegeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string Uname = 2;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint32 Num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarGridKillSiegeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarGridKillSiegeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarGridKillSiegeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarGridKillSiegeInfo::MergeFrom(const TCountryWarGridKillSiegeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarGridKillSiegeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarGridKillSiegeInfo::CopyFrom(const TCountryWarGridKillSiegeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarGridKillSiegeInfo::IsInitialized() const {

  return true;
}

void TCountryWarGridKillSiegeInfo::Swap(TCountryWarGridKillSiegeInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(uname_, other->uname_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarGridKillSiegeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarGridKillSiegeInfo_descriptor_;
  metadata.reflection = TCountryWarGridKillSiegeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarGridMonsterInfo::kMonsterHpArrayFieldNumber;
const int TCountryWarGridMonsterInfo::kStartTimeFieldNumber;
const int TCountryWarGridMonsterInfo::kEndTimeFieldNumber;
#endif  // !_MSC_VER

TCountryWarGridMonsterInfo::TCountryWarGridMonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarGridMonsterInfo)
}

void TCountryWarGridMonsterInfo::InitAsDefaultInstance() {
}

TCountryWarGridMonsterInfo::TCountryWarGridMonsterInfo(const TCountryWarGridMonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarGridMonsterInfo)
}

void TCountryWarGridMonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarGridMonsterInfo::~TCountryWarGridMonsterInfo() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarGridMonsterInfo)
  SharedDtor();
}

void TCountryWarGridMonsterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarGridMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarGridMonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarGridMonsterInfo_descriptor_;
}

const TCountryWarGridMonsterInfo& TCountryWarGridMonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarGridMonsterInfo* TCountryWarGridMonsterInfo::default_instance_ = NULL;

TCountryWarGridMonsterInfo* TCountryWarGridMonsterInfo::New() const {
  return new TCountryWarGridMonsterInfo;
}

void TCountryWarGridMonsterInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarGridMonsterInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(starttime_, endtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  monsterhparray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarGridMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarGridMonsterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCountryWarHpInfo MonsterHpArray = 1;
      case 1: {
        if (tag == 10) {
         parse_MonsterHpArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterhparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_MonsterHpArray;
        if (input->ExpectTag(16)) goto parse_StartTime;
        break;
      }

      // optional uint64 StartTime = 2;
      case 2: {
        if (tag == 16) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 3;
      case 3: {
        if (tag == 24) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarGridMonsterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarGridMonsterInfo)
  return false;
#undef DO_
}

void TCountryWarGridMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarGridMonsterInfo)
  // repeated .pb.TCountryWarHpInfo MonsterHpArray = 1;
  for (int i = 0; i < this->monsterhparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsterhparray(i), output);
  }

  // optional uint64 StartTime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->starttime(), output);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarGridMonsterInfo)
}

::google::protobuf::uint8* TCountryWarGridMonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarGridMonsterInfo)
  // repeated .pb.TCountryWarHpInfo MonsterHpArray = 1;
  for (int i = 0; i < this->monsterhparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsterhparray(i), target);
  }

  // optional uint64 StartTime = 2;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->starttime(), target);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarGridMonsterInfo)
  return target;
}

int TCountryWarGridMonsterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 StartTime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 EndTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  // repeated .pb.TCountryWarHpInfo MonsterHpArray = 1;
  total_size += 1 * this->monsterhparray_size();
  for (int i = 0; i < this->monsterhparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterhparray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarGridMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarGridMonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarGridMonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarGridMonsterInfo::MergeFrom(const TCountryWarGridMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterhparray_.MergeFrom(from.monsterhparray_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarGridMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarGridMonsterInfo::CopyFrom(const TCountryWarGridMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarGridMonsterInfo::IsInitialized() const {

  return true;
}

void TCountryWarGridMonsterInfo::Swap(TCountryWarGridMonsterInfo* other) {
  if (other != this) {
    monsterhparray_.Swap(&other->monsterhparray_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarGridMonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarGridMonsterInfo_descriptor_;
  metadata.reflection = TCountryWarGridMonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarGridResourceInfo::kResourceNumFieldNumber;
const int TCountryWarGridResourceInfo::kUidFieldNumber;
const int TCountryWarGridResourceInfo::kTeamIdFieldNumber;
const int TCountryWarGridResourceInfo::kStartTimeFieldNumber;
const int TCountryWarGridResourceInfo::kEndTimeFieldNumber;
#endif  // !_MSC_VER

TCountryWarGridResourceInfo::TCountryWarGridResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarGridResourceInfo)
}

void TCountryWarGridResourceInfo::InitAsDefaultInstance() {
}

TCountryWarGridResourceInfo::TCountryWarGridResourceInfo(const TCountryWarGridResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarGridResourceInfo)
}

void TCountryWarGridResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  resourcenum_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  teamid_ = 0u;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarGridResourceInfo::~TCountryWarGridResourceInfo() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarGridResourceInfo)
  SharedDtor();
}

void TCountryWarGridResourceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarGridResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarGridResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarGridResourceInfo_descriptor_;
}

const TCountryWarGridResourceInfo& TCountryWarGridResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarGridResourceInfo* TCountryWarGridResourceInfo::default_instance_ = NULL;

TCountryWarGridResourceInfo* TCountryWarGridResourceInfo::New() const {
  return new TCountryWarGridResourceInfo;
}

void TCountryWarGridResourceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarGridResourceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, endtime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarGridResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarGridResourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ResourceNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resourcenum_)));
          set_has_resourcenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 2;
      case 2: {
        if (tag == 16) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TeamId;
        break;
      }

      // optional uint32 TeamId = 3;
      case 3: {
        if (tag == 24) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_StartTime;
        break;
      }

      // optional uint64 StartTime = 4;
      case 4: {
        if (tag == 32) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 5;
      case 5: {
        if (tag == 40) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarGridResourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarGridResourceInfo)
  return false;
#undef DO_
}

void TCountryWarGridResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarGridResourceInfo)
  // optional uint32 ResourceNum = 1;
  if (has_resourcenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resourcenum(), output);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional uint32 TeamId = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->teamid(), output);
  }

  // optional uint64 StartTime = 4;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->starttime(), output);
  }

  // optional uint64 EndTime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarGridResourceInfo)
}

::google::protobuf::uint8* TCountryWarGridResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarGridResourceInfo)
  // optional uint32 ResourceNum = 1;
  if (has_resourcenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resourcenum(), target);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional uint32 TeamId = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->teamid(), target);
  }

  // optional uint64 StartTime = 4;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->starttime(), target);
  }

  // optional uint64 EndTime = 5;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarGridResourceInfo)
  return target;
}

int TCountryWarGridResourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ResourceNum = 1;
    if (has_resourcenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resourcenum());
    }

    // optional uint64 Uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 TeamId = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint64 StartTime = 4;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 EndTime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarGridResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarGridResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarGridResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarGridResourceInfo::MergeFrom(const TCountryWarGridResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resourcenum()) {
      set_resourcenum(from.resourcenum());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarGridResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarGridResourceInfo::CopyFrom(const TCountryWarGridResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarGridResourceInfo::IsInitialized() const {

  return true;
}

void TCountryWarGridResourceInfo::Swap(TCountryWarGridResourceInfo* other) {
  if (other != this) {
    std::swap(resourcenum_, other->resourcenum_);
    std::swap(uid_, other->uid_);
    std::swap(teamid_, other->teamid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarGridResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarGridResourceInfo_descriptor_;
  metadata.reflection = TCountryWarGridResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarGridTreasureInfo::kStartTimeFieldNumber;
const int TCountryWarGridTreasureInfo::kEndTimeFieldNumber;
const int TCountryWarGridTreasureInfo::kUidFieldNumber;
const int TCountryWarGridTreasureInfo::kTreasureIdFieldNumber;
const int TCountryWarGridTreasureInfo::kMonsterHpArrayFieldNumber;
#endif  // !_MSC_VER

TCountryWarGridTreasureInfo::TCountryWarGridTreasureInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarGridTreasureInfo)
}

void TCountryWarGridTreasureInfo::InitAsDefaultInstance() {
}

TCountryWarGridTreasureInfo::TCountryWarGridTreasureInfo(const TCountryWarGridTreasureInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarGridTreasureInfo)
}

void TCountryWarGridTreasureInfo::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  uid_ = GOOGLE_ULONGLONG(0);
  treasureid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarGridTreasureInfo::~TCountryWarGridTreasureInfo() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarGridTreasureInfo)
  SharedDtor();
}

void TCountryWarGridTreasureInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarGridTreasureInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarGridTreasureInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarGridTreasureInfo_descriptor_;
}

const TCountryWarGridTreasureInfo& TCountryWarGridTreasureInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarGridTreasureInfo* TCountryWarGridTreasureInfo::default_instance_ = NULL;

TCountryWarGridTreasureInfo* TCountryWarGridTreasureInfo::New() const {
  return new TCountryWarGridTreasureInfo;
}

void TCountryWarGridTreasureInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarGridTreasureInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(starttime_, uid_);
    treasureid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  monsterhparray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarGridTreasureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarGridTreasureInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 StartTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 2;
      case 2: {
        if (tag == 16) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 3;
      case 3: {
        if (tag == 24) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TreasureId;
        break;
      }

      // optional uint32 TreasureId = 4;
      case 4: {
        if (tag == 32) {
         parse_TreasureId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treasureid_)));
          set_has_treasureid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_MonsterHpArray;
        break;
      }

      // repeated .pb.TCountryWarHpInfo MonsterHpArray = 5;
      case 5: {
        if (tag == 42) {
         parse_MonsterHpArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterhparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_MonsterHpArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarGridTreasureInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarGridTreasureInfo)
  return false;
#undef DO_
}

void TCountryWarGridTreasureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarGridTreasureInfo)
  // optional uint64 StartTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->starttime(), output);
  }

  // optional uint64 EndTime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->endtime(), output);
  }

  // optional uint64 Uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uid(), output);
  }

  // optional uint32 TreasureId = 4;
  if (has_treasureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->treasureid(), output);
  }

  // repeated .pb.TCountryWarHpInfo MonsterHpArray = 5;
  for (int i = 0; i < this->monsterhparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->monsterhparray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarGridTreasureInfo)
}

::google::protobuf::uint8* TCountryWarGridTreasureInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarGridTreasureInfo)
  // optional uint64 StartTime = 1;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->starttime(), target);
  }

  // optional uint64 EndTime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->endtime(), target);
  }

  // optional uint64 Uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uid(), target);
  }

  // optional uint32 TreasureId = 4;
  if (has_treasureid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->treasureid(), target);
  }

  // repeated .pb.TCountryWarHpInfo MonsterHpArray = 5;
  for (int i = 0; i < this->monsterhparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->monsterhparray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarGridTreasureInfo)
  return target;
}

int TCountryWarGridTreasureInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 StartTime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 EndTime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint64 Uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 TreasureId = 4;
    if (has_treasureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treasureid());
    }

  }
  // repeated .pb.TCountryWarHpInfo MonsterHpArray = 5;
  total_size += 1 * this->monsterhparray_size();
  for (int i = 0; i < this->monsterhparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterhparray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarGridTreasureInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarGridTreasureInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarGridTreasureInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarGridTreasureInfo::MergeFrom(const TCountryWarGridTreasureInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterhparray_.MergeFrom(from.monsterhparray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_treasureid()) {
      set_treasureid(from.treasureid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarGridTreasureInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarGridTreasureInfo::CopyFrom(const TCountryWarGridTreasureInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarGridTreasureInfo::IsInitialized() const {

  return true;
}

void TCountryWarGridTreasureInfo::Swap(TCountryWarGridTreasureInfo* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(uid_, other->uid_);
    std::swap(treasureid_, other->treasureid_);
    monsterhparray_.Swap(&other->monsterhparray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarGridTreasureInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarGridTreasureInfo_descriptor_;
  metadata.reflection = TCountryWarGridTreasureInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarMarchInfo::kUidFieldNumber;
const int TCountryWarMarchInfo::kMarchTypeFieldNumber;
const int TCountryWarMarchInfo::kTeamIdFieldNumber;
const int TCountryWarMarchInfo::kStartGridIndexFieldNumber;
const int TCountryWarMarchInfo::kEndGridIndexFieldNumber;
const int TCountryWarMarchInfo::kStartTimeFieldNumber;
const int TCountryWarMarchInfo::kEndTimeFieldNumber;
const int TCountryWarMarchInfo::kSpeedUpTimeFieldNumber;
const int TCountryWarMarchInfo::kDisPercentFieldNumber;
#endif  // !_MSC_VER

TCountryWarMarchInfo::TCountryWarMarchInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarMarchInfo)
}

void TCountryWarMarchInfo::InitAsDefaultInstance() {
}

TCountryWarMarchInfo::TCountryWarMarchInfo(const TCountryWarMarchInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarMarchInfo)
}

void TCountryWarMarchInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  marchtype_ = 1;
  teamid_ = 0u;
  startgridindex_ = 0u;
  endgridindex_ = 0u;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  speeduptime_ = GOOGLE_ULONGLONG(0);
  dispercent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarMarchInfo::~TCountryWarMarchInfo() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarMarchInfo)
  SharedDtor();
}

void TCountryWarMarchInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarMarchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarMarchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarMarchInfo_descriptor_;
}

const TCountryWarMarchInfo& TCountryWarMarchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarMarchInfo* TCountryWarMarchInfo::default_instance_ = NULL;

TCountryWarMarchInfo* TCountryWarMarchInfo::New() const {
  return new TCountryWarMarchInfo;
}

void TCountryWarMarchInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarMarchInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(teamid_, speeduptime_);
    uid_ = GOOGLE_ULONGLONG(0);
    marchtype_ = 1;
  }
  dispercent_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarMarchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarMarchInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MarchType;
        break;
      }

      // optional .pb.EMarchType MarchType = 2;
      case 2: {
        if (tag == 16) {
         parse_MarchType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EMarchType_IsValid(value)) {
            set_marchtype(static_cast< ::pb::EMarchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TeamId;
        break;
      }

      // optional uint32 TeamId = 3;
      case 3: {
        if (tag == 24) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_StartGridIndex;
        break;
      }

      // optional uint32 StartGridIndex = 4;
      case 4: {
        if (tag == 32) {
         parse_StartGridIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startgridindex_)));
          set_has_startgridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_EndGridIndex;
        break;
      }

      // optional uint32 EndGridIndex = 5;
      case 5: {
        if (tag == 40) {
         parse_EndGridIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endgridindex_)));
          set_has_endgridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_StartTime;
        break;
      }

      // optional uint64 StartTime = 6;
      case 6: {
        if (tag == 48) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 7;
      case 7: {
        if (tag == 56) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_SpeedUpTime;
        break;
      }

      // optional uint64 SpeedUpTime = 8;
      case 8: {
        if (tag == 64) {
         parse_SpeedUpTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &speeduptime_)));
          set_has_speeduptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_DisPercent;
        break;
      }

      // optional uint32 DisPercent = 9;
      case 9: {
        if (tag == 72) {
         parse_DisPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dispercent_)));
          set_has_dispercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarMarchInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarMarchInfo)
  return false;
#undef DO_
}

void TCountryWarMarchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarMarchInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional .pb.EMarchType MarchType = 2;
  if (has_marchtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->marchtype(), output);
  }

  // optional uint32 TeamId = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->teamid(), output);
  }

  // optional uint32 StartGridIndex = 4;
  if (has_startgridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->startgridindex(), output);
  }

  // optional uint32 EndGridIndex = 5;
  if (has_endgridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->endgridindex(), output);
  }

  // optional uint64 StartTime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->starttime(), output);
  }

  // optional uint64 EndTime = 7;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->endtime(), output);
  }

  // optional uint64 SpeedUpTime = 8;
  if (has_speeduptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->speeduptime(), output);
  }

  // optional uint32 DisPercent = 9;
  if (has_dispercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dispercent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarMarchInfo)
}

::google::protobuf::uint8* TCountryWarMarchInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarMarchInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional .pb.EMarchType MarchType = 2;
  if (has_marchtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->marchtype(), target);
  }

  // optional uint32 TeamId = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->teamid(), target);
  }

  // optional uint32 StartGridIndex = 4;
  if (has_startgridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->startgridindex(), target);
  }

  // optional uint32 EndGridIndex = 5;
  if (has_endgridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->endgridindex(), target);
  }

  // optional uint64 StartTime = 6;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->starttime(), target);
  }

  // optional uint64 EndTime = 7;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->endtime(), target);
  }

  // optional uint64 SpeedUpTime = 8;
  if (has_speeduptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->speeduptime(), target);
  }

  // optional uint32 DisPercent = 9;
  if (has_dispercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dispercent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarMarchInfo)
  return target;
}

int TCountryWarMarchInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional .pb.EMarchType MarchType = 2;
    if (has_marchtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->marchtype());
    }

    // optional uint32 TeamId = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 StartGridIndex = 4;
    if (has_startgridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startgridindex());
    }

    // optional uint32 EndGridIndex = 5;
    if (has_endgridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endgridindex());
    }

    // optional uint64 StartTime = 6;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 EndTime = 7;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint64 SpeedUpTime = 8;
    if (has_speeduptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->speeduptime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 DisPercent = 9;
    if (has_dispercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dispercent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarMarchInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarMarchInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarMarchInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarMarchInfo::MergeFrom(const TCountryWarMarchInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_marchtype()) {
      set_marchtype(from.marchtype());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_startgridindex()) {
      set_startgridindex(from.startgridindex());
    }
    if (from.has_endgridindex()) {
      set_endgridindex(from.endgridindex());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_speeduptime()) {
      set_speeduptime(from.speeduptime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dispercent()) {
      set_dispercent(from.dispercent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarMarchInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarMarchInfo::CopyFrom(const TCountryWarMarchInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarMarchInfo::IsInitialized() const {

  return true;
}

void TCountryWarMarchInfo::Swap(TCountryWarMarchInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(marchtype_, other->marchtype_);
    std::swap(teamid_, other->teamid_);
    std::swap(startgridindex_, other->startgridindex_);
    std::swap(endgridindex_, other->endgridindex_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(speeduptime_, other->speeduptime_);
    std::swap(dispercent_, other->dispercent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarMarchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarMarchInfo_descriptor_;
  metadata.reflection = TCountryWarMarchInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TCountryWarEnterCountryWarReq::TCountryWarEnterCountryWarReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarEnterCountryWarReq)
}

void TCountryWarEnterCountryWarReq::InitAsDefaultInstance() {
}

TCountryWarEnterCountryWarReq::TCountryWarEnterCountryWarReq(const TCountryWarEnterCountryWarReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarEnterCountryWarReq)
}

void TCountryWarEnterCountryWarReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarEnterCountryWarReq::~TCountryWarEnterCountryWarReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarEnterCountryWarReq)
  SharedDtor();
}

void TCountryWarEnterCountryWarReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarEnterCountryWarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarEnterCountryWarReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarEnterCountryWarReq_descriptor_;
}

const TCountryWarEnterCountryWarReq& TCountryWarEnterCountryWarReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarEnterCountryWarReq* TCountryWarEnterCountryWarReq::default_instance_ = NULL;

TCountryWarEnterCountryWarReq* TCountryWarEnterCountryWarReq::New() const {
  return new TCountryWarEnterCountryWarReq;
}

void TCountryWarEnterCountryWarReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarEnterCountryWarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarEnterCountryWarReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarEnterCountryWarReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarEnterCountryWarReq)
  return false;
#undef DO_
}

void TCountryWarEnterCountryWarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarEnterCountryWarReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarEnterCountryWarReq)
}

::google::protobuf::uint8* TCountryWarEnterCountryWarReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarEnterCountryWarReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarEnterCountryWarReq)
  return target;
}

int TCountryWarEnterCountryWarReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarEnterCountryWarReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarEnterCountryWarReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarEnterCountryWarReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarEnterCountryWarReq::MergeFrom(const TCountryWarEnterCountryWarReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarEnterCountryWarReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarEnterCountryWarReq::CopyFrom(const TCountryWarEnterCountryWarReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarEnterCountryWarReq::IsInitialized() const {

  return true;
}

void TCountryWarEnterCountryWarReq::Swap(TCountryWarEnterCountryWarReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarEnterCountryWarReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarEnterCountryWarReq_descriptor_;
  metadata.reflection = TCountryWarEnterCountryWarReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarEnterCountryWarRsp::kMapIdFieldNumber;
const int TCountryWarEnterCountryWarRsp::kGridIndexFieldNumber;
#endif  // !_MSC_VER

TCountryWarEnterCountryWarRsp::TCountryWarEnterCountryWarRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarEnterCountryWarRsp)
}

void TCountryWarEnterCountryWarRsp::InitAsDefaultInstance() {
}

TCountryWarEnterCountryWarRsp::TCountryWarEnterCountryWarRsp(const TCountryWarEnterCountryWarRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarEnterCountryWarRsp)
}

void TCountryWarEnterCountryWarRsp::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  gridindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarEnterCountryWarRsp::~TCountryWarEnterCountryWarRsp() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarEnterCountryWarRsp)
  SharedDtor();
}

void TCountryWarEnterCountryWarRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarEnterCountryWarRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarEnterCountryWarRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarEnterCountryWarRsp_descriptor_;
}

const TCountryWarEnterCountryWarRsp& TCountryWarEnterCountryWarRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarEnterCountryWarRsp* TCountryWarEnterCountryWarRsp::default_instance_ = NULL;

TCountryWarEnterCountryWarRsp* TCountryWarEnterCountryWarRsp::New() const {
  return new TCountryWarEnterCountryWarRsp;
}

void TCountryWarEnterCountryWarRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarEnterCountryWarRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mapid_, gridindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarEnterCountryWarRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarEnterCountryWarRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MapId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GridIndex;
        break;
      }

      // optional uint32 GridIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_GridIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridindex_)));
          set_has_gridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarEnterCountryWarRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarEnterCountryWarRsp)
  return false;
#undef DO_
}

void TCountryWarEnterCountryWarRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarEnterCountryWarRsp)
  // optional uint32 MapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // optional uint32 GridIndex = 2;
  if (has_gridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gridindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarEnterCountryWarRsp)
}

::google::protobuf::uint8* TCountryWarEnterCountryWarRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarEnterCountryWarRsp)
  // optional uint32 MapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // optional uint32 GridIndex = 2;
  if (has_gridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gridindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarEnterCountryWarRsp)
  return target;
}

int TCountryWarEnterCountryWarRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 GridIndex = 2;
    if (has_gridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarEnterCountryWarRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarEnterCountryWarRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarEnterCountryWarRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarEnterCountryWarRsp::MergeFrom(const TCountryWarEnterCountryWarRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_gridindex()) {
      set_gridindex(from.gridindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarEnterCountryWarRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarEnterCountryWarRsp::CopyFrom(const TCountryWarEnterCountryWarRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarEnterCountryWarRsp::IsInitialized() const {

  return true;
}

void TCountryWarEnterCountryWarRsp::Swap(TCountryWarEnterCountryWarRsp* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(gridindex_, other->gridindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarEnterCountryWarRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarEnterCountryWarRsp_descriptor_;
  metadata.reflection = TCountryWarEnterCountryWarRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarGetMapInfoReq::kGridIndexFieldNumber;
#endif  // !_MSC_VER

TCountryWarGetMapInfoReq::TCountryWarGetMapInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarGetMapInfoReq)
}

void TCountryWarGetMapInfoReq::InitAsDefaultInstance() {
}

TCountryWarGetMapInfoReq::TCountryWarGetMapInfoReq(const TCountryWarGetMapInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarGetMapInfoReq)
}

void TCountryWarGetMapInfoReq::SharedCtor() {
  _cached_size_ = 0;
  gridindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarGetMapInfoReq::~TCountryWarGetMapInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarGetMapInfoReq)
  SharedDtor();
}

void TCountryWarGetMapInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarGetMapInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarGetMapInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarGetMapInfoReq_descriptor_;
}

const TCountryWarGetMapInfoReq& TCountryWarGetMapInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarGetMapInfoReq* TCountryWarGetMapInfoReq::default_instance_ = NULL;

TCountryWarGetMapInfoReq* TCountryWarGetMapInfoReq::New() const {
  return new TCountryWarGetMapInfoReq;
}

void TCountryWarGetMapInfoReq::Clear() {
  gridindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarGetMapInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarGetMapInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GridIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridindex_)));
          set_has_gridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarGetMapInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarGetMapInfoReq)
  return false;
#undef DO_
}

void TCountryWarGetMapInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarGetMapInfoReq)
  // optional uint32 GridIndex = 1;
  if (has_gridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gridindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarGetMapInfoReq)
}

::google::protobuf::uint8* TCountryWarGetMapInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarGetMapInfoReq)
  // optional uint32 GridIndex = 1;
  if (has_gridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gridindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarGetMapInfoReq)
  return target;
}

int TCountryWarGetMapInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GridIndex = 1;
    if (has_gridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarGetMapInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarGetMapInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarGetMapInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarGetMapInfoReq::MergeFrom(const TCountryWarGetMapInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gridindex()) {
      set_gridindex(from.gridindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarGetMapInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarGetMapInfoReq::CopyFrom(const TCountryWarGetMapInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarGetMapInfoReq::IsInitialized() const {

  return true;
}

void TCountryWarGetMapInfoReq::Swap(TCountryWarGetMapInfoReq* other) {
  if (other != this) {
    std::swap(gridindex_, other->gridindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarGetMapInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarGetMapInfoReq_descriptor_;
  metadata.reflection = TCountryWarGetMapInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarGetMapInfoRsp::kGridArrFieldNumber;
const int TCountryWarGetMapInfoRsp::kMarchArrFieldNumber;
const int TCountryWarGetMapInfoRsp::kUserArrFieldNumber;
const int TCountryWarGetMapInfoRsp::kGuildArrFieldNumber;
#endif  // !_MSC_VER

TCountryWarGetMapInfoRsp::TCountryWarGetMapInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarGetMapInfoRsp)
}

void TCountryWarGetMapInfoRsp::InitAsDefaultInstance() {
}

TCountryWarGetMapInfoRsp::TCountryWarGetMapInfoRsp(const TCountryWarGetMapInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarGetMapInfoRsp)
}

void TCountryWarGetMapInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarGetMapInfoRsp::~TCountryWarGetMapInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarGetMapInfoRsp)
  SharedDtor();
}

void TCountryWarGetMapInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarGetMapInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarGetMapInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarGetMapInfoRsp_descriptor_;
}

const TCountryWarGetMapInfoRsp& TCountryWarGetMapInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarGetMapInfoRsp* TCountryWarGetMapInfoRsp::default_instance_ = NULL;

TCountryWarGetMapInfoRsp* TCountryWarGetMapInfoRsp::New() const {
  return new TCountryWarGetMapInfoRsp;
}

void TCountryWarGetMapInfoRsp::Clear() {
  gridarr_.Clear();
  marcharr_.Clear();
  userarr_.Clear();
  guildarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarGetMapInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarGetMapInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCountryWarGridInfo GridArr = 1;
      case 1: {
        if (tag == 10) {
         parse_GridArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gridarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_GridArr;
        if (input->ExpectTag(18)) goto parse_MarchArr;
        break;
      }

      // repeated .pb.TCountryWarMarchInfo MarchArr = 2;
      case 2: {
        if (tag == 18) {
         parse_MarchArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_marcharr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MarchArr;
        if (input->ExpectTag(26)) goto parse_UserArr;
        break;
      }

      // repeated .pb.TCountryWarUserInfo UserArr = 3;
      case 3: {
        if (tag == 26) {
         parse_UserArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserArr;
        if (input->ExpectTag(34)) goto parse_GuildArr;
        break;
      }

      // repeated .pb.TCountryWarGuildInfo GuildArr = 4;
      case 4: {
        if (tag == 34) {
         parse_GuildArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_GuildArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarGetMapInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarGetMapInfoRsp)
  return false;
#undef DO_
}

void TCountryWarGetMapInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarGetMapInfoRsp)
  // repeated .pb.TCountryWarGridInfo GridArr = 1;
  for (int i = 0; i < this->gridarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gridarr(i), output);
  }

  // repeated .pb.TCountryWarMarchInfo MarchArr = 2;
  for (int i = 0; i < this->marcharr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->marcharr(i), output);
  }

  // repeated .pb.TCountryWarUserInfo UserArr = 3;
  for (int i = 0; i < this->userarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userarr(i), output);
  }

  // repeated .pb.TCountryWarGuildInfo GuildArr = 4;
  for (int i = 0; i < this->guildarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->guildarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarGetMapInfoRsp)
}

::google::protobuf::uint8* TCountryWarGetMapInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarGetMapInfoRsp)
  // repeated .pb.TCountryWarGridInfo GridArr = 1;
  for (int i = 0; i < this->gridarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gridarr(i), target);
  }

  // repeated .pb.TCountryWarMarchInfo MarchArr = 2;
  for (int i = 0; i < this->marcharr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->marcharr(i), target);
  }

  // repeated .pb.TCountryWarUserInfo UserArr = 3;
  for (int i = 0; i < this->userarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userarr(i), target);
  }

  // repeated .pb.TCountryWarGuildInfo GuildArr = 4;
  for (int i = 0; i < this->guildarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->guildarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarGetMapInfoRsp)
  return target;
}

int TCountryWarGetMapInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCountryWarGridInfo GridArr = 1;
  total_size += 1 * this->gridarr_size();
  for (int i = 0; i < this->gridarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gridarr(i));
  }

  // repeated .pb.TCountryWarMarchInfo MarchArr = 2;
  total_size += 1 * this->marcharr_size();
  for (int i = 0; i < this->marcharr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->marcharr(i));
  }

  // repeated .pb.TCountryWarUserInfo UserArr = 3;
  total_size += 1 * this->userarr_size();
  for (int i = 0; i < this->userarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userarr(i));
  }

  // repeated .pb.TCountryWarGuildInfo GuildArr = 4;
  total_size += 1 * this->guildarr_size();
  for (int i = 0; i < this->guildarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarGetMapInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarGetMapInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarGetMapInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarGetMapInfoRsp::MergeFrom(const TCountryWarGetMapInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  gridarr_.MergeFrom(from.gridarr_);
  marcharr_.MergeFrom(from.marcharr_);
  userarr_.MergeFrom(from.userarr_);
  guildarr_.MergeFrom(from.guildarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarGetMapInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarGetMapInfoRsp::CopyFrom(const TCountryWarGetMapInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarGetMapInfoRsp::IsInitialized() const {

  return true;
}

void TCountryWarGetMapInfoRsp::Swap(TCountryWarGetMapInfoRsp* other) {
  if (other != this) {
    gridarr_.Swap(&other->gridarr_);
    marcharr_.Swap(&other->marcharr_);
    userarr_.Swap(&other->userarr_);
    guildarr_.Swap(&other->guildarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarGetMapInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarGetMapInfoRsp_descriptor_;
  metadata.reflection = TCountryWarGetMapInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarAttackReq::kTargetGridIndexFieldNumber;
const int TCountryWarAttackReq::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TCountryWarAttackReq::TCountryWarAttackReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarAttackReq)
}

void TCountryWarAttackReq::InitAsDefaultInstance() {
}

TCountryWarAttackReq::TCountryWarAttackReq(const TCountryWarAttackReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarAttackReq)
}

void TCountryWarAttackReq::SharedCtor() {
  _cached_size_ = 0;
  targetgridindex_ = 0u;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarAttackReq::~TCountryWarAttackReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarAttackReq)
  SharedDtor();
}

void TCountryWarAttackReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarAttackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarAttackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarAttackReq_descriptor_;
}

const TCountryWarAttackReq& TCountryWarAttackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarAttackReq* TCountryWarAttackReq::default_instance_ = NULL;

TCountryWarAttackReq* TCountryWarAttackReq::New() const {
  return new TCountryWarAttackReq;
}

void TCountryWarAttackReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarAttackReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(targetgridindex_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarAttackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarAttackReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TargetGridIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetgridindex_)));
          set_has_targetgridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint32 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarAttackReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarAttackReq)
  return false;
#undef DO_
}

void TCountryWarAttackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarAttackReq)
  // optional uint32 TargetGridIndex = 1;
  if (has_targetgridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetgridindex(), output);
  }

  // optional uint32 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarAttackReq)
}

::google::protobuf::uint8* TCountryWarAttackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarAttackReq)
  // optional uint32 TargetGridIndex = 1;
  if (has_targetgridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetgridindex(), target);
  }

  // optional uint32 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarAttackReq)
  return target;
}

int TCountryWarAttackReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TargetGridIndex = 1;
    if (has_targetgridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetgridindex());
    }

    // optional uint32 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarAttackReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarAttackReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarAttackReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarAttackReq::MergeFrom(const TCountryWarAttackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetgridindex()) {
      set_targetgridindex(from.targetgridindex());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarAttackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarAttackReq::CopyFrom(const TCountryWarAttackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarAttackReq::IsInitialized() const {

  return true;
}

void TCountryWarAttackReq::Swap(TCountryWarAttackReq* other) {
  if (other != this) {
    std::swap(targetgridindex_, other->targetgridindex_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarAttackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarAttackReq_descriptor_;
  metadata.reflection = TCountryWarAttackReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarCollectResourceReq::kTargetGridIndexFieldNumber;
const int TCountryWarCollectResourceReq::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TCountryWarCollectResourceReq::TCountryWarCollectResourceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarCollectResourceReq)
}

void TCountryWarCollectResourceReq::InitAsDefaultInstance() {
}

TCountryWarCollectResourceReq::TCountryWarCollectResourceReq(const TCountryWarCollectResourceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarCollectResourceReq)
}

void TCountryWarCollectResourceReq::SharedCtor() {
  _cached_size_ = 0;
  targetgridindex_ = 0u;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarCollectResourceReq::~TCountryWarCollectResourceReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarCollectResourceReq)
  SharedDtor();
}

void TCountryWarCollectResourceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarCollectResourceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarCollectResourceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarCollectResourceReq_descriptor_;
}

const TCountryWarCollectResourceReq& TCountryWarCollectResourceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarCollectResourceReq* TCountryWarCollectResourceReq::default_instance_ = NULL;

TCountryWarCollectResourceReq* TCountryWarCollectResourceReq::New() const {
  return new TCountryWarCollectResourceReq;
}

void TCountryWarCollectResourceReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarCollectResourceReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(targetgridindex_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarCollectResourceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarCollectResourceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TargetGridIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetgridindex_)));
          set_has_targetgridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint32 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarCollectResourceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarCollectResourceReq)
  return false;
#undef DO_
}

void TCountryWarCollectResourceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarCollectResourceReq)
  // optional uint32 TargetGridIndex = 1;
  if (has_targetgridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetgridindex(), output);
  }

  // optional uint32 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarCollectResourceReq)
}

::google::protobuf::uint8* TCountryWarCollectResourceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarCollectResourceReq)
  // optional uint32 TargetGridIndex = 1;
  if (has_targetgridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetgridindex(), target);
  }

  // optional uint32 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarCollectResourceReq)
  return target;
}

int TCountryWarCollectResourceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TargetGridIndex = 1;
    if (has_targetgridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetgridindex());
    }

    // optional uint32 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarCollectResourceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarCollectResourceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarCollectResourceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarCollectResourceReq::MergeFrom(const TCountryWarCollectResourceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetgridindex()) {
      set_targetgridindex(from.targetgridindex());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarCollectResourceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarCollectResourceReq::CopyFrom(const TCountryWarCollectResourceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarCollectResourceReq::IsInitialized() const {

  return true;
}

void TCountryWarCollectResourceReq::Swap(TCountryWarCollectResourceReq* other) {
  if (other != this) {
    std::swap(targetgridindex_, other->targetgridindex_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarCollectResourceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarCollectResourceReq_descriptor_;
  metadata.reflection = TCountryWarCollectResourceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarSnatchResourceReq::kTargetGridIndexFieldNumber;
const int TCountryWarSnatchResourceReq::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TCountryWarSnatchResourceReq::TCountryWarSnatchResourceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarSnatchResourceReq)
}

void TCountryWarSnatchResourceReq::InitAsDefaultInstance() {
}

TCountryWarSnatchResourceReq::TCountryWarSnatchResourceReq(const TCountryWarSnatchResourceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarSnatchResourceReq)
}

void TCountryWarSnatchResourceReq::SharedCtor() {
  _cached_size_ = 0;
  targetgridindex_ = 0u;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarSnatchResourceReq::~TCountryWarSnatchResourceReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarSnatchResourceReq)
  SharedDtor();
}

void TCountryWarSnatchResourceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarSnatchResourceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarSnatchResourceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarSnatchResourceReq_descriptor_;
}

const TCountryWarSnatchResourceReq& TCountryWarSnatchResourceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarSnatchResourceReq* TCountryWarSnatchResourceReq::default_instance_ = NULL;

TCountryWarSnatchResourceReq* TCountryWarSnatchResourceReq::New() const {
  return new TCountryWarSnatchResourceReq;
}

void TCountryWarSnatchResourceReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarSnatchResourceReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(targetgridindex_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarSnatchResourceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarSnatchResourceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TargetGridIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetgridindex_)));
          set_has_targetgridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint32 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarSnatchResourceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarSnatchResourceReq)
  return false;
#undef DO_
}

void TCountryWarSnatchResourceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarSnatchResourceReq)
  // optional uint32 TargetGridIndex = 1;
  if (has_targetgridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetgridindex(), output);
  }

  // optional uint32 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarSnatchResourceReq)
}

::google::protobuf::uint8* TCountryWarSnatchResourceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarSnatchResourceReq)
  // optional uint32 TargetGridIndex = 1;
  if (has_targetgridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetgridindex(), target);
  }

  // optional uint32 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarSnatchResourceReq)
  return target;
}

int TCountryWarSnatchResourceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TargetGridIndex = 1;
    if (has_targetgridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetgridindex());
    }

    // optional uint32 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarSnatchResourceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarSnatchResourceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarSnatchResourceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarSnatchResourceReq::MergeFrom(const TCountryWarSnatchResourceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetgridindex()) {
      set_targetgridindex(from.targetgridindex());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarSnatchResourceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarSnatchResourceReq::CopyFrom(const TCountryWarSnatchResourceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarSnatchResourceReq::IsInitialized() const {

  return true;
}

void TCountryWarSnatchResourceReq::Swap(TCountryWarSnatchResourceReq* other) {
  if (other != this) {
    std::swap(targetgridindex_, other->targetgridindex_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarSnatchResourceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarSnatchResourceReq_descriptor_;
  metadata.reflection = TCountryWarSnatchResourceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarCollectReturnReq::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TCountryWarCollectReturnReq::TCountryWarCollectReturnReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarCollectReturnReq)
}

void TCountryWarCollectReturnReq::InitAsDefaultInstance() {
}

TCountryWarCollectReturnReq::TCountryWarCollectReturnReq(const TCountryWarCollectReturnReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarCollectReturnReq)
}

void TCountryWarCollectReturnReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarCollectReturnReq::~TCountryWarCollectReturnReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarCollectReturnReq)
  SharedDtor();
}

void TCountryWarCollectReturnReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarCollectReturnReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarCollectReturnReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarCollectReturnReq_descriptor_;
}

const TCountryWarCollectReturnReq& TCountryWarCollectReturnReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarCollectReturnReq* TCountryWarCollectReturnReq::default_instance_ = NULL;

TCountryWarCollectReturnReq* TCountryWarCollectReturnReq::New() const {
  return new TCountryWarCollectReturnReq;
}

void TCountryWarCollectReturnReq::Clear() {
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarCollectReturnReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarCollectReturnReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarCollectReturnReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarCollectReturnReq)
  return false;
#undef DO_
}

void TCountryWarCollectReturnReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarCollectReturnReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarCollectReturnReq)
}

::google::protobuf::uint8* TCountryWarCollectReturnReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarCollectReturnReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarCollectReturnReq)
  return target;
}

int TCountryWarCollectReturnReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarCollectReturnReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarCollectReturnReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarCollectReturnReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarCollectReturnReq::MergeFrom(const TCountryWarCollectReturnReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarCollectReturnReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarCollectReturnReq::CopyFrom(const TCountryWarCollectReturnReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarCollectReturnReq::IsInitialized() const {

  return true;
}

void TCountryWarCollectReturnReq::Swap(TCountryWarCollectReturnReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarCollectReturnReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarCollectReturnReq_descriptor_;
  metadata.reflection = TCountryWarCollectReturnReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarSearchTreasureReq::kTargetGridIndexFieldNumber;
const int TCountryWarSearchTreasureReq::kHidArrFieldNumber;
#endif  // !_MSC_VER

TCountryWarSearchTreasureReq::TCountryWarSearchTreasureReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarSearchTreasureReq)
}

void TCountryWarSearchTreasureReq::InitAsDefaultInstance() {
}

TCountryWarSearchTreasureReq::TCountryWarSearchTreasureReq(const TCountryWarSearchTreasureReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarSearchTreasureReq)
}

void TCountryWarSearchTreasureReq::SharedCtor() {
  _cached_size_ = 0;
  targetgridindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarSearchTreasureReq::~TCountryWarSearchTreasureReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarSearchTreasureReq)
  SharedDtor();
}

void TCountryWarSearchTreasureReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarSearchTreasureReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarSearchTreasureReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarSearchTreasureReq_descriptor_;
}

const TCountryWarSearchTreasureReq& TCountryWarSearchTreasureReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarSearchTreasureReq* TCountryWarSearchTreasureReq::default_instance_ = NULL;

TCountryWarSearchTreasureReq* TCountryWarSearchTreasureReq::New() const {
  return new TCountryWarSearchTreasureReq;
}

void TCountryWarSearchTreasureReq::Clear() {
  targetgridindex_ = 0u;
  hidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarSearchTreasureReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarSearchTreasureReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TargetGridIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetgridindex_)));
          set_has_targetgridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HidArr;
        break;
      }

      // repeated uint32 HidArr = 2;
      case 2: {
        if (tag == 16) {
         parse_HidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_hidarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarSearchTreasureReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarSearchTreasureReq)
  return false;
#undef DO_
}

void TCountryWarSearchTreasureReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarSearchTreasureReq)
  // optional uint32 TargetGridIndex = 1;
  if (has_targetgridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetgridindex(), output);
  }

  // repeated uint32 HidArr = 2;
  for (int i = 0; i < this->hidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->hidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarSearchTreasureReq)
}

::google::protobuf::uint8* TCountryWarSearchTreasureReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarSearchTreasureReq)
  // optional uint32 TargetGridIndex = 1;
  if (has_targetgridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetgridindex(), target);
  }

  // repeated uint32 HidArr = 2;
  for (int i = 0; i < this->hidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->hidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarSearchTreasureReq)
  return target;
}

int TCountryWarSearchTreasureReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TargetGridIndex = 1;
    if (has_targetgridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetgridindex());
    }

  }
  // repeated uint32 HidArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hidarr(i));
    }
    total_size += 1 * this->hidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarSearchTreasureReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarSearchTreasureReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarSearchTreasureReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarSearchTreasureReq::MergeFrom(const TCountryWarSearchTreasureReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  hidarr_.MergeFrom(from.hidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetgridindex()) {
      set_targetgridindex(from.targetgridindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarSearchTreasureReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarSearchTreasureReq::CopyFrom(const TCountryWarSearchTreasureReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarSearchTreasureReq::IsInitialized() const {

  return true;
}

void TCountryWarSearchTreasureReq::Swap(TCountryWarSearchTreasureReq* other) {
  if (other != this) {
    std::swap(targetgridindex_, other->targetgridindex_);
    hidarr_.Swap(&other->hidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarSearchTreasureReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarSearchTreasureReq_descriptor_;
  metadata.reflection = TCountryWarSearchTreasureReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarDigTreasureReq::kTargetGridIndexFieldNumber;
const int TCountryWarDigTreasureReq::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TCountryWarDigTreasureReq::TCountryWarDigTreasureReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarDigTreasureReq)
}

void TCountryWarDigTreasureReq::InitAsDefaultInstance() {
}

TCountryWarDigTreasureReq::TCountryWarDigTreasureReq(const TCountryWarDigTreasureReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarDigTreasureReq)
}

void TCountryWarDigTreasureReq::SharedCtor() {
  _cached_size_ = 0;
  targetgridindex_ = 0u;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarDigTreasureReq::~TCountryWarDigTreasureReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarDigTreasureReq)
  SharedDtor();
}

void TCountryWarDigTreasureReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarDigTreasureReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarDigTreasureReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarDigTreasureReq_descriptor_;
}

const TCountryWarDigTreasureReq& TCountryWarDigTreasureReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarDigTreasureReq* TCountryWarDigTreasureReq::default_instance_ = NULL;

TCountryWarDigTreasureReq* TCountryWarDigTreasureReq::New() const {
  return new TCountryWarDigTreasureReq;
}

void TCountryWarDigTreasureReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarDigTreasureReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(targetgridindex_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarDigTreasureReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarDigTreasureReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TargetGridIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetgridindex_)));
          set_has_targetgridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint32 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarDigTreasureReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarDigTreasureReq)
  return false;
#undef DO_
}

void TCountryWarDigTreasureReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarDigTreasureReq)
  // optional uint32 TargetGridIndex = 1;
  if (has_targetgridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetgridindex(), output);
  }

  // optional uint32 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarDigTreasureReq)
}

::google::protobuf::uint8* TCountryWarDigTreasureReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarDigTreasureReq)
  // optional uint32 TargetGridIndex = 1;
  if (has_targetgridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetgridindex(), target);
  }

  // optional uint32 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarDigTreasureReq)
  return target;
}

int TCountryWarDigTreasureReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TargetGridIndex = 1;
    if (has_targetgridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetgridindex());
    }

    // optional uint32 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarDigTreasureReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarDigTreasureReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarDigTreasureReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarDigTreasureReq::MergeFrom(const TCountryWarDigTreasureReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetgridindex()) {
      set_targetgridindex(from.targetgridindex());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarDigTreasureReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarDigTreasureReq::CopyFrom(const TCountryWarDigTreasureReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarDigTreasureReq::IsInitialized() const {

  return true;
}

void TCountryWarDigTreasureReq::Swap(TCountryWarDigTreasureReq* other) {
  if (other != this) {
    std::swap(targetgridindex_, other->targetgridindex_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarDigTreasureReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarDigTreasureReq_descriptor_;
  metadata.reflection = TCountryWarDigTreasureReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarGarrisonGridReq::kTargetGridIndexFieldNumber;
const int TCountryWarGarrisonGridReq::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TCountryWarGarrisonGridReq::TCountryWarGarrisonGridReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarGarrisonGridReq)
}

void TCountryWarGarrisonGridReq::InitAsDefaultInstance() {
}

TCountryWarGarrisonGridReq::TCountryWarGarrisonGridReq(const TCountryWarGarrisonGridReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarGarrisonGridReq)
}

void TCountryWarGarrisonGridReq::SharedCtor() {
  _cached_size_ = 0;
  targetgridindex_ = 0u;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarGarrisonGridReq::~TCountryWarGarrisonGridReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarGarrisonGridReq)
  SharedDtor();
}

void TCountryWarGarrisonGridReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarGarrisonGridReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarGarrisonGridReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarGarrisonGridReq_descriptor_;
}

const TCountryWarGarrisonGridReq& TCountryWarGarrisonGridReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarGarrisonGridReq* TCountryWarGarrisonGridReq::default_instance_ = NULL;

TCountryWarGarrisonGridReq* TCountryWarGarrisonGridReq::New() const {
  return new TCountryWarGarrisonGridReq;
}

void TCountryWarGarrisonGridReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarGarrisonGridReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(targetgridindex_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarGarrisonGridReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarGarrisonGridReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TargetGridIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetgridindex_)));
          set_has_targetgridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint32 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarGarrisonGridReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarGarrisonGridReq)
  return false;
#undef DO_
}

void TCountryWarGarrisonGridReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarGarrisonGridReq)
  // optional uint32 TargetGridIndex = 1;
  if (has_targetgridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetgridindex(), output);
  }

  // optional uint32 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarGarrisonGridReq)
}

::google::protobuf::uint8* TCountryWarGarrisonGridReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarGarrisonGridReq)
  // optional uint32 TargetGridIndex = 1;
  if (has_targetgridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetgridindex(), target);
  }

  // optional uint32 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarGarrisonGridReq)
  return target;
}

int TCountryWarGarrisonGridReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TargetGridIndex = 1;
    if (has_targetgridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetgridindex());
    }

    // optional uint32 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarGarrisonGridReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarGarrisonGridReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarGarrisonGridReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarGarrisonGridReq::MergeFrom(const TCountryWarGarrisonGridReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetgridindex()) {
      set_targetgridindex(from.targetgridindex());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarGarrisonGridReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarGarrisonGridReq::CopyFrom(const TCountryWarGarrisonGridReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarGarrisonGridReq::IsInitialized() const {

  return true;
}

void TCountryWarGarrisonGridReq::Swap(TCountryWarGarrisonGridReq* other) {
  if (other != this) {
    std::swap(targetgridindex_, other->targetgridindex_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarGarrisonGridReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarGarrisonGridReq_descriptor_;
  metadata.reflection = TCountryWarGarrisonGridReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarTransportReq::kTargetUidFieldNumber;
const int TCountryWarTransportReq::kHidArrFieldNumber;
const int TCountryWarTransportReq::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TCountryWarTransportReq::TCountryWarTransportReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarTransportReq)
}

void TCountryWarTransportReq::InitAsDefaultInstance() {
}

TCountryWarTransportReq::TCountryWarTransportReq(const TCountryWarTransportReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarTransportReq)
}

void TCountryWarTransportReq::SharedCtor() {
  _cached_size_ = 0;
  targetuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarTransportReq::~TCountryWarTransportReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarTransportReq)
  SharedDtor();
}

void TCountryWarTransportReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarTransportReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarTransportReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarTransportReq_descriptor_;
}

const TCountryWarTransportReq& TCountryWarTransportReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarTransportReq* TCountryWarTransportReq::default_instance_ = NULL;

TCountryWarTransportReq* TCountryWarTransportReq::New() const {
  return new TCountryWarTransportReq;
}

void TCountryWarTransportReq::Clear() {
  targetuid_ = GOOGLE_ULONGLONG(0);
  hidarr_.Clear();
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarTransportReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarTransportReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TargetUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetuid_)));
          set_has_targetuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HidArr;
        break;
      }

      // repeated uint32 HidArr = 2;
      case 2: {
        if (tag == 16) {
         parse_HidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_hidarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HidArr;
        if (input->ExpectTag(26)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 3;
      case 3: {
        if (tag == 26) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarTransportReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarTransportReq)
  return false;
#undef DO_
}

void TCountryWarTransportReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarTransportReq)
  // optional uint64 TargetUid = 1;
  if (has_targetuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->targetuid(), output);
  }

  // repeated uint32 HidArr = 2;
  for (int i = 0; i < this->hidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->hidarr(i), output);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarTransportReq)
}

::google::protobuf::uint8* TCountryWarTransportReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarTransportReq)
  // optional uint64 TargetUid = 1;
  if (has_targetuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->targetuid(), target);
  }

  // repeated uint32 HidArr = 2;
  for (int i = 0; i < this->hidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->hidarr(i), target);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarTransportReq)
  return target;
}

int TCountryWarTransportReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TargetUid = 1;
    if (has_targetuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetuid());
    }

  }
  // repeated uint32 HidArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hidarr(i));
    }
    total_size += 1 * this->hidarr_size() + data_size;
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarTransportReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarTransportReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarTransportReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarTransportReq::MergeFrom(const TCountryWarTransportReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  hidarr_.MergeFrom(from.hidarr_);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetuid()) {
      set_targetuid(from.targetuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarTransportReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarTransportReq::CopyFrom(const TCountryWarTransportReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarTransportReq::IsInitialized() const {

  return true;
}

void TCountryWarTransportReq::Swap(TCountryWarTransportReq* other) {
  if (other != this) {
    std::swap(targetuid_, other->targetuid_);
    hidarr_.Swap(&other->hidarr_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarTransportReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarTransportReq_descriptor_;
  metadata.reflection = TCountryWarTransportReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarInvestigateGridReq::kTargetGridIndexFieldNumber;
const int TCountryWarInvestigateGridReq::kHidArrFieldNumber;
#endif  // !_MSC_VER

TCountryWarInvestigateGridReq::TCountryWarInvestigateGridReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarInvestigateGridReq)
}

void TCountryWarInvestigateGridReq::InitAsDefaultInstance() {
}

TCountryWarInvestigateGridReq::TCountryWarInvestigateGridReq(const TCountryWarInvestigateGridReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarInvestigateGridReq)
}

void TCountryWarInvestigateGridReq::SharedCtor() {
  _cached_size_ = 0;
  targetgridindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarInvestigateGridReq::~TCountryWarInvestigateGridReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarInvestigateGridReq)
  SharedDtor();
}

void TCountryWarInvestigateGridReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarInvestigateGridReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarInvestigateGridReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarInvestigateGridReq_descriptor_;
}

const TCountryWarInvestigateGridReq& TCountryWarInvestigateGridReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarInvestigateGridReq* TCountryWarInvestigateGridReq::default_instance_ = NULL;

TCountryWarInvestigateGridReq* TCountryWarInvestigateGridReq::New() const {
  return new TCountryWarInvestigateGridReq;
}

void TCountryWarInvestigateGridReq::Clear() {
  targetgridindex_ = 0u;
  hidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarInvestigateGridReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarInvestigateGridReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TargetGridIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetgridindex_)));
          set_has_targetgridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HidArr;
        break;
      }

      // repeated uint32 HidArr = 2;
      case 2: {
        if (tag == 16) {
         parse_HidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_hidarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarInvestigateGridReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarInvestigateGridReq)
  return false;
#undef DO_
}

void TCountryWarInvestigateGridReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarInvestigateGridReq)
  // optional uint32 TargetGridIndex = 1;
  if (has_targetgridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetgridindex(), output);
  }

  // repeated uint32 HidArr = 2;
  for (int i = 0; i < this->hidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->hidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarInvestigateGridReq)
}

::google::protobuf::uint8* TCountryWarInvestigateGridReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarInvestigateGridReq)
  // optional uint32 TargetGridIndex = 1;
  if (has_targetgridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetgridindex(), target);
  }

  // repeated uint32 HidArr = 2;
  for (int i = 0; i < this->hidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->hidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarInvestigateGridReq)
  return target;
}

int TCountryWarInvestigateGridReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TargetGridIndex = 1;
    if (has_targetgridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetgridindex());
    }

  }
  // repeated uint32 HidArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hidarr(i));
    }
    total_size += 1 * this->hidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarInvestigateGridReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarInvestigateGridReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarInvestigateGridReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarInvestigateGridReq::MergeFrom(const TCountryWarInvestigateGridReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  hidarr_.MergeFrom(from.hidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetgridindex()) {
      set_targetgridindex(from.targetgridindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarInvestigateGridReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarInvestigateGridReq::CopyFrom(const TCountryWarInvestigateGridReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarInvestigateGridReq::IsInitialized() const {

  return true;
}

void TCountryWarInvestigateGridReq::Swap(TCountryWarInvestigateGridReq* other) {
  if (other != this) {
    std::swap(targetgridindex_, other->targetgridindex_);
    hidarr_.Swap(&other->hidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarInvestigateGridReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarInvestigateGridReq_descriptor_;
  metadata.reflection = TCountryWarInvestigateGridReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarMarchSpeedUpReq::kTeamIdFieldNumber;
const int TCountryWarMarchSpeedUpReq::kItemTidFieldNumber;
#endif  // !_MSC_VER

TCountryWarMarchSpeedUpReq::TCountryWarMarchSpeedUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarMarchSpeedUpReq)
}

void TCountryWarMarchSpeedUpReq::InitAsDefaultInstance() {
}

TCountryWarMarchSpeedUpReq::TCountryWarMarchSpeedUpReq(const TCountryWarMarchSpeedUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarMarchSpeedUpReq)
}

void TCountryWarMarchSpeedUpReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  itemtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarMarchSpeedUpReq::~TCountryWarMarchSpeedUpReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarMarchSpeedUpReq)
  SharedDtor();
}

void TCountryWarMarchSpeedUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarMarchSpeedUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarMarchSpeedUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarMarchSpeedUpReq_descriptor_;
}

const TCountryWarMarchSpeedUpReq& TCountryWarMarchSpeedUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarMarchSpeedUpReq* TCountryWarMarchSpeedUpReq::default_instance_ = NULL;

TCountryWarMarchSpeedUpReq* TCountryWarMarchSpeedUpReq::New() const {
  return new TCountryWarMarchSpeedUpReq;
}

void TCountryWarMarchSpeedUpReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarMarchSpeedUpReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, itemtid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarMarchSpeedUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarMarchSpeedUpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ItemTid;
        break;
      }

      // optional uint32 ItemTid = 2;
      case 2: {
        if (tag == 16) {
         parse_ItemTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemtid_)));
          set_has_itemtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarMarchSpeedUpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarMarchSpeedUpReq)
  return false;
#undef DO_
}

void TCountryWarMarchSpeedUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarMarchSpeedUpReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional uint32 ItemTid = 2;
  if (has_itemtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemtid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarMarchSpeedUpReq)
}

::google::protobuf::uint8* TCountryWarMarchSpeedUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarMarchSpeedUpReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional uint32 ItemTid = 2;
  if (has_itemtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemtid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarMarchSpeedUpReq)
  return target;
}

int TCountryWarMarchSpeedUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 ItemTid = 2;
    if (has_itemtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemtid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarMarchSpeedUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarMarchSpeedUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarMarchSpeedUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarMarchSpeedUpReq::MergeFrom(const TCountryWarMarchSpeedUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_itemtid()) {
      set_itemtid(from.itemtid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarMarchSpeedUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarMarchSpeedUpReq::CopyFrom(const TCountryWarMarchSpeedUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarMarchSpeedUpReq::IsInitialized() const {

  return true;
}

void TCountryWarMarchSpeedUpReq::Swap(TCountryWarMarchSpeedUpReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(itemtid_, other->itemtid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarMarchSpeedUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarMarchSpeedUpReq_descriptor_;
  metadata.reflection = TCountryWarMarchSpeedUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarMarchReturnReq::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TCountryWarMarchReturnReq::TCountryWarMarchReturnReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarMarchReturnReq)
}

void TCountryWarMarchReturnReq::InitAsDefaultInstance() {
}

TCountryWarMarchReturnReq::TCountryWarMarchReturnReq(const TCountryWarMarchReturnReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarMarchReturnReq)
}

void TCountryWarMarchReturnReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarMarchReturnReq::~TCountryWarMarchReturnReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarMarchReturnReq)
  SharedDtor();
}

void TCountryWarMarchReturnReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarMarchReturnReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarMarchReturnReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarMarchReturnReq_descriptor_;
}

const TCountryWarMarchReturnReq& TCountryWarMarchReturnReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarMarchReturnReq* TCountryWarMarchReturnReq::default_instance_ = NULL;

TCountryWarMarchReturnReq* TCountryWarMarchReturnReq::New() const {
  return new TCountryWarMarchReturnReq;
}

void TCountryWarMarchReturnReq::Clear() {
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarMarchReturnReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarMarchReturnReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarMarchReturnReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarMarchReturnReq)
  return false;
#undef DO_
}

void TCountryWarMarchReturnReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarMarchReturnReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarMarchReturnReq)
}

::google::protobuf::uint8* TCountryWarMarchReturnReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarMarchReturnReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarMarchReturnReq)
  return target;
}

int TCountryWarMarchReturnReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarMarchReturnReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarMarchReturnReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarMarchReturnReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarMarchReturnReq::MergeFrom(const TCountryWarMarchReturnReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarMarchReturnReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarMarchReturnReq::CopyFrom(const TCountryWarMarchReturnReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarMarchReturnReq::IsInitialized() const {

  return true;
}

void TCountryWarMarchReturnReq::Swap(TCountryWarMarchReturnReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarMarchReturnReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarMarchReturnReq_descriptor_;
  metadata.reflection = TCountryWarMarchReturnReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarGarrisonReturnReq::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TCountryWarGarrisonReturnReq::TCountryWarGarrisonReturnReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarGarrisonReturnReq)
}

void TCountryWarGarrisonReturnReq::InitAsDefaultInstance() {
}

TCountryWarGarrisonReturnReq::TCountryWarGarrisonReturnReq(const TCountryWarGarrisonReturnReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarGarrisonReturnReq)
}

void TCountryWarGarrisonReturnReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarGarrisonReturnReq::~TCountryWarGarrisonReturnReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarGarrisonReturnReq)
  SharedDtor();
}

void TCountryWarGarrisonReturnReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarGarrisonReturnReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarGarrisonReturnReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarGarrisonReturnReq_descriptor_;
}

const TCountryWarGarrisonReturnReq& TCountryWarGarrisonReturnReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarGarrisonReturnReq* TCountryWarGarrisonReturnReq::default_instance_ = NULL;

TCountryWarGarrisonReturnReq* TCountryWarGarrisonReturnReq::New() const {
  return new TCountryWarGarrisonReturnReq;
}

void TCountryWarGarrisonReturnReq::Clear() {
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarGarrisonReturnReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarGarrisonReturnReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarGarrisonReturnReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarGarrisonReturnReq)
  return false;
#undef DO_
}

void TCountryWarGarrisonReturnReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarGarrisonReturnReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarGarrisonReturnReq)
}

::google::protobuf::uint8* TCountryWarGarrisonReturnReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarGarrisonReturnReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarGarrisonReturnReq)
  return target;
}

int TCountryWarGarrisonReturnReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarGarrisonReturnReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarGarrisonReturnReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarGarrisonReturnReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarGarrisonReturnReq::MergeFrom(const TCountryWarGarrisonReturnReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarGarrisonReturnReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarGarrisonReturnReq::CopyFrom(const TCountryWarGarrisonReturnReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarGarrisonReturnReq::IsInitialized() const {

  return true;
}

void TCountryWarGarrisonReturnReq::Swap(TCountryWarGarrisonReturnReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarGarrisonReturnReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarGarrisonReturnReq_descriptor_;
  metadata.reflection = TCountryWarGarrisonReturnReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarDrawReturnReq::kTeamIdFieldNumber;
const int TCountryWarDrawReturnReq::kGridIndexFieldNumber;
#endif  // !_MSC_VER

TCountryWarDrawReturnReq::TCountryWarDrawReturnReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarDrawReturnReq)
}

void TCountryWarDrawReturnReq::InitAsDefaultInstance() {
}

TCountryWarDrawReturnReq::TCountryWarDrawReturnReq(const TCountryWarDrawReturnReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarDrawReturnReq)
}

void TCountryWarDrawReturnReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  gridindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarDrawReturnReq::~TCountryWarDrawReturnReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarDrawReturnReq)
  SharedDtor();
}

void TCountryWarDrawReturnReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarDrawReturnReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarDrawReturnReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarDrawReturnReq_descriptor_;
}

const TCountryWarDrawReturnReq& TCountryWarDrawReturnReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarDrawReturnReq* TCountryWarDrawReturnReq::default_instance_ = NULL;

TCountryWarDrawReturnReq* TCountryWarDrawReturnReq::New() const {
  return new TCountryWarDrawReturnReq;
}

void TCountryWarDrawReturnReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarDrawReturnReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, gridindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarDrawReturnReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarDrawReturnReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GridIndex;
        break;
      }

      // optional uint32 GridIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_GridIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridindex_)));
          set_has_gridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarDrawReturnReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarDrawReturnReq)
  return false;
#undef DO_
}

void TCountryWarDrawReturnReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarDrawReturnReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional uint32 GridIndex = 2;
  if (has_gridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gridindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarDrawReturnReq)
}

::google::protobuf::uint8* TCountryWarDrawReturnReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarDrawReturnReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional uint32 GridIndex = 2;
  if (has_gridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gridindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarDrawReturnReq)
  return target;
}

int TCountryWarDrawReturnReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 GridIndex = 2;
    if (has_gridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarDrawReturnReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarDrawReturnReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarDrawReturnReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarDrawReturnReq::MergeFrom(const TCountryWarDrawReturnReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_gridindex()) {
      set_gridindex(from.gridindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarDrawReturnReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarDrawReturnReq::CopyFrom(const TCountryWarDrawReturnReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarDrawReturnReq::IsInitialized() const {

  return true;
}

void TCountryWarDrawReturnReq::Swap(TCountryWarDrawReturnReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(gridindex_, other->gridindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarDrawReturnReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarDrawReturnReq_descriptor_;
  metadata.reflection = TCountryWarDrawReturnReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarMoveCityReq::kIsRandFieldNumber;
const int TCountryWarMoveCityReq::kTargetGridIndexFieldNumber;
#endif  // !_MSC_VER

TCountryWarMoveCityReq::TCountryWarMoveCityReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarMoveCityReq)
}

void TCountryWarMoveCityReq::InitAsDefaultInstance() {
}

TCountryWarMoveCityReq::TCountryWarMoveCityReq(const TCountryWarMoveCityReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarMoveCityReq)
}

void TCountryWarMoveCityReq::SharedCtor() {
  _cached_size_ = 0;
  isrand_ = false;
  targetgridindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarMoveCityReq::~TCountryWarMoveCityReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarMoveCityReq)
  SharedDtor();
}

void TCountryWarMoveCityReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarMoveCityReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarMoveCityReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarMoveCityReq_descriptor_;
}

const TCountryWarMoveCityReq& TCountryWarMoveCityReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarMoveCityReq* TCountryWarMoveCityReq::default_instance_ = NULL;

TCountryWarMoveCityReq* TCountryWarMoveCityReq::New() const {
  return new TCountryWarMoveCityReq;
}

void TCountryWarMoveCityReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarMoveCityReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(isrand_, targetgridindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarMoveCityReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarMoveCityReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsRand = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrand_)));
          set_has_isrand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TargetGridIndex;
        break;
      }

      // optional uint32 TargetGridIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_TargetGridIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetgridindex_)));
          set_has_targetgridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarMoveCityReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarMoveCityReq)
  return false;
#undef DO_
}

void TCountryWarMoveCityReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarMoveCityReq)
  // optional bool IsRand = 1;
  if (has_isrand()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isrand(), output);
  }

  // optional uint32 TargetGridIndex = 2;
  if (has_targetgridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetgridindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarMoveCityReq)
}

::google::protobuf::uint8* TCountryWarMoveCityReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarMoveCityReq)
  // optional bool IsRand = 1;
  if (has_isrand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isrand(), target);
  }

  // optional uint32 TargetGridIndex = 2;
  if (has_targetgridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetgridindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarMoveCityReq)
  return target;
}

int TCountryWarMoveCityReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsRand = 1;
    if (has_isrand()) {
      total_size += 1 + 1;
    }

    // optional uint32 TargetGridIndex = 2;
    if (has_targetgridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetgridindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarMoveCityReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarMoveCityReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarMoveCityReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarMoveCityReq::MergeFrom(const TCountryWarMoveCityReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isrand()) {
      set_isrand(from.isrand());
    }
    if (from.has_targetgridindex()) {
      set_targetgridindex(from.targetgridindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarMoveCityReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarMoveCityReq::CopyFrom(const TCountryWarMoveCityReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarMoveCityReq::IsInitialized() const {

  return true;
}

void TCountryWarMoveCityReq::Swap(TCountryWarMoveCityReq* other) {
  if (other != this) {
    std::swap(isrand_, other->isrand_);
    std::swap(targetgridindex_, other->targetgridindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarMoveCityReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarMoveCityReq_descriptor_;
  metadata.reflection = TCountryWarMoveCityReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarMoveCityRsp::kGridIndexFieldNumber;
#endif  // !_MSC_VER

TCountryWarMoveCityRsp::TCountryWarMoveCityRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarMoveCityRsp)
}

void TCountryWarMoveCityRsp::InitAsDefaultInstance() {
}

TCountryWarMoveCityRsp::TCountryWarMoveCityRsp(const TCountryWarMoveCityRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarMoveCityRsp)
}

void TCountryWarMoveCityRsp::SharedCtor() {
  _cached_size_ = 0;
  gridindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarMoveCityRsp::~TCountryWarMoveCityRsp() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarMoveCityRsp)
  SharedDtor();
}

void TCountryWarMoveCityRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarMoveCityRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarMoveCityRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarMoveCityRsp_descriptor_;
}

const TCountryWarMoveCityRsp& TCountryWarMoveCityRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarMoveCityRsp* TCountryWarMoveCityRsp::default_instance_ = NULL;

TCountryWarMoveCityRsp* TCountryWarMoveCityRsp::New() const {
  return new TCountryWarMoveCityRsp;
}

void TCountryWarMoveCityRsp::Clear() {
  gridindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarMoveCityRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarMoveCityRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GridIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridindex_)));
          set_has_gridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarMoveCityRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarMoveCityRsp)
  return false;
#undef DO_
}

void TCountryWarMoveCityRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarMoveCityRsp)
  // optional uint32 GridIndex = 1;
  if (has_gridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gridindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarMoveCityRsp)
}

::google::protobuf::uint8* TCountryWarMoveCityRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarMoveCityRsp)
  // optional uint32 GridIndex = 1;
  if (has_gridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gridindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarMoveCityRsp)
  return target;
}

int TCountryWarMoveCityRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GridIndex = 1;
    if (has_gridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarMoveCityRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarMoveCityRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarMoveCityRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarMoveCityRsp::MergeFrom(const TCountryWarMoveCityRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gridindex()) {
      set_gridindex(from.gridindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarMoveCityRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarMoveCityRsp::CopyFrom(const TCountryWarMoveCityRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarMoveCityRsp::IsInitialized() const {

  return true;
}

void TCountryWarMoveCityRsp::Swap(TCountryWarMoveCityRsp* other) {
  if (other != this) {
    std::swap(gridindex_, other->gridindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarMoveCityRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarMoveCityRsp_descriptor_;
  metadata.reflection = TCountryWarMoveCityRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarInitiateAssemblyReq::kTeamIdFieldNumber;
const int TCountryWarInitiateAssemblyReq::kTargetGridIndexFieldNumber;
const int TCountryWarInitiateAssemblyReq::kDurationTimeFieldNumber;
#endif  // !_MSC_VER

TCountryWarInitiateAssemblyReq::TCountryWarInitiateAssemblyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarInitiateAssemblyReq)
}

void TCountryWarInitiateAssemblyReq::InitAsDefaultInstance() {
}

TCountryWarInitiateAssemblyReq::TCountryWarInitiateAssemblyReq(const TCountryWarInitiateAssemblyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarInitiateAssemblyReq)
}

void TCountryWarInitiateAssemblyReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  targetgridindex_ = 0u;
  durationtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarInitiateAssemblyReq::~TCountryWarInitiateAssemblyReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarInitiateAssemblyReq)
  SharedDtor();
}

void TCountryWarInitiateAssemblyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarInitiateAssemblyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarInitiateAssemblyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarInitiateAssemblyReq_descriptor_;
}

const TCountryWarInitiateAssemblyReq& TCountryWarInitiateAssemblyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarInitiateAssemblyReq* TCountryWarInitiateAssemblyReq::default_instance_ = NULL;

TCountryWarInitiateAssemblyReq* TCountryWarInitiateAssemblyReq::New() const {
  return new TCountryWarInitiateAssemblyReq;
}

void TCountryWarInitiateAssemblyReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarInitiateAssemblyReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, durationtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarInitiateAssemblyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarInitiateAssemblyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TargetGridIndex;
        break;
      }

      // optional uint32 TargetGridIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_TargetGridIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetgridindex_)));
          set_has_targetgridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DurationTime;
        break;
      }

      // optional uint32 DurationTime = 3;
      case 3: {
        if (tag == 24) {
         parse_DurationTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &durationtime_)));
          set_has_durationtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarInitiateAssemblyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarInitiateAssemblyReq)
  return false;
#undef DO_
}

void TCountryWarInitiateAssemblyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarInitiateAssemblyReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional uint32 TargetGridIndex = 2;
  if (has_targetgridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetgridindex(), output);
  }

  // optional uint32 DurationTime = 3;
  if (has_durationtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->durationtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarInitiateAssemblyReq)
}

::google::protobuf::uint8* TCountryWarInitiateAssemblyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarInitiateAssemblyReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional uint32 TargetGridIndex = 2;
  if (has_targetgridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetgridindex(), target);
  }

  // optional uint32 DurationTime = 3;
  if (has_durationtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->durationtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarInitiateAssemblyReq)
  return target;
}

int TCountryWarInitiateAssemblyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 TargetGridIndex = 2;
    if (has_targetgridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetgridindex());
    }

    // optional uint32 DurationTime = 3;
    if (has_durationtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->durationtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarInitiateAssemblyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarInitiateAssemblyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarInitiateAssemblyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarInitiateAssemblyReq::MergeFrom(const TCountryWarInitiateAssemblyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_targetgridindex()) {
      set_targetgridindex(from.targetgridindex());
    }
    if (from.has_durationtime()) {
      set_durationtime(from.durationtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarInitiateAssemblyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarInitiateAssemblyReq::CopyFrom(const TCountryWarInitiateAssemblyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarInitiateAssemblyReq::IsInitialized() const {

  return true;
}

void TCountryWarInitiateAssemblyReq::Swap(TCountryWarInitiateAssemblyReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(targetgridindex_, other->targetgridindex_);
    std::swap(durationtime_, other->durationtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarInitiateAssemblyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarInitiateAssemblyReq_descriptor_;
  metadata.reflection = TCountryWarInitiateAssemblyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarCancelAssemblyReq::kAssemblyIdFieldNumber;
#endif  // !_MSC_VER

TCountryWarCancelAssemblyReq::TCountryWarCancelAssemblyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarCancelAssemblyReq)
}

void TCountryWarCancelAssemblyReq::InitAsDefaultInstance() {
}

TCountryWarCancelAssemblyReq::TCountryWarCancelAssemblyReq(const TCountryWarCancelAssemblyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarCancelAssemblyReq)
}

void TCountryWarCancelAssemblyReq::SharedCtor() {
  _cached_size_ = 0;
  assemblyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarCancelAssemblyReq::~TCountryWarCancelAssemblyReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarCancelAssemblyReq)
  SharedDtor();
}

void TCountryWarCancelAssemblyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarCancelAssemblyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarCancelAssemblyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarCancelAssemblyReq_descriptor_;
}

const TCountryWarCancelAssemblyReq& TCountryWarCancelAssemblyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarCancelAssemblyReq* TCountryWarCancelAssemblyReq::default_instance_ = NULL;

TCountryWarCancelAssemblyReq* TCountryWarCancelAssemblyReq::New() const {
  return new TCountryWarCancelAssemblyReq;
}

void TCountryWarCancelAssemblyReq::Clear() {
  assemblyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarCancelAssemblyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarCancelAssemblyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AssemblyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assemblyid_)));
          set_has_assemblyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarCancelAssemblyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarCancelAssemblyReq)
  return false;
#undef DO_
}

void TCountryWarCancelAssemblyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarCancelAssemblyReq)
  // optional uint32 AssemblyId = 1;
  if (has_assemblyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->assemblyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarCancelAssemblyReq)
}

::google::protobuf::uint8* TCountryWarCancelAssemblyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarCancelAssemblyReq)
  // optional uint32 AssemblyId = 1;
  if (has_assemblyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->assemblyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarCancelAssemblyReq)
  return target;
}

int TCountryWarCancelAssemblyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AssemblyId = 1;
    if (has_assemblyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assemblyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarCancelAssemblyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarCancelAssemblyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarCancelAssemblyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarCancelAssemblyReq::MergeFrom(const TCountryWarCancelAssemblyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assemblyid()) {
      set_assemblyid(from.assemblyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarCancelAssemblyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarCancelAssemblyReq::CopyFrom(const TCountryWarCancelAssemblyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarCancelAssemblyReq::IsInitialized() const {

  return true;
}

void TCountryWarCancelAssemblyReq::Swap(TCountryWarCancelAssemblyReq* other) {
  if (other != this) {
    std::swap(assemblyid_, other->assemblyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarCancelAssemblyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarCancelAssemblyReq_descriptor_;
  metadata.reflection = TCountryWarCancelAssemblyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarJoinAssemblyReq::kAssemblyIdFieldNumber;
const int TCountryWarJoinAssemblyReq::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TCountryWarJoinAssemblyReq::TCountryWarJoinAssemblyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarJoinAssemblyReq)
}

void TCountryWarJoinAssemblyReq::InitAsDefaultInstance() {
}

TCountryWarJoinAssemblyReq::TCountryWarJoinAssemblyReq(const TCountryWarJoinAssemblyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarJoinAssemblyReq)
}

void TCountryWarJoinAssemblyReq::SharedCtor() {
  _cached_size_ = 0;
  assemblyid_ = 0u;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarJoinAssemblyReq::~TCountryWarJoinAssemblyReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarJoinAssemblyReq)
  SharedDtor();
}

void TCountryWarJoinAssemblyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarJoinAssemblyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarJoinAssemblyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarJoinAssemblyReq_descriptor_;
}

const TCountryWarJoinAssemblyReq& TCountryWarJoinAssemblyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarJoinAssemblyReq* TCountryWarJoinAssemblyReq::default_instance_ = NULL;

TCountryWarJoinAssemblyReq* TCountryWarJoinAssemblyReq::New() const {
  return new TCountryWarJoinAssemblyReq;
}

void TCountryWarJoinAssemblyReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarJoinAssemblyReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(assemblyid_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarJoinAssemblyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarJoinAssemblyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AssemblyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assemblyid_)));
          set_has_assemblyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint32 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarJoinAssemblyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarJoinAssemblyReq)
  return false;
#undef DO_
}

void TCountryWarJoinAssemblyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarJoinAssemblyReq)
  // optional uint32 AssemblyId = 1;
  if (has_assemblyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->assemblyid(), output);
  }

  // optional uint32 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarJoinAssemblyReq)
}

::google::protobuf::uint8* TCountryWarJoinAssemblyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarJoinAssemblyReq)
  // optional uint32 AssemblyId = 1;
  if (has_assemblyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->assemblyid(), target);
  }

  // optional uint32 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarJoinAssemblyReq)
  return target;
}

int TCountryWarJoinAssemblyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AssemblyId = 1;
    if (has_assemblyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assemblyid());
    }

    // optional uint32 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarJoinAssemblyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarJoinAssemblyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarJoinAssemblyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarJoinAssemblyReq::MergeFrom(const TCountryWarJoinAssemblyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assemblyid()) {
      set_assemblyid(from.assemblyid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarJoinAssemblyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarJoinAssemblyReq::CopyFrom(const TCountryWarJoinAssemblyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarJoinAssemblyReq::IsInitialized() const {

  return true;
}

void TCountryWarJoinAssemblyReq::Swap(TCountryWarJoinAssemblyReq* other) {
  if (other != this) {
    std::swap(assemblyid_, other->assemblyid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarJoinAssemblyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarJoinAssemblyReq_descriptor_;
  metadata.reflection = TCountryWarJoinAssemblyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarLeaveAssemblyReq::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TCountryWarLeaveAssemblyReq::TCountryWarLeaveAssemblyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarLeaveAssemblyReq)
}

void TCountryWarLeaveAssemblyReq::InitAsDefaultInstance() {
}

TCountryWarLeaveAssemblyReq::TCountryWarLeaveAssemblyReq(const TCountryWarLeaveAssemblyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarLeaveAssemblyReq)
}

void TCountryWarLeaveAssemblyReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarLeaveAssemblyReq::~TCountryWarLeaveAssemblyReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarLeaveAssemblyReq)
  SharedDtor();
}

void TCountryWarLeaveAssemblyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarLeaveAssemblyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarLeaveAssemblyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarLeaveAssemblyReq_descriptor_;
}

const TCountryWarLeaveAssemblyReq& TCountryWarLeaveAssemblyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarLeaveAssemblyReq* TCountryWarLeaveAssemblyReq::default_instance_ = NULL;

TCountryWarLeaveAssemblyReq* TCountryWarLeaveAssemblyReq::New() const {
  return new TCountryWarLeaveAssemblyReq;
}

void TCountryWarLeaveAssemblyReq::Clear() {
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarLeaveAssemblyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarLeaveAssemblyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarLeaveAssemblyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarLeaveAssemblyReq)
  return false;
#undef DO_
}

void TCountryWarLeaveAssemblyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarLeaveAssemblyReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarLeaveAssemblyReq)
}

::google::protobuf::uint8* TCountryWarLeaveAssemblyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarLeaveAssemblyReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarLeaveAssemblyReq)
  return target;
}

int TCountryWarLeaveAssemblyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarLeaveAssemblyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarLeaveAssemblyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarLeaveAssemblyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarLeaveAssemblyReq::MergeFrom(const TCountryWarLeaveAssemblyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarLeaveAssemblyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarLeaveAssemblyReq::CopyFrom(const TCountryWarLeaveAssemblyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarLeaveAssemblyReq::IsInitialized() const {

  return true;
}

void TCountryWarLeaveAssemblyReq::Swap(TCountryWarLeaveAssemblyReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarLeaveAssemblyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarLeaveAssemblyReq_descriptor_;
  metadata.reflection = TCountryWarLeaveAssemblyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarAssemblyTeamHeroInfo::kHtidFieldNumber;
const int TCountryWarAssemblyTeamHeroInfo::kLevelFieldNumber;
const int TCountryWarAssemblyTeamHeroInfo::kStarFieldNumber;
const int TCountryWarAssemblyTeamHeroInfo::kTroopsNumFieldNumber;
#endif  // !_MSC_VER

TCountryWarAssemblyTeamHeroInfo::TCountryWarAssemblyTeamHeroInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarAssemblyTeamHeroInfo)
}

void TCountryWarAssemblyTeamHeroInfo::InitAsDefaultInstance() {
}

TCountryWarAssemblyTeamHeroInfo::TCountryWarAssemblyTeamHeroInfo(const TCountryWarAssemblyTeamHeroInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarAssemblyTeamHeroInfo)
}

void TCountryWarAssemblyTeamHeroInfo::SharedCtor() {
  _cached_size_ = 0;
  htid_ = 0u;
  level_ = 0u;
  star_ = 0u;
  troopsnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarAssemblyTeamHeroInfo::~TCountryWarAssemblyTeamHeroInfo() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarAssemblyTeamHeroInfo)
  SharedDtor();
}

void TCountryWarAssemblyTeamHeroInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarAssemblyTeamHeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarAssemblyTeamHeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarAssemblyTeamHeroInfo_descriptor_;
}

const TCountryWarAssemblyTeamHeroInfo& TCountryWarAssemblyTeamHeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarAssemblyTeamHeroInfo* TCountryWarAssemblyTeamHeroInfo::default_instance_ = NULL;

TCountryWarAssemblyTeamHeroInfo* TCountryWarAssemblyTeamHeroInfo::New() const {
  return new TCountryWarAssemblyTeamHeroInfo;
}

void TCountryWarAssemblyTeamHeroInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarAssemblyTeamHeroInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(htid_, troopsnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarAssemblyTeamHeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarAssemblyTeamHeroInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Htid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 2;
      case 2: {
        if (tag == 16) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Star;
        break;
      }

      // optional uint32 Star = 3;
      case 3: {
        if (tag == 24) {
         parse_Star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TroopsNum;
        break;
      }

      // optional uint32 TroopsNum = 4;
      case 4: {
        if (tag == 32) {
         parse_TroopsNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &troopsnum_)));
          set_has_troopsnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarAssemblyTeamHeroInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarAssemblyTeamHeroInfo)
  return false;
#undef DO_
}

void TCountryWarAssemblyTeamHeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarAssemblyTeamHeroInfo)
  // optional uint32 Htid = 1;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->htid(), output);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 Star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star(), output);
  }

  // optional uint32 TroopsNum = 4;
  if (has_troopsnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->troopsnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarAssemblyTeamHeroInfo)
}

::google::protobuf::uint8* TCountryWarAssemblyTeamHeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarAssemblyTeamHeroInfo)
  // optional uint32 Htid = 1;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->htid(), target);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 Star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star(), target);
  }

  // optional uint32 TroopsNum = 4;
  if (has_troopsnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->troopsnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarAssemblyTeamHeroInfo)
  return target;
}

int TCountryWarAssemblyTeamHeroInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Htid = 1;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 Star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint32 TroopsNum = 4;
    if (has_troopsnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->troopsnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarAssemblyTeamHeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarAssemblyTeamHeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarAssemblyTeamHeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarAssemblyTeamHeroInfo::MergeFrom(const TCountryWarAssemblyTeamHeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_htid()) {
      set_htid(from.htid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_troopsnum()) {
      set_troopsnum(from.troopsnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarAssemblyTeamHeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarAssemblyTeamHeroInfo::CopyFrom(const TCountryWarAssemblyTeamHeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarAssemblyTeamHeroInfo::IsInitialized() const {

  return true;
}

void TCountryWarAssemblyTeamHeroInfo::Swap(TCountryWarAssemblyTeamHeroInfo* other) {
  if (other != this) {
    std::swap(htid_, other->htid_);
    std::swap(level_, other->level_);
    std::swap(star_, other->star_);
    std::swap(troopsnum_, other->troopsnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarAssemblyTeamHeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarAssemblyTeamHeroInfo_descriptor_;
  metadata.reflection = TCountryWarAssemblyTeamHeroInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarAssemblyTeamInfo::kUserInfoFieldNumber;
const int TCountryWarAssemblyTeamInfo::kTeamIdFieldNumber;
const int TCountryWarAssemblyTeamInfo::kTeamStatusFieldNumber;
const int TCountryWarAssemblyTeamInfo::kMaxTroopsNumFieldNumber;
const int TCountryWarAssemblyTeamInfo::kTroopsNumFieldNumber;
const int TCountryWarAssemblyTeamInfo::kHeroInfoArrFieldNumber;
#endif  // !_MSC_VER

TCountryWarAssemblyTeamInfo::TCountryWarAssemblyTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarAssemblyTeamInfo)
}

void TCountryWarAssemblyTeamInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TCountryWarAssemblyUserInfo*>(&::pb::TCountryWarAssemblyUserInfo::default_instance());
}

TCountryWarAssemblyTeamInfo::TCountryWarAssemblyTeamInfo(const TCountryWarAssemblyTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarAssemblyTeamInfo)
}

void TCountryWarAssemblyTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  teamid_ = 0u;
  teamstatus_ = 1;
  maxtroopsnum_ = 0u;
  troopsnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarAssemblyTeamInfo::~TCountryWarAssemblyTeamInfo() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarAssemblyTeamInfo)
  SharedDtor();
}

void TCountryWarAssemblyTeamInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TCountryWarAssemblyTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarAssemblyTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarAssemblyTeamInfo_descriptor_;
}

const TCountryWarAssemblyTeamInfo& TCountryWarAssemblyTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarAssemblyTeamInfo* TCountryWarAssemblyTeamInfo::default_instance_ = NULL;

TCountryWarAssemblyTeamInfo* TCountryWarAssemblyTeamInfo::New() const {
  return new TCountryWarAssemblyTeamInfo;
}

void TCountryWarAssemblyTeamInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarAssemblyTeamInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(maxtroopsnum_, troopsnum_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TCountryWarAssemblyUserInfo::Clear();
    }
    teamid_ = 0u;
    teamstatus_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  heroinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarAssemblyTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarAssemblyTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TCountryWarAssemblyUserInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint32 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TeamStatus;
        break;
      }

      // optional .pb.EAssemblyTeamStatus TeamStatus = 3;
      case 3: {
        if (tag == 24) {
         parse_TeamStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAssemblyTeamStatus_IsValid(value)) {
            set_teamstatus(static_cast< ::pb::EAssemblyTeamStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MaxTroopsNum;
        break;
      }

      // optional uint32 MaxTroopsNum = 4;
      case 4: {
        if (tag == 32) {
         parse_MaxTroopsNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxtroopsnum_)));
          set_has_maxtroopsnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_TroopsNum;
        break;
      }

      // optional uint32 TroopsNum = 5;
      case 5: {
        if (tag == 40) {
         parse_TroopsNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &troopsnum_)));
          set_has_troopsnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_HeroInfoArr;
        break;
      }

      // repeated .pb.TCountryWarAssemblyTeamHeroInfo HeroInfoArr = 6;
      case 6: {
        if (tag == 50) {
         parse_HeroInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_HeroInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarAssemblyTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarAssemblyTeamInfo)
  return false;
#undef DO_
}

void TCountryWarAssemblyTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarAssemblyTeamInfo)
  // optional .pb.TCountryWarAssemblyUserInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamid(), output);
  }

  // optional .pb.EAssemblyTeamStatus TeamStatus = 3;
  if (has_teamstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->teamstatus(), output);
  }

  // optional uint32 MaxTroopsNum = 4;
  if (has_maxtroopsnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxtroopsnum(), output);
  }

  // optional uint32 TroopsNum = 5;
  if (has_troopsnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->troopsnum(), output);
  }

  // repeated .pb.TCountryWarAssemblyTeamHeroInfo HeroInfoArr = 6;
  for (int i = 0; i < this->heroinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->heroinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarAssemblyTeamInfo)
}

::google::protobuf::uint8* TCountryWarAssemblyTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarAssemblyTeamInfo)
  // optional .pb.TCountryWarAssemblyUserInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamid(), target);
  }

  // optional .pb.EAssemblyTeamStatus TeamStatus = 3;
  if (has_teamstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->teamstatus(), target);
  }

  // optional uint32 MaxTroopsNum = 4;
  if (has_maxtroopsnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxtroopsnum(), target);
  }

  // optional uint32 TroopsNum = 5;
  if (has_troopsnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->troopsnum(), target);
  }

  // repeated .pb.TCountryWarAssemblyTeamHeroInfo HeroInfoArr = 6;
  for (int i = 0; i < this->heroinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->heroinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarAssemblyTeamInfo)
  return target;
}

int TCountryWarAssemblyTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TCountryWarAssemblyUserInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional .pb.EAssemblyTeamStatus TeamStatus = 3;
    if (has_teamstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teamstatus());
    }

    // optional uint32 MaxTroopsNum = 4;
    if (has_maxtroopsnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxtroopsnum());
    }

    // optional uint32 TroopsNum = 5;
    if (has_troopsnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->troopsnum());
    }

  }
  // repeated .pb.TCountryWarAssemblyTeamHeroInfo HeroInfoArr = 6;
  total_size += 1 * this->heroinfoarr_size();
  for (int i = 0; i < this->heroinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarAssemblyTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarAssemblyTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarAssemblyTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarAssemblyTeamInfo::MergeFrom(const TCountryWarAssemblyTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroinfoarr_.MergeFrom(from.heroinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TCountryWarAssemblyUserInfo::MergeFrom(from.userinfo());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teamstatus()) {
      set_teamstatus(from.teamstatus());
    }
    if (from.has_maxtroopsnum()) {
      set_maxtroopsnum(from.maxtroopsnum());
    }
    if (from.has_troopsnum()) {
      set_troopsnum(from.troopsnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarAssemblyTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarAssemblyTeamInfo::CopyFrom(const TCountryWarAssemblyTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarAssemblyTeamInfo::IsInitialized() const {

  return true;
}

void TCountryWarAssemblyTeamInfo::Swap(TCountryWarAssemblyTeamInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(teamid_, other->teamid_);
    std::swap(teamstatus_, other->teamstatus_);
    std::swap(maxtroopsnum_, other->maxtroopsnum_);
    std::swap(troopsnum_, other->troopsnum_);
    heroinfoarr_.Swap(&other->heroinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarAssemblyTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarAssemblyTeamInfo_descriptor_;
  metadata.reflection = TCountryWarAssemblyTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarAssemblyUserInfo::kUidFieldNumber;
const int TCountryWarAssemblyUserInfo::kUnameFieldNumber;
const int TCountryWarAssemblyUserInfo::kLevelFieldNumber;
const int TCountryWarAssemblyUserInfo::kCityLevelFieldNumber;
const int TCountryWarAssemblyUserInfo::kCityIndexFieldNumber;
#endif  // !_MSC_VER

TCountryWarAssemblyUserInfo::TCountryWarAssemblyUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarAssemblyUserInfo)
}

void TCountryWarAssemblyUserInfo::InitAsDefaultInstance() {
}

TCountryWarAssemblyUserInfo::TCountryWarAssemblyUserInfo(const TCountryWarAssemblyUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarAssemblyUserInfo)
}

void TCountryWarAssemblyUserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  citylevel_ = 0u;
  cityindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarAssemblyUserInfo::~TCountryWarAssemblyUserInfo() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarAssemblyUserInfo)
  SharedDtor();
}

void TCountryWarAssemblyUserInfo::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (this != default_instance_) {
  }
}

void TCountryWarAssemblyUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarAssemblyUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarAssemblyUserInfo_descriptor_;
}

const TCountryWarAssemblyUserInfo& TCountryWarAssemblyUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarAssemblyUserInfo* TCountryWarAssemblyUserInfo::default_instance_ = NULL;

TCountryWarAssemblyUserInfo* TCountryWarAssemblyUserInfo::New() const {
  return new TCountryWarAssemblyUserInfo;
}

void TCountryWarAssemblyUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarAssemblyUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(level_, cityindex_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarAssemblyUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarAssemblyUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Uname;
        break;
      }

      // optional string Uname = 2;
      case 2: {
        if (tag == 18) {
         parse_Uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 3;
      case 3: {
        if (tag == 24) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CityLevel;
        break;
      }

      // optional uint32 CityLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_CityLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &citylevel_)));
          set_has_citylevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CityIndex;
        break;
      }

      // optional uint32 CityIndex = 5;
      case 5: {
        if (tag == 40) {
         parse_CityIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityindex_)));
          set_has_cityindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarAssemblyUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarAssemblyUserInfo)
  return false;
#undef DO_
}

void TCountryWarAssemblyUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarAssemblyUserInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uname(), output);
  }

  // optional uint32 Level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 CityLevel = 4;
  if (has_citylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->citylevel(), output);
  }

  // optional uint32 CityIndex = 5;
  if (has_cityindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cityindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarAssemblyUserInfo)
}

::google::protobuf::uint8* TCountryWarAssemblyUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarAssemblyUserInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uname(), target);
  }

  // optional uint32 Level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 CityLevel = 4;
  if (has_citylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->citylevel(), target);
  }

  // optional uint32 CityIndex = 5;
  if (has_cityindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cityindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarAssemblyUserInfo)
  return target;
}

int TCountryWarAssemblyUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string Uname = 2;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint32 Level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 CityLevel = 4;
    if (has_citylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->citylevel());
    }

    // optional uint32 CityIndex = 5;
    if (has_cityindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarAssemblyUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarAssemblyUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarAssemblyUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarAssemblyUserInfo::MergeFrom(const TCountryWarAssemblyUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_citylevel()) {
      set_citylevel(from.citylevel());
    }
    if (from.has_cityindex()) {
      set_cityindex(from.cityindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarAssemblyUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarAssemblyUserInfo::CopyFrom(const TCountryWarAssemblyUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarAssemblyUserInfo::IsInitialized() const {

  return true;
}

void TCountryWarAssemblyUserInfo::Swap(TCountryWarAssemblyUserInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(uname_, other->uname_);
    std::swap(level_, other->level_);
    std::swap(citylevel_, other->citylevel_);
    std::swap(cityindex_, other->cityindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarAssemblyUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarAssemblyUserInfo_descriptor_;
  metadata.reflection = TCountryWarAssemblyUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarAssemblyInfo::kAssemblyIdFieldNumber;
const int TCountryWarAssemblyInfo::kUidFieldNumber;
const int TCountryWarAssemblyInfo::kUnameFieldNumber;
const int TCountryWarAssemblyInfo::kMaxNumFieldNumber;
const int TCountryWarAssemblyInfo::kGridIndexFieldNumber;
const int TCountryWarAssemblyInfo::kCreateTimeFieldNumber;
const int TCountryWarAssemblyInfo::kEndTimeFieldNumber;
const int TCountryWarAssemblyInfo::kMarchEndTimeFieldNumber;
const int TCountryWarAssemblyInfo::kEndGridIndexFieldNumber;
const int TCountryWarAssemblyInfo::kEndGridTypeFieldNumber;
const int TCountryWarAssemblyInfo::kEndTreasureIdFieldNumber;
const int TCountryWarAssemblyInfo::kTargetUserInfoFieldNumber;
const int TCountryWarAssemblyInfo::kStatusFieldNumber;
const int TCountryWarAssemblyInfo::kArrTeamInfoFieldNumber;
#endif  // !_MSC_VER

TCountryWarAssemblyInfo::TCountryWarAssemblyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarAssemblyInfo)
}

void TCountryWarAssemblyInfo::InitAsDefaultInstance() {
  targetuserinfo_ = const_cast< ::pb::TCountryWarAssemblyUserInfo*>(&::pb::TCountryWarAssemblyUserInfo::default_instance());
}

TCountryWarAssemblyInfo::TCountryWarAssemblyInfo(const TCountryWarAssemblyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarAssemblyInfo)
}

void TCountryWarAssemblyInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  assemblyid_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxnum_ = 0u;
  gridindex_ = 0u;
  createtime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  marchendtime_ = GOOGLE_ULONGLONG(0);
  endgridindex_ = 0u;
  endgridtype_ = 0u;
  endtreasureid_ = 0u;
  targetuserinfo_ = NULL;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarAssemblyInfo::~TCountryWarAssemblyInfo() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarAssemblyInfo)
  SharedDtor();
}

void TCountryWarAssemblyInfo::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (this != default_instance_) {
    delete targetuserinfo_;
  }
}

void TCountryWarAssemblyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarAssemblyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarAssemblyInfo_descriptor_;
}

const TCountryWarAssemblyInfo& TCountryWarAssemblyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarAssemblyInfo* TCountryWarAssemblyInfo::default_instance_ = NULL;

TCountryWarAssemblyInfo* TCountryWarAssemblyInfo::New() const {
  return new TCountryWarAssemblyInfo;
}

void TCountryWarAssemblyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCountryWarAssemblyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, maxnum_);
    ZR_(createtime_, gridindex_);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
    marchendtime_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(endgridtype_, endtreasureid_);
    endgridindex_ = 0u;
    if (has_targetuserinfo()) {
      if (targetuserinfo_ != NULL) targetuserinfo_->::pb::TCountryWarAssemblyUserInfo::Clear();
    }
    status_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrteaminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarAssemblyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarAssemblyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AssemblyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assemblyid_)));
          set_has_assemblyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 2;
      case 2: {
        if (tag == 16) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Uname;
        break;
      }

      // optional string Uname = 3;
      case 3: {
        if (tag == 26) {
         parse_Uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MaxNum;
        break;
      }

      // optional uint32 MaxNum = 4;
      case 4: {
        if (tag == 32) {
         parse_MaxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_GridIndex;
        break;
      }

      // optional uint32 GridIndex = 5;
      case 5: {
        if (tag == 40) {
         parse_GridIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridindex_)));
          set_has_gridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_CreateTime;
        break;
      }

      // optional uint64 CreateTime = 6;
      case 6: {
        if (tag == 48) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 7;
      case 7: {
        if (tag == 56) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_MarchEndTime;
        break;
      }

      // optional uint64 MarchEndTime = 8;
      case 8: {
        if (tag == 64) {
         parse_MarchEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &marchendtime_)));
          set_has_marchendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_EndGridIndex;
        break;
      }

      // optional uint32 EndGridIndex = 9;
      case 9: {
        if (tag == 72) {
         parse_EndGridIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endgridindex_)));
          set_has_endgridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_EndGridType;
        break;
      }

      // optional uint32 EndGridType = 10;
      case 10: {
        if (tag == 80) {
         parse_EndGridType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endgridtype_)));
          set_has_endgridtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_EndTreasureId;
        break;
      }

      // optional uint32 EndTreasureId = 11;
      case 11: {
        if (tag == 88) {
         parse_EndTreasureId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtreasureid_)));
          set_has_endtreasureid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_TargetUserInfo;
        break;
      }

      // optional .pb.TCountryWarAssemblyUserInfo TargetUserInfo = 12;
      case 12: {
        if (tag == 98) {
         parse_TargetUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_Status;
        break;
      }

      // optional .pb.EAssemblyStatus Status = 13;
      case 13: {
        if (tag == 104) {
         parse_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAssemblyStatus_IsValid(value)) {
            set_status(static_cast< ::pb::EAssemblyStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_ArrTeamInfo;
        break;
      }

      // repeated .pb.TCountryWarAssemblyTeamInfo ArrTeamInfo = 14;
      case 14: {
        if (tag == 114) {
         parse_ArrTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrteaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_ArrTeamInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarAssemblyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarAssemblyInfo)
  return false;
#undef DO_
}

void TCountryWarAssemblyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarAssemblyInfo)
  // optional uint32 AssemblyId = 1;
  if (has_assemblyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->assemblyid(), output);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional string Uname = 3;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uname(), output);
  }

  // optional uint32 MaxNum = 4;
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxnum(), output);
  }

  // optional uint32 GridIndex = 5;
  if (has_gridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gridindex(), output);
  }

  // optional uint64 CreateTime = 6;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->createtime(), output);
  }

  // optional uint64 EndTime = 7;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->endtime(), output);
  }

  // optional uint64 MarchEndTime = 8;
  if (has_marchendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->marchendtime(), output);
  }

  // optional uint32 EndGridIndex = 9;
  if (has_endgridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->endgridindex(), output);
  }

  // optional uint32 EndGridType = 10;
  if (has_endgridtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->endgridtype(), output);
  }

  // optional uint32 EndTreasureId = 11;
  if (has_endtreasureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->endtreasureid(), output);
  }

  // optional .pb.TCountryWarAssemblyUserInfo TargetUserInfo = 12;
  if (has_targetuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->targetuserinfo(), output);
  }

  // optional .pb.EAssemblyStatus Status = 13;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->status(), output);
  }

  // repeated .pb.TCountryWarAssemblyTeamInfo ArrTeamInfo = 14;
  for (int i = 0; i < this->arrteaminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->arrteaminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarAssemblyInfo)
}

::google::protobuf::uint8* TCountryWarAssemblyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarAssemblyInfo)
  // optional uint32 AssemblyId = 1;
  if (has_assemblyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->assemblyid(), target);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional string Uname = 3;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uname(), target);
  }

  // optional uint32 MaxNum = 4;
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxnum(), target);
  }

  // optional uint32 GridIndex = 5;
  if (has_gridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gridindex(), target);
  }

  // optional uint64 CreateTime = 6;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->createtime(), target);
  }

  // optional uint64 EndTime = 7;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->endtime(), target);
  }

  // optional uint64 MarchEndTime = 8;
  if (has_marchendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->marchendtime(), target);
  }

  // optional uint32 EndGridIndex = 9;
  if (has_endgridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->endgridindex(), target);
  }

  // optional uint32 EndGridType = 10;
  if (has_endgridtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->endgridtype(), target);
  }

  // optional uint32 EndTreasureId = 11;
  if (has_endtreasureid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->endtreasureid(), target);
  }

  // optional .pb.TCountryWarAssemblyUserInfo TargetUserInfo = 12;
  if (has_targetuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->targetuserinfo(), target);
  }

  // optional .pb.EAssemblyStatus Status = 13;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->status(), target);
  }

  // repeated .pb.TCountryWarAssemblyTeamInfo ArrTeamInfo = 14;
  for (int i = 0; i < this->arrteaminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->arrteaminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarAssemblyInfo)
  return target;
}

int TCountryWarAssemblyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AssemblyId = 1;
    if (has_assemblyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assemblyid());
    }

    // optional uint64 Uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string Uname = 3;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint32 MaxNum = 4;
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxnum());
    }

    // optional uint32 GridIndex = 5;
    if (has_gridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridindex());
    }

    // optional uint64 CreateTime = 6;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional uint64 EndTime = 7;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint64 MarchEndTime = 8;
    if (has_marchendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->marchendtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 EndGridIndex = 9;
    if (has_endgridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endgridindex());
    }

    // optional uint32 EndGridType = 10;
    if (has_endgridtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endgridtype());
    }

    // optional uint32 EndTreasureId = 11;
    if (has_endtreasureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtreasureid());
    }

    // optional .pb.TCountryWarAssemblyUserInfo TargetUserInfo = 12;
    if (has_targetuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetuserinfo());
    }

    // optional .pb.EAssemblyStatus Status = 13;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .pb.TCountryWarAssemblyTeamInfo ArrTeamInfo = 14;
  total_size += 1 * this->arrteaminfo_size();
  for (int i = 0; i < this->arrteaminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrteaminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarAssemblyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarAssemblyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarAssemblyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarAssemblyInfo::MergeFrom(const TCountryWarAssemblyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrteaminfo_.MergeFrom(from.arrteaminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assemblyid()) {
      set_assemblyid(from.assemblyid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
    if (from.has_gridindex()) {
      set_gridindex(from.gridindex());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_marchendtime()) {
      set_marchendtime(from.marchendtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_endgridindex()) {
      set_endgridindex(from.endgridindex());
    }
    if (from.has_endgridtype()) {
      set_endgridtype(from.endgridtype());
    }
    if (from.has_endtreasureid()) {
      set_endtreasureid(from.endtreasureid());
    }
    if (from.has_targetuserinfo()) {
      mutable_targetuserinfo()->::pb::TCountryWarAssemblyUserInfo::MergeFrom(from.targetuserinfo());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarAssemblyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarAssemblyInfo::CopyFrom(const TCountryWarAssemblyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarAssemblyInfo::IsInitialized() const {

  return true;
}

void TCountryWarAssemblyInfo::Swap(TCountryWarAssemblyInfo* other) {
  if (other != this) {
    std::swap(assemblyid_, other->assemblyid_);
    std::swap(uid_, other->uid_);
    std::swap(uname_, other->uname_);
    std::swap(maxnum_, other->maxnum_);
    std::swap(gridindex_, other->gridindex_);
    std::swap(createtime_, other->createtime_);
    std::swap(endtime_, other->endtime_);
    std::swap(marchendtime_, other->marchendtime_);
    std::swap(endgridindex_, other->endgridindex_);
    std::swap(endgridtype_, other->endgridtype_);
    std::swap(endtreasureid_, other->endtreasureid_);
    std::swap(targetuserinfo_, other->targetuserinfo_);
    std::swap(status_, other->status_);
    arrteaminfo_.Swap(&other->arrteaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarAssemblyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarAssemblyInfo_descriptor_;
  metadata.reflection = TCountryWarAssemblyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TCountryWarGetAssemblyListReq::TCountryWarGetAssemblyListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarGetAssemblyListReq)
}

void TCountryWarGetAssemblyListReq::InitAsDefaultInstance() {
}

TCountryWarGetAssemblyListReq::TCountryWarGetAssemblyListReq(const TCountryWarGetAssemblyListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarGetAssemblyListReq)
}

void TCountryWarGetAssemblyListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarGetAssemblyListReq::~TCountryWarGetAssemblyListReq() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarGetAssemblyListReq)
  SharedDtor();
}

void TCountryWarGetAssemblyListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarGetAssemblyListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarGetAssemblyListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarGetAssemblyListReq_descriptor_;
}

const TCountryWarGetAssemblyListReq& TCountryWarGetAssemblyListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarGetAssemblyListReq* TCountryWarGetAssemblyListReq::default_instance_ = NULL;

TCountryWarGetAssemblyListReq* TCountryWarGetAssemblyListReq::New() const {
  return new TCountryWarGetAssemblyListReq;
}

void TCountryWarGetAssemblyListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarGetAssemblyListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarGetAssemblyListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarGetAssemblyListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarGetAssemblyListReq)
  return false;
#undef DO_
}

void TCountryWarGetAssemblyListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarGetAssemblyListReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarGetAssemblyListReq)
}

::google::protobuf::uint8* TCountryWarGetAssemblyListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarGetAssemblyListReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarGetAssemblyListReq)
  return target;
}

int TCountryWarGetAssemblyListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarGetAssemblyListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarGetAssemblyListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarGetAssemblyListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarGetAssemblyListReq::MergeFrom(const TCountryWarGetAssemblyListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarGetAssemblyListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarGetAssemblyListReq::CopyFrom(const TCountryWarGetAssemblyListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarGetAssemblyListReq::IsInitialized() const {

  return true;
}

void TCountryWarGetAssemblyListReq::Swap(TCountryWarGetAssemblyListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarGetAssemblyListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarGetAssemblyListReq_descriptor_;
  metadata.reflection = TCountryWarGetAssemblyListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarGetAssemblyListRsp::kAssemblyDataArrayFieldNumber;
#endif  // !_MSC_VER

TCountryWarGetAssemblyListRsp::TCountryWarGetAssemblyListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarGetAssemblyListRsp)
}

void TCountryWarGetAssemblyListRsp::InitAsDefaultInstance() {
}

TCountryWarGetAssemblyListRsp::TCountryWarGetAssemblyListRsp(const TCountryWarGetAssemblyListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarGetAssemblyListRsp)
}

void TCountryWarGetAssemblyListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarGetAssemblyListRsp::~TCountryWarGetAssemblyListRsp() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarGetAssemblyListRsp)
  SharedDtor();
}

void TCountryWarGetAssemblyListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarGetAssemblyListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarGetAssemblyListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarGetAssemblyListRsp_descriptor_;
}

const TCountryWarGetAssemblyListRsp& TCountryWarGetAssemblyListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarGetAssemblyListRsp* TCountryWarGetAssemblyListRsp::default_instance_ = NULL;

TCountryWarGetAssemblyListRsp* TCountryWarGetAssemblyListRsp::New() const {
  return new TCountryWarGetAssemblyListRsp;
}

void TCountryWarGetAssemblyListRsp::Clear() {
  assemblydataarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarGetAssemblyListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarGetAssemblyListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCountryWarAssemblyInfo AssemblyDataArray = 1;
      case 1: {
        if (tag == 10) {
         parse_AssemblyDataArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assemblydataarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_AssemblyDataArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarGetAssemblyListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarGetAssemblyListRsp)
  return false;
#undef DO_
}

void TCountryWarGetAssemblyListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarGetAssemblyListRsp)
  // repeated .pb.TCountryWarAssemblyInfo AssemblyDataArray = 1;
  for (int i = 0; i < this->assemblydataarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->assemblydataarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarGetAssemblyListRsp)
}

::google::protobuf::uint8* TCountryWarGetAssemblyListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarGetAssemblyListRsp)
  // repeated .pb.TCountryWarAssemblyInfo AssemblyDataArray = 1;
  for (int i = 0; i < this->assemblydataarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->assemblydataarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarGetAssemblyListRsp)
  return target;
}

int TCountryWarGetAssemblyListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCountryWarAssemblyInfo AssemblyDataArray = 1;
  total_size += 1 * this->assemblydataarray_size();
  for (int i = 0; i < this->assemblydataarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assemblydataarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarGetAssemblyListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarGetAssemblyListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarGetAssemblyListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarGetAssemblyListRsp::MergeFrom(const TCountryWarGetAssemblyListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  assemblydataarray_.MergeFrom(from.assemblydataarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarGetAssemblyListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarGetAssemblyListRsp::CopyFrom(const TCountryWarGetAssemblyListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarGetAssemblyListRsp::IsInitialized() const {

  return true;
}

void TCountryWarGetAssemblyListRsp::Swap(TCountryWarGetAssemblyListRsp* other) {
  if (other != this) {
    assemblydataarray_.Swap(&other->assemblydataarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarGetAssemblyListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarGetAssemblyListRsp_descriptor_;
  metadata.reflection = TCountryWarGetAssemblyListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarGridNotify::kGridArrFieldNumber;
const int TCountryWarGridNotify::kUserArrFieldNumber;
const int TCountryWarGridNotify::kGuildArrFieldNumber;
#endif  // !_MSC_VER

TCountryWarGridNotify::TCountryWarGridNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarGridNotify)
}

void TCountryWarGridNotify::InitAsDefaultInstance() {
}

TCountryWarGridNotify::TCountryWarGridNotify(const TCountryWarGridNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarGridNotify)
}

void TCountryWarGridNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarGridNotify::~TCountryWarGridNotify() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarGridNotify)
  SharedDtor();
}

void TCountryWarGridNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarGridNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarGridNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarGridNotify_descriptor_;
}

const TCountryWarGridNotify& TCountryWarGridNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarGridNotify* TCountryWarGridNotify::default_instance_ = NULL;

TCountryWarGridNotify* TCountryWarGridNotify::New() const {
  return new TCountryWarGridNotify;
}

void TCountryWarGridNotify::Clear() {
  gridarr_.Clear();
  userarr_.Clear();
  guildarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarGridNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarGridNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCountryWarGridInfo GridArr = 1;
      case 1: {
        if (tag == 10) {
         parse_GridArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gridarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_GridArr;
        if (input->ExpectTag(18)) goto parse_UserArr;
        break;
      }

      // repeated .pb.TCountryWarUserInfo UserArr = 2;
      case 2: {
        if (tag == 18) {
         parse_UserArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserArr;
        if (input->ExpectTag(26)) goto parse_GuildArr;
        break;
      }

      // repeated .pb.TCountryWarGuildInfo GuildArr = 3;
      case 3: {
        if (tag == 26) {
         parse_GuildArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GuildArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarGridNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarGridNotify)
  return false;
#undef DO_
}

void TCountryWarGridNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarGridNotify)
  // repeated .pb.TCountryWarGridInfo GridArr = 1;
  for (int i = 0; i < this->gridarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gridarr(i), output);
  }

  // repeated .pb.TCountryWarUserInfo UserArr = 2;
  for (int i = 0; i < this->userarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userarr(i), output);
  }

  // repeated .pb.TCountryWarGuildInfo GuildArr = 3;
  for (int i = 0; i < this->guildarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->guildarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarGridNotify)
}

::google::protobuf::uint8* TCountryWarGridNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarGridNotify)
  // repeated .pb.TCountryWarGridInfo GridArr = 1;
  for (int i = 0; i < this->gridarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gridarr(i), target);
  }

  // repeated .pb.TCountryWarUserInfo UserArr = 2;
  for (int i = 0; i < this->userarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userarr(i), target);
  }

  // repeated .pb.TCountryWarGuildInfo GuildArr = 3;
  for (int i = 0; i < this->guildarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->guildarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarGridNotify)
  return target;
}

int TCountryWarGridNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCountryWarGridInfo GridArr = 1;
  total_size += 1 * this->gridarr_size();
  for (int i = 0; i < this->gridarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gridarr(i));
  }

  // repeated .pb.TCountryWarUserInfo UserArr = 2;
  total_size += 1 * this->userarr_size();
  for (int i = 0; i < this->userarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userarr(i));
  }

  // repeated .pb.TCountryWarGuildInfo GuildArr = 3;
  total_size += 1 * this->guildarr_size();
  for (int i = 0; i < this->guildarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarGridNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarGridNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarGridNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarGridNotify::MergeFrom(const TCountryWarGridNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  gridarr_.MergeFrom(from.gridarr_);
  userarr_.MergeFrom(from.userarr_);
  guildarr_.MergeFrom(from.guildarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarGridNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarGridNotify::CopyFrom(const TCountryWarGridNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarGridNotify::IsInitialized() const {

  return true;
}

void TCountryWarGridNotify::Swap(TCountryWarGridNotify* other) {
  if (other != this) {
    gridarr_.Swap(&other->gridarr_);
    userarr_.Swap(&other->userarr_);
    guildarr_.Swap(&other->guildarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarGridNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarGridNotify_descriptor_;
  metadata.reflection = TCountryWarGridNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarMarchNotify::kMarchArrFieldNumber;
const int TCountryWarMarchNotify::kUserArrFieldNumber;
const int TCountryWarMarchNotify::kGuildArrFieldNumber;
#endif  // !_MSC_VER

TCountryWarMarchNotify::TCountryWarMarchNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarMarchNotify)
}

void TCountryWarMarchNotify::InitAsDefaultInstance() {
}

TCountryWarMarchNotify::TCountryWarMarchNotify(const TCountryWarMarchNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarMarchNotify)
}

void TCountryWarMarchNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarMarchNotify::~TCountryWarMarchNotify() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarMarchNotify)
  SharedDtor();
}

void TCountryWarMarchNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarMarchNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarMarchNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarMarchNotify_descriptor_;
}

const TCountryWarMarchNotify& TCountryWarMarchNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarMarchNotify* TCountryWarMarchNotify::default_instance_ = NULL;

TCountryWarMarchNotify* TCountryWarMarchNotify::New() const {
  return new TCountryWarMarchNotify;
}

void TCountryWarMarchNotify::Clear() {
  marcharr_.Clear();
  userarr_.Clear();
  guildarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarMarchNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarMarchNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCountryWarMarchInfo MarchArr = 1;
      case 1: {
        if (tag == 10) {
         parse_MarchArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_marcharr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_MarchArr;
        if (input->ExpectTag(18)) goto parse_UserArr;
        break;
      }

      // repeated .pb.TCountryWarUserInfo UserArr = 2;
      case 2: {
        if (tag == 18) {
         parse_UserArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserArr;
        if (input->ExpectTag(26)) goto parse_GuildArr;
        break;
      }

      // repeated .pb.TCountryWarGuildInfo GuildArr = 3;
      case 3: {
        if (tag == 26) {
         parse_GuildArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GuildArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarMarchNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarMarchNotify)
  return false;
#undef DO_
}

void TCountryWarMarchNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarMarchNotify)
  // repeated .pb.TCountryWarMarchInfo MarchArr = 1;
  for (int i = 0; i < this->marcharr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->marcharr(i), output);
  }

  // repeated .pb.TCountryWarUserInfo UserArr = 2;
  for (int i = 0; i < this->userarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userarr(i), output);
  }

  // repeated .pb.TCountryWarGuildInfo GuildArr = 3;
  for (int i = 0; i < this->guildarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->guildarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarMarchNotify)
}

::google::protobuf::uint8* TCountryWarMarchNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarMarchNotify)
  // repeated .pb.TCountryWarMarchInfo MarchArr = 1;
  for (int i = 0; i < this->marcharr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->marcharr(i), target);
  }

  // repeated .pb.TCountryWarUserInfo UserArr = 2;
  for (int i = 0; i < this->userarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userarr(i), target);
  }

  // repeated .pb.TCountryWarGuildInfo GuildArr = 3;
  for (int i = 0; i < this->guildarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->guildarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarMarchNotify)
  return target;
}

int TCountryWarMarchNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCountryWarMarchInfo MarchArr = 1;
  total_size += 1 * this->marcharr_size();
  for (int i = 0; i < this->marcharr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->marcharr(i));
  }

  // repeated .pb.TCountryWarUserInfo UserArr = 2;
  total_size += 1 * this->userarr_size();
  for (int i = 0; i < this->userarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userarr(i));
  }

  // repeated .pb.TCountryWarGuildInfo GuildArr = 3;
  total_size += 1 * this->guildarr_size();
  for (int i = 0; i < this->guildarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarMarchNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarMarchNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarMarchNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarMarchNotify::MergeFrom(const TCountryWarMarchNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  marcharr_.MergeFrom(from.marcharr_);
  userarr_.MergeFrom(from.userarr_);
  guildarr_.MergeFrom(from.guildarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarMarchNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarMarchNotify::CopyFrom(const TCountryWarMarchNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarMarchNotify::IsInitialized() const {

  return true;
}

void TCountryWarMarchNotify::Swap(TCountryWarMarchNotify* other) {
  if (other != this) {
    marcharr_.Swap(&other->marcharr_);
    userarr_.Swap(&other->userarr_);
    guildarr_.Swap(&other->guildarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarMarchNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarMarchNotify_descriptor_;
  metadata.reflection = TCountryWarMarchNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarUserGuildInfoNotify::kUserArrFieldNumber;
const int TCountryWarUserGuildInfoNotify::kGuildArrFieldNumber;
#endif  // !_MSC_VER

TCountryWarUserGuildInfoNotify::TCountryWarUserGuildInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarUserGuildInfoNotify)
}

void TCountryWarUserGuildInfoNotify::InitAsDefaultInstance() {
}

TCountryWarUserGuildInfoNotify::TCountryWarUserGuildInfoNotify(const TCountryWarUserGuildInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarUserGuildInfoNotify)
}

void TCountryWarUserGuildInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarUserGuildInfoNotify::~TCountryWarUserGuildInfoNotify() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarUserGuildInfoNotify)
  SharedDtor();
}

void TCountryWarUserGuildInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarUserGuildInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarUserGuildInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarUserGuildInfoNotify_descriptor_;
}

const TCountryWarUserGuildInfoNotify& TCountryWarUserGuildInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarUserGuildInfoNotify* TCountryWarUserGuildInfoNotify::default_instance_ = NULL;

TCountryWarUserGuildInfoNotify* TCountryWarUserGuildInfoNotify::New() const {
  return new TCountryWarUserGuildInfoNotify;
}

void TCountryWarUserGuildInfoNotify::Clear() {
  userarr_.Clear();
  guildarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarUserGuildInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarUserGuildInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCountryWarUserInfo UserArr = 3;
      case 3: {
        if (tag == 26) {
         parse_UserArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserArr;
        if (input->ExpectTag(34)) goto parse_GuildArr;
        break;
      }

      // repeated .pb.TCountryWarGuildInfo GuildArr = 4;
      case 4: {
        if (tag == 34) {
         parse_GuildArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_GuildArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarUserGuildInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarUserGuildInfoNotify)
  return false;
#undef DO_
}

void TCountryWarUserGuildInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarUserGuildInfoNotify)
  // repeated .pb.TCountryWarUserInfo UserArr = 3;
  for (int i = 0; i < this->userarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userarr(i), output);
  }

  // repeated .pb.TCountryWarGuildInfo GuildArr = 4;
  for (int i = 0; i < this->guildarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->guildarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarUserGuildInfoNotify)
}

::google::protobuf::uint8* TCountryWarUserGuildInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarUserGuildInfoNotify)
  // repeated .pb.TCountryWarUserInfo UserArr = 3;
  for (int i = 0; i < this->userarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userarr(i), target);
  }

  // repeated .pb.TCountryWarGuildInfo GuildArr = 4;
  for (int i = 0; i < this->guildarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->guildarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarUserGuildInfoNotify)
  return target;
}

int TCountryWarUserGuildInfoNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCountryWarUserInfo UserArr = 3;
  total_size += 1 * this->userarr_size();
  for (int i = 0; i < this->userarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userarr(i));
  }

  // repeated .pb.TCountryWarGuildInfo GuildArr = 4;
  total_size += 1 * this->guildarr_size();
  for (int i = 0; i < this->guildarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarUserGuildInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarUserGuildInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarUserGuildInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarUserGuildInfoNotify::MergeFrom(const TCountryWarUserGuildInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  userarr_.MergeFrom(from.userarr_);
  guildarr_.MergeFrom(from.guildarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarUserGuildInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarUserGuildInfoNotify::CopyFrom(const TCountryWarUserGuildInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarUserGuildInfoNotify::IsInitialized() const {

  return true;
}

void TCountryWarUserGuildInfoNotify::Swap(TCountryWarUserGuildInfoNotify* other) {
  if (other != this) {
    userarr_.Swap(&other->userarr_);
    guildarr_.Swap(&other->guildarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarUserGuildInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarUserGuildInfoNotify_descriptor_;
  metadata.reflection = TCountryWarUserGuildInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCountryWarAssemblyNotify::kAssemblyDataArrayFieldNumber;
const int TCountryWarAssemblyNotify::kRemoveAssemblyIdFieldNumber;
#endif  // !_MSC_VER

TCountryWarAssemblyNotify::TCountryWarAssemblyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCountryWarAssemblyNotify)
}

void TCountryWarAssemblyNotify::InitAsDefaultInstance() {
}

TCountryWarAssemblyNotify::TCountryWarAssemblyNotify(const TCountryWarAssemblyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCountryWarAssemblyNotify)
}

void TCountryWarAssemblyNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCountryWarAssemblyNotify::~TCountryWarAssemblyNotify() {
  // @@protoc_insertion_point(destructor:pb.TCountryWarAssemblyNotify)
  SharedDtor();
}

void TCountryWarAssemblyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCountryWarAssemblyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCountryWarAssemblyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCountryWarAssemblyNotify_descriptor_;
}

const TCountryWarAssemblyNotify& TCountryWarAssemblyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCountryWar_2eproto();
  return *default_instance_;
}

TCountryWarAssemblyNotify* TCountryWarAssemblyNotify::default_instance_ = NULL;

TCountryWarAssemblyNotify* TCountryWarAssemblyNotify::New() const {
  return new TCountryWarAssemblyNotify;
}

void TCountryWarAssemblyNotify::Clear() {
  assemblydataarray_.Clear();
  removeassemblyid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCountryWarAssemblyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCountryWarAssemblyNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCountryWarAssemblyInfo AssemblyDataArray = 1;
      case 1: {
        if (tag == 10) {
         parse_AssemblyDataArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assemblydataarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_AssemblyDataArray;
        if (input->ExpectTag(16)) goto parse_RemoveAssemblyId;
        break;
      }

      // repeated uint32 RemoveAssemblyId = 2;
      case 2: {
        if (tag == 16) {
         parse_RemoveAssemblyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_removeassemblyid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_removeassemblyid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RemoveAssemblyId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCountryWarAssemblyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCountryWarAssemblyNotify)
  return false;
#undef DO_
}

void TCountryWarAssemblyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCountryWarAssemblyNotify)
  // repeated .pb.TCountryWarAssemblyInfo AssemblyDataArray = 1;
  for (int i = 0; i < this->assemblydataarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->assemblydataarray(i), output);
  }

  // repeated uint32 RemoveAssemblyId = 2;
  for (int i = 0; i < this->removeassemblyid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->removeassemblyid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCountryWarAssemblyNotify)
}

::google::protobuf::uint8* TCountryWarAssemblyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCountryWarAssemblyNotify)
  // repeated .pb.TCountryWarAssemblyInfo AssemblyDataArray = 1;
  for (int i = 0; i < this->assemblydataarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->assemblydataarray(i), target);
  }

  // repeated uint32 RemoveAssemblyId = 2;
  for (int i = 0; i < this->removeassemblyid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->removeassemblyid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCountryWarAssemblyNotify)
  return target;
}

int TCountryWarAssemblyNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCountryWarAssemblyInfo AssemblyDataArray = 1;
  total_size += 1 * this->assemblydataarray_size();
  for (int i = 0; i < this->assemblydataarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assemblydataarray(i));
  }

  // repeated uint32 RemoveAssemblyId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->removeassemblyid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->removeassemblyid(i));
    }
    total_size += 1 * this->removeassemblyid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCountryWarAssemblyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCountryWarAssemblyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCountryWarAssemblyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCountryWarAssemblyNotify::MergeFrom(const TCountryWarAssemblyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  assemblydataarray_.MergeFrom(from.assemblydataarray_);
  removeassemblyid_.MergeFrom(from.removeassemblyid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCountryWarAssemblyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCountryWarAssemblyNotify::CopyFrom(const TCountryWarAssemblyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCountryWarAssemblyNotify::IsInitialized() const {

  return true;
}

void TCountryWarAssemblyNotify::Swap(TCountryWarAssemblyNotify* other) {
  if (other != this) {
    assemblydataarray_.Swap(&other->assemblydataarray_);
    removeassemblyid_.Swap(&other->removeassemblyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCountryWarAssemblyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCountryWarAssemblyNotify_descriptor_;
  metadata.reflection = TCountryWarAssemblyNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
