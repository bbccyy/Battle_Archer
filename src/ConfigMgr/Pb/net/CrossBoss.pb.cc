// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossBoss.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/CrossBoss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossPosInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossPosInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossGetBaseInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossGetBaseInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossGetMapInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossGetMapInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossGetMapInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossGetMapInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossDoBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossDoBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossDoBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossDoBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossBeginShowReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossBeginShowReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossGetRankArrRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossGetRankArrRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossGetRankArrRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossGetRankArrRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossLeaveBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossLeaveBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossGetRecordRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossGetRecordRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossGetRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossGetRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossBuyChallengeNumReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossBuyChallengeNumReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossBuyChallengeNumRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossBuyChallengeNumRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossGetServerTeamInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossGetServerTeamInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossGetMyFmtRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossGetMyFmtRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossSetMyFmtReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossSetMyFmtReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossFirstAtkNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossFirstAtkNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBossFinalRankNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBossFinalRankNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EBossStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBossRecordType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fCrossBoss_2eproto() {
  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/CrossBoss.proto");
  GOOGLE_CHECK(file != NULL);
  TBossInfo_descriptor_ = file->message_type(0);
  static const int TBossInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossInfo, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossInfo, killtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossInfo, begintime_),
  };
  TBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossInfo_descriptor_,
      TBossInfo::default_instance_,
      TBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossInfo));
  TBossRecordInfo_descriptor_ = file->message_type(1);
  static const int TBossRecordInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossRecordInfo, recordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossRecordInfo, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossRecordInfo, totaldamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossRecordInfo, atkuserinfo_),
  };
  TBossRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossRecordInfo_descriptor_,
      TBossRecordInfo::default_instance_,
      TBossRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossRecordInfo));
  TBossRankInfo_descriptor_ = file->message_type(2);
  static const int TBossRankInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossRankInfo, totaldamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossRankInfo, simpleinfo_),
  };
  TBossRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossRankInfo_descriptor_,
      TBossRankInfo::default_instance_,
      TBossRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossRankInfo));
  TBossPosInfo_descriptor_ = file->message_type(3);
  static const int TBossPosInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossPosInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossPosInfo, hid_),
  };
  TBossPosInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossPosInfo_descriptor_,
      TBossPosInfo::default_instance_,
      TBossPosInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossPosInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossPosInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossPosInfo));
  TBossGetBaseInfoRsp_descriptor_ = file->message_type(4);
  static const int TBossGetBaseInfoRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetBaseInfoRsp, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetBaseInfoRsp, leftchallengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetBaseInfoRsp, buychallengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetBaseInfoRsp, bossid_),
  };
  TBossGetBaseInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossGetBaseInfoRsp_descriptor_,
      TBossGetBaseInfoRsp::default_instance_,
      TBossGetBaseInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetBaseInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetBaseInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossGetBaseInfoRsp));
  TBossGetMapInfoReq_descriptor_ = file->message_type(5);
  static const int TBossGetMapInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetMapInfoReq, mapid_),
  };
  TBossGetMapInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossGetMapInfoReq_descriptor_,
      TBossGetMapInfoReq::default_instance_,
      TBossGetMapInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetMapInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetMapInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossGetMapInfoReq));
  TBossGetMapInfoRsp_descriptor_ = file->message_type(6);
  static const int TBossGetMapInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetMapInfoRsp, bossinfo_),
  };
  TBossGetMapInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossGetMapInfoRsp_descriptor_,
      TBossGetMapInfoRsp::default_instance_,
      TBossGetMapInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetMapInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetMapInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossGetMapInfoRsp));
  TBossDoBattleReq_descriptor_ = file->message_type(7);
  static const int TBossDoBattleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossDoBattleReq, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossDoBattleReq, battlecheckparam_),
  };
  TBossDoBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossDoBattleReq_descriptor_,
      TBossDoBattleReq::default_instance_,
      TBossDoBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossDoBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossDoBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossDoBattleReq));
  TBossDoBattleRsp_descriptor_ = file->message_type(8);
  static const int TBossDoBattleRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossDoBattleRsp, battleresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossDoBattleRsp, battlevalid_),
  };
  TBossDoBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossDoBattleRsp_descriptor_,
      TBossDoBattleRsp::default_instance_,
      TBossDoBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossDoBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossDoBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossDoBattleRsp));
  TBossBeginShowReq_descriptor_ = file->message_type(9);
  static const int TBossBeginShowReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossBeginShowReq, bossid_),
  };
  TBossBeginShowReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossBeginShowReq_descriptor_,
      TBossBeginShowReq::default_instance_,
      TBossBeginShowReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossBeginShowReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossBeginShowReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossBeginShowReq));
  TBossGetRankArrRep_descriptor_ = file->message_type(10);
  static const int TBossGetRankArrRep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetRankArrRep, bossid_),
  };
  TBossGetRankArrRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossGetRankArrRep_descriptor_,
      TBossGetRankArrRep::default_instance_,
      TBossGetRankArrRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetRankArrRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetRankArrRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossGetRankArrRep));
  TBossGetRankArrRsp_descriptor_ = file->message_type(11);
  static const int TBossGetRankArrRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetRankArrRsp, userrankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetRankArrRsp, selfrank_),
  };
  TBossGetRankArrRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossGetRankArrRsp_descriptor_,
      TBossGetRankArrRsp::default_instance_,
      TBossGetRankArrRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetRankArrRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetRankArrRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossGetRankArrRsp));
  TBossLeaveBattleReq_descriptor_ = file->message_type(12);
  static const int TBossLeaveBattleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossLeaveBattleReq, bossid_),
  };
  TBossLeaveBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossLeaveBattleReq_descriptor_,
      TBossLeaveBattleReq::default_instance_,
      TBossLeaveBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossLeaveBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossLeaveBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossLeaveBattleReq));
  TBossGetRecordRep_descriptor_ = file->message_type(13);
  static const int TBossGetRecordRep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetRecordRep, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetRecordRep, recordtype_),
  };
  TBossGetRecordRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossGetRecordRep_descriptor_,
      TBossGetRecordRep::default_instance_,
      TBossGetRecordRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetRecordRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetRecordRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossGetRecordRep));
  TBossGetRecordRsp_descriptor_ = file->message_type(14);
  static const int TBossGetRecordRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetRecordRsp, recordrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetRecordRsp, valid_),
  };
  TBossGetRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossGetRecordRsp_descriptor_,
      TBossGetRecordRsp::default_instance_,
      TBossGetRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossGetRecordRsp));
  TBossBuyChallengeNumReq_descriptor_ = file->message_type(15);
  static const int TBossBuyChallengeNumReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossBuyChallengeNumReq, num_),
  };
  TBossBuyChallengeNumReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossBuyChallengeNumReq_descriptor_,
      TBossBuyChallengeNumReq::default_instance_,
      TBossBuyChallengeNumReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossBuyChallengeNumReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossBuyChallengeNumReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossBuyChallengeNumReq));
  TBossBuyChallengeNumRsp_descriptor_ = file->message_type(16);
  static const int TBossBuyChallengeNumRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossBuyChallengeNumRsp, leftchallengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossBuyChallengeNumRsp, buychallengenum_),
  };
  TBossBuyChallengeNumRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossBuyChallengeNumRsp_descriptor_,
      TBossBuyChallengeNumRsp::default_instance_,
      TBossBuyChallengeNumRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossBuyChallengeNumRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossBuyChallengeNumRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossBuyChallengeNumRsp));
  TBossGetServerTeamInfoRsp_descriptor_ = file->message_type(17);
  static const int TBossGetServerTeamInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetServerTeamInfoRsp, serverteamid_),
  };
  TBossGetServerTeamInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossGetServerTeamInfoRsp_descriptor_,
      TBossGetServerTeamInfoRsp::default_instance_,
      TBossGetServerTeamInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetServerTeamInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetServerTeamInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossGetServerTeamInfoRsp));
  TBossGetMyFmtRsp_descriptor_ = file->message_type(18);
  static const int TBossGetMyFmtRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetMyFmtRsp, arrpos_),
  };
  TBossGetMyFmtRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossGetMyFmtRsp_descriptor_,
      TBossGetMyFmtRsp::default_instance_,
      TBossGetMyFmtRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetMyFmtRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossGetMyFmtRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossGetMyFmtRsp));
  TBossSetMyFmtReq_descriptor_ = file->message_type(19);
  static const int TBossSetMyFmtReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossSetMyFmtReq, arrpos_),
  };
  TBossSetMyFmtReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossSetMyFmtReq_descriptor_,
      TBossSetMyFmtReq::default_instance_,
      TBossSetMyFmtReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossSetMyFmtReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossSetMyFmtReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossSetMyFmtReq));
  TBossFirstAtkNotify_descriptor_ = file->message_type(20);
  static const int TBossFirstAtkNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossFirstAtkNotify, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossFirstAtkNotify, begintime_),
  };
  TBossFirstAtkNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossFirstAtkNotify_descriptor_,
      TBossFirstAtkNotify::default_instance_,
      TBossFirstAtkNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossFirstAtkNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossFirstAtkNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossFirstAtkNotify));
  TBossFinalRankNotify_descriptor_ = file->message_type(21);
  static const int TBossFinalRankNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossFinalRankNotify, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossFinalRankNotify, selfrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossFinalRankNotify, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossFinalRankNotify, userrankarr_),
  };
  TBossFinalRankNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBossFinalRankNotify_descriptor_,
      TBossFinalRankNotify::default_instance_,
      TBossFinalRankNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossFinalRankNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBossFinalRankNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBossFinalRankNotify));
  EBossStatus_descriptor_ = file->enum_type(0);
  EBossRecordType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fCrossBoss_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossInfo_descriptor_, &TBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossRecordInfo_descriptor_, &TBossRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossRankInfo_descriptor_, &TBossRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossPosInfo_descriptor_, &TBossPosInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossGetBaseInfoRsp_descriptor_, &TBossGetBaseInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossGetMapInfoReq_descriptor_, &TBossGetMapInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossGetMapInfoRsp_descriptor_, &TBossGetMapInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossDoBattleReq_descriptor_, &TBossDoBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossDoBattleRsp_descriptor_, &TBossDoBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossBeginShowReq_descriptor_, &TBossBeginShowReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossGetRankArrRep_descriptor_, &TBossGetRankArrRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossGetRankArrRsp_descriptor_, &TBossGetRankArrRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossLeaveBattleReq_descriptor_, &TBossLeaveBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossGetRecordRep_descriptor_, &TBossGetRecordRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossGetRecordRsp_descriptor_, &TBossGetRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossBuyChallengeNumReq_descriptor_, &TBossBuyChallengeNumReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossBuyChallengeNumRsp_descriptor_, &TBossBuyChallengeNumRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossGetServerTeamInfoRsp_descriptor_, &TBossGetServerTeamInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossGetMyFmtRsp_descriptor_, &TBossGetMyFmtRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossSetMyFmtReq_descriptor_, &TBossSetMyFmtReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossFirstAtkNotify_descriptor_, &TBossFirstAtkNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBossFinalRankNotify_descriptor_, &TBossFinalRankNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fCrossBoss_2eproto() {
  delete TBossInfo::default_instance_;
  delete TBossInfo_reflection_;
  delete TBossRecordInfo::default_instance_;
  delete TBossRecordInfo_reflection_;
  delete TBossRankInfo::default_instance_;
  delete TBossRankInfo_reflection_;
  delete TBossPosInfo::default_instance_;
  delete TBossPosInfo_reflection_;
  delete TBossGetBaseInfoRsp::default_instance_;
  delete TBossGetBaseInfoRsp_reflection_;
  delete TBossGetMapInfoReq::default_instance_;
  delete TBossGetMapInfoReq_reflection_;
  delete TBossGetMapInfoRsp::default_instance_;
  delete TBossGetMapInfoRsp_reflection_;
  delete TBossDoBattleReq::default_instance_;
  delete TBossDoBattleReq_reflection_;
  delete TBossDoBattleRsp::default_instance_;
  delete TBossDoBattleRsp_reflection_;
  delete TBossBeginShowReq::default_instance_;
  delete TBossBeginShowReq_reflection_;
  delete TBossGetRankArrRep::default_instance_;
  delete TBossGetRankArrRep_reflection_;
  delete TBossGetRankArrRsp::default_instance_;
  delete TBossGetRankArrRsp_reflection_;
  delete TBossLeaveBattleReq::default_instance_;
  delete TBossLeaveBattleReq_reflection_;
  delete TBossGetRecordRep::default_instance_;
  delete TBossGetRecordRep_reflection_;
  delete TBossGetRecordRsp::default_instance_;
  delete TBossGetRecordRsp_reflection_;
  delete TBossBuyChallengeNumReq::default_instance_;
  delete TBossBuyChallengeNumReq_reflection_;
  delete TBossBuyChallengeNumRsp::default_instance_;
  delete TBossBuyChallengeNumRsp_reflection_;
  delete TBossGetServerTeamInfoRsp::default_instance_;
  delete TBossGetServerTeamInfoRsp_reflection_;
  delete TBossGetMyFmtRsp::default_instance_;
  delete TBossGetMyFmtRsp_reflection_;
  delete TBossSetMyFmtReq::default_instance_;
  delete TBossSetMyFmtReq_reflection_;
  delete TBossFirstAtkNotify::default_instance_;
  delete TBossFirstAtkNotify_reflection_;
  delete TBossFinalRankNotify::default_instance_;
  delete TBossFinalRankNotify_reflection_;
}

void protobuf_AddDesc_net_2fCrossBoss_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023net/CrossBoss.proto\022\002pb\032\016net/User.prot"
    "o\032\020net/Battle.proto\032\026net/CommonReward.pr"
    "oto\"a\n\tTBossInfo\022\016\n\006BossId\030\001 \001(\r\022\037\n\006Stat"
    "us\030\002 \001(\0162\017.pb.EBossStatus\022\020\n\010KillTime\030\003 "
    "\001(\004\022\021\n\tBeginTime\030\004 \001(\004\"v\n\017TBossRecordInf"
    "o\022\020\n\010RecordId\030\001 \001(\004\022\022\n\nRecordTime\030\002 \001(\004\022"
    "\023\n\013TotalDamage\030\003 \001(\004\022(\n\013AtkUserInfo\030\004 \001("
    "\0132\023.pb.TUserSimpleInfo\"[\n\rTBossRankInfo\022"
    "\014\n\004Rank\030\001 \001(\r\022\023\n\013TotalDamage\030\002 \001(\004\022\'\n\nSi"
    "mpleInfo\030\003 \001(\0132\023.pb.TUserSimpleInfo\"(\n\014T"
    "BossPosInfo\022\013\n\003Pos\030\001 \001(\r\022\013\n\003Hid\030\002 \001(\r\"i\n"
    "\023TBossGetBaseInfoRsp\022\017\n\007SceneId\030\001 \001(\t\022\030\n"
    "\020LeftChallengeNum\030\002 \001(\r\022\027\n\017BuyChallengeN"
    "um\030\003 \001(\r\022\016\n\006BossId\030\004 \001(\r\"#\n\022TBossGetMapI"
    "nfoReq\022\r\n\005MapId\030\001 \001(\r\"5\n\022TBossGetMapInfo"
    "Rsp\022\037\n\010BossInfo\030\001 \003(\0132\r.pb.TBossInfo\"S\n\020"
    "TBossDoBattleReq\022\016\n\006BossId\030\001 \001(\r\022/\n\020Batt"
    "leCheckParam\030\002 \001(\0132\025.pb.TBattleCheckPara"
    "m\"P\n\020TBossDoBattleRsp\022\'\n\014BattleResult\030\001 "
    "\001(\0132\021.pb.TBattleResult\022\023\n\013BattleValid\030\002 "
    "\001(\010\"#\n\021TBossBeginShowReq\022\016\n\006BossId\030\001 \001(\r"
    "\"$\n\022TBossGetRankArrRep\022\016\n\006BossId\030\001 \001(\r\"a"
    "\n\022TBossGetRankArrRsp\022&\n\013UserRankArr\030\001 \003("
    "\0132\021.pb.TBossRankInfo\022#\n\010SelfRank\030\002 \001(\0132\021"
    ".pb.TBossRankInfo\"%\n\023TBossLeaveBattleReq"
    "\022\016\n\006BossId\030\001 \001(\r\"L\n\021TBossGetRecordRep\022\016\n"
    "\006BossId\030\001 \001(\r\022\'\n\nRecordType\030\002 \001(\0162\023.pb.E"
    "BossRecordType\"K\n\021TBossGetRecordRsp\022\'\n\nR"
    "ecordRank\030\001 \003(\0132\023.pb.TBossRecordInfo\022\r\n\005"
    "Valid\030\002 \001(\010\"&\n\027TBossBuyChallengeNumReq\022\013"
    "\n\003Num\030\001 \001(\r\"L\n\027TBossBuyChallengeNumRsp\022\030"
    "\n\020LeftChallengeNum\030\001 \001(\r\022\027\n\017BuyChallenge"
    "Num\030\002 \001(\r\"1\n\031TBossGetServerTeamInfoRsp\022\024"
    "\n\014ServerTeamId\030\001 \001(\r\"4\n\020TBossGetMyFmtRsp"
    "\022 \n\006ArrPos\030\001 \003(\0132\020.pb.TBossPosInfo\"4\n\020TB"
    "ossSetMyFmtReq\022 \n\006ArrPos\030\001 \003(\0132\020.pb.TBos"
    "sPosInfo\"8\n\023TBossFirstAtkNotify\022\016\n\006BossI"
    "d\030\001 \001(\r\022\021\n\tBeginTime\030\002 \001(\004\"\231\001\n\024TBossFina"
    "lRankNotify\022\016\n\006BossId\030\001 \001(\r\022#\n\010SelfRank\030"
    "\002 \001(\0132\021.pb.TBossRankInfo\022$\n\tRewardArr\030\003 "
    "\003(\0132\021.pb.TCommonReward\022&\n\013UserRankArr\030\004 "
    "\003(\0132\021.pb.TBossRankInfo*J\n\013EBossStatus\022\021\n"
    "\rNOT_TRIGGERED\020\001\022\023\n\017IN_RESURRECTION\020\002\022\023\n"
    "\017BOSS_ACCEPTABLE\020\003*&\n\017EBossRecordType\022\007\n"
    "\003Top\020\001\022\n\n\006Recent\020\002", 1778);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/CrossBoss.proto", &protobuf_RegisterTypes);
  TBossInfo::default_instance_ = new TBossInfo();
  TBossRecordInfo::default_instance_ = new TBossRecordInfo();
  TBossRankInfo::default_instance_ = new TBossRankInfo();
  TBossPosInfo::default_instance_ = new TBossPosInfo();
  TBossGetBaseInfoRsp::default_instance_ = new TBossGetBaseInfoRsp();
  TBossGetMapInfoReq::default_instance_ = new TBossGetMapInfoReq();
  TBossGetMapInfoRsp::default_instance_ = new TBossGetMapInfoRsp();
  TBossDoBattleReq::default_instance_ = new TBossDoBattleReq();
  TBossDoBattleRsp::default_instance_ = new TBossDoBattleRsp();
  TBossBeginShowReq::default_instance_ = new TBossBeginShowReq();
  TBossGetRankArrRep::default_instance_ = new TBossGetRankArrRep();
  TBossGetRankArrRsp::default_instance_ = new TBossGetRankArrRsp();
  TBossLeaveBattleReq::default_instance_ = new TBossLeaveBattleReq();
  TBossGetRecordRep::default_instance_ = new TBossGetRecordRep();
  TBossGetRecordRsp::default_instance_ = new TBossGetRecordRsp();
  TBossBuyChallengeNumReq::default_instance_ = new TBossBuyChallengeNumReq();
  TBossBuyChallengeNumRsp::default_instance_ = new TBossBuyChallengeNumRsp();
  TBossGetServerTeamInfoRsp::default_instance_ = new TBossGetServerTeamInfoRsp();
  TBossGetMyFmtRsp::default_instance_ = new TBossGetMyFmtRsp();
  TBossSetMyFmtReq::default_instance_ = new TBossSetMyFmtReq();
  TBossFirstAtkNotify::default_instance_ = new TBossFirstAtkNotify();
  TBossFinalRankNotify::default_instance_ = new TBossFinalRankNotify();
  TBossInfo::default_instance_->InitAsDefaultInstance();
  TBossRecordInfo::default_instance_->InitAsDefaultInstance();
  TBossRankInfo::default_instance_->InitAsDefaultInstance();
  TBossPosInfo::default_instance_->InitAsDefaultInstance();
  TBossGetBaseInfoRsp::default_instance_->InitAsDefaultInstance();
  TBossGetMapInfoReq::default_instance_->InitAsDefaultInstance();
  TBossGetMapInfoRsp::default_instance_->InitAsDefaultInstance();
  TBossDoBattleReq::default_instance_->InitAsDefaultInstance();
  TBossDoBattleRsp::default_instance_->InitAsDefaultInstance();
  TBossBeginShowReq::default_instance_->InitAsDefaultInstance();
  TBossGetRankArrRep::default_instance_->InitAsDefaultInstance();
  TBossGetRankArrRsp::default_instance_->InitAsDefaultInstance();
  TBossLeaveBattleReq::default_instance_->InitAsDefaultInstance();
  TBossGetRecordRep::default_instance_->InitAsDefaultInstance();
  TBossGetRecordRsp::default_instance_->InitAsDefaultInstance();
  TBossBuyChallengeNumReq::default_instance_->InitAsDefaultInstance();
  TBossBuyChallengeNumRsp::default_instance_->InitAsDefaultInstance();
  TBossGetServerTeamInfoRsp::default_instance_->InitAsDefaultInstance();
  TBossGetMyFmtRsp::default_instance_->InitAsDefaultInstance();
  TBossSetMyFmtReq::default_instance_->InitAsDefaultInstance();
  TBossFirstAtkNotify::default_instance_->InitAsDefaultInstance();
  TBossFinalRankNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fCrossBoss_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fCrossBoss_2eproto {
  StaticDescriptorInitializer_net_2fCrossBoss_2eproto() {
    protobuf_AddDesc_net_2fCrossBoss_2eproto();
  }
} static_descriptor_initializer_net_2fCrossBoss_2eproto_;
const ::google::protobuf::EnumDescriptor* EBossStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBossStatus_descriptor_;
}
bool EBossStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBossRecordType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBossRecordType_descriptor_;
}
bool EBossRecordType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TBossInfo::kBossIdFieldNumber;
const int TBossInfo::kStatusFieldNumber;
const int TBossInfo::kKillTimeFieldNumber;
const int TBossInfo::kBeginTimeFieldNumber;
#endif  // !_MSC_VER

TBossInfo::TBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossInfo)
}

void TBossInfo::InitAsDefaultInstance() {
}

TBossInfo::TBossInfo(const TBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossInfo)
}

void TBossInfo::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  status_ = 1;
  killtime_ = GOOGLE_ULONGLONG(0);
  begintime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossInfo::~TBossInfo() {
  // @@protoc_insertion_point(destructor:pb.TBossInfo)
  SharedDtor();
}

void TBossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossInfo_descriptor_;
}

const TBossInfo& TBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossInfo* TBossInfo::default_instance_ = NULL;

TBossInfo* TBossInfo::New() const {
  return new TBossInfo;
}

void TBossInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBossInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(killtime_, begintime_);
    bossid_ = 0u;
    status_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // optional .pb.EBossStatus Status = 2;
      case 2: {
        if (tag == 16) {
         parse_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EBossStatus_IsValid(value)) {
            set_status(static_cast< ::pb::EBossStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_KillTime;
        break;
      }

      // optional uint64 KillTime = 3;
      case 3: {
        if (tag == 24) {
         parse_KillTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &killtime_)));
          set_has_killtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BeginTime;
        break;
      }

      // optional uint64 BeginTime = 4;
      case 4: {
        if (tag == 32) {
         parse_BeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossInfo)
  return false;
#undef DO_
}

void TBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossInfo)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional .pb.EBossStatus Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint64 KillTime = 3;
  if (has_killtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->killtime(), output);
  }

  // optional uint64 BeginTime = 4;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->begintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossInfo)
}

::google::protobuf::uint8* TBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossInfo)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional .pb.EBossStatus Status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional uint64 KillTime = 3;
  if (has_killtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->killtime(), target);
  }

  // optional uint64 BeginTime = 4;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->begintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossInfo)
  return target;
}

int TBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional .pb.EBossStatus Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint64 KillTime = 3;
    if (has_killtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->killtime());
    }

    // optional uint64 BeginTime = 4;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossInfo::MergeFrom(const TBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_killtime()) {
      set_killtime(from.killtime());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossInfo::CopyFrom(const TBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossInfo::IsInitialized() const {

  return true;
}

void TBossInfo::Swap(TBossInfo* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(status_, other->status_);
    std::swap(killtime_, other->killtime_);
    std::swap(begintime_, other->begintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossInfo_descriptor_;
  metadata.reflection = TBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossRecordInfo::kRecordIdFieldNumber;
const int TBossRecordInfo::kRecordTimeFieldNumber;
const int TBossRecordInfo::kTotalDamageFieldNumber;
const int TBossRecordInfo::kAtkUserInfoFieldNumber;
#endif  // !_MSC_VER

TBossRecordInfo::TBossRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossRecordInfo)
}

void TBossRecordInfo::InitAsDefaultInstance() {
  atkuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TBossRecordInfo::TBossRecordInfo(const TBossRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossRecordInfo)
}

void TBossRecordInfo::SharedCtor() {
  _cached_size_ = 0;
  recordid_ = GOOGLE_ULONGLONG(0);
  recordtime_ = GOOGLE_ULONGLONG(0);
  totaldamage_ = GOOGLE_ULONGLONG(0);
  atkuserinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossRecordInfo::~TBossRecordInfo() {
  // @@protoc_insertion_point(destructor:pb.TBossRecordInfo)
  SharedDtor();
}

void TBossRecordInfo::SharedDtor() {
  if (this != default_instance_) {
    delete atkuserinfo_;
  }
}

void TBossRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossRecordInfo_descriptor_;
}

const TBossRecordInfo& TBossRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossRecordInfo* TBossRecordInfo::default_instance_ = NULL;

TBossRecordInfo* TBossRecordInfo::New() const {
  return new TBossRecordInfo;
}

void TBossRecordInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBossRecordInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(recordid_, totaldamage_);
    if (has_atkuserinfo()) {
      if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossRecordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RecordId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RecordTime;
        break;
      }

      // optional uint64 RecordTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RecordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TotalDamage;
        break;
      }

      // optional uint64 TotalDamage = 3;
      case 3: {
        if (tag == 24) {
         parse_TotalDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totaldamage_)));
          set_has_totaldamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AtkUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo AtkUserInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_AtkUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atkuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossRecordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossRecordInfo)
  return false;
#undef DO_
}

void TBossRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossRecordInfo)
  // optional uint64 RecordId = 1;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->recordid(), output);
  }

  // optional uint64 RecordTime = 2;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->recordtime(), output);
  }

  // optional uint64 TotalDamage = 3;
  if (has_totaldamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->totaldamage(), output);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 4;
  if (has_atkuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->atkuserinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossRecordInfo)
}

::google::protobuf::uint8* TBossRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossRecordInfo)
  // optional uint64 RecordId = 1;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->recordid(), target);
  }

  // optional uint64 RecordTime = 2;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->recordtime(), target);
  }

  // optional uint64 TotalDamage = 3;
  if (has_totaldamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->totaldamage(), target);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 4;
  if (has_atkuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->atkuserinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossRecordInfo)
  return target;
}

int TBossRecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RecordId = 1;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordid());
    }

    // optional uint64 RecordTime = 2;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordtime());
    }

    // optional uint64 TotalDamage = 3;
    if (has_totaldamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totaldamage());
    }

    // optional .pb.TUserSimpleInfo AtkUserInfo = 4;
    if (has_atkuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkuserinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossRecordInfo::MergeFrom(const TBossRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_totaldamage()) {
      set_totaldamage(from.totaldamage());
    }
    if (from.has_atkuserinfo()) {
      mutable_atkuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.atkuserinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossRecordInfo::CopyFrom(const TBossRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossRecordInfo::IsInitialized() const {

  return true;
}

void TBossRecordInfo::Swap(TBossRecordInfo* other) {
  if (other != this) {
    std::swap(recordid_, other->recordid_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(totaldamage_, other->totaldamage_);
    std::swap(atkuserinfo_, other->atkuserinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossRecordInfo_descriptor_;
  metadata.reflection = TBossRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossRankInfo::kRankFieldNumber;
const int TBossRankInfo::kTotalDamageFieldNumber;
const int TBossRankInfo::kSimpleInfoFieldNumber;
#endif  // !_MSC_VER

TBossRankInfo::TBossRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossRankInfo)
}

void TBossRankInfo::InitAsDefaultInstance() {
  simpleinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TBossRankInfo::TBossRankInfo(const TBossRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossRankInfo)
}

void TBossRankInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  totaldamage_ = GOOGLE_ULONGLONG(0);
  simpleinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossRankInfo::~TBossRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TBossRankInfo)
  SharedDtor();
}

void TBossRankInfo::SharedDtor() {
  if (this != default_instance_) {
    delete simpleinfo_;
  }
}

void TBossRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossRankInfo_descriptor_;
}

const TBossRankInfo& TBossRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossRankInfo* TBossRankInfo::default_instance_ = NULL;

TBossRankInfo* TBossRankInfo::New() const {
  return new TBossRankInfo;
}

void TBossRankInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    rank_ = 0u;
    totaldamage_ = GOOGLE_ULONGLONG(0);
    if (has_simpleinfo()) {
      if (simpleinfo_ != NULL) simpleinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TotalDamage;
        break;
      }

      // optional uint64 TotalDamage = 2;
      case 2: {
        if (tag == 16) {
         parse_TotalDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totaldamage_)));
          set_has_totaldamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SimpleInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo SimpleInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_SimpleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossRankInfo)
  return false;
#undef DO_
}

void TBossRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossRankInfo)
  // optional uint32 Rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // optional uint64 TotalDamage = 2;
  if (has_totaldamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->totaldamage(), output);
  }

  // optional .pb.TUserSimpleInfo SimpleInfo = 3;
  if (has_simpleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->simpleinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossRankInfo)
}

::google::protobuf::uint8* TBossRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossRankInfo)
  // optional uint32 Rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // optional uint64 TotalDamage = 2;
  if (has_totaldamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->totaldamage(), target);
  }

  // optional .pb.TUserSimpleInfo SimpleInfo = 3;
  if (has_simpleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->simpleinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossRankInfo)
  return target;
}

int TBossRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint64 TotalDamage = 2;
    if (has_totaldamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totaldamage());
    }

    // optional .pb.TUserSimpleInfo SimpleInfo = 3;
    if (has_simpleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simpleinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossRankInfo::MergeFrom(const TBossRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_totaldamage()) {
      set_totaldamage(from.totaldamage());
    }
    if (from.has_simpleinfo()) {
      mutable_simpleinfo()->::pb::TUserSimpleInfo::MergeFrom(from.simpleinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossRankInfo::CopyFrom(const TBossRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossRankInfo::IsInitialized() const {

  return true;
}

void TBossRankInfo::Swap(TBossRankInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(totaldamage_, other->totaldamage_);
    std::swap(simpleinfo_, other->simpleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossRankInfo_descriptor_;
  metadata.reflection = TBossRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossPosInfo::kPosFieldNumber;
const int TBossPosInfo::kHidFieldNumber;
#endif  // !_MSC_VER

TBossPosInfo::TBossPosInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossPosInfo)
}

void TBossPosInfo::InitAsDefaultInstance() {
}

TBossPosInfo::TBossPosInfo(const TBossPosInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossPosInfo)
}

void TBossPosInfo::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  hid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossPosInfo::~TBossPosInfo() {
  // @@protoc_insertion_point(destructor:pb.TBossPosInfo)
  SharedDtor();
}

void TBossPosInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBossPosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossPosInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossPosInfo_descriptor_;
}

const TBossPosInfo& TBossPosInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossPosInfo* TBossPosInfo::default_instance_ = NULL;

TBossPosInfo* TBossPosInfo::New() const {
  return new TBossPosInfo;
}

void TBossPosInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBossPosInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pos_, hid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossPosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossPosInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Hid;
        break;
      }

      // optional uint32 Hid = 2;
      case 2: {
        if (tag == 16) {
         parse_Hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossPosInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossPosInfo)
  return false;
#undef DO_
}

void TBossPosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossPosInfo)
  // optional uint32 Pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossPosInfo)
}

::google::protobuf::uint8* TBossPosInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossPosInfo)
  // optional uint32 Pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossPosInfo)
  return target;
}

int TBossPosInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 Hid = 2;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossPosInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossPosInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossPosInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossPosInfo::MergeFrom(const TBossPosInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossPosInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossPosInfo::CopyFrom(const TBossPosInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossPosInfo::IsInitialized() const {

  return true;
}

void TBossPosInfo::Swap(TBossPosInfo* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(hid_, other->hid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossPosInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossPosInfo_descriptor_;
  metadata.reflection = TBossPosInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossGetBaseInfoRsp::kSceneIdFieldNumber;
const int TBossGetBaseInfoRsp::kLeftChallengeNumFieldNumber;
const int TBossGetBaseInfoRsp::kBuyChallengeNumFieldNumber;
const int TBossGetBaseInfoRsp::kBossIdFieldNumber;
#endif  // !_MSC_VER

TBossGetBaseInfoRsp::TBossGetBaseInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossGetBaseInfoRsp)
}

void TBossGetBaseInfoRsp::InitAsDefaultInstance() {
}

TBossGetBaseInfoRsp::TBossGetBaseInfoRsp(const TBossGetBaseInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossGetBaseInfoRsp)
}

void TBossGetBaseInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leftchallengenum_ = 0u;
  buychallengenum_ = 0u;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossGetBaseInfoRsp::~TBossGetBaseInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TBossGetBaseInfoRsp)
  SharedDtor();
}

void TBossGetBaseInfoRsp::SharedDtor() {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneid_;
  }
  if (this != default_instance_) {
  }
}

void TBossGetBaseInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossGetBaseInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossGetBaseInfoRsp_descriptor_;
}

const TBossGetBaseInfoRsp& TBossGetBaseInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossGetBaseInfoRsp* TBossGetBaseInfoRsp::default_instance_ = NULL;

TBossGetBaseInfoRsp* TBossGetBaseInfoRsp::New() const {
  return new TBossGetBaseInfoRsp;
}

void TBossGetBaseInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBossGetBaseInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(leftchallengenum_, bossid_);
    if (has_sceneid()) {
      if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sceneid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossGetBaseInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossGetBaseInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string SceneId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sceneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sceneid().data(), this->sceneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sceneid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LeftChallengeNum;
        break;
      }

      // optional uint32 LeftChallengeNum = 2;
      case 2: {
        if (tag == 16) {
         parse_LeftChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftchallengenum_)));
          set_has_leftchallengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BuyChallengeNum;
        break;
      }

      // optional uint32 BuyChallengeNum = 3;
      case 3: {
        if (tag == 24) {
         parse_BuyChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buychallengenum_)));
          set_has_buychallengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BossId;
        break;
      }

      // optional uint32 BossId = 4;
      case 4: {
        if (tag == 32) {
         parse_BossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossGetBaseInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossGetBaseInfoRsp)
  return false;
#undef DO_
}

void TBossGetBaseInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossGetBaseInfoRsp)
  // optional string SceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sceneid(), output);
  }

  // optional uint32 LeftChallengeNum = 2;
  if (has_leftchallengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leftchallengenum(), output);
  }

  // optional uint32 BuyChallengeNum = 3;
  if (has_buychallengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buychallengenum(), output);
  }

  // optional uint32 BossId = 4;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossGetBaseInfoRsp)
}

::google::protobuf::uint8* TBossGetBaseInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossGetBaseInfoRsp)
  // optional string SceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sceneid(), target);
  }

  // optional uint32 LeftChallengeNum = 2;
  if (has_leftchallengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leftchallengenum(), target);
  }

  // optional uint32 BuyChallengeNum = 3;
  if (has_buychallengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buychallengenum(), target);
  }

  // optional uint32 BossId = 4;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossGetBaseInfoRsp)
  return target;
}

int TBossGetBaseInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sceneid());
    }

    // optional uint32 LeftChallengeNum = 2;
    if (has_leftchallengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftchallengenum());
    }

    // optional uint32 BuyChallengeNum = 3;
    if (has_buychallengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buychallengenum());
    }

    // optional uint32 BossId = 4;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossGetBaseInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossGetBaseInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossGetBaseInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossGetBaseInfoRsp::MergeFrom(const TBossGetBaseInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_leftchallengenum()) {
      set_leftchallengenum(from.leftchallengenum());
    }
    if (from.has_buychallengenum()) {
      set_buychallengenum(from.buychallengenum());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossGetBaseInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossGetBaseInfoRsp::CopyFrom(const TBossGetBaseInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossGetBaseInfoRsp::IsInitialized() const {

  return true;
}

void TBossGetBaseInfoRsp::Swap(TBossGetBaseInfoRsp* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(leftchallengenum_, other->leftchallengenum_);
    std::swap(buychallengenum_, other->buychallengenum_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossGetBaseInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossGetBaseInfoRsp_descriptor_;
  metadata.reflection = TBossGetBaseInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossGetMapInfoReq::kMapIdFieldNumber;
#endif  // !_MSC_VER

TBossGetMapInfoReq::TBossGetMapInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossGetMapInfoReq)
}

void TBossGetMapInfoReq::InitAsDefaultInstance() {
}

TBossGetMapInfoReq::TBossGetMapInfoReq(const TBossGetMapInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossGetMapInfoReq)
}

void TBossGetMapInfoReq::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossGetMapInfoReq::~TBossGetMapInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TBossGetMapInfoReq)
  SharedDtor();
}

void TBossGetMapInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBossGetMapInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossGetMapInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossGetMapInfoReq_descriptor_;
}

const TBossGetMapInfoReq& TBossGetMapInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossGetMapInfoReq* TBossGetMapInfoReq::default_instance_ = NULL;

TBossGetMapInfoReq* TBossGetMapInfoReq::New() const {
  return new TBossGetMapInfoReq;
}

void TBossGetMapInfoReq::Clear() {
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossGetMapInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossGetMapInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MapId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossGetMapInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossGetMapInfoReq)
  return false;
#undef DO_
}

void TBossGetMapInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossGetMapInfoReq)
  // optional uint32 MapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossGetMapInfoReq)
}

::google::protobuf::uint8* TBossGetMapInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossGetMapInfoReq)
  // optional uint32 MapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossGetMapInfoReq)
  return target;
}

int TBossGetMapInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossGetMapInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossGetMapInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossGetMapInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossGetMapInfoReq::MergeFrom(const TBossGetMapInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossGetMapInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossGetMapInfoReq::CopyFrom(const TBossGetMapInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossGetMapInfoReq::IsInitialized() const {

  return true;
}

void TBossGetMapInfoReq::Swap(TBossGetMapInfoReq* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossGetMapInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossGetMapInfoReq_descriptor_;
  metadata.reflection = TBossGetMapInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossGetMapInfoRsp::kBossInfoFieldNumber;
#endif  // !_MSC_VER

TBossGetMapInfoRsp::TBossGetMapInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossGetMapInfoRsp)
}

void TBossGetMapInfoRsp::InitAsDefaultInstance() {
}

TBossGetMapInfoRsp::TBossGetMapInfoRsp(const TBossGetMapInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossGetMapInfoRsp)
}

void TBossGetMapInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossGetMapInfoRsp::~TBossGetMapInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TBossGetMapInfoRsp)
  SharedDtor();
}

void TBossGetMapInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBossGetMapInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossGetMapInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossGetMapInfoRsp_descriptor_;
}

const TBossGetMapInfoRsp& TBossGetMapInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossGetMapInfoRsp* TBossGetMapInfoRsp::default_instance_ = NULL;

TBossGetMapInfoRsp* TBossGetMapInfoRsp::New() const {
  return new TBossGetMapInfoRsp;
}

void TBossGetMapInfoRsp::Clear() {
  bossinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossGetMapInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossGetMapInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBossInfo BossInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_BossInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_BossInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossGetMapInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossGetMapInfoRsp)
  return false;
#undef DO_
}

void TBossGetMapInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossGetMapInfoRsp)
  // repeated .pb.TBossInfo BossInfo = 1;
  for (int i = 0; i < this->bossinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bossinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossGetMapInfoRsp)
}

::google::protobuf::uint8* TBossGetMapInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossGetMapInfoRsp)
  // repeated .pb.TBossInfo BossInfo = 1;
  for (int i = 0; i < this->bossinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bossinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossGetMapInfoRsp)
  return target;
}

int TBossGetMapInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TBossInfo BossInfo = 1;
  total_size += 1 * this->bossinfo_size();
  for (int i = 0; i < this->bossinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossGetMapInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossGetMapInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossGetMapInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossGetMapInfoRsp::MergeFrom(const TBossGetMapInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  bossinfo_.MergeFrom(from.bossinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossGetMapInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossGetMapInfoRsp::CopyFrom(const TBossGetMapInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossGetMapInfoRsp::IsInitialized() const {

  return true;
}

void TBossGetMapInfoRsp::Swap(TBossGetMapInfoRsp* other) {
  if (other != this) {
    bossinfo_.Swap(&other->bossinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossGetMapInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossGetMapInfoRsp_descriptor_;
  metadata.reflection = TBossGetMapInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossDoBattleReq::kBossIdFieldNumber;
const int TBossDoBattleReq::kBattleCheckParamFieldNumber;
#endif  // !_MSC_VER

TBossDoBattleReq::TBossDoBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossDoBattleReq)
}

void TBossDoBattleReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TBossDoBattleReq::TBossDoBattleReq(const TBossDoBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossDoBattleReq)
}

void TBossDoBattleReq::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossDoBattleReq::~TBossDoBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TBossDoBattleReq)
  SharedDtor();
}

void TBossDoBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TBossDoBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossDoBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossDoBattleReq_descriptor_;
}

const TBossDoBattleReq& TBossDoBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossDoBattleReq* TBossDoBattleReq::default_instance_ = NULL;

TBossDoBattleReq* TBossDoBattleReq::New() const {
  return new TBossDoBattleReq;
}

void TBossDoBattleReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    bossid_ = 0u;
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossDoBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossDoBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossDoBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossDoBattleReq)
  return false;
#undef DO_
}

void TBossDoBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossDoBattleReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battlecheckparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossDoBattleReq)
}

::google::protobuf::uint8* TBossDoBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossDoBattleReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battlecheckparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossDoBattleReq)
  return target;
}

int TBossDoBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 2;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossDoBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossDoBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossDoBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossDoBattleReq::MergeFrom(const TBossDoBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossDoBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossDoBattleReq::CopyFrom(const TBossDoBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossDoBattleReq::IsInitialized() const {

  return true;
}

void TBossDoBattleReq::Swap(TBossDoBattleReq* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossDoBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossDoBattleReq_descriptor_;
  metadata.reflection = TBossDoBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossDoBattleRsp::kBattleResultFieldNumber;
const int TBossDoBattleRsp::kBattleValidFieldNumber;
#endif  // !_MSC_VER

TBossDoBattleRsp::TBossDoBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossDoBattleRsp)
}

void TBossDoBattleRsp::InitAsDefaultInstance() {
  battleresult_ = const_cast< ::pb::TBattleResult*>(&::pb::TBattleResult::default_instance());
}

TBossDoBattleRsp::TBossDoBattleRsp(const TBossDoBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossDoBattleRsp)
}

void TBossDoBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  battleresult_ = NULL;
  battlevalid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossDoBattleRsp::~TBossDoBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TBossDoBattleRsp)
  SharedDtor();
}

void TBossDoBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleresult_;
  }
}

void TBossDoBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossDoBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossDoBattleRsp_descriptor_;
}

const TBossDoBattleRsp& TBossDoBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossDoBattleRsp* TBossDoBattleRsp::default_instance_ = NULL;

TBossDoBattleRsp* TBossDoBattleRsp::New() const {
  return new TBossDoBattleRsp;
}

void TBossDoBattleRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_battleresult()) {
      if (battleresult_ != NULL) battleresult_->::pb::TBattleResult::Clear();
    }
    battlevalid_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossDoBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossDoBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBattleResult BattleResult = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BattleValid;
        break;
      }

      // optional bool BattleValid = 2;
      case 2: {
        if (tag == 16) {
         parse_BattleValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &battlevalid_)));
          set_has_battlevalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossDoBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossDoBattleRsp)
  return false;
#undef DO_
}

void TBossDoBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossDoBattleRsp)
  // optional .pb.TBattleResult BattleResult = 1;
  if (has_battleresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleresult(), output);
  }

  // optional bool BattleValid = 2;
  if (has_battlevalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->battlevalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossDoBattleRsp)
}

::google::protobuf::uint8* TBossDoBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossDoBattleRsp)
  // optional .pb.TBattleResult BattleResult = 1;
  if (has_battleresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleresult(), target);
  }

  // optional bool BattleValid = 2;
  if (has_battlevalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->battlevalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossDoBattleRsp)
  return target;
}

int TBossDoBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBattleResult BattleResult = 1;
    if (has_battleresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleresult());
    }

    // optional bool BattleValid = 2;
    if (has_battlevalid()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossDoBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossDoBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossDoBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossDoBattleRsp::MergeFrom(const TBossDoBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleresult()) {
      mutable_battleresult()->::pb::TBattleResult::MergeFrom(from.battleresult());
    }
    if (from.has_battlevalid()) {
      set_battlevalid(from.battlevalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossDoBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossDoBattleRsp::CopyFrom(const TBossDoBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossDoBattleRsp::IsInitialized() const {

  if (has_battleresult()) {
    if (!this->battleresult().IsInitialized()) return false;
  }
  return true;
}

void TBossDoBattleRsp::Swap(TBossDoBattleRsp* other) {
  if (other != this) {
    std::swap(battleresult_, other->battleresult_);
    std::swap(battlevalid_, other->battlevalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossDoBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossDoBattleRsp_descriptor_;
  metadata.reflection = TBossDoBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossBeginShowReq::kBossIdFieldNumber;
#endif  // !_MSC_VER

TBossBeginShowReq::TBossBeginShowReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossBeginShowReq)
}

void TBossBeginShowReq::InitAsDefaultInstance() {
}

TBossBeginShowReq::TBossBeginShowReq(const TBossBeginShowReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossBeginShowReq)
}

void TBossBeginShowReq::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossBeginShowReq::~TBossBeginShowReq() {
  // @@protoc_insertion_point(destructor:pb.TBossBeginShowReq)
  SharedDtor();
}

void TBossBeginShowReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBossBeginShowReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossBeginShowReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossBeginShowReq_descriptor_;
}

const TBossBeginShowReq& TBossBeginShowReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossBeginShowReq* TBossBeginShowReq::default_instance_ = NULL;

TBossBeginShowReq* TBossBeginShowReq::New() const {
  return new TBossBeginShowReq;
}

void TBossBeginShowReq::Clear() {
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossBeginShowReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossBeginShowReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossBeginShowReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossBeginShowReq)
  return false;
#undef DO_
}

void TBossBeginShowReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossBeginShowReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossBeginShowReq)
}

::google::protobuf::uint8* TBossBeginShowReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossBeginShowReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossBeginShowReq)
  return target;
}

int TBossBeginShowReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossBeginShowReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossBeginShowReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossBeginShowReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossBeginShowReq::MergeFrom(const TBossBeginShowReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossBeginShowReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossBeginShowReq::CopyFrom(const TBossBeginShowReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossBeginShowReq::IsInitialized() const {

  return true;
}

void TBossBeginShowReq::Swap(TBossBeginShowReq* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossBeginShowReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossBeginShowReq_descriptor_;
  metadata.reflection = TBossBeginShowReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossGetRankArrRep::kBossIdFieldNumber;
#endif  // !_MSC_VER

TBossGetRankArrRep::TBossGetRankArrRep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossGetRankArrRep)
}

void TBossGetRankArrRep::InitAsDefaultInstance() {
}

TBossGetRankArrRep::TBossGetRankArrRep(const TBossGetRankArrRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossGetRankArrRep)
}

void TBossGetRankArrRep::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossGetRankArrRep::~TBossGetRankArrRep() {
  // @@protoc_insertion_point(destructor:pb.TBossGetRankArrRep)
  SharedDtor();
}

void TBossGetRankArrRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBossGetRankArrRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossGetRankArrRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossGetRankArrRep_descriptor_;
}

const TBossGetRankArrRep& TBossGetRankArrRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossGetRankArrRep* TBossGetRankArrRep::default_instance_ = NULL;

TBossGetRankArrRep* TBossGetRankArrRep::New() const {
  return new TBossGetRankArrRep;
}

void TBossGetRankArrRep::Clear() {
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossGetRankArrRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossGetRankArrRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossGetRankArrRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossGetRankArrRep)
  return false;
#undef DO_
}

void TBossGetRankArrRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossGetRankArrRep)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossGetRankArrRep)
}

::google::protobuf::uint8* TBossGetRankArrRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossGetRankArrRep)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossGetRankArrRep)
  return target;
}

int TBossGetRankArrRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossGetRankArrRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossGetRankArrRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossGetRankArrRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossGetRankArrRep::MergeFrom(const TBossGetRankArrRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossGetRankArrRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossGetRankArrRep::CopyFrom(const TBossGetRankArrRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossGetRankArrRep::IsInitialized() const {

  return true;
}

void TBossGetRankArrRep::Swap(TBossGetRankArrRep* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossGetRankArrRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossGetRankArrRep_descriptor_;
  metadata.reflection = TBossGetRankArrRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossGetRankArrRsp::kUserRankArrFieldNumber;
const int TBossGetRankArrRsp::kSelfRankFieldNumber;
#endif  // !_MSC_VER

TBossGetRankArrRsp::TBossGetRankArrRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossGetRankArrRsp)
}

void TBossGetRankArrRsp::InitAsDefaultInstance() {
  selfrank_ = const_cast< ::pb::TBossRankInfo*>(&::pb::TBossRankInfo::default_instance());
}

TBossGetRankArrRsp::TBossGetRankArrRsp(const TBossGetRankArrRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossGetRankArrRsp)
}

void TBossGetRankArrRsp::SharedCtor() {
  _cached_size_ = 0;
  selfrank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossGetRankArrRsp::~TBossGetRankArrRsp() {
  // @@protoc_insertion_point(destructor:pb.TBossGetRankArrRsp)
  SharedDtor();
}

void TBossGetRankArrRsp::SharedDtor() {
  if (this != default_instance_) {
    delete selfrank_;
  }
}

void TBossGetRankArrRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossGetRankArrRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossGetRankArrRsp_descriptor_;
}

const TBossGetRankArrRsp& TBossGetRankArrRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossGetRankArrRsp* TBossGetRankArrRsp::default_instance_ = NULL;

TBossGetRankArrRsp* TBossGetRankArrRsp::New() const {
  return new TBossGetRankArrRsp;
}

void TBossGetRankArrRsp::Clear() {
  if (has_selfrank()) {
    if (selfrank_ != NULL) selfrank_->::pb::TBossRankInfo::Clear();
  }
  userrankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossGetRankArrRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossGetRankArrRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBossRankInfo UserRankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UserRankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userrankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UserRankArr;
        if (input->ExpectTag(18)) goto parse_SelfRank;
        break;
      }

      // optional .pb.TBossRankInfo SelfRank = 2;
      case 2: {
        if (tag == 18) {
         parse_SelfRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfrank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossGetRankArrRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossGetRankArrRsp)
  return false;
#undef DO_
}

void TBossGetRankArrRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossGetRankArrRsp)
  // repeated .pb.TBossRankInfo UserRankArr = 1;
  for (int i = 0; i < this->userrankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userrankarr(i), output);
  }

  // optional .pb.TBossRankInfo SelfRank = 2;
  if (has_selfrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selfrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossGetRankArrRsp)
}

::google::protobuf::uint8* TBossGetRankArrRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossGetRankArrRsp)
  // repeated .pb.TBossRankInfo UserRankArr = 1;
  for (int i = 0; i < this->userrankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userrankarr(i), target);
  }

  // optional .pb.TBossRankInfo SelfRank = 2;
  if (has_selfrank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selfrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossGetRankArrRsp)
  return target;
}

int TBossGetRankArrRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.TBossRankInfo SelfRank = 2;
    if (has_selfrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfrank());
    }

  }
  // repeated .pb.TBossRankInfo UserRankArr = 1;
  total_size += 1 * this->userrankarr_size();
  for (int i = 0; i < this->userrankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userrankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossGetRankArrRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossGetRankArrRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossGetRankArrRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossGetRankArrRsp::MergeFrom(const TBossGetRankArrRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  userrankarr_.MergeFrom(from.userrankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_selfrank()) {
      mutable_selfrank()->::pb::TBossRankInfo::MergeFrom(from.selfrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossGetRankArrRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossGetRankArrRsp::CopyFrom(const TBossGetRankArrRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossGetRankArrRsp::IsInitialized() const {

  return true;
}

void TBossGetRankArrRsp::Swap(TBossGetRankArrRsp* other) {
  if (other != this) {
    userrankarr_.Swap(&other->userrankarr_);
    std::swap(selfrank_, other->selfrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossGetRankArrRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossGetRankArrRsp_descriptor_;
  metadata.reflection = TBossGetRankArrRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossLeaveBattleReq::kBossIdFieldNumber;
#endif  // !_MSC_VER

TBossLeaveBattleReq::TBossLeaveBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossLeaveBattleReq)
}

void TBossLeaveBattleReq::InitAsDefaultInstance() {
}

TBossLeaveBattleReq::TBossLeaveBattleReq(const TBossLeaveBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossLeaveBattleReq)
}

void TBossLeaveBattleReq::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossLeaveBattleReq::~TBossLeaveBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TBossLeaveBattleReq)
  SharedDtor();
}

void TBossLeaveBattleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBossLeaveBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossLeaveBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossLeaveBattleReq_descriptor_;
}

const TBossLeaveBattleReq& TBossLeaveBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossLeaveBattleReq* TBossLeaveBattleReq::default_instance_ = NULL;

TBossLeaveBattleReq* TBossLeaveBattleReq::New() const {
  return new TBossLeaveBattleReq;
}

void TBossLeaveBattleReq::Clear() {
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossLeaveBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossLeaveBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossLeaveBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossLeaveBattleReq)
  return false;
#undef DO_
}

void TBossLeaveBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossLeaveBattleReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossLeaveBattleReq)
}

::google::protobuf::uint8* TBossLeaveBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossLeaveBattleReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossLeaveBattleReq)
  return target;
}

int TBossLeaveBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossLeaveBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossLeaveBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossLeaveBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossLeaveBattleReq::MergeFrom(const TBossLeaveBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossLeaveBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossLeaveBattleReq::CopyFrom(const TBossLeaveBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossLeaveBattleReq::IsInitialized() const {

  return true;
}

void TBossLeaveBattleReq::Swap(TBossLeaveBattleReq* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossLeaveBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossLeaveBattleReq_descriptor_;
  metadata.reflection = TBossLeaveBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossGetRecordRep::kBossIdFieldNumber;
const int TBossGetRecordRep::kRecordTypeFieldNumber;
#endif  // !_MSC_VER

TBossGetRecordRep::TBossGetRecordRep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossGetRecordRep)
}

void TBossGetRecordRep::InitAsDefaultInstance() {
}

TBossGetRecordRep::TBossGetRecordRep(const TBossGetRecordRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossGetRecordRep)
}

void TBossGetRecordRep::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  recordtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossGetRecordRep::~TBossGetRecordRep() {
  // @@protoc_insertion_point(destructor:pb.TBossGetRecordRep)
  SharedDtor();
}

void TBossGetRecordRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBossGetRecordRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossGetRecordRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossGetRecordRep_descriptor_;
}

const TBossGetRecordRep& TBossGetRecordRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossGetRecordRep* TBossGetRecordRep::default_instance_ = NULL;

TBossGetRecordRep* TBossGetRecordRep::New() const {
  return new TBossGetRecordRep;
}

void TBossGetRecordRep::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    bossid_ = 0u;
    recordtype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossGetRecordRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossGetRecordRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RecordType;
        break;
      }

      // optional .pb.EBossRecordType RecordType = 2;
      case 2: {
        if (tag == 16) {
         parse_RecordType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EBossRecordType_IsValid(value)) {
            set_recordtype(static_cast< ::pb::EBossRecordType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossGetRecordRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossGetRecordRep)
  return false;
#undef DO_
}

void TBossGetRecordRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossGetRecordRep)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional .pb.EBossRecordType RecordType = 2;
  if (has_recordtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->recordtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossGetRecordRep)
}

::google::protobuf::uint8* TBossGetRecordRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossGetRecordRep)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional .pb.EBossRecordType RecordType = 2;
  if (has_recordtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->recordtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossGetRecordRep)
  return target;
}

int TBossGetRecordRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional .pb.EBossRecordType RecordType = 2;
    if (has_recordtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->recordtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossGetRecordRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossGetRecordRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossGetRecordRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossGetRecordRep::MergeFrom(const TBossGetRecordRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_recordtype()) {
      set_recordtype(from.recordtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossGetRecordRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossGetRecordRep::CopyFrom(const TBossGetRecordRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossGetRecordRep::IsInitialized() const {

  return true;
}

void TBossGetRecordRep::Swap(TBossGetRecordRep* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(recordtype_, other->recordtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossGetRecordRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossGetRecordRep_descriptor_;
  metadata.reflection = TBossGetRecordRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossGetRecordRsp::kRecordRankFieldNumber;
const int TBossGetRecordRsp::kValidFieldNumber;
#endif  // !_MSC_VER

TBossGetRecordRsp::TBossGetRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossGetRecordRsp)
}

void TBossGetRecordRsp::InitAsDefaultInstance() {
}

TBossGetRecordRsp::TBossGetRecordRsp(const TBossGetRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossGetRecordRsp)
}

void TBossGetRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  valid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossGetRecordRsp::~TBossGetRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.TBossGetRecordRsp)
  SharedDtor();
}

void TBossGetRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBossGetRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossGetRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossGetRecordRsp_descriptor_;
}

const TBossGetRecordRsp& TBossGetRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossGetRecordRsp* TBossGetRecordRsp::default_instance_ = NULL;

TBossGetRecordRsp* TBossGetRecordRsp::New() const {
  return new TBossGetRecordRsp;
}

void TBossGetRecordRsp::Clear() {
  valid_ = false;
  recordrank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossGetRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossGetRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBossRecordInfo RecordRank = 1;
      case 1: {
        if (tag == 10) {
         parse_RecordRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordrank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RecordRank;
        if (input->ExpectTag(16)) goto parse_Valid;
        break;
      }

      // optional bool Valid = 2;
      case 2: {
        if (tag == 16) {
         parse_Valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
          set_has_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossGetRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossGetRecordRsp)
  return false;
#undef DO_
}

void TBossGetRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossGetRecordRsp)
  // repeated .pb.TBossRecordInfo RecordRank = 1;
  for (int i = 0; i < this->recordrank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordrank(i), output);
  }

  // optional bool Valid = 2;
  if (has_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->valid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossGetRecordRsp)
}

::google::protobuf::uint8* TBossGetRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossGetRecordRsp)
  // repeated .pb.TBossRecordInfo RecordRank = 1;
  for (int i = 0; i < this->recordrank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordrank(i), target);
  }

  // optional bool Valid = 2;
  if (has_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->valid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossGetRecordRsp)
  return target;
}

int TBossGetRecordRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool Valid = 2;
    if (has_valid()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb.TBossRecordInfo RecordRank = 1;
  total_size += 1 * this->recordrank_size();
  for (int i = 0; i < this->recordrank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordrank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossGetRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossGetRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossGetRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossGetRecordRsp::MergeFrom(const TBossGetRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordrank_.MergeFrom(from.recordrank_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_valid()) {
      set_valid(from.valid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossGetRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossGetRecordRsp::CopyFrom(const TBossGetRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossGetRecordRsp::IsInitialized() const {

  return true;
}

void TBossGetRecordRsp::Swap(TBossGetRecordRsp* other) {
  if (other != this) {
    recordrank_.Swap(&other->recordrank_);
    std::swap(valid_, other->valid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossGetRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossGetRecordRsp_descriptor_;
  metadata.reflection = TBossGetRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossBuyChallengeNumReq::kNumFieldNumber;
#endif  // !_MSC_VER

TBossBuyChallengeNumReq::TBossBuyChallengeNumReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossBuyChallengeNumReq)
}

void TBossBuyChallengeNumReq::InitAsDefaultInstance() {
}

TBossBuyChallengeNumReq::TBossBuyChallengeNumReq(const TBossBuyChallengeNumReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossBuyChallengeNumReq)
}

void TBossBuyChallengeNumReq::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossBuyChallengeNumReq::~TBossBuyChallengeNumReq() {
  // @@protoc_insertion_point(destructor:pb.TBossBuyChallengeNumReq)
  SharedDtor();
}

void TBossBuyChallengeNumReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBossBuyChallengeNumReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossBuyChallengeNumReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossBuyChallengeNumReq_descriptor_;
}

const TBossBuyChallengeNumReq& TBossBuyChallengeNumReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossBuyChallengeNumReq* TBossBuyChallengeNumReq::default_instance_ = NULL;

TBossBuyChallengeNumReq* TBossBuyChallengeNumReq::New() const {
  return new TBossBuyChallengeNumReq;
}

void TBossBuyChallengeNumReq::Clear() {
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossBuyChallengeNumReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossBuyChallengeNumReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossBuyChallengeNumReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossBuyChallengeNumReq)
  return false;
#undef DO_
}

void TBossBuyChallengeNumReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossBuyChallengeNumReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossBuyChallengeNumReq)
}

::google::protobuf::uint8* TBossBuyChallengeNumReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossBuyChallengeNumReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossBuyChallengeNumReq)
  return target;
}

int TBossBuyChallengeNumReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossBuyChallengeNumReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossBuyChallengeNumReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossBuyChallengeNumReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossBuyChallengeNumReq::MergeFrom(const TBossBuyChallengeNumReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossBuyChallengeNumReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossBuyChallengeNumReq::CopyFrom(const TBossBuyChallengeNumReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossBuyChallengeNumReq::IsInitialized() const {

  return true;
}

void TBossBuyChallengeNumReq::Swap(TBossBuyChallengeNumReq* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossBuyChallengeNumReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossBuyChallengeNumReq_descriptor_;
  metadata.reflection = TBossBuyChallengeNumReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossBuyChallengeNumRsp::kLeftChallengeNumFieldNumber;
const int TBossBuyChallengeNumRsp::kBuyChallengeNumFieldNumber;
#endif  // !_MSC_VER

TBossBuyChallengeNumRsp::TBossBuyChallengeNumRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossBuyChallengeNumRsp)
}

void TBossBuyChallengeNumRsp::InitAsDefaultInstance() {
}

TBossBuyChallengeNumRsp::TBossBuyChallengeNumRsp(const TBossBuyChallengeNumRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossBuyChallengeNumRsp)
}

void TBossBuyChallengeNumRsp::SharedCtor() {
  _cached_size_ = 0;
  leftchallengenum_ = 0u;
  buychallengenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossBuyChallengeNumRsp::~TBossBuyChallengeNumRsp() {
  // @@protoc_insertion_point(destructor:pb.TBossBuyChallengeNumRsp)
  SharedDtor();
}

void TBossBuyChallengeNumRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBossBuyChallengeNumRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossBuyChallengeNumRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossBuyChallengeNumRsp_descriptor_;
}

const TBossBuyChallengeNumRsp& TBossBuyChallengeNumRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossBuyChallengeNumRsp* TBossBuyChallengeNumRsp::default_instance_ = NULL;

TBossBuyChallengeNumRsp* TBossBuyChallengeNumRsp::New() const {
  return new TBossBuyChallengeNumRsp;
}

void TBossBuyChallengeNumRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBossBuyChallengeNumRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(leftchallengenum_, buychallengenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossBuyChallengeNumRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossBuyChallengeNumRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LeftChallengeNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftchallengenum_)));
          set_has_leftchallengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyChallengeNum;
        break;
      }

      // optional uint32 BuyChallengeNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buychallengenum_)));
          set_has_buychallengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossBuyChallengeNumRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossBuyChallengeNumRsp)
  return false;
#undef DO_
}

void TBossBuyChallengeNumRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossBuyChallengeNumRsp)
  // optional uint32 LeftChallengeNum = 1;
  if (has_leftchallengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->leftchallengenum(), output);
  }

  // optional uint32 BuyChallengeNum = 2;
  if (has_buychallengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buychallengenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossBuyChallengeNumRsp)
}

::google::protobuf::uint8* TBossBuyChallengeNumRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossBuyChallengeNumRsp)
  // optional uint32 LeftChallengeNum = 1;
  if (has_leftchallengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->leftchallengenum(), target);
  }

  // optional uint32 BuyChallengeNum = 2;
  if (has_buychallengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buychallengenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossBuyChallengeNumRsp)
  return target;
}

int TBossBuyChallengeNumRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LeftChallengeNum = 1;
    if (has_leftchallengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftchallengenum());
    }

    // optional uint32 BuyChallengeNum = 2;
    if (has_buychallengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buychallengenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossBuyChallengeNumRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossBuyChallengeNumRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossBuyChallengeNumRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossBuyChallengeNumRsp::MergeFrom(const TBossBuyChallengeNumRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leftchallengenum()) {
      set_leftchallengenum(from.leftchallengenum());
    }
    if (from.has_buychallengenum()) {
      set_buychallengenum(from.buychallengenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossBuyChallengeNumRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossBuyChallengeNumRsp::CopyFrom(const TBossBuyChallengeNumRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossBuyChallengeNumRsp::IsInitialized() const {

  return true;
}

void TBossBuyChallengeNumRsp::Swap(TBossBuyChallengeNumRsp* other) {
  if (other != this) {
    std::swap(leftchallengenum_, other->leftchallengenum_);
    std::swap(buychallengenum_, other->buychallengenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossBuyChallengeNumRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossBuyChallengeNumRsp_descriptor_;
  metadata.reflection = TBossBuyChallengeNumRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossGetServerTeamInfoRsp::kServerTeamIdFieldNumber;
#endif  // !_MSC_VER

TBossGetServerTeamInfoRsp::TBossGetServerTeamInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossGetServerTeamInfoRsp)
}

void TBossGetServerTeamInfoRsp::InitAsDefaultInstance() {
}

TBossGetServerTeamInfoRsp::TBossGetServerTeamInfoRsp(const TBossGetServerTeamInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossGetServerTeamInfoRsp)
}

void TBossGetServerTeamInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  serverteamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossGetServerTeamInfoRsp::~TBossGetServerTeamInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TBossGetServerTeamInfoRsp)
  SharedDtor();
}

void TBossGetServerTeamInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBossGetServerTeamInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossGetServerTeamInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossGetServerTeamInfoRsp_descriptor_;
}

const TBossGetServerTeamInfoRsp& TBossGetServerTeamInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossGetServerTeamInfoRsp* TBossGetServerTeamInfoRsp::default_instance_ = NULL;

TBossGetServerTeamInfoRsp* TBossGetServerTeamInfoRsp::New() const {
  return new TBossGetServerTeamInfoRsp;
}

void TBossGetServerTeamInfoRsp::Clear() {
  serverteamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossGetServerTeamInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossGetServerTeamInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ServerTeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverteamid_)));
          set_has_serverteamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossGetServerTeamInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossGetServerTeamInfoRsp)
  return false;
#undef DO_
}

void TBossGetServerTeamInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossGetServerTeamInfoRsp)
  // optional uint32 ServerTeamId = 1;
  if (has_serverteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serverteamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossGetServerTeamInfoRsp)
}

::google::protobuf::uint8* TBossGetServerTeamInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossGetServerTeamInfoRsp)
  // optional uint32 ServerTeamId = 1;
  if (has_serverteamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serverteamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossGetServerTeamInfoRsp)
  return target;
}

int TBossGetServerTeamInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ServerTeamId = 1;
    if (has_serverteamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverteamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossGetServerTeamInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossGetServerTeamInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossGetServerTeamInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossGetServerTeamInfoRsp::MergeFrom(const TBossGetServerTeamInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverteamid()) {
      set_serverteamid(from.serverteamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossGetServerTeamInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossGetServerTeamInfoRsp::CopyFrom(const TBossGetServerTeamInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossGetServerTeamInfoRsp::IsInitialized() const {

  return true;
}

void TBossGetServerTeamInfoRsp::Swap(TBossGetServerTeamInfoRsp* other) {
  if (other != this) {
    std::swap(serverteamid_, other->serverteamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossGetServerTeamInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossGetServerTeamInfoRsp_descriptor_;
  metadata.reflection = TBossGetServerTeamInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossGetMyFmtRsp::kArrPosFieldNumber;
#endif  // !_MSC_VER

TBossGetMyFmtRsp::TBossGetMyFmtRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossGetMyFmtRsp)
}

void TBossGetMyFmtRsp::InitAsDefaultInstance() {
}

TBossGetMyFmtRsp::TBossGetMyFmtRsp(const TBossGetMyFmtRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossGetMyFmtRsp)
}

void TBossGetMyFmtRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossGetMyFmtRsp::~TBossGetMyFmtRsp() {
  // @@protoc_insertion_point(destructor:pb.TBossGetMyFmtRsp)
  SharedDtor();
}

void TBossGetMyFmtRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBossGetMyFmtRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossGetMyFmtRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossGetMyFmtRsp_descriptor_;
}

const TBossGetMyFmtRsp& TBossGetMyFmtRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossGetMyFmtRsp* TBossGetMyFmtRsp::default_instance_ = NULL;

TBossGetMyFmtRsp* TBossGetMyFmtRsp::New() const {
  return new TBossGetMyFmtRsp;
}

void TBossGetMyFmtRsp::Clear() {
  arrpos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossGetMyFmtRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossGetMyFmtRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBossPosInfo ArrPos = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrPos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossGetMyFmtRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossGetMyFmtRsp)
  return false;
#undef DO_
}

void TBossGetMyFmtRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossGetMyFmtRsp)
  // repeated .pb.TBossPosInfo ArrPos = 1;
  for (int i = 0; i < this->arrpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrpos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossGetMyFmtRsp)
}

::google::protobuf::uint8* TBossGetMyFmtRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossGetMyFmtRsp)
  // repeated .pb.TBossPosInfo ArrPos = 1;
  for (int i = 0; i < this->arrpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrpos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossGetMyFmtRsp)
  return target;
}

int TBossGetMyFmtRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TBossPosInfo ArrPos = 1;
  total_size += 1 * this->arrpos_size();
  for (int i = 0; i < this->arrpos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrpos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossGetMyFmtRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossGetMyFmtRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossGetMyFmtRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossGetMyFmtRsp::MergeFrom(const TBossGetMyFmtRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrpos_.MergeFrom(from.arrpos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossGetMyFmtRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossGetMyFmtRsp::CopyFrom(const TBossGetMyFmtRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossGetMyFmtRsp::IsInitialized() const {

  return true;
}

void TBossGetMyFmtRsp::Swap(TBossGetMyFmtRsp* other) {
  if (other != this) {
    arrpos_.Swap(&other->arrpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossGetMyFmtRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossGetMyFmtRsp_descriptor_;
  metadata.reflection = TBossGetMyFmtRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossSetMyFmtReq::kArrPosFieldNumber;
#endif  // !_MSC_VER

TBossSetMyFmtReq::TBossSetMyFmtReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossSetMyFmtReq)
}

void TBossSetMyFmtReq::InitAsDefaultInstance() {
}

TBossSetMyFmtReq::TBossSetMyFmtReq(const TBossSetMyFmtReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossSetMyFmtReq)
}

void TBossSetMyFmtReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossSetMyFmtReq::~TBossSetMyFmtReq() {
  // @@protoc_insertion_point(destructor:pb.TBossSetMyFmtReq)
  SharedDtor();
}

void TBossSetMyFmtReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBossSetMyFmtReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossSetMyFmtReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossSetMyFmtReq_descriptor_;
}

const TBossSetMyFmtReq& TBossSetMyFmtReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossSetMyFmtReq* TBossSetMyFmtReq::default_instance_ = NULL;

TBossSetMyFmtReq* TBossSetMyFmtReq::New() const {
  return new TBossSetMyFmtReq;
}

void TBossSetMyFmtReq::Clear() {
  arrpos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossSetMyFmtReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossSetMyFmtReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBossPosInfo ArrPos = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrPos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossSetMyFmtReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossSetMyFmtReq)
  return false;
#undef DO_
}

void TBossSetMyFmtReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossSetMyFmtReq)
  // repeated .pb.TBossPosInfo ArrPos = 1;
  for (int i = 0; i < this->arrpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrpos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossSetMyFmtReq)
}

::google::protobuf::uint8* TBossSetMyFmtReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossSetMyFmtReq)
  // repeated .pb.TBossPosInfo ArrPos = 1;
  for (int i = 0; i < this->arrpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrpos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossSetMyFmtReq)
  return target;
}

int TBossSetMyFmtReq::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TBossPosInfo ArrPos = 1;
  total_size += 1 * this->arrpos_size();
  for (int i = 0; i < this->arrpos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrpos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossSetMyFmtReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossSetMyFmtReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossSetMyFmtReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossSetMyFmtReq::MergeFrom(const TBossSetMyFmtReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrpos_.MergeFrom(from.arrpos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossSetMyFmtReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossSetMyFmtReq::CopyFrom(const TBossSetMyFmtReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossSetMyFmtReq::IsInitialized() const {

  return true;
}

void TBossSetMyFmtReq::Swap(TBossSetMyFmtReq* other) {
  if (other != this) {
    arrpos_.Swap(&other->arrpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossSetMyFmtReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossSetMyFmtReq_descriptor_;
  metadata.reflection = TBossSetMyFmtReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossFirstAtkNotify::kBossIdFieldNumber;
const int TBossFirstAtkNotify::kBeginTimeFieldNumber;
#endif  // !_MSC_VER

TBossFirstAtkNotify::TBossFirstAtkNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossFirstAtkNotify)
}

void TBossFirstAtkNotify::InitAsDefaultInstance() {
}

TBossFirstAtkNotify::TBossFirstAtkNotify(const TBossFirstAtkNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossFirstAtkNotify)
}

void TBossFirstAtkNotify::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  begintime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossFirstAtkNotify::~TBossFirstAtkNotify() {
  // @@protoc_insertion_point(destructor:pb.TBossFirstAtkNotify)
  SharedDtor();
}

void TBossFirstAtkNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBossFirstAtkNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossFirstAtkNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossFirstAtkNotify_descriptor_;
}

const TBossFirstAtkNotify& TBossFirstAtkNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossFirstAtkNotify* TBossFirstAtkNotify::default_instance_ = NULL;

TBossFirstAtkNotify* TBossFirstAtkNotify::New() const {
  return new TBossFirstAtkNotify;
}

void TBossFirstAtkNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBossFirstAtkNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(begintime_, bossid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossFirstAtkNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossFirstAtkNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BeginTime;
        break;
      }

      // optional uint64 BeginTime = 2;
      case 2: {
        if (tag == 16) {
         parse_BeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossFirstAtkNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossFirstAtkNotify)
  return false;
#undef DO_
}

void TBossFirstAtkNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossFirstAtkNotify)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional uint64 BeginTime = 2;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->begintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossFirstAtkNotify)
}

::google::protobuf::uint8* TBossFirstAtkNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossFirstAtkNotify)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional uint64 BeginTime = 2;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->begintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossFirstAtkNotify)
  return target;
}

int TBossFirstAtkNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional uint64 BeginTime = 2;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossFirstAtkNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossFirstAtkNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossFirstAtkNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossFirstAtkNotify::MergeFrom(const TBossFirstAtkNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossFirstAtkNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossFirstAtkNotify::CopyFrom(const TBossFirstAtkNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossFirstAtkNotify::IsInitialized() const {

  return true;
}

void TBossFirstAtkNotify::Swap(TBossFirstAtkNotify* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(begintime_, other->begintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossFirstAtkNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossFirstAtkNotify_descriptor_;
  metadata.reflection = TBossFirstAtkNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBossFinalRankNotify::kBossIdFieldNumber;
const int TBossFinalRankNotify::kSelfRankFieldNumber;
const int TBossFinalRankNotify::kRewardArrFieldNumber;
const int TBossFinalRankNotify::kUserRankArrFieldNumber;
#endif  // !_MSC_VER

TBossFinalRankNotify::TBossFinalRankNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBossFinalRankNotify)
}

void TBossFinalRankNotify::InitAsDefaultInstance() {
  selfrank_ = const_cast< ::pb::TBossRankInfo*>(&::pb::TBossRankInfo::default_instance());
}

TBossFinalRankNotify::TBossFinalRankNotify(const TBossFinalRankNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBossFinalRankNotify)
}

void TBossFinalRankNotify::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  selfrank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBossFinalRankNotify::~TBossFinalRankNotify() {
  // @@protoc_insertion_point(destructor:pb.TBossFinalRankNotify)
  SharedDtor();
}

void TBossFinalRankNotify::SharedDtor() {
  if (this != default_instance_) {
    delete selfrank_;
  }
}

void TBossFinalRankNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBossFinalRankNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBossFinalRankNotify_descriptor_;
}

const TBossFinalRankNotify& TBossFinalRankNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossBoss_2eproto();
  return *default_instance_;
}

TBossFinalRankNotify* TBossFinalRankNotify::default_instance_ = NULL;

TBossFinalRankNotify* TBossFinalRankNotify::New() const {
  return new TBossFinalRankNotify;
}

void TBossFinalRankNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    bossid_ = 0u;
    if (has_selfrank()) {
      if (selfrank_ != NULL) selfrank_->::pb::TBossRankInfo::Clear();
    }
  }
  rewardarr_.Clear();
  userrankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBossFinalRankNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBossFinalRankNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SelfRank;
        break;
      }

      // optional .pb.TBossRankInfo SelfRank = 2;
      case 2: {
        if (tag == 18) {
         parse_SelfRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfrank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 3;
      case 3: {
        if (tag == 26) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        if (input->ExpectTag(34)) goto parse_UserRankArr;
        break;
      }

      // repeated .pb.TBossRankInfo UserRankArr = 4;
      case 4: {
        if (tag == 34) {
         parse_UserRankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userrankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UserRankArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBossFinalRankNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBossFinalRankNotify)
  return false;
#undef DO_
}

void TBossFinalRankNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBossFinalRankNotify)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional .pb.TBossRankInfo SelfRank = 2;
  if (has_selfrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selfrank(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewardarr(i), output);
  }

  // repeated .pb.TBossRankInfo UserRankArr = 4;
  for (int i = 0; i < this->userrankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userrankarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBossFinalRankNotify)
}

::google::protobuf::uint8* TBossFinalRankNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBossFinalRankNotify)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional .pb.TBossRankInfo SelfRank = 2;
  if (has_selfrank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selfrank(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewardarr(i), target);
  }

  // repeated .pb.TBossRankInfo UserRankArr = 4;
  for (int i = 0; i < this->userrankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->userrankarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBossFinalRankNotify)
  return target;
}

int TBossFinalRankNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional .pb.TBossRankInfo SelfRank = 2;
    if (has_selfrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfrank());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 3;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  // repeated .pb.TBossRankInfo UserRankArr = 4;
  total_size += 1 * this->userrankarr_size();
  for (int i = 0; i < this->userrankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userrankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBossFinalRankNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBossFinalRankNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBossFinalRankNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBossFinalRankNotify::MergeFrom(const TBossFinalRankNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  userrankarr_.MergeFrom(from.userrankarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_selfrank()) {
      mutable_selfrank()->::pb::TBossRankInfo::MergeFrom(from.selfrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBossFinalRankNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBossFinalRankNotify::CopyFrom(const TBossFinalRankNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBossFinalRankNotify::IsInitialized() const {

  return true;
}

void TBossFinalRankNotify::Swap(TBossFinalRankNotify* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(selfrank_, other->selfrank_);
    rewardarr_.Swap(&other->rewardarr_);
    userrankarr_.Swap(&other->userrankarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBossFinalRankNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBossFinalRankNotify_descriptor_;
  metadata.reflection = TBossFinalRankNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
