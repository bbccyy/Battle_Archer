// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/User.proto

#ifndef PROTOBUF_net_2fUser_2eproto__INCLUDED
#define PROTOBUF_net_2fUser_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Hero.pb.h"
#include "net/Bag.pb.h"
#include "net/Battle.pb.h"
#include "net/FrontStore.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fUser_2eproto();
void protobuf_AssignDesc_net_2fUser_2eproto();
void protobuf_ShutdownFile_net_2fUser_2eproto();

class TModuleTime;
class TModuleInfos;
class TUserLoginReq;
class TUserLoginRsp;
class TUserGetUserDataRpgReq;
class TUserGetUserDataSlgReq;
class TBaseUserData;
class TUserGetUserDataRpgRsp;
class TUserUpdateUserDataRpgNotify;
class TUserRecoverDataRpg;
class TUserCurrencyData;
class TUserResourceData;
class TUserResourceCalculateRsp;
class TUserSubGoldByInnerReq;
class TUserSimpleInfo;
class TUserSimpleInfoWithStatus;
class TUserSimpleInfoWithAlly;
class TUserGetArrUserDataRpgReq;
class TUserGetArrUserDataRpgRsp;
class TUserFightForceRankItem;
class TUserFightForceRankReq;
class TUserFightForceRankRsp;
class TUserLevelRankItem;
class TUserLevelRankReq;
class TUserLevelRankRsp;
class TUserSetPlayerImageReq;
class TUserSetSignWordsReq;
class TUserSetModelReq;
class TUserChangeUnameReq;
class TUserBuySilverCoinReq;
class TUserBuySilverCoinSingle;
class TUserBuySilverCoinRsp;
class TUserBuyExecuteReq;
class TUserGetRandomNameArrReq;
class TUserGetRandomNameArrRsp;
class TUserGetGuildWarUserSyncInfoRsp;
class TUserExchangeGenderReq;
class TUserUgcMessageBeLiked;
class TUserFightForceChangeReq;
class TUserUgcGetArrUserDataRpgReq;
class TUserUgcSimpleInfo;
class TUserUgcGetArrUserDataRpgRsp;
class TUserSetShowVipReq;
class TUserGetSelfRankRsp;
class TUserPlayerImageFrameArrRsp;
class TUserPlayerImageFrameArrPush;
class TUserSetCanStrangerChatReq;
class TUserSetRefuseLowAdventureReq;
class TUserGetAndRefreshFightForceReq;
class TUserGetAndRefreshFightForceRsp;
class TUserSendChannelEmailRsp;

enum EModuleId {
  USER = 1,
  HERO = 2,
  BAG = 3
};
bool EModuleId_IsValid(int value);
const EModuleId EModuleId_MIN = USER;
const EModuleId EModuleId_MAX = BAG;
const int EModuleId_ARRAYSIZE = EModuleId_MAX + 1;

const ::google::protobuf::EnumDescriptor* EModuleId_descriptor();
inline const ::std::string& EModuleId_Name(EModuleId value) {
  return ::google::protobuf::internal::NameOfEnum(
    EModuleId_descriptor(), value);
}
inline bool EModuleId_Parse(
    const ::std::string& name, EModuleId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EModuleId>(
    EModuleId_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TModuleTime</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TModuleTime : public ::google::protobuf::Message {
 public:
  TModuleTime();
  virtual ~TModuleTime();

  TModuleTime(const TModuleTime& from);

  inline TModuleTime& operator=(const TModuleTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TModuleTime& default_instance();

  void Swap(TModuleTime* other);

  // implements Message ----------------------------------------------

  TModuleTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TModuleTime& from);
  void MergeFrom(const TModuleTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EModuleId ModuleId = 1;
  inline bool has_moduleid() const;
  inline void clear_moduleid();
  static const int kModuleIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TModuleTime</name>
  	<Function>
  		<name>moduleid</name>
  		<replaceName>ModuleId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_moduleid</name>
  		<replaceName>ModuleId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_moduleid</name>
  		<replaceName>ModuleId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EModuleId moduleid() const;
  inline void set_moduleid(::pb::EModuleId value);

  // optional uint64 UpdateTime = 2;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TModuleTime</name>
  	<Function>
  		<name>updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 updatetime() const;
  inline void set_updatetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TModuleTime)
 private:
  inline void set_has_moduleid();
  inline void clear_has_moduleid();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 updatetime_;
  int moduleid_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TModuleTime* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TModuleInfos</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TModuleInfos : public ::google::protobuf::Message {
 public:
  TModuleInfos();
  virtual ~TModuleInfos();

  TModuleInfos(const TModuleInfos& from);

  inline TModuleInfos& operator=(const TModuleInfos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TModuleInfos& default_instance();

  void Swap(TModuleInfos* other);

  // implements Message ----------------------------------------------

  TModuleInfos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TModuleInfos& from);
  void MergeFrom(const TModuleInfos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserGetUserDataRpgRsp GetUserDataRpgRsp = 1;
  inline bool has_getuserdatarpgrsp() const;
  inline void clear_getuserdatarpgrsp();
  static const int kGetUserDataRpgRspFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TModuleInfos</name>
  	<Function>
  		<name>getuserdatarpgrsp</name>
  		<replaceName>GetUserDataRpgRsp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_getuserdatarpgrsp</name>
  		<replaceName>GetUserDataRpgRsp</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_getuserdatarpgrsp</name>
  		<replaceName>GetUserDataRpgRsp</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_getuserdatarpgrsp</name>
  		<replaceName>GetUserDataRpgRsp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserGetUserDataRpgRsp& getuserdatarpgrsp() const;
  inline ::pb::TUserGetUserDataRpgRsp* mutable_getuserdatarpgrsp();
  inline ::pb::TUserGetUserDataRpgRsp* release_getuserdatarpgrsp();
  inline void set_allocated_getuserdatarpgrsp(::pb::TUserGetUserDataRpgRsp* getuserdatarpgrsp);

  // optional .pb.THeroGetHeroDataArrayRsp GetHeroDataArrayRsp = 2;
  inline bool has_getherodataarrayrsp() const;
  inline void clear_getherodataarrayrsp();
  static const int kGetHeroDataArrayRspFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TModuleInfos</name>
  	<Function>
  		<name>getherodataarrayrsp</name>
  		<replaceName>GetHeroDataArrayRsp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_getherodataarrayrsp</name>
  		<replaceName>GetHeroDataArrayRsp</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_getherodataarrayrsp</name>
  		<replaceName>GetHeroDataArrayRsp</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_getherodataarrayrsp</name>
  		<replaceName>GetHeroDataArrayRsp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::THeroGetHeroDataArrayRsp& getherodataarrayrsp() const;
  inline ::pb::THeroGetHeroDataArrayRsp* mutable_getherodataarrayrsp();
  inline ::pb::THeroGetHeroDataArrayRsp* release_getherodataarrayrsp();
  inline void set_allocated_getherodataarrayrsp(::pb::THeroGetHeroDataArrayRsp* getherodataarrayrsp);

  // optional .pb.TBagData GetBagDataRsp = 3;
  inline bool has_getbagdatarsp() const;
  inline void clear_getbagdatarsp();
  static const int kGetBagDataRspFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TModuleInfos</name>
  	<Function>
  		<name>getbagdatarsp</name>
  		<replaceName>GetBagDataRsp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_getbagdatarsp</name>
  		<replaceName>GetBagDataRsp</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_getbagdatarsp</name>
  		<replaceName>GetBagDataRsp</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_getbagdatarsp</name>
  		<replaceName>GetBagDataRsp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBagData& getbagdatarsp() const;
  inline ::pb::TBagData* mutable_getbagdatarsp();
  inline ::pb::TBagData* release_getbagdatarsp();
  inline void set_allocated_getbagdatarsp(::pb::TBagData* getbagdatarsp);

  // repeated .pb.TFrontStore ArrFrontStoreInfo = 4;
  inline int arrfrontstoreinfo_size() const;
  inline void clear_arrfrontstoreinfo();
  static const int kArrFrontStoreInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TModuleInfos</name>
  	<Function>
  		<name>arrfrontstoreinfo</name>
  		<replaceName>ArrFrontStoreInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrfrontstoreinfo</name>
  		<replaceName>ArrFrontStoreInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrfrontstoreinfo</name>
  		<replaceName>ArrFrontStoreInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrfrontstoreinfo</name>
  		<replaceName>ArrFrontStoreInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrfrontstoreinfo_size</name>
  		<replaceName>ArrFrontStoreInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TFrontStore& arrfrontstoreinfo(int index) const;
  inline ::pb::TFrontStore* mutable_arrfrontstoreinfo(int index);
  inline ::pb::TFrontStore* add_arrfrontstoreinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TFrontStore >&
      arrfrontstoreinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TFrontStore >*
      mutable_arrfrontstoreinfo();

  // @@protoc_insertion_point(class_scope:pb.TModuleInfos)
 private:
  inline void set_has_getuserdatarpgrsp();
  inline void clear_has_getuserdatarpgrsp();
  inline void set_has_getherodataarrayrsp();
  inline void clear_has_getherodataarrayrsp();
  inline void set_has_getbagdatarsp();
  inline void clear_has_getbagdatarsp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserGetUserDataRpgRsp* getuserdatarpgrsp_;
  ::pb::THeroGetHeroDataArrayRsp* getherodataarrayrsp_;
  ::pb::TBagData* getbagdatarsp_;
  ::google::protobuf::RepeatedPtrField< ::pb::TFrontStore > arrfrontstoreinfo_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TModuleInfos* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserLoginReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserLoginReq : public ::google::protobuf::Message {
 public:
  TUserLoginReq();
  virtual ~TUserLoginReq();

  TUserLoginReq(const TUserLoginReq& from);

  inline TUserLoginReq& operator=(const TUserLoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserLoginReq& default_instance();

  void Swap(TUserLoginReq* other);

  // implements Message ----------------------------------------------

  TUserLoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserLoginReq& from);
  void MergeFrom(const TUserLoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserLoginReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // repeated .pb.TModuleTime ModuleTimes = 2;
  inline int moduletimes_size() const;
  inline void clear_moduletimes();
  static const int kModuleTimesFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserLoginReq</name>
  	<Function>
  		<name>moduletimes</name>
  		<replaceName>ModuleTimes</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_moduletimes</name>
  		<replaceName>ModuleTimes</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_moduletimes</name>
  		<replaceName>ModuleTimes</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_moduletimes</name>
  		<replaceName>ModuleTimes</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>moduletimes_size</name>
  		<replaceName>ModuleTimes</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TModuleTime& moduletimes(int index) const;
  inline ::pb::TModuleTime* mutable_moduletimes(int index);
  inline ::pb::TModuleTime* add_moduletimes();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TModuleTime >&
      moduletimes() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TModuleTime >*
      mutable_moduletimes();

  // @@protoc_insertion_point(class_scope:pb.TUserLoginReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TModuleTime > moduletimes_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserLoginReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserLoginRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserLoginRsp : public ::google::protobuf::Message {
 public:
  TUserLoginRsp();
  virtual ~TUserLoginRsp();

  TUserLoginRsp(const TUserLoginRsp& from);

  inline TUserLoginRsp& operator=(const TUserLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserLoginRsp& default_instance();

  void Swap(TUserLoginRsp* other);

  // implements Message ----------------------------------------------

  TUserLoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserLoginRsp& from);
  void MergeFrom(const TUserLoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserLoginRsp</name>
  	<Function>
  		<name>ret</name>
  		<replaceName>Ret</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ret</name>
  		<replaceName>Ret</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ret</name>
  		<replaceName>Ret</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& ret() const;
  inline void set_ret(const ::std::string& value);
  inline void set_ret(const char* value);
  inline void set_ret(const char* value, size_t size);
  inline ::std::string* mutable_ret();
  inline ::std::string* release_ret();
  inline void set_allocated_ret(::std::string* ret);

  // optional string BanMsg = 2;
  inline bool has_banmsg() const;
  inline void clear_banmsg();
  static const int kBanMsgFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserLoginRsp</name>
  	<Function>
  		<name>banmsg</name>
  		<replaceName>BanMsg</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_banmsg</name>
  		<replaceName>BanMsg</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_banmsg</name>
  		<replaceName>BanMsg</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& banmsg() const;
  inline void set_banmsg(const ::std::string& value);
  inline void set_banmsg(const char* value);
  inline void set_banmsg(const char* value, size_t size);
  inline ::std::string* mutable_banmsg();
  inline ::std::string* release_banmsg();
  inline void set_allocated_banmsg(::std::string* banmsg);

  // optional uint64 BanTime = 3;
  inline bool has_bantime() const;
  inline void clear_bantime();
  static const int kBanTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUserLoginRsp</name>
  	<Function>
  		<name>bantime</name>
  		<replaceName>BanTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bantime</name>
  		<replaceName>BanTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bantime</name>
  		<replaceName>BanTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 bantime() const;
  inline void set_bantime(::google::protobuf::uint64 value);

  // optional .pb.TModuleInfos ModuleInfos = 4;
  inline bool has_moduleinfos() const;
  inline void clear_moduleinfos();
  static const int kModuleInfosFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUserLoginRsp</name>
  	<Function>
  		<name>moduleinfos</name>
  		<replaceName>ModuleInfos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_moduleinfos</name>
  		<replaceName>ModuleInfos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_moduleinfos</name>
  		<replaceName>ModuleInfos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_moduleinfos</name>
  		<replaceName>ModuleInfos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TModuleInfos& moduleinfos() const;
  inline ::pb::TModuleInfos* mutable_moduleinfos();
  inline ::pb::TModuleInfos* release_moduleinfos();
  inline void set_allocated_moduleinfos(::pb::TModuleInfos* moduleinfos);

  // optional int32 OS = 5;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOSFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TUserLoginRsp</name>
  	<Function>
  		<name>os</name>
  		<replaceName>OS</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_os</name>
  		<replaceName>OS</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_os</name>
  		<replaceName>OS</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 os() const;
  inline void set_os(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserLoginRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_banmsg();
  inline void clear_has_banmsg();
  inline void set_has_bantime();
  inline void clear_has_bantime();
  inline void set_has_moduleinfos();
  inline void clear_has_moduleinfos();
  inline void set_has_os();
  inline void clear_has_os();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ret_;
  ::std::string* banmsg_;
  ::google::protobuf::uint64 bantime_;
  ::pb::TModuleInfos* moduleinfos_;
  ::google::protobuf::int32 os_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserLoginRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserGetUserDataRpgReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserGetUserDataRpgReq : public ::google::protobuf::Message {
 public:
  TUserGetUserDataRpgReq();
  virtual ~TUserGetUserDataRpgReq();

  TUserGetUserDataRpgReq(const TUserGetUserDataRpgReq& from);

  inline TUserGetUserDataRpgReq& operator=(const TUserGetUserDataRpgReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserGetUserDataRpgReq& default_instance();

  void Swap(TUserGetUserDataRpgReq* other);

  // implements Message ----------------------------------------------

  TUserGetUserDataRpgReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserGetUserDataRpgReq& from);
  void MergeFrom(const TUserGetUserDataRpgReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TUserGetUserDataRpgReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserGetUserDataRpgReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserGetUserDataSlgReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserGetUserDataSlgReq : public ::google::protobuf::Message {
 public:
  TUserGetUserDataSlgReq();
  virtual ~TUserGetUserDataSlgReq();

  TUserGetUserDataSlgReq(const TUserGetUserDataSlgReq& from);

  inline TUserGetUserDataSlgReq& operator=(const TUserGetUserDataSlgReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserGetUserDataSlgReq& default_instance();

  void Swap(TUserGetUserDataSlgReq* other);

  // implements Message ----------------------------------------------

  TUserGetUserDataSlgReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserGetUserDataSlgReq& from);
  void MergeFrom(const TUserGetUserDataSlgReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserGetUserDataSlgReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TUserGetUserDataSlgReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserGetUserDataSlgReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBaseUserData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBaseUserData : public ::google::protobuf::Message {
 public:
  TBaseUserData();
  virtual ~TBaseUserData();

  TBaseUserData(const TBaseUserData& from);

  inline TBaseUserData& operator=(const TBaseUserData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBaseUserData& default_instance();

  void Swap(TBaseUserData* other);

  // implements Message ----------------------------------------------

  TBaseUserData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBaseUserData& from);
  void MergeFrom(const TBaseUserData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Uname = 1;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional int32 Exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>exp</name>
  		<replaceName>Exp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_exp</name>
  		<replaceName>Exp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exp</name>
  		<replaceName>Exp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 Level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 Gold = 5;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>gold</name>
  		<replaceName>Gold</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gold</name>
  		<replaceName>Gold</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gold</name>
  		<replaceName>Gold</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // optional int32 VipExp = 6;
  inline bool has_vipexp() const;
  inline void clear_vipexp();
  static const int kVipExpFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>vipexp</name>
  		<replaceName>VipExp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_vipexp</name>
  		<replaceName>VipExp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_vipexp</name>
  		<replaceName>VipExp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 vipexp() const;
  inline void set_vipexp(::google::protobuf::int32 value);

  // optional int64 Coin = 7;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>coin</name>
  		<replaceName>Coin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_coin</name>
  		<replaceName>Coin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_coin</name>
  		<replaceName>Coin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 coin() const;
  inline void set_coin(::google::protobuf::int64 value);

  // repeated .pb.TUserRecoverDataRpg RecoverDataArray = 9;
  inline int recoverdataarray_size() const;
  inline void clear_recoverdataarray();
  static const int kRecoverDataArrayFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>recoverdataarray</name>
  		<replaceName>RecoverDataArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recoverdataarray</name>
  		<replaceName>RecoverDataArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recoverdataarray</name>
  		<replaceName>RecoverDataArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recoverdataarray</name>
  		<replaceName>RecoverDataArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recoverdataarray_size</name>
  		<replaceName>RecoverDataArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserRecoverDataRpg& recoverdataarray(int index) const;
  inline ::pb::TUserRecoverDataRpg* mutable_recoverdataarray(int index);
  inline ::pb::TUserRecoverDataRpg* add_recoverdataarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserRecoverDataRpg >&
      recoverdataarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserRecoverDataRpg >*
      mutable_recoverdataarray();

  // optional int32 VipLevel = 10;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>viplevel</name>
  		<replaceName>VipLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viplevel</name>
  		<replaceName>VipLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viplevel</name>
  		<replaceName>VipLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // repeated .pb.TUserCurrencyData CurrencyDataArray = 11;
  inline int currencydataarray_size() const;
  inline void clear_currencydataarray();
  static const int kCurrencyDataArrayFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>currencydataarray</name>
  		<replaceName>CurrencyDataArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_currencydataarray</name>
  		<replaceName>CurrencyDataArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_currencydataarray</name>
  		<replaceName>CurrencyDataArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_currencydataarray</name>
  		<replaceName>CurrencyDataArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>currencydataarray_size</name>
  		<replaceName>CurrencyDataArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserCurrencyData& currencydataarray(int index) const;
  inline ::pb::TUserCurrencyData* mutable_currencydataarray(int index);
  inline ::pb::TUserCurrencyData* add_currencydataarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserCurrencyData >&
      currencydataarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserCurrencyData >*
      mutable_currencydataarray();

  // repeated .pb.TUserResourceData ResourceDataArray = 12;
  inline int resourcedataarray_size() const;
  inline void clear_resourcedataarray();
  static const int kResourceDataArrayFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>resourcedataarray</name>
  		<replaceName>ResourceDataArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_resourcedataarray</name>
  		<replaceName>ResourceDataArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_resourcedataarray</name>
  		<replaceName>ResourceDataArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resourcedataarray</name>
  		<replaceName>ResourceDataArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>resourcedataarray_size</name>
  		<replaceName>ResourceDataArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserResourceData& resourcedataarray(int index) const;
  inline ::pb::TUserResourceData* mutable_resourcedataarray(int index);
  inline ::pb::TUserResourceData* add_resourcedataarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserResourceData >&
      resourcedataarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserResourceData >*
      mutable_resourcedataarray();

  // optional int64 ResourceUpdateTime = 13;
  inline bool has_resourceupdatetime() const;
  inline void clear_resourceupdatetime();
  static const int kResourceUpdateTimeFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>resourceupdatetime</name>
  		<replaceName>ResourceUpdateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resourceupdatetime</name>
  		<replaceName>ResourceUpdateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resourceupdatetime</name>
  		<replaceName>ResourceUpdateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 resourceupdatetime() const;
  inline void set_resourceupdatetime(::google::protobuf::int64 value);

  // optional int64 CreateTime = 14;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // optional int32 PlayerImageFrameTid = 16;
  inline bool has_playerimageframetid() const;
  inline void clear_playerimageframetid();
  static const int kPlayerImageFrameTidFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 playerimageframetid() const;
  inline void set_playerimageframetid(::google::protobuf::int32 value);

  // optional string SignWords = 17;
  inline bool has_signwords() const;
  inline void clear_signwords();
  static const int kSignWordsFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>signwords</name>
  		<replaceName>SignWords</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_signwords</name>
  		<replaceName>SignWords</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signwords</name>
  		<replaceName>SignWords</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& signwords() const;
  inline void set_signwords(const ::std::string& value);
  inline void set_signwords(const char* value);
  inline void set_signwords(const char* value, size_t size);
  inline ::std::string* mutable_signwords();
  inline ::std::string* release_signwords();
  inline void set_allocated_signwords(::std::string* signwords);

  // optional int32 PlayerModelHtid = 18;
  inline bool has_playermodelhtid() const;
  inline void clear_playermodelhtid();
  static const int kPlayerModelHtidFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>playermodelhtid</name>
  		<replaceName>PlayerModelHtid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_playermodelhtid</name>
  		<replaceName>PlayerModelHtid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_playermodelhtid</name>
  		<replaceName>PlayerModelHtid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 playermodelhtid() const;
  inline void set_playermodelhtid(::google::protobuf::int32 value);

  // optional int32 SilverCoinFreeNum = 20;
  inline bool has_silvercoinfreenum() const;
  inline void clear_silvercoinfreenum();
  static const int kSilverCoinFreeNumFieldNumber = 20;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>silvercoinfreenum</name>
  		<replaceName>SilverCoinFreeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_silvercoinfreenum</name>
  		<replaceName>SilverCoinFreeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_silvercoinfreenum</name>
  		<replaceName>SilverCoinFreeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 silvercoinfreenum() const;
  inline void set_silvercoinfreenum(::google::protobuf::int32 value);

  // optional int32 SilverCoinBuyNum = 21;
  inline bool has_silvercoinbuynum() const;
  inline void clear_silvercoinbuynum();
  static const int kSilverCoinBuyNumFieldNumber = 21;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>silvercoinbuynum</name>
  		<replaceName>SilverCoinBuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_silvercoinbuynum</name>
  		<replaceName>SilverCoinBuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_silvercoinbuynum</name>
  		<replaceName>SilverCoinBuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 silvercoinbuynum() const;
  inline void set_silvercoinbuynum(::google::protobuf::int32 value);

  // optional int32 ExecuteBuyNum = 22;
  inline bool has_executebuynum() const;
  inline void clear_executebuynum();
  static const int kExecuteBuyNumFieldNumber = 22;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>executebuynum</name>
  		<replaceName>ExecuteBuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_executebuynum</name>
  		<replaceName>ExecuteBuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_executebuynum</name>
  		<replaceName>ExecuteBuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 executebuynum() const;
  inline void set_executebuynum(::google::protobuf::int32 value);

  // optional int32 Title = 23;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 23;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 title() const;
  inline void set_title(::google::protobuf::int32 value);

  // optional uint64 MaxFightForce = 24;
  inline bool has_maxfightforce() const;
  inline void clear_maxfightforce();
  static const int kMaxFightForceFieldNumber = 24;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>maxfightforce</name>
  		<replaceName>MaxFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxfightforce</name>
  		<replaceName>MaxFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxfightforce</name>
  		<replaceName>MaxFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxfightforce() const;
  inline void set_maxfightforce(::google::protobuf::uint64 value);

  // optional uint32 ShopCoinFreeReceiveNum = 25;
  inline bool has_shopcoinfreereceivenum() const;
  inline void clear_shopcoinfreereceivenum();
  static const int kShopCoinFreeReceiveNumFieldNumber = 25;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>shopcoinfreereceivenum</name>
  		<replaceName>ShopCoinFreeReceiveNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_shopcoinfreereceivenum</name>
  		<replaceName>ShopCoinFreeReceiveNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_shopcoinfreereceivenum</name>
  		<replaceName>ShopCoinFreeReceiveNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 shopcoinfreereceivenum() const;
  inline void set_shopcoinfreereceivenum(::google::protobuf::uint32 value);

  // optional uint32 IsShowVip = 26;
  inline bool has_isshowvip() const;
  inline void clear_isshowvip();
  static const int kIsShowVipFieldNumber = 26;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>isshowvip</name>
  		<replaceName>IsShowVip</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isshowvip</name>
  		<replaceName>IsShowVip</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isshowvip</name>
  		<replaceName>IsShowVip</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isshowvip() const;
  inline void set_isshowvip(::google::protobuf::uint32 value);

  // optional uint32 CanStrangerChat = 27;
  inline bool has_canstrangerchat() const;
  inline void clear_canstrangerchat();
  static const int kCanStrangerChatFieldNumber = 27;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>canstrangerchat</name>
  		<replaceName>CanStrangerChat</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_canstrangerchat</name>
  		<replaceName>CanStrangerChat</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_canstrangerchat</name>
  		<replaceName>CanStrangerChat</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 canstrangerchat() const;
  inline void set_canstrangerchat(::google::protobuf::uint32 value);

  // optional uint32 IsRefuseLowAdventure = 28;
  inline bool has_isrefuselowadventure() const;
  inline void clear_isrefuselowadventure();
  static const int kIsRefuseLowAdventureFieldNumber = 28;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>isrefuselowadventure</name>
  		<replaceName>IsRefuseLowAdventure</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isrefuselowadventure</name>
  		<replaceName>IsRefuseLowAdventure</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isrefuselowadventure</name>
  		<replaceName>IsRefuseLowAdventure</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isrefuselowadventure() const;
  inline void set_isrefuselowadventure(::google::protobuf::uint32 value);

  // optional uint32 CashCoupon = 29;
  inline bool has_cashcoupon() const;
  inline void clear_cashcoupon();
  static const int kCashCouponFieldNumber = 29;
  /*FOR2LUA
  <Record>
  	<name>TBaseUserData</name>
  	<Function>
  		<name>cashcoupon</name>
  		<replaceName>CashCoupon</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cashcoupon</name>
  		<replaceName>CashCoupon</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cashcoupon</name>
  		<replaceName>CashCoupon</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cashcoupon() const;
  inline void set_cashcoupon(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBaseUserData)
 private:
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_vipexp();
  inline void clear_has_vipexp();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_resourceupdatetime();
  inline void clear_has_resourceupdatetime();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_playerimageframetid();
  inline void clear_has_playerimageframetid();
  inline void set_has_signwords();
  inline void clear_has_signwords();
  inline void set_has_playermodelhtid();
  inline void clear_has_playermodelhtid();
  inline void set_has_silvercoinfreenum();
  inline void clear_has_silvercoinfreenum();
  inline void set_has_silvercoinbuynum();
  inline void clear_has_silvercoinbuynum();
  inline void set_has_executebuynum();
  inline void clear_has_executebuynum();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_maxfightforce();
  inline void clear_has_maxfightforce();
  inline void set_has_shopcoinfreereceivenum();
  inline void clear_has_shopcoinfreereceivenum();
  inline void set_has_isshowvip();
  inline void clear_has_isshowvip();
  inline void set_has_canstrangerchat();
  inline void clear_has_canstrangerchat();
  inline void set_has_isrefuselowadventure();
  inline void clear_has_isrefuselowadventure();
  inline void set_has_cashcoupon();
  inline void clear_has_cashcoupon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uname_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 vipexp_;
  ::google::protobuf::int64 coin_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserRecoverDataRpg > recoverdataarray_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserCurrencyData > currencydataarray_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserResourceData > resourcedataarray_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 playerimageframetid_;
  ::google::protobuf::int64 resourceupdatetime_;
  ::google::protobuf::int64 createtime_;
  ::std::string* signwords_;
  ::google::protobuf::int32 playermodelhtid_;
  ::google::protobuf::int32 silvercoinfreenum_;
  ::google::protobuf::int32 silvercoinbuynum_;
  ::google::protobuf::int32 executebuynum_;
  ::google::protobuf::uint64 maxfightforce_;
  ::google::protobuf::int32 title_;
  ::google::protobuf::uint32 shopcoinfreereceivenum_;
  ::google::protobuf::uint32 isshowvip_;
  ::google::protobuf::uint32 canstrangerchat_;
  ::google::protobuf::uint32 isrefuselowadventure_;
  ::google::protobuf::uint32 cashcoupon_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TBaseUserData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserGetUserDataRpgRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserGetUserDataRpgRsp : public ::google::protobuf::Message {
 public:
  TUserGetUserDataRpgRsp();
  virtual ~TUserGetUserDataRpgRsp();

  TUserGetUserDataRpgRsp(const TUserGetUserDataRpgRsp& from);

  inline TUserGetUserDataRpgRsp& operator=(const TUserGetUserDataRpgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserGetUserDataRpgRsp& default_instance();

  void Swap(TUserGetUserDataRpgRsp* other);

  // implements Message ----------------------------------------------

  TUserGetUserDataRpgRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserGetUserDataRpgRsp& from);
  void MergeFrom(const TUserGetUserDataRpgRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBaseUserData UserData = 1;
  inline bool has_userdata() const;
  inline void clear_userdata();
  static const int kUserDataFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserGetUserDataRpgRsp</name>
  	<Function>
  		<name>userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBaseUserData& userdata() const;
  inline ::pb::TBaseUserData* mutable_userdata();
  inline ::pb::TBaseUserData* release_userdata();
  inline void set_allocated_userdata(::pb::TBaseUserData* userdata);

  // optional int64 ServerTime = 2;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServerTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserGetUserDataRpgRsp</name>
  	<Function>
  		<name>servertime</name>
  		<replaceName>ServerTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_servertime</name>
  		<replaceName>ServerTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_servertime</name>
  		<replaceName>ServerTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 servertime() const;
  inline void set_servertime(::google::protobuf::int64 value);

  // optional uint32 ChannelEmailNum = 3;
  inline bool has_channelemailnum() const;
  inline void clear_channelemailnum();
  static const int kChannelEmailNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUserGetUserDataRpgRsp</name>
  	<Function>
  		<name>channelemailnum</name>
  		<replaceName>ChannelEmailNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_channelemailnum</name>
  		<replaceName>ChannelEmailNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_channelemailnum</name>
  		<replaceName>ChannelEmailNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 channelemailnum() const;
  inline void set_channelemailnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserGetUserDataRpgRsp)
 private:
  inline void set_has_userdata();
  inline void clear_has_userdata();
  inline void set_has_servertime();
  inline void clear_has_servertime();
  inline void set_has_channelemailnum();
  inline void clear_has_channelemailnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBaseUserData* userdata_;
  ::google::protobuf::int64 servertime_;
  ::google::protobuf::uint32 channelemailnum_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserGetUserDataRpgRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserUpdateUserDataRpgNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserUpdateUserDataRpgNotify : public ::google::protobuf::Message {
 public:
  TUserUpdateUserDataRpgNotify();
  virtual ~TUserUpdateUserDataRpgNotify();

  TUserUpdateUserDataRpgNotify(const TUserUpdateUserDataRpgNotify& from);

  inline TUserUpdateUserDataRpgNotify& operator=(const TUserUpdateUserDataRpgNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserUpdateUserDataRpgNotify& default_instance();

  void Swap(TUserUpdateUserDataRpgNotify* other);

  // implements Message ----------------------------------------------

  TUserUpdateUserDataRpgNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserUpdateUserDataRpgNotify& from);
  void MergeFrom(const TUserUpdateUserDataRpgNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBaseUserData UserData = 1;
  inline bool has_userdata() const;
  inline void clear_userdata();
  static const int kUserDataFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserUpdateUserDataRpgNotify</name>
  	<Function>
  		<name>userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userdata</name>
  		<replaceName>UserData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBaseUserData& userdata() const;
  inline ::pb::TBaseUserData* mutable_userdata();
  inline ::pb::TBaseUserData* release_userdata();
  inline void set_allocated_userdata(::pb::TBaseUserData* userdata);

  // @@protoc_insertion_point(class_scope:pb.TUserUpdateUserDataRpgNotify)
 private:
  inline void set_has_userdata();
  inline void clear_has_userdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBaseUserData* userdata_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserUpdateUserDataRpgNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserRecoverDataRpg</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserRecoverDataRpg : public ::google::protobuf::Message {
 public:
  TUserRecoverDataRpg();
  virtual ~TUserRecoverDataRpg();

  TUserRecoverDataRpg(const TUserRecoverDataRpg& from);

  inline TUserRecoverDataRpg& operator=(const TUserRecoverDataRpg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserRecoverDataRpg& default_instance();

  void Swap(TUserRecoverDataRpg* other);

  // implements Message ----------------------------------------------

  TUserRecoverDataRpg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserRecoverDataRpg& from);
  void MergeFrom(const TUserRecoverDataRpg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserRecoverDataRpg</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int64 Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserRecoverDataRpg</name>
  	<Function>
  		<name>value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // optional int64 RecoverTime = 3;
  inline bool has_recovertime() const;
  inline void clear_recovertime();
  static const int kRecoverTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUserRecoverDataRpg</name>
  	<Function>
  		<name>recovertime</name>
  		<replaceName>RecoverTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recovertime</name>
  		<replaceName>RecoverTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recovertime</name>
  		<replaceName>RecoverTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 recovertime() const;
  inline void set_recovertime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TUserRecoverDataRpg)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_recovertime();
  inline void clear_has_recovertime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 value_;
  ::google::protobuf::int64 recovertime_;
  ::google::protobuf::int32 tid_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserRecoverDataRpg* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserCurrencyData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserCurrencyData : public ::google::protobuf::Message {
 public:
  TUserCurrencyData();
  virtual ~TUserCurrencyData();

  TUserCurrencyData(const TUserCurrencyData& from);

  inline TUserCurrencyData& operator=(const TUserCurrencyData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserCurrencyData& default_instance();

  void Swap(TUserCurrencyData* other);

  // implements Message ----------------------------------------------

  TUserCurrencyData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserCurrencyData& from);
  void MergeFrom(const TUserCurrencyData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CurrencyType = 1;
  inline bool has_currencytype() const;
  inline void clear_currencytype();
  static const int kCurrencyTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserCurrencyData</name>
  	<Function>
  		<name>currencytype</name>
  		<replaceName>CurrencyType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_currencytype</name>
  		<replaceName>CurrencyType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_currencytype</name>
  		<replaceName>CurrencyType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 currencytype() const;
  inline void set_currencytype(::google::protobuf::uint32 value);

  // optional uint64 CurrencyNum = 2;
  inline bool has_currencynum() const;
  inline void clear_currencynum();
  static const int kCurrencyNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserCurrencyData</name>
  	<Function>
  		<name>currencynum</name>
  		<replaceName>CurrencyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_currencynum</name>
  		<replaceName>CurrencyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_currencynum</name>
  		<replaceName>CurrencyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 currencynum() const;
  inline void set_currencynum(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TUserCurrencyData)
 private:
  inline void set_has_currencytype();
  inline void clear_has_currencytype();
  inline void set_has_currencynum();
  inline void clear_has_currencynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 currencynum_;
  ::google::protobuf::uint32 currencytype_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserCurrencyData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserResourceData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserResourceData : public ::google::protobuf::Message {
 public:
  TUserResourceData();
  virtual ~TUserResourceData();

  TUserResourceData(const TUserResourceData& from);

  inline TUserResourceData& operator=(const TUserResourceData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserResourceData& default_instance();

  void Swap(TUserResourceData* other);

  // implements Message ----------------------------------------------

  TUserResourceData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserResourceData& from);
  void MergeFrom(const TUserResourceData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ResourceType = 1;
  inline bool has_resourcetype() const;
  inline void clear_resourcetype();
  static const int kResourceTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserResourceData</name>
  	<Function>
  		<name>resourcetype</name>
  		<replaceName>ResourceType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resourcetype</name>
  		<replaceName>ResourceType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resourcetype</name>
  		<replaceName>ResourceType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 resourcetype() const;
  inline void set_resourcetype(::google::protobuf::uint32 value);

  // optional uint64 ResourceNum = 2;
  inline bool has_resourcenum() const;
  inline void clear_resourcenum();
  static const int kResourceNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserResourceData</name>
  	<Function>
  		<name>resourcenum</name>
  		<replaceName>ResourceNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resourcenum</name>
  		<replaceName>ResourceNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resourcenum</name>
  		<replaceName>ResourceNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 resourcenum() const;
  inline void set_resourcenum(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TUserResourceData)
 private:
  inline void set_has_resourcetype();
  inline void clear_has_resourcetype();
  inline void set_has_resourcenum();
  inline void clear_has_resourcenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 resourcenum_;
  ::google::protobuf::uint32 resourcetype_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserResourceData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserResourceCalculateRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserResourceCalculateRsp : public ::google::protobuf::Message {
 public:
  TUserResourceCalculateRsp();
  virtual ~TUserResourceCalculateRsp();

  TUserResourceCalculateRsp(const TUserResourceCalculateRsp& from);

  inline TUserResourceCalculateRsp& operator=(const TUserResourceCalculateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserResourceCalculateRsp& default_instance();

  void Swap(TUserResourceCalculateRsp* other);

  // implements Message ----------------------------------------------

  TUserResourceCalculateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserResourceCalculateRsp& from);
  void MergeFrom(const TUserResourceCalculateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUserResourceData ResourceArray = 1;
  inline int resourcearray_size() const;
  inline void clear_resourcearray();
  static const int kResourceArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserResourceCalculateRsp</name>
  	<Function>
  		<name>resourcearray</name>
  		<replaceName>ResourceArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_resourcearray</name>
  		<replaceName>ResourceArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_resourcearray</name>
  		<replaceName>ResourceArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resourcearray</name>
  		<replaceName>ResourceArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>resourcearray_size</name>
  		<replaceName>ResourceArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserResourceData& resourcearray(int index) const;
  inline ::pb::TUserResourceData* mutable_resourcearray(int index);
  inline ::pb::TUserResourceData* add_resourcearray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserResourceData >&
      resourcearray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserResourceData >*
      mutable_resourcearray();

  // @@protoc_insertion_point(class_scope:pb.TUserResourceCalculateRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserResourceData > resourcearray_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserResourceCalculateRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserSubGoldByInnerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserSubGoldByInnerReq : public ::google::protobuf::Message {
 public:
  TUserSubGoldByInnerReq();
  virtual ~TUserSubGoldByInnerReq();

  TUserSubGoldByInnerReq(const TUserSubGoldByInnerReq& from);

  inline TUserSubGoldByInnerReq& operator=(const TUserSubGoldByInnerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserSubGoldByInnerReq& default_instance();

  void Swap(TUserSubGoldByInnerReq* other);

  // implements Message ----------------------------------------------

  TUserSubGoldByInnerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserSubGoldByInnerReq& from);
  void MergeFrom(const TUserSubGoldByInnerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SubNum = 1;
  inline bool has_subnum() const;
  inline void clear_subnum();
  static const int kSubNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserSubGoldByInnerReq</name>
  	<Function>
  		<name>subnum</name>
  		<replaceName>SubNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_subnum</name>
  		<replaceName>SubNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_subnum</name>
  		<replaceName>SubNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 subnum() const;
  inline void set_subnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserSubGoldByInnerReq)
 private:
  inline void set_has_subnum();
  inline void clear_has_subnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 subnum_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserSubGoldByInnerReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserSimpleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserSimpleInfo : public ::google::protobuf::Message {
 public:
  TUserSimpleInfo();
  virtual ~TUserSimpleInfo();

  TUserSimpleInfo(const TUserSimpleInfo& from);

  inline TUserSimpleInfo& operator=(const TUserSimpleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserSimpleInfo& default_instance();

  void Swap(TUserSimpleInfo* other);

  // implements Message ----------------------------------------------

  TUserSimpleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserSimpleInfo& from);
  void MergeFrom(const TUserSimpleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Uname = 2;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 Htid = 3;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional uint32 Level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 VipLevel = 5;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>viplevel</name>
  		<replaceName>VipLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viplevel</name>
  		<replaceName>VipLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viplevel</name>
  		<replaceName>VipLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 viplevel() const;
  inline void set_viplevel(::google::protobuf::uint32 value);

  // optional uint64 FightForce = 6;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint64 GuildId = 7;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string GuildName = 8;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional uint32 PlayerImageFrameTid = 9;
  inline bool has_playerimageframetid() const;
  inline void clear_playerimageframetid();
  static const int kPlayerImageFrameTidFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 playerimageframetid() const;
  inline void set_playerimageframetid(::google::protobuf::uint32 value);

  // optional uint32 CurMount = 10;
  inline bool has_curmount() const;
  inline void clear_curmount();
  static const int kCurMountFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>curmount</name>
  		<replaceName>CurMount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curmount</name>
  		<replaceName>CurMount</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curmount</name>
  		<replaceName>CurMount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curmount() const;
  inline void set_curmount(::google::protobuf::uint32 value);

  // optional uint32 MasterHtid = 11;
  inline bool has_masterhtid() const;
  inline void clear_masterhtid();
  static const int kMasterHtidFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>masterhtid</name>
  		<replaceName>MasterHtid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_masterhtid</name>
  		<replaceName>MasterHtid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_masterhtid</name>
  		<replaceName>MasterHtid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 masterhtid() const;
  inline void set_masterhtid(::google::protobuf::uint32 value);

  // optional uint32 Title = 12;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 title() const;
  inline void set_title(::google::protobuf::uint32 value);

  // optional uint32 PlayerModelHeroStar = 13;
  inline bool has_playermodelherostar() const;
  inline void clear_playermodelherostar();
  static const int kPlayerModelHeroStarFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>playermodelherostar</name>
  		<replaceName>PlayerModelHeroStar</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_playermodelherostar</name>
  		<replaceName>PlayerModelHeroStar</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_playermodelherostar</name>
  		<replaceName>PlayerModelHeroStar</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 playermodelherostar() const;
  inline void set_playermodelherostar(::google::protobuf::uint32 value);

  // optional string BannerName = 14;
  inline bool has_bannername() const;
  inline void clear_bannername();
  static const int kBannerNameFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& bannername() const;
  inline void set_bannername(const ::std::string& value);
  inline void set_bannername(const char* value);
  inline void set_bannername(const char* value, size_t size);
  inline ::std::string* mutable_bannername();
  inline ::std::string* release_bannername();
  inline void set_allocated_bannername(::std::string* bannername);

  // optional uint32 BannerBase = 15;
  inline bool has_bannerbase() const;
  inline void clear_bannerbase();
  static const int kBannerBaseFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bannerbase() const;
  inline void set_bannerbase(::google::protobuf::uint32 value);

  // optional uint32 IsShowVip = 16;
  inline bool has_isshowvip() const;
  inline void clear_isshowvip();
  static const int kIsShowVipFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>isshowvip</name>
  		<replaceName>IsShowVip</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isshowvip</name>
  		<replaceName>IsShowVip</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isshowvip</name>
  		<replaceName>IsShowVip</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isshowvip() const;
  inline void set_isshowvip(::google::protobuf::uint32 value);

  // optional uint32 CanStrangerChat = 17;
  inline bool has_canstrangerchat() const;
  inline void clear_canstrangerchat();
  static const int kCanStrangerChatFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>canstrangerchat</name>
  		<replaceName>CanStrangerChat</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_canstrangerchat</name>
  		<replaceName>CanStrangerChat</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_canstrangerchat</name>
  		<replaceName>CanStrangerChat</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 canstrangerchat() const;
  inline void set_canstrangerchat(::google::protobuf::uint32 value);

  // optional uint32 IsRefuseLowAdventure = 18;
  inline bool has_isrefuselowadventure() const;
  inline void clear_isrefuselowadventure();
  static const int kIsRefuseLowAdventureFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>isrefuselowadventure</name>
  		<replaceName>IsRefuseLowAdventure</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isrefuselowadventure</name>
  		<replaceName>IsRefuseLowAdventure</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isrefuselowadventure</name>
  		<replaceName>IsRefuseLowAdventure</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isrefuselowadventure() const;
  inline void set_isrefuselowadventure(::google::protobuf::uint32 value);

  // optional string ServerId = 19;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 19;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional uint32 ChatFrameTid = 20;
  inline bool has_chatframetid() const;
  inline void clear_chatframetid();
  static const int kChatFrameTidFieldNumber = 20;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>chatframetid</name>
  		<replaceName>ChatFrameTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chatframetid</name>
  		<replaceName>ChatFrameTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chatframetid</name>
  		<replaceName>ChatFrameTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chatframetid() const;
  inline void set_chatframetid(::google::protobuf::uint32 value);

  // optional uint64 MaxFightForce = 21;
  inline bool has_maxfightforce() const;
  inline void clear_maxfightforce();
  static const int kMaxFightForceFieldNumber = 21;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfo</name>
  	<Function>
  		<name>maxfightforce</name>
  		<replaceName>MaxFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxfightforce</name>
  		<replaceName>MaxFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxfightforce</name>
  		<replaceName>MaxFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxfightforce() const;
  inline void set_maxfightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TUserSimpleInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_playerimageframetid();
  inline void clear_has_playerimageframetid();
  inline void set_has_curmount();
  inline void clear_has_curmount();
  inline void set_has_masterhtid();
  inline void clear_has_masterhtid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_playermodelherostar();
  inline void clear_has_playermodelherostar();
  inline void set_has_bannername();
  inline void clear_has_bannername();
  inline void set_has_bannerbase();
  inline void clear_has_bannerbase();
  inline void set_has_isshowvip();
  inline void clear_has_isshowvip();
  inline void set_has_canstrangerchat();
  inline void clear_has_canstrangerchat();
  inline void set_has_isrefuselowadventure();
  inline void clear_has_isrefuselowadventure();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_chatframetid();
  inline void clear_has_chatframetid();
  inline void set_has_maxfightforce();
  inline void clear_has_maxfightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* uname_;
  ::google::protobuf::uint32 htid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint64 guildid_;
  ::google::protobuf::uint32 viplevel_;
  ::google::protobuf::uint32 playerimageframetid_;
  ::std::string* guildname_;
  ::google::protobuf::uint32 curmount_;
  ::google::protobuf::uint32 masterhtid_;
  ::google::protobuf::uint32 title_;
  ::google::protobuf::uint32 playermodelherostar_;
  ::std::string* bannername_;
  ::google::protobuf::uint32 bannerbase_;
  ::google::protobuf::uint32 isshowvip_;
  ::google::protobuf::uint32 canstrangerchat_;
  ::google::protobuf::uint32 isrefuselowadventure_;
  ::std::string* serverid_;
  ::google::protobuf::uint64 maxfightforce_;
  ::google::protobuf::uint32 chatframetid_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserSimpleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserSimpleInfoWithStatus</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserSimpleInfoWithStatus : public ::google::protobuf::Message {
 public:
  TUserSimpleInfoWithStatus();
  virtual ~TUserSimpleInfoWithStatus();

  TUserSimpleInfoWithStatus(const TUserSimpleInfoWithStatus& from);

  inline TUserSimpleInfoWithStatus& operator=(const TUserSimpleInfoWithStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserSimpleInfoWithStatus& default_instance();

  void Swap(TUserSimpleInfoWithStatus* other);

  // implements Message ----------------------------------------------

  TUserSimpleInfoWithStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserSimpleInfoWithStatus& from);
  void MergeFrom(const TUserSimpleInfoWithStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo SimpleInfo = 1;
  inline bool has_simpleinfo() const;
  inline void clear_simpleinfo();
  static const int kSimpleInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfoWithStatus</name>
  	<Function>
  		<name>simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& simpleinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_simpleinfo();
  inline ::pb::TUserSimpleInfo* release_simpleinfo();
  inline void set_allocated_simpleinfo(::pb::TUserSimpleInfo* simpleinfo);

  // optional uint32 Status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfoWithStatus</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional uint64 LogoffTime = 3;
  inline bool has_logofftime() const;
  inline void clear_logofftime();
  static const int kLogoffTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfoWithStatus</name>
  	<Function>
  		<name>logofftime</name>
  		<replaceName>LogoffTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_logofftime</name>
  		<replaceName>LogoffTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_logofftime</name>
  		<replaceName>LogoffTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 logofftime() const;
  inline void set_logofftime(::google::protobuf::uint64 value);

  // optional string SignWords = 4;
  inline bool has_signwords() const;
  inline void clear_signwords();
  static const int kSignWordsFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfoWithStatus</name>
  	<Function>
  		<name>signwords</name>
  		<replaceName>SignWords</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_signwords</name>
  		<replaceName>SignWords</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signwords</name>
  		<replaceName>SignWords</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& signwords() const;
  inline void set_signwords(const ::std::string& value);
  inline void set_signwords(const char* value);
  inline void set_signwords(const char* value, size_t size);
  inline ::std::string* mutable_signwords();
  inline ::std::string* release_signwords();
  inline void set_allocated_signwords(::std::string* signwords);

  // @@protoc_insertion_point(class_scope:pb.TUserSimpleInfoWithStatus)
 private:
  inline void set_has_simpleinfo();
  inline void clear_has_simpleinfo();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_logofftime();
  inline void clear_has_logofftime();
  inline void set_has_signwords();
  inline void clear_has_signwords();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* simpleinfo_;
  ::google::protobuf::uint64 logofftime_;
  ::std::string* signwords_;
  ::google::protobuf::uint32 status_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserSimpleInfoWithStatus* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserSimpleInfoWithAlly</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserSimpleInfoWithAlly : public ::google::protobuf::Message {
 public:
  TUserSimpleInfoWithAlly();
  virtual ~TUserSimpleInfoWithAlly();

  TUserSimpleInfoWithAlly(const TUserSimpleInfoWithAlly& from);

  inline TUserSimpleInfoWithAlly& operator=(const TUserSimpleInfoWithAlly& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserSimpleInfoWithAlly& default_instance();

  void Swap(TUserSimpleInfoWithAlly* other);

  // implements Message ----------------------------------------------

  TUserSimpleInfoWithAlly* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserSimpleInfoWithAlly& from);
  void MergeFrom(const TUserSimpleInfoWithAlly& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo SimpleInfo = 1;
  inline bool has_simpleinfo() const;
  inline void clear_simpleinfo();
  static const int kSimpleInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfoWithAlly</name>
  	<Function>
  		<name>simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& simpleinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_simpleinfo();
  inline ::pb::TUserSimpleInfo* release_simpleinfo();
  inline void set_allocated_simpleinfo(::pb::TUserSimpleInfo* simpleinfo);

  // optional string AllyName = 2;
  inline bool has_allyname() const;
  inline void clear_allyname();
  static const int kAllyNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfoWithAlly</name>
  	<Function>
  		<name>allyname</name>
  		<replaceName>AllyName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allyname</name>
  		<replaceName>AllyName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allyname</name>
  		<replaceName>AllyName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& allyname() const;
  inline void set_allyname(const ::std::string& value);
  inline void set_allyname(const char* value);
  inline void set_allyname(const char* value, size_t size);
  inline ::std::string* mutable_allyname();
  inline ::std::string* release_allyname();
  inline void set_allocated_allyname(::std::string* allyname);

  // optional uint64 AllyId = 3;
  inline bool has_allyid() const;
  inline void clear_allyid();
  static const int kAllyIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfoWithAlly</name>
  	<Function>
  		<name>allyid</name>
  		<replaceName>AllyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allyid</name>
  		<replaceName>AllyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allyid</name>
  		<replaceName>AllyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 allyid() const;
  inline void set_allyid(::google::protobuf::uint64 value);

  // optional string BannerName = 4;
  inline bool has_bannername() const;
  inline void clear_bannername();
  static const int kBannerNameFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfoWithAlly</name>
  	<Function>
  		<name>bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& bannername() const;
  inline void set_bannername(const ::std::string& value);
  inline void set_bannername(const char* value);
  inline void set_bannername(const char* value, size_t size);
  inline ::std::string* mutable_bannername();
  inline ::std::string* release_bannername();
  inline void set_allocated_bannername(::std::string* bannername);

  // optional uint32 BannerBase = 5;
  inline bool has_bannerbase() const;
  inline void clear_bannerbase();
  static const int kBannerBaseFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfoWithAlly</name>
  	<Function>
  		<name>bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bannerbase() const;
  inline void set_bannerbase(::google::protobuf::uint32 value);

  // optional uint32 BannerFigure = 6;
  inline bool has_bannerfigure() const;
  inline void clear_bannerfigure();
  static const int kBannerFigureFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfoWithAlly</name>
  	<Function>
  		<name>bannerfigure</name>
  		<replaceName>BannerFigure</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannerfigure</name>
  		<replaceName>BannerFigure</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannerfigure</name>
  		<replaceName>BannerFigure</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bannerfigure() const;
  inline void set_bannerfigure(::google::protobuf::uint32 value);

  // optional uint64 FightForce = 7;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TUserSimpleInfoWithAlly</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TUserSimpleInfoWithAlly)
 private:
  inline void set_has_simpleinfo();
  inline void clear_has_simpleinfo();
  inline void set_has_allyname();
  inline void clear_has_allyname();
  inline void set_has_allyid();
  inline void clear_has_allyid();
  inline void set_has_bannername();
  inline void clear_has_bannername();
  inline void set_has_bannerbase();
  inline void clear_has_bannerbase();
  inline void set_has_bannerfigure();
  inline void clear_has_bannerfigure();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* simpleinfo_;
  ::std::string* allyname_;
  ::google::protobuf::uint64 allyid_;
  ::std::string* bannername_;
  ::google::protobuf::uint32 bannerbase_;
  ::google::protobuf::uint32 bannerfigure_;
  ::google::protobuf::uint64 fightforce_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserSimpleInfoWithAlly* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserGetArrUserDataRpgReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserGetArrUserDataRpgReq : public ::google::protobuf::Message {
 public:
  TUserGetArrUserDataRpgReq();
  virtual ~TUserGetArrUserDataRpgReq();

  TUserGetArrUserDataRpgReq(const TUserGetArrUserDataRpgReq& from);

  inline TUserGetArrUserDataRpgReq& operator=(const TUserGetArrUserDataRpgReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserGetArrUserDataRpgReq& default_instance();

  void Swap(TUserGetArrUserDataRpgReq* other);

  // implements Message ----------------------------------------------

  TUserGetArrUserDataRpgReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserGetArrUserDataRpgReq& from);
  void MergeFrom(const TUserGetArrUserDataRpgReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 UidArray = 1;
  inline int uidarray_size() const;
  inline void clear_uidarray();
  static const int kUidArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserGetArrUserDataRpgReq</name>
  	<Function>
  		<name>uidarray</name>
  		<replaceName>UidArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_uidarray</name>
  		<replaceName>UidArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_uidarray</name>
  		<replaceName>UidArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uidarray</name>
  		<replaceName>UidArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>uidarray_size</name>
  		<replaceName>UidArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uidarray(int index) const;
  inline void set_uidarray(int index, ::google::protobuf::uint64 value);
  inline void add_uidarray(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uidarray() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uidarray();

  // @@protoc_insertion_point(class_scope:pb.TUserGetArrUserDataRpgReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uidarray_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserGetArrUserDataRpgReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserGetArrUserDataRpgRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserGetArrUserDataRpgRsp : public ::google::protobuf::Message {
 public:
  TUserGetArrUserDataRpgRsp();
  virtual ~TUserGetArrUserDataRpgRsp();

  TUserGetArrUserDataRpgRsp(const TUserGetArrUserDataRpgRsp& from);

  inline TUserGetArrUserDataRpgRsp& operator=(const TUserGetArrUserDataRpgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserGetArrUserDataRpgRsp& default_instance();

  void Swap(TUserGetArrUserDataRpgRsp* other);

  // implements Message ----------------------------------------------

  TUserGetArrUserDataRpgRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserGetArrUserDataRpgRsp& from);
  void MergeFrom(const TUserGetArrUserDataRpgRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUserSimpleInfo UserDataArray = 1;
  inline int userdataarray_size() const;
  inline void clear_userdataarray();
  static const int kUserDataArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserGetArrUserDataRpgRsp</name>
  	<Function>
  		<name>userdataarray</name>
  		<replaceName>UserDataArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userdataarray</name>
  		<replaceName>UserDataArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userdataarray</name>
  		<replaceName>UserDataArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userdataarray</name>
  		<replaceName>UserDataArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userdataarray_size</name>
  		<replaceName>UserDataArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userdataarray(int index) const;
  inline ::pb::TUserSimpleInfo* mutable_userdataarray(int index);
  inline ::pb::TUserSimpleInfo* add_userdataarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
      userdataarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
      mutable_userdataarray();

  // @@protoc_insertion_point(class_scope:pb.TUserGetArrUserDataRpgRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo > userdataarray_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserGetArrUserDataRpgRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserFightForceRankItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserFightForceRankItem : public ::google::protobuf::Message {
 public:
  TUserFightForceRankItem();
  virtual ~TUserFightForceRankItem();

  TUserFightForceRankItem(const TUserFightForceRankItem& from);

  inline TUserFightForceRankItem& operator=(const TUserFightForceRankItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserFightForceRankItem& default_instance();

  void Swap(TUserFightForceRankItem* other);

  // implements Message ----------------------------------------------

  TUserFightForceRankItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserFightForceRankItem& from);
  void MergeFrom(const TUserFightForceRankItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserFightForceRankItem</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // @@protoc_insertion_point(class_scope:pb.TUserFightForceRankItem)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserFightForceRankItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserFightForceRankReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserFightForceRankReq : public ::google::protobuf::Message {
 public:
  TUserFightForceRankReq();
  virtual ~TUserFightForceRankReq();

  TUserFightForceRankReq(const TUserFightForceRankReq& from);

  inline TUserFightForceRankReq& operator=(const TUserFightForceRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserFightForceRankReq& default_instance();

  void Swap(TUserFightForceRankReq* other);

  // implements Message ----------------------------------------------

  TUserFightForceRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserFightForceRankReq& from);
  void MergeFrom(const TUserFightForceRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserFightForceRankReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // optional int32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserFightForceRankReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserFightForceRankReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 limit_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserFightForceRankReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserFightForceRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserFightForceRankRsp : public ::google::protobuf::Message {
 public:
  TUserFightForceRankRsp();
  virtual ~TUserFightForceRankRsp();

  TUserFightForceRankRsp(const TUserFightForceRankRsp& from);

  inline TUserFightForceRankRsp& operator=(const TUserFightForceRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserFightForceRankRsp& default_instance();

  void Swap(TUserFightForceRankRsp* other);

  // implements Message ----------------------------------------------

  TUserFightForceRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserFightForceRankRsp& from);
  void MergeFrom(const TUserFightForceRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUserFightForceRankItem RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserFightForceRankRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserFightForceRankItem& rankarr(int index) const;
  inline ::pb::TUserFightForceRankItem* mutable_rankarr(int index);
  inline ::pb::TUserFightForceRankItem* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserFightForceRankItem >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserFightForceRankItem >*
      mutable_rankarr();

  // optional int32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserFightForceRankRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserFightForceRankRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserFightForceRankItem > rankarr_;
  ::google::protobuf::int32 myrank_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserFightForceRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserLevelRankItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserLevelRankItem : public ::google::protobuf::Message {
 public:
  TUserLevelRankItem();
  virtual ~TUserLevelRankItem();

  TUserLevelRankItem(const TUserLevelRankItem& from);

  inline TUserLevelRankItem& operator=(const TUserLevelRankItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserLevelRankItem& default_instance();

  void Swap(TUserLevelRankItem* other);

  // implements Message ----------------------------------------------

  TUserLevelRankItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserLevelRankItem& from);
  void MergeFrom(const TUserLevelRankItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserLevelRankItem</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 Exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserLevelRankItem</name>
  	<Function>
  		<name>exp</name>
  		<replaceName>Exp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_exp</name>
  		<replaceName>Exp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exp</name>
  		<replaceName>Exp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint64 ExpChangeTime = 3;
  inline bool has_expchangetime() const;
  inline void clear_expchangetime();
  static const int kExpChangeTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUserLevelRankItem</name>
  	<Function>
  		<name>expchangetime</name>
  		<replaceName>ExpChangeTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_expchangetime</name>
  		<replaceName>ExpChangeTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_expchangetime</name>
  		<replaceName>ExpChangeTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 expchangetime() const;
  inline void set_expchangetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TUserLevelRankItem)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_expchangetime();
  inline void clear_has_expchangetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint64 expchangetime_;
  ::google::protobuf::uint32 exp_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserLevelRankItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserLevelRankReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserLevelRankReq : public ::google::protobuf::Message {
 public:
  TUserLevelRankReq();
  virtual ~TUserLevelRankReq();

  TUserLevelRankReq(const TUserLevelRankReq& from);

  inline TUserLevelRankReq& operator=(const TUserLevelRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserLevelRankReq& default_instance();

  void Swap(TUserLevelRankReq* other);

  // implements Message ----------------------------------------------

  TUserLevelRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserLevelRankReq& from);
  void MergeFrom(const TUserLevelRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserLevelRankReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // optional int32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserLevelRankReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserLevelRankReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 limit_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserLevelRankReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserLevelRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserLevelRankRsp : public ::google::protobuf::Message {
 public:
  TUserLevelRankRsp();
  virtual ~TUserLevelRankRsp();

  TUserLevelRankRsp(const TUserLevelRankRsp& from);

  inline TUserLevelRankRsp& operator=(const TUserLevelRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserLevelRankRsp& default_instance();

  void Swap(TUserLevelRankRsp* other);

  // implements Message ----------------------------------------------

  TUserLevelRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserLevelRankRsp& from);
  void MergeFrom(const TUserLevelRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUserLevelRankItem RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserLevelRankRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserLevelRankItem& rankarr(int index) const;
  inline ::pb::TUserLevelRankItem* mutable_rankarr(int index);
  inline ::pb::TUserLevelRankItem* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserLevelRankItem >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserLevelRankItem >*
      mutable_rankarr();

  // optional int32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserLevelRankRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserLevelRankRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserLevelRankItem > rankarr_;
  ::google::protobuf::int32 myrank_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserLevelRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserSetPlayerImageReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserSetPlayerImageReq : public ::google::protobuf::Message {
 public:
  TUserSetPlayerImageReq();
  virtual ~TUserSetPlayerImageReq();

  TUserSetPlayerImageReq(const TUserSetPlayerImageReq& from);

  inline TUserSetPlayerImageReq& operator=(const TUserSetPlayerImageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserSetPlayerImageReq& default_instance();

  void Swap(TUserSetPlayerImageReq* other);

  // implements Message ----------------------------------------------

  TUserSetPlayerImageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserSetPlayerImageReq& from);
  void MergeFrom(const TUserSetPlayerImageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 PlayerImageFrameTid = 1;
  inline bool has_playerimageframetid() const;
  inline void clear_playerimageframetid();
  static const int kPlayerImageFrameTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserSetPlayerImageReq</name>
  	<Function>
  		<name>playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 playerimageframetid() const;
  inline void set_playerimageframetid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserSetPlayerImageReq)
 private:
  inline void set_has_playerimageframetid();
  inline void clear_has_playerimageframetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 playerimageframetid_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserSetPlayerImageReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserSetSignWordsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserSetSignWordsReq : public ::google::protobuf::Message {
 public:
  TUserSetSignWordsReq();
  virtual ~TUserSetSignWordsReq();

  TUserSetSignWordsReq(const TUserSetSignWordsReq& from);

  inline TUserSetSignWordsReq& operator=(const TUserSetSignWordsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserSetSignWordsReq& default_instance();

  void Swap(TUserSetSignWordsReq* other);

  // implements Message ----------------------------------------------

  TUserSetSignWordsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserSetSignWordsReq& from);
  void MergeFrom(const TUserSetSignWordsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string SignWords = 1;
  inline bool has_signwords() const;
  inline void clear_signwords();
  static const int kSignWordsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserSetSignWordsReq</name>
  	<Function>
  		<name>signwords</name>
  		<replaceName>SignWords</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_signwords</name>
  		<replaceName>SignWords</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signwords</name>
  		<replaceName>SignWords</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& signwords() const;
  inline void set_signwords(const ::std::string& value);
  inline void set_signwords(const char* value);
  inline void set_signwords(const char* value, size_t size);
  inline ::std::string* mutable_signwords();
  inline ::std::string* release_signwords();
  inline void set_allocated_signwords(::std::string* signwords);

  // @@protoc_insertion_point(class_scope:pb.TUserSetSignWordsReq)
 private:
  inline void set_has_signwords();
  inline void clear_has_signwords();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* signwords_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserSetSignWordsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserSetModelReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserSetModelReq : public ::google::protobuf::Message {
 public:
  TUserSetModelReq();
  virtual ~TUserSetModelReq();

  TUserSetModelReq(const TUserSetModelReq& from);

  inline TUserSetModelReq& operator=(const TUserSetModelReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserSetModelReq& default_instance();

  void Swap(TUserSetModelReq* other);

  // implements Message ----------------------------------------------

  TUserSetModelReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserSetModelReq& from);
  void MergeFrom(const TUserSetModelReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Htid = 1;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserSetModelReq</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 htid() const;
  inline void set_htid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserSetModelReq)
 private:
  inline void set_has_htid();
  inline void clear_has_htid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 htid_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserSetModelReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserChangeUnameReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserChangeUnameReq : public ::google::protobuf::Message {
 public:
  TUserChangeUnameReq();
  virtual ~TUserChangeUnameReq();

  TUserChangeUnameReq(const TUserChangeUnameReq& from);

  inline TUserChangeUnameReq& operator=(const TUserChangeUnameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserChangeUnameReq& default_instance();

  void Swap(TUserChangeUnameReq* other);

  // implements Message ----------------------------------------------

  TUserChangeUnameReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserChangeUnameReq& from);
  void MergeFrom(const TUserChangeUnameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Uname = 1;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserChangeUnameReq</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 NameType = 2;
  inline bool has_nametype() const;
  inline void clear_nametype();
  static const int kNameTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserChangeUnameReq</name>
  	<Function>
  		<name>nametype</name>
  		<replaceName>NameType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_nametype</name>
  		<replaceName>NameType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nametype</name>
  		<replaceName>NameType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 nametype() const;
  inline void set_nametype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserChangeUnameReq)
 private:
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_nametype();
  inline void clear_has_nametype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uname_;
  ::google::protobuf::uint32 nametype_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserChangeUnameReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserBuySilverCoinReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserBuySilverCoinReq : public ::google::protobuf::Message {
 public:
  TUserBuySilverCoinReq();
  virtual ~TUserBuySilverCoinReq();

  TUserBuySilverCoinReq(const TUserBuySilverCoinReq& from);

  inline TUserBuySilverCoinReq& operator=(const TUserBuySilverCoinReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserBuySilverCoinReq& default_instance();

  void Swap(TUserBuySilverCoinReq* other);

  // implements Message ----------------------------------------------

  TUserBuySilverCoinReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserBuySilverCoinReq& from);
  void MergeFrom(const TUserBuySilverCoinReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 HasBuyNum = 1;
  inline bool has_hasbuynum() const;
  inline void clear_hasbuynum();
  static const int kHasBuyNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserBuySilverCoinReq</name>
  	<Function>
  		<name>hasbuynum</name>
  		<replaceName>HasBuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hasbuynum</name>
  		<replaceName>HasBuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hasbuynum</name>
  		<replaceName>HasBuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hasbuynum() const;
  inline void set_hasbuynum(::google::protobuf::int32 value);

  // optional int32 HasFreeNum = 2;
  inline bool has_hasfreenum() const;
  inline void clear_hasfreenum();
  static const int kHasFreeNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserBuySilverCoinReq</name>
  	<Function>
  		<name>hasfreenum</name>
  		<replaceName>HasFreeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hasfreenum</name>
  		<replaceName>HasFreeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hasfreenum</name>
  		<replaceName>HasFreeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hasfreenum() const;
  inline void set_hasfreenum(::google::protobuf::int32 value);

  // optional int32 WantBuyNum = 3;
  inline bool has_wantbuynum() const;
  inline void clear_wantbuynum();
  static const int kWantBuyNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUserBuySilverCoinReq</name>
  	<Function>
  		<name>wantbuynum</name>
  		<replaceName>WantBuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_wantbuynum</name>
  		<replaceName>WantBuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_wantbuynum</name>
  		<replaceName>WantBuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 wantbuynum() const;
  inline void set_wantbuynum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserBuySilverCoinReq)
 private:
  inline void set_has_hasbuynum();
  inline void clear_has_hasbuynum();
  inline void set_has_hasfreenum();
  inline void clear_has_hasfreenum();
  inline void set_has_wantbuynum();
  inline void clear_has_wantbuynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 hasbuynum_;
  ::google::protobuf::int32 hasfreenum_;
  ::google::protobuf::int32 wantbuynum_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserBuySilverCoinReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserBuySilverCoinSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserBuySilverCoinSingle : public ::google::protobuf::Message {
 public:
  TUserBuySilverCoinSingle();
  virtual ~TUserBuySilverCoinSingle();

  TUserBuySilverCoinSingle(const TUserBuySilverCoinSingle& from);

  inline TUserBuySilverCoinSingle& operator=(const TUserBuySilverCoinSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserBuySilverCoinSingle& default_instance();

  void Swap(TUserBuySilverCoinSingle* other);

  // implements Message ----------------------------------------------

  TUserBuySilverCoinSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserBuySilverCoinSingle& from);
  void MergeFrom(const TUserBuySilverCoinSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 CostGoldNum = 1;
  inline bool has_costgoldnum() const;
  inline void clear_costgoldnum();
  static const int kCostGoldNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserBuySilverCoinSingle</name>
  	<Function>
  		<name>costgoldnum</name>
  		<replaceName>CostGoldNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_costgoldnum</name>
  		<replaceName>CostGoldNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_costgoldnum</name>
  		<replaceName>CostGoldNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 costgoldnum() const;
  inline void set_costgoldnum(::google::protobuf::int32 value);

  // optional int32 BuySilverCoinNum = 2;
  inline bool has_buysilvercoinnum() const;
  inline void clear_buysilvercoinnum();
  static const int kBuySilverCoinNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserBuySilverCoinSingle</name>
  	<Function>
  		<name>buysilvercoinnum</name>
  		<replaceName>BuySilverCoinNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buysilvercoinnum</name>
  		<replaceName>BuySilverCoinNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buysilvercoinnum</name>
  		<replaceName>BuySilverCoinNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 buysilvercoinnum() const;
  inline void set_buysilvercoinnum(::google::protobuf::int32 value);

  // optional int32 Multiple = 3;
  inline bool has_multiple() const;
  inline void clear_multiple();
  static const int kMultipleFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUserBuySilverCoinSingle</name>
  	<Function>
  		<name>multiple</name>
  		<replaceName>Multiple</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_multiple</name>
  		<replaceName>Multiple</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_multiple</name>
  		<replaceName>Multiple</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 multiple() const;
  inline void set_multiple(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserBuySilverCoinSingle)
 private:
  inline void set_has_costgoldnum();
  inline void clear_has_costgoldnum();
  inline void set_has_buysilvercoinnum();
  inline void clear_has_buysilvercoinnum();
  inline void set_has_multiple();
  inline void clear_has_multiple();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 costgoldnum_;
  ::google::protobuf::int32 buysilvercoinnum_;
  ::google::protobuf::int32 multiple_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserBuySilverCoinSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserBuySilverCoinRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserBuySilverCoinRsp : public ::google::protobuf::Message {
 public:
  TUserBuySilverCoinRsp();
  virtual ~TUserBuySilverCoinRsp();

  TUserBuySilverCoinRsp(const TUserBuySilverCoinRsp& from);

  inline TUserBuySilverCoinRsp& operator=(const TUserBuySilverCoinRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserBuySilverCoinRsp& default_instance();

  void Swap(TUserBuySilverCoinRsp* other);

  // implements Message ----------------------------------------------

  TUserBuySilverCoinRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserBuySilverCoinRsp& from);
  void MergeFrom(const TUserBuySilverCoinRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 HasBuyNum = 1;
  inline bool has_hasbuynum() const;
  inline void clear_hasbuynum();
  static const int kHasBuyNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserBuySilverCoinRsp</name>
  	<Function>
  		<name>hasbuynum</name>
  		<replaceName>HasBuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hasbuynum</name>
  		<replaceName>HasBuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hasbuynum</name>
  		<replaceName>HasBuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hasbuynum() const;
  inline void set_hasbuynum(::google::protobuf::int32 value);

  // optional int32 HasFreeNum = 2;
  inline bool has_hasfreenum() const;
  inline void clear_hasfreenum();
  static const int kHasFreeNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserBuySilverCoinRsp</name>
  	<Function>
  		<name>hasfreenum</name>
  		<replaceName>HasFreeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hasfreenum</name>
  		<replaceName>HasFreeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hasfreenum</name>
  		<replaceName>HasFreeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hasfreenum() const;
  inline void set_hasfreenum(::google::protobuf::int32 value);

  // repeated .pb.TUserBuySilverCoinSingle BuyInfoArr = 3;
  inline int buyinfoarr_size() const;
  inline void clear_buyinfoarr();
  static const int kBuyInfoArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUserBuySilverCoinRsp</name>
  	<Function>
  		<name>buyinfoarr</name>
  		<replaceName>BuyInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buyinfoarr</name>
  		<replaceName>BuyInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buyinfoarr</name>
  		<replaceName>BuyInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buyinfoarr</name>
  		<replaceName>BuyInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buyinfoarr_size</name>
  		<replaceName>BuyInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserBuySilverCoinSingle& buyinfoarr(int index) const;
  inline ::pb::TUserBuySilverCoinSingle* mutable_buyinfoarr(int index);
  inline ::pb::TUserBuySilverCoinSingle* add_buyinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserBuySilverCoinSingle >&
      buyinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserBuySilverCoinSingle >*
      mutable_buyinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TUserBuySilverCoinRsp)
 private:
  inline void set_has_hasbuynum();
  inline void clear_has_hasbuynum();
  inline void set_has_hasfreenum();
  inline void clear_has_hasfreenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 hasbuynum_;
  ::google::protobuf::int32 hasfreenum_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserBuySilverCoinSingle > buyinfoarr_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserBuySilverCoinRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserBuyExecuteReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserBuyExecuteReq : public ::google::protobuf::Message {
 public:
  TUserBuyExecuteReq();
  virtual ~TUserBuyExecuteReq();

  TUserBuyExecuteReq(const TUserBuyExecuteReq& from);

  inline TUserBuyExecuteReq& operator=(const TUserBuyExecuteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserBuyExecuteReq& default_instance();

  void Swap(TUserBuyExecuteReq* other);

  // implements Message ----------------------------------------------

  TUserBuyExecuteReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserBuyExecuteReq& from);
  void MergeFrom(const TUserBuyExecuteReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 HasBuyNum = 1;
  inline bool has_hasbuynum() const;
  inline void clear_hasbuynum();
  static const int kHasBuyNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserBuyExecuteReq</name>
  	<Function>
  		<name>hasbuynum</name>
  		<replaceName>HasBuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hasbuynum</name>
  		<replaceName>HasBuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hasbuynum</name>
  		<replaceName>HasBuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hasbuynum() const;
  inline void set_hasbuynum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserBuyExecuteReq)
 private:
  inline void set_has_hasbuynum();
  inline void clear_has_hasbuynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 hasbuynum_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserBuyExecuteReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserGetRandomNameArrReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserGetRandomNameArrReq : public ::google::protobuf::Message {
 public:
  TUserGetRandomNameArrReq();
  virtual ~TUserGetRandomNameArrReq();

  TUserGetRandomNameArrReq(const TUserGetRandomNameArrReq& from);

  inline TUserGetRandomNameArrReq& operator=(const TUserGetRandomNameArrReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserGetRandomNameArrReq& default_instance();

  void Swap(TUserGetRandomNameArrReq* other);

  // implements Message ----------------------------------------------

  TUserGetRandomNameArrReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserGetRandomNameArrReq& from);
  void MergeFrom(const TUserGetRandomNameArrReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Gender = 1;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserGetRandomNameArrReq</name>
  	<Function>
  		<name>gender</name>
  		<replaceName>Gender</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gender</name>
  		<replaceName>Gender</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gender</name>
  		<replaceName>Gender</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);

  // optional uint32 CsvType = 2;
  inline bool has_csvtype() const;
  inline void clear_csvtype();
  static const int kCsvTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserGetRandomNameArrReq</name>
  	<Function>
  		<name>csvtype</name>
  		<replaceName>CsvType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_csvtype</name>
  		<replaceName>CsvType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_csvtype</name>
  		<replaceName>CsvType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 csvtype() const;
  inline void set_csvtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserGetRandomNameArrReq)
 private:
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_csvtype();
  inline void clear_has_csvtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gender_;
  ::google::protobuf::uint32 csvtype_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserGetRandomNameArrReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserGetRandomNameArrRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserGetRandomNameArrRsp : public ::google::protobuf::Message {
 public:
  TUserGetRandomNameArrRsp();
  virtual ~TUserGetRandomNameArrRsp();

  TUserGetRandomNameArrRsp(const TUserGetRandomNameArrRsp& from);

  inline TUserGetRandomNameArrRsp& operator=(const TUserGetRandomNameArrRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserGetRandomNameArrRsp& default_instance();

  void Swap(TUserGetRandomNameArrRsp* other);

  // implements Message ----------------------------------------------

  TUserGetRandomNameArrRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserGetRandomNameArrRsp& from);
  void MergeFrom(const TUserGetRandomNameArrRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string RandomNameArr = 1;
  inline int randomnamearr_size() const;
  inline void clear_randomnamearr();
  static const int kRandomNameArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserGetRandomNameArrRsp</name>
  	<Function>
  		<name>randomnamearr</name>
  		<replaceName>RandomNameArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_randomnamearr</name>
  		<replaceName>RandomNameArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_randomnamearr</name>
  		<replaceName>RandomNameArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_randomnamearr</name>
  		<replaceName>RandomNameArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>randomnamearr_size</name>
  		<replaceName>RandomNameArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& randomnamearr(int index) const;
  inline ::std::string* mutable_randomnamearr(int index);
  inline void set_randomnamearr(int index, const ::std::string& value);
  inline void set_randomnamearr(int index, const char* value);
  inline void set_randomnamearr(int index, const char* value, size_t size);
  inline ::std::string* add_randomnamearr();
  inline void add_randomnamearr(const ::std::string& value);
  inline void add_randomnamearr(const char* value);
  inline void add_randomnamearr(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& randomnamearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_randomnamearr();

  // @@protoc_insertion_point(class_scope:pb.TUserGetRandomNameArrRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> randomnamearr_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserGetRandomNameArrRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserGetGuildWarUserSyncInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserGetGuildWarUserSyncInfoRsp : public ::google::protobuf::Message {
 public:
  TUserGetGuildWarUserSyncInfoRsp();
  virtual ~TUserGetGuildWarUserSyncInfoRsp();

  TUserGetGuildWarUserSyncInfoRsp(const TUserGetGuildWarUserSyncInfoRsp& from);

  inline TUserGetGuildWarUserSyncInfoRsp& operator=(const TUserGetGuildWarUserSyncInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserGetGuildWarUserSyncInfoRsp& default_instance();

  void Swap(TUserGetGuildWarUserSyncInfoRsp* other);

  // implements Message ----------------------------------------------

  TUserGetGuildWarUserSyncInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserGetGuildWarUserSyncInfoRsp& from);
  void MergeFrom(const TUserGetGuildWarUserSyncInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserGetGuildWarUserSyncInfoRsp</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional .pb.TArmyInfo ArmyInfo = 2;
  inline bool has_armyinfo() const;
  inline void clear_armyinfo();
  static const int kArmyInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserGetGuildWarUserSyncInfoRsp</name>
  	<Function>
  		<name>armyinfo</name>
  		<replaceName>ArmyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_armyinfo</name>
  		<replaceName>ArmyInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_armyinfo</name>
  		<replaceName>ArmyInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armyinfo</name>
  		<replaceName>ArmyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyInfo& armyinfo() const;
  inline ::pb::TArmyInfo* mutable_armyinfo();
  inline ::pb::TArmyInfo* release_armyinfo();
  inline void set_allocated_armyinfo(::pb::TArmyInfo* armyinfo);

  // @@protoc_insertion_point(class_scope:pb.TUserGetGuildWarUserSyncInfoRsp)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_armyinfo();
  inline void clear_has_armyinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::pb::TArmyInfo* armyinfo_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserGetGuildWarUserSyncInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserExchangeGenderReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserExchangeGenderReq : public ::google::protobuf::Message {
 public:
  TUserExchangeGenderReq();
  virtual ~TUserExchangeGenderReq();

  TUserExchangeGenderReq(const TUserExchangeGenderReq& from);

  inline TUserExchangeGenderReq& operator=(const TUserExchangeGenderReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserExchangeGenderReq& default_instance();

  void Swap(TUserExchangeGenderReq* other);

  // implements Message ----------------------------------------------

  TUserExchangeGenderReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserExchangeGenderReq& from);
  void MergeFrom(const TUserExchangeGenderReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Gender = 1;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserExchangeGenderReq</name>
  	<Function>
  		<name>gender</name>
  		<replaceName>Gender</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gender</name>
  		<replaceName>Gender</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gender</name>
  		<replaceName>Gender</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserExchangeGenderReq)
 private:
  inline void set_has_gender();
  inline void clear_has_gender();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gender_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserExchangeGenderReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserUgcMessageBeLiked</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserUgcMessageBeLiked : public ::google::protobuf::Message {
 public:
  TUserUgcMessageBeLiked();
  virtual ~TUserUgcMessageBeLiked();

  TUserUgcMessageBeLiked(const TUserUgcMessageBeLiked& from);

  inline TUserUgcMessageBeLiked& operator=(const TUserUgcMessageBeLiked& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserUgcMessageBeLiked& default_instance();

  void Swap(TUserUgcMessageBeLiked* other);

  // implements Message ----------------------------------------------

  TUserUgcMessageBeLiked* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserUgcMessageBeLiked& from);
  void MergeFrom(const TUserUgcMessageBeLiked& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 LikedUid = 1;
  inline bool has_likeduid() const;
  inline void clear_likeduid();
  static const int kLikedUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserUgcMessageBeLiked</name>
  	<Function>
  		<name>likeduid</name>
  		<replaceName>LikedUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_likeduid</name>
  		<replaceName>LikedUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_likeduid</name>
  		<replaceName>LikedUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 likeduid() const;
  inline void set_likeduid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TUserUgcMessageBeLiked)
 private:
  inline void set_has_likeduid();
  inline void clear_has_likeduid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 likeduid_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserUgcMessageBeLiked* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserFightForceChangeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserFightForceChangeReq : public ::google::protobuf::Message {
 public:
  TUserFightForceChangeReq();
  virtual ~TUserFightForceChangeReq();

  TUserFightForceChangeReq(const TUserFightForceChangeReq& from);

  inline TUserFightForceChangeReq& operator=(const TUserFightForceChangeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserFightForceChangeReq& default_instance();

  void Swap(TUserFightForceChangeReq* other);

  // implements Message ----------------------------------------------

  TUserFightForceChangeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserFightForceChangeReq& from);
  void MergeFrom(const TUserFightForceChangeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TUserFightForceChangeReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserFightForceChangeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserUgcGetArrUserDataRpgReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserUgcGetArrUserDataRpgReq : public ::google::protobuf::Message {
 public:
  TUserUgcGetArrUserDataRpgReq();
  virtual ~TUserUgcGetArrUserDataRpgReq();

  TUserUgcGetArrUserDataRpgReq(const TUserUgcGetArrUserDataRpgReq& from);

  inline TUserUgcGetArrUserDataRpgReq& operator=(const TUserUgcGetArrUserDataRpgReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserUgcGetArrUserDataRpgReq& default_instance();

  void Swap(TUserUgcGetArrUserDataRpgReq* other);

  // implements Message ----------------------------------------------

  TUserUgcGetArrUserDataRpgReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserUgcGetArrUserDataRpgReq& from);
  void MergeFrom(const TUserUgcGetArrUserDataRpgReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 UidArray = 1;
  inline int uidarray_size() const;
  inline void clear_uidarray();
  static const int kUidArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserUgcGetArrUserDataRpgReq</name>
  	<Function>
  		<name>uidarray</name>
  		<replaceName>UidArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_uidarray</name>
  		<replaceName>UidArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_uidarray</name>
  		<replaceName>UidArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uidarray</name>
  		<replaceName>UidArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>uidarray_size</name>
  		<replaceName>UidArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uidarray(int index) const;
  inline void set_uidarray(int index, ::google::protobuf::uint64 value);
  inline void add_uidarray(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uidarray() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uidarray();

  // @@protoc_insertion_point(class_scope:pb.TUserUgcGetArrUserDataRpgReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uidarray_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserUgcGetArrUserDataRpgReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserUgcSimpleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserUgcSimpleInfo : public ::google::protobuf::Message {
 public:
  TUserUgcSimpleInfo();
  virtual ~TUserUgcSimpleInfo();

  TUserUgcSimpleInfo(const TUserUgcSimpleInfo& from);

  inline TUserUgcSimpleInfo& operator=(const TUserUgcSimpleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserUgcSimpleInfo& default_instance();

  void Swap(TUserUgcSimpleInfo* other);

  // implements Message ----------------------------------------------

  TUserUgcSimpleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserUgcSimpleInfo& from);
  void MergeFrom(const TUserUgcSimpleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserUgcSimpleInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 MaxPassedChapter = 2;
  inline bool has_maxpassedchapter() const;
  inline void clear_maxpassedchapter();
  static const int kMaxPassedChapterFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserUgcSimpleInfo</name>
  	<Function>
  		<name>maxpassedchapter</name>
  		<replaceName>MaxPassedChapter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxpassedchapter</name>
  		<replaceName>MaxPassedChapter</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxpassedchapter</name>
  		<replaceName>MaxPassedChapter</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxpassedchapter() const;
  inline void set_maxpassedchapter(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserUgcSimpleInfo)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_maxpassedchapter();
  inline void clear_has_maxpassedchapter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint32 maxpassedchapter_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserUgcSimpleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserUgcGetArrUserDataRpgRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserUgcGetArrUserDataRpgRsp : public ::google::protobuf::Message {
 public:
  TUserUgcGetArrUserDataRpgRsp();
  virtual ~TUserUgcGetArrUserDataRpgRsp();

  TUserUgcGetArrUserDataRpgRsp(const TUserUgcGetArrUserDataRpgRsp& from);

  inline TUserUgcGetArrUserDataRpgRsp& operator=(const TUserUgcGetArrUserDataRpgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserUgcGetArrUserDataRpgRsp& default_instance();

  void Swap(TUserUgcGetArrUserDataRpgRsp* other);

  // implements Message ----------------------------------------------

  TUserUgcGetArrUserDataRpgRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserUgcGetArrUserDataRpgRsp& from);
  void MergeFrom(const TUserUgcGetArrUserDataRpgRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUserUgcSimpleInfo UserDataArray = 1;
  inline int userdataarray_size() const;
  inline void clear_userdataarray();
  static const int kUserDataArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserUgcGetArrUserDataRpgRsp</name>
  	<Function>
  		<name>userdataarray</name>
  		<replaceName>UserDataArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userdataarray</name>
  		<replaceName>UserDataArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userdataarray</name>
  		<replaceName>UserDataArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userdataarray</name>
  		<replaceName>UserDataArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userdataarray_size</name>
  		<replaceName>UserDataArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserUgcSimpleInfo& userdataarray(int index) const;
  inline ::pb::TUserUgcSimpleInfo* mutable_userdataarray(int index);
  inline ::pb::TUserUgcSimpleInfo* add_userdataarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserUgcSimpleInfo >&
      userdataarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserUgcSimpleInfo >*
      mutable_userdataarray();

  // @@protoc_insertion_point(class_scope:pb.TUserUgcGetArrUserDataRpgRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserUgcSimpleInfo > userdataarray_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserUgcGetArrUserDataRpgRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserSetShowVipReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserSetShowVipReq : public ::google::protobuf::Message {
 public:
  TUserSetShowVipReq();
  virtual ~TUserSetShowVipReq();

  TUserSetShowVipReq(const TUserSetShowVipReq& from);

  inline TUserSetShowVipReq& operator=(const TUserSetShowVipReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserSetShowVipReq& default_instance();

  void Swap(TUserSetShowVipReq* other);

  // implements Message ----------------------------------------------

  TUserSetShowVipReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserSetShowVipReq& from);
  void MergeFrom(const TUserSetShowVipReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 IsShowVip = 1;
  inline bool has_isshowvip() const;
  inline void clear_isshowvip();
  static const int kIsShowVipFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserSetShowVipReq</name>
  	<Function>
  		<name>isshowvip</name>
  		<replaceName>IsShowVip</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isshowvip</name>
  		<replaceName>IsShowVip</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isshowvip</name>
  		<replaceName>IsShowVip</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isshowvip() const;
  inline void set_isshowvip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserSetShowVipReq)
 private:
  inline void set_has_isshowvip();
  inline void clear_has_isshowvip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 isshowvip_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserSetShowVipReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserGetSelfRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserGetSelfRankRsp : public ::google::protobuf::Message {
 public:
  TUserGetSelfRankRsp();
  virtual ~TUserGetSelfRankRsp();

  TUserGetSelfRankRsp(const TUserGetSelfRankRsp& from);

  inline TUserGetSelfRankRsp& operator=(const TUserGetSelfRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserGetSelfRankRsp& default_instance();

  void Swap(TUserGetSelfRankRsp* other);

  // implements Message ----------------------------------------------

  TUserGetSelfRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserGetSelfRankRsp& from);
  void MergeFrom(const TUserGetSelfRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 FightForceRankIdx = 1;
  inline bool has_fightforcerankidx() const;
  inline void clear_fightforcerankidx();
  static const int kFightForceRankIdxFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserGetSelfRankRsp</name>
  	<Function>
  		<name>fightforcerankidx</name>
  		<replaceName>FightForceRankIdx</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforcerankidx</name>
  		<replaceName>FightForceRankIdx</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforcerankidx</name>
  		<replaceName>FightForceRankIdx</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 fightforcerankidx() const;
  inline void set_fightforcerankidx(::google::protobuf::int32 value);

  // optional int32 LevelRankIdx = 2;
  inline bool has_levelrankidx() const;
  inline void clear_levelrankidx();
  static const int kLevelRankIdxFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserGetSelfRankRsp</name>
  	<Function>
  		<name>levelrankidx</name>
  		<replaceName>LevelRankIdx</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_levelrankidx</name>
  		<replaceName>LevelRankIdx</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_levelrankidx</name>
  		<replaceName>LevelRankIdx</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 levelrankidx() const;
  inline void set_levelrankidx(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserGetSelfRankRsp)
 private:
  inline void set_has_fightforcerankidx();
  inline void clear_has_fightforcerankidx();
  inline void set_has_levelrankidx();
  inline void clear_has_levelrankidx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 fightforcerankidx_;
  ::google::protobuf::int32 levelrankidx_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserGetSelfRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserPlayerImageFrameArrRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserPlayerImageFrameArrRsp : public ::google::protobuf::Message {
 public:
  TUserPlayerImageFrameArrRsp();
  virtual ~TUserPlayerImageFrameArrRsp();

  TUserPlayerImageFrameArrRsp(const TUserPlayerImageFrameArrRsp& from);

  inline TUserPlayerImageFrameArrRsp& operator=(const TUserPlayerImageFrameArrRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserPlayerImageFrameArrRsp& default_instance();

  void Swap(TUserPlayerImageFrameArrRsp* other);

  // implements Message ----------------------------------------------

  TUserPlayerImageFrameArrRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserPlayerImageFrameArrRsp& from);
  void MergeFrom(const TUserPlayerImageFrameArrRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 FrameArr = 1;
  inline int framearr_size() const;
  inline void clear_framearr();
  static const int kFrameArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserPlayerImageFrameArrRsp</name>
  	<Function>
  		<name>framearr</name>
  		<replaceName>FrameArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_framearr</name>
  		<replaceName>FrameArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_framearr</name>
  		<replaceName>FrameArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_framearr</name>
  		<replaceName>FrameArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>framearr_size</name>
  		<replaceName>FrameArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 framearr(int index) const;
  inline void set_framearr(int index, ::google::protobuf::int32 value);
  inline void add_framearr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      framearr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_framearr();

  // repeated uint64 EndTimeArr = 2;
  inline int endtimearr_size() const;
  inline void clear_endtimearr();
  static const int kEndTimeArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserPlayerImageFrameArrRsp</name>
  	<Function>
  		<name>endtimearr</name>
  		<replaceName>EndTimeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_endtimearr</name>
  		<replaceName>EndTimeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_endtimearr</name>
  		<replaceName>EndTimeArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtimearr</name>
  		<replaceName>EndTimeArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>endtimearr_size</name>
  		<replaceName>EndTimeArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtimearr(int index) const;
  inline void set_endtimearr(int index, ::google::protobuf::uint64 value);
  inline void add_endtimearr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      endtimearr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_endtimearr();

  // @@protoc_insertion_point(class_scope:pb.TUserPlayerImageFrameArrRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > framearr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > endtimearr_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserPlayerImageFrameArrRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserPlayerImageFrameArrPush</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserPlayerImageFrameArrPush : public ::google::protobuf::Message {
 public:
  TUserPlayerImageFrameArrPush();
  virtual ~TUserPlayerImageFrameArrPush();

  TUserPlayerImageFrameArrPush(const TUserPlayerImageFrameArrPush& from);

  inline TUserPlayerImageFrameArrPush& operator=(const TUserPlayerImageFrameArrPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserPlayerImageFrameArrPush& default_instance();

  void Swap(TUserPlayerImageFrameArrPush* other);

  // implements Message ----------------------------------------------

  TUserPlayerImageFrameArrPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserPlayerImageFrameArrPush& from);
  void MergeFrom(const TUserPlayerImageFrameArrPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 FrameTid = 1;
  inline bool has_frametid() const;
  inline void clear_frametid();
  static const int kFrameTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserPlayerImageFrameArrPush</name>
  	<Function>
  		<name>frametid</name>
  		<replaceName>FrameTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_frametid</name>
  		<replaceName>FrameTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_frametid</name>
  		<replaceName>FrameTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 frametid() const;
  inline void set_frametid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserPlayerImageFrameArrPush)
 private:
  inline void set_has_frametid();
  inline void clear_has_frametid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 frametid_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserPlayerImageFrameArrPush* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserSetCanStrangerChatReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserSetCanStrangerChatReq : public ::google::protobuf::Message {
 public:
  TUserSetCanStrangerChatReq();
  virtual ~TUserSetCanStrangerChatReq();

  TUserSetCanStrangerChatReq(const TUserSetCanStrangerChatReq& from);

  inline TUserSetCanStrangerChatReq& operator=(const TUserSetCanStrangerChatReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserSetCanStrangerChatReq& default_instance();

  void Swap(TUserSetCanStrangerChatReq* other);

  // implements Message ----------------------------------------------

  TUserSetCanStrangerChatReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserSetCanStrangerChatReq& from);
  void MergeFrom(const TUserSetCanStrangerChatReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 IsAllow = 1;
  inline bool has_isallow() const;
  inline void clear_isallow();
  static const int kIsAllowFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserSetCanStrangerChatReq</name>
  	<Function>
  		<name>isallow</name>
  		<replaceName>IsAllow</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isallow</name>
  		<replaceName>IsAllow</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isallow</name>
  		<replaceName>IsAllow</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isallow() const;
  inline void set_isallow(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserSetCanStrangerChatReq)
 private:
  inline void set_has_isallow();
  inline void clear_has_isallow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 isallow_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserSetCanStrangerChatReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserSetRefuseLowAdventureReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserSetRefuseLowAdventureReq : public ::google::protobuf::Message {
 public:
  TUserSetRefuseLowAdventureReq();
  virtual ~TUserSetRefuseLowAdventureReq();

  TUserSetRefuseLowAdventureReq(const TUserSetRefuseLowAdventureReq& from);

  inline TUserSetRefuseLowAdventureReq& operator=(const TUserSetRefuseLowAdventureReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserSetRefuseLowAdventureReq& default_instance();

  void Swap(TUserSetRefuseLowAdventureReq* other);

  // implements Message ----------------------------------------------

  TUserSetRefuseLowAdventureReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserSetRefuseLowAdventureReq& from);
  void MergeFrom(const TUserSetRefuseLowAdventureReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 IsRefuse = 1;
  inline bool has_isrefuse() const;
  inline void clear_isrefuse();
  static const int kIsRefuseFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserSetRefuseLowAdventureReq</name>
  	<Function>
  		<name>isrefuse</name>
  		<replaceName>IsRefuse</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isrefuse</name>
  		<replaceName>IsRefuse</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isrefuse</name>
  		<replaceName>IsRefuse</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isrefuse() const;
  inline void set_isrefuse(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserSetRefuseLowAdventureReq)
 private:
  inline void set_has_isrefuse();
  inline void clear_has_isrefuse();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 isrefuse_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserSetRefuseLowAdventureReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserGetAndRefreshFightForceReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserGetAndRefreshFightForceReq : public ::google::protobuf::Message {
 public:
  TUserGetAndRefreshFightForceReq();
  virtual ~TUserGetAndRefreshFightForceReq();

  TUserGetAndRefreshFightForceReq(const TUserGetAndRefreshFightForceReq& from);

  inline TUserGetAndRefreshFightForceReq& operator=(const TUserGetAndRefreshFightForceReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserGetAndRefreshFightForceReq& default_instance();

  void Swap(TUserGetAndRefreshFightForceReq* other);

  // implements Message ----------------------------------------------

  TUserGetAndRefreshFightForceReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserGetAndRefreshFightForceReq& from);
  void MergeFrom(const TUserGetAndRefreshFightForceReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserGetAndRefreshFightForceReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TUserGetAndRefreshFightForceReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserGetAndRefreshFightForceReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserGetAndRefreshFightForceRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserGetAndRefreshFightForceRsp : public ::google::protobuf::Message {
 public:
  TUserGetAndRefreshFightForceRsp();
  virtual ~TUserGetAndRefreshFightForceRsp();

  TUserGetAndRefreshFightForceRsp(const TUserGetAndRefreshFightForceRsp& from);

  inline TUserGetAndRefreshFightForceRsp& operator=(const TUserGetAndRefreshFightForceRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserGetAndRefreshFightForceRsp& default_instance();

  void Swap(TUserGetAndRefreshFightForceRsp* other);

  // implements Message ----------------------------------------------

  TUserGetAndRefreshFightForceRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserGetAndRefreshFightForceRsp& from);
  void MergeFrom(const TUserGetAndRefreshFightForceRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 FightForce = 1;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserGetAndRefreshFightForceRsp</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TUserGetAndRefreshFightForceRsp)
 private:
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 fightforce_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserGetAndRefreshFightForceRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserSendChannelEmailRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/User.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserSendChannelEmailRsp : public ::google::protobuf::Message {
 public:
  TUserSendChannelEmailRsp();
  virtual ~TUserSendChannelEmailRsp();

  TUserSendChannelEmailRsp(const TUserSendChannelEmailRsp& from);

  inline TUserSendChannelEmailRsp& operator=(const TUserSendChannelEmailRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserSendChannelEmailRsp& default_instance();

  void Swap(TUserSendChannelEmailRsp* other);

  // implements Message ----------------------------------------------

  TUserSendChannelEmailRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserSendChannelEmailRsp& from);
  void MergeFrom(const TUserSendChannelEmailRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 EmailNum = 1;
  inline bool has_emailnum() const;
  inline void clear_emailnum();
  static const int kEmailNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserSendChannelEmailRsp</name>
  	<Function>
  		<name>emailnum</name>
  		<replaceName>EmailNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_emailnum</name>
  		<replaceName>EmailNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_emailnum</name>
  		<replaceName>EmailNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 emailnum() const;
  inline void set_emailnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserSendChannelEmailRsp)
 private:
  inline void set_has_emailnum();
  inline void clear_has_emailnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 emailnum_;
  friend void  protobuf_AddDesc_net_2fUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUser_2eproto();

  void InitAsDefaultInstance();
  static TUserSendChannelEmailRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TModuleTime

// optional .pb.EModuleId ModuleId = 1;
inline bool TModuleTime::has_moduleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TModuleTime::set_has_moduleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TModuleTime::clear_has_moduleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TModuleTime::clear_moduleid() {
  moduleid_ = 1;
  clear_has_moduleid();
}
inline ::pb::EModuleId TModuleTime::moduleid() const {
  // @@protoc_insertion_point(field_get:pb.TModuleTime.ModuleId)
  return static_cast< ::pb::EModuleId >(moduleid_);
}
inline void TModuleTime::set_moduleid(::pb::EModuleId value) {
  assert(::pb::EModuleId_IsValid(value));
  set_has_moduleid();
  moduleid_ = value;
  // @@protoc_insertion_point(field_set:pb.TModuleTime.ModuleId)
}

// optional uint64 UpdateTime = 2;
inline bool TModuleTime::has_updatetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TModuleTime::set_has_updatetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TModuleTime::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TModuleTime::clear_updatetime() {
  updatetime_ = GOOGLE_ULONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::uint64 TModuleTime::updatetime() const {
  // @@protoc_insertion_point(field_get:pb.TModuleTime.UpdateTime)
  return updatetime_;
}
inline void TModuleTime::set_updatetime(::google::protobuf::uint64 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TModuleTime.UpdateTime)
}

// -------------------------------------------------------------------

// TModuleInfos

// optional .pb.TUserGetUserDataRpgRsp GetUserDataRpgRsp = 1;
inline bool TModuleInfos::has_getuserdatarpgrsp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TModuleInfos::set_has_getuserdatarpgrsp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TModuleInfos::clear_has_getuserdatarpgrsp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TModuleInfos::clear_getuserdatarpgrsp() {
  if (getuserdatarpgrsp_ != NULL) getuserdatarpgrsp_->::pb::TUserGetUserDataRpgRsp::Clear();
  clear_has_getuserdatarpgrsp();
}
inline const ::pb::TUserGetUserDataRpgRsp& TModuleInfos::getuserdatarpgrsp() const {
  // @@protoc_insertion_point(field_get:pb.TModuleInfos.GetUserDataRpgRsp)
  return getuserdatarpgrsp_ != NULL ? *getuserdatarpgrsp_ : *default_instance_->getuserdatarpgrsp_;
}
inline ::pb::TUserGetUserDataRpgRsp* TModuleInfos::mutable_getuserdatarpgrsp() {
  set_has_getuserdatarpgrsp();
  if (getuserdatarpgrsp_ == NULL) getuserdatarpgrsp_ = new ::pb::TUserGetUserDataRpgRsp;
  // @@protoc_insertion_point(field_mutable:pb.TModuleInfos.GetUserDataRpgRsp)
  return getuserdatarpgrsp_;
}
inline ::pb::TUserGetUserDataRpgRsp* TModuleInfos::release_getuserdatarpgrsp() {
  clear_has_getuserdatarpgrsp();
  ::pb::TUserGetUserDataRpgRsp* temp = getuserdatarpgrsp_;
  getuserdatarpgrsp_ = NULL;
  return temp;
}
inline void TModuleInfos::set_allocated_getuserdatarpgrsp(::pb::TUserGetUserDataRpgRsp* getuserdatarpgrsp) {
  delete getuserdatarpgrsp_;
  getuserdatarpgrsp_ = getuserdatarpgrsp;
  if (getuserdatarpgrsp) {
    set_has_getuserdatarpgrsp();
  } else {
    clear_has_getuserdatarpgrsp();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TModuleInfos.GetUserDataRpgRsp)
}

// optional .pb.THeroGetHeroDataArrayRsp GetHeroDataArrayRsp = 2;
inline bool TModuleInfos::has_getherodataarrayrsp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TModuleInfos::set_has_getherodataarrayrsp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TModuleInfos::clear_has_getherodataarrayrsp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TModuleInfos::clear_getherodataarrayrsp() {
  if (getherodataarrayrsp_ != NULL) getherodataarrayrsp_->::pb::THeroGetHeroDataArrayRsp::Clear();
  clear_has_getherodataarrayrsp();
}
inline const ::pb::THeroGetHeroDataArrayRsp& TModuleInfos::getherodataarrayrsp() const {
  // @@protoc_insertion_point(field_get:pb.TModuleInfos.GetHeroDataArrayRsp)
  return getherodataarrayrsp_ != NULL ? *getherodataarrayrsp_ : *default_instance_->getherodataarrayrsp_;
}
inline ::pb::THeroGetHeroDataArrayRsp* TModuleInfos::mutable_getherodataarrayrsp() {
  set_has_getherodataarrayrsp();
  if (getherodataarrayrsp_ == NULL) getherodataarrayrsp_ = new ::pb::THeroGetHeroDataArrayRsp;
  // @@protoc_insertion_point(field_mutable:pb.TModuleInfos.GetHeroDataArrayRsp)
  return getherodataarrayrsp_;
}
inline ::pb::THeroGetHeroDataArrayRsp* TModuleInfos::release_getherodataarrayrsp() {
  clear_has_getherodataarrayrsp();
  ::pb::THeroGetHeroDataArrayRsp* temp = getherodataarrayrsp_;
  getherodataarrayrsp_ = NULL;
  return temp;
}
inline void TModuleInfos::set_allocated_getherodataarrayrsp(::pb::THeroGetHeroDataArrayRsp* getherodataarrayrsp) {
  delete getherodataarrayrsp_;
  getherodataarrayrsp_ = getherodataarrayrsp;
  if (getherodataarrayrsp) {
    set_has_getherodataarrayrsp();
  } else {
    clear_has_getherodataarrayrsp();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TModuleInfos.GetHeroDataArrayRsp)
}

// optional .pb.TBagData GetBagDataRsp = 3;
inline bool TModuleInfos::has_getbagdatarsp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TModuleInfos::set_has_getbagdatarsp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TModuleInfos::clear_has_getbagdatarsp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TModuleInfos::clear_getbagdatarsp() {
  if (getbagdatarsp_ != NULL) getbagdatarsp_->::pb::TBagData::Clear();
  clear_has_getbagdatarsp();
}
inline const ::pb::TBagData& TModuleInfos::getbagdatarsp() const {
  // @@protoc_insertion_point(field_get:pb.TModuleInfos.GetBagDataRsp)
  return getbagdatarsp_ != NULL ? *getbagdatarsp_ : *default_instance_->getbagdatarsp_;
}
inline ::pb::TBagData* TModuleInfos::mutable_getbagdatarsp() {
  set_has_getbagdatarsp();
  if (getbagdatarsp_ == NULL) getbagdatarsp_ = new ::pb::TBagData;
  // @@protoc_insertion_point(field_mutable:pb.TModuleInfos.GetBagDataRsp)
  return getbagdatarsp_;
}
inline ::pb::TBagData* TModuleInfos::release_getbagdatarsp() {
  clear_has_getbagdatarsp();
  ::pb::TBagData* temp = getbagdatarsp_;
  getbagdatarsp_ = NULL;
  return temp;
}
inline void TModuleInfos::set_allocated_getbagdatarsp(::pb::TBagData* getbagdatarsp) {
  delete getbagdatarsp_;
  getbagdatarsp_ = getbagdatarsp;
  if (getbagdatarsp) {
    set_has_getbagdatarsp();
  } else {
    clear_has_getbagdatarsp();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TModuleInfos.GetBagDataRsp)
}

// repeated .pb.TFrontStore ArrFrontStoreInfo = 4;
inline int TModuleInfos::arrfrontstoreinfo_size() const {
  return arrfrontstoreinfo_.size();
}
inline void TModuleInfos::clear_arrfrontstoreinfo() {
  arrfrontstoreinfo_.Clear();
}
inline const ::pb::TFrontStore& TModuleInfos::arrfrontstoreinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TModuleInfos.ArrFrontStoreInfo)
  return arrfrontstoreinfo_.Get(index);
}
inline ::pb::TFrontStore* TModuleInfos::mutable_arrfrontstoreinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TModuleInfos.ArrFrontStoreInfo)
  return arrfrontstoreinfo_.Mutable(index);
}
inline ::pb::TFrontStore* TModuleInfos::add_arrfrontstoreinfo() {
  // @@protoc_insertion_point(field_add:pb.TModuleInfos.ArrFrontStoreInfo)
  return arrfrontstoreinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TFrontStore >&
TModuleInfos::arrfrontstoreinfo() const {
  // @@protoc_insertion_point(field_list:pb.TModuleInfos.ArrFrontStoreInfo)
  return arrfrontstoreinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TFrontStore >*
TModuleInfos::mutable_arrfrontstoreinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TModuleInfos.ArrFrontStoreInfo)
  return &arrfrontstoreinfo_;
}

// -------------------------------------------------------------------

// TUserLoginReq

// optional uint64 Uid = 1;
inline bool TUserLoginReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserLoginReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserLoginReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserLoginReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TUserLoginReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TUserLoginReq.Uid)
  return uid_;
}
inline void TUserLoginReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserLoginReq.Uid)
}

// repeated .pb.TModuleTime ModuleTimes = 2;
inline int TUserLoginReq::moduletimes_size() const {
  return moduletimes_.size();
}
inline void TUserLoginReq::clear_moduletimes() {
  moduletimes_.Clear();
}
inline const ::pb::TModuleTime& TUserLoginReq::moduletimes(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUserLoginReq.ModuleTimes)
  return moduletimes_.Get(index);
}
inline ::pb::TModuleTime* TUserLoginReq::mutable_moduletimes(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUserLoginReq.ModuleTimes)
  return moduletimes_.Mutable(index);
}
inline ::pb::TModuleTime* TUserLoginReq::add_moduletimes() {
  // @@protoc_insertion_point(field_add:pb.TUserLoginReq.ModuleTimes)
  return moduletimes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TModuleTime >&
TUserLoginReq::moduletimes() const {
  // @@protoc_insertion_point(field_list:pb.TUserLoginReq.ModuleTimes)
  return moduletimes_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TModuleTime >*
TUserLoginReq::mutable_moduletimes() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUserLoginReq.ModuleTimes)
  return &moduletimes_;
}

// -------------------------------------------------------------------

// TUserLoginRsp

// optional string Ret = 1;
inline bool TUserLoginRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserLoginRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserLoginRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserLoginRsp::clear_ret() {
  if (ret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_->clear();
  }
  clear_has_ret();
}
inline const ::std::string& TUserLoginRsp::ret() const {
  // @@protoc_insertion_point(field_get:pb.TUserLoginRsp.Ret)
  return *ret_;
}
inline void TUserLoginRsp::set_ret(const ::std::string& value) {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_ = new ::std::string;
  }
  ret_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TUserLoginRsp.Ret)
}
inline void TUserLoginRsp::set_ret(const char* value) {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_ = new ::std::string;
  }
  ret_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TUserLoginRsp.Ret)
}
inline void TUserLoginRsp::set_ret(const char* value, size_t size) {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_ = new ::std::string;
  }
  ret_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TUserLoginRsp.Ret)
}
inline ::std::string* TUserLoginRsp::mutable_ret() {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TUserLoginRsp.Ret)
  return ret_;
}
inline ::std::string* TUserLoginRsp::release_ret() {
  clear_has_ret();
  if (ret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ret_;
    ret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TUserLoginRsp::set_allocated_ret(::std::string* ret) {
  if (ret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ret_;
  }
  if (ret) {
    set_has_ret();
    ret_ = ret;
  } else {
    clear_has_ret();
    ret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserLoginRsp.Ret)
}

// optional string BanMsg = 2;
inline bool TUserLoginRsp::has_banmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserLoginRsp::set_has_banmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserLoginRsp::clear_has_banmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserLoginRsp::clear_banmsg() {
  if (banmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    banmsg_->clear();
  }
  clear_has_banmsg();
}
inline const ::std::string& TUserLoginRsp::banmsg() const {
  // @@protoc_insertion_point(field_get:pb.TUserLoginRsp.BanMsg)
  return *banmsg_;
}
inline void TUserLoginRsp::set_banmsg(const ::std::string& value) {
  set_has_banmsg();
  if (banmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    banmsg_ = new ::std::string;
  }
  banmsg_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TUserLoginRsp.BanMsg)
}
inline void TUserLoginRsp::set_banmsg(const char* value) {
  set_has_banmsg();
  if (banmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    banmsg_ = new ::std::string;
  }
  banmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TUserLoginRsp.BanMsg)
}
inline void TUserLoginRsp::set_banmsg(const char* value, size_t size) {
  set_has_banmsg();
  if (banmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    banmsg_ = new ::std::string;
  }
  banmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TUserLoginRsp.BanMsg)
}
inline ::std::string* TUserLoginRsp::mutable_banmsg() {
  set_has_banmsg();
  if (banmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    banmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TUserLoginRsp.BanMsg)
  return banmsg_;
}
inline ::std::string* TUserLoginRsp::release_banmsg() {
  clear_has_banmsg();
  if (banmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = banmsg_;
    banmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TUserLoginRsp::set_allocated_banmsg(::std::string* banmsg) {
  if (banmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete banmsg_;
  }
  if (banmsg) {
    set_has_banmsg();
    banmsg_ = banmsg;
  } else {
    clear_has_banmsg();
    banmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserLoginRsp.BanMsg)
}

// optional uint64 BanTime = 3;
inline bool TUserLoginRsp::has_bantime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUserLoginRsp::set_has_bantime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUserLoginRsp::clear_has_bantime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUserLoginRsp::clear_bantime() {
  bantime_ = GOOGLE_ULONGLONG(0);
  clear_has_bantime();
}
inline ::google::protobuf::uint64 TUserLoginRsp::bantime() const {
  // @@protoc_insertion_point(field_get:pb.TUserLoginRsp.BanTime)
  return bantime_;
}
inline void TUserLoginRsp::set_bantime(::google::protobuf::uint64 value) {
  set_has_bantime();
  bantime_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserLoginRsp.BanTime)
}

// optional .pb.TModuleInfos ModuleInfos = 4;
inline bool TUserLoginRsp::has_moduleinfos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUserLoginRsp::set_has_moduleinfos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUserLoginRsp::clear_has_moduleinfos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUserLoginRsp::clear_moduleinfos() {
  if (moduleinfos_ != NULL) moduleinfos_->::pb::TModuleInfos::Clear();
  clear_has_moduleinfos();
}
inline const ::pb::TModuleInfos& TUserLoginRsp::moduleinfos() const {
  // @@protoc_insertion_point(field_get:pb.TUserLoginRsp.ModuleInfos)
  return moduleinfos_ != NULL ? *moduleinfos_ : *default_instance_->moduleinfos_;
}
inline ::pb::TModuleInfos* TUserLoginRsp::mutable_moduleinfos() {
  set_has_moduleinfos();
  if (moduleinfos_ == NULL) moduleinfos_ = new ::pb::TModuleInfos;
  // @@protoc_insertion_point(field_mutable:pb.TUserLoginRsp.ModuleInfos)
  return moduleinfos_;
}
inline ::pb::TModuleInfos* TUserLoginRsp::release_moduleinfos() {
  clear_has_moduleinfos();
  ::pb::TModuleInfos* temp = moduleinfos_;
  moduleinfos_ = NULL;
  return temp;
}
inline void TUserLoginRsp::set_allocated_moduleinfos(::pb::TModuleInfos* moduleinfos) {
  delete moduleinfos_;
  moduleinfos_ = moduleinfos;
  if (moduleinfos) {
    set_has_moduleinfos();
  } else {
    clear_has_moduleinfos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserLoginRsp.ModuleInfos)
}

// optional int32 OS = 5;
inline bool TUserLoginRsp::has_os() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TUserLoginRsp::set_has_os() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TUserLoginRsp::clear_has_os() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TUserLoginRsp::clear_os() {
  os_ = 0;
  clear_has_os();
}
inline ::google::protobuf::int32 TUserLoginRsp::os() const {
  // @@protoc_insertion_point(field_get:pb.TUserLoginRsp.OS)
  return os_;
}
inline void TUserLoginRsp::set_os(::google::protobuf::int32 value) {
  set_has_os();
  os_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserLoginRsp.OS)
}

// -------------------------------------------------------------------

// TUserGetUserDataRpgReq

// -------------------------------------------------------------------

// TUserGetUserDataSlgReq

// optional uint64 Uid = 1;
inline bool TUserGetUserDataSlgReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserGetUserDataSlgReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserGetUserDataSlgReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserGetUserDataSlgReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TUserGetUserDataSlgReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TUserGetUserDataSlgReq.Uid)
  return uid_;
}
inline void TUserGetUserDataSlgReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserGetUserDataSlgReq.Uid)
}

// -------------------------------------------------------------------

// TBaseUserData

// optional string Uname = 1;
inline bool TBaseUserData::has_uname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBaseUserData::set_has_uname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBaseUserData::clear_has_uname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBaseUserData::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TBaseUserData::uname() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.Uname)
  return *uname_;
}
inline void TBaseUserData::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.Uname)
}
inline void TBaseUserData::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBaseUserData.Uname)
}
inline void TBaseUserData::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBaseUserData.Uname)
}
inline ::std::string* TBaseUserData::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBaseUserData.Uname)
  return uname_;
}
inline ::std::string* TBaseUserData::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBaseUserData::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBaseUserData.Uname)
}

// optional int32 Exp = 3;
inline bool TBaseUserData::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBaseUserData::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBaseUserData::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBaseUserData::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 TBaseUserData::exp() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.Exp)
  return exp_;
}
inline void TBaseUserData::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.Exp)
}

// optional int32 Level = 4;
inline bool TBaseUserData::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBaseUserData::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBaseUserData::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBaseUserData::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 TBaseUserData::level() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.Level)
  return level_;
}
inline void TBaseUserData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.Level)
}

// optional int32 Gold = 5;
inline bool TBaseUserData::has_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBaseUserData::set_has_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBaseUserData::clear_has_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBaseUserData::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 TBaseUserData::gold() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.Gold)
  return gold_;
}
inline void TBaseUserData::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.Gold)
}

// optional int32 VipExp = 6;
inline bool TBaseUserData::has_vipexp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TBaseUserData::set_has_vipexp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TBaseUserData::clear_has_vipexp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TBaseUserData::clear_vipexp() {
  vipexp_ = 0;
  clear_has_vipexp();
}
inline ::google::protobuf::int32 TBaseUserData::vipexp() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.VipExp)
  return vipexp_;
}
inline void TBaseUserData::set_vipexp(::google::protobuf::int32 value) {
  set_has_vipexp();
  vipexp_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.VipExp)
}

// optional int64 Coin = 7;
inline bool TBaseUserData::has_coin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TBaseUserData::set_has_coin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TBaseUserData::clear_has_coin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TBaseUserData::clear_coin() {
  coin_ = GOOGLE_LONGLONG(0);
  clear_has_coin();
}
inline ::google::protobuf::int64 TBaseUserData::coin() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.Coin)
  return coin_;
}
inline void TBaseUserData::set_coin(::google::protobuf::int64 value) {
  set_has_coin();
  coin_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.Coin)
}

// repeated .pb.TUserRecoverDataRpg RecoverDataArray = 9;
inline int TBaseUserData::recoverdataarray_size() const {
  return recoverdataarray_.size();
}
inline void TBaseUserData::clear_recoverdataarray() {
  recoverdataarray_.Clear();
}
inline const ::pb::TUserRecoverDataRpg& TBaseUserData::recoverdataarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.RecoverDataArray)
  return recoverdataarray_.Get(index);
}
inline ::pb::TUserRecoverDataRpg* TBaseUserData::mutable_recoverdataarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBaseUserData.RecoverDataArray)
  return recoverdataarray_.Mutable(index);
}
inline ::pb::TUserRecoverDataRpg* TBaseUserData::add_recoverdataarray() {
  // @@protoc_insertion_point(field_add:pb.TBaseUserData.RecoverDataArray)
  return recoverdataarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserRecoverDataRpg >&
TBaseUserData::recoverdataarray() const {
  // @@protoc_insertion_point(field_list:pb.TBaseUserData.RecoverDataArray)
  return recoverdataarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserRecoverDataRpg >*
TBaseUserData::mutable_recoverdataarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBaseUserData.RecoverDataArray)
  return &recoverdataarray_;
}

// optional int32 VipLevel = 10;
inline bool TBaseUserData::has_viplevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TBaseUserData::set_has_viplevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TBaseUserData::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TBaseUserData::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 TBaseUserData::viplevel() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.VipLevel)
  return viplevel_;
}
inline void TBaseUserData::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.VipLevel)
}

// repeated .pb.TUserCurrencyData CurrencyDataArray = 11;
inline int TBaseUserData::currencydataarray_size() const {
  return currencydataarray_.size();
}
inline void TBaseUserData::clear_currencydataarray() {
  currencydataarray_.Clear();
}
inline const ::pb::TUserCurrencyData& TBaseUserData::currencydataarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.CurrencyDataArray)
  return currencydataarray_.Get(index);
}
inline ::pb::TUserCurrencyData* TBaseUserData::mutable_currencydataarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBaseUserData.CurrencyDataArray)
  return currencydataarray_.Mutable(index);
}
inline ::pb::TUserCurrencyData* TBaseUserData::add_currencydataarray() {
  // @@protoc_insertion_point(field_add:pb.TBaseUserData.CurrencyDataArray)
  return currencydataarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserCurrencyData >&
TBaseUserData::currencydataarray() const {
  // @@protoc_insertion_point(field_list:pb.TBaseUserData.CurrencyDataArray)
  return currencydataarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserCurrencyData >*
TBaseUserData::mutable_currencydataarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBaseUserData.CurrencyDataArray)
  return &currencydataarray_;
}

// repeated .pb.TUserResourceData ResourceDataArray = 12;
inline int TBaseUserData::resourcedataarray_size() const {
  return resourcedataarray_.size();
}
inline void TBaseUserData::clear_resourcedataarray() {
  resourcedataarray_.Clear();
}
inline const ::pb::TUserResourceData& TBaseUserData::resourcedataarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.ResourceDataArray)
  return resourcedataarray_.Get(index);
}
inline ::pb::TUserResourceData* TBaseUserData::mutable_resourcedataarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBaseUserData.ResourceDataArray)
  return resourcedataarray_.Mutable(index);
}
inline ::pb::TUserResourceData* TBaseUserData::add_resourcedataarray() {
  // @@protoc_insertion_point(field_add:pb.TBaseUserData.ResourceDataArray)
  return resourcedataarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserResourceData >&
TBaseUserData::resourcedataarray() const {
  // @@protoc_insertion_point(field_list:pb.TBaseUserData.ResourceDataArray)
  return resourcedataarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserResourceData >*
TBaseUserData::mutable_resourcedataarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBaseUserData.ResourceDataArray)
  return &resourcedataarray_;
}

// optional int64 ResourceUpdateTime = 13;
inline bool TBaseUserData::has_resourceupdatetime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TBaseUserData::set_has_resourceupdatetime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TBaseUserData::clear_has_resourceupdatetime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TBaseUserData::clear_resourceupdatetime() {
  resourceupdatetime_ = GOOGLE_LONGLONG(0);
  clear_has_resourceupdatetime();
}
inline ::google::protobuf::int64 TBaseUserData::resourceupdatetime() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.ResourceUpdateTime)
  return resourceupdatetime_;
}
inline void TBaseUserData::set_resourceupdatetime(::google::protobuf::int64 value) {
  set_has_resourceupdatetime();
  resourceupdatetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.ResourceUpdateTime)
}

// optional int64 CreateTime = 14;
inline bool TBaseUserData::has_createtime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TBaseUserData::set_has_createtime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TBaseUserData::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TBaseUserData::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 TBaseUserData::createtime() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.CreateTime)
  return createtime_;
}
inline void TBaseUserData::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.CreateTime)
}

// optional int32 PlayerImageFrameTid = 16;
inline bool TBaseUserData::has_playerimageframetid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TBaseUserData::set_has_playerimageframetid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TBaseUserData::clear_has_playerimageframetid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TBaseUserData::clear_playerimageframetid() {
  playerimageframetid_ = 0;
  clear_has_playerimageframetid();
}
inline ::google::protobuf::int32 TBaseUserData::playerimageframetid() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.PlayerImageFrameTid)
  return playerimageframetid_;
}
inline void TBaseUserData::set_playerimageframetid(::google::protobuf::int32 value) {
  set_has_playerimageframetid();
  playerimageframetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.PlayerImageFrameTid)
}

// optional string SignWords = 17;
inline bool TBaseUserData::has_signwords() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TBaseUserData::set_has_signwords() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TBaseUserData::clear_has_signwords() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TBaseUserData::clear_signwords() {
  if (signwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signwords_->clear();
  }
  clear_has_signwords();
}
inline const ::std::string& TBaseUserData::signwords() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.SignWords)
  return *signwords_;
}
inline void TBaseUserData::set_signwords(const ::std::string& value) {
  set_has_signwords();
  if (signwords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signwords_ = new ::std::string;
  }
  signwords_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.SignWords)
}
inline void TBaseUserData::set_signwords(const char* value) {
  set_has_signwords();
  if (signwords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signwords_ = new ::std::string;
  }
  signwords_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBaseUserData.SignWords)
}
inline void TBaseUserData::set_signwords(const char* value, size_t size) {
  set_has_signwords();
  if (signwords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signwords_ = new ::std::string;
  }
  signwords_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBaseUserData.SignWords)
}
inline ::std::string* TBaseUserData::mutable_signwords() {
  set_has_signwords();
  if (signwords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signwords_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBaseUserData.SignWords)
  return signwords_;
}
inline ::std::string* TBaseUserData::release_signwords() {
  clear_has_signwords();
  if (signwords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = signwords_;
    signwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBaseUserData::set_allocated_signwords(::std::string* signwords) {
  if (signwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signwords_;
  }
  if (signwords) {
    set_has_signwords();
    signwords_ = signwords;
  } else {
    clear_has_signwords();
    signwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBaseUserData.SignWords)
}

// optional int32 PlayerModelHtid = 18;
inline bool TBaseUserData::has_playermodelhtid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TBaseUserData::set_has_playermodelhtid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TBaseUserData::clear_has_playermodelhtid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TBaseUserData::clear_playermodelhtid() {
  playermodelhtid_ = 0;
  clear_has_playermodelhtid();
}
inline ::google::protobuf::int32 TBaseUserData::playermodelhtid() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.PlayerModelHtid)
  return playermodelhtid_;
}
inline void TBaseUserData::set_playermodelhtid(::google::protobuf::int32 value) {
  set_has_playermodelhtid();
  playermodelhtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.PlayerModelHtid)
}

// optional int32 SilverCoinFreeNum = 20;
inline bool TBaseUserData::has_silvercoinfreenum() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TBaseUserData::set_has_silvercoinfreenum() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TBaseUserData::clear_has_silvercoinfreenum() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TBaseUserData::clear_silvercoinfreenum() {
  silvercoinfreenum_ = 0;
  clear_has_silvercoinfreenum();
}
inline ::google::protobuf::int32 TBaseUserData::silvercoinfreenum() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.SilverCoinFreeNum)
  return silvercoinfreenum_;
}
inline void TBaseUserData::set_silvercoinfreenum(::google::protobuf::int32 value) {
  set_has_silvercoinfreenum();
  silvercoinfreenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.SilverCoinFreeNum)
}

// optional int32 SilverCoinBuyNum = 21;
inline bool TBaseUserData::has_silvercoinbuynum() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TBaseUserData::set_has_silvercoinbuynum() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TBaseUserData::clear_has_silvercoinbuynum() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TBaseUserData::clear_silvercoinbuynum() {
  silvercoinbuynum_ = 0;
  clear_has_silvercoinbuynum();
}
inline ::google::protobuf::int32 TBaseUserData::silvercoinbuynum() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.SilverCoinBuyNum)
  return silvercoinbuynum_;
}
inline void TBaseUserData::set_silvercoinbuynum(::google::protobuf::int32 value) {
  set_has_silvercoinbuynum();
  silvercoinbuynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.SilverCoinBuyNum)
}

// optional int32 ExecuteBuyNum = 22;
inline bool TBaseUserData::has_executebuynum() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TBaseUserData::set_has_executebuynum() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TBaseUserData::clear_has_executebuynum() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TBaseUserData::clear_executebuynum() {
  executebuynum_ = 0;
  clear_has_executebuynum();
}
inline ::google::protobuf::int32 TBaseUserData::executebuynum() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.ExecuteBuyNum)
  return executebuynum_;
}
inline void TBaseUserData::set_executebuynum(::google::protobuf::int32 value) {
  set_has_executebuynum();
  executebuynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.ExecuteBuyNum)
}

// optional int32 Title = 23;
inline bool TBaseUserData::has_title() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TBaseUserData::set_has_title() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TBaseUserData::clear_has_title() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TBaseUserData::clear_title() {
  title_ = 0;
  clear_has_title();
}
inline ::google::protobuf::int32 TBaseUserData::title() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.Title)
  return title_;
}
inline void TBaseUserData::set_title(::google::protobuf::int32 value) {
  set_has_title();
  title_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.Title)
}

// optional uint64 MaxFightForce = 24;
inline bool TBaseUserData::has_maxfightforce() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TBaseUserData::set_has_maxfightforce() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TBaseUserData::clear_has_maxfightforce() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TBaseUserData::clear_maxfightforce() {
  maxfightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_maxfightforce();
}
inline ::google::protobuf::uint64 TBaseUserData::maxfightforce() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.MaxFightForce)
  return maxfightforce_;
}
inline void TBaseUserData::set_maxfightforce(::google::protobuf::uint64 value) {
  set_has_maxfightforce();
  maxfightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.MaxFightForce)
}

// optional uint32 ShopCoinFreeReceiveNum = 25;
inline bool TBaseUserData::has_shopcoinfreereceivenum() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TBaseUserData::set_has_shopcoinfreereceivenum() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TBaseUserData::clear_has_shopcoinfreereceivenum() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TBaseUserData::clear_shopcoinfreereceivenum() {
  shopcoinfreereceivenum_ = 0u;
  clear_has_shopcoinfreereceivenum();
}
inline ::google::protobuf::uint32 TBaseUserData::shopcoinfreereceivenum() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.ShopCoinFreeReceiveNum)
  return shopcoinfreereceivenum_;
}
inline void TBaseUserData::set_shopcoinfreereceivenum(::google::protobuf::uint32 value) {
  set_has_shopcoinfreereceivenum();
  shopcoinfreereceivenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.ShopCoinFreeReceiveNum)
}

// optional uint32 IsShowVip = 26;
inline bool TBaseUserData::has_isshowvip() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TBaseUserData::set_has_isshowvip() {
  _has_bits_[0] |= 0x00200000u;
}
inline void TBaseUserData::clear_has_isshowvip() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void TBaseUserData::clear_isshowvip() {
  isshowvip_ = 0u;
  clear_has_isshowvip();
}
inline ::google::protobuf::uint32 TBaseUserData::isshowvip() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.IsShowVip)
  return isshowvip_;
}
inline void TBaseUserData::set_isshowvip(::google::protobuf::uint32 value) {
  set_has_isshowvip();
  isshowvip_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.IsShowVip)
}

// optional uint32 CanStrangerChat = 27;
inline bool TBaseUserData::has_canstrangerchat() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TBaseUserData::set_has_canstrangerchat() {
  _has_bits_[0] |= 0x00400000u;
}
inline void TBaseUserData::clear_has_canstrangerchat() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void TBaseUserData::clear_canstrangerchat() {
  canstrangerchat_ = 0u;
  clear_has_canstrangerchat();
}
inline ::google::protobuf::uint32 TBaseUserData::canstrangerchat() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.CanStrangerChat)
  return canstrangerchat_;
}
inline void TBaseUserData::set_canstrangerchat(::google::protobuf::uint32 value) {
  set_has_canstrangerchat();
  canstrangerchat_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.CanStrangerChat)
}

// optional uint32 IsRefuseLowAdventure = 28;
inline bool TBaseUserData::has_isrefuselowadventure() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TBaseUserData::set_has_isrefuselowadventure() {
  _has_bits_[0] |= 0x00800000u;
}
inline void TBaseUserData::clear_has_isrefuselowadventure() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void TBaseUserData::clear_isrefuselowadventure() {
  isrefuselowadventure_ = 0u;
  clear_has_isrefuselowadventure();
}
inline ::google::protobuf::uint32 TBaseUserData::isrefuselowadventure() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.IsRefuseLowAdventure)
  return isrefuselowadventure_;
}
inline void TBaseUserData::set_isrefuselowadventure(::google::protobuf::uint32 value) {
  set_has_isrefuselowadventure();
  isrefuselowadventure_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.IsRefuseLowAdventure)
}

// optional uint32 CashCoupon = 29;
inline bool TBaseUserData::has_cashcoupon() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void TBaseUserData::set_has_cashcoupon() {
  _has_bits_[0] |= 0x01000000u;
}
inline void TBaseUserData::clear_has_cashcoupon() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void TBaseUserData::clear_cashcoupon() {
  cashcoupon_ = 0u;
  clear_has_cashcoupon();
}
inline ::google::protobuf::uint32 TBaseUserData::cashcoupon() const {
  // @@protoc_insertion_point(field_get:pb.TBaseUserData.CashCoupon)
  return cashcoupon_;
}
inline void TBaseUserData::set_cashcoupon(::google::protobuf::uint32 value) {
  set_has_cashcoupon();
  cashcoupon_ = value;
  // @@protoc_insertion_point(field_set:pb.TBaseUserData.CashCoupon)
}

// -------------------------------------------------------------------

// TUserGetUserDataRpgRsp

// optional .pb.TBaseUserData UserData = 1;
inline bool TUserGetUserDataRpgRsp::has_userdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserGetUserDataRpgRsp::set_has_userdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserGetUserDataRpgRsp::clear_has_userdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserGetUserDataRpgRsp::clear_userdata() {
  if (userdata_ != NULL) userdata_->::pb::TBaseUserData::Clear();
  clear_has_userdata();
}
inline const ::pb::TBaseUserData& TUserGetUserDataRpgRsp::userdata() const {
  // @@protoc_insertion_point(field_get:pb.TUserGetUserDataRpgRsp.UserData)
  return userdata_ != NULL ? *userdata_ : *default_instance_->userdata_;
}
inline ::pb::TBaseUserData* TUserGetUserDataRpgRsp::mutable_userdata() {
  set_has_userdata();
  if (userdata_ == NULL) userdata_ = new ::pb::TBaseUserData;
  // @@protoc_insertion_point(field_mutable:pb.TUserGetUserDataRpgRsp.UserData)
  return userdata_;
}
inline ::pb::TBaseUserData* TUserGetUserDataRpgRsp::release_userdata() {
  clear_has_userdata();
  ::pb::TBaseUserData* temp = userdata_;
  userdata_ = NULL;
  return temp;
}
inline void TUserGetUserDataRpgRsp::set_allocated_userdata(::pb::TBaseUserData* userdata) {
  delete userdata_;
  userdata_ = userdata;
  if (userdata) {
    set_has_userdata();
  } else {
    clear_has_userdata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserGetUserDataRpgRsp.UserData)
}

// optional int64 ServerTime = 2;
inline bool TUserGetUserDataRpgRsp::has_servertime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserGetUserDataRpgRsp::set_has_servertime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserGetUserDataRpgRsp::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserGetUserDataRpgRsp::clear_servertime() {
  servertime_ = GOOGLE_LONGLONG(0);
  clear_has_servertime();
}
inline ::google::protobuf::int64 TUserGetUserDataRpgRsp::servertime() const {
  // @@protoc_insertion_point(field_get:pb.TUserGetUserDataRpgRsp.ServerTime)
  return servertime_;
}
inline void TUserGetUserDataRpgRsp::set_servertime(::google::protobuf::int64 value) {
  set_has_servertime();
  servertime_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserGetUserDataRpgRsp.ServerTime)
}

// optional uint32 ChannelEmailNum = 3;
inline bool TUserGetUserDataRpgRsp::has_channelemailnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUserGetUserDataRpgRsp::set_has_channelemailnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUserGetUserDataRpgRsp::clear_has_channelemailnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUserGetUserDataRpgRsp::clear_channelemailnum() {
  channelemailnum_ = 0u;
  clear_has_channelemailnum();
}
inline ::google::protobuf::uint32 TUserGetUserDataRpgRsp::channelemailnum() const {
  // @@protoc_insertion_point(field_get:pb.TUserGetUserDataRpgRsp.ChannelEmailNum)
  return channelemailnum_;
}
inline void TUserGetUserDataRpgRsp::set_channelemailnum(::google::protobuf::uint32 value) {
  set_has_channelemailnum();
  channelemailnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserGetUserDataRpgRsp.ChannelEmailNum)
}

// -------------------------------------------------------------------

// TUserUpdateUserDataRpgNotify

// optional .pb.TBaseUserData UserData = 1;
inline bool TUserUpdateUserDataRpgNotify::has_userdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserUpdateUserDataRpgNotify::set_has_userdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserUpdateUserDataRpgNotify::clear_has_userdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserUpdateUserDataRpgNotify::clear_userdata() {
  if (userdata_ != NULL) userdata_->::pb::TBaseUserData::Clear();
  clear_has_userdata();
}
inline const ::pb::TBaseUserData& TUserUpdateUserDataRpgNotify::userdata() const {
  // @@protoc_insertion_point(field_get:pb.TUserUpdateUserDataRpgNotify.UserData)
  return userdata_ != NULL ? *userdata_ : *default_instance_->userdata_;
}
inline ::pb::TBaseUserData* TUserUpdateUserDataRpgNotify::mutable_userdata() {
  set_has_userdata();
  if (userdata_ == NULL) userdata_ = new ::pb::TBaseUserData;
  // @@protoc_insertion_point(field_mutable:pb.TUserUpdateUserDataRpgNotify.UserData)
  return userdata_;
}
inline ::pb::TBaseUserData* TUserUpdateUserDataRpgNotify::release_userdata() {
  clear_has_userdata();
  ::pb::TBaseUserData* temp = userdata_;
  userdata_ = NULL;
  return temp;
}
inline void TUserUpdateUserDataRpgNotify::set_allocated_userdata(::pb::TBaseUserData* userdata) {
  delete userdata_;
  userdata_ = userdata;
  if (userdata) {
    set_has_userdata();
  } else {
    clear_has_userdata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserUpdateUserDataRpgNotify.UserData)
}

// -------------------------------------------------------------------

// TUserRecoverDataRpg

// optional int32 Tid = 1;
inline bool TUserRecoverDataRpg::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserRecoverDataRpg::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserRecoverDataRpg::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserRecoverDataRpg::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 TUserRecoverDataRpg::tid() const {
  // @@protoc_insertion_point(field_get:pb.TUserRecoverDataRpg.Tid)
  return tid_;
}
inline void TUserRecoverDataRpg::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserRecoverDataRpg.Tid)
}

// optional int64 Value = 2;
inline bool TUserRecoverDataRpg::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserRecoverDataRpg::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserRecoverDataRpg::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserRecoverDataRpg::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 TUserRecoverDataRpg::value() const {
  // @@protoc_insertion_point(field_get:pb.TUserRecoverDataRpg.Value)
  return value_;
}
inline void TUserRecoverDataRpg::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserRecoverDataRpg.Value)
}

// optional int64 RecoverTime = 3;
inline bool TUserRecoverDataRpg::has_recovertime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUserRecoverDataRpg::set_has_recovertime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUserRecoverDataRpg::clear_has_recovertime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUserRecoverDataRpg::clear_recovertime() {
  recovertime_ = GOOGLE_LONGLONG(0);
  clear_has_recovertime();
}
inline ::google::protobuf::int64 TUserRecoverDataRpg::recovertime() const {
  // @@protoc_insertion_point(field_get:pb.TUserRecoverDataRpg.RecoverTime)
  return recovertime_;
}
inline void TUserRecoverDataRpg::set_recovertime(::google::protobuf::int64 value) {
  set_has_recovertime();
  recovertime_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserRecoverDataRpg.RecoverTime)
}

// -------------------------------------------------------------------

// TUserCurrencyData

// optional uint32 CurrencyType = 1;
inline bool TUserCurrencyData::has_currencytype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserCurrencyData::set_has_currencytype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserCurrencyData::clear_has_currencytype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserCurrencyData::clear_currencytype() {
  currencytype_ = 0u;
  clear_has_currencytype();
}
inline ::google::protobuf::uint32 TUserCurrencyData::currencytype() const {
  // @@protoc_insertion_point(field_get:pb.TUserCurrencyData.CurrencyType)
  return currencytype_;
}
inline void TUserCurrencyData::set_currencytype(::google::protobuf::uint32 value) {
  set_has_currencytype();
  currencytype_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserCurrencyData.CurrencyType)
}

// optional uint64 CurrencyNum = 2;
inline bool TUserCurrencyData::has_currencynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserCurrencyData::set_has_currencynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserCurrencyData::clear_has_currencynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserCurrencyData::clear_currencynum() {
  currencynum_ = GOOGLE_ULONGLONG(0);
  clear_has_currencynum();
}
inline ::google::protobuf::uint64 TUserCurrencyData::currencynum() const {
  // @@protoc_insertion_point(field_get:pb.TUserCurrencyData.CurrencyNum)
  return currencynum_;
}
inline void TUserCurrencyData::set_currencynum(::google::protobuf::uint64 value) {
  set_has_currencynum();
  currencynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserCurrencyData.CurrencyNum)
}

// -------------------------------------------------------------------

// TUserResourceData

// optional uint32 ResourceType = 1;
inline bool TUserResourceData::has_resourcetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserResourceData::set_has_resourcetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserResourceData::clear_has_resourcetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserResourceData::clear_resourcetype() {
  resourcetype_ = 0u;
  clear_has_resourcetype();
}
inline ::google::protobuf::uint32 TUserResourceData::resourcetype() const {
  // @@protoc_insertion_point(field_get:pb.TUserResourceData.ResourceType)
  return resourcetype_;
}
inline void TUserResourceData::set_resourcetype(::google::protobuf::uint32 value) {
  set_has_resourcetype();
  resourcetype_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserResourceData.ResourceType)
}

// optional uint64 ResourceNum = 2;
inline bool TUserResourceData::has_resourcenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserResourceData::set_has_resourcenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserResourceData::clear_has_resourcenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserResourceData::clear_resourcenum() {
  resourcenum_ = GOOGLE_ULONGLONG(0);
  clear_has_resourcenum();
}
inline ::google::protobuf::uint64 TUserResourceData::resourcenum() const {
  // @@protoc_insertion_point(field_get:pb.TUserResourceData.ResourceNum)
  return resourcenum_;
}
inline void TUserResourceData::set_resourcenum(::google::protobuf::uint64 value) {
  set_has_resourcenum();
  resourcenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserResourceData.ResourceNum)
}

// -------------------------------------------------------------------

// TUserResourceCalculateRsp

// repeated .pb.TUserResourceData ResourceArray = 1;
inline int TUserResourceCalculateRsp::resourcearray_size() const {
  return resourcearray_.size();
}
inline void TUserResourceCalculateRsp::clear_resourcearray() {
  resourcearray_.Clear();
}
inline const ::pb::TUserResourceData& TUserResourceCalculateRsp::resourcearray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUserResourceCalculateRsp.ResourceArray)
  return resourcearray_.Get(index);
}
inline ::pb::TUserResourceData* TUserResourceCalculateRsp::mutable_resourcearray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUserResourceCalculateRsp.ResourceArray)
  return resourcearray_.Mutable(index);
}
inline ::pb::TUserResourceData* TUserResourceCalculateRsp::add_resourcearray() {
  // @@protoc_insertion_point(field_add:pb.TUserResourceCalculateRsp.ResourceArray)
  return resourcearray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserResourceData >&
TUserResourceCalculateRsp::resourcearray() const {
  // @@protoc_insertion_point(field_list:pb.TUserResourceCalculateRsp.ResourceArray)
  return resourcearray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserResourceData >*
TUserResourceCalculateRsp::mutable_resourcearray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUserResourceCalculateRsp.ResourceArray)
  return &resourcearray_;
}

// -------------------------------------------------------------------

// TUserSubGoldByInnerReq

// optional uint32 SubNum = 1;
inline bool TUserSubGoldByInnerReq::has_subnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserSubGoldByInnerReq::set_has_subnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserSubGoldByInnerReq::clear_has_subnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserSubGoldByInnerReq::clear_subnum() {
  subnum_ = 0u;
  clear_has_subnum();
}
inline ::google::protobuf::uint32 TUserSubGoldByInnerReq::subnum() const {
  // @@protoc_insertion_point(field_get:pb.TUserSubGoldByInnerReq.SubNum)
  return subnum_;
}
inline void TUserSubGoldByInnerReq::set_subnum(::google::protobuf::uint32 value) {
  set_has_subnum();
  subnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSubGoldByInnerReq.SubNum)
}

// -------------------------------------------------------------------

// TUserSimpleInfo

// optional uint64 Uid = 1;
inline bool TUserSimpleInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserSimpleInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserSimpleInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserSimpleInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TUserSimpleInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.Uid)
  return uid_;
}
inline void TUserSimpleInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.Uid)
}

// optional string Uname = 2;
inline bool TUserSimpleInfo::has_uname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserSimpleInfo::set_has_uname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserSimpleInfo::clear_has_uname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserSimpleInfo::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TUserSimpleInfo::uname() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.Uname)
  return *uname_;
}
inline void TUserSimpleInfo::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.Uname)
}
inline void TUserSimpleInfo::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TUserSimpleInfo.Uname)
}
inline void TUserSimpleInfo::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TUserSimpleInfo.Uname)
}
inline ::std::string* TUserSimpleInfo::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TUserSimpleInfo.Uname)
  return uname_;
}
inline ::std::string* TUserSimpleInfo::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TUserSimpleInfo::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserSimpleInfo.Uname)
}

// optional uint32 Htid = 3;
inline bool TUserSimpleInfo::has_htid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUserSimpleInfo::set_has_htid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUserSimpleInfo::clear_has_htid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUserSimpleInfo::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TUserSimpleInfo::htid() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.Htid)
  return htid_;
}
inline void TUserSimpleInfo::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.Htid)
}

// optional uint32 Level = 4;
inline bool TUserSimpleInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUserSimpleInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUserSimpleInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUserSimpleInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TUserSimpleInfo::level() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.Level)
  return level_;
}
inline void TUserSimpleInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.Level)
}

// optional uint32 VipLevel = 5;
inline bool TUserSimpleInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TUserSimpleInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TUserSimpleInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TUserSimpleInfo::clear_viplevel() {
  viplevel_ = 0u;
  clear_has_viplevel();
}
inline ::google::protobuf::uint32 TUserSimpleInfo::viplevel() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.VipLevel)
  return viplevel_;
}
inline void TUserSimpleInfo::set_viplevel(::google::protobuf::uint32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.VipLevel)
}

// optional uint64 FightForce = 6;
inline bool TUserSimpleInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TUserSimpleInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TUserSimpleInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TUserSimpleInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TUserSimpleInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.FightForce)
  return fightforce_;
}
inline void TUserSimpleInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.FightForce)
}

// optional uint64 GuildId = 7;
inline bool TUserSimpleInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TUserSimpleInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TUserSimpleInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TUserSimpleInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TUserSimpleInfo::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.GuildId)
  return guildid_;
}
inline void TUserSimpleInfo::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.GuildId)
}

// optional string GuildName = 8;
inline bool TUserSimpleInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TUserSimpleInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TUserSimpleInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TUserSimpleInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& TUserSimpleInfo::guildname() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.GuildName)
  return *guildname_;
}
inline void TUserSimpleInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.GuildName)
}
inline void TUserSimpleInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TUserSimpleInfo.GuildName)
}
inline void TUserSimpleInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TUserSimpleInfo.GuildName)
}
inline ::std::string* TUserSimpleInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TUserSimpleInfo.GuildName)
  return guildname_;
}
inline ::std::string* TUserSimpleInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TUserSimpleInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserSimpleInfo.GuildName)
}

// optional uint32 PlayerImageFrameTid = 9;
inline bool TUserSimpleInfo::has_playerimageframetid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TUserSimpleInfo::set_has_playerimageframetid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TUserSimpleInfo::clear_has_playerimageframetid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TUserSimpleInfo::clear_playerimageframetid() {
  playerimageframetid_ = 0u;
  clear_has_playerimageframetid();
}
inline ::google::protobuf::uint32 TUserSimpleInfo::playerimageframetid() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.PlayerImageFrameTid)
  return playerimageframetid_;
}
inline void TUserSimpleInfo::set_playerimageframetid(::google::protobuf::uint32 value) {
  set_has_playerimageframetid();
  playerimageframetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.PlayerImageFrameTid)
}

// optional uint32 CurMount = 10;
inline bool TUserSimpleInfo::has_curmount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TUserSimpleInfo::set_has_curmount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TUserSimpleInfo::clear_has_curmount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TUserSimpleInfo::clear_curmount() {
  curmount_ = 0u;
  clear_has_curmount();
}
inline ::google::protobuf::uint32 TUserSimpleInfo::curmount() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.CurMount)
  return curmount_;
}
inline void TUserSimpleInfo::set_curmount(::google::protobuf::uint32 value) {
  set_has_curmount();
  curmount_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.CurMount)
}

// optional uint32 MasterHtid = 11;
inline bool TUserSimpleInfo::has_masterhtid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TUserSimpleInfo::set_has_masterhtid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TUserSimpleInfo::clear_has_masterhtid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TUserSimpleInfo::clear_masterhtid() {
  masterhtid_ = 0u;
  clear_has_masterhtid();
}
inline ::google::protobuf::uint32 TUserSimpleInfo::masterhtid() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.MasterHtid)
  return masterhtid_;
}
inline void TUserSimpleInfo::set_masterhtid(::google::protobuf::uint32 value) {
  set_has_masterhtid();
  masterhtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.MasterHtid)
}

// optional uint32 Title = 12;
inline bool TUserSimpleInfo::has_title() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TUserSimpleInfo::set_has_title() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TUserSimpleInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TUserSimpleInfo::clear_title() {
  title_ = 0u;
  clear_has_title();
}
inline ::google::protobuf::uint32 TUserSimpleInfo::title() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.Title)
  return title_;
}
inline void TUserSimpleInfo::set_title(::google::protobuf::uint32 value) {
  set_has_title();
  title_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.Title)
}

// optional uint32 PlayerModelHeroStar = 13;
inline bool TUserSimpleInfo::has_playermodelherostar() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TUserSimpleInfo::set_has_playermodelherostar() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TUserSimpleInfo::clear_has_playermodelherostar() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TUserSimpleInfo::clear_playermodelherostar() {
  playermodelherostar_ = 0u;
  clear_has_playermodelherostar();
}
inline ::google::protobuf::uint32 TUserSimpleInfo::playermodelherostar() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.PlayerModelHeroStar)
  return playermodelherostar_;
}
inline void TUserSimpleInfo::set_playermodelherostar(::google::protobuf::uint32 value) {
  set_has_playermodelherostar();
  playermodelherostar_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.PlayerModelHeroStar)
}

// optional string BannerName = 14;
inline bool TUserSimpleInfo::has_bannername() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TUserSimpleInfo::set_has_bannername() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TUserSimpleInfo::clear_has_bannername() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TUserSimpleInfo::clear_bannername() {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_->clear();
  }
  clear_has_bannername();
}
inline const ::std::string& TUserSimpleInfo::bannername() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.BannerName)
  return *bannername_;
}
inline void TUserSimpleInfo::set_bannername(const ::std::string& value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.BannerName)
}
inline void TUserSimpleInfo::set_bannername(const char* value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TUserSimpleInfo.BannerName)
}
inline void TUserSimpleInfo::set_bannername(const char* value, size_t size) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TUserSimpleInfo.BannerName)
}
inline ::std::string* TUserSimpleInfo::mutable_bannername() {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TUserSimpleInfo.BannerName)
  return bannername_;
}
inline ::std::string* TUserSimpleInfo::release_bannername() {
  clear_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bannername_;
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TUserSimpleInfo::set_allocated_bannername(::std::string* bannername) {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (bannername) {
    set_has_bannername();
    bannername_ = bannername;
  } else {
    clear_has_bannername();
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserSimpleInfo.BannerName)
}

// optional uint32 BannerBase = 15;
inline bool TUserSimpleInfo::has_bannerbase() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TUserSimpleInfo::set_has_bannerbase() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TUserSimpleInfo::clear_has_bannerbase() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TUserSimpleInfo::clear_bannerbase() {
  bannerbase_ = 0u;
  clear_has_bannerbase();
}
inline ::google::protobuf::uint32 TUserSimpleInfo::bannerbase() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.BannerBase)
  return bannerbase_;
}
inline void TUserSimpleInfo::set_bannerbase(::google::protobuf::uint32 value) {
  set_has_bannerbase();
  bannerbase_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.BannerBase)
}

// optional uint32 IsShowVip = 16;
inline bool TUserSimpleInfo::has_isshowvip() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TUserSimpleInfo::set_has_isshowvip() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TUserSimpleInfo::clear_has_isshowvip() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TUserSimpleInfo::clear_isshowvip() {
  isshowvip_ = 0u;
  clear_has_isshowvip();
}
inline ::google::protobuf::uint32 TUserSimpleInfo::isshowvip() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.IsShowVip)
  return isshowvip_;
}
inline void TUserSimpleInfo::set_isshowvip(::google::protobuf::uint32 value) {
  set_has_isshowvip();
  isshowvip_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.IsShowVip)
}

// optional uint32 CanStrangerChat = 17;
inline bool TUserSimpleInfo::has_canstrangerchat() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TUserSimpleInfo::set_has_canstrangerchat() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TUserSimpleInfo::clear_has_canstrangerchat() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TUserSimpleInfo::clear_canstrangerchat() {
  canstrangerchat_ = 0u;
  clear_has_canstrangerchat();
}
inline ::google::protobuf::uint32 TUserSimpleInfo::canstrangerchat() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.CanStrangerChat)
  return canstrangerchat_;
}
inline void TUserSimpleInfo::set_canstrangerchat(::google::protobuf::uint32 value) {
  set_has_canstrangerchat();
  canstrangerchat_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.CanStrangerChat)
}

// optional uint32 IsRefuseLowAdventure = 18;
inline bool TUserSimpleInfo::has_isrefuselowadventure() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TUserSimpleInfo::set_has_isrefuselowadventure() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TUserSimpleInfo::clear_has_isrefuselowadventure() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TUserSimpleInfo::clear_isrefuselowadventure() {
  isrefuselowadventure_ = 0u;
  clear_has_isrefuselowadventure();
}
inline ::google::protobuf::uint32 TUserSimpleInfo::isrefuselowadventure() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.IsRefuseLowAdventure)
  return isrefuselowadventure_;
}
inline void TUserSimpleInfo::set_isrefuselowadventure(::google::protobuf::uint32 value) {
  set_has_isrefuselowadventure();
  isrefuselowadventure_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.IsRefuseLowAdventure)
}

// optional string ServerId = 19;
inline bool TUserSimpleInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TUserSimpleInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TUserSimpleInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TUserSimpleInfo::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TUserSimpleInfo::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.ServerId)
  return *serverid_;
}
inline void TUserSimpleInfo::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.ServerId)
}
inline void TUserSimpleInfo::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TUserSimpleInfo.ServerId)
}
inline void TUserSimpleInfo::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TUserSimpleInfo.ServerId)
}
inline ::std::string* TUserSimpleInfo::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TUserSimpleInfo.ServerId)
  return serverid_;
}
inline ::std::string* TUserSimpleInfo::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TUserSimpleInfo::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserSimpleInfo.ServerId)
}

// optional uint32 ChatFrameTid = 20;
inline bool TUserSimpleInfo::has_chatframetid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TUserSimpleInfo::set_has_chatframetid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TUserSimpleInfo::clear_has_chatframetid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TUserSimpleInfo::clear_chatframetid() {
  chatframetid_ = 0u;
  clear_has_chatframetid();
}
inline ::google::protobuf::uint32 TUserSimpleInfo::chatframetid() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.ChatFrameTid)
  return chatframetid_;
}
inline void TUserSimpleInfo::set_chatframetid(::google::protobuf::uint32 value) {
  set_has_chatframetid();
  chatframetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.ChatFrameTid)
}

// optional uint64 MaxFightForce = 21;
inline bool TUserSimpleInfo::has_maxfightforce() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TUserSimpleInfo::set_has_maxfightforce() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TUserSimpleInfo::clear_has_maxfightforce() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TUserSimpleInfo::clear_maxfightforce() {
  maxfightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_maxfightforce();
}
inline ::google::protobuf::uint64 TUserSimpleInfo::maxfightforce() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfo.MaxFightForce)
  return maxfightforce_;
}
inline void TUserSimpleInfo::set_maxfightforce(::google::protobuf::uint64 value) {
  set_has_maxfightforce();
  maxfightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfo.MaxFightForce)
}

// -------------------------------------------------------------------

// TUserSimpleInfoWithStatus

// optional .pb.TUserSimpleInfo SimpleInfo = 1;
inline bool TUserSimpleInfoWithStatus::has_simpleinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserSimpleInfoWithStatus::set_has_simpleinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserSimpleInfoWithStatus::clear_has_simpleinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserSimpleInfoWithStatus::clear_simpleinfo() {
  if (simpleinfo_ != NULL) simpleinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_simpleinfo();
}
inline const ::pb::TUserSimpleInfo& TUserSimpleInfoWithStatus::simpleinfo() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfoWithStatus.SimpleInfo)
  return simpleinfo_ != NULL ? *simpleinfo_ : *default_instance_->simpleinfo_;
}
inline ::pb::TUserSimpleInfo* TUserSimpleInfoWithStatus::mutable_simpleinfo() {
  set_has_simpleinfo();
  if (simpleinfo_ == NULL) simpleinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TUserSimpleInfoWithStatus.SimpleInfo)
  return simpleinfo_;
}
inline ::pb::TUserSimpleInfo* TUserSimpleInfoWithStatus::release_simpleinfo() {
  clear_has_simpleinfo();
  ::pb::TUserSimpleInfo* temp = simpleinfo_;
  simpleinfo_ = NULL;
  return temp;
}
inline void TUserSimpleInfoWithStatus::set_allocated_simpleinfo(::pb::TUserSimpleInfo* simpleinfo) {
  delete simpleinfo_;
  simpleinfo_ = simpleinfo;
  if (simpleinfo) {
    set_has_simpleinfo();
  } else {
    clear_has_simpleinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserSimpleInfoWithStatus.SimpleInfo)
}

// optional uint32 Status = 2;
inline bool TUserSimpleInfoWithStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserSimpleInfoWithStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserSimpleInfoWithStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserSimpleInfoWithStatus::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 TUserSimpleInfoWithStatus::status() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfoWithStatus.Status)
  return status_;
}
inline void TUserSimpleInfoWithStatus::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfoWithStatus.Status)
}

// optional uint64 LogoffTime = 3;
inline bool TUserSimpleInfoWithStatus::has_logofftime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUserSimpleInfoWithStatus::set_has_logofftime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUserSimpleInfoWithStatus::clear_has_logofftime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUserSimpleInfoWithStatus::clear_logofftime() {
  logofftime_ = GOOGLE_ULONGLONG(0);
  clear_has_logofftime();
}
inline ::google::protobuf::uint64 TUserSimpleInfoWithStatus::logofftime() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfoWithStatus.LogoffTime)
  return logofftime_;
}
inline void TUserSimpleInfoWithStatus::set_logofftime(::google::protobuf::uint64 value) {
  set_has_logofftime();
  logofftime_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfoWithStatus.LogoffTime)
}

// optional string SignWords = 4;
inline bool TUserSimpleInfoWithStatus::has_signwords() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUserSimpleInfoWithStatus::set_has_signwords() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUserSimpleInfoWithStatus::clear_has_signwords() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUserSimpleInfoWithStatus::clear_signwords() {
  if (signwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signwords_->clear();
  }
  clear_has_signwords();
}
inline const ::std::string& TUserSimpleInfoWithStatus::signwords() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfoWithStatus.SignWords)
  return *signwords_;
}
inline void TUserSimpleInfoWithStatus::set_signwords(const ::std::string& value) {
  set_has_signwords();
  if (signwords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signwords_ = new ::std::string;
  }
  signwords_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfoWithStatus.SignWords)
}
inline void TUserSimpleInfoWithStatus::set_signwords(const char* value) {
  set_has_signwords();
  if (signwords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signwords_ = new ::std::string;
  }
  signwords_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TUserSimpleInfoWithStatus.SignWords)
}
inline void TUserSimpleInfoWithStatus::set_signwords(const char* value, size_t size) {
  set_has_signwords();
  if (signwords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signwords_ = new ::std::string;
  }
  signwords_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TUserSimpleInfoWithStatus.SignWords)
}
inline ::std::string* TUserSimpleInfoWithStatus::mutable_signwords() {
  set_has_signwords();
  if (signwords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signwords_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TUserSimpleInfoWithStatus.SignWords)
  return signwords_;
}
inline ::std::string* TUserSimpleInfoWithStatus::release_signwords() {
  clear_has_signwords();
  if (signwords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = signwords_;
    signwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TUserSimpleInfoWithStatus::set_allocated_signwords(::std::string* signwords) {
  if (signwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signwords_;
  }
  if (signwords) {
    set_has_signwords();
    signwords_ = signwords;
  } else {
    clear_has_signwords();
    signwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserSimpleInfoWithStatus.SignWords)
}

// -------------------------------------------------------------------

// TUserSimpleInfoWithAlly

// optional .pb.TUserSimpleInfo SimpleInfo = 1;
inline bool TUserSimpleInfoWithAlly::has_simpleinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserSimpleInfoWithAlly::set_has_simpleinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserSimpleInfoWithAlly::clear_has_simpleinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserSimpleInfoWithAlly::clear_simpleinfo() {
  if (simpleinfo_ != NULL) simpleinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_simpleinfo();
}
inline const ::pb::TUserSimpleInfo& TUserSimpleInfoWithAlly::simpleinfo() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfoWithAlly.SimpleInfo)
  return simpleinfo_ != NULL ? *simpleinfo_ : *default_instance_->simpleinfo_;
}
inline ::pb::TUserSimpleInfo* TUserSimpleInfoWithAlly::mutable_simpleinfo() {
  set_has_simpleinfo();
  if (simpleinfo_ == NULL) simpleinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TUserSimpleInfoWithAlly.SimpleInfo)
  return simpleinfo_;
}
inline ::pb::TUserSimpleInfo* TUserSimpleInfoWithAlly::release_simpleinfo() {
  clear_has_simpleinfo();
  ::pb::TUserSimpleInfo* temp = simpleinfo_;
  simpleinfo_ = NULL;
  return temp;
}
inline void TUserSimpleInfoWithAlly::set_allocated_simpleinfo(::pb::TUserSimpleInfo* simpleinfo) {
  delete simpleinfo_;
  simpleinfo_ = simpleinfo;
  if (simpleinfo) {
    set_has_simpleinfo();
  } else {
    clear_has_simpleinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserSimpleInfoWithAlly.SimpleInfo)
}

// optional string AllyName = 2;
inline bool TUserSimpleInfoWithAlly::has_allyname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserSimpleInfoWithAlly::set_has_allyname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserSimpleInfoWithAlly::clear_has_allyname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserSimpleInfoWithAlly::clear_allyname() {
  if (allyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    allyname_->clear();
  }
  clear_has_allyname();
}
inline const ::std::string& TUserSimpleInfoWithAlly::allyname() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfoWithAlly.AllyName)
  return *allyname_;
}
inline void TUserSimpleInfoWithAlly::set_allyname(const ::std::string& value) {
  set_has_allyname();
  if (allyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    allyname_ = new ::std::string;
  }
  allyname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfoWithAlly.AllyName)
}
inline void TUserSimpleInfoWithAlly::set_allyname(const char* value) {
  set_has_allyname();
  if (allyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    allyname_ = new ::std::string;
  }
  allyname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TUserSimpleInfoWithAlly.AllyName)
}
inline void TUserSimpleInfoWithAlly::set_allyname(const char* value, size_t size) {
  set_has_allyname();
  if (allyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    allyname_ = new ::std::string;
  }
  allyname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TUserSimpleInfoWithAlly.AllyName)
}
inline ::std::string* TUserSimpleInfoWithAlly::mutable_allyname() {
  set_has_allyname();
  if (allyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    allyname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TUserSimpleInfoWithAlly.AllyName)
  return allyname_;
}
inline ::std::string* TUserSimpleInfoWithAlly::release_allyname() {
  clear_has_allyname();
  if (allyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = allyname_;
    allyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TUserSimpleInfoWithAlly::set_allocated_allyname(::std::string* allyname) {
  if (allyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete allyname_;
  }
  if (allyname) {
    set_has_allyname();
    allyname_ = allyname;
  } else {
    clear_has_allyname();
    allyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserSimpleInfoWithAlly.AllyName)
}

// optional uint64 AllyId = 3;
inline bool TUserSimpleInfoWithAlly::has_allyid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUserSimpleInfoWithAlly::set_has_allyid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUserSimpleInfoWithAlly::clear_has_allyid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUserSimpleInfoWithAlly::clear_allyid() {
  allyid_ = GOOGLE_ULONGLONG(0);
  clear_has_allyid();
}
inline ::google::protobuf::uint64 TUserSimpleInfoWithAlly::allyid() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfoWithAlly.AllyId)
  return allyid_;
}
inline void TUserSimpleInfoWithAlly::set_allyid(::google::protobuf::uint64 value) {
  set_has_allyid();
  allyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfoWithAlly.AllyId)
}

// optional string BannerName = 4;
inline bool TUserSimpleInfoWithAlly::has_bannername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUserSimpleInfoWithAlly::set_has_bannername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUserSimpleInfoWithAlly::clear_has_bannername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUserSimpleInfoWithAlly::clear_bannername() {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_->clear();
  }
  clear_has_bannername();
}
inline const ::std::string& TUserSimpleInfoWithAlly::bannername() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfoWithAlly.BannerName)
  return *bannername_;
}
inline void TUserSimpleInfoWithAlly::set_bannername(const ::std::string& value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfoWithAlly.BannerName)
}
inline void TUserSimpleInfoWithAlly::set_bannername(const char* value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TUserSimpleInfoWithAlly.BannerName)
}
inline void TUserSimpleInfoWithAlly::set_bannername(const char* value, size_t size) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TUserSimpleInfoWithAlly.BannerName)
}
inline ::std::string* TUserSimpleInfoWithAlly::mutable_bannername() {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TUserSimpleInfoWithAlly.BannerName)
  return bannername_;
}
inline ::std::string* TUserSimpleInfoWithAlly::release_bannername() {
  clear_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bannername_;
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TUserSimpleInfoWithAlly::set_allocated_bannername(::std::string* bannername) {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (bannername) {
    set_has_bannername();
    bannername_ = bannername;
  } else {
    clear_has_bannername();
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserSimpleInfoWithAlly.BannerName)
}

// optional uint32 BannerBase = 5;
inline bool TUserSimpleInfoWithAlly::has_bannerbase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TUserSimpleInfoWithAlly::set_has_bannerbase() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TUserSimpleInfoWithAlly::clear_has_bannerbase() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TUserSimpleInfoWithAlly::clear_bannerbase() {
  bannerbase_ = 0u;
  clear_has_bannerbase();
}
inline ::google::protobuf::uint32 TUserSimpleInfoWithAlly::bannerbase() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfoWithAlly.BannerBase)
  return bannerbase_;
}
inline void TUserSimpleInfoWithAlly::set_bannerbase(::google::protobuf::uint32 value) {
  set_has_bannerbase();
  bannerbase_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfoWithAlly.BannerBase)
}

// optional uint32 BannerFigure = 6;
inline bool TUserSimpleInfoWithAlly::has_bannerfigure() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TUserSimpleInfoWithAlly::set_has_bannerfigure() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TUserSimpleInfoWithAlly::clear_has_bannerfigure() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TUserSimpleInfoWithAlly::clear_bannerfigure() {
  bannerfigure_ = 0u;
  clear_has_bannerfigure();
}
inline ::google::protobuf::uint32 TUserSimpleInfoWithAlly::bannerfigure() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfoWithAlly.BannerFigure)
  return bannerfigure_;
}
inline void TUserSimpleInfoWithAlly::set_bannerfigure(::google::protobuf::uint32 value) {
  set_has_bannerfigure();
  bannerfigure_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfoWithAlly.BannerFigure)
}

// optional uint64 FightForce = 7;
inline bool TUserSimpleInfoWithAlly::has_fightforce() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TUserSimpleInfoWithAlly::set_has_fightforce() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TUserSimpleInfoWithAlly::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TUserSimpleInfoWithAlly::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TUserSimpleInfoWithAlly::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TUserSimpleInfoWithAlly.FightForce)
  return fightforce_;
}
inline void TUserSimpleInfoWithAlly::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSimpleInfoWithAlly.FightForce)
}

// -------------------------------------------------------------------

// TUserGetArrUserDataRpgReq

// repeated uint64 UidArray = 1;
inline int TUserGetArrUserDataRpgReq::uidarray_size() const {
  return uidarray_.size();
}
inline void TUserGetArrUserDataRpgReq::clear_uidarray() {
  uidarray_.Clear();
}
inline ::google::protobuf::uint64 TUserGetArrUserDataRpgReq::uidarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUserGetArrUserDataRpgReq.UidArray)
  return uidarray_.Get(index);
}
inline void TUserGetArrUserDataRpgReq::set_uidarray(int index, ::google::protobuf::uint64 value) {
  uidarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TUserGetArrUserDataRpgReq.UidArray)
}
inline void TUserGetArrUserDataRpgReq::add_uidarray(::google::protobuf::uint64 value) {
  uidarray_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TUserGetArrUserDataRpgReq.UidArray)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TUserGetArrUserDataRpgReq::uidarray() const {
  // @@protoc_insertion_point(field_list:pb.TUserGetArrUserDataRpgReq.UidArray)
  return uidarray_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TUserGetArrUserDataRpgReq::mutable_uidarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUserGetArrUserDataRpgReq.UidArray)
  return &uidarray_;
}

// -------------------------------------------------------------------

// TUserGetArrUserDataRpgRsp

// repeated .pb.TUserSimpleInfo UserDataArray = 1;
inline int TUserGetArrUserDataRpgRsp::userdataarray_size() const {
  return userdataarray_.size();
}
inline void TUserGetArrUserDataRpgRsp::clear_userdataarray() {
  userdataarray_.Clear();
}
inline const ::pb::TUserSimpleInfo& TUserGetArrUserDataRpgRsp::userdataarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUserGetArrUserDataRpgRsp.UserDataArray)
  return userdataarray_.Get(index);
}
inline ::pb::TUserSimpleInfo* TUserGetArrUserDataRpgRsp::mutable_userdataarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUserGetArrUserDataRpgRsp.UserDataArray)
  return userdataarray_.Mutable(index);
}
inline ::pb::TUserSimpleInfo* TUserGetArrUserDataRpgRsp::add_userdataarray() {
  // @@protoc_insertion_point(field_add:pb.TUserGetArrUserDataRpgRsp.UserDataArray)
  return userdataarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
TUserGetArrUserDataRpgRsp::userdataarray() const {
  // @@protoc_insertion_point(field_list:pb.TUserGetArrUserDataRpgRsp.UserDataArray)
  return userdataarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
TUserGetArrUserDataRpgRsp::mutable_userdataarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUserGetArrUserDataRpgRsp.UserDataArray)
  return &userdataarray_;
}

// -------------------------------------------------------------------

// TUserFightForceRankItem

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TUserFightForceRankItem::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserFightForceRankItem::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserFightForceRankItem::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserFightForceRankItem::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TUserFightForceRankItem::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TUserFightForceRankItem.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TUserFightForceRankItem::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TUserFightForceRankItem.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TUserFightForceRankItem::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TUserFightForceRankItem::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserFightForceRankItem.UserInfo)
}

// -------------------------------------------------------------------

// TUserFightForceRankReq

// optional int32 Offset = 1;
inline bool TUserFightForceRankReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserFightForceRankReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserFightForceRankReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserFightForceRankReq::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 TUserFightForceRankReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TUserFightForceRankReq.Offset)
  return offset_;
}
inline void TUserFightForceRankReq::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserFightForceRankReq.Offset)
}

// optional int32 Limit = 2;
inline bool TUserFightForceRankReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserFightForceRankReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserFightForceRankReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserFightForceRankReq::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 TUserFightForceRankReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TUserFightForceRankReq.Limit)
  return limit_;
}
inline void TUserFightForceRankReq::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserFightForceRankReq.Limit)
}

// -------------------------------------------------------------------

// TUserFightForceRankRsp

// repeated .pb.TUserFightForceRankItem RankArr = 1;
inline int TUserFightForceRankRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TUserFightForceRankRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TUserFightForceRankItem& TUserFightForceRankRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUserFightForceRankRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TUserFightForceRankItem* TUserFightForceRankRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUserFightForceRankRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TUserFightForceRankItem* TUserFightForceRankRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TUserFightForceRankRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserFightForceRankItem >&
TUserFightForceRankRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TUserFightForceRankRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserFightForceRankItem >*
TUserFightForceRankRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUserFightForceRankRsp.RankArr)
  return &rankarr_;
}

// optional int32 MyRank = 2;
inline bool TUserFightForceRankRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserFightForceRankRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserFightForceRankRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserFightForceRankRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TUserFightForceRankRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TUserFightForceRankRsp.MyRank)
  return myrank_;
}
inline void TUserFightForceRankRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserFightForceRankRsp.MyRank)
}

// -------------------------------------------------------------------

// TUserLevelRankItem

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TUserLevelRankItem::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserLevelRankItem::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserLevelRankItem::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserLevelRankItem::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TUserLevelRankItem::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TUserLevelRankItem.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TUserLevelRankItem::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TUserLevelRankItem.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TUserLevelRankItem::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TUserLevelRankItem::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserLevelRankItem.UserInfo)
}

// optional uint32 Exp = 2;
inline bool TUserLevelRankItem::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserLevelRankItem::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserLevelRankItem::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserLevelRankItem::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 TUserLevelRankItem::exp() const {
  // @@protoc_insertion_point(field_get:pb.TUserLevelRankItem.Exp)
  return exp_;
}
inline void TUserLevelRankItem::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserLevelRankItem.Exp)
}

// optional uint64 ExpChangeTime = 3;
inline bool TUserLevelRankItem::has_expchangetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUserLevelRankItem::set_has_expchangetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUserLevelRankItem::clear_has_expchangetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUserLevelRankItem::clear_expchangetime() {
  expchangetime_ = GOOGLE_ULONGLONG(0);
  clear_has_expchangetime();
}
inline ::google::protobuf::uint64 TUserLevelRankItem::expchangetime() const {
  // @@protoc_insertion_point(field_get:pb.TUserLevelRankItem.ExpChangeTime)
  return expchangetime_;
}
inline void TUserLevelRankItem::set_expchangetime(::google::protobuf::uint64 value) {
  set_has_expchangetime();
  expchangetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserLevelRankItem.ExpChangeTime)
}

// -------------------------------------------------------------------

// TUserLevelRankReq

// optional int32 Offset = 1;
inline bool TUserLevelRankReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserLevelRankReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserLevelRankReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserLevelRankReq::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 TUserLevelRankReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TUserLevelRankReq.Offset)
  return offset_;
}
inline void TUserLevelRankReq::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserLevelRankReq.Offset)
}

// optional int32 Limit = 2;
inline bool TUserLevelRankReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserLevelRankReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserLevelRankReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserLevelRankReq::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 TUserLevelRankReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TUserLevelRankReq.Limit)
  return limit_;
}
inline void TUserLevelRankReq::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserLevelRankReq.Limit)
}

// -------------------------------------------------------------------

// TUserLevelRankRsp

// repeated .pb.TUserLevelRankItem RankArr = 1;
inline int TUserLevelRankRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TUserLevelRankRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TUserLevelRankItem& TUserLevelRankRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUserLevelRankRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TUserLevelRankItem* TUserLevelRankRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUserLevelRankRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TUserLevelRankItem* TUserLevelRankRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TUserLevelRankRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserLevelRankItem >&
TUserLevelRankRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TUserLevelRankRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserLevelRankItem >*
TUserLevelRankRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUserLevelRankRsp.RankArr)
  return &rankarr_;
}

// optional int32 MyRank = 2;
inline bool TUserLevelRankRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserLevelRankRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserLevelRankRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserLevelRankRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TUserLevelRankRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TUserLevelRankRsp.MyRank)
  return myrank_;
}
inline void TUserLevelRankRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserLevelRankRsp.MyRank)
}

// -------------------------------------------------------------------

// TUserSetPlayerImageReq

// optional int32 PlayerImageFrameTid = 1;
inline bool TUserSetPlayerImageReq::has_playerimageframetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserSetPlayerImageReq::set_has_playerimageframetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserSetPlayerImageReq::clear_has_playerimageframetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserSetPlayerImageReq::clear_playerimageframetid() {
  playerimageframetid_ = 0;
  clear_has_playerimageframetid();
}
inline ::google::protobuf::int32 TUserSetPlayerImageReq::playerimageframetid() const {
  // @@protoc_insertion_point(field_get:pb.TUserSetPlayerImageReq.PlayerImageFrameTid)
  return playerimageframetid_;
}
inline void TUserSetPlayerImageReq::set_playerimageframetid(::google::protobuf::int32 value) {
  set_has_playerimageframetid();
  playerimageframetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSetPlayerImageReq.PlayerImageFrameTid)
}

// -------------------------------------------------------------------

// TUserSetSignWordsReq

// optional string SignWords = 1;
inline bool TUserSetSignWordsReq::has_signwords() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserSetSignWordsReq::set_has_signwords() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserSetSignWordsReq::clear_has_signwords() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserSetSignWordsReq::clear_signwords() {
  if (signwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signwords_->clear();
  }
  clear_has_signwords();
}
inline const ::std::string& TUserSetSignWordsReq::signwords() const {
  // @@protoc_insertion_point(field_get:pb.TUserSetSignWordsReq.SignWords)
  return *signwords_;
}
inline void TUserSetSignWordsReq::set_signwords(const ::std::string& value) {
  set_has_signwords();
  if (signwords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signwords_ = new ::std::string;
  }
  signwords_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TUserSetSignWordsReq.SignWords)
}
inline void TUserSetSignWordsReq::set_signwords(const char* value) {
  set_has_signwords();
  if (signwords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signwords_ = new ::std::string;
  }
  signwords_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TUserSetSignWordsReq.SignWords)
}
inline void TUserSetSignWordsReq::set_signwords(const char* value, size_t size) {
  set_has_signwords();
  if (signwords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signwords_ = new ::std::string;
  }
  signwords_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TUserSetSignWordsReq.SignWords)
}
inline ::std::string* TUserSetSignWordsReq::mutable_signwords() {
  set_has_signwords();
  if (signwords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signwords_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TUserSetSignWordsReq.SignWords)
  return signwords_;
}
inline ::std::string* TUserSetSignWordsReq::release_signwords() {
  clear_has_signwords();
  if (signwords_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = signwords_;
    signwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TUserSetSignWordsReq::set_allocated_signwords(::std::string* signwords) {
  if (signwords_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signwords_;
  }
  if (signwords) {
    set_has_signwords();
    signwords_ = signwords;
  } else {
    clear_has_signwords();
    signwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserSetSignWordsReq.SignWords)
}

// -------------------------------------------------------------------

// TUserSetModelReq

// optional int32 Htid = 1;
inline bool TUserSetModelReq::has_htid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserSetModelReq::set_has_htid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserSetModelReq::clear_has_htid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserSetModelReq::clear_htid() {
  htid_ = 0;
  clear_has_htid();
}
inline ::google::protobuf::int32 TUserSetModelReq::htid() const {
  // @@protoc_insertion_point(field_get:pb.TUserSetModelReq.Htid)
  return htid_;
}
inline void TUserSetModelReq::set_htid(::google::protobuf::int32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSetModelReq.Htid)
}

// -------------------------------------------------------------------

// TUserChangeUnameReq

// optional string Uname = 1;
inline bool TUserChangeUnameReq::has_uname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserChangeUnameReq::set_has_uname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserChangeUnameReq::clear_has_uname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserChangeUnameReq::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TUserChangeUnameReq::uname() const {
  // @@protoc_insertion_point(field_get:pb.TUserChangeUnameReq.Uname)
  return *uname_;
}
inline void TUserChangeUnameReq::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TUserChangeUnameReq.Uname)
}
inline void TUserChangeUnameReq::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TUserChangeUnameReq.Uname)
}
inline void TUserChangeUnameReq::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TUserChangeUnameReq.Uname)
}
inline ::std::string* TUserChangeUnameReq::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TUserChangeUnameReq.Uname)
  return uname_;
}
inline ::std::string* TUserChangeUnameReq::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TUserChangeUnameReq::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserChangeUnameReq.Uname)
}

// optional uint32 NameType = 2;
inline bool TUserChangeUnameReq::has_nametype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserChangeUnameReq::set_has_nametype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserChangeUnameReq::clear_has_nametype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserChangeUnameReq::clear_nametype() {
  nametype_ = 0u;
  clear_has_nametype();
}
inline ::google::protobuf::uint32 TUserChangeUnameReq::nametype() const {
  // @@protoc_insertion_point(field_get:pb.TUserChangeUnameReq.NameType)
  return nametype_;
}
inline void TUserChangeUnameReq::set_nametype(::google::protobuf::uint32 value) {
  set_has_nametype();
  nametype_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserChangeUnameReq.NameType)
}

// -------------------------------------------------------------------

// TUserBuySilverCoinReq

// optional int32 HasBuyNum = 1;
inline bool TUserBuySilverCoinReq::has_hasbuynum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserBuySilverCoinReq::set_has_hasbuynum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserBuySilverCoinReq::clear_has_hasbuynum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserBuySilverCoinReq::clear_hasbuynum() {
  hasbuynum_ = 0;
  clear_has_hasbuynum();
}
inline ::google::protobuf::int32 TUserBuySilverCoinReq::hasbuynum() const {
  // @@protoc_insertion_point(field_get:pb.TUserBuySilverCoinReq.HasBuyNum)
  return hasbuynum_;
}
inline void TUserBuySilverCoinReq::set_hasbuynum(::google::protobuf::int32 value) {
  set_has_hasbuynum();
  hasbuynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserBuySilverCoinReq.HasBuyNum)
}

// optional int32 HasFreeNum = 2;
inline bool TUserBuySilverCoinReq::has_hasfreenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserBuySilverCoinReq::set_has_hasfreenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserBuySilverCoinReq::clear_has_hasfreenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserBuySilverCoinReq::clear_hasfreenum() {
  hasfreenum_ = 0;
  clear_has_hasfreenum();
}
inline ::google::protobuf::int32 TUserBuySilverCoinReq::hasfreenum() const {
  // @@protoc_insertion_point(field_get:pb.TUserBuySilverCoinReq.HasFreeNum)
  return hasfreenum_;
}
inline void TUserBuySilverCoinReq::set_hasfreenum(::google::protobuf::int32 value) {
  set_has_hasfreenum();
  hasfreenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserBuySilverCoinReq.HasFreeNum)
}

// optional int32 WantBuyNum = 3;
inline bool TUserBuySilverCoinReq::has_wantbuynum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUserBuySilverCoinReq::set_has_wantbuynum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUserBuySilverCoinReq::clear_has_wantbuynum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUserBuySilverCoinReq::clear_wantbuynum() {
  wantbuynum_ = 0;
  clear_has_wantbuynum();
}
inline ::google::protobuf::int32 TUserBuySilverCoinReq::wantbuynum() const {
  // @@protoc_insertion_point(field_get:pb.TUserBuySilverCoinReq.WantBuyNum)
  return wantbuynum_;
}
inline void TUserBuySilverCoinReq::set_wantbuynum(::google::protobuf::int32 value) {
  set_has_wantbuynum();
  wantbuynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserBuySilverCoinReq.WantBuyNum)
}

// -------------------------------------------------------------------

// TUserBuySilverCoinSingle

// optional int32 CostGoldNum = 1;
inline bool TUserBuySilverCoinSingle::has_costgoldnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserBuySilverCoinSingle::set_has_costgoldnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserBuySilverCoinSingle::clear_has_costgoldnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserBuySilverCoinSingle::clear_costgoldnum() {
  costgoldnum_ = 0;
  clear_has_costgoldnum();
}
inline ::google::protobuf::int32 TUserBuySilverCoinSingle::costgoldnum() const {
  // @@protoc_insertion_point(field_get:pb.TUserBuySilverCoinSingle.CostGoldNum)
  return costgoldnum_;
}
inline void TUserBuySilverCoinSingle::set_costgoldnum(::google::protobuf::int32 value) {
  set_has_costgoldnum();
  costgoldnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserBuySilverCoinSingle.CostGoldNum)
}

// optional int32 BuySilverCoinNum = 2;
inline bool TUserBuySilverCoinSingle::has_buysilvercoinnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserBuySilverCoinSingle::set_has_buysilvercoinnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserBuySilverCoinSingle::clear_has_buysilvercoinnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserBuySilverCoinSingle::clear_buysilvercoinnum() {
  buysilvercoinnum_ = 0;
  clear_has_buysilvercoinnum();
}
inline ::google::protobuf::int32 TUserBuySilverCoinSingle::buysilvercoinnum() const {
  // @@protoc_insertion_point(field_get:pb.TUserBuySilverCoinSingle.BuySilverCoinNum)
  return buysilvercoinnum_;
}
inline void TUserBuySilverCoinSingle::set_buysilvercoinnum(::google::protobuf::int32 value) {
  set_has_buysilvercoinnum();
  buysilvercoinnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserBuySilverCoinSingle.BuySilverCoinNum)
}

// optional int32 Multiple = 3;
inline bool TUserBuySilverCoinSingle::has_multiple() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUserBuySilverCoinSingle::set_has_multiple() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUserBuySilverCoinSingle::clear_has_multiple() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUserBuySilverCoinSingle::clear_multiple() {
  multiple_ = 0;
  clear_has_multiple();
}
inline ::google::protobuf::int32 TUserBuySilverCoinSingle::multiple() const {
  // @@protoc_insertion_point(field_get:pb.TUserBuySilverCoinSingle.Multiple)
  return multiple_;
}
inline void TUserBuySilverCoinSingle::set_multiple(::google::protobuf::int32 value) {
  set_has_multiple();
  multiple_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserBuySilverCoinSingle.Multiple)
}

// -------------------------------------------------------------------

// TUserBuySilverCoinRsp

// optional int32 HasBuyNum = 1;
inline bool TUserBuySilverCoinRsp::has_hasbuynum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserBuySilverCoinRsp::set_has_hasbuynum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserBuySilverCoinRsp::clear_has_hasbuynum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserBuySilverCoinRsp::clear_hasbuynum() {
  hasbuynum_ = 0;
  clear_has_hasbuynum();
}
inline ::google::protobuf::int32 TUserBuySilverCoinRsp::hasbuynum() const {
  // @@protoc_insertion_point(field_get:pb.TUserBuySilverCoinRsp.HasBuyNum)
  return hasbuynum_;
}
inline void TUserBuySilverCoinRsp::set_hasbuynum(::google::protobuf::int32 value) {
  set_has_hasbuynum();
  hasbuynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserBuySilverCoinRsp.HasBuyNum)
}

// optional int32 HasFreeNum = 2;
inline bool TUserBuySilverCoinRsp::has_hasfreenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserBuySilverCoinRsp::set_has_hasfreenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserBuySilverCoinRsp::clear_has_hasfreenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserBuySilverCoinRsp::clear_hasfreenum() {
  hasfreenum_ = 0;
  clear_has_hasfreenum();
}
inline ::google::protobuf::int32 TUserBuySilverCoinRsp::hasfreenum() const {
  // @@protoc_insertion_point(field_get:pb.TUserBuySilverCoinRsp.HasFreeNum)
  return hasfreenum_;
}
inline void TUserBuySilverCoinRsp::set_hasfreenum(::google::protobuf::int32 value) {
  set_has_hasfreenum();
  hasfreenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserBuySilverCoinRsp.HasFreeNum)
}

// repeated .pb.TUserBuySilverCoinSingle BuyInfoArr = 3;
inline int TUserBuySilverCoinRsp::buyinfoarr_size() const {
  return buyinfoarr_.size();
}
inline void TUserBuySilverCoinRsp::clear_buyinfoarr() {
  buyinfoarr_.Clear();
}
inline const ::pb::TUserBuySilverCoinSingle& TUserBuySilverCoinRsp::buyinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUserBuySilverCoinRsp.BuyInfoArr)
  return buyinfoarr_.Get(index);
}
inline ::pb::TUserBuySilverCoinSingle* TUserBuySilverCoinRsp::mutable_buyinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUserBuySilverCoinRsp.BuyInfoArr)
  return buyinfoarr_.Mutable(index);
}
inline ::pb::TUserBuySilverCoinSingle* TUserBuySilverCoinRsp::add_buyinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TUserBuySilverCoinRsp.BuyInfoArr)
  return buyinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserBuySilverCoinSingle >&
TUserBuySilverCoinRsp::buyinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TUserBuySilverCoinRsp.BuyInfoArr)
  return buyinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserBuySilverCoinSingle >*
TUserBuySilverCoinRsp::mutable_buyinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUserBuySilverCoinRsp.BuyInfoArr)
  return &buyinfoarr_;
}

// -------------------------------------------------------------------

// TUserBuyExecuteReq

// optional int32 HasBuyNum = 1;
inline bool TUserBuyExecuteReq::has_hasbuynum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserBuyExecuteReq::set_has_hasbuynum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserBuyExecuteReq::clear_has_hasbuynum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserBuyExecuteReq::clear_hasbuynum() {
  hasbuynum_ = 0;
  clear_has_hasbuynum();
}
inline ::google::protobuf::int32 TUserBuyExecuteReq::hasbuynum() const {
  // @@protoc_insertion_point(field_get:pb.TUserBuyExecuteReq.HasBuyNum)
  return hasbuynum_;
}
inline void TUserBuyExecuteReq::set_hasbuynum(::google::protobuf::int32 value) {
  set_has_hasbuynum();
  hasbuynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserBuyExecuteReq.HasBuyNum)
}

// -------------------------------------------------------------------

// TUserGetRandomNameArrReq

// optional uint32 Gender = 1;
inline bool TUserGetRandomNameArrReq::has_gender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserGetRandomNameArrReq::set_has_gender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserGetRandomNameArrReq::clear_has_gender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserGetRandomNameArrReq::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 TUserGetRandomNameArrReq::gender() const {
  // @@protoc_insertion_point(field_get:pb.TUserGetRandomNameArrReq.Gender)
  return gender_;
}
inline void TUserGetRandomNameArrReq::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserGetRandomNameArrReq.Gender)
}

// optional uint32 CsvType = 2;
inline bool TUserGetRandomNameArrReq::has_csvtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserGetRandomNameArrReq::set_has_csvtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserGetRandomNameArrReq::clear_has_csvtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserGetRandomNameArrReq::clear_csvtype() {
  csvtype_ = 0u;
  clear_has_csvtype();
}
inline ::google::protobuf::uint32 TUserGetRandomNameArrReq::csvtype() const {
  // @@protoc_insertion_point(field_get:pb.TUserGetRandomNameArrReq.CsvType)
  return csvtype_;
}
inline void TUserGetRandomNameArrReq::set_csvtype(::google::protobuf::uint32 value) {
  set_has_csvtype();
  csvtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserGetRandomNameArrReq.CsvType)
}

// -------------------------------------------------------------------

// TUserGetRandomNameArrRsp

// repeated string RandomNameArr = 1;
inline int TUserGetRandomNameArrRsp::randomnamearr_size() const {
  return randomnamearr_.size();
}
inline void TUserGetRandomNameArrRsp::clear_randomnamearr() {
  randomnamearr_.Clear();
}
inline const ::std::string& TUserGetRandomNameArrRsp::randomnamearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUserGetRandomNameArrRsp.RandomNameArr)
  return randomnamearr_.Get(index);
}
inline ::std::string* TUserGetRandomNameArrRsp::mutable_randomnamearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUserGetRandomNameArrRsp.RandomNameArr)
  return randomnamearr_.Mutable(index);
}
inline void TUserGetRandomNameArrRsp::set_randomnamearr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TUserGetRandomNameArrRsp.RandomNameArr)
  randomnamearr_.Mutable(index)->assign(value);
}
inline void TUserGetRandomNameArrRsp::set_randomnamearr(int index, const char* value) {
  randomnamearr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TUserGetRandomNameArrRsp.RandomNameArr)
}
inline void TUserGetRandomNameArrRsp::set_randomnamearr(int index, const char* value, size_t size) {
  randomnamearr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TUserGetRandomNameArrRsp.RandomNameArr)
}
inline ::std::string* TUserGetRandomNameArrRsp::add_randomnamearr() {
  return randomnamearr_.Add();
}
inline void TUserGetRandomNameArrRsp::add_randomnamearr(const ::std::string& value) {
  randomnamearr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TUserGetRandomNameArrRsp.RandomNameArr)
}
inline void TUserGetRandomNameArrRsp::add_randomnamearr(const char* value) {
  randomnamearr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TUserGetRandomNameArrRsp.RandomNameArr)
}
inline void TUserGetRandomNameArrRsp::add_randomnamearr(const char* value, size_t size) {
  randomnamearr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TUserGetRandomNameArrRsp.RandomNameArr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TUserGetRandomNameArrRsp::randomnamearr() const {
  // @@protoc_insertion_point(field_list:pb.TUserGetRandomNameArrRsp.RandomNameArr)
  return randomnamearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TUserGetRandomNameArrRsp::mutable_randomnamearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUserGetRandomNameArrRsp.RandomNameArr)
  return &randomnamearr_;
}

// -------------------------------------------------------------------

// TUserGetGuildWarUserSyncInfoRsp

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TUserGetGuildWarUserSyncInfoRsp::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserGetGuildWarUserSyncInfoRsp::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserGetGuildWarUserSyncInfoRsp::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserGetGuildWarUserSyncInfoRsp::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TUserGetGuildWarUserSyncInfoRsp::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TUserGetGuildWarUserSyncInfoRsp.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TUserGetGuildWarUserSyncInfoRsp::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TUserGetGuildWarUserSyncInfoRsp.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TUserGetGuildWarUserSyncInfoRsp::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TUserGetGuildWarUserSyncInfoRsp::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserGetGuildWarUserSyncInfoRsp.UserInfo)
}

// optional .pb.TArmyInfo ArmyInfo = 2;
inline bool TUserGetGuildWarUserSyncInfoRsp::has_armyinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserGetGuildWarUserSyncInfoRsp::set_has_armyinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserGetGuildWarUserSyncInfoRsp::clear_has_armyinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserGetGuildWarUserSyncInfoRsp::clear_armyinfo() {
  if (armyinfo_ != NULL) armyinfo_->::pb::TArmyInfo::Clear();
  clear_has_armyinfo();
}
inline const ::pb::TArmyInfo& TUserGetGuildWarUserSyncInfoRsp::armyinfo() const {
  // @@protoc_insertion_point(field_get:pb.TUserGetGuildWarUserSyncInfoRsp.ArmyInfo)
  return armyinfo_ != NULL ? *armyinfo_ : *default_instance_->armyinfo_;
}
inline ::pb::TArmyInfo* TUserGetGuildWarUserSyncInfoRsp::mutable_armyinfo() {
  set_has_armyinfo();
  if (armyinfo_ == NULL) armyinfo_ = new ::pb::TArmyInfo;
  // @@protoc_insertion_point(field_mutable:pb.TUserGetGuildWarUserSyncInfoRsp.ArmyInfo)
  return armyinfo_;
}
inline ::pb::TArmyInfo* TUserGetGuildWarUserSyncInfoRsp::release_armyinfo() {
  clear_has_armyinfo();
  ::pb::TArmyInfo* temp = armyinfo_;
  armyinfo_ = NULL;
  return temp;
}
inline void TUserGetGuildWarUserSyncInfoRsp::set_allocated_armyinfo(::pb::TArmyInfo* armyinfo) {
  delete armyinfo_;
  armyinfo_ = armyinfo;
  if (armyinfo) {
    set_has_armyinfo();
  } else {
    clear_has_armyinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserGetGuildWarUserSyncInfoRsp.ArmyInfo)
}

// -------------------------------------------------------------------

// TUserExchangeGenderReq

// optional uint32 Gender = 1;
inline bool TUserExchangeGenderReq::has_gender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserExchangeGenderReq::set_has_gender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserExchangeGenderReq::clear_has_gender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserExchangeGenderReq::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 TUserExchangeGenderReq::gender() const {
  // @@protoc_insertion_point(field_get:pb.TUserExchangeGenderReq.Gender)
  return gender_;
}
inline void TUserExchangeGenderReq::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserExchangeGenderReq.Gender)
}

// -------------------------------------------------------------------

// TUserUgcMessageBeLiked

// optional uint64 LikedUid = 1;
inline bool TUserUgcMessageBeLiked::has_likeduid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserUgcMessageBeLiked::set_has_likeduid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserUgcMessageBeLiked::clear_has_likeduid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserUgcMessageBeLiked::clear_likeduid() {
  likeduid_ = GOOGLE_ULONGLONG(0);
  clear_has_likeduid();
}
inline ::google::protobuf::uint64 TUserUgcMessageBeLiked::likeduid() const {
  // @@protoc_insertion_point(field_get:pb.TUserUgcMessageBeLiked.LikedUid)
  return likeduid_;
}
inline void TUserUgcMessageBeLiked::set_likeduid(::google::protobuf::uint64 value) {
  set_has_likeduid();
  likeduid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserUgcMessageBeLiked.LikedUid)
}

// -------------------------------------------------------------------

// TUserFightForceChangeReq

// -------------------------------------------------------------------

// TUserUgcGetArrUserDataRpgReq

// repeated uint64 UidArray = 1;
inline int TUserUgcGetArrUserDataRpgReq::uidarray_size() const {
  return uidarray_.size();
}
inline void TUserUgcGetArrUserDataRpgReq::clear_uidarray() {
  uidarray_.Clear();
}
inline ::google::protobuf::uint64 TUserUgcGetArrUserDataRpgReq::uidarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUserUgcGetArrUserDataRpgReq.UidArray)
  return uidarray_.Get(index);
}
inline void TUserUgcGetArrUserDataRpgReq::set_uidarray(int index, ::google::protobuf::uint64 value) {
  uidarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TUserUgcGetArrUserDataRpgReq.UidArray)
}
inline void TUserUgcGetArrUserDataRpgReq::add_uidarray(::google::protobuf::uint64 value) {
  uidarray_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TUserUgcGetArrUserDataRpgReq.UidArray)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TUserUgcGetArrUserDataRpgReq::uidarray() const {
  // @@protoc_insertion_point(field_list:pb.TUserUgcGetArrUserDataRpgReq.UidArray)
  return uidarray_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TUserUgcGetArrUserDataRpgReq::mutable_uidarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUserUgcGetArrUserDataRpgReq.UidArray)
  return &uidarray_;
}

// -------------------------------------------------------------------

// TUserUgcSimpleInfo

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TUserUgcSimpleInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserUgcSimpleInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserUgcSimpleInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserUgcSimpleInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TUserUgcSimpleInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TUserUgcSimpleInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TUserUgcSimpleInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TUserUgcSimpleInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TUserUgcSimpleInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TUserUgcSimpleInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserUgcSimpleInfo.UserInfo)
}

// optional uint32 MaxPassedChapter = 2;
inline bool TUserUgcSimpleInfo::has_maxpassedchapter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserUgcSimpleInfo::set_has_maxpassedchapter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserUgcSimpleInfo::clear_has_maxpassedchapter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserUgcSimpleInfo::clear_maxpassedchapter() {
  maxpassedchapter_ = 0u;
  clear_has_maxpassedchapter();
}
inline ::google::protobuf::uint32 TUserUgcSimpleInfo::maxpassedchapter() const {
  // @@protoc_insertion_point(field_get:pb.TUserUgcSimpleInfo.MaxPassedChapter)
  return maxpassedchapter_;
}
inline void TUserUgcSimpleInfo::set_maxpassedchapter(::google::protobuf::uint32 value) {
  set_has_maxpassedchapter();
  maxpassedchapter_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserUgcSimpleInfo.MaxPassedChapter)
}

// -------------------------------------------------------------------

// TUserUgcGetArrUserDataRpgRsp

// repeated .pb.TUserUgcSimpleInfo UserDataArray = 1;
inline int TUserUgcGetArrUserDataRpgRsp::userdataarray_size() const {
  return userdataarray_.size();
}
inline void TUserUgcGetArrUserDataRpgRsp::clear_userdataarray() {
  userdataarray_.Clear();
}
inline const ::pb::TUserUgcSimpleInfo& TUserUgcGetArrUserDataRpgRsp::userdataarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUserUgcGetArrUserDataRpgRsp.UserDataArray)
  return userdataarray_.Get(index);
}
inline ::pb::TUserUgcSimpleInfo* TUserUgcGetArrUserDataRpgRsp::mutable_userdataarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUserUgcGetArrUserDataRpgRsp.UserDataArray)
  return userdataarray_.Mutable(index);
}
inline ::pb::TUserUgcSimpleInfo* TUserUgcGetArrUserDataRpgRsp::add_userdataarray() {
  // @@protoc_insertion_point(field_add:pb.TUserUgcGetArrUserDataRpgRsp.UserDataArray)
  return userdataarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserUgcSimpleInfo >&
TUserUgcGetArrUserDataRpgRsp::userdataarray() const {
  // @@protoc_insertion_point(field_list:pb.TUserUgcGetArrUserDataRpgRsp.UserDataArray)
  return userdataarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserUgcSimpleInfo >*
TUserUgcGetArrUserDataRpgRsp::mutable_userdataarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUserUgcGetArrUserDataRpgRsp.UserDataArray)
  return &userdataarray_;
}

// -------------------------------------------------------------------

// TUserSetShowVipReq

// optional uint32 IsShowVip = 1;
inline bool TUserSetShowVipReq::has_isshowvip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserSetShowVipReq::set_has_isshowvip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserSetShowVipReq::clear_has_isshowvip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserSetShowVipReq::clear_isshowvip() {
  isshowvip_ = 0u;
  clear_has_isshowvip();
}
inline ::google::protobuf::uint32 TUserSetShowVipReq::isshowvip() const {
  // @@protoc_insertion_point(field_get:pb.TUserSetShowVipReq.IsShowVip)
  return isshowvip_;
}
inline void TUserSetShowVipReq::set_isshowvip(::google::protobuf::uint32 value) {
  set_has_isshowvip();
  isshowvip_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSetShowVipReq.IsShowVip)
}

// -------------------------------------------------------------------

// TUserGetSelfRankRsp

// optional int32 FightForceRankIdx = 1;
inline bool TUserGetSelfRankRsp::has_fightforcerankidx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserGetSelfRankRsp::set_has_fightforcerankidx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserGetSelfRankRsp::clear_has_fightforcerankidx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserGetSelfRankRsp::clear_fightforcerankidx() {
  fightforcerankidx_ = 0;
  clear_has_fightforcerankidx();
}
inline ::google::protobuf::int32 TUserGetSelfRankRsp::fightforcerankidx() const {
  // @@protoc_insertion_point(field_get:pb.TUserGetSelfRankRsp.FightForceRankIdx)
  return fightforcerankidx_;
}
inline void TUserGetSelfRankRsp::set_fightforcerankidx(::google::protobuf::int32 value) {
  set_has_fightforcerankidx();
  fightforcerankidx_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserGetSelfRankRsp.FightForceRankIdx)
}

// optional int32 LevelRankIdx = 2;
inline bool TUserGetSelfRankRsp::has_levelrankidx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserGetSelfRankRsp::set_has_levelrankidx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserGetSelfRankRsp::clear_has_levelrankidx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserGetSelfRankRsp::clear_levelrankidx() {
  levelrankidx_ = 0;
  clear_has_levelrankidx();
}
inline ::google::protobuf::int32 TUserGetSelfRankRsp::levelrankidx() const {
  // @@protoc_insertion_point(field_get:pb.TUserGetSelfRankRsp.LevelRankIdx)
  return levelrankidx_;
}
inline void TUserGetSelfRankRsp::set_levelrankidx(::google::protobuf::int32 value) {
  set_has_levelrankidx();
  levelrankidx_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserGetSelfRankRsp.LevelRankIdx)
}

// -------------------------------------------------------------------

// TUserPlayerImageFrameArrRsp

// repeated int32 FrameArr = 1;
inline int TUserPlayerImageFrameArrRsp::framearr_size() const {
  return framearr_.size();
}
inline void TUserPlayerImageFrameArrRsp::clear_framearr() {
  framearr_.Clear();
}
inline ::google::protobuf::int32 TUserPlayerImageFrameArrRsp::framearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUserPlayerImageFrameArrRsp.FrameArr)
  return framearr_.Get(index);
}
inline void TUserPlayerImageFrameArrRsp::set_framearr(int index, ::google::protobuf::int32 value) {
  framearr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TUserPlayerImageFrameArrRsp.FrameArr)
}
inline void TUserPlayerImageFrameArrRsp::add_framearr(::google::protobuf::int32 value) {
  framearr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TUserPlayerImageFrameArrRsp.FrameArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TUserPlayerImageFrameArrRsp::framearr() const {
  // @@protoc_insertion_point(field_list:pb.TUserPlayerImageFrameArrRsp.FrameArr)
  return framearr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TUserPlayerImageFrameArrRsp::mutable_framearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUserPlayerImageFrameArrRsp.FrameArr)
  return &framearr_;
}

// repeated uint64 EndTimeArr = 2;
inline int TUserPlayerImageFrameArrRsp::endtimearr_size() const {
  return endtimearr_.size();
}
inline void TUserPlayerImageFrameArrRsp::clear_endtimearr() {
  endtimearr_.Clear();
}
inline ::google::protobuf::uint64 TUserPlayerImageFrameArrRsp::endtimearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUserPlayerImageFrameArrRsp.EndTimeArr)
  return endtimearr_.Get(index);
}
inline void TUserPlayerImageFrameArrRsp::set_endtimearr(int index, ::google::protobuf::uint64 value) {
  endtimearr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TUserPlayerImageFrameArrRsp.EndTimeArr)
}
inline void TUserPlayerImageFrameArrRsp::add_endtimearr(::google::protobuf::uint64 value) {
  endtimearr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TUserPlayerImageFrameArrRsp.EndTimeArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TUserPlayerImageFrameArrRsp::endtimearr() const {
  // @@protoc_insertion_point(field_list:pb.TUserPlayerImageFrameArrRsp.EndTimeArr)
  return endtimearr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TUserPlayerImageFrameArrRsp::mutable_endtimearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUserPlayerImageFrameArrRsp.EndTimeArr)
  return &endtimearr_;
}

// -------------------------------------------------------------------

// TUserPlayerImageFrameArrPush

// optional int32 FrameTid = 1;
inline bool TUserPlayerImageFrameArrPush::has_frametid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserPlayerImageFrameArrPush::set_has_frametid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserPlayerImageFrameArrPush::clear_has_frametid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserPlayerImageFrameArrPush::clear_frametid() {
  frametid_ = 0;
  clear_has_frametid();
}
inline ::google::protobuf::int32 TUserPlayerImageFrameArrPush::frametid() const {
  // @@protoc_insertion_point(field_get:pb.TUserPlayerImageFrameArrPush.FrameTid)
  return frametid_;
}
inline void TUserPlayerImageFrameArrPush::set_frametid(::google::protobuf::int32 value) {
  set_has_frametid();
  frametid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserPlayerImageFrameArrPush.FrameTid)
}

// -------------------------------------------------------------------

// TUserSetCanStrangerChatReq

// optional uint32 IsAllow = 1;
inline bool TUserSetCanStrangerChatReq::has_isallow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserSetCanStrangerChatReq::set_has_isallow() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserSetCanStrangerChatReq::clear_has_isallow() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserSetCanStrangerChatReq::clear_isallow() {
  isallow_ = 0u;
  clear_has_isallow();
}
inline ::google::protobuf::uint32 TUserSetCanStrangerChatReq::isallow() const {
  // @@protoc_insertion_point(field_get:pb.TUserSetCanStrangerChatReq.IsAllow)
  return isallow_;
}
inline void TUserSetCanStrangerChatReq::set_isallow(::google::protobuf::uint32 value) {
  set_has_isallow();
  isallow_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSetCanStrangerChatReq.IsAllow)
}

// -------------------------------------------------------------------

// TUserSetRefuseLowAdventureReq

// optional uint32 IsRefuse = 1;
inline bool TUserSetRefuseLowAdventureReq::has_isrefuse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserSetRefuseLowAdventureReq::set_has_isrefuse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserSetRefuseLowAdventureReq::clear_has_isrefuse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserSetRefuseLowAdventureReq::clear_isrefuse() {
  isrefuse_ = 0u;
  clear_has_isrefuse();
}
inline ::google::protobuf::uint32 TUserSetRefuseLowAdventureReq::isrefuse() const {
  // @@protoc_insertion_point(field_get:pb.TUserSetRefuseLowAdventureReq.IsRefuse)
  return isrefuse_;
}
inline void TUserSetRefuseLowAdventureReq::set_isrefuse(::google::protobuf::uint32 value) {
  set_has_isrefuse();
  isrefuse_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSetRefuseLowAdventureReq.IsRefuse)
}

// -------------------------------------------------------------------

// TUserGetAndRefreshFightForceReq

// optional uint64 Uid = 1;
inline bool TUserGetAndRefreshFightForceReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserGetAndRefreshFightForceReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserGetAndRefreshFightForceReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserGetAndRefreshFightForceReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TUserGetAndRefreshFightForceReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TUserGetAndRefreshFightForceReq.Uid)
  return uid_;
}
inline void TUserGetAndRefreshFightForceReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserGetAndRefreshFightForceReq.Uid)
}

// -------------------------------------------------------------------

// TUserGetAndRefreshFightForceRsp

// optional uint64 FightForce = 1;
inline bool TUserGetAndRefreshFightForceRsp::has_fightforce() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserGetAndRefreshFightForceRsp::set_has_fightforce() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserGetAndRefreshFightForceRsp::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserGetAndRefreshFightForceRsp::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TUserGetAndRefreshFightForceRsp::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TUserGetAndRefreshFightForceRsp.FightForce)
  return fightforce_;
}
inline void TUserGetAndRefreshFightForceRsp::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserGetAndRefreshFightForceRsp.FightForce)
}

// -------------------------------------------------------------------

// TUserSendChannelEmailRsp

// optional uint32 EmailNum = 1;
inline bool TUserSendChannelEmailRsp::has_emailnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserSendChannelEmailRsp::set_has_emailnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserSendChannelEmailRsp::clear_has_emailnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserSendChannelEmailRsp::clear_emailnum() {
  emailnum_ = 0u;
  clear_has_emailnum();
}
inline ::google::protobuf::uint32 TUserSendChannelEmailRsp::emailnum() const {
  // @@protoc_insertion_point(field_get:pb.TUserSendChannelEmailRsp.EmailNum)
  return emailnum_;
}
inline void TUserSendChannelEmailRsp::set_emailnum(::google::protobuf::uint32 value) {
  set_has_emailnum();
  emailnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserSendChannelEmailRsp.EmailNum)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EModuleId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EModuleId>() {
  return ::pb::EModuleId_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fUser_2eproto__INCLUDED
