// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActMainCityWelfare.proto

#ifndef PROTOBUF_net_2fActMainCityWelfare_2eproto__INCLUDED
#define PROTOBUF_net_2fActMainCityWelfare_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActMainCityWelfare_2eproto();
void protobuf_AssignDesc_net_2fActMainCityWelfare_2eproto();
void protobuf_ShutdownFile_net_2fActMainCityWelfare_2eproto();

class TActMainCityWelfareDropInfo;
class TActMainCityWelfareGetInfoRsp;
class TActMainCityWelfareReceiveGiftReq;
class TActMainCityWelfareReceiveGiftRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActMainCityWelfareDropInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActMainCityWelfare.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActMainCityWelfareDropInfo : public ::google::protobuf::Message {
 public:
  TActMainCityWelfareDropInfo();
  virtual ~TActMainCityWelfareDropInfo();

  TActMainCityWelfareDropInfo(const TActMainCityWelfareDropInfo& from);

  inline TActMainCityWelfareDropInfo& operator=(const TActMainCityWelfareDropInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActMainCityWelfareDropInfo& default_instance();

  void Swap(TActMainCityWelfareDropInfo* other);

  // implements Message ----------------------------------------------

  TActMainCityWelfareDropInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActMainCityWelfareDropInfo& from);
  void MergeFrom(const TActMainCityWelfareDropInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ItemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActMainCityWelfareDropInfo</name>
  	<Function>
  		<name>itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 IconId = 2;
  inline bool has_iconid() const;
  inline void clear_iconid();
  static const int kIconIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActMainCityWelfareDropInfo</name>
  	<Function>
  		<name>iconid</name>
  		<replaceName>IconId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iconid</name>
  		<replaceName>IconId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iconid</name>
  		<replaceName>IconId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 iconid() const;
  inline void set_iconid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActMainCityWelfareDropInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_iconid();
  inline void clear_has_iconid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 iconid_;
  friend void  protobuf_AddDesc_net_2fActMainCityWelfare_2eproto();
  friend void protobuf_AssignDesc_net_2fActMainCityWelfare_2eproto();
  friend void protobuf_ShutdownFile_net_2fActMainCityWelfare_2eproto();

  void InitAsDefaultInstance();
  static TActMainCityWelfareDropInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActMainCityWelfareGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActMainCityWelfare.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActMainCityWelfareGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActMainCityWelfareGetInfoRsp();
  virtual ~TActMainCityWelfareGetInfoRsp();

  TActMainCityWelfareGetInfoRsp(const TActMainCityWelfareGetInfoRsp& from);

  inline TActMainCityWelfareGetInfoRsp& operator=(const TActMainCityWelfareGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActMainCityWelfareGetInfoRsp& default_instance();

  void Swap(TActMainCityWelfareGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActMainCityWelfareGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActMainCityWelfareGetInfoRsp& from);
  void MergeFrom(const TActMainCityWelfareGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActMainCityWelfareDropInfo DropArr = 1;
  inline int droparr_size() const;
  inline void clear_droparr();
  static const int kDropArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActMainCityWelfareGetInfoRsp</name>
  	<Function>
  		<name>droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparr</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparr_size</name>
  		<replaceName>DropArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActMainCityWelfareDropInfo& droparr(int index) const;
  inline ::pb::TActMainCityWelfareDropInfo* mutable_droparr(int index);
  inline ::pb::TActMainCityWelfareDropInfo* add_droparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActMainCityWelfareDropInfo >&
      droparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActMainCityWelfareDropInfo >*
      mutable_droparr();

  // optional uint64 NextRandomTime = 2;
  inline bool has_nextrandomtime() const;
  inline void clear_nextrandomtime();
  static const int kNextRandomTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActMainCityWelfareGetInfoRsp</name>
  	<Function>
  		<name>nextrandomtime</name>
  		<replaceName>NextRandomTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_nextrandomtime</name>
  		<replaceName>NextRandomTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nextrandomtime</name>
  		<replaceName>NextRandomTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 nextrandomtime() const;
  inline void set_nextrandomtime(::google::protobuf::uint64 value);

  // optional uint64 DailyRefreshTime = 3;
  inline bool has_dailyrefreshtime() const;
  inline void clear_dailyrefreshtime();
  static const int kDailyRefreshTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActMainCityWelfareGetInfoRsp</name>
  	<Function>
  		<name>dailyrefreshtime</name>
  		<replaceName>DailyRefreshTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_dailyrefreshtime</name>
  		<replaceName>DailyRefreshTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dailyrefreshtime</name>
  		<replaceName>DailyRefreshTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 dailyrefreshtime() const;
  inline void set_dailyrefreshtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActMainCityWelfareGetInfoRsp)
 private:
  inline void set_has_nextrandomtime();
  inline void clear_has_nextrandomtime();
  inline void set_has_dailyrefreshtime();
  inline void clear_has_dailyrefreshtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActMainCityWelfareDropInfo > droparr_;
  ::google::protobuf::uint64 nextrandomtime_;
  ::google::protobuf::uint64 dailyrefreshtime_;
  friend void  protobuf_AddDesc_net_2fActMainCityWelfare_2eproto();
  friend void protobuf_AssignDesc_net_2fActMainCityWelfare_2eproto();
  friend void protobuf_ShutdownFile_net_2fActMainCityWelfare_2eproto();

  void InitAsDefaultInstance();
  static TActMainCityWelfareGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActMainCityWelfareReceiveGiftReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActMainCityWelfare.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActMainCityWelfareReceiveGiftReq : public ::google::protobuf::Message {
 public:
  TActMainCityWelfareReceiveGiftReq();
  virtual ~TActMainCityWelfareReceiveGiftReq();

  TActMainCityWelfareReceiveGiftReq(const TActMainCityWelfareReceiveGiftReq& from);

  inline TActMainCityWelfareReceiveGiftReq& operator=(const TActMainCityWelfareReceiveGiftReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActMainCityWelfareReceiveGiftReq& default_instance();

  void Swap(TActMainCityWelfareReceiveGiftReq* other);

  // implements Message ----------------------------------------------

  TActMainCityWelfareReceiveGiftReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActMainCityWelfareReceiveGiftReq& from);
  void MergeFrom(const TActMainCityWelfareReceiveGiftReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ItemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActMainCityWelfareReceiveGiftReq</name>
  	<Function>
  		<name>itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActMainCityWelfareReceiveGiftReq)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  friend void  protobuf_AddDesc_net_2fActMainCityWelfare_2eproto();
  friend void protobuf_AssignDesc_net_2fActMainCityWelfare_2eproto();
  friend void protobuf_ShutdownFile_net_2fActMainCityWelfare_2eproto();

  void InitAsDefaultInstance();
  static TActMainCityWelfareReceiveGiftReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActMainCityWelfareReceiveGiftRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActMainCityWelfare.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActMainCityWelfareReceiveGiftRsp : public ::google::protobuf::Message {
 public:
  TActMainCityWelfareReceiveGiftRsp();
  virtual ~TActMainCityWelfareReceiveGiftRsp();

  TActMainCityWelfareReceiveGiftRsp(const TActMainCityWelfareReceiveGiftRsp& from);

  inline TActMainCityWelfareReceiveGiftRsp& operator=(const TActMainCityWelfareReceiveGiftRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActMainCityWelfareReceiveGiftRsp& default_instance();

  void Swap(TActMainCityWelfareReceiveGiftRsp* other);

  // implements Message ----------------------------------------------

  TActMainCityWelfareReceiveGiftRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActMainCityWelfareReceiveGiftRsp& from);
  void MergeFrom(const TActMainCityWelfareReceiveGiftRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActMainCityWelfareReceiveGiftRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional uint64 NextRandomTime = 2;
  inline bool has_nextrandomtime() const;
  inline void clear_nextrandomtime();
  static const int kNextRandomTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActMainCityWelfareReceiveGiftRsp</name>
  	<Function>
  		<name>nextrandomtime</name>
  		<replaceName>NextRandomTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_nextrandomtime</name>
  		<replaceName>NextRandomTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nextrandomtime</name>
  		<replaceName>NextRandomTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 nextrandomtime() const;
  inline void set_nextrandomtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActMainCityWelfareReceiveGiftRsp)
 private:
  inline void set_has_nextrandomtime();
  inline void clear_has_nextrandomtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint64 nextrandomtime_;
  friend void  protobuf_AddDesc_net_2fActMainCityWelfare_2eproto();
  friend void protobuf_AssignDesc_net_2fActMainCityWelfare_2eproto();
  friend void protobuf_ShutdownFile_net_2fActMainCityWelfare_2eproto();

  void InitAsDefaultInstance();
  static TActMainCityWelfareReceiveGiftRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TActMainCityWelfareDropInfo

// optional uint32 ItemId = 1;
inline bool TActMainCityWelfareDropInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActMainCityWelfareDropInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActMainCityWelfareDropInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActMainCityWelfareDropInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 TActMainCityWelfareDropInfo::itemid() const {
  // @@protoc_insertion_point(field_get:pb.TActMainCityWelfareDropInfo.ItemId)
  return itemid_;
}
inline void TActMainCityWelfareDropInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMainCityWelfareDropInfo.ItemId)
}

// optional uint32 IconId = 2;
inline bool TActMainCityWelfareDropInfo::has_iconid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActMainCityWelfareDropInfo::set_has_iconid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActMainCityWelfareDropInfo::clear_has_iconid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActMainCityWelfareDropInfo::clear_iconid() {
  iconid_ = 0u;
  clear_has_iconid();
}
inline ::google::protobuf::uint32 TActMainCityWelfareDropInfo::iconid() const {
  // @@protoc_insertion_point(field_get:pb.TActMainCityWelfareDropInfo.IconId)
  return iconid_;
}
inline void TActMainCityWelfareDropInfo::set_iconid(::google::protobuf::uint32 value) {
  set_has_iconid();
  iconid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMainCityWelfareDropInfo.IconId)
}

// -------------------------------------------------------------------

// TActMainCityWelfareGetInfoRsp

// repeated .pb.TActMainCityWelfareDropInfo DropArr = 1;
inline int TActMainCityWelfareGetInfoRsp::droparr_size() const {
  return droparr_.size();
}
inline void TActMainCityWelfareGetInfoRsp::clear_droparr() {
  droparr_.Clear();
}
inline const ::pb::TActMainCityWelfareDropInfo& TActMainCityWelfareGetInfoRsp::droparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActMainCityWelfareGetInfoRsp.DropArr)
  return droparr_.Get(index);
}
inline ::pb::TActMainCityWelfareDropInfo* TActMainCityWelfareGetInfoRsp::mutable_droparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActMainCityWelfareGetInfoRsp.DropArr)
  return droparr_.Mutable(index);
}
inline ::pb::TActMainCityWelfareDropInfo* TActMainCityWelfareGetInfoRsp::add_droparr() {
  // @@protoc_insertion_point(field_add:pb.TActMainCityWelfareGetInfoRsp.DropArr)
  return droparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActMainCityWelfareDropInfo >&
TActMainCityWelfareGetInfoRsp::droparr() const {
  // @@protoc_insertion_point(field_list:pb.TActMainCityWelfareGetInfoRsp.DropArr)
  return droparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActMainCityWelfareDropInfo >*
TActMainCityWelfareGetInfoRsp::mutable_droparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActMainCityWelfareGetInfoRsp.DropArr)
  return &droparr_;
}

// optional uint64 NextRandomTime = 2;
inline bool TActMainCityWelfareGetInfoRsp::has_nextrandomtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActMainCityWelfareGetInfoRsp::set_has_nextrandomtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActMainCityWelfareGetInfoRsp::clear_has_nextrandomtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActMainCityWelfareGetInfoRsp::clear_nextrandomtime() {
  nextrandomtime_ = GOOGLE_ULONGLONG(0);
  clear_has_nextrandomtime();
}
inline ::google::protobuf::uint64 TActMainCityWelfareGetInfoRsp::nextrandomtime() const {
  // @@protoc_insertion_point(field_get:pb.TActMainCityWelfareGetInfoRsp.NextRandomTime)
  return nextrandomtime_;
}
inline void TActMainCityWelfareGetInfoRsp::set_nextrandomtime(::google::protobuf::uint64 value) {
  set_has_nextrandomtime();
  nextrandomtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMainCityWelfareGetInfoRsp.NextRandomTime)
}

// optional uint64 DailyRefreshTime = 3;
inline bool TActMainCityWelfareGetInfoRsp::has_dailyrefreshtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActMainCityWelfareGetInfoRsp::set_has_dailyrefreshtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActMainCityWelfareGetInfoRsp::clear_has_dailyrefreshtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActMainCityWelfareGetInfoRsp::clear_dailyrefreshtime() {
  dailyrefreshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_dailyrefreshtime();
}
inline ::google::protobuf::uint64 TActMainCityWelfareGetInfoRsp::dailyrefreshtime() const {
  // @@protoc_insertion_point(field_get:pb.TActMainCityWelfareGetInfoRsp.DailyRefreshTime)
  return dailyrefreshtime_;
}
inline void TActMainCityWelfareGetInfoRsp::set_dailyrefreshtime(::google::protobuf::uint64 value) {
  set_has_dailyrefreshtime();
  dailyrefreshtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMainCityWelfareGetInfoRsp.DailyRefreshTime)
}

// -------------------------------------------------------------------

// TActMainCityWelfareReceiveGiftReq

// optional uint32 ItemId = 1;
inline bool TActMainCityWelfareReceiveGiftReq::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActMainCityWelfareReceiveGiftReq::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActMainCityWelfareReceiveGiftReq::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActMainCityWelfareReceiveGiftReq::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 TActMainCityWelfareReceiveGiftReq::itemid() const {
  // @@protoc_insertion_point(field_get:pb.TActMainCityWelfareReceiveGiftReq.ItemId)
  return itemid_;
}
inline void TActMainCityWelfareReceiveGiftReq::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMainCityWelfareReceiveGiftReq.ItemId)
}

// -------------------------------------------------------------------

// TActMainCityWelfareReceiveGiftRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TActMainCityWelfareReceiveGiftRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TActMainCityWelfareReceiveGiftRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TActMainCityWelfareReceiveGiftRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActMainCityWelfareReceiveGiftRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TActMainCityWelfareReceiveGiftRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActMainCityWelfareReceiveGiftRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TActMainCityWelfareReceiveGiftRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TActMainCityWelfareReceiveGiftRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActMainCityWelfareReceiveGiftRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TActMainCityWelfareReceiveGiftRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActMainCityWelfareReceiveGiftRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActMainCityWelfareReceiveGiftRsp.RewardArr)
  return &rewardarr_;
}

// optional uint64 NextRandomTime = 2;
inline bool TActMainCityWelfareReceiveGiftRsp::has_nextrandomtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActMainCityWelfareReceiveGiftRsp::set_has_nextrandomtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActMainCityWelfareReceiveGiftRsp::clear_has_nextrandomtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActMainCityWelfareReceiveGiftRsp::clear_nextrandomtime() {
  nextrandomtime_ = GOOGLE_ULONGLONG(0);
  clear_has_nextrandomtime();
}
inline ::google::protobuf::uint64 TActMainCityWelfareReceiveGiftRsp::nextrandomtime() const {
  // @@protoc_insertion_point(field_get:pb.TActMainCityWelfareReceiveGiftRsp.NextRandomTime)
  return nextrandomtime_;
}
inline void TActMainCityWelfareReceiveGiftRsp::set_nextrandomtime(::google::protobuf::uint64 value) {
  set_has_nextrandomtime();
  nextrandomtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMainCityWelfareReceiveGiftRsp.NextRandomTime)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActMainCityWelfare_2eproto__INCLUDED
