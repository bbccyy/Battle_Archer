// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Firewall.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Firewall.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TBanUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBanUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TIllegalBehaviorReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TIllegalBehaviorReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFrontendVerErrReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFrontendVerErrReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFirewallVerMistake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFirewallVerMistake_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFirewallCheckReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFirewallCheckReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFirewallCheckRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFirewallCheckRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFirewallCheckBattleArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFirewallCheckBattleArgs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EFirewallCheckType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fFirewall_2eproto() {
  protobuf_AddDesc_net_2fFirewall_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Firewall.proto");
  GOOGLE_CHECK(file != NULL);
  TBanUserReq_descriptor_ = file->message_type(0);
  static const int TBanUserReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBanUserReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBanUserReq, bantime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBanUserReq, localizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBanUserReq, battlestarter_),
  };
  TBanUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBanUserReq_descriptor_,
      TBanUserReq::default_instance_,
      TBanUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBanUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBanUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBanUserReq));
  TIllegalBehaviorReq_descriptor_ = file->message_type(1);
  static const int TIllegalBehaviorReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TIllegalBehaviorReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TIllegalBehaviorReq, battleinfoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TIllegalBehaviorReq, triggercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TIllegalBehaviorReq, battlestarter_),
  };
  TIllegalBehaviorReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TIllegalBehaviorReq_descriptor_,
      TIllegalBehaviorReq::default_instance_,
      TIllegalBehaviorReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TIllegalBehaviorReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TIllegalBehaviorReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TIllegalBehaviorReq));
  TFrontendVerErrReq_descriptor_ = file->message_type(2);
  static const int TFrontendVerErrReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFrontendVerErrReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFrontendVerErrReq, frontendver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFrontendVerErrReq, platformfrontendver_),
  };
  TFrontendVerErrReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFrontendVerErrReq_descriptor_,
      TFrontendVerErrReq::default_instance_,
      TFrontendVerErrReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFrontendVerErrReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFrontendVerErrReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFrontendVerErrReq));
  TFirewallVerMistake_descriptor_ = file->message_type(3);
  static const int TFirewallVerMistake_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFirewallVerMistake, frontver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFirewallVerMistake, backver_),
  };
  TFirewallVerMistake_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFirewallVerMistake_descriptor_,
      TFirewallVerMistake::default_instance_,
      TFirewallVerMistake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFirewallVerMistake, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFirewallVerMistake, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFirewallVerMistake));
  TFirewallCheckReq_descriptor_ = file->message_type(4);
  static const int TFirewallCheckReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFirewallCheckReq, checktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFirewallCheckReq, frontendver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFirewallCheckReq, battleconfver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFirewallCheckReq, checkdata_),
  };
  TFirewallCheckReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFirewallCheckReq_descriptor_,
      TFirewallCheckReq::default_instance_,
      TFirewallCheckReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFirewallCheckReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFirewallCheckReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFirewallCheckReq));
  TFirewallCheckRsp_descriptor_ = file->message_type(5);
  static const int TFirewallCheckRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFirewallCheckRsp, checktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFirewallCheckRsp, checkstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFirewallCheckRsp, checkmsg_),
  };
  TFirewallCheckRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFirewallCheckRsp_descriptor_,
      TFirewallCheckRsp::default_instance_,
      TFirewallCheckRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFirewallCheckRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFirewallCheckRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFirewallCheckRsp));
  TFirewallCheckBattleArgs_descriptor_ = file->message_type(6);
  static const int TFirewallCheckBattleArgs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFirewallCheckBattleArgs, frontendbattleargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFirewallCheckBattleArgs, backendbattleargs_),
  };
  TFirewallCheckBattleArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFirewallCheckBattleArgs_descriptor_,
      TFirewallCheckBattleArgs::default_instance_,
      TFirewallCheckBattleArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFirewallCheckBattleArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFirewallCheckBattleArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFirewallCheckBattleArgs));
  EFirewallCheckType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fFirewall_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBanUserReq_descriptor_, &TBanUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TIllegalBehaviorReq_descriptor_, &TIllegalBehaviorReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFrontendVerErrReq_descriptor_, &TFrontendVerErrReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFirewallVerMistake_descriptor_, &TFirewallVerMistake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFirewallCheckReq_descriptor_, &TFirewallCheckReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFirewallCheckRsp_descriptor_, &TFirewallCheckRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFirewallCheckBattleArgs_descriptor_, &TFirewallCheckBattleArgs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fFirewall_2eproto() {
  delete TBanUserReq::default_instance_;
  delete TBanUserReq_reflection_;
  delete TIllegalBehaviorReq::default_instance_;
  delete TIllegalBehaviorReq_reflection_;
  delete TFrontendVerErrReq::default_instance_;
  delete TFrontendVerErrReq_reflection_;
  delete TFirewallVerMistake::default_instance_;
  delete TFirewallVerMistake_reflection_;
  delete TFirewallCheckReq::default_instance_;
  delete TFirewallCheckReq_reflection_;
  delete TFirewallCheckRsp::default_instance_;
  delete TFirewallCheckRsp_reflection_;
  delete TFirewallCheckBattleArgs::default_instance_;
  delete TFirewallCheckBattleArgs_reflection_;
}

void protobuf_AddDesc_net_2fFirewall_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022net/Firewall.proto\022\002pb\032\020net/Battle.pro"
    "to\"V\n\013TBanUserReq\022\013\n\003Uid\030\001 \001(\004\022\017\n\007BanTim"
    "e\030\002 \001(\004\022\022\n\nLocalizeId\030\003 \001(\004\022\025\n\rBattleSta"
    "rter\030\004 \001(\r\"e\n\023TIllegalBehaviorReq\022\013\n\003Uid"
    "\030\001 \002(\004\022\024\n\014BattleInfoid\030\002 \002(\r\022\024\n\014TriggerC"
    "ount\030\003 \002(\r\022\025\n\rBattleStarter\030\004 \001(\r\"S\n\022TFr"
    "ontendVerErrReq\022\013\n\003Uid\030\001 \001(\004\022\023\n\013Frontend"
    "Ver\030\002 \001(\t\022\033\n\023PlatformFrontendVer\030\003 \001(\t\"8"
    "\n\023TFirewallVerMistake\022\020\n\010FrontVer\030\001 \001(\t\022"
    "\017\n\007BackVer\030\002 \001(\t\"}\n\021TFirewallCheckReq\022)\n"
    "\tCheckType\030\001 \002(\0162\026.pb.EFirewallCheckType"
    "\022\023\n\013FrontendVer\030\002 \001(\t\022\025\n\rBattleConfVer\030\003"
    " \001(\t\022\021\n\tCheckData\030\004 \001(\014\"e\n\021TFirewallChec"
    "kRsp\022)\n\tCheckType\030\001 \002(\0162\026.pb.EFirewallCh"
    "eckType\022\023\n\013CheckStatus\030\002 \001(\r\022\020\n\010CheckMsg"
    "\030\003 \001(\t\"s\n\030TFirewallCheckBattleArgs\022+\n\022Fr"
    "ontendBattleArgs\030\001 \002(\0132\017.pb.TBattleArgs\022"
    "*\n\021BackendBattleArgs\030\002 \002(\0132\017.pb.TBattleA"
    "rgs*2\n\022EFirewallCheckType\022\034\n\030EFirewallCh"
    "eckBattleArgs\020\001", 775);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Firewall.proto", &protobuf_RegisterTypes);
  TBanUserReq::default_instance_ = new TBanUserReq();
  TIllegalBehaviorReq::default_instance_ = new TIllegalBehaviorReq();
  TFrontendVerErrReq::default_instance_ = new TFrontendVerErrReq();
  TFirewallVerMistake::default_instance_ = new TFirewallVerMistake();
  TFirewallCheckReq::default_instance_ = new TFirewallCheckReq();
  TFirewallCheckRsp::default_instance_ = new TFirewallCheckRsp();
  TFirewallCheckBattleArgs::default_instance_ = new TFirewallCheckBattleArgs();
  TBanUserReq::default_instance_->InitAsDefaultInstance();
  TIllegalBehaviorReq::default_instance_->InitAsDefaultInstance();
  TFrontendVerErrReq::default_instance_->InitAsDefaultInstance();
  TFirewallVerMistake::default_instance_->InitAsDefaultInstance();
  TFirewallCheckReq::default_instance_->InitAsDefaultInstance();
  TFirewallCheckRsp::default_instance_->InitAsDefaultInstance();
  TFirewallCheckBattleArgs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fFirewall_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fFirewall_2eproto {
  StaticDescriptorInitializer_net_2fFirewall_2eproto() {
    protobuf_AddDesc_net_2fFirewall_2eproto();
  }
} static_descriptor_initializer_net_2fFirewall_2eproto_;
const ::google::protobuf::EnumDescriptor* EFirewallCheckType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFirewallCheckType_descriptor_;
}
bool EFirewallCheckType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TBanUserReq::kUidFieldNumber;
const int TBanUserReq::kBanTimeFieldNumber;
const int TBanUserReq::kLocalizeIdFieldNumber;
const int TBanUserReq::kBattleStarterFieldNumber;
#endif  // !_MSC_VER

TBanUserReq::TBanUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBanUserReq)
}

void TBanUserReq::InitAsDefaultInstance() {
}

TBanUserReq::TBanUserReq(const TBanUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBanUserReq)
}

void TBanUserReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  bantime_ = GOOGLE_ULONGLONG(0);
  localizeid_ = GOOGLE_ULONGLONG(0);
  battlestarter_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBanUserReq::~TBanUserReq() {
  // @@protoc_insertion_point(destructor:pb.TBanUserReq)
  SharedDtor();
}

void TBanUserReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBanUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBanUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBanUserReq_descriptor_;
}

const TBanUserReq& TBanUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFirewall_2eproto();
  return *default_instance_;
}

TBanUserReq* TBanUserReq::default_instance_ = NULL;

TBanUserReq* TBanUserReq::New() const {
  return new TBanUserReq;
}

void TBanUserReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBanUserReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, battlestarter_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBanUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBanUserReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BanTime;
        break;
      }

      // optional uint64 BanTime = 2;
      case 2: {
        if (tag == 16) {
         parse_BanTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bantime_)));
          set_has_bantime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LocalizeId;
        break;
      }

      // optional uint64 LocalizeId = 3;
      case 3: {
        if (tag == 24) {
         parse_LocalizeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &localizeid_)));
          set_has_localizeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BattleStarter;
        break;
      }

      // optional uint32 BattleStarter = 4;
      case 4: {
        if (tag == 32) {
         parse_BattleStarter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlestarter_)));
          set_has_battlestarter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBanUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBanUserReq)
  return false;
#undef DO_
}

void TBanUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBanUserReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint64 BanTime = 2;
  if (has_bantime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bantime(), output);
  }

  // optional uint64 LocalizeId = 3;
  if (has_localizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->localizeid(), output);
  }

  // optional uint32 BattleStarter = 4;
  if (has_battlestarter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->battlestarter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBanUserReq)
}

::google::protobuf::uint8* TBanUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBanUserReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint64 BanTime = 2;
  if (has_bantime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bantime(), target);
  }

  // optional uint64 LocalizeId = 3;
  if (has_localizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->localizeid(), target);
  }

  // optional uint32 BattleStarter = 4;
  if (has_battlestarter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->battlestarter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBanUserReq)
  return target;
}

int TBanUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 BanTime = 2;
    if (has_bantime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bantime());
    }

    // optional uint64 LocalizeId = 3;
    if (has_localizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->localizeid());
    }

    // optional uint32 BattleStarter = 4;
    if (has_battlestarter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlestarter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBanUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBanUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBanUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBanUserReq::MergeFrom(const TBanUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_bantime()) {
      set_bantime(from.bantime());
    }
    if (from.has_localizeid()) {
      set_localizeid(from.localizeid());
    }
    if (from.has_battlestarter()) {
      set_battlestarter(from.battlestarter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBanUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBanUserReq::CopyFrom(const TBanUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBanUserReq::IsInitialized() const {

  return true;
}

void TBanUserReq::Swap(TBanUserReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(bantime_, other->bantime_);
    std::swap(localizeid_, other->localizeid_);
    std::swap(battlestarter_, other->battlestarter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBanUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBanUserReq_descriptor_;
  metadata.reflection = TBanUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TIllegalBehaviorReq::kUidFieldNumber;
const int TIllegalBehaviorReq::kBattleInfoidFieldNumber;
const int TIllegalBehaviorReq::kTriggerCountFieldNumber;
const int TIllegalBehaviorReq::kBattleStarterFieldNumber;
#endif  // !_MSC_VER

TIllegalBehaviorReq::TIllegalBehaviorReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TIllegalBehaviorReq)
}

void TIllegalBehaviorReq::InitAsDefaultInstance() {
}

TIllegalBehaviorReq::TIllegalBehaviorReq(const TIllegalBehaviorReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TIllegalBehaviorReq)
}

void TIllegalBehaviorReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  battleinfoid_ = 0u;
  triggercount_ = 0u;
  battlestarter_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TIllegalBehaviorReq::~TIllegalBehaviorReq() {
  // @@protoc_insertion_point(destructor:pb.TIllegalBehaviorReq)
  SharedDtor();
}

void TIllegalBehaviorReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TIllegalBehaviorReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TIllegalBehaviorReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TIllegalBehaviorReq_descriptor_;
}

const TIllegalBehaviorReq& TIllegalBehaviorReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFirewall_2eproto();
  return *default_instance_;
}

TIllegalBehaviorReq* TIllegalBehaviorReq::default_instance_ = NULL;

TIllegalBehaviorReq* TIllegalBehaviorReq::New() const {
  return new TIllegalBehaviorReq;
}

void TIllegalBehaviorReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TIllegalBehaviorReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, battlestarter_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TIllegalBehaviorReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TIllegalBehaviorReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BattleInfoid;
        break;
      }

      // required uint32 BattleInfoid = 2;
      case 2: {
        if (tag == 16) {
         parse_BattleInfoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleinfoid_)));
          set_has_battleinfoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TriggerCount;
        break;
      }

      // required uint32 TriggerCount = 3;
      case 3: {
        if (tag == 24) {
         parse_TriggerCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triggercount_)));
          set_has_triggercount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BattleStarter;
        break;
      }

      // optional uint32 BattleStarter = 4;
      case 4: {
        if (tag == 32) {
         parse_BattleStarter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlestarter_)));
          set_has_battlestarter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TIllegalBehaviorReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TIllegalBehaviorReq)
  return false;
#undef DO_
}

void TIllegalBehaviorReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TIllegalBehaviorReq)
  // required uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // required uint32 BattleInfoid = 2;
  if (has_battleinfoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battleinfoid(), output);
  }

  // required uint32 TriggerCount = 3;
  if (has_triggercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->triggercount(), output);
  }

  // optional uint32 BattleStarter = 4;
  if (has_battlestarter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->battlestarter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TIllegalBehaviorReq)
}

::google::protobuf::uint8* TIllegalBehaviorReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TIllegalBehaviorReq)
  // required uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // required uint32 BattleInfoid = 2;
  if (has_battleinfoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->battleinfoid(), target);
  }

  // required uint32 TriggerCount = 3;
  if (has_triggercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->triggercount(), target);
  }

  // optional uint32 BattleStarter = 4;
  if (has_battlestarter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->battlestarter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TIllegalBehaviorReq)
  return target;
}

int TIllegalBehaviorReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required uint32 BattleInfoid = 2;
    if (has_battleinfoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleinfoid());
    }

    // required uint32 TriggerCount = 3;
    if (has_triggercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triggercount());
    }

    // optional uint32 BattleStarter = 4;
    if (has_battlestarter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlestarter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TIllegalBehaviorReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TIllegalBehaviorReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TIllegalBehaviorReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TIllegalBehaviorReq::MergeFrom(const TIllegalBehaviorReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_battleinfoid()) {
      set_battleinfoid(from.battleinfoid());
    }
    if (from.has_triggercount()) {
      set_triggercount(from.triggercount());
    }
    if (from.has_battlestarter()) {
      set_battlestarter(from.battlestarter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TIllegalBehaviorReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TIllegalBehaviorReq::CopyFrom(const TIllegalBehaviorReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TIllegalBehaviorReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TIllegalBehaviorReq::Swap(TIllegalBehaviorReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(battleinfoid_, other->battleinfoid_);
    std::swap(triggercount_, other->triggercount_);
    std::swap(battlestarter_, other->battlestarter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TIllegalBehaviorReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TIllegalBehaviorReq_descriptor_;
  metadata.reflection = TIllegalBehaviorReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFrontendVerErrReq::kUidFieldNumber;
const int TFrontendVerErrReq::kFrontendVerFieldNumber;
const int TFrontendVerErrReq::kPlatformFrontendVerFieldNumber;
#endif  // !_MSC_VER

TFrontendVerErrReq::TFrontendVerErrReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFrontendVerErrReq)
}

void TFrontendVerErrReq::InitAsDefaultInstance() {
}

TFrontendVerErrReq::TFrontendVerErrReq(const TFrontendVerErrReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFrontendVerErrReq)
}

void TFrontendVerErrReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  frontendver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platformfrontendver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFrontendVerErrReq::~TFrontendVerErrReq() {
  // @@protoc_insertion_point(destructor:pb.TFrontendVerErrReq)
  SharedDtor();
}

void TFrontendVerErrReq::SharedDtor() {
  if (frontendver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frontendver_;
  }
  if (platformfrontendver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platformfrontendver_;
  }
  if (this != default_instance_) {
  }
}

void TFrontendVerErrReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFrontendVerErrReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFrontendVerErrReq_descriptor_;
}

const TFrontendVerErrReq& TFrontendVerErrReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFirewall_2eproto();
  return *default_instance_;
}

TFrontendVerErrReq* TFrontendVerErrReq::default_instance_ = NULL;

TFrontendVerErrReq* TFrontendVerErrReq::New() const {
  return new TFrontendVerErrReq;
}

void TFrontendVerErrReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_frontendver()) {
      if (frontendver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        frontendver_->clear();
      }
    }
    if (has_platformfrontendver()) {
      if (platformfrontendver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platformfrontendver_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFrontendVerErrReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFrontendVerErrReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FrontendVer;
        break;
      }

      // optional string FrontendVer = 2;
      case 2: {
        if (tag == 18) {
         parse_FrontendVer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frontendver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frontendver().data(), this->frontendver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frontendver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PlatformFrontendVer;
        break;
      }

      // optional string PlatformFrontendVer = 3;
      case 3: {
        if (tag == 26) {
         parse_PlatformFrontendVer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platformfrontendver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platformfrontendver().data(), this->platformfrontendver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platformfrontendver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFrontendVerErrReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFrontendVerErrReq)
  return false;
#undef DO_
}

void TFrontendVerErrReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFrontendVerErrReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string FrontendVer = 2;
  if (has_frontendver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frontendver().data(), this->frontendver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frontendver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->frontendver(), output);
  }

  // optional string PlatformFrontendVer = 3;
  if (has_platformfrontendver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platformfrontendver().data(), this->platformfrontendver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platformfrontendver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->platformfrontendver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFrontendVerErrReq)
}

::google::protobuf::uint8* TFrontendVerErrReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFrontendVerErrReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string FrontendVer = 2;
  if (has_frontendver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frontendver().data(), this->frontendver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frontendver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->frontendver(), target);
  }

  // optional string PlatformFrontendVer = 3;
  if (has_platformfrontendver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platformfrontendver().data(), this->platformfrontendver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platformfrontendver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platformfrontendver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFrontendVerErrReq)
  return target;
}

int TFrontendVerErrReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string FrontendVer = 2;
    if (has_frontendver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frontendver());
    }

    // optional string PlatformFrontendVer = 3;
    if (has_platformfrontendver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platformfrontendver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFrontendVerErrReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFrontendVerErrReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFrontendVerErrReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFrontendVerErrReq::MergeFrom(const TFrontendVerErrReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_frontendver()) {
      set_frontendver(from.frontendver());
    }
    if (from.has_platformfrontendver()) {
      set_platformfrontendver(from.platformfrontendver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFrontendVerErrReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFrontendVerErrReq::CopyFrom(const TFrontendVerErrReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFrontendVerErrReq::IsInitialized() const {

  return true;
}

void TFrontendVerErrReq::Swap(TFrontendVerErrReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(frontendver_, other->frontendver_);
    std::swap(platformfrontendver_, other->platformfrontendver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFrontendVerErrReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFrontendVerErrReq_descriptor_;
  metadata.reflection = TFrontendVerErrReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFirewallVerMistake::kFrontVerFieldNumber;
const int TFirewallVerMistake::kBackVerFieldNumber;
#endif  // !_MSC_VER

TFirewallVerMistake::TFirewallVerMistake()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFirewallVerMistake)
}

void TFirewallVerMistake::InitAsDefaultInstance() {
}

TFirewallVerMistake::TFirewallVerMistake(const TFirewallVerMistake& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFirewallVerMistake)
}

void TFirewallVerMistake::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  frontver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFirewallVerMistake::~TFirewallVerMistake() {
  // @@protoc_insertion_point(destructor:pb.TFirewallVerMistake)
  SharedDtor();
}

void TFirewallVerMistake::SharedDtor() {
  if (frontver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frontver_;
  }
  if (backver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backver_;
  }
  if (this != default_instance_) {
  }
}

void TFirewallVerMistake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFirewallVerMistake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFirewallVerMistake_descriptor_;
}

const TFirewallVerMistake& TFirewallVerMistake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFirewall_2eproto();
  return *default_instance_;
}

TFirewallVerMistake* TFirewallVerMistake::default_instance_ = NULL;

TFirewallVerMistake* TFirewallVerMistake::New() const {
  return new TFirewallVerMistake;
}

void TFirewallVerMistake::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_frontver()) {
      if (frontver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        frontver_->clear();
      }
    }
    if (has_backver()) {
      if (backver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        backver_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFirewallVerMistake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFirewallVerMistake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string FrontVer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frontver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frontver().data(), this->frontver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frontver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BackVer;
        break;
      }

      // optional string BackVer = 2;
      case 2: {
        if (tag == 18) {
         parse_BackVer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->backver().data(), this->backver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "backver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFirewallVerMistake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFirewallVerMistake)
  return false;
#undef DO_
}

void TFirewallVerMistake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFirewallVerMistake)
  // optional string FrontVer = 1;
  if (has_frontver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frontver().data(), this->frontver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frontver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->frontver(), output);
  }

  // optional string BackVer = 2;
  if (has_backver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backver().data(), this->backver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->backver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFirewallVerMistake)
}

::google::protobuf::uint8* TFirewallVerMistake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFirewallVerMistake)
  // optional string FrontVer = 1;
  if (has_frontver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frontver().data(), this->frontver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frontver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->frontver(), target);
  }

  // optional string BackVer = 2;
  if (has_backver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backver().data(), this->backver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->backver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFirewallVerMistake)
  return target;
}

int TFirewallVerMistake::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string FrontVer = 1;
    if (has_frontver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frontver());
    }

    // optional string BackVer = 2;
    if (has_backver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFirewallVerMistake::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFirewallVerMistake* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFirewallVerMistake*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFirewallVerMistake::MergeFrom(const TFirewallVerMistake& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frontver()) {
      set_frontver(from.frontver());
    }
    if (from.has_backver()) {
      set_backver(from.backver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFirewallVerMistake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFirewallVerMistake::CopyFrom(const TFirewallVerMistake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFirewallVerMistake::IsInitialized() const {

  return true;
}

void TFirewallVerMistake::Swap(TFirewallVerMistake* other) {
  if (other != this) {
    std::swap(frontver_, other->frontver_);
    std::swap(backver_, other->backver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFirewallVerMistake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFirewallVerMistake_descriptor_;
  metadata.reflection = TFirewallVerMistake_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFirewallCheckReq::kCheckTypeFieldNumber;
const int TFirewallCheckReq::kFrontendVerFieldNumber;
const int TFirewallCheckReq::kBattleConfVerFieldNumber;
const int TFirewallCheckReq::kCheckDataFieldNumber;
#endif  // !_MSC_VER

TFirewallCheckReq::TFirewallCheckReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFirewallCheckReq)
}

void TFirewallCheckReq::InitAsDefaultInstance() {
}

TFirewallCheckReq::TFirewallCheckReq(const TFirewallCheckReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFirewallCheckReq)
}

void TFirewallCheckReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  checktype_ = 1;
  frontendver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battleconfver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checkdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFirewallCheckReq::~TFirewallCheckReq() {
  // @@protoc_insertion_point(destructor:pb.TFirewallCheckReq)
  SharedDtor();
}

void TFirewallCheckReq::SharedDtor() {
  if (frontendver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frontendver_;
  }
  if (battleconfver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleconfver_;
  }
  if (checkdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete checkdata_;
  }
  if (this != default_instance_) {
  }
}

void TFirewallCheckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFirewallCheckReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFirewallCheckReq_descriptor_;
}

const TFirewallCheckReq& TFirewallCheckReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFirewall_2eproto();
  return *default_instance_;
}

TFirewallCheckReq* TFirewallCheckReq::default_instance_ = NULL;

TFirewallCheckReq* TFirewallCheckReq::New() const {
  return new TFirewallCheckReq;
}

void TFirewallCheckReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    checktype_ = 1;
    if (has_frontendver()) {
      if (frontendver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        frontendver_->clear();
      }
    }
    if (has_battleconfver()) {
      if (battleconfver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleconfver_->clear();
      }
    }
    if (has_checkdata()) {
      if (checkdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        checkdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFirewallCheckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFirewallCheckReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.EFirewallCheckType CheckType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EFirewallCheckType_IsValid(value)) {
            set_checktype(static_cast< ::pb::EFirewallCheckType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FrontendVer;
        break;
      }

      // optional string FrontendVer = 2;
      case 2: {
        if (tag == 18) {
         parse_FrontendVer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frontendver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frontendver().data(), this->frontendver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frontendver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BattleConfVer;
        break;
      }

      // optional string BattleConfVer = 3;
      case 3: {
        if (tag == 26) {
         parse_BattleConfVer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battleconfver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->battleconfver().data(), this->battleconfver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "battleconfver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CheckData;
        break;
      }

      // optional bytes CheckData = 4;
      case 4: {
        if (tag == 34) {
         parse_CheckData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_checkdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFirewallCheckReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFirewallCheckReq)
  return false;
#undef DO_
}

void TFirewallCheckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFirewallCheckReq)
  // required .pb.EFirewallCheckType CheckType = 1;
  if (has_checktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->checktype(), output);
  }

  // optional string FrontendVer = 2;
  if (has_frontendver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frontendver().data(), this->frontendver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frontendver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->frontendver(), output);
  }

  // optional string BattleConfVer = 3;
  if (has_battleconfver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battleconfver().data(), this->battleconfver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "battleconfver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->battleconfver(), output);
  }

  // optional bytes CheckData = 4;
  if (has_checkdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->checkdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFirewallCheckReq)
}

::google::protobuf::uint8* TFirewallCheckReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFirewallCheckReq)
  // required .pb.EFirewallCheckType CheckType = 1;
  if (has_checktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->checktype(), target);
  }

  // optional string FrontendVer = 2;
  if (has_frontendver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frontendver().data(), this->frontendver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frontendver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->frontendver(), target);
  }

  // optional string BattleConfVer = 3;
  if (has_battleconfver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battleconfver().data(), this->battleconfver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "battleconfver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->battleconfver(), target);
  }

  // optional bytes CheckData = 4;
  if (has_checkdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->checkdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFirewallCheckReq)
  return target;
}

int TFirewallCheckReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.EFirewallCheckType CheckType = 1;
    if (has_checktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->checktype());
    }

    // optional string FrontendVer = 2;
    if (has_frontendver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frontendver());
    }

    // optional string BattleConfVer = 3;
    if (has_battleconfver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battleconfver());
    }

    // optional bytes CheckData = 4;
    if (has_checkdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->checkdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFirewallCheckReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFirewallCheckReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFirewallCheckReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFirewallCheckReq::MergeFrom(const TFirewallCheckReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_checktype()) {
      set_checktype(from.checktype());
    }
    if (from.has_frontendver()) {
      set_frontendver(from.frontendver());
    }
    if (from.has_battleconfver()) {
      set_battleconfver(from.battleconfver());
    }
    if (from.has_checkdata()) {
      set_checkdata(from.checkdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFirewallCheckReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFirewallCheckReq::CopyFrom(const TFirewallCheckReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFirewallCheckReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TFirewallCheckReq::Swap(TFirewallCheckReq* other) {
  if (other != this) {
    std::swap(checktype_, other->checktype_);
    std::swap(frontendver_, other->frontendver_);
    std::swap(battleconfver_, other->battleconfver_);
    std::swap(checkdata_, other->checkdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFirewallCheckReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFirewallCheckReq_descriptor_;
  metadata.reflection = TFirewallCheckReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFirewallCheckRsp::kCheckTypeFieldNumber;
const int TFirewallCheckRsp::kCheckStatusFieldNumber;
const int TFirewallCheckRsp::kCheckMsgFieldNumber;
#endif  // !_MSC_VER

TFirewallCheckRsp::TFirewallCheckRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFirewallCheckRsp)
}

void TFirewallCheckRsp::InitAsDefaultInstance() {
}

TFirewallCheckRsp::TFirewallCheckRsp(const TFirewallCheckRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFirewallCheckRsp)
}

void TFirewallCheckRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  checktype_ = 1;
  checkstatus_ = 0u;
  checkmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFirewallCheckRsp::~TFirewallCheckRsp() {
  // @@protoc_insertion_point(destructor:pb.TFirewallCheckRsp)
  SharedDtor();
}

void TFirewallCheckRsp::SharedDtor() {
  if (checkmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete checkmsg_;
  }
  if (this != default_instance_) {
  }
}

void TFirewallCheckRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFirewallCheckRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFirewallCheckRsp_descriptor_;
}

const TFirewallCheckRsp& TFirewallCheckRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFirewall_2eproto();
  return *default_instance_;
}

TFirewallCheckRsp* TFirewallCheckRsp::default_instance_ = NULL;

TFirewallCheckRsp* TFirewallCheckRsp::New() const {
  return new TFirewallCheckRsp;
}

void TFirewallCheckRsp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    checktype_ = 1;
    checkstatus_ = 0u;
    if (has_checkmsg()) {
      if (checkmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        checkmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFirewallCheckRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFirewallCheckRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.EFirewallCheckType CheckType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EFirewallCheckType_IsValid(value)) {
            set_checktype(static_cast< ::pb::EFirewallCheckType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CheckStatus;
        break;
      }

      // optional uint32 CheckStatus = 2;
      case 2: {
        if (tag == 16) {
         parse_CheckStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checkstatus_)));
          set_has_checkstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_CheckMsg;
        break;
      }

      // optional string CheckMsg = 3;
      case 3: {
        if (tag == 26) {
         parse_CheckMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checkmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->checkmsg().data(), this->checkmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "checkmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFirewallCheckRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFirewallCheckRsp)
  return false;
#undef DO_
}

void TFirewallCheckRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFirewallCheckRsp)
  // required .pb.EFirewallCheckType CheckType = 1;
  if (has_checktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->checktype(), output);
  }

  // optional uint32 CheckStatus = 2;
  if (has_checkstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->checkstatus(), output);
  }

  // optional string CheckMsg = 3;
  if (has_checkmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checkmsg().data(), this->checkmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "checkmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->checkmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFirewallCheckRsp)
}

::google::protobuf::uint8* TFirewallCheckRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFirewallCheckRsp)
  // required .pb.EFirewallCheckType CheckType = 1;
  if (has_checktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->checktype(), target);
  }

  // optional uint32 CheckStatus = 2;
  if (has_checkstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->checkstatus(), target);
  }

  // optional string CheckMsg = 3;
  if (has_checkmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checkmsg().data(), this->checkmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "checkmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->checkmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFirewallCheckRsp)
  return target;
}

int TFirewallCheckRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.EFirewallCheckType CheckType = 1;
    if (has_checktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->checktype());
    }

    // optional uint32 CheckStatus = 2;
    if (has_checkstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->checkstatus());
    }

    // optional string CheckMsg = 3;
    if (has_checkmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checkmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFirewallCheckRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFirewallCheckRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFirewallCheckRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFirewallCheckRsp::MergeFrom(const TFirewallCheckRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_checktype()) {
      set_checktype(from.checktype());
    }
    if (from.has_checkstatus()) {
      set_checkstatus(from.checkstatus());
    }
    if (from.has_checkmsg()) {
      set_checkmsg(from.checkmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFirewallCheckRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFirewallCheckRsp::CopyFrom(const TFirewallCheckRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFirewallCheckRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TFirewallCheckRsp::Swap(TFirewallCheckRsp* other) {
  if (other != this) {
    std::swap(checktype_, other->checktype_);
    std::swap(checkstatus_, other->checkstatus_);
    std::swap(checkmsg_, other->checkmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFirewallCheckRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFirewallCheckRsp_descriptor_;
  metadata.reflection = TFirewallCheckRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFirewallCheckBattleArgs::kFrontendBattleArgsFieldNumber;
const int TFirewallCheckBattleArgs::kBackendBattleArgsFieldNumber;
#endif  // !_MSC_VER

TFirewallCheckBattleArgs::TFirewallCheckBattleArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFirewallCheckBattleArgs)
}

void TFirewallCheckBattleArgs::InitAsDefaultInstance() {
  frontendbattleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
  backendbattleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TFirewallCheckBattleArgs::TFirewallCheckBattleArgs(const TFirewallCheckBattleArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFirewallCheckBattleArgs)
}

void TFirewallCheckBattleArgs::SharedCtor() {
  _cached_size_ = 0;
  frontendbattleargs_ = NULL;
  backendbattleargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFirewallCheckBattleArgs::~TFirewallCheckBattleArgs() {
  // @@protoc_insertion_point(destructor:pb.TFirewallCheckBattleArgs)
  SharedDtor();
}

void TFirewallCheckBattleArgs::SharedDtor() {
  if (this != default_instance_) {
    delete frontendbattleargs_;
    delete backendbattleargs_;
  }
}

void TFirewallCheckBattleArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFirewallCheckBattleArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFirewallCheckBattleArgs_descriptor_;
}

const TFirewallCheckBattleArgs& TFirewallCheckBattleArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFirewall_2eproto();
  return *default_instance_;
}

TFirewallCheckBattleArgs* TFirewallCheckBattleArgs::default_instance_ = NULL;

TFirewallCheckBattleArgs* TFirewallCheckBattleArgs::New() const {
  return new TFirewallCheckBattleArgs;
}

void TFirewallCheckBattleArgs::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_frontendbattleargs()) {
      if (frontendbattleargs_ != NULL) frontendbattleargs_->::pb::TBattleArgs::Clear();
    }
    if (has_backendbattleargs()) {
      if (backendbattleargs_ != NULL) backendbattleargs_->::pb::TBattleArgs::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFirewallCheckBattleArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFirewallCheckBattleArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.TBattleArgs FrontendBattleArgs = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frontendbattleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BackendBattleArgs;
        break;
      }

      // required .pb.TBattleArgs BackendBattleArgs = 2;
      case 2: {
        if (tag == 18) {
         parse_BackendBattleArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backendbattleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFirewallCheckBattleArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFirewallCheckBattleArgs)
  return false;
#undef DO_
}

void TFirewallCheckBattleArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFirewallCheckBattleArgs)
  // required .pb.TBattleArgs FrontendBattleArgs = 1;
  if (has_frontendbattleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frontendbattleargs(), output);
  }

  // required .pb.TBattleArgs BackendBattleArgs = 2;
  if (has_backendbattleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->backendbattleargs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFirewallCheckBattleArgs)
}

::google::protobuf::uint8* TFirewallCheckBattleArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFirewallCheckBattleArgs)
  // required .pb.TBattleArgs FrontendBattleArgs = 1;
  if (has_frontendbattleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->frontendbattleargs(), target);
  }

  // required .pb.TBattleArgs BackendBattleArgs = 2;
  if (has_backendbattleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->backendbattleargs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFirewallCheckBattleArgs)
  return target;
}

int TFirewallCheckBattleArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.TBattleArgs FrontendBattleArgs = 1;
    if (has_frontendbattleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frontendbattleargs());
    }

    // required .pb.TBattleArgs BackendBattleArgs = 2;
    if (has_backendbattleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backendbattleargs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFirewallCheckBattleArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFirewallCheckBattleArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFirewallCheckBattleArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFirewallCheckBattleArgs::MergeFrom(const TFirewallCheckBattleArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frontendbattleargs()) {
      mutable_frontendbattleargs()->::pb::TBattleArgs::MergeFrom(from.frontendbattleargs());
    }
    if (from.has_backendbattleargs()) {
      mutable_backendbattleargs()->::pb::TBattleArgs::MergeFrom(from.backendbattleargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFirewallCheckBattleArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFirewallCheckBattleArgs::CopyFrom(const TFirewallCheckBattleArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFirewallCheckBattleArgs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_frontendbattleargs()) {
    if (!this->frontendbattleargs().IsInitialized()) return false;
  }
  if (has_backendbattleargs()) {
    if (!this->backendbattleargs().IsInitialized()) return false;
  }
  return true;
}

void TFirewallCheckBattleArgs::Swap(TFirewallCheckBattleArgs* other) {
  if (other != this) {
    std::swap(frontendbattleargs_, other->frontendbattleargs_);
    std::swap(backendbattleargs_, other->backendbattleargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFirewallCheckBattleArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFirewallCheckBattleArgs_descriptor_;
  metadata.reflection = TFirewallCheckBattleArgs_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
