// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossPlatformSiegeFlag.proto

#ifndef PROTOBUF_net_2fCrossPlatformSiegeFlag_2eproto__INCLUDED
#define PROTOBUF_net_2fCrossPlatformSiegeFlag_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/Util.pb.h"
#include "net/Alliance.pb.h"
#include "net/Shop.pb.h"
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

class TPlatformSiegeFlagAllyInfo;
class TPlatformSiegeFlagUserInfo;
class TPlatformSiegeFlagStage;
class TPlatformSiegeFlagGetBaseInfoRsp;
class TPlatformSiegeFlagSignRsp;
class TPlatformSiegeFlagMoveReq;
class TPlatformSiegeFlagAttackReq;
class TPlatformSiegeFlagTouchReq;
class TPlatformSiegeFlagSetUserOptReq;
class TPlatformSiegeFlagSetArmyOptReq;
class TPlatformSiegeFlagAllyRankInfo;
class TPlatformSiegeFlagGetAllyRankReq;
class TPlatformSiegeFlagGetAllyRankRsp;
class TPlatformSiegeFlagUserRankInfo;
class TPlatformSiegeFlagGetRankListReq;
class TPlatformSiegeFlagGetRankListRsp;
class TPlatformSiegeFlagBuyInfo;
class TPlatformSiegeFlagServerGetInfoRsp;
class TPlatformSiegeFlagServerBuyGoodsReq;
class TPlatformSiegeFlagServerNodify;
class TSiegeFlagAllyBaseInfo;
class TSiegeFlagUserBaseInfo;
class TSiegeFlagGuildContriInfo;
class TSiegeFlagAllianceSimpleInfoWithUser;
class TSiegeFlagBattleEndNodify;

enum EPlatformSiegeFlagStage {
  PLATFORMSIEGEFLAG_INVALID = 0,
  PLATFORMSIEGEFLAG_SIGN = 1,
  PLATFORMSIEGEFLAG_MATCH = 2,
  PLATFORMSIEGEFLAG_MATCHSHOW = 3,
  PLATFORMSIEGEFLAG_BATTLE = 4,
  PLATFORMSIEGEFLAG_SHOW = 5
};
bool EPlatformSiegeFlagStage_IsValid(int value);
const EPlatformSiegeFlagStage EPlatformSiegeFlagStage_MIN = PLATFORMSIEGEFLAG_INVALID;
const EPlatformSiegeFlagStage EPlatformSiegeFlagStage_MAX = PLATFORMSIEGEFLAG_SHOW;
const int EPlatformSiegeFlagStage_ARRAYSIZE = EPlatformSiegeFlagStage_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPlatformSiegeFlagStage_descriptor();
inline const ::std::string& EPlatformSiegeFlagStage_Name(EPlatformSiegeFlagStage value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPlatformSiegeFlagStage_descriptor(), value);
}
inline bool EPlatformSiegeFlagStage_Parse(
    const ::std::string& name, EPlatformSiegeFlagStage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPlatformSiegeFlagStage>(
    EPlatformSiegeFlagStage_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagAllyInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagAllyInfo : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagAllyInfo();
  virtual ~TPlatformSiegeFlagAllyInfo();

  TPlatformSiegeFlagAllyInfo(const TPlatformSiegeFlagAllyInfo& from);

  inline TPlatformSiegeFlagAllyInfo& operator=(const TPlatformSiegeFlagAllyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagAllyInfo& default_instance();

  void Swap(TPlatformSiegeFlagAllyInfo* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagAllyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagAllyInfo& from);
  void MergeFrom(const TPlatformSiegeFlagAllyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 AllyId = 1;
  inline bool has_allyid() const;
  inline void clear_allyid();
  static const int kAllyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagAllyInfo</name>
  	<Function>
  		<name>allyid</name>
  		<replaceName>AllyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allyid</name>
  		<replaceName>AllyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allyid</name>
  		<replaceName>AllyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 allyid() const;
  inline void set_allyid(::google::protobuf::uint64 value);

  // optional uint64 CurrentFieldId = 2;
  inline bool has_currentfieldid() const;
  inline void clear_currentfieldid();
  static const int kCurrentFieldIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagAllyInfo</name>
  	<Function>
  		<name>currentfieldid</name>
  		<replaceName>CurrentFieldId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_currentfieldid</name>
  		<replaceName>CurrentFieldId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_currentfieldid</name>
  		<replaceName>CurrentFieldId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 currentfieldid() const;
  inline void set_currentfieldid(::google::protobuf::uint64 value);

  // repeated .pb.TAllianceSimpleInfo FieldAllyInfo = 3;
  inline int fieldallyinfo_size() const;
  inline void clear_fieldallyinfo();
  static const int kFieldAllyInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagAllyInfo</name>
  	<Function>
  		<name>fieldallyinfo</name>
  		<replaceName>FieldAllyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fieldallyinfo</name>
  		<replaceName>FieldAllyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fieldallyinfo</name>
  		<replaceName>FieldAllyInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fieldallyinfo</name>
  		<replaceName>FieldAllyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fieldallyinfo_size</name>
  		<replaceName>FieldAllyInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceSimpleInfo& fieldallyinfo(int index) const;
  inline ::pb::TAllianceSimpleInfo* mutable_fieldallyinfo(int index);
  inline ::pb::TAllianceSimpleInfo* add_fieldallyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfo >&
      fieldallyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfo >*
      mutable_fieldallyinfo();

  // optional uint32 TeamScore = 4;
  inline bool has_teamscore() const;
  inline void clear_teamscore();
  static const int kTeamScoreFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagAllyInfo</name>
  	<Function>
  		<name>teamscore</name>
  		<replaceName>TeamScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamscore</name>
  		<replaceName>TeamScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamscore</name>
  		<replaceName>TeamScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamscore() const;
  inline void set_teamscore(::google::protobuf::uint32 value);

  // optional uint64 FieldDoneTime = 5;
  inline bool has_fielddonetime() const;
  inline void clear_fielddonetime();
  static const int kFieldDoneTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagAllyInfo</name>
  	<Function>
  		<name>fielddonetime</name>
  		<replaceName>FieldDoneTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fielddonetime</name>
  		<replaceName>FieldDoneTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fielddonetime</name>
  		<replaceName>FieldDoneTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fielddonetime() const;
  inline void set_fielddonetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagAllyInfo)
 private:
  inline void set_has_allyid();
  inline void clear_has_allyid();
  inline void set_has_currentfieldid();
  inline void clear_has_currentfieldid();
  inline void set_has_teamscore();
  inline void clear_has_teamscore();
  inline void set_has_fielddonetime();
  inline void clear_has_fielddonetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 allyid_;
  ::google::protobuf::uint64 currentfieldid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfo > fieldallyinfo_;
  ::google::protobuf::uint64 fielddonetime_;
  ::google::protobuf::uint32 teamscore_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagAllyInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagUserInfo : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagUserInfo();
  virtual ~TPlatformSiegeFlagUserInfo();

  TPlatformSiegeFlagUserInfo(const TPlatformSiegeFlagUserInfo& from);

  inline TPlatformSiegeFlagUserInfo& operator=(const TPlatformSiegeFlagUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagUserInfo& default_instance();

  void Swap(TPlatformSiegeFlagUserInfo* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagUserInfo& from);
  void MergeFrom(const TPlatformSiegeFlagUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagUserInfo</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional bool IsJoin = 2;
  inline bool has_isjoin() const;
  inline void clear_isjoin();
  static const int kIsJoinFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagUserInfo</name>
  	<Function>
  		<name>isjoin</name>
  		<replaceName>IsJoin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isjoin</name>
  		<replaceName>IsJoin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isjoin</name>
  		<replaceName>IsJoin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isjoin() const;
  inline void set_isjoin(bool value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagUserInfo)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_isjoin();
  inline void clear_has_isjoin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 score_;
  bool isjoin_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagStage</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagStage : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagStage();
  virtual ~TPlatformSiegeFlagStage();

  TPlatformSiegeFlagStage(const TPlatformSiegeFlagStage& from);

  inline TPlatformSiegeFlagStage& operator=(const TPlatformSiegeFlagStage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagStage& default_instance();

  void Swap(TPlatformSiegeFlagStage* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagStage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagStage& from);
  void MergeFrom(const TPlatformSiegeFlagStage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 BeginTime = 1;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagStage</name>
  	<Function>
  		<name>begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 begintime() const;
  inline void set_begintime(::google::protobuf::uint64 value);

  // optional uint64 MatchTime = 2;
  inline bool has_matchtime() const;
  inline void clear_matchtime();
  static const int kMatchTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagStage</name>
  	<Function>
  		<name>matchtime</name>
  		<replaceName>MatchTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_matchtime</name>
  		<replaceName>MatchTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_matchtime</name>
  		<replaceName>MatchTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 matchtime() const;
  inline void set_matchtime(::google::protobuf::uint64 value);

  // optional uint64 MatchShowTime = 3;
  inline bool has_matchshowtime() const;
  inline void clear_matchshowtime();
  static const int kMatchShowTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagStage</name>
  	<Function>
  		<name>matchshowtime</name>
  		<replaceName>MatchShowTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_matchshowtime</name>
  		<replaceName>MatchShowTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_matchshowtime</name>
  		<replaceName>MatchShowTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 matchshowtime() const;
  inline void set_matchshowtime(::google::protobuf::uint64 value);

  // optional uint64 AtkBeginTime = 4;
  inline bool has_atkbegintime() const;
  inline void clear_atkbegintime();
  static const int kAtkBeginTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagStage</name>
  	<Function>
  		<name>atkbegintime</name>
  		<replaceName>AtkBeginTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkbegintime</name>
  		<replaceName>AtkBeginTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkbegintime</name>
  		<replaceName>AtkBeginTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 atkbegintime() const;
  inline void set_atkbegintime(::google::protobuf::uint64 value);

  // optional uint64 ShowTime = 5;
  inline bool has_showtime() const;
  inline void clear_showtime();
  static const int kShowTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagStage</name>
  	<Function>
  		<name>showtime</name>
  		<replaceName>ShowTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_showtime</name>
  		<replaceName>ShowTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_showtime</name>
  		<replaceName>ShowTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 showtime() const;
  inline void set_showtime(::google::protobuf::uint64 value);

  // optional uint64 EndTime = 6;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagStage</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // optional .pb.EPlatformSiegeFlagStage Stage = 7;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagStage</name>
  	<Function>
  		<name>stage</name>
  		<replaceName>Stage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stage</name>
  		<replaceName>Stage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stage</name>
  		<replaceName>Stage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EPlatformSiegeFlagStage stage() const;
  inline void set_stage(::pb::EPlatformSiegeFlagStage value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagStage)
 private:
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_matchtime();
  inline void clear_has_matchtime();
  inline void set_has_matchshowtime();
  inline void clear_has_matchshowtime();
  inline void set_has_atkbegintime();
  inline void clear_has_atkbegintime();
  inline void set_has_showtime();
  inline void clear_has_showtime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_stage();
  inline void clear_has_stage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 begintime_;
  ::google::protobuf::uint64 matchtime_;
  ::google::protobuf::uint64 matchshowtime_;
  ::google::protobuf::uint64 atkbegintime_;
  ::google::protobuf::uint64 showtime_;
  ::google::protobuf::uint64 endtime_;
  int stage_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagStage* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagGetBaseInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagGetBaseInfoRsp : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagGetBaseInfoRsp();
  virtual ~TPlatformSiegeFlagGetBaseInfoRsp();

  TPlatformSiegeFlagGetBaseInfoRsp(const TPlatformSiegeFlagGetBaseInfoRsp& from);

  inline TPlatformSiegeFlagGetBaseInfoRsp& operator=(const TPlatformSiegeFlagGetBaseInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagGetBaseInfoRsp& default_instance();

  void Swap(TPlatformSiegeFlagGetBaseInfoRsp* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagGetBaseInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagGetBaseInfoRsp& from);
  void MergeFrom(const TPlatformSiegeFlagGetBaseInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool FuncOpen = 1;
  inline bool has_funcopen() const;
  inline void clear_funcopen();
  static const int kFuncOpenFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetBaseInfoRsp</name>
  	<Function>
  		<name>funcopen</name>
  		<replaceName>FuncOpen</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_funcopen</name>
  		<replaceName>FuncOpen</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_funcopen</name>
  		<replaceName>FuncOpen</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool funcopen() const;
  inline void set_funcopen(bool value);

  // optional .pb.TPlatformSiegeFlagAllyInfo AllyInfo = 2;
  inline bool has_allyinfo() const;
  inline void clear_allyinfo();
  static const int kAllyInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetBaseInfoRsp</name>
  	<Function>
  		<name>allyinfo</name>
  		<replaceName>AllyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allyinfo</name>
  		<replaceName>AllyInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_allyinfo</name>
  		<replaceName>AllyInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allyinfo</name>
  		<replaceName>AllyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformSiegeFlagAllyInfo& allyinfo() const;
  inline ::pb::TPlatformSiegeFlagAllyInfo* mutable_allyinfo();
  inline ::pb::TPlatformSiegeFlagAllyInfo* release_allyinfo();
  inline void set_allocated_allyinfo(::pb::TPlatformSiegeFlagAllyInfo* allyinfo);

  // optional .pb.TPlatformSiegeFlagUserInfo UserInfo = 3;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetBaseInfoRsp</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformSiegeFlagUserInfo& userinfo() const;
  inline ::pb::TPlatformSiegeFlagUserInfo* mutable_userinfo();
  inline ::pb::TPlatformSiegeFlagUserInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TPlatformSiegeFlagUserInfo* userinfo);

  // optional .pb.TPlatformSiegeFlagStage RealProgress = 4;
  inline bool has_realprogress() const;
  inline void clear_realprogress();
  static const int kRealProgressFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetBaseInfoRsp</name>
  	<Function>
  		<name>realprogress</name>
  		<replaceName>RealProgress</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_realprogress</name>
  		<replaceName>RealProgress</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_realprogress</name>
  		<replaceName>RealProgress</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_realprogress</name>
  		<replaceName>RealProgress</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformSiegeFlagStage& realprogress() const;
  inline ::pb::TPlatformSiegeFlagStage* mutable_realprogress();
  inline ::pb::TPlatformSiegeFlagStage* release_realprogress();
  inline void set_allocated_realprogress(::pb::TPlatformSiegeFlagStage* realprogress);

  // optional uint32 Round = 5;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetBaseInfoRsp</name>
  	<Function>
  		<name>round</name>
  		<replaceName>Round</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_round</name>
  		<replaceName>Round</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_round</name>
  		<replaceName>Round</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 round() const;
  inline void set_round(::google::protobuf::uint32 value);

  // optional uint64 SeasonBeginTime = 6;
  inline bool has_seasonbegintime() const;
  inline void clear_seasonbegintime();
  static const int kSeasonBeginTimeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetBaseInfoRsp</name>
  	<Function>
  		<name>seasonbegintime</name>
  		<replaceName>SeasonBeginTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_seasonbegintime</name>
  		<replaceName>SeasonBeginTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_seasonbegintime</name>
  		<replaceName>SeasonBeginTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 seasonbegintime() const;
  inline void set_seasonbegintime(::google::protobuf::uint64 value);

  // optional uint64 SeasonEndTime = 7;
  inline bool has_seasonendtime() const;
  inline void clear_seasonendtime();
  static const int kSeasonEndTimeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetBaseInfoRsp</name>
  	<Function>
  		<name>seasonendtime</name>
  		<replaceName>SeasonEndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_seasonendtime</name>
  		<replaceName>SeasonEndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_seasonendtime</name>
  		<replaceName>SeasonEndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 seasonendtime() const;
  inline void set_seasonendtime(::google::protobuf::uint64 value);

  // optional uint64 SignTime = 8;
  inline bool has_signtime() const;
  inline void clear_signtime();
  static const int kSignTimeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetBaseInfoRsp</name>
  	<Function>
  		<name>signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 signtime() const;
  inline void set_signtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagGetBaseInfoRsp)
 private:
  inline void set_has_funcopen();
  inline void clear_has_funcopen();
  inline void set_has_allyinfo();
  inline void clear_has_allyinfo();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_realprogress();
  inline void clear_has_realprogress();
  inline void set_has_round();
  inline void clear_has_round();
  inline void set_has_seasonbegintime();
  inline void clear_has_seasonbegintime();
  inline void set_has_seasonendtime();
  inline void clear_has_seasonendtime();
  inline void set_has_signtime();
  inline void clear_has_signtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPlatformSiegeFlagAllyInfo* allyinfo_;
  ::pb::TPlatformSiegeFlagUserInfo* userinfo_;
  bool funcopen_;
  ::google::protobuf::uint32 round_;
  ::pb::TPlatformSiegeFlagStage* realprogress_;
  ::google::protobuf::uint64 seasonbegintime_;
  ::google::protobuf::uint64 seasonendtime_;
  ::google::protobuf::uint64 signtime_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagGetBaseInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagSignRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagSignRsp : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagSignRsp();
  virtual ~TPlatformSiegeFlagSignRsp();

  TPlatformSiegeFlagSignRsp(const TPlatformSiegeFlagSignRsp& from);

  inline TPlatformSiegeFlagSignRsp& operator=(const TPlatformSiegeFlagSignRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagSignRsp& default_instance();

  void Swap(TPlatformSiegeFlagSignRsp* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagSignRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagSignRsp& from);
  void MergeFrom(const TPlatformSiegeFlagSignRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 SignTime = 1;
  inline bool has_signtime() const;
  inline void clear_signtime();
  static const int kSignTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagSignRsp</name>
  	<Function>
  		<name>signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 signtime() const;
  inline void set_signtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagSignRsp)
 private:
  inline void set_has_signtime();
  inline void clear_has_signtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 signtime_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagSignRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagMoveReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagMoveReq : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagMoveReq();
  virtual ~TPlatformSiegeFlagMoveReq();

  TPlatformSiegeFlagMoveReq(const TPlatformSiegeFlagMoveReq& from);

  inline TPlatformSiegeFlagMoveReq& operator=(const TPlatformSiegeFlagMoveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagMoveReq& default_instance();

  void Swap(TPlatformSiegeFlagMoveReq* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagMoveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagMoveReq& from);
  void MergeFrom(const TPlatformSiegeFlagMoveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.PbVector2_Int TargetPos = 1;
  inline bool has_targetpos() const;
  inline void clear_targetpos();
  static const int kTargetPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagMoveReq</name>
  	<Function>
  		<name>targetpos</name>
  		<replaceName>TargetPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetpos</name>
  		<replaceName>TargetPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_targetpos</name>
  		<replaceName>TargetPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetpos</name>
  		<replaceName>TargetPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& targetpos() const;
  inline ::pb::PbVector2_Int* mutable_targetpos();
  inline ::pb::PbVector2_Int* release_targetpos();
  inline void set_allocated_targetpos(::pb::PbVector2_Int* targetpos);

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagMoveReq)
 private:
  inline void set_has_targetpos();
  inline void clear_has_targetpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::PbVector2_Int* targetpos_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagMoveReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagAttackReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagAttackReq : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagAttackReq();
  virtual ~TPlatformSiegeFlagAttackReq();

  TPlatformSiegeFlagAttackReq(const TPlatformSiegeFlagAttackReq& from);

  inline TPlatformSiegeFlagAttackReq& operator=(const TPlatformSiegeFlagAttackReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagAttackReq& default_instance();

  void Swap(TPlatformSiegeFlagAttackReq* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagAttackReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagAttackReq& from);
  void MergeFrom(const TPlatformSiegeFlagAttackReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TargetId = 1;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagAttackReq</name>
  	<Function>
  		<name>targetid</name>
  		<replaceName>TargetId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetid</name>
  		<replaceName>TargetId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetid</name>
  		<replaceName>TargetId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 targetid() const;
  inline void set_targetid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagAttackReq)
 private:
  inline void set_has_targetid();
  inline void clear_has_targetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 targetid_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagAttackReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagTouchReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagTouchReq : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagTouchReq();
  virtual ~TPlatformSiegeFlagTouchReq();

  TPlatformSiegeFlagTouchReq(const TPlatformSiegeFlagTouchReq& from);

  inline TPlatformSiegeFlagTouchReq& operator=(const TPlatformSiegeFlagTouchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagTouchReq& default_instance();

  void Swap(TPlatformSiegeFlagTouchReq* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagTouchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagTouchReq& from);
  void MergeFrom(const TPlatformSiegeFlagTouchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TargetBid = 1;
  inline bool has_targetbid() const;
  inline void clear_targetbid();
  static const int kTargetBidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagTouchReq</name>
  	<Function>
  		<name>targetbid</name>
  		<replaceName>TargetBid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetbid</name>
  		<replaceName>TargetBid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetbid</name>
  		<replaceName>TargetBid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 targetbid() const;
  inline void set_targetbid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagTouchReq)
 private:
  inline void set_has_targetbid();
  inline void clear_has_targetbid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 targetbid_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagTouchReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagSetUserOptReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagSetUserOptReq : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagSetUserOptReq();
  virtual ~TPlatformSiegeFlagSetUserOptReq();

  TPlatformSiegeFlagSetUserOptReq(const TPlatformSiegeFlagSetUserOptReq& from);

  inline TPlatformSiegeFlagSetUserOptReq& operator=(const TPlatformSiegeFlagSetUserOptReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagSetUserOptReq& default_instance();

  void Swap(TPlatformSiegeFlagSetUserOptReq* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagSetUserOptReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagSetUserOptReq& from);
  void MergeFrom(const TPlatformSiegeFlagSetUserOptReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TargetId = 1;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagSetUserOptReq</name>
  	<Function>
  		<name>targetid</name>
  		<replaceName>TargetId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetid</name>
  		<replaceName>TargetId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetid</name>
  		<replaceName>TargetId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 targetid() const;
  inline void set_targetid(::google::protobuf::uint64 value);

  // optional bool AutoAttack = 2;
  inline bool has_autoattack() const;
  inline void clear_autoattack();
  static const int kAutoAttackFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagSetUserOptReq</name>
  	<Function>
  		<name>autoattack</name>
  		<replaceName>AutoAttack</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_autoattack</name>
  		<replaceName>AutoAttack</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_autoattack</name>
  		<replaceName>AutoAttack</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool autoattack() const;
  inline void set_autoattack(bool value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagSetUserOptReq)
 private:
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_autoattack();
  inline void clear_has_autoattack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 targetid_;
  bool autoattack_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagSetUserOptReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagSetArmyOptReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagSetArmyOptReq : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagSetArmyOptReq();
  virtual ~TPlatformSiegeFlagSetArmyOptReq();

  TPlatformSiegeFlagSetArmyOptReq(const TPlatformSiegeFlagSetArmyOptReq& from);

  inline TPlatformSiegeFlagSetArmyOptReq& operator=(const TPlatformSiegeFlagSetArmyOptReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagSetArmyOptReq& default_instance();

  void Swap(TPlatformSiegeFlagSetArmyOptReq* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagSetArmyOptReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagSetArmyOptReq& from);
  void MergeFrom(const TPlatformSiegeFlagSetArmyOptReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GoalId = 1;
  inline bool has_goalid() const;
  inline void clear_goalid();
  static const int kGoalIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagSetArmyOptReq</name>
  	<Function>
  		<name>goalid</name>
  		<replaceName>GoalId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goalid</name>
  		<replaceName>GoalId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goalid</name>
  		<replaceName>GoalId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 goalid() const;
  inline void set_goalid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagSetArmyOptReq)
 private:
  inline void set_has_goalid();
  inline void clear_has_goalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 goalid_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagSetArmyOptReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagAllyRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagAllyRankInfo : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagAllyRankInfo();
  virtual ~TPlatformSiegeFlagAllyRankInfo();

  TPlatformSiegeFlagAllyRankInfo(const TPlatformSiegeFlagAllyRankInfo& from);

  inline TPlatformSiegeFlagAllyRankInfo& operator=(const TPlatformSiegeFlagAllyRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagAllyRankInfo& default_instance();

  void Swap(TPlatformSiegeFlagAllyRankInfo* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagAllyRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagAllyRankInfo& from);
  void MergeFrom(const TPlatformSiegeFlagAllyRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAllianceSimpleInfo AllyInfo = 1;
  inline bool has_allyinfo() const;
  inline void clear_allyinfo();
  static const int kAllyInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagAllyRankInfo</name>
  	<Function>
  		<name>allyinfo</name>
  		<replaceName>AllyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allyinfo</name>
  		<replaceName>AllyInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_allyinfo</name>
  		<replaceName>AllyInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allyinfo</name>
  		<replaceName>AllyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceSimpleInfo& allyinfo() const;
  inline ::pb::TAllianceSimpleInfo* mutable_allyinfo();
  inline ::pb::TAllianceSimpleInfo* release_allyinfo();
  inline void set_allocated_allyinfo(::pb::TAllianceSimpleInfo* allyinfo);

  // optional uint32 Score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagAllyRankInfo</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 Rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagAllyRankInfo</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagAllyRankInfo)
 private:
  inline void set_has_allyinfo();
  inline void clear_has_allyinfo();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAllianceSimpleInfo* allyinfo_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 rank_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagAllyRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagGetAllyRankReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagGetAllyRankReq : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagGetAllyRankReq();
  virtual ~TPlatformSiegeFlagGetAllyRankReq();

  TPlatformSiegeFlagGetAllyRankReq(const TPlatformSiegeFlagGetAllyRankReq& from);

  inline TPlatformSiegeFlagGetAllyRankReq& operator=(const TPlatformSiegeFlagGetAllyRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagGetAllyRankReq& default_instance();

  void Swap(TPlatformSiegeFlagGetAllyRankReq* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagGetAllyRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagGetAllyRankReq& from);
  void MergeFrom(const TPlatformSiegeFlagGetAllyRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetAllyRankReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetAllyRankReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagGetAllyRankReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagGetAllyRankReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagGetAllyRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagGetAllyRankRsp : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagGetAllyRankRsp();
  virtual ~TPlatformSiegeFlagGetAllyRankRsp();

  TPlatformSiegeFlagGetAllyRankRsp(const TPlatformSiegeFlagGetAllyRankRsp& from);

  inline TPlatformSiegeFlagGetAllyRankRsp& operator=(const TPlatformSiegeFlagGetAllyRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagGetAllyRankRsp& default_instance();

  void Swap(TPlatformSiegeFlagGetAllyRankRsp* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagGetAllyRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagGetAllyRankRsp& from);
  void MergeFrom(const TPlatformSiegeFlagGetAllyRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPlatformSiegeFlagAllyRankInfo RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetAllyRankRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformSiegeFlagAllyRankInfo& rankarr(int index) const;
  inline ::pb::TPlatformSiegeFlagAllyRankInfo* mutable_rankarr(int index);
  inline ::pb::TPlatformSiegeFlagAllyRankInfo* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagAllyRankInfo >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagAllyRankInfo >*
      mutable_rankarr();

  // optional uint32 Score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetAllyRankRsp</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 Rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetAllyRankRsp</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint64 LeaderUid = 4;
  inline bool has_leaderuid() const;
  inline void clear_leaderuid();
  static const int kLeaderUidFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetAllyRankRsp</name>
  	<Function>
  		<name>leaderuid</name>
  		<replaceName>LeaderUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leaderuid</name>
  		<replaceName>LeaderUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leaderuid</name>
  		<replaceName>LeaderUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 leaderuid() const;
  inline void set_leaderuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagGetAllyRankRsp)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_leaderuid();
  inline void clear_has_leaderuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagAllyRankInfo > rankarr_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint64 leaderuid_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagGetAllyRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagUserRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagUserRankInfo : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagUserRankInfo();
  virtual ~TPlatformSiegeFlagUserRankInfo();

  TPlatformSiegeFlagUserRankInfo(const TPlatformSiegeFlagUserRankInfo& from);

  inline TPlatformSiegeFlagUserRankInfo& operator=(const TPlatformSiegeFlagUserRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagUserRankInfo& default_instance();

  void Swap(TPlatformSiegeFlagUserRankInfo* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagUserRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagUserRankInfo& from);
  void MergeFrom(const TPlatformSiegeFlagUserRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagUserRankInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Uname = 2;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagUserRankInfo</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 ImageHtid = 3;
  inline bool has_imagehtid() const;
  inline void clear_imagehtid();
  static const int kImageHtidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagUserRankInfo</name>
  	<Function>
  		<name>imagehtid</name>
  		<replaceName>ImageHtid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_imagehtid</name>
  		<replaceName>ImageHtid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_imagehtid</name>
  		<replaceName>ImageHtid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 imagehtid() const;
  inline void set_imagehtid(::google::protobuf::uint32 value);

  // optional uint32 ImageFrameTid = 4;
  inline bool has_imageframetid() const;
  inline void clear_imageframetid();
  static const int kImageFrameTidFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagUserRankInfo</name>
  	<Function>
  		<name>imageframetid</name>
  		<replaceName>ImageFrameTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_imageframetid</name>
  		<replaceName>ImageFrameTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_imageframetid</name>
  		<replaceName>ImageFrameTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 imageframetid() const;
  inline void set_imageframetid(::google::protobuf::uint32 value);

  // optional uint32 Title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagUserRankInfo</name>
  	<Function>
  		<name>title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 title() const;
  inline void set_title(::google::protobuf::uint32 value);

  // optional uint32 Rank = 10;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagUserRankInfo</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 Score = 11;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagUserRankInfo</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 KillNum = 12;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillNumFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagUserRankInfo</name>
  	<Function>
  		<name>killnum</name>
  		<replaceName>KillNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_killnum</name>
  		<replaceName>KillNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_killnum</name>
  		<replaceName>KillNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 killnum() const;
  inline void set_killnum(::google::protobuf::uint32 value);

  // optional uint32 Devote = 13;
  inline bool has_devote() const;
  inline void clear_devote();
  static const int kDevoteFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagUserRankInfo</name>
  	<Function>
  		<name>devote</name>
  		<replaceName>Devote</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_devote</name>
  		<replaceName>Devote</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_devote</name>
  		<replaceName>Devote</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 devote() const;
  inline void set_devote(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagUserRankInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_imagehtid();
  inline void clear_has_imagehtid();
  inline void set_has_imageframetid();
  inline void clear_has_imageframetid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_killnum();
  inline void clear_has_killnum();
  inline void set_has_devote();
  inline void clear_has_devote();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* uname_;
  ::google::protobuf::uint32 imagehtid_;
  ::google::protobuf::uint32 imageframetid_;
  ::google::protobuf::uint32 title_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 killnum_;
  ::google::protobuf::uint32 devote_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagUserRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagGetRankListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagGetRankListReq : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagGetRankListReq();
  virtual ~TPlatformSiegeFlagGetRankListReq();

  TPlatformSiegeFlagGetRankListReq(const TPlatformSiegeFlagGetRankListReq& from);

  inline TPlatformSiegeFlagGetRankListReq& operator=(const TPlatformSiegeFlagGetRankListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagGetRankListReq& default_instance();

  void Swap(TPlatformSiegeFlagGetRankListReq* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagGetRankListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagGetRankListReq& from);
  void MergeFrom(const TPlatformSiegeFlagGetRankListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetRankListReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetRankListReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagGetRankListReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagGetRankListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagGetRankListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagGetRankListRsp : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagGetRankListRsp();
  virtual ~TPlatformSiegeFlagGetRankListRsp();

  TPlatformSiegeFlagGetRankListRsp(const TPlatformSiegeFlagGetRankListRsp& from);

  inline TPlatformSiegeFlagGetRankListRsp& operator=(const TPlatformSiegeFlagGetRankListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagGetRankListRsp& default_instance();

  void Swap(TPlatformSiegeFlagGetRankListRsp* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagGetRankListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagGetRankListRsp& from);
  void MergeFrom(const TPlatformSiegeFlagGetRankListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPlatformSiegeFlagUserRankInfo RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetRankListRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformSiegeFlagUserRankInfo& rankarr(int index) const;
  inline ::pb::TPlatformSiegeFlagUserRankInfo* mutable_rankarr(int index);
  inline ::pb::TPlatformSiegeFlagUserRankInfo* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagUserRankInfo >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagUserRankInfo >*
      mutable_rankarr();

  // optional uint32 Rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetRankListRsp</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 Score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetRankListRsp</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 KillCnt = 4;
  inline bool has_killcnt() const;
  inline void clear_killcnt();
  static const int kKillCntFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetRankListRsp</name>
  	<Function>
  		<name>killcnt</name>
  		<replaceName>KillCnt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_killcnt</name>
  		<replaceName>KillCnt</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_killcnt</name>
  		<replaceName>KillCnt</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 killcnt() const;
  inline void set_killcnt(::google::protobuf::uint32 value);

  // optional uint32 Devote = 5;
  inline bool has_devote() const;
  inline void clear_devote();
  static const int kDevoteFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagGetRankListRsp</name>
  	<Function>
  		<name>devote</name>
  		<replaceName>Devote</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_devote</name>
  		<replaceName>Devote</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_devote</name>
  		<replaceName>Devote</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 devote() const;
  inline void set_devote(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagGetRankListRsp)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_killcnt();
  inline void clear_has_killcnt();
  inline void set_has_devote();
  inline void clear_has_devote();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagUserRankInfo > rankarr_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 killcnt_;
  ::google::protobuf::uint32 devote_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagGetRankListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagBuyInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagBuyInfo : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagBuyInfo();
  virtual ~TPlatformSiegeFlagBuyInfo();

  TPlatformSiegeFlagBuyInfo(const TPlatformSiegeFlagBuyInfo& from);

  inline TPlatformSiegeFlagBuyInfo& operator=(const TPlatformSiegeFlagBuyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagBuyInfo& default_instance();

  void Swap(TPlatformSiegeFlagBuyInfo* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagBuyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagBuyInfo& from);
  void MergeFrom(const TPlatformSiegeFlagBuyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagBuyInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 BuyNum = 2;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagBuyInfo</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagBuyInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 buynum_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagBuyInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagServerGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagServerGetInfoRsp : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagServerGetInfoRsp();
  virtual ~TPlatformSiegeFlagServerGetInfoRsp();

  TPlatformSiegeFlagServerGetInfoRsp(const TPlatformSiegeFlagServerGetInfoRsp& from);

  inline TPlatformSiegeFlagServerGetInfoRsp& operator=(const TPlatformSiegeFlagServerGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagServerGetInfoRsp& default_instance();

  void Swap(TPlatformSiegeFlagServerGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagServerGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagServerGetInfoRsp& from);
  void MergeFrom(const TPlatformSiegeFlagServerGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool CanEnter = 1;
  inline bool has_canenter() const;
  inline void clear_canenter();
  static const int kCanEnterFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagServerGetInfoRsp</name>
  	<Function>
  		<name>canenter</name>
  		<replaceName>CanEnter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_canenter</name>
  		<replaceName>CanEnter</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_canenter</name>
  		<replaceName>CanEnter</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool canenter() const;
  inline void set_canenter(bool value);

  // repeated .pb.TPlatformSiegeFlagBuyInfo ArrInfo = 2;
  inline int arrinfo_size() const;
  inline void clear_arrinfo();
  static const int kArrInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagServerGetInfoRsp</name>
  	<Function>
  		<name>arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrinfo_size</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformSiegeFlagBuyInfo& arrinfo(int index) const;
  inline ::pb::TPlatformSiegeFlagBuyInfo* mutable_arrinfo(int index);
  inline ::pb::TPlatformSiegeFlagBuyInfo* add_arrinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagBuyInfo >&
      arrinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagBuyInfo >*
      mutable_arrinfo();

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagServerGetInfoRsp)
 private:
  inline void set_has_canenter();
  inline void clear_has_canenter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagBuyInfo > arrinfo_;
  bool canenter_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagServerGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagServerBuyGoodsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagServerBuyGoodsReq : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagServerBuyGoodsReq();
  virtual ~TPlatformSiegeFlagServerBuyGoodsReq();

  TPlatformSiegeFlagServerBuyGoodsReq(const TPlatformSiegeFlagServerBuyGoodsReq& from);

  inline TPlatformSiegeFlagServerBuyGoodsReq& operator=(const TPlatformSiegeFlagServerBuyGoodsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagServerBuyGoodsReq& default_instance();

  void Swap(TPlatformSiegeFlagServerBuyGoodsReq* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagServerBuyGoodsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagServerBuyGoodsReq& from);
  void MergeFrom(const TPlatformSiegeFlagServerBuyGoodsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagServerBuyGoodsReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagServerBuyGoodsReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 num() const;
  inline void set_num(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagServerBuyGoodsReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 num_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagServerBuyGoodsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformSiegeFlagServerNodify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformSiegeFlagServerNodify : public ::google::protobuf::Message {
 public:
  TPlatformSiegeFlagServerNodify();
  virtual ~TPlatformSiegeFlagServerNodify();

  TPlatformSiegeFlagServerNodify(const TPlatformSiegeFlagServerNodify& from);

  inline TPlatformSiegeFlagServerNodify& operator=(const TPlatformSiegeFlagServerNodify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformSiegeFlagServerNodify& default_instance();

  void Swap(TPlatformSiegeFlagServerNodify* other);

  // implements Message ----------------------------------------------

  TPlatformSiegeFlagServerNodify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformSiegeFlagServerNodify& from);
  void MergeFrom(const TPlatformSiegeFlagServerNodify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPlatformSiegeFlagBuyInfo ArrInfo = 1;
  inline int arrinfo_size() const;
  inline void clear_arrinfo();
  static const int kArrInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformSiegeFlagServerNodify</name>
  	<Function>
  		<name>arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrinfo_size</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformSiegeFlagBuyInfo& arrinfo(int index) const;
  inline ::pb::TPlatformSiegeFlagBuyInfo* mutable_arrinfo(int index);
  inline ::pb::TPlatformSiegeFlagBuyInfo* add_arrinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagBuyInfo >&
      arrinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagBuyInfo >*
      mutable_arrinfo();

  // @@protoc_insertion_point(class_scope:pb.TPlatformSiegeFlagServerNodify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagBuyInfo > arrinfo_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TPlatformSiegeFlagServerNodify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSiegeFlagAllyBaseInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSiegeFlagAllyBaseInfo : public ::google::protobuf::Message {
 public:
  TSiegeFlagAllyBaseInfo();
  virtual ~TSiegeFlagAllyBaseInfo();

  TSiegeFlagAllyBaseInfo(const TSiegeFlagAllyBaseInfo& from);

  inline TSiegeFlagAllyBaseInfo& operator=(const TSiegeFlagAllyBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSiegeFlagAllyBaseInfo& default_instance();

  void Swap(TSiegeFlagAllyBaseInfo* other);

  // implements Message ----------------------------------------------

  TSiegeFlagAllyBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSiegeFlagAllyBaseInfo& from);
  void MergeFrom(const TSiegeFlagAllyBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 AllyId = 1;
  inline bool has_allyid() const;
  inline void clear_allyid();
  static const int kAllyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagAllyBaseInfo</name>
  	<Function>
  		<name>allyid</name>
  		<replaceName>AllyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allyid</name>
  		<replaceName>AllyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allyid</name>
  		<replaceName>AllyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 allyid() const;
  inline void set_allyid(::google::protobuf::uint64 value);

  // optional uint32 Level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagAllyBaseInfo</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional string Name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagAllyBaseInfo</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 FightForce = 4;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagAllyBaseInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint32 BannerBase = 5;
  inline bool has_bannerbase() const;
  inline void clear_bannerbase();
  static const int kBannerBaseFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagAllyBaseInfo</name>
  	<Function>
  		<name>bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bannerbase() const;
  inline void set_bannerbase(::google::protobuf::uint32 value);

  // optional string BannerName = 6;
  inline bool has_bannername() const;
  inline void clear_bannername();
  static const int kBannerNameFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagAllyBaseInfo</name>
  	<Function>
  		<name>bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& bannername() const;
  inline void set_bannername(const ::std::string& value);
  inline void set_bannername(const char* value);
  inline void set_bannername(const char* value, size_t size);
  inline ::std::string* mutable_bannername();
  inline ::std::string* release_bannername();
  inline void set_allocated_bannername(::std::string* bannername);

  // optional uint32 BannerFigure = 7;
  inline bool has_bannerfigure() const;
  inline void clear_bannerfigure();
  static const int kBannerFigureFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagAllyBaseInfo</name>
  	<Function>
  		<name>bannerfigure</name>
  		<replaceName>BannerFigure</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannerfigure</name>
  		<replaceName>BannerFigure</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannerfigure</name>
  		<replaceName>BannerFigure</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bannerfigure() const;
  inline void set_bannerfigure(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSiegeFlagAllyBaseInfo)
 private:
  inline void set_has_allyid();
  inline void clear_has_allyid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_bannerbase();
  inline void clear_has_bannerbase();
  inline void set_has_bannername();
  inline void clear_has_bannername();
  inline void set_has_bannerfigure();
  inline void clear_has_bannerfigure();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 allyid_;
  ::std::string* name_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 bannerbase_;
  ::google::protobuf::uint64 fightforce_;
  ::std::string* bannername_;
  ::google::protobuf::uint32 bannerfigure_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TSiegeFlagAllyBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSiegeFlagUserBaseInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSiegeFlagUserBaseInfo : public ::google::protobuf::Message {
 public:
  TSiegeFlagUserBaseInfo();
  virtual ~TSiegeFlagUserBaseInfo();

  TSiegeFlagUserBaseInfo(const TSiegeFlagUserBaseInfo& from);

  inline TSiegeFlagUserBaseInfo& operator=(const TSiegeFlagUserBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSiegeFlagUserBaseInfo& default_instance();

  void Swap(TSiegeFlagUserBaseInfo* other);

  // implements Message ----------------------------------------------

  TSiegeFlagUserBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSiegeFlagUserBaseInfo& from);
  void MergeFrom(const TSiegeFlagUserBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagUserBaseInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagUserBaseInfo</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional .pb.EAlliancePost Post = 3;
  inline bool has_post() const;
  inline void clear_post();
  static const int kPostFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagUserBaseInfo</name>
  	<Function>
  		<name>post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAlliancePost post() const;
  inline void set_post(::pb::EAlliancePost value);

  // optional .pb.TUserSimpleInfo UserInfo = 4;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagUserBaseInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // @@protoc_insertion_point(class_scope:pb.TSiegeFlagUserBaseInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_post();
  inline void clear_has_post();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* serverid_;
  ::pb::TUserSimpleInfo* userinfo_;
  int post_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TSiegeFlagUserBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSiegeFlagGuildContriInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSiegeFlagGuildContriInfo : public ::google::protobuf::Message {
 public:
  TSiegeFlagGuildContriInfo();
  virtual ~TSiegeFlagGuildContriInfo();

  TSiegeFlagGuildContriInfo(const TSiegeFlagGuildContriInfo& from);

  inline TSiegeFlagGuildContriInfo& operator=(const TSiegeFlagGuildContriInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSiegeFlagGuildContriInfo& default_instance();

  void Swap(TSiegeFlagGuildContriInfo* other);

  // implements Message ----------------------------------------------

  TSiegeFlagGuildContriInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSiegeFlagGuildContriInfo& from);
  void MergeFrom(const TSiegeFlagGuildContriInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagGuildContriInfo</name>
  	<Function>
  		<name>gid</name>
  		<replaceName>Gid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gid</name>
  		<replaceName>Gid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gid</name>
  		<replaceName>Gid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 gid() const;
  inline void set_gid(::google::protobuf::uint64 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagGuildContriInfo</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional uint32 ContriNum = 3;
  inline bool has_contrinum() const;
  inline void clear_contrinum();
  static const int kContriNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagGuildContriInfo</name>
  	<Function>
  		<name>contrinum</name>
  		<replaceName>ContriNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_contrinum</name>
  		<replaceName>ContriNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_contrinum</name>
  		<replaceName>ContriNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 contrinum() const;
  inline void set_contrinum(::google::protobuf::uint32 value);

  // optional .pb.TAllianceGuildMemberInfo GuildInfo = 4;
  inline bool has_guildinfo() const;
  inline void clear_guildinfo();
  static const int kGuildInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagGuildContriInfo</name>
  	<Function>
  		<name>guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceGuildMemberInfo& guildinfo() const;
  inline ::pb::TAllianceGuildMemberInfo* mutable_guildinfo();
  inline ::pb::TAllianceGuildMemberInfo* release_guildinfo();
  inline void set_allocated_guildinfo(::pb::TAllianceGuildMemberInfo* guildinfo);

  // @@protoc_insertion_point(class_scope:pb.TSiegeFlagGuildContriInfo)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_contrinum();
  inline void clear_has_contrinum();
  inline void set_has_guildinfo();
  inline void clear_has_guildinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 gid_;
  ::std::string* serverid_;
  ::pb::TAllianceGuildMemberInfo* guildinfo_;
  ::google::protobuf::uint32 contrinum_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TSiegeFlagGuildContriInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSiegeFlagAllianceSimpleInfoWithUser</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSiegeFlagAllianceSimpleInfoWithUser : public ::google::protobuf::Message {
 public:
  TSiegeFlagAllianceSimpleInfoWithUser();
  virtual ~TSiegeFlagAllianceSimpleInfoWithUser();

  TSiegeFlagAllianceSimpleInfoWithUser(const TSiegeFlagAllianceSimpleInfoWithUser& from);

  inline TSiegeFlagAllianceSimpleInfoWithUser& operator=(const TSiegeFlagAllianceSimpleInfoWithUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSiegeFlagAllianceSimpleInfoWithUser& default_instance();

  void Swap(TSiegeFlagAllianceSimpleInfoWithUser* other);

  // implements Message ----------------------------------------------

  TSiegeFlagAllianceSimpleInfoWithUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSiegeFlagAllianceSimpleInfoWithUser& from);
  void MergeFrom(const TSiegeFlagAllianceSimpleInfoWithUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
  inline bool has_alliancesimpleinfo() const;
  inline void clear_alliancesimpleinfo();
  static const int kAllianceSimpleInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagAllianceSimpleInfoWithUser</name>
  	<Function>
  		<name>alliancesimpleinfo</name>
  		<replaceName>AllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_alliancesimpleinfo</name>
  		<replaceName>AllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_alliancesimpleinfo</name>
  		<replaceName>AllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_alliancesimpleinfo</name>
  		<replaceName>AllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceSimpleInfo& alliancesimpleinfo() const;
  inline ::pb::TAllianceSimpleInfo* mutable_alliancesimpleinfo();
  inline ::pb::TAllianceSimpleInfo* release_alliancesimpleinfo();
  inline void set_allocated_alliancesimpleinfo(::pb::TAllianceSimpleInfo* alliancesimpleinfo);

  // repeated .pb.TSiegeFlagUserBaseInfo ArrUserBaseInfo = 2;
  inline int arruserbaseinfo_size() const;
  inline void clear_arruserbaseinfo();
  static const int kArrUserBaseInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagAllianceSimpleInfoWithUser</name>
  	<Function>
  		<name>arruserbaseinfo</name>
  		<replaceName>ArrUserBaseInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arruserbaseinfo</name>
  		<replaceName>ArrUserBaseInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arruserbaseinfo</name>
  		<replaceName>ArrUserBaseInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arruserbaseinfo</name>
  		<replaceName>ArrUserBaseInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arruserbaseinfo_size</name>
  		<replaceName>ArrUserBaseInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSiegeFlagUserBaseInfo& arruserbaseinfo(int index) const;
  inline ::pb::TSiegeFlagUserBaseInfo* mutable_arruserbaseinfo(int index);
  inline ::pb::TSiegeFlagUserBaseInfo* add_arruserbaseinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSiegeFlagUserBaseInfo >&
      arruserbaseinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSiegeFlagUserBaseInfo >*
      mutable_arruserbaseinfo();

  // @@protoc_insertion_point(class_scope:pb.TSiegeFlagAllianceSimpleInfoWithUser)
 private:
  inline void set_has_alliancesimpleinfo();
  inline void clear_has_alliancesimpleinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAllianceSimpleInfo* alliancesimpleinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSiegeFlagUserBaseInfo > arruserbaseinfo_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TSiegeFlagAllianceSimpleInfoWithUser* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSiegeFlagBattleEndNodify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossPlatformSiegeFlag.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSiegeFlagBattleEndNodify : public ::google::protobuf::Message {
 public:
  TSiegeFlagBattleEndNodify();
  virtual ~TSiegeFlagBattleEndNodify();

  TSiegeFlagBattleEndNodify(const TSiegeFlagBattleEndNodify& from);

  inline TSiegeFlagBattleEndNodify& operator=(const TSiegeFlagBattleEndNodify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSiegeFlagBattleEndNodify& default_instance();

  void Swap(TSiegeFlagBattleEndNodify* other);

  // implements Message ----------------------------------------------

  TSiegeFlagBattleEndNodify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSiegeFlagBattleEndNodify& from);
  void MergeFrom(const TSiegeFlagBattleEndNodify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagBattleEndNodify</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint32 TeamScore = 2;
  inline bool has_teamscore() const;
  inline void clear_teamscore();
  static const int kTeamScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagBattleEndNodify</name>
  	<Function>
  		<name>teamscore</name>
  		<replaceName>TeamScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamscore</name>
  		<replaceName>TeamScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamscore</name>
  		<replaceName>TeamScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamscore() const;
  inline void set_teamscore(::google::protobuf::uint32 value);

  // optional uint64 FieldDoneTime = 3;
  inline bool has_fielddonetime() const;
  inline void clear_fielddonetime();
  static const int kFieldDoneTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSiegeFlagBattleEndNodify</name>
  	<Function>
  		<name>fielddonetime</name>
  		<replaceName>FieldDoneTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fielddonetime</name>
  		<replaceName>FieldDoneTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fielddonetime</name>
  		<replaceName>FieldDoneTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fielddonetime() const;
  inline void set_fielddonetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TSiegeFlagBattleEndNodify)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_teamscore();
  inline void clear_has_teamscore();
  inline void set_has_fielddonetime();
  inline void clear_has_fielddonetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 fielddonetime_;
  ::google::protobuf::uint32 teamscore_;
  friend void  protobuf_AddDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossPlatformSiegeFlag_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossPlatformSiegeFlag_2eproto();

  void InitAsDefaultInstance();
  static TSiegeFlagBattleEndNodify* default_instance_;
};
// ===================================================================


// ===================================================================

// TPlatformSiegeFlagAllyInfo

// optional uint64 AllyId = 1;
inline bool TPlatformSiegeFlagAllyInfo::has_allyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformSiegeFlagAllyInfo::set_has_allyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformSiegeFlagAllyInfo::clear_has_allyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformSiegeFlagAllyInfo::clear_allyid() {
  allyid_ = GOOGLE_ULONGLONG(0);
  clear_has_allyid();
}
inline ::google::protobuf::uint64 TPlatformSiegeFlagAllyInfo::allyid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagAllyInfo.AllyId)
  return allyid_;
}
inline void TPlatformSiegeFlagAllyInfo::set_allyid(::google::protobuf::uint64 value) {
  set_has_allyid();
  allyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagAllyInfo.AllyId)
}

// optional uint64 CurrentFieldId = 2;
inline bool TPlatformSiegeFlagAllyInfo::has_currentfieldid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformSiegeFlagAllyInfo::set_has_currentfieldid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformSiegeFlagAllyInfo::clear_has_currentfieldid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformSiegeFlagAllyInfo::clear_currentfieldid() {
  currentfieldid_ = GOOGLE_ULONGLONG(0);
  clear_has_currentfieldid();
}
inline ::google::protobuf::uint64 TPlatformSiegeFlagAllyInfo::currentfieldid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagAllyInfo.CurrentFieldId)
  return currentfieldid_;
}
inline void TPlatformSiegeFlagAllyInfo::set_currentfieldid(::google::protobuf::uint64 value) {
  set_has_currentfieldid();
  currentfieldid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagAllyInfo.CurrentFieldId)
}

// repeated .pb.TAllianceSimpleInfo FieldAllyInfo = 3;
inline int TPlatformSiegeFlagAllyInfo::fieldallyinfo_size() const {
  return fieldallyinfo_.size();
}
inline void TPlatformSiegeFlagAllyInfo::clear_fieldallyinfo() {
  fieldallyinfo_.Clear();
}
inline const ::pb::TAllianceSimpleInfo& TPlatformSiegeFlagAllyInfo::fieldallyinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagAllyInfo.FieldAllyInfo)
  return fieldallyinfo_.Get(index);
}
inline ::pb::TAllianceSimpleInfo* TPlatformSiegeFlagAllyInfo::mutable_fieldallyinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformSiegeFlagAllyInfo.FieldAllyInfo)
  return fieldallyinfo_.Mutable(index);
}
inline ::pb::TAllianceSimpleInfo* TPlatformSiegeFlagAllyInfo::add_fieldallyinfo() {
  // @@protoc_insertion_point(field_add:pb.TPlatformSiegeFlagAllyInfo.FieldAllyInfo)
  return fieldallyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfo >&
TPlatformSiegeFlagAllyInfo::fieldallyinfo() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformSiegeFlagAllyInfo.FieldAllyInfo)
  return fieldallyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfo >*
TPlatformSiegeFlagAllyInfo::mutable_fieldallyinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformSiegeFlagAllyInfo.FieldAllyInfo)
  return &fieldallyinfo_;
}

// optional uint32 TeamScore = 4;
inline bool TPlatformSiegeFlagAllyInfo::has_teamscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlatformSiegeFlagAllyInfo::set_has_teamscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlatformSiegeFlagAllyInfo::clear_has_teamscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlatformSiegeFlagAllyInfo::clear_teamscore() {
  teamscore_ = 0u;
  clear_has_teamscore();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagAllyInfo::teamscore() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagAllyInfo.TeamScore)
  return teamscore_;
}
inline void TPlatformSiegeFlagAllyInfo::set_teamscore(::google::protobuf::uint32 value) {
  set_has_teamscore();
  teamscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagAllyInfo.TeamScore)
}

// optional uint64 FieldDoneTime = 5;
inline bool TPlatformSiegeFlagAllyInfo::has_fielddonetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPlatformSiegeFlagAllyInfo::set_has_fielddonetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPlatformSiegeFlagAllyInfo::clear_has_fielddonetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPlatformSiegeFlagAllyInfo::clear_fielddonetime() {
  fielddonetime_ = GOOGLE_ULONGLONG(0);
  clear_has_fielddonetime();
}
inline ::google::protobuf::uint64 TPlatformSiegeFlagAllyInfo::fielddonetime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagAllyInfo.FieldDoneTime)
  return fielddonetime_;
}
inline void TPlatformSiegeFlagAllyInfo::set_fielddonetime(::google::protobuf::uint64 value) {
  set_has_fielddonetime();
  fielddonetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagAllyInfo.FieldDoneTime)
}

// -------------------------------------------------------------------

// TPlatformSiegeFlagUserInfo

// optional uint32 Score = 1;
inline bool TPlatformSiegeFlagUserInfo::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformSiegeFlagUserInfo::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformSiegeFlagUserInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformSiegeFlagUserInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagUserInfo::score() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagUserInfo.Score)
  return score_;
}
inline void TPlatformSiegeFlagUserInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagUserInfo.Score)
}

// optional bool IsJoin = 2;
inline bool TPlatformSiegeFlagUserInfo::has_isjoin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformSiegeFlagUserInfo::set_has_isjoin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformSiegeFlagUserInfo::clear_has_isjoin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformSiegeFlagUserInfo::clear_isjoin() {
  isjoin_ = false;
  clear_has_isjoin();
}
inline bool TPlatformSiegeFlagUserInfo::isjoin() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagUserInfo.IsJoin)
  return isjoin_;
}
inline void TPlatformSiegeFlagUserInfo::set_isjoin(bool value) {
  set_has_isjoin();
  isjoin_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagUserInfo.IsJoin)
}

// -------------------------------------------------------------------

// TPlatformSiegeFlagStage

// optional uint64 BeginTime = 1;
inline bool TPlatformSiegeFlagStage::has_begintime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformSiegeFlagStage::set_has_begintime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformSiegeFlagStage::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformSiegeFlagStage::clear_begintime() {
  begintime_ = GOOGLE_ULONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::uint64 TPlatformSiegeFlagStage::begintime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagStage.BeginTime)
  return begintime_;
}
inline void TPlatformSiegeFlagStage::set_begintime(::google::protobuf::uint64 value) {
  set_has_begintime();
  begintime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagStage.BeginTime)
}

// optional uint64 MatchTime = 2;
inline bool TPlatformSiegeFlagStage::has_matchtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformSiegeFlagStage::set_has_matchtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformSiegeFlagStage::clear_has_matchtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformSiegeFlagStage::clear_matchtime() {
  matchtime_ = GOOGLE_ULONGLONG(0);
  clear_has_matchtime();
}
inline ::google::protobuf::uint64 TPlatformSiegeFlagStage::matchtime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagStage.MatchTime)
  return matchtime_;
}
inline void TPlatformSiegeFlagStage::set_matchtime(::google::protobuf::uint64 value) {
  set_has_matchtime();
  matchtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagStage.MatchTime)
}

// optional uint64 MatchShowTime = 3;
inline bool TPlatformSiegeFlagStage::has_matchshowtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformSiegeFlagStage::set_has_matchshowtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformSiegeFlagStage::clear_has_matchshowtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformSiegeFlagStage::clear_matchshowtime() {
  matchshowtime_ = GOOGLE_ULONGLONG(0);
  clear_has_matchshowtime();
}
inline ::google::protobuf::uint64 TPlatformSiegeFlagStage::matchshowtime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagStage.MatchShowTime)
  return matchshowtime_;
}
inline void TPlatformSiegeFlagStage::set_matchshowtime(::google::protobuf::uint64 value) {
  set_has_matchshowtime();
  matchshowtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagStage.MatchShowTime)
}

// optional uint64 AtkBeginTime = 4;
inline bool TPlatformSiegeFlagStage::has_atkbegintime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlatformSiegeFlagStage::set_has_atkbegintime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlatformSiegeFlagStage::clear_has_atkbegintime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlatformSiegeFlagStage::clear_atkbegintime() {
  atkbegintime_ = GOOGLE_ULONGLONG(0);
  clear_has_atkbegintime();
}
inline ::google::protobuf::uint64 TPlatformSiegeFlagStage::atkbegintime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagStage.AtkBeginTime)
  return atkbegintime_;
}
inline void TPlatformSiegeFlagStage::set_atkbegintime(::google::protobuf::uint64 value) {
  set_has_atkbegintime();
  atkbegintime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagStage.AtkBeginTime)
}

// optional uint64 ShowTime = 5;
inline bool TPlatformSiegeFlagStage::has_showtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPlatformSiegeFlagStage::set_has_showtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPlatformSiegeFlagStage::clear_has_showtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPlatformSiegeFlagStage::clear_showtime() {
  showtime_ = GOOGLE_ULONGLONG(0);
  clear_has_showtime();
}
inline ::google::protobuf::uint64 TPlatformSiegeFlagStage::showtime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagStage.ShowTime)
  return showtime_;
}
inline void TPlatformSiegeFlagStage::set_showtime(::google::protobuf::uint64 value) {
  set_has_showtime();
  showtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagStage.ShowTime)
}

// optional uint64 EndTime = 6;
inline bool TPlatformSiegeFlagStage::has_endtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TPlatformSiegeFlagStage::set_has_endtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TPlatformSiegeFlagStage::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TPlatformSiegeFlagStage::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 TPlatformSiegeFlagStage::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagStage.EndTime)
  return endtime_;
}
inline void TPlatformSiegeFlagStage::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagStage.EndTime)
}

// optional .pb.EPlatformSiegeFlagStage Stage = 7;
inline bool TPlatformSiegeFlagStage::has_stage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TPlatformSiegeFlagStage::set_has_stage() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TPlatformSiegeFlagStage::clear_has_stage() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TPlatformSiegeFlagStage::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
inline ::pb::EPlatformSiegeFlagStage TPlatformSiegeFlagStage::stage() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagStage.Stage)
  return static_cast< ::pb::EPlatformSiegeFlagStage >(stage_);
}
inline void TPlatformSiegeFlagStage::set_stage(::pb::EPlatformSiegeFlagStage value) {
  assert(::pb::EPlatformSiegeFlagStage_IsValid(value));
  set_has_stage();
  stage_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagStage.Stage)
}

// -------------------------------------------------------------------

// TPlatformSiegeFlagGetBaseInfoRsp

// optional bool FuncOpen = 1;
inline bool TPlatformSiegeFlagGetBaseInfoRsp::has_funcopen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::set_has_funcopen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::clear_has_funcopen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::clear_funcopen() {
  funcopen_ = false;
  clear_has_funcopen();
}
inline bool TPlatformSiegeFlagGetBaseInfoRsp::funcopen() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetBaseInfoRsp.FuncOpen)
  return funcopen_;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::set_funcopen(bool value) {
  set_has_funcopen();
  funcopen_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagGetBaseInfoRsp.FuncOpen)
}

// optional .pb.TPlatformSiegeFlagAllyInfo AllyInfo = 2;
inline bool TPlatformSiegeFlagGetBaseInfoRsp::has_allyinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::set_has_allyinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::clear_has_allyinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::clear_allyinfo() {
  if (allyinfo_ != NULL) allyinfo_->::pb::TPlatformSiegeFlagAllyInfo::Clear();
  clear_has_allyinfo();
}
inline const ::pb::TPlatformSiegeFlagAllyInfo& TPlatformSiegeFlagGetBaseInfoRsp::allyinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetBaseInfoRsp.AllyInfo)
  return allyinfo_ != NULL ? *allyinfo_ : *default_instance_->allyinfo_;
}
inline ::pb::TPlatformSiegeFlagAllyInfo* TPlatformSiegeFlagGetBaseInfoRsp::mutable_allyinfo() {
  set_has_allyinfo();
  if (allyinfo_ == NULL) allyinfo_ = new ::pb::TPlatformSiegeFlagAllyInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlatformSiegeFlagGetBaseInfoRsp.AllyInfo)
  return allyinfo_;
}
inline ::pb::TPlatformSiegeFlagAllyInfo* TPlatformSiegeFlagGetBaseInfoRsp::release_allyinfo() {
  clear_has_allyinfo();
  ::pb::TPlatformSiegeFlagAllyInfo* temp = allyinfo_;
  allyinfo_ = NULL;
  return temp;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::set_allocated_allyinfo(::pb::TPlatformSiegeFlagAllyInfo* allyinfo) {
  delete allyinfo_;
  allyinfo_ = allyinfo;
  if (allyinfo) {
    set_has_allyinfo();
  } else {
    clear_has_allyinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlatformSiegeFlagGetBaseInfoRsp.AllyInfo)
}

// optional .pb.TPlatformSiegeFlagUserInfo UserInfo = 3;
inline bool TPlatformSiegeFlagGetBaseInfoRsp::has_userinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::set_has_userinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TPlatformSiegeFlagUserInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TPlatformSiegeFlagUserInfo& TPlatformSiegeFlagGetBaseInfoRsp::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetBaseInfoRsp.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TPlatformSiegeFlagUserInfo* TPlatformSiegeFlagGetBaseInfoRsp::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TPlatformSiegeFlagUserInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlatformSiegeFlagGetBaseInfoRsp.UserInfo)
  return userinfo_;
}
inline ::pb::TPlatformSiegeFlagUserInfo* TPlatformSiegeFlagGetBaseInfoRsp::release_userinfo() {
  clear_has_userinfo();
  ::pb::TPlatformSiegeFlagUserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::set_allocated_userinfo(::pb::TPlatformSiegeFlagUserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlatformSiegeFlagGetBaseInfoRsp.UserInfo)
}

// optional .pb.TPlatformSiegeFlagStage RealProgress = 4;
inline bool TPlatformSiegeFlagGetBaseInfoRsp::has_realprogress() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::set_has_realprogress() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::clear_has_realprogress() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::clear_realprogress() {
  if (realprogress_ != NULL) realprogress_->::pb::TPlatformSiegeFlagStage::Clear();
  clear_has_realprogress();
}
inline const ::pb::TPlatformSiegeFlagStage& TPlatformSiegeFlagGetBaseInfoRsp::realprogress() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetBaseInfoRsp.RealProgress)
  return realprogress_ != NULL ? *realprogress_ : *default_instance_->realprogress_;
}
inline ::pb::TPlatformSiegeFlagStage* TPlatformSiegeFlagGetBaseInfoRsp::mutable_realprogress() {
  set_has_realprogress();
  if (realprogress_ == NULL) realprogress_ = new ::pb::TPlatformSiegeFlagStage;
  // @@protoc_insertion_point(field_mutable:pb.TPlatformSiegeFlagGetBaseInfoRsp.RealProgress)
  return realprogress_;
}
inline ::pb::TPlatformSiegeFlagStage* TPlatformSiegeFlagGetBaseInfoRsp::release_realprogress() {
  clear_has_realprogress();
  ::pb::TPlatformSiegeFlagStage* temp = realprogress_;
  realprogress_ = NULL;
  return temp;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::set_allocated_realprogress(::pb::TPlatformSiegeFlagStage* realprogress) {
  delete realprogress_;
  realprogress_ = realprogress;
  if (realprogress) {
    set_has_realprogress();
  } else {
    clear_has_realprogress();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlatformSiegeFlagGetBaseInfoRsp.RealProgress)
}

// optional uint32 Round = 5;
inline bool TPlatformSiegeFlagGetBaseInfoRsp::has_round() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::set_has_round() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::clear_has_round() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::clear_round() {
  round_ = 0u;
  clear_has_round();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagGetBaseInfoRsp::round() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetBaseInfoRsp.Round)
  return round_;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::set_round(::google::protobuf::uint32 value) {
  set_has_round();
  round_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagGetBaseInfoRsp.Round)
}

// optional uint64 SeasonBeginTime = 6;
inline bool TPlatformSiegeFlagGetBaseInfoRsp::has_seasonbegintime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::set_has_seasonbegintime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::clear_has_seasonbegintime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::clear_seasonbegintime() {
  seasonbegintime_ = GOOGLE_ULONGLONG(0);
  clear_has_seasonbegintime();
}
inline ::google::protobuf::uint64 TPlatformSiegeFlagGetBaseInfoRsp::seasonbegintime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetBaseInfoRsp.SeasonBeginTime)
  return seasonbegintime_;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::set_seasonbegintime(::google::protobuf::uint64 value) {
  set_has_seasonbegintime();
  seasonbegintime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagGetBaseInfoRsp.SeasonBeginTime)
}

// optional uint64 SeasonEndTime = 7;
inline bool TPlatformSiegeFlagGetBaseInfoRsp::has_seasonendtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::set_has_seasonendtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::clear_has_seasonendtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::clear_seasonendtime() {
  seasonendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_seasonendtime();
}
inline ::google::protobuf::uint64 TPlatformSiegeFlagGetBaseInfoRsp::seasonendtime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetBaseInfoRsp.SeasonEndTime)
  return seasonendtime_;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::set_seasonendtime(::google::protobuf::uint64 value) {
  set_has_seasonendtime();
  seasonendtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagGetBaseInfoRsp.SeasonEndTime)
}

// optional uint64 SignTime = 8;
inline bool TPlatformSiegeFlagGetBaseInfoRsp::has_signtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::set_has_signtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::clear_has_signtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::clear_signtime() {
  signtime_ = GOOGLE_ULONGLONG(0);
  clear_has_signtime();
}
inline ::google::protobuf::uint64 TPlatformSiegeFlagGetBaseInfoRsp::signtime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetBaseInfoRsp.SignTime)
  return signtime_;
}
inline void TPlatformSiegeFlagGetBaseInfoRsp::set_signtime(::google::protobuf::uint64 value) {
  set_has_signtime();
  signtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagGetBaseInfoRsp.SignTime)
}

// -------------------------------------------------------------------

// TPlatformSiegeFlagSignRsp

// optional uint64 SignTime = 1;
inline bool TPlatformSiegeFlagSignRsp::has_signtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformSiegeFlagSignRsp::set_has_signtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformSiegeFlagSignRsp::clear_has_signtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformSiegeFlagSignRsp::clear_signtime() {
  signtime_ = GOOGLE_ULONGLONG(0);
  clear_has_signtime();
}
inline ::google::protobuf::uint64 TPlatformSiegeFlagSignRsp::signtime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagSignRsp.SignTime)
  return signtime_;
}
inline void TPlatformSiegeFlagSignRsp::set_signtime(::google::protobuf::uint64 value) {
  set_has_signtime();
  signtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagSignRsp.SignTime)
}

// -------------------------------------------------------------------

// TPlatformSiegeFlagMoveReq

// optional .pb.PbVector2_Int TargetPos = 1;
inline bool TPlatformSiegeFlagMoveReq::has_targetpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformSiegeFlagMoveReq::set_has_targetpos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformSiegeFlagMoveReq::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformSiegeFlagMoveReq::clear_targetpos() {
  if (targetpos_ != NULL) targetpos_->::pb::PbVector2_Int::Clear();
  clear_has_targetpos();
}
inline const ::pb::PbVector2_Int& TPlatformSiegeFlagMoveReq::targetpos() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagMoveReq.TargetPos)
  return targetpos_ != NULL ? *targetpos_ : *default_instance_->targetpos_;
}
inline ::pb::PbVector2_Int* TPlatformSiegeFlagMoveReq::mutable_targetpos() {
  set_has_targetpos();
  if (targetpos_ == NULL) targetpos_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.TPlatformSiegeFlagMoveReq.TargetPos)
  return targetpos_;
}
inline ::pb::PbVector2_Int* TPlatformSiegeFlagMoveReq::release_targetpos() {
  clear_has_targetpos();
  ::pb::PbVector2_Int* temp = targetpos_;
  targetpos_ = NULL;
  return temp;
}
inline void TPlatformSiegeFlagMoveReq::set_allocated_targetpos(::pb::PbVector2_Int* targetpos) {
  delete targetpos_;
  targetpos_ = targetpos;
  if (targetpos) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlatformSiegeFlagMoveReq.TargetPos)
}

// -------------------------------------------------------------------

// TPlatformSiegeFlagAttackReq

// optional uint64 TargetId = 1;
inline bool TPlatformSiegeFlagAttackReq::has_targetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformSiegeFlagAttackReq::set_has_targetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformSiegeFlagAttackReq::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformSiegeFlagAttackReq::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::uint64 TPlatformSiegeFlagAttackReq::targetid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagAttackReq.TargetId)
  return targetid_;
}
inline void TPlatformSiegeFlagAttackReq::set_targetid(::google::protobuf::uint64 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagAttackReq.TargetId)
}

// -------------------------------------------------------------------

// TPlatformSiegeFlagTouchReq

// optional uint64 TargetBid = 1;
inline bool TPlatformSiegeFlagTouchReq::has_targetbid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformSiegeFlagTouchReq::set_has_targetbid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformSiegeFlagTouchReq::clear_has_targetbid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformSiegeFlagTouchReq::clear_targetbid() {
  targetbid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetbid();
}
inline ::google::protobuf::uint64 TPlatformSiegeFlagTouchReq::targetbid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagTouchReq.TargetBid)
  return targetbid_;
}
inline void TPlatformSiegeFlagTouchReq::set_targetbid(::google::protobuf::uint64 value) {
  set_has_targetbid();
  targetbid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagTouchReq.TargetBid)
}

// -------------------------------------------------------------------

// TPlatformSiegeFlagSetUserOptReq

// optional uint64 TargetId = 1;
inline bool TPlatformSiegeFlagSetUserOptReq::has_targetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformSiegeFlagSetUserOptReq::set_has_targetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformSiegeFlagSetUserOptReq::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformSiegeFlagSetUserOptReq::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::uint64 TPlatformSiegeFlagSetUserOptReq::targetid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagSetUserOptReq.TargetId)
  return targetid_;
}
inline void TPlatformSiegeFlagSetUserOptReq::set_targetid(::google::protobuf::uint64 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagSetUserOptReq.TargetId)
}

// optional bool AutoAttack = 2;
inline bool TPlatformSiegeFlagSetUserOptReq::has_autoattack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformSiegeFlagSetUserOptReq::set_has_autoattack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformSiegeFlagSetUserOptReq::clear_has_autoattack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformSiegeFlagSetUserOptReq::clear_autoattack() {
  autoattack_ = false;
  clear_has_autoattack();
}
inline bool TPlatformSiegeFlagSetUserOptReq::autoattack() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagSetUserOptReq.AutoAttack)
  return autoattack_;
}
inline void TPlatformSiegeFlagSetUserOptReq::set_autoattack(bool value) {
  set_has_autoattack();
  autoattack_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagSetUserOptReq.AutoAttack)
}

// -------------------------------------------------------------------

// TPlatformSiegeFlagSetArmyOptReq

// optional uint32 GoalId = 1;
inline bool TPlatformSiegeFlagSetArmyOptReq::has_goalid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformSiegeFlagSetArmyOptReq::set_has_goalid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformSiegeFlagSetArmyOptReq::clear_has_goalid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformSiegeFlagSetArmyOptReq::clear_goalid() {
  goalid_ = 0u;
  clear_has_goalid();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagSetArmyOptReq::goalid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagSetArmyOptReq.GoalId)
  return goalid_;
}
inline void TPlatformSiegeFlagSetArmyOptReq::set_goalid(::google::protobuf::uint32 value) {
  set_has_goalid();
  goalid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagSetArmyOptReq.GoalId)
}

// -------------------------------------------------------------------

// TPlatformSiegeFlagAllyRankInfo

// optional .pb.TAllianceSimpleInfo AllyInfo = 1;
inline bool TPlatformSiegeFlagAllyRankInfo::has_allyinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformSiegeFlagAllyRankInfo::set_has_allyinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformSiegeFlagAllyRankInfo::clear_has_allyinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformSiegeFlagAllyRankInfo::clear_allyinfo() {
  if (allyinfo_ != NULL) allyinfo_->::pb::TAllianceSimpleInfo::Clear();
  clear_has_allyinfo();
}
inline const ::pb::TAllianceSimpleInfo& TPlatformSiegeFlagAllyRankInfo::allyinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagAllyRankInfo.AllyInfo)
  return allyinfo_ != NULL ? *allyinfo_ : *default_instance_->allyinfo_;
}
inline ::pb::TAllianceSimpleInfo* TPlatformSiegeFlagAllyRankInfo::mutable_allyinfo() {
  set_has_allyinfo();
  if (allyinfo_ == NULL) allyinfo_ = new ::pb::TAllianceSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlatformSiegeFlagAllyRankInfo.AllyInfo)
  return allyinfo_;
}
inline ::pb::TAllianceSimpleInfo* TPlatformSiegeFlagAllyRankInfo::release_allyinfo() {
  clear_has_allyinfo();
  ::pb::TAllianceSimpleInfo* temp = allyinfo_;
  allyinfo_ = NULL;
  return temp;
}
inline void TPlatformSiegeFlagAllyRankInfo::set_allocated_allyinfo(::pb::TAllianceSimpleInfo* allyinfo) {
  delete allyinfo_;
  allyinfo_ = allyinfo;
  if (allyinfo) {
    set_has_allyinfo();
  } else {
    clear_has_allyinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlatformSiegeFlagAllyRankInfo.AllyInfo)
}

// optional uint32 Score = 2;
inline bool TPlatformSiegeFlagAllyRankInfo::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformSiegeFlagAllyRankInfo::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformSiegeFlagAllyRankInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformSiegeFlagAllyRankInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagAllyRankInfo::score() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagAllyRankInfo.Score)
  return score_;
}
inline void TPlatformSiegeFlagAllyRankInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagAllyRankInfo.Score)
}

// optional uint32 Rank = 3;
inline bool TPlatformSiegeFlagAllyRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformSiegeFlagAllyRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformSiegeFlagAllyRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformSiegeFlagAllyRankInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagAllyRankInfo::rank() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagAllyRankInfo.Rank)
  return rank_;
}
inline void TPlatformSiegeFlagAllyRankInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagAllyRankInfo.Rank)
}

// -------------------------------------------------------------------

// TPlatformSiegeFlagGetAllyRankReq

// optional uint32 Offset = 1;
inline bool TPlatformSiegeFlagGetAllyRankReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformSiegeFlagGetAllyRankReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformSiegeFlagGetAllyRankReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformSiegeFlagGetAllyRankReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagGetAllyRankReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetAllyRankReq.Offset)
  return offset_;
}
inline void TPlatformSiegeFlagGetAllyRankReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagGetAllyRankReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TPlatformSiegeFlagGetAllyRankReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformSiegeFlagGetAllyRankReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformSiegeFlagGetAllyRankReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformSiegeFlagGetAllyRankReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagGetAllyRankReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetAllyRankReq.Limit)
  return limit_;
}
inline void TPlatformSiegeFlagGetAllyRankReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagGetAllyRankReq.Limit)
}

// -------------------------------------------------------------------

// TPlatformSiegeFlagGetAllyRankRsp

// repeated .pb.TPlatformSiegeFlagAllyRankInfo RankArr = 1;
inline int TPlatformSiegeFlagGetAllyRankRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TPlatformSiegeFlagGetAllyRankRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TPlatformSiegeFlagAllyRankInfo& TPlatformSiegeFlagGetAllyRankRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetAllyRankRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TPlatformSiegeFlagAllyRankInfo* TPlatformSiegeFlagGetAllyRankRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformSiegeFlagGetAllyRankRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TPlatformSiegeFlagAllyRankInfo* TPlatformSiegeFlagGetAllyRankRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TPlatformSiegeFlagGetAllyRankRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagAllyRankInfo >&
TPlatformSiegeFlagGetAllyRankRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformSiegeFlagGetAllyRankRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagAllyRankInfo >*
TPlatformSiegeFlagGetAllyRankRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformSiegeFlagGetAllyRankRsp.RankArr)
  return &rankarr_;
}

// optional uint32 Score = 2;
inline bool TPlatformSiegeFlagGetAllyRankRsp::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformSiegeFlagGetAllyRankRsp::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformSiegeFlagGetAllyRankRsp::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformSiegeFlagGetAllyRankRsp::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagGetAllyRankRsp::score() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetAllyRankRsp.Score)
  return score_;
}
inline void TPlatformSiegeFlagGetAllyRankRsp::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagGetAllyRankRsp.Score)
}

// optional uint32 Rank = 3;
inline bool TPlatformSiegeFlagGetAllyRankRsp::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformSiegeFlagGetAllyRankRsp::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformSiegeFlagGetAllyRankRsp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformSiegeFlagGetAllyRankRsp::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagGetAllyRankRsp::rank() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetAllyRankRsp.Rank)
  return rank_;
}
inline void TPlatformSiegeFlagGetAllyRankRsp::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagGetAllyRankRsp.Rank)
}

// optional uint64 LeaderUid = 4;
inline bool TPlatformSiegeFlagGetAllyRankRsp::has_leaderuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlatformSiegeFlagGetAllyRankRsp::set_has_leaderuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlatformSiegeFlagGetAllyRankRsp::clear_has_leaderuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlatformSiegeFlagGetAllyRankRsp::clear_leaderuid() {
  leaderuid_ = GOOGLE_ULONGLONG(0);
  clear_has_leaderuid();
}
inline ::google::protobuf::uint64 TPlatformSiegeFlagGetAllyRankRsp::leaderuid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetAllyRankRsp.LeaderUid)
  return leaderuid_;
}
inline void TPlatformSiegeFlagGetAllyRankRsp::set_leaderuid(::google::protobuf::uint64 value) {
  set_has_leaderuid();
  leaderuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagGetAllyRankRsp.LeaderUid)
}

// -------------------------------------------------------------------

// TPlatformSiegeFlagUserRankInfo

// optional uint64 Uid = 1;
inline bool TPlatformSiegeFlagUserRankInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformSiegeFlagUserRankInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformSiegeFlagUserRankInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformSiegeFlagUserRankInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TPlatformSiegeFlagUserRankInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagUserRankInfo.Uid)
  return uid_;
}
inline void TPlatformSiegeFlagUserRankInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagUserRankInfo.Uid)
}

// optional string Uname = 2;
inline bool TPlatformSiegeFlagUserRankInfo::has_uname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformSiegeFlagUserRankInfo::set_has_uname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformSiegeFlagUserRankInfo::clear_has_uname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformSiegeFlagUserRankInfo::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TPlatformSiegeFlagUserRankInfo::uname() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagUserRankInfo.Uname)
  return *uname_;
}
inline void TPlatformSiegeFlagUserRankInfo::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagUserRankInfo.Uname)
}
inline void TPlatformSiegeFlagUserRankInfo::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPlatformSiegeFlagUserRankInfo.Uname)
}
inline void TPlatformSiegeFlagUserRankInfo::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPlatformSiegeFlagUserRankInfo.Uname)
}
inline ::std::string* TPlatformSiegeFlagUserRankInfo::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPlatformSiegeFlagUserRankInfo.Uname)
  return uname_;
}
inline ::std::string* TPlatformSiegeFlagUserRankInfo::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPlatformSiegeFlagUserRankInfo::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlatformSiegeFlagUserRankInfo.Uname)
}

// optional uint32 ImageHtid = 3;
inline bool TPlatformSiegeFlagUserRankInfo::has_imagehtid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformSiegeFlagUserRankInfo::set_has_imagehtid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformSiegeFlagUserRankInfo::clear_has_imagehtid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformSiegeFlagUserRankInfo::clear_imagehtid() {
  imagehtid_ = 0u;
  clear_has_imagehtid();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagUserRankInfo::imagehtid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagUserRankInfo.ImageHtid)
  return imagehtid_;
}
inline void TPlatformSiegeFlagUserRankInfo::set_imagehtid(::google::protobuf::uint32 value) {
  set_has_imagehtid();
  imagehtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagUserRankInfo.ImageHtid)
}

// optional uint32 ImageFrameTid = 4;
inline bool TPlatformSiegeFlagUserRankInfo::has_imageframetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlatformSiegeFlagUserRankInfo::set_has_imageframetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlatformSiegeFlagUserRankInfo::clear_has_imageframetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlatformSiegeFlagUserRankInfo::clear_imageframetid() {
  imageframetid_ = 0u;
  clear_has_imageframetid();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagUserRankInfo::imageframetid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagUserRankInfo.ImageFrameTid)
  return imageframetid_;
}
inline void TPlatformSiegeFlagUserRankInfo::set_imageframetid(::google::protobuf::uint32 value) {
  set_has_imageframetid();
  imageframetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagUserRankInfo.ImageFrameTid)
}

// optional uint32 Title = 5;
inline bool TPlatformSiegeFlagUserRankInfo::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPlatformSiegeFlagUserRankInfo::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPlatformSiegeFlagUserRankInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPlatformSiegeFlagUserRankInfo::clear_title() {
  title_ = 0u;
  clear_has_title();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagUserRankInfo::title() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagUserRankInfo.Title)
  return title_;
}
inline void TPlatformSiegeFlagUserRankInfo::set_title(::google::protobuf::uint32 value) {
  set_has_title();
  title_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagUserRankInfo.Title)
}

// optional uint32 Rank = 10;
inline bool TPlatformSiegeFlagUserRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TPlatformSiegeFlagUserRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TPlatformSiegeFlagUserRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TPlatformSiegeFlagUserRankInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagUserRankInfo::rank() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagUserRankInfo.Rank)
  return rank_;
}
inline void TPlatformSiegeFlagUserRankInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagUserRankInfo.Rank)
}

// optional uint32 Score = 11;
inline bool TPlatformSiegeFlagUserRankInfo::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TPlatformSiegeFlagUserRankInfo::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TPlatformSiegeFlagUserRankInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TPlatformSiegeFlagUserRankInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagUserRankInfo::score() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagUserRankInfo.Score)
  return score_;
}
inline void TPlatformSiegeFlagUserRankInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagUserRankInfo.Score)
}

// optional uint32 KillNum = 12;
inline bool TPlatformSiegeFlagUserRankInfo::has_killnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TPlatformSiegeFlagUserRankInfo::set_has_killnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TPlatformSiegeFlagUserRankInfo::clear_has_killnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TPlatformSiegeFlagUserRankInfo::clear_killnum() {
  killnum_ = 0u;
  clear_has_killnum();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagUserRankInfo::killnum() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagUserRankInfo.KillNum)
  return killnum_;
}
inline void TPlatformSiegeFlagUserRankInfo::set_killnum(::google::protobuf::uint32 value) {
  set_has_killnum();
  killnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagUserRankInfo.KillNum)
}

// optional uint32 Devote = 13;
inline bool TPlatformSiegeFlagUserRankInfo::has_devote() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TPlatformSiegeFlagUserRankInfo::set_has_devote() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TPlatformSiegeFlagUserRankInfo::clear_has_devote() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TPlatformSiegeFlagUserRankInfo::clear_devote() {
  devote_ = 0u;
  clear_has_devote();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagUserRankInfo::devote() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagUserRankInfo.Devote)
  return devote_;
}
inline void TPlatformSiegeFlagUserRankInfo::set_devote(::google::protobuf::uint32 value) {
  set_has_devote();
  devote_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagUserRankInfo.Devote)
}

// -------------------------------------------------------------------

// TPlatformSiegeFlagGetRankListReq

// optional uint32 Offset = 1;
inline bool TPlatformSiegeFlagGetRankListReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformSiegeFlagGetRankListReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformSiegeFlagGetRankListReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformSiegeFlagGetRankListReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagGetRankListReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetRankListReq.Offset)
  return offset_;
}
inline void TPlatformSiegeFlagGetRankListReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagGetRankListReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TPlatformSiegeFlagGetRankListReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformSiegeFlagGetRankListReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformSiegeFlagGetRankListReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformSiegeFlagGetRankListReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagGetRankListReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetRankListReq.Limit)
  return limit_;
}
inline void TPlatformSiegeFlagGetRankListReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagGetRankListReq.Limit)
}

// -------------------------------------------------------------------

// TPlatformSiegeFlagGetRankListRsp

// repeated .pb.TPlatformSiegeFlagUserRankInfo RankArr = 1;
inline int TPlatformSiegeFlagGetRankListRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TPlatformSiegeFlagGetRankListRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TPlatformSiegeFlagUserRankInfo& TPlatformSiegeFlagGetRankListRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetRankListRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TPlatformSiegeFlagUserRankInfo* TPlatformSiegeFlagGetRankListRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformSiegeFlagGetRankListRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TPlatformSiegeFlagUserRankInfo* TPlatformSiegeFlagGetRankListRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TPlatformSiegeFlagGetRankListRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagUserRankInfo >&
TPlatformSiegeFlagGetRankListRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformSiegeFlagGetRankListRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagUserRankInfo >*
TPlatformSiegeFlagGetRankListRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformSiegeFlagGetRankListRsp.RankArr)
  return &rankarr_;
}

// optional uint32 Rank = 2;
inline bool TPlatformSiegeFlagGetRankListRsp::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformSiegeFlagGetRankListRsp::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformSiegeFlagGetRankListRsp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformSiegeFlagGetRankListRsp::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagGetRankListRsp::rank() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetRankListRsp.Rank)
  return rank_;
}
inline void TPlatformSiegeFlagGetRankListRsp::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagGetRankListRsp.Rank)
}

// optional uint32 Score = 3;
inline bool TPlatformSiegeFlagGetRankListRsp::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformSiegeFlagGetRankListRsp::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformSiegeFlagGetRankListRsp::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformSiegeFlagGetRankListRsp::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagGetRankListRsp::score() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetRankListRsp.Score)
  return score_;
}
inline void TPlatformSiegeFlagGetRankListRsp::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagGetRankListRsp.Score)
}

// optional uint32 KillCnt = 4;
inline bool TPlatformSiegeFlagGetRankListRsp::has_killcnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlatformSiegeFlagGetRankListRsp::set_has_killcnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlatformSiegeFlagGetRankListRsp::clear_has_killcnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlatformSiegeFlagGetRankListRsp::clear_killcnt() {
  killcnt_ = 0u;
  clear_has_killcnt();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagGetRankListRsp::killcnt() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetRankListRsp.KillCnt)
  return killcnt_;
}
inline void TPlatformSiegeFlagGetRankListRsp::set_killcnt(::google::protobuf::uint32 value) {
  set_has_killcnt();
  killcnt_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagGetRankListRsp.KillCnt)
}

// optional uint32 Devote = 5;
inline bool TPlatformSiegeFlagGetRankListRsp::has_devote() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPlatformSiegeFlagGetRankListRsp::set_has_devote() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPlatformSiegeFlagGetRankListRsp::clear_has_devote() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPlatformSiegeFlagGetRankListRsp::clear_devote() {
  devote_ = 0u;
  clear_has_devote();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagGetRankListRsp::devote() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagGetRankListRsp.Devote)
  return devote_;
}
inline void TPlatformSiegeFlagGetRankListRsp::set_devote(::google::protobuf::uint32 value) {
  set_has_devote();
  devote_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagGetRankListRsp.Devote)
}

// -------------------------------------------------------------------

// TPlatformSiegeFlagBuyInfo

// optional uint32 Id = 1;
inline bool TPlatformSiegeFlagBuyInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformSiegeFlagBuyInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformSiegeFlagBuyInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformSiegeFlagBuyInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagBuyInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagBuyInfo.Id)
  return id_;
}
inline void TPlatformSiegeFlagBuyInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagBuyInfo.Id)
}

// optional uint32 BuyNum = 2;
inline bool TPlatformSiegeFlagBuyInfo::has_buynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformSiegeFlagBuyInfo::set_has_buynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformSiegeFlagBuyInfo::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformSiegeFlagBuyInfo::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagBuyInfo::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagBuyInfo.BuyNum)
  return buynum_;
}
inline void TPlatformSiegeFlagBuyInfo::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagBuyInfo.BuyNum)
}

// -------------------------------------------------------------------

// TPlatformSiegeFlagServerGetInfoRsp

// optional bool CanEnter = 1;
inline bool TPlatformSiegeFlagServerGetInfoRsp::has_canenter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformSiegeFlagServerGetInfoRsp::set_has_canenter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformSiegeFlagServerGetInfoRsp::clear_has_canenter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformSiegeFlagServerGetInfoRsp::clear_canenter() {
  canenter_ = false;
  clear_has_canenter();
}
inline bool TPlatformSiegeFlagServerGetInfoRsp::canenter() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagServerGetInfoRsp.CanEnter)
  return canenter_;
}
inline void TPlatformSiegeFlagServerGetInfoRsp::set_canenter(bool value) {
  set_has_canenter();
  canenter_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagServerGetInfoRsp.CanEnter)
}

// repeated .pb.TPlatformSiegeFlagBuyInfo ArrInfo = 2;
inline int TPlatformSiegeFlagServerGetInfoRsp::arrinfo_size() const {
  return arrinfo_.size();
}
inline void TPlatformSiegeFlagServerGetInfoRsp::clear_arrinfo() {
  arrinfo_.Clear();
}
inline const ::pb::TPlatformSiegeFlagBuyInfo& TPlatformSiegeFlagServerGetInfoRsp::arrinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagServerGetInfoRsp.ArrInfo)
  return arrinfo_.Get(index);
}
inline ::pb::TPlatformSiegeFlagBuyInfo* TPlatformSiegeFlagServerGetInfoRsp::mutable_arrinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformSiegeFlagServerGetInfoRsp.ArrInfo)
  return arrinfo_.Mutable(index);
}
inline ::pb::TPlatformSiegeFlagBuyInfo* TPlatformSiegeFlagServerGetInfoRsp::add_arrinfo() {
  // @@protoc_insertion_point(field_add:pb.TPlatformSiegeFlagServerGetInfoRsp.ArrInfo)
  return arrinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagBuyInfo >&
TPlatformSiegeFlagServerGetInfoRsp::arrinfo() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformSiegeFlagServerGetInfoRsp.ArrInfo)
  return arrinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagBuyInfo >*
TPlatformSiegeFlagServerGetInfoRsp::mutable_arrinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformSiegeFlagServerGetInfoRsp.ArrInfo)
  return &arrinfo_;
}

// -------------------------------------------------------------------

// TPlatformSiegeFlagServerBuyGoodsReq

// optional uint32 Id = 1;
inline bool TPlatformSiegeFlagServerBuyGoodsReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformSiegeFlagServerBuyGoodsReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformSiegeFlagServerBuyGoodsReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformSiegeFlagServerBuyGoodsReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TPlatformSiegeFlagServerBuyGoodsReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagServerBuyGoodsReq.Id)
  return id_;
}
inline void TPlatformSiegeFlagServerBuyGoodsReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagServerBuyGoodsReq.Id)
}

// optional uint64 Num = 2;
inline bool TPlatformSiegeFlagServerBuyGoodsReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformSiegeFlagServerBuyGoodsReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformSiegeFlagServerBuyGoodsReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformSiegeFlagServerBuyGoodsReq::clear_num() {
  num_ = GOOGLE_ULONGLONG(0);
  clear_has_num();
}
inline ::google::protobuf::uint64 TPlatformSiegeFlagServerBuyGoodsReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagServerBuyGoodsReq.Num)
  return num_;
}
inline void TPlatformSiegeFlagServerBuyGoodsReq::set_num(::google::protobuf::uint64 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformSiegeFlagServerBuyGoodsReq.Num)
}

// -------------------------------------------------------------------

// TPlatformSiegeFlagServerNodify

// repeated .pb.TPlatformSiegeFlagBuyInfo ArrInfo = 1;
inline int TPlatformSiegeFlagServerNodify::arrinfo_size() const {
  return arrinfo_.size();
}
inline void TPlatformSiegeFlagServerNodify::clear_arrinfo() {
  arrinfo_.Clear();
}
inline const ::pb::TPlatformSiegeFlagBuyInfo& TPlatformSiegeFlagServerNodify::arrinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformSiegeFlagServerNodify.ArrInfo)
  return arrinfo_.Get(index);
}
inline ::pb::TPlatformSiegeFlagBuyInfo* TPlatformSiegeFlagServerNodify::mutable_arrinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformSiegeFlagServerNodify.ArrInfo)
  return arrinfo_.Mutable(index);
}
inline ::pb::TPlatformSiegeFlagBuyInfo* TPlatformSiegeFlagServerNodify::add_arrinfo() {
  // @@protoc_insertion_point(field_add:pb.TPlatformSiegeFlagServerNodify.ArrInfo)
  return arrinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagBuyInfo >&
TPlatformSiegeFlagServerNodify::arrinfo() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformSiegeFlagServerNodify.ArrInfo)
  return arrinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformSiegeFlagBuyInfo >*
TPlatformSiegeFlagServerNodify::mutable_arrinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformSiegeFlagServerNodify.ArrInfo)
  return &arrinfo_;
}

// -------------------------------------------------------------------

// TSiegeFlagAllyBaseInfo

// optional uint64 AllyId = 1;
inline bool TSiegeFlagAllyBaseInfo::has_allyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSiegeFlagAllyBaseInfo::set_has_allyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSiegeFlagAllyBaseInfo::clear_has_allyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSiegeFlagAllyBaseInfo::clear_allyid() {
  allyid_ = GOOGLE_ULONGLONG(0);
  clear_has_allyid();
}
inline ::google::protobuf::uint64 TSiegeFlagAllyBaseInfo::allyid() const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagAllyBaseInfo.AllyId)
  return allyid_;
}
inline void TSiegeFlagAllyBaseInfo::set_allyid(::google::protobuf::uint64 value) {
  set_has_allyid();
  allyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSiegeFlagAllyBaseInfo.AllyId)
}

// optional uint32 Level = 2;
inline bool TSiegeFlagAllyBaseInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSiegeFlagAllyBaseInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSiegeFlagAllyBaseInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSiegeFlagAllyBaseInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TSiegeFlagAllyBaseInfo::level() const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagAllyBaseInfo.Level)
  return level_;
}
inline void TSiegeFlagAllyBaseInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TSiegeFlagAllyBaseInfo.Level)
}

// optional string Name = 3;
inline bool TSiegeFlagAllyBaseInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSiegeFlagAllyBaseInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSiegeFlagAllyBaseInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSiegeFlagAllyBaseInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TSiegeFlagAllyBaseInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagAllyBaseInfo.Name)
  return *name_;
}
inline void TSiegeFlagAllyBaseInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TSiegeFlagAllyBaseInfo.Name)
}
inline void TSiegeFlagAllyBaseInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TSiegeFlagAllyBaseInfo.Name)
}
inline void TSiegeFlagAllyBaseInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TSiegeFlagAllyBaseInfo.Name)
}
inline ::std::string* TSiegeFlagAllyBaseInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TSiegeFlagAllyBaseInfo.Name)
  return name_;
}
inline ::std::string* TSiegeFlagAllyBaseInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TSiegeFlagAllyBaseInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSiegeFlagAllyBaseInfo.Name)
}

// optional uint64 FightForce = 4;
inline bool TSiegeFlagAllyBaseInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TSiegeFlagAllyBaseInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TSiegeFlagAllyBaseInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TSiegeFlagAllyBaseInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TSiegeFlagAllyBaseInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagAllyBaseInfo.FightForce)
  return fightforce_;
}
inline void TSiegeFlagAllyBaseInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TSiegeFlagAllyBaseInfo.FightForce)
}

// optional uint32 BannerBase = 5;
inline bool TSiegeFlagAllyBaseInfo::has_bannerbase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TSiegeFlagAllyBaseInfo::set_has_bannerbase() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TSiegeFlagAllyBaseInfo::clear_has_bannerbase() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TSiegeFlagAllyBaseInfo::clear_bannerbase() {
  bannerbase_ = 0u;
  clear_has_bannerbase();
}
inline ::google::protobuf::uint32 TSiegeFlagAllyBaseInfo::bannerbase() const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagAllyBaseInfo.BannerBase)
  return bannerbase_;
}
inline void TSiegeFlagAllyBaseInfo::set_bannerbase(::google::protobuf::uint32 value) {
  set_has_bannerbase();
  bannerbase_ = value;
  // @@protoc_insertion_point(field_set:pb.TSiegeFlagAllyBaseInfo.BannerBase)
}

// optional string BannerName = 6;
inline bool TSiegeFlagAllyBaseInfo::has_bannername() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TSiegeFlagAllyBaseInfo::set_has_bannername() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TSiegeFlagAllyBaseInfo::clear_has_bannername() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TSiegeFlagAllyBaseInfo::clear_bannername() {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_->clear();
  }
  clear_has_bannername();
}
inline const ::std::string& TSiegeFlagAllyBaseInfo::bannername() const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagAllyBaseInfo.BannerName)
  return *bannername_;
}
inline void TSiegeFlagAllyBaseInfo::set_bannername(const ::std::string& value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TSiegeFlagAllyBaseInfo.BannerName)
}
inline void TSiegeFlagAllyBaseInfo::set_bannername(const char* value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TSiegeFlagAllyBaseInfo.BannerName)
}
inline void TSiegeFlagAllyBaseInfo::set_bannername(const char* value, size_t size) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TSiegeFlagAllyBaseInfo.BannerName)
}
inline ::std::string* TSiegeFlagAllyBaseInfo::mutable_bannername() {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TSiegeFlagAllyBaseInfo.BannerName)
  return bannername_;
}
inline ::std::string* TSiegeFlagAllyBaseInfo::release_bannername() {
  clear_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bannername_;
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TSiegeFlagAllyBaseInfo::set_allocated_bannername(::std::string* bannername) {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (bannername) {
    set_has_bannername();
    bannername_ = bannername;
  } else {
    clear_has_bannername();
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSiegeFlagAllyBaseInfo.BannerName)
}

// optional uint32 BannerFigure = 7;
inline bool TSiegeFlagAllyBaseInfo::has_bannerfigure() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TSiegeFlagAllyBaseInfo::set_has_bannerfigure() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TSiegeFlagAllyBaseInfo::clear_has_bannerfigure() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TSiegeFlagAllyBaseInfo::clear_bannerfigure() {
  bannerfigure_ = 0u;
  clear_has_bannerfigure();
}
inline ::google::protobuf::uint32 TSiegeFlagAllyBaseInfo::bannerfigure() const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagAllyBaseInfo.BannerFigure)
  return bannerfigure_;
}
inline void TSiegeFlagAllyBaseInfo::set_bannerfigure(::google::protobuf::uint32 value) {
  set_has_bannerfigure();
  bannerfigure_ = value;
  // @@protoc_insertion_point(field_set:pb.TSiegeFlagAllyBaseInfo.BannerFigure)
}

// -------------------------------------------------------------------

// TSiegeFlagUserBaseInfo

// optional uint64 Uid = 1;
inline bool TSiegeFlagUserBaseInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSiegeFlagUserBaseInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSiegeFlagUserBaseInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSiegeFlagUserBaseInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TSiegeFlagUserBaseInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagUserBaseInfo.Uid)
  return uid_;
}
inline void TSiegeFlagUserBaseInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSiegeFlagUserBaseInfo.Uid)
}

// optional string ServerId = 2;
inline bool TSiegeFlagUserBaseInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSiegeFlagUserBaseInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSiegeFlagUserBaseInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSiegeFlagUserBaseInfo::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TSiegeFlagUserBaseInfo::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagUserBaseInfo.ServerId)
  return *serverid_;
}
inline void TSiegeFlagUserBaseInfo::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TSiegeFlagUserBaseInfo.ServerId)
}
inline void TSiegeFlagUserBaseInfo::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TSiegeFlagUserBaseInfo.ServerId)
}
inline void TSiegeFlagUserBaseInfo::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TSiegeFlagUserBaseInfo.ServerId)
}
inline ::std::string* TSiegeFlagUserBaseInfo::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TSiegeFlagUserBaseInfo.ServerId)
  return serverid_;
}
inline ::std::string* TSiegeFlagUserBaseInfo::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TSiegeFlagUserBaseInfo::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSiegeFlagUserBaseInfo.ServerId)
}

// optional .pb.EAlliancePost Post = 3;
inline bool TSiegeFlagUserBaseInfo::has_post() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSiegeFlagUserBaseInfo::set_has_post() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSiegeFlagUserBaseInfo::clear_has_post() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSiegeFlagUserBaseInfo::clear_post() {
  post_ = 0;
  clear_has_post();
}
inline ::pb::EAlliancePost TSiegeFlagUserBaseInfo::post() const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagUserBaseInfo.Post)
  return static_cast< ::pb::EAlliancePost >(post_);
}
inline void TSiegeFlagUserBaseInfo::set_post(::pb::EAlliancePost value) {
  assert(::pb::EAlliancePost_IsValid(value));
  set_has_post();
  post_ = value;
  // @@protoc_insertion_point(field_set:pb.TSiegeFlagUserBaseInfo.Post)
}

// optional .pb.TUserSimpleInfo UserInfo = 4;
inline bool TSiegeFlagUserBaseInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TSiegeFlagUserBaseInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TSiegeFlagUserBaseInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TSiegeFlagUserBaseInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TSiegeFlagUserBaseInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagUserBaseInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TSiegeFlagUserBaseInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TSiegeFlagUserBaseInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TSiegeFlagUserBaseInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TSiegeFlagUserBaseInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSiegeFlagUserBaseInfo.UserInfo)
}

// -------------------------------------------------------------------

// TSiegeFlagGuildContriInfo

// optional uint64 Gid = 1;
inline bool TSiegeFlagGuildContriInfo::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSiegeFlagGuildContriInfo::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSiegeFlagGuildContriInfo::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSiegeFlagGuildContriInfo::clear_gid() {
  gid_ = GOOGLE_ULONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::uint64 TSiegeFlagGuildContriInfo::gid() const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagGuildContriInfo.Gid)
  return gid_;
}
inline void TSiegeFlagGuildContriInfo::set_gid(::google::protobuf::uint64 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSiegeFlagGuildContriInfo.Gid)
}

// optional string ServerId = 2;
inline bool TSiegeFlagGuildContriInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSiegeFlagGuildContriInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSiegeFlagGuildContriInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSiegeFlagGuildContriInfo::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TSiegeFlagGuildContriInfo::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagGuildContriInfo.ServerId)
  return *serverid_;
}
inline void TSiegeFlagGuildContriInfo::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TSiegeFlagGuildContriInfo.ServerId)
}
inline void TSiegeFlagGuildContriInfo::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TSiegeFlagGuildContriInfo.ServerId)
}
inline void TSiegeFlagGuildContriInfo::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TSiegeFlagGuildContriInfo.ServerId)
}
inline ::std::string* TSiegeFlagGuildContriInfo::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TSiegeFlagGuildContriInfo.ServerId)
  return serverid_;
}
inline ::std::string* TSiegeFlagGuildContriInfo::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TSiegeFlagGuildContriInfo::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSiegeFlagGuildContriInfo.ServerId)
}

// optional uint32 ContriNum = 3;
inline bool TSiegeFlagGuildContriInfo::has_contrinum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSiegeFlagGuildContriInfo::set_has_contrinum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSiegeFlagGuildContriInfo::clear_has_contrinum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSiegeFlagGuildContriInfo::clear_contrinum() {
  contrinum_ = 0u;
  clear_has_contrinum();
}
inline ::google::protobuf::uint32 TSiegeFlagGuildContriInfo::contrinum() const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagGuildContriInfo.ContriNum)
  return contrinum_;
}
inline void TSiegeFlagGuildContriInfo::set_contrinum(::google::protobuf::uint32 value) {
  set_has_contrinum();
  contrinum_ = value;
  // @@protoc_insertion_point(field_set:pb.TSiegeFlagGuildContriInfo.ContriNum)
}

// optional .pb.TAllianceGuildMemberInfo GuildInfo = 4;
inline bool TSiegeFlagGuildContriInfo::has_guildinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TSiegeFlagGuildContriInfo::set_has_guildinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TSiegeFlagGuildContriInfo::clear_has_guildinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TSiegeFlagGuildContriInfo::clear_guildinfo() {
  if (guildinfo_ != NULL) guildinfo_->::pb::TAllianceGuildMemberInfo::Clear();
  clear_has_guildinfo();
}
inline const ::pb::TAllianceGuildMemberInfo& TSiegeFlagGuildContriInfo::guildinfo() const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagGuildContriInfo.GuildInfo)
  return guildinfo_ != NULL ? *guildinfo_ : *default_instance_->guildinfo_;
}
inline ::pb::TAllianceGuildMemberInfo* TSiegeFlagGuildContriInfo::mutable_guildinfo() {
  set_has_guildinfo();
  if (guildinfo_ == NULL) guildinfo_ = new ::pb::TAllianceGuildMemberInfo;
  // @@protoc_insertion_point(field_mutable:pb.TSiegeFlagGuildContriInfo.GuildInfo)
  return guildinfo_;
}
inline ::pb::TAllianceGuildMemberInfo* TSiegeFlagGuildContriInfo::release_guildinfo() {
  clear_has_guildinfo();
  ::pb::TAllianceGuildMemberInfo* temp = guildinfo_;
  guildinfo_ = NULL;
  return temp;
}
inline void TSiegeFlagGuildContriInfo::set_allocated_guildinfo(::pb::TAllianceGuildMemberInfo* guildinfo) {
  delete guildinfo_;
  guildinfo_ = guildinfo;
  if (guildinfo) {
    set_has_guildinfo();
  } else {
    clear_has_guildinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSiegeFlagGuildContriInfo.GuildInfo)
}

// -------------------------------------------------------------------

// TSiegeFlagAllianceSimpleInfoWithUser

// optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
inline bool TSiegeFlagAllianceSimpleInfoWithUser::has_alliancesimpleinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSiegeFlagAllianceSimpleInfoWithUser::set_has_alliancesimpleinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSiegeFlagAllianceSimpleInfoWithUser::clear_has_alliancesimpleinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSiegeFlagAllianceSimpleInfoWithUser::clear_alliancesimpleinfo() {
  if (alliancesimpleinfo_ != NULL) alliancesimpleinfo_->::pb::TAllianceSimpleInfo::Clear();
  clear_has_alliancesimpleinfo();
}
inline const ::pb::TAllianceSimpleInfo& TSiegeFlagAllianceSimpleInfoWithUser::alliancesimpleinfo() const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagAllianceSimpleInfoWithUser.AllianceSimpleInfo)
  return alliancesimpleinfo_ != NULL ? *alliancesimpleinfo_ : *default_instance_->alliancesimpleinfo_;
}
inline ::pb::TAllianceSimpleInfo* TSiegeFlagAllianceSimpleInfoWithUser::mutable_alliancesimpleinfo() {
  set_has_alliancesimpleinfo();
  if (alliancesimpleinfo_ == NULL) alliancesimpleinfo_ = new ::pb::TAllianceSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TSiegeFlagAllianceSimpleInfoWithUser.AllianceSimpleInfo)
  return alliancesimpleinfo_;
}
inline ::pb::TAllianceSimpleInfo* TSiegeFlagAllianceSimpleInfoWithUser::release_alliancesimpleinfo() {
  clear_has_alliancesimpleinfo();
  ::pb::TAllianceSimpleInfo* temp = alliancesimpleinfo_;
  alliancesimpleinfo_ = NULL;
  return temp;
}
inline void TSiegeFlagAllianceSimpleInfoWithUser::set_allocated_alliancesimpleinfo(::pb::TAllianceSimpleInfo* alliancesimpleinfo) {
  delete alliancesimpleinfo_;
  alliancesimpleinfo_ = alliancesimpleinfo;
  if (alliancesimpleinfo) {
    set_has_alliancesimpleinfo();
  } else {
    clear_has_alliancesimpleinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSiegeFlagAllianceSimpleInfoWithUser.AllianceSimpleInfo)
}

// repeated .pb.TSiegeFlagUserBaseInfo ArrUserBaseInfo = 2;
inline int TSiegeFlagAllianceSimpleInfoWithUser::arruserbaseinfo_size() const {
  return arruserbaseinfo_.size();
}
inline void TSiegeFlagAllianceSimpleInfoWithUser::clear_arruserbaseinfo() {
  arruserbaseinfo_.Clear();
}
inline const ::pb::TSiegeFlagUserBaseInfo& TSiegeFlagAllianceSimpleInfoWithUser::arruserbaseinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagAllianceSimpleInfoWithUser.ArrUserBaseInfo)
  return arruserbaseinfo_.Get(index);
}
inline ::pb::TSiegeFlagUserBaseInfo* TSiegeFlagAllianceSimpleInfoWithUser::mutable_arruserbaseinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSiegeFlagAllianceSimpleInfoWithUser.ArrUserBaseInfo)
  return arruserbaseinfo_.Mutable(index);
}
inline ::pb::TSiegeFlagUserBaseInfo* TSiegeFlagAllianceSimpleInfoWithUser::add_arruserbaseinfo() {
  // @@protoc_insertion_point(field_add:pb.TSiegeFlagAllianceSimpleInfoWithUser.ArrUserBaseInfo)
  return arruserbaseinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSiegeFlagUserBaseInfo >&
TSiegeFlagAllianceSimpleInfoWithUser::arruserbaseinfo() const {
  // @@protoc_insertion_point(field_list:pb.TSiegeFlagAllianceSimpleInfoWithUser.ArrUserBaseInfo)
  return arruserbaseinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSiegeFlagUserBaseInfo >*
TSiegeFlagAllianceSimpleInfoWithUser::mutable_arruserbaseinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSiegeFlagAllianceSimpleInfoWithUser.ArrUserBaseInfo)
  return &arruserbaseinfo_;
}

// -------------------------------------------------------------------

// TSiegeFlagBattleEndNodify

// optional uint64 TeamId = 1;
inline bool TSiegeFlagBattleEndNodify::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSiegeFlagBattleEndNodify::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSiegeFlagBattleEndNodify::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSiegeFlagBattleEndNodify::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TSiegeFlagBattleEndNodify::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagBattleEndNodify.TeamId)
  return teamid_;
}
inline void TSiegeFlagBattleEndNodify::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSiegeFlagBattleEndNodify.TeamId)
}

// optional uint32 TeamScore = 2;
inline bool TSiegeFlagBattleEndNodify::has_teamscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSiegeFlagBattleEndNodify::set_has_teamscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSiegeFlagBattleEndNodify::clear_has_teamscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSiegeFlagBattleEndNodify::clear_teamscore() {
  teamscore_ = 0u;
  clear_has_teamscore();
}
inline ::google::protobuf::uint32 TSiegeFlagBattleEndNodify::teamscore() const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagBattleEndNodify.TeamScore)
  return teamscore_;
}
inline void TSiegeFlagBattleEndNodify::set_teamscore(::google::protobuf::uint32 value) {
  set_has_teamscore();
  teamscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TSiegeFlagBattleEndNodify.TeamScore)
}

// optional uint64 FieldDoneTime = 3;
inline bool TSiegeFlagBattleEndNodify::has_fielddonetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSiegeFlagBattleEndNodify::set_has_fielddonetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSiegeFlagBattleEndNodify::clear_has_fielddonetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSiegeFlagBattleEndNodify::clear_fielddonetime() {
  fielddonetime_ = GOOGLE_ULONGLONG(0);
  clear_has_fielddonetime();
}
inline ::google::protobuf::uint64 TSiegeFlagBattleEndNodify::fielddonetime() const {
  // @@protoc_insertion_point(field_get:pb.TSiegeFlagBattleEndNodify.FieldDoneTime)
  return fielddonetime_;
}
inline void TSiegeFlagBattleEndNodify::set_fielddonetime(::google::protobuf::uint64 value) {
  set_has_fielddonetime();
  fielddonetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TSiegeFlagBattleEndNodify.FieldDoneTime)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EPlatformSiegeFlagStage> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EPlatformSiegeFlagStage>() {
  return ::pb::EPlatformSiegeFlagStage_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fCrossPlatformSiegeFlag_2eproto__INCLUDED
