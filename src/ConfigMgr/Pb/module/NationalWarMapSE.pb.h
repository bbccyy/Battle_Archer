// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/NationalWarMapSE.proto

#ifndef PROTOBUF_module_2fNationalWarMapSE_2eproto__INCLUDED
#define PROTOBUF_module_2fNationalWarMapSE_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fNationalWarMapSE_2eproto();
void protobuf_AssignDesc_module_2fNationalWarMapSE_2eproto();
void protobuf_ShutdownFile_module_2fNationalWarMapSE_2eproto();

class NationalWarMapSE;
class CircleDataSE;
class LayerDataSE;
class GridDataSE;
class OrnamentGroupDataSE;

// ===================================================================

/*FOR2LUA
<Record>
	<name>NationalWarMapSE</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/NationalWarMapSE.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class NationalWarMapSE : public ::google::protobuf::Message {
 public:
  NationalWarMapSE();
  virtual ~NationalWarMapSE();

  NationalWarMapSE(const NationalWarMapSE& from);

  inline NationalWarMapSE& operator=(const NationalWarMapSE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NationalWarMapSE& default_instance();

  void Swap(NationalWarMapSE* other);

  // implements Message ----------------------------------------------

  NationalWarMapSE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NationalWarMapSE& from);
  void MergeFrom(const NationalWarMapSE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>NationalWarMapSE</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string MapName = 2;
  inline bool has_mapname() const;
  inline void clear_mapname();
  static const int kMapNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>NationalWarMapSE</name>
  	<Function>
  		<name>mapname</name>
  		<replaceName>MapName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapname</name>
  		<replaceName>MapName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapname</name>
  		<replaceName>MapName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& mapname() const;
  inline void set_mapname(const ::std::string& value);
  inline void set_mapname(const char* value);
  inline void set_mapname(const char* value, size_t size);
  inline ::std::string* mutable_mapname();
  inline ::std::string* release_mapname();
  inline void set_allocated_mapname(::std::string* mapname);

  // optional int32 MapWidth = 3;
  inline bool has_mapwidth() const;
  inline void clear_mapwidth();
  static const int kMapWidthFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>NationalWarMapSE</name>
  	<Function>
  		<name>mapwidth</name>
  		<replaceName>MapWidth</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapwidth</name>
  		<replaceName>MapWidth</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapwidth</name>
  		<replaceName>MapWidth</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 mapwidth() const;
  inline void set_mapwidth(::google::protobuf::int32 value);

  // optional int32 MapHeight = 4;
  inline bool has_mapheight() const;
  inline void clear_mapheight();
  static const int kMapHeightFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>NationalWarMapSE</name>
  	<Function>
  		<name>mapheight</name>
  		<replaceName>MapHeight</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapheight</name>
  		<replaceName>MapHeight</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapheight</name>
  		<replaceName>MapHeight</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 mapheight() const;
  inline void set_mapheight(::google::protobuf::int32 value);

  // optional .pb.LayerDataSE TerrainLayerData = 5;
  inline bool has_terrainlayerdata() const;
  inline void clear_terrainlayerdata();
  static const int kTerrainLayerDataFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>NationalWarMapSE</name>
  	<Function>
  		<name>terrainlayerdata</name>
  		<replaceName>TerrainLayerData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_terrainlayerdata</name>
  		<replaceName>TerrainLayerData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_terrainlayerdata</name>
  		<replaceName>TerrainLayerData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_terrainlayerdata</name>
  		<replaceName>TerrainLayerData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::LayerDataSE& terrainlayerdata() const;
  inline ::pb::LayerDataSE* mutable_terrainlayerdata();
  inline ::pb::LayerDataSE* release_terrainlayerdata();
  inline void set_allocated_terrainlayerdata(::pb::LayerDataSE* terrainlayerdata);

  // optional .pb.LayerDataSE BorderLayerData = 6;
  inline bool has_borderlayerdata() const;
  inline void clear_borderlayerdata();
  static const int kBorderLayerDataFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>NationalWarMapSE</name>
  	<Function>
  		<name>borderlayerdata</name>
  		<replaceName>BorderLayerData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_borderlayerdata</name>
  		<replaceName>BorderLayerData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_borderlayerdata</name>
  		<replaceName>BorderLayerData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_borderlayerdata</name>
  		<replaceName>BorderLayerData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::LayerDataSE& borderlayerdata() const;
  inline ::pb::LayerDataSE* mutable_borderlayerdata();
  inline ::pb::LayerDataSE* release_borderlayerdata();
  inline void set_allocated_borderlayerdata(::pb::LayerDataSE* borderlayerdata);

  // repeated .pb.OrnamentGroupDataSE OrnamentGroupDataArr = 7;
  inline int ornamentgroupdataarr_size() const;
  inline void clear_ornamentgroupdataarr();
  static const int kOrnamentGroupDataArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>NationalWarMapSE</name>
  	<Function>
  		<name>ornamentgroupdataarr</name>
  		<replaceName>OrnamentGroupDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ornamentgroupdataarr</name>
  		<replaceName>OrnamentGroupDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ornamentgroupdataarr</name>
  		<replaceName>OrnamentGroupDataArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ornamentgroupdataarr</name>
  		<replaceName>OrnamentGroupDataArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ornamentgroupdataarr_size</name>
  		<replaceName>OrnamentGroupDataArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::OrnamentGroupDataSE& ornamentgroupdataarr(int index) const;
  inline ::pb::OrnamentGroupDataSE* mutable_ornamentgroupdataarr(int index);
  inline ::pb::OrnamentGroupDataSE* add_ornamentgroupdataarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupDataSE >&
      ornamentgroupdataarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupDataSE >*
      mutable_ornamentgroupdataarr();

  // repeated .pb.CircleDataSE CircleDataArr = 8;
  inline int circledataarr_size() const;
  inline void clear_circledataarr();
  static const int kCircleDataArrFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>NationalWarMapSE</name>
  	<Function>
  		<name>circledataarr</name>
  		<replaceName>CircleDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_circledataarr</name>
  		<replaceName>CircleDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_circledataarr</name>
  		<replaceName>CircleDataArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_circledataarr</name>
  		<replaceName>CircleDataArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>circledataarr_size</name>
  		<replaceName>CircleDataArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::CircleDataSE& circledataarr(int index) const;
  inline ::pb::CircleDataSE* mutable_circledataarr(int index);
  inline ::pb::CircleDataSE* add_circledataarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::CircleDataSE >&
      circledataarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::CircleDataSE >*
      mutable_circledataarr();

  // repeated .pb.OrnamentGroupDataSE CircleOrnamentGroupDataArr = 9;
  inline int circleornamentgroupdataarr_size() const;
  inline void clear_circleornamentgroupdataarr();
  static const int kCircleOrnamentGroupDataArrFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>NationalWarMapSE</name>
  	<Function>
  		<name>circleornamentgroupdataarr</name>
  		<replaceName>CircleOrnamentGroupDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_circleornamentgroupdataarr</name>
  		<replaceName>CircleOrnamentGroupDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_circleornamentgroupdataarr</name>
  		<replaceName>CircleOrnamentGroupDataArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_circleornamentgroupdataarr</name>
  		<replaceName>CircleOrnamentGroupDataArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>circleornamentgroupdataarr_size</name>
  		<replaceName>CircleOrnamentGroupDataArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::OrnamentGroupDataSE& circleornamentgroupdataarr(int index) const;
  inline ::pb::OrnamentGroupDataSE* mutable_circleornamentgroupdataarr(int index);
  inline ::pb::OrnamentGroupDataSE* add_circleornamentgroupdataarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupDataSE >&
      circleornamentgroupdataarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupDataSE >*
      mutable_circleornamentgroupdataarr();

  // @@protoc_insertion_point(class_scope:pb.NationalWarMapSE)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mapname();
  inline void clear_has_mapname();
  inline void set_has_mapwidth();
  inline void clear_has_mapwidth();
  inline void set_has_mapheight();
  inline void clear_has_mapheight();
  inline void set_has_terrainlayerdata();
  inline void clear_has_terrainlayerdata();
  inline void set_has_borderlayerdata();
  inline void clear_has_borderlayerdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mapname_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 mapwidth_;
  ::pb::LayerDataSE* terrainlayerdata_;
  ::pb::LayerDataSE* borderlayerdata_;
  ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupDataSE > ornamentgroupdataarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::CircleDataSE > circledataarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupDataSE > circleornamentgroupdataarr_;
  ::google::protobuf::int32 mapheight_;
  friend void  protobuf_AddDesc_module_2fNationalWarMapSE_2eproto();
  friend void protobuf_AssignDesc_module_2fNationalWarMapSE_2eproto();
  friend void protobuf_ShutdownFile_module_2fNationalWarMapSE_2eproto();

  void InitAsDefaultInstance();
  static NationalWarMapSE* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>CircleDataSE</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/NationalWarMapSE.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class CircleDataSE : public ::google::protobuf::Message {
 public:
  CircleDataSE();
  virtual ~CircleDataSE();

  CircleDataSE(const CircleDataSE& from);

  inline CircleDataSE& operator=(const CircleDataSE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CircleDataSE& default_instance();

  void Swap(CircleDataSE* other);

  // implements Message ----------------------------------------------

  CircleDataSE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CircleDataSE& from);
  void MergeFrom(const CircleDataSE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 GridIdx = 1;
  inline bool has_grididx() const;
  inline void clear_grididx();
  static const int kGridIdxFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>CircleDataSE</name>
  	<Function>
  		<name>grididx</name>
  		<replaceName>GridIdx</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_grididx</name>
  		<replaceName>GridIdx</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_grididx</name>
  		<replaceName>GridIdx</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 grididx() const;
  inline void set_grididx(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.CircleDataSE)
 private:
  inline void set_has_grididx();
  inline void clear_has_grididx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 grididx_;
  friend void  protobuf_AddDesc_module_2fNationalWarMapSE_2eproto();
  friend void protobuf_AssignDesc_module_2fNationalWarMapSE_2eproto();
  friend void protobuf_ShutdownFile_module_2fNationalWarMapSE_2eproto();

  void InitAsDefaultInstance();
  static CircleDataSE* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>LayerDataSE</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/NationalWarMapSE.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class LayerDataSE : public ::google::protobuf::Message {
 public:
  LayerDataSE();
  virtual ~LayerDataSE();

  LayerDataSE(const LayerDataSE& from);

  inline LayerDataSE& operator=(const LayerDataSE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerDataSE& default_instance();

  void Swap(LayerDataSE* other);

  // implements Message ----------------------------------------------

  LayerDataSE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerDataSE& from);
  void MergeFrom(const LayerDataSE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.GridDataSE GridDataArr = 1;
  inline int griddataarr_size() const;
  inline void clear_griddataarr();
  static const int kGridDataArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>LayerDataSE</name>
  	<Function>
  		<name>griddataarr</name>
  		<replaceName>GridDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_griddataarr</name>
  		<replaceName>GridDataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_griddataarr</name>
  		<replaceName>GridDataArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_griddataarr</name>
  		<replaceName>GridDataArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>griddataarr_size</name>
  		<replaceName>GridDataArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::GridDataSE& griddataarr(int index) const;
  inline ::pb::GridDataSE* mutable_griddataarr(int index);
  inline ::pb::GridDataSE* add_griddataarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GridDataSE >&
      griddataarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GridDataSE >*
      mutable_griddataarr();

  // @@protoc_insertion_point(class_scope:pb.LayerDataSE)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::GridDataSE > griddataarr_;
  friend void  protobuf_AddDesc_module_2fNationalWarMapSE_2eproto();
  friend void protobuf_AssignDesc_module_2fNationalWarMapSE_2eproto();
  friend void protobuf_ShutdownFile_module_2fNationalWarMapSE_2eproto();

  void InitAsDefaultInstance();
  static LayerDataSE* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>GridDataSE</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/NationalWarMapSE.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class GridDataSE : public ::google::protobuf::Message {
 public:
  GridDataSE();
  virtual ~GridDataSE();

  GridDataSE(const GridDataSE& from);

  inline GridDataSE& operator=(const GridDataSE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GridDataSE& default_instance();

  void Swap(GridDataSE* other);

  // implements Message ----------------------------------------------

  GridDataSE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GridDataSE& from);
  void MergeFrom(const GridDataSE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 GridIdx = 1;
  inline bool has_grididx() const;
  inline void clear_grididx();
  static const int kGridIdxFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>GridDataSE</name>
  	<Function>
  		<name>grididx</name>
  		<replaceName>GridIdx</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_grididx</name>
  		<replaceName>GridIdx</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_grididx</name>
  		<replaceName>GridIdx</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 grididx() const;
  inline void set_grididx(::google::protobuf::int32 value);

  // optional uint32 ResId = 2;
  inline bool has_resid() const;
  inline void clear_resid();
  static const int kResIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>GridDataSE</name>
  	<Function>
  		<name>resid</name>
  		<replaceName>ResId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resid</name>
  		<replaceName>ResId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resid</name>
  		<replaceName>ResId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 resid() const;
  inline void set_resid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.GridDataSE)
 private:
  inline void set_has_grididx();
  inline void clear_has_grididx();
  inline void set_has_resid();
  inline void clear_has_resid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 grididx_;
  ::google::protobuf::uint32 resid_;
  friend void  protobuf_AddDesc_module_2fNationalWarMapSE_2eproto();
  friend void protobuf_AssignDesc_module_2fNationalWarMapSE_2eproto();
  friend void protobuf_ShutdownFile_module_2fNationalWarMapSE_2eproto();

  void InitAsDefaultInstance();
  static GridDataSE* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>OrnamentGroupDataSE</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/NationalWarMapSE.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class OrnamentGroupDataSE : public ::google::protobuf::Message {
 public:
  OrnamentGroupDataSE();
  virtual ~OrnamentGroupDataSE();

  OrnamentGroupDataSE(const OrnamentGroupDataSE& from);

  inline OrnamentGroupDataSE& operator=(const OrnamentGroupDataSE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrnamentGroupDataSE& default_instance();

  void Swap(OrnamentGroupDataSE* other);

  // implements Message ----------------------------------------------

  OrnamentGroupDataSE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrnamentGroupDataSE& from);
  void MergeFrom(const OrnamentGroupDataSE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string OrnamentGroupName = 1;
  inline bool has_ornamentgroupname() const;
  inline void clear_ornamentgroupname();
  static const int kOrnamentGroupNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>OrnamentGroupDataSE</name>
  	<Function>
  		<name>ornamentgroupname</name>
  		<replaceName>OrnamentGroupName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ornamentgroupname</name>
  		<replaceName>OrnamentGroupName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ornamentgroupname</name>
  		<replaceName>OrnamentGroupName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& ornamentgroupname() const;
  inline void set_ornamentgroupname(const ::std::string& value);
  inline void set_ornamentgroupname(const char* value);
  inline void set_ornamentgroupname(const char* value, size_t size);
  inline ::std::string* mutable_ornamentgroupname();
  inline ::std::string* release_ornamentgroupname();
  inline void set_allocated_ornamentgroupname(::std::string* ornamentgroupname);

  // repeated int32 GridIdxArr = 2;
  inline int grididxarr_size() const;
  inline void clear_grididxarr();
  static const int kGridIdxArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>OrnamentGroupDataSE</name>
  	<Function>
  		<name>grididxarr</name>
  		<replaceName>GridIdxArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_grididxarr</name>
  		<replaceName>GridIdxArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_grididxarr</name>
  		<replaceName>GridIdxArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_grididxarr</name>
  		<replaceName>GridIdxArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>grididxarr_size</name>
  		<replaceName>GridIdxArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 grididxarr(int index) const;
  inline void set_grididxarr(int index, ::google::protobuf::int32 value);
  inline void add_grididxarr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      grididxarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_grididxarr();

  // @@protoc_insertion_point(class_scope:pb.OrnamentGroupDataSE)
 private:
  inline void set_has_ornamentgroupname();
  inline void clear_has_ornamentgroupname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ornamentgroupname_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > grididxarr_;
  friend void  protobuf_AddDesc_module_2fNationalWarMapSE_2eproto();
  friend void protobuf_AssignDesc_module_2fNationalWarMapSE_2eproto();
  friend void protobuf_ShutdownFile_module_2fNationalWarMapSE_2eproto();

  void InitAsDefaultInstance();
  static OrnamentGroupDataSE* default_instance_;
};
// ===================================================================


// ===================================================================

// NationalWarMapSE

// required int32 Id = 1;
inline bool NationalWarMapSE::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NationalWarMapSE::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NationalWarMapSE::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NationalWarMapSE::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NationalWarMapSE::id() const {
  // @@protoc_insertion_point(field_get:pb.NationalWarMapSE.Id)
  return id_;
}
inline void NationalWarMapSE::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.NationalWarMapSE.Id)
}

// required string MapName = 2;
inline bool NationalWarMapSE::has_mapname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NationalWarMapSE::set_has_mapname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NationalWarMapSE::clear_has_mapname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NationalWarMapSE::clear_mapname() {
  if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapname_->clear();
  }
  clear_has_mapname();
}
inline const ::std::string& NationalWarMapSE::mapname() const {
  // @@protoc_insertion_point(field_get:pb.NationalWarMapSE.MapName)
  return *mapname_;
}
inline void NationalWarMapSE::set_mapname(const ::std::string& value) {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapname_ = new ::std::string;
  }
  mapname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.NationalWarMapSE.MapName)
}
inline void NationalWarMapSE::set_mapname(const char* value) {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapname_ = new ::std::string;
  }
  mapname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.NationalWarMapSE.MapName)
}
inline void NationalWarMapSE::set_mapname(const char* value, size_t size) {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapname_ = new ::std::string;
  }
  mapname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.NationalWarMapSE.MapName)
}
inline ::std::string* NationalWarMapSE::mutable_mapname() {
  set_has_mapname();
  if (mapname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.NationalWarMapSE.MapName)
  return mapname_;
}
inline ::std::string* NationalWarMapSE::release_mapname() {
  clear_has_mapname();
  if (mapname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mapname_;
    mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NationalWarMapSE::set_allocated_mapname(::std::string* mapname) {
  if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapname_;
  }
  if (mapname) {
    set_has_mapname();
    mapname_ = mapname;
  } else {
    clear_has_mapname();
    mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.NationalWarMapSE.MapName)
}

// optional int32 MapWidth = 3;
inline bool NationalWarMapSE::has_mapwidth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NationalWarMapSE::set_has_mapwidth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NationalWarMapSE::clear_has_mapwidth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NationalWarMapSE::clear_mapwidth() {
  mapwidth_ = 0;
  clear_has_mapwidth();
}
inline ::google::protobuf::int32 NationalWarMapSE::mapwidth() const {
  // @@protoc_insertion_point(field_get:pb.NationalWarMapSE.MapWidth)
  return mapwidth_;
}
inline void NationalWarMapSE::set_mapwidth(::google::protobuf::int32 value) {
  set_has_mapwidth();
  mapwidth_ = value;
  // @@protoc_insertion_point(field_set:pb.NationalWarMapSE.MapWidth)
}

// optional int32 MapHeight = 4;
inline bool NationalWarMapSE::has_mapheight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NationalWarMapSE::set_has_mapheight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NationalWarMapSE::clear_has_mapheight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NationalWarMapSE::clear_mapheight() {
  mapheight_ = 0;
  clear_has_mapheight();
}
inline ::google::protobuf::int32 NationalWarMapSE::mapheight() const {
  // @@protoc_insertion_point(field_get:pb.NationalWarMapSE.MapHeight)
  return mapheight_;
}
inline void NationalWarMapSE::set_mapheight(::google::protobuf::int32 value) {
  set_has_mapheight();
  mapheight_ = value;
  // @@protoc_insertion_point(field_set:pb.NationalWarMapSE.MapHeight)
}

// optional .pb.LayerDataSE TerrainLayerData = 5;
inline bool NationalWarMapSE::has_terrainlayerdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NationalWarMapSE::set_has_terrainlayerdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NationalWarMapSE::clear_has_terrainlayerdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NationalWarMapSE::clear_terrainlayerdata() {
  if (terrainlayerdata_ != NULL) terrainlayerdata_->::pb::LayerDataSE::Clear();
  clear_has_terrainlayerdata();
}
inline const ::pb::LayerDataSE& NationalWarMapSE::terrainlayerdata() const {
  // @@protoc_insertion_point(field_get:pb.NationalWarMapSE.TerrainLayerData)
  return terrainlayerdata_ != NULL ? *terrainlayerdata_ : *default_instance_->terrainlayerdata_;
}
inline ::pb::LayerDataSE* NationalWarMapSE::mutable_terrainlayerdata() {
  set_has_terrainlayerdata();
  if (terrainlayerdata_ == NULL) terrainlayerdata_ = new ::pb::LayerDataSE;
  // @@protoc_insertion_point(field_mutable:pb.NationalWarMapSE.TerrainLayerData)
  return terrainlayerdata_;
}
inline ::pb::LayerDataSE* NationalWarMapSE::release_terrainlayerdata() {
  clear_has_terrainlayerdata();
  ::pb::LayerDataSE* temp = terrainlayerdata_;
  terrainlayerdata_ = NULL;
  return temp;
}
inline void NationalWarMapSE::set_allocated_terrainlayerdata(::pb::LayerDataSE* terrainlayerdata) {
  delete terrainlayerdata_;
  terrainlayerdata_ = terrainlayerdata;
  if (terrainlayerdata) {
    set_has_terrainlayerdata();
  } else {
    clear_has_terrainlayerdata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.NationalWarMapSE.TerrainLayerData)
}

// optional .pb.LayerDataSE BorderLayerData = 6;
inline bool NationalWarMapSE::has_borderlayerdata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NationalWarMapSE::set_has_borderlayerdata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NationalWarMapSE::clear_has_borderlayerdata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NationalWarMapSE::clear_borderlayerdata() {
  if (borderlayerdata_ != NULL) borderlayerdata_->::pb::LayerDataSE::Clear();
  clear_has_borderlayerdata();
}
inline const ::pb::LayerDataSE& NationalWarMapSE::borderlayerdata() const {
  // @@protoc_insertion_point(field_get:pb.NationalWarMapSE.BorderLayerData)
  return borderlayerdata_ != NULL ? *borderlayerdata_ : *default_instance_->borderlayerdata_;
}
inline ::pb::LayerDataSE* NationalWarMapSE::mutable_borderlayerdata() {
  set_has_borderlayerdata();
  if (borderlayerdata_ == NULL) borderlayerdata_ = new ::pb::LayerDataSE;
  // @@protoc_insertion_point(field_mutable:pb.NationalWarMapSE.BorderLayerData)
  return borderlayerdata_;
}
inline ::pb::LayerDataSE* NationalWarMapSE::release_borderlayerdata() {
  clear_has_borderlayerdata();
  ::pb::LayerDataSE* temp = borderlayerdata_;
  borderlayerdata_ = NULL;
  return temp;
}
inline void NationalWarMapSE::set_allocated_borderlayerdata(::pb::LayerDataSE* borderlayerdata) {
  delete borderlayerdata_;
  borderlayerdata_ = borderlayerdata;
  if (borderlayerdata) {
    set_has_borderlayerdata();
  } else {
    clear_has_borderlayerdata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.NationalWarMapSE.BorderLayerData)
}

// repeated .pb.OrnamentGroupDataSE OrnamentGroupDataArr = 7;
inline int NationalWarMapSE::ornamentgroupdataarr_size() const {
  return ornamentgroupdataarr_.size();
}
inline void NationalWarMapSE::clear_ornamentgroupdataarr() {
  ornamentgroupdataarr_.Clear();
}
inline const ::pb::OrnamentGroupDataSE& NationalWarMapSE::ornamentgroupdataarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.NationalWarMapSE.OrnamentGroupDataArr)
  return ornamentgroupdataarr_.Get(index);
}
inline ::pb::OrnamentGroupDataSE* NationalWarMapSE::mutable_ornamentgroupdataarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.NationalWarMapSE.OrnamentGroupDataArr)
  return ornamentgroupdataarr_.Mutable(index);
}
inline ::pb::OrnamentGroupDataSE* NationalWarMapSE::add_ornamentgroupdataarr() {
  // @@protoc_insertion_point(field_add:pb.NationalWarMapSE.OrnamentGroupDataArr)
  return ornamentgroupdataarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupDataSE >&
NationalWarMapSE::ornamentgroupdataarr() const {
  // @@protoc_insertion_point(field_list:pb.NationalWarMapSE.OrnamentGroupDataArr)
  return ornamentgroupdataarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupDataSE >*
NationalWarMapSE::mutable_ornamentgroupdataarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.NationalWarMapSE.OrnamentGroupDataArr)
  return &ornamentgroupdataarr_;
}

// repeated .pb.CircleDataSE CircleDataArr = 8;
inline int NationalWarMapSE::circledataarr_size() const {
  return circledataarr_.size();
}
inline void NationalWarMapSE::clear_circledataarr() {
  circledataarr_.Clear();
}
inline const ::pb::CircleDataSE& NationalWarMapSE::circledataarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.NationalWarMapSE.CircleDataArr)
  return circledataarr_.Get(index);
}
inline ::pb::CircleDataSE* NationalWarMapSE::mutable_circledataarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.NationalWarMapSE.CircleDataArr)
  return circledataarr_.Mutable(index);
}
inline ::pb::CircleDataSE* NationalWarMapSE::add_circledataarr() {
  // @@protoc_insertion_point(field_add:pb.NationalWarMapSE.CircleDataArr)
  return circledataarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::CircleDataSE >&
NationalWarMapSE::circledataarr() const {
  // @@protoc_insertion_point(field_list:pb.NationalWarMapSE.CircleDataArr)
  return circledataarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::CircleDataSE >*
NationalWarMapSE::mutable_circledataarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.NationalWarMapSE.CircleDataArr)
  return &circledataarr_;
}

// repeated .pb.OrnamentGroupDataSE CircleOrnamentGroupDataArr = 9;
inline int NationalWarMapSE::circleornamentgroupdataarr_size() const {
  return circleornamentgroupdataarr_.size();
}
inline void NationalWarMapSE::clear_circleornamentgroupdataarr() {
  circleornamentgroupdataarr_.Clear();
}
inline const ::pb::OrnamentGroupDataSE& NationalWarMapSE::circleornamentgroupdataarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.NationalWarMapSE.CircleOrnamentGroupDataArr)
  return circleornamentgroupdataarr_.Get(index);
}
inline ::pb::OrnamentGroupDataSE* NationalWarMapSE::mutable_circleornamentgroupdataarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.NationalWarMapSE.CircleOrnamentGroupDataArr)
  return circleornamentgroupdataarr_.Mutable(index);
}
inline ::pb::OrnamentGroupDataSE* NationalWarMapSE::add_circleornamentgroupdataarr() {
  // @@protoc_insertion_point(field_add:pb.NationalWarMapSE.CircleOrnamentGroupDataArr)
  return circleornamentgroupdataarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupDataSE >&
NationalWarMapSE::circleornamentgroupdataarr() const {
  // @@protoc_insertion_point(field_list:pb.NationalWarMapSE.CircleOrnamentGroupDataArr)
  return circleornamentgroupdataarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::OrnamentGroupDataSE >*
NationalWarMapSE::mutable_circleornamentgroupdataarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.NationalWarMapSE.CircleOrnamentGroupDataArr)
  return &circleornamentgroupdataarr_;
}

// -------------------------------------------------------------------

// CircleDataSE

// optional int32 GridIdx = 1;
inline bool CircleDataSE::has_grididx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CircleDataSE::set_has_grididx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CircleDataSE::clear_has_grididx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CircleDataSE::clear_grididx() {
  grididx_ = 0;
  clear_has_grididx();
}
inline ::google::protobuf::int32 CircleDataSE::grididx() const {
  // @@protoc_insertion_point(field_get:pb.CircleDataSE.GridIdx)
  return grididx_;
}
inline void CircleDataSE::set_grididx(::google::protobuf::int32 value) {
  set_has_grididx();
  grididx_ = value;
  // @@protoc_insertion_point(field_set:pb.CircleDataSE.GridIdx)
}

// -------------------------------------------------------------------

// LayerDataSE

// repeated .pb.GridDataSE GridDataArr = 1;
inline int LayerDataSE::griddataarr_size() const {
  return griddataarr_.size();
}
inline void LayerDataSE::clear_griddataarr() {
  griddataarr_.Clear();
}
inline const ::pb::GridDataSE& LayerDataSE::griddataarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.LayerDataSE.GridDataArr)
  return griddataarr_.Get(index);
}
inline ::pb::GridDataSE* LayerDataSE::mutable_griddataarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.LayerDataSE.GridDataArr)
  return griddataarr_.Mutable(index);
}
inline ::pb::GridDataSE* LayerDataSE::add_griddataarr() {
  // @@protoc_insertion_point(field_add:pb.LayerDataSE.GridDataArr)
  return griddataarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GridDataSE >&
LayerDataSE::griddataarr() const {
  // @@protoc_insertion_point(field_list:pb.LayerDataSE.GridDataArr)
  return griddataarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GridDataSE >*
LayerDataSE::mutable_griddataarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.LayerDataSE.GridDataArr)
  return &griddataarr_;
}

// -------------------------------------------------------------------

// GridDataSE

// optional int32 GridIdx = 1;
inline bool GridDataSE::has_grididx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GridDataSE::set_has_grididx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GridDataSE::clear_has_grididx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GridDataSE::clear_grididx() {
  grididx_ = 0;
  clear_has_grididx();
}
inline ::google::protobuf::int32 GridDataSE::grididx() const {
  // @@protoc_insertion_point(field_get:pb.GridDataSE.GridIdx)
  return grididx_;
}
inline void GridDataSE::set_grididx(::google::protobuf::int32 value) {
  set_has_grididx();
  grididx_ = value;
  // @@protoc_insertion_point(field_set:pb.GridDataSE.GridIdx)
}

// optional uint32 ResId = 2;
inline bool GridDataSE::has_resid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GridDataSE::set_has_resid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GridDataSE::clear_has_resid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GridDataSE::clear_resid() {
  resid_ = 0u;
  clear_has_resid();
}
inline ::google::protobuf::uint32 GridDataSE::resid() const {
  // @@protoc_insertion_point(field_get:pb.GridDataSE.ResId)
  return resid_;
}
inline void GridDataSE::set_resid(::google::protobuf::uint32 value) {
  set_has_resid();
  resid_ = value;
  // @@protoc_insertion_point(field_set:pb.GridDataSE.ResId)
}

// -------------------------------------------------------------------

// OrnamentGroupDataSE

// optional string OrnamentGroupName = 1;
inline bool OrnamentGroupDataSE::has_ornamentgroupname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrnamentGroupDataSE::set_has_ornamentgroupname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrnamentGroupDataSE::clear_has_ornamentgroupname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrnamentGroupDataSE::clear_ornamentgroupname() {
  if (ornamentgroupname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ornamentgroupname_->clear();
  }
  clear_has_ornamentgroupname();
}
inline const ::std::string& OrnamentGroupDataSE::ornamentgroupname() const {
  // @@protoc_insertion_point(field_get:pb.OrnamentGroupDataSE.OrnamentGroupName)
  return *ornamentgroupname_;
}
inline void OrnamentGroupDataSE::set_ornamentgroupname(const ::std::string& value) {
  set_has_ornamentgroupname();
  if (ornamentgroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ornamentgroupname_ = new ::std::string;
  }
  ornamentgroupname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.OrnamentGroupDataSE.OrnamentGroupName)
}
inline void OrnamentGroupDataSE::set_ornamentgroupname(const char* value) {
  set_has_ornamentgroupname();
  if (ornamentgroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ornamentgroupname_ = new ::std::string;
  }
  ornamentgroupname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.OrnamentGroupDataSE.OrnamentGroupName)
}
inline void OrnamentGroupDataSE::set_ornamentgroupname(const char* value, size_t size) {
  set_has_ornamentgroupname();
  if (ornamentgroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ornamentgroupname_ = new ::std::string;
  }
  ornamentgroupname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.OrnamentGroupDataSE.OrnamentGroupName)
}
inline ::std::string* OrnamentGroupDataSE::mutable_ornamentgroupname() {
  set_has_ornamentgroupname();
  if (ornamentgroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ornamentgroupname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.OrnamentGroupDataSE.OrnamentGroupName)
  return ornamentgroupname_;
}
inline ::std::string* OrnamentGroupDataSE::release_ornamentgroupname() {
  clear_has_ornamentgroupname();
  if (ornamentgroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ornamentgroupname_;
    ornamentgroupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OrnamentGroupDataSE::set_allocated_ornamentgroupname(::std::string* ornamentgroupname) {
  if (ornamentgroupname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ornamentgroupname_;
  }
  if (ornamentgroupname) {
    set_has_ornamentgroupname();
    ornamentgroupname_ = ornamentgroupname;
  } else {
    clear_has_ornamentgroupname();
    ornamentgroupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.OrnamentGroupDataSE.OrnamentGroupName)
}

// repeated int32 GridIdxArr = 2;
inline int OrnamentGroupDataSE::grididxarr_size() const {
  return grididxarr_.size();
}
inline void OrnamentGroupDataSE::clear_grididxarr() {
  grididxarr_.Clear();
}
inline ::google::protobuf::int32 OrnamentGroupDataSE::grididxarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.OrnamentGroupDataSE.GridIdxArr)
  return grididxarr_.Get(index);
}
inline void OrnamentGroupDataSE::set_grididxarr(int index, ::google::protobuf::int32 value) {
  grididxarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.OrnamentGroupDataSE.GridIdxArr)
}
inline void OrnamentGroupDataSE::add_grididxarr(::google::protobuf::int32 value) {
  grididxarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.OrnamentGroupDataSE.GridIdxArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OrnamentGroupDataSE::grididxarr() const {
  // @@protoc_insertion_point(field_list:pb.OrnamentGroupDataSE.GridIdxArr)
  return grididxarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OrnamentGroupDataSE::mutable_grididxarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.OrnamentGroupDataSE.GridIdxArr)
  return &grididxarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fNationalWarMapSE_2eproto__INCLUDED
