// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActNewYearBlessing.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActNewYearBlessing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActNewYearBlessingTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActNewYearBlessingTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActNewYearBlessingDayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActNewYearBlessingDayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActNewYearBlessingGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActNewYearBlessingGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActNewYearBlessingGetArrTaskRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActNewYearBlessingGetArrTaskRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActNewYearBlessingGetArrLuckRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActNewYearBlessingGetArrLuckRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActNewYearBlessingGetArrLuckRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActNewYearBlessingGetArrLuckRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActNewYearBlessingDrawRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActNewYearBlessingDrawRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActNewYearBlessingNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActNewYearBlessingNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActNewYearBlessing_2eproto() {
  protobuf_AddDesc_net_2fActNewYearBlessing_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActNewYearBlessing.proto");
  GOOGLE_CHECK(file != NULL);
  TActNewYearBlessingTaskInfo_descriptor_ = file->message_type(0);
  static const int TActNewYearBlessingTaskInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingTaskInfo, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingTaskInfo, num_),
  };
  TActNewYearBlessingTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActNewYearBlessingTaskInfo_descriptor_,
      TActNewYearBlessingTaskInfo::default_instance_,
      TActNewYearBlessingTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActNewYearBlessingTaskInfo));
  TActNewYearBlessingDayInfo_descriptor_ = file->message_type(1);
  static const int TActNewYearBlessingDayInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingDayInfo, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingDayInfo, arrtaskinfo_),
  };
  TActNewYearBlessingDayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActNewYearBlessingDayInfo_descriptor_,
      TActNewYearBlessingDayInfo::default_instance_,
      TActNewYearBlessingDayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingDayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingDayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActNewYearBlessingDayInfo));
  TActNewYearBlessingGetInfoRsp_descriptor_ = file->message_type(2);
  static const int TActNewYearBlessingGetInfoRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingGetInfoRsp, luck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingGetInfoRsp, drawnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingGetInfoRsp, darknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingGetInfoRsp, arrdayinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingGetInfoRsp, arrtaskrewardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingGetInfoRsp, arrluckrewardinfo_),
  };
  TActNewYearBlessingGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActNewYearBlessingGetInfoRsp_descriptor_,
      TActNewYearBlessingGetInfoRsp::default_instance_,
      TActNewYearBlessingGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActNewYearBlessingGetInfoRsp));
  TActNewYearBlessingGetArrTaskRewardReq_descriptor_ = file->message_type(3);
  static const int TActNewYearBlessingGetArrTaskRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingGetArrTaskRewardReq, arrid_),
  };
  TActNewYearBlessingGetArrTaskRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActNewYearBlessingGetArrTaskRewardReq_descriptor_,
      TActNewYearBlessingGetArrTaskRewardReq::default_instance_,
      TActNewYearBlessingGetArrTaskRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingGetArrTaskRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingGetArrTaskRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActNewYearBlessingGetArrTaskRewardReq));
  TActNewYearBlessingGetArrLuckRewardReq_descriptor_ = file->message_type(4);
  static const int TActNewYearBlessingGetArrLuckRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingGetArrLuckRewardReq, arrid_),
  };
  TActNewYearBlessingGetArrLuckRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActNewYearBlessingGetArrLuckRewardReq_descriptor_,
      TActNewYearBlessingGetArrLuckRewardReq::default_instance_,
      TActNewYearBlessingGetArrLuckRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingGetArrLuckRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingGetArrLuckRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActNewYearBlessingGetArrLuckRewardReq));
  TActNewYearBlessingGetArrLuckRewardRsp_descriptor_ = file->message_type(5);
  static const int TActNewYearBlessingGetArrLuckRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingGetArrLuckRewardRsp, arrreward_),
  };
  TActNewYearBlessingGetArrLuckRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActNewYearBlessingGetArrLuckRewardRsp_descriptor_,
      TActNewYearBlessingGetArrLuckRewardRsp::default_instance_,
      TActNewYearBlessingGetArrLuckRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingGetArrLuckRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingGetArrLuckRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActNewYearBlessingGetArrLuckRewardRsp));
  TActNewYearBlessingDrawRsp_descriptor_ = file->message_type(6);
  static const int TActNewYearBlessingDrawRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingDrawRsp, arrreward_),
  };
  TActNewYearBlessingDrawRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActNewYearBlessingDrawRsp_descriptor_,
      TActNewYearBlessingDrawRsp::default_instance_,
      TActNewYearBlessingDrawRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingDrawRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingDrawRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActNewYearBlessingDrawRsp));
  TActNewYearBlessingNotify_descriptor_ = file->message_type(7);
  static const int TActNewYearBlessingNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingNotify, arrdayinfo_),
  };
  TActNewYearBlessingNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActNewYearBlessingNotify_descriptor_,
      TActNewYearBlessingNotify::default_instance_,
      TActNewYearBlessingNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearBlessingNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActNewYearBlessingNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActNewYearBlessing_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActNewYearBlessingTaskInfo_descriptor_, &TActNewYearBlessingTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActNewYearBlessingDayInfo_descriptor_, &TActNewYearBlessingDayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActNewYearBlessingGetInfoRsp_descriptor_, &TActNewYearBlessingGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActNewYearBlessingGetArrTaskRewardReq_descriptor_, &TActNewYearBlessingGetArrTaskRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActNewYearBlessingGetArrLuckRewardReq_descriptor_, &TActNewYearBlessingGetArrLuckRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActNewYearBlessingGetArrLuckRewardRsp_descriptor_, &TActNewYearBlessingGetArrLuckRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActNewYearBlessingDrawRsp_descriptor_, &TActNewYearBlessingDrawRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActNewYearBlessingNotify_descriptor_, &TActNewYearBlessingNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActNewYearBlessing_2eproto() {
  delete TActNewYearBlessingTaskInfo::default_instance_;
  delete TActNewYearBlessingTaskInfo_reflection_;
  delete TActNewYearBlessingDayInfo::default_instance_;
  delete TActNewYearBlessingDayInfo_reflection_;
  delete TActNewYearBlessingGetInfoRsp::default_instance_;
  delete TActNewYearBlessingGetInfoRsp_reflection_;
  delete TActNewYearBlessingGetArrTaskRewardReq::default_instance_;
  delete TActNewYearBlessingGetArrTaskRewardReq_reflection_;
  delete TActNewYearBlessingGetArrLuckRewardReq::default_instance_;
  delete TActNewYearBlessingGetArrLuckRewardReq_reflection_;
  delete TActNewYearBlessingGetArrLuckRewardRsp::default_instance_;
  delete TActNewYearBlessingGetArrLuckRewardRsp_reflection_;
  delete TActNewYearBlessingDrawRsp::default_instance_;
  delete TActNewYearBlessingDrawRsp_reflection_;
  delete TActNewYearBlessingNotify::default_instance_;
  delete TActNewYearBlessingNotify_reflection_;
}

void protobuf_AddDesc_net_2fActNewYearBlessing_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fOpenActivity_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034net/ActNewYearBlessing.proto\022\002pb\032\026net/"
    "CommonReward.proto\032\026net/OpenActivity.pro"
    "to\"<\n\033TActNewYearBlessingTaskInfo\022\020\n\010Tas"
    "kType\030\001 \001(\r\022\013\n\003Num\030\002 \001(\004\"_\n\032TActNewYearB"
    "lessingDayInfo\022\013\n\003Day\030\001 \001(\r\0224\n\013ArrTaskIn"
    "fo\030\002 \003(\0132\037.pb.TActNewYearBlessingTaskInf"
    "o\"\353\001\n\035TActNewYearBlessingGetInfoRsp\022\014\n\004L"
    "uck\030\001 \001(\r\022\017\n\007DrawNum\030\002 \001(\r\022\017\n\007DarkNum\030\003 "
    "\001(\r\0222\n\nArrDayInfo\030\004 \003(\0132\036.pb.TActNewYear"
    "BlessingDayInfo\0222\n\021ArrTaskRewardInfo\030\005 \003"
    "(\0132\027.pb.TActivityRewardInfo\0222\n\021ArrLuckRe"
    "wardInfo\030\006 \003(\0132\027.pb.TActivityRewardInfo\""
    "7\n&TActNewYearBlessingGetArrTaskRewardRe"
    "q\022\r\n\005ArrId\030\001 \003(\r\"7\n&TActNewYearBlessingG"
    "etArrLuckRewardReq\022\r\n\005ArrId\030\001 \003(\r\"N\n&TAc"
    "tNewYearBlessingGetArrLuckRewardRsp\022$\n\tA"
    "rrReward\030\001 \003(\0132\021.pb.TCommonReward\"B\n\032TAc"
    "tNewYearBlessingDrawRsp\022$\n\tArrReward\030\001 \003"
    "(\0132\021.pb.TCommonReward\"O\n\031TActNewYearBles"
    "singNotify\0222\n\nArrDayInfo\030\001 \003(\0132\036.pb.TAct"
    "NewYearBlessingDayInfo", 822);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActNewYearBlessing.proto", &protobuf_RegisterTypes);
  TActNewYearBlessingTaskInfo::default_instance_ = new TActNewYearBlessingTaskInfo();
  TActNewYearBlessingDayInfo::default_instance_ = new TActNewYearBlessingDayInfo();
  TActNewYearBlessingGetInfoRsp::default_instance_ = new TActNewYearBlessingGetInfoRsp();
  TActNewYearBlessingGetArrTaskRewardReq::default_instance_ = new TActNewYearBlessingGetArrTaskRewardReq();
  TActNewYearBlessingGetArrLuckRewardReq::default_instance_ = new TActNewYearBlessingGetArrLuckRewardReq();
  TActNewYearBlessingGetArrLuckRewardRsp::default_instance_ = new TActNewYearBlessingGetArrLuckRewardRsp();
  TActNewYearBlessingDrawRsp::default_instance_ = new TActNewYearBlessingDrawRsp();
  TActNewYearBlessingNotify::default_instance_ = new TActNewYearBlessingNotify();
  TActNewYearBlessingTaskInfo::default_instance_->InitAsDefaultInstance();
  TActNewYearBlessingDayInfo::default_instance_->InitAsDefaultInstance();
  TActNewYearBlessingGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActNewYearBlessingGetArrTaskRewardReq::default_instance_->InitAsDefaultInstance();
  TActNewYearBlessingGetArrLuckRewardReq::default_instance_->InitAsDefaultInstance();
  TActNewYearBlessingGetArrLuckRewardRsp::default_instance_->InitAsDefaultInstance();
  TActNewYearBlessingDrawRsp::default_instance_->InitAsDefaultInstance();
  TActNewYearBlessingNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActNewYearBlessing_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActNewYearBlessing_2eproto {
  StaticDescriptorInitializer_net_2fActNewYearBlessing_2eproto() {
    protobuf_AddDesc_net_2fActNewYearBlessing_2eproto();
  }
} static_descriptor_initializer_net_2fActNewYearBlessing_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActNewYearBlessingTaskInfo::kTaskTypeFieldNumber;
const int TActNewYearBlessingTaskInfo::kNumFieldNumber;
#endif  // !_MSC_VER

TActNewYearBlessingTaskInfo::TActNewYearBlessingTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActNewYearBlessingTaskInfo)
}

void TActNewYearBlessingTaskInfo::InitAsDefaultInstance() {
}

TActNewYearBlessingTaskInfo::TActNewYearBlessingTaskInfo(const TActNewYearBlessingTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActNewYearBlessingTaskInfo)
}

void TActNewYearBlessingTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  tasktype_ = 0u;
  num_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActNewYearBlessingTaskInfo::~TActNewYearBlessingTaskInfo() {
  // @@protoc_insertion_point(destructor:pb.TActNewYearBlessingTaskInfo)
  SharedDtor();
}

void TActNewYearBlessingTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActNewYearBlessingTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActNewYearBlessingTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActNewYearBlessingTaskInfo_descriptor_;
}

const TActNewYearBlessingTaskInfo& TActNewYearBlessingTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActNewYearBlessing_2eproto();
  return *default_instance_;
}

TActNewYearBlessingTaskInfo* TActNewYearBlessingTaskInfo::default_instance_ = NULL;

TActNewYearBlessingTaskInfo* TActNewYearBlessingTaskInfo::New() const {
  return new TActNewYearBlessingTaskInfo;
}

void TActNewYearBlessingTaskInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActNewYearBlessingTaskInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(num_, tasktype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActNewYearBlessingTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActNewYearBlessingTaskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint64 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActNewYearBlessingTaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActNewYearBlessingTaskInfo)
  return false;
#undef DO_
}

void TActNewYearBlessingTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActNewYearBlessingTaskInfo)
  // optional uint32 TaskType = 1;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tasktype(), output);
  }

  // optional uint64 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActNewYearBlessingTaskInfo)
}

::google::protobuf::uint8* TActNewYearBlessingTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActNewYearBlessingTaskInfo)
  // optional uint32 TaskType = 1;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tasktype(), target);
  }

  // optional uint64 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActNewYearBlessingTaskInfo)
  return target;
}

int TActNewYearBlessingTaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskType = 1;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasktype());
    }

    // optional uint64 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActNewYearBlessingTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActNewYearBlessingTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActNewYearBlessingTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActNewYearBlessingTaskInfo::MergeFrom(const TActNewYearBlessingTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActNewYearBlessingTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActNewYearBlessingTaskInfo::CopyFrom(const TActNewYearBlessingTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActNewYearBlessingTaskInfo::IsInitialized() const {

  return true;
}

void TActNewYearBlessingTaskInfo::Swap(TActNewYearBlessingTaskInfo* other) {
  if (other != this) {
    std::swap(tasktype_, other->tasktype_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActNewYearBlessingTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActNewYearBlessingTaskInfo_descriptor_;
  metadata.reflection = TActNewYearBlessingTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActNewYearBlessingDayInfo::kDayFieldNumber;
const int TActNewYearBlessingDayInfo::kArrTaskInfoFieldNumber;
#endif  // !_MSC_VER

TActNewYearBlessingDayInfo::TActNewYearBlessingDayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActNewYearBlessingDayInfo)
}

void TActNewYearBlessingDayInfo::InitAsDefaultInstance() {
}

TActNewYearBlessingDayInfo::TActNewYearBlessingDayInfo(const TActNewYearBlessingDayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActNewYearBlessingDayInfo)
}

void TActNewYearBlessingDayInfo::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActNewYearBlessingDayInfo::~TActNewYearBlessingDayInfo() {
  // @@protoc_insertion_point(destructor:pb.TActNewYearBlessingDayInfo)
  SharedDtor();
}

void TActNewYearBlessingDayInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActNewYearBlessingDayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActNewYearBlessingDayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActNewYearBlessingDayInfo_descriptor_;
}

const TActNewYearBlessingDayInfo& TActNewYearBlessingDayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActNewYearBlessing_2eproto();
  return *default_instance_;
}

TActNewYearBlessingDayInfo* TActNewYearBlessingDayInfo::default_instance_ = NULL;

TActNewYearBlessingDayInfo* TActNewYearBlessingDayInfo::New() const {
  return new TActNewYearBlessingDayInfo;
}

void TActNewYearBlessingDayInfo::Clear() {
  day_ = 0u;
  arrtaskinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActNewYearBlessingDayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActNewYearBlessingDayInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrTaskInfo;
        break;
      }

      // repeated .pb.TActNewYearBlessingTaskInfo ArrTaskInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrTaskInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtaskinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrTaskInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActNewYearBlessingDayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActNewYearBlessingDayInfo)
  return false;
#undef DO_
}

void TActNewYearBlessingDayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActNewYearBlessingDayInfo)
  // optional uint32 Day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // repeated .pb.TActNewYearBlessingTaskInfo ArrTaskInfo = 2;
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrtaskinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActNewYearBlessingDayInfo)
}

::google::protobuf::uint8* TActNewYearBlessingDayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActNewYearBlessingDayInfo)
  // optional uint32 Day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // repeated .pb.TActNewYearBlessingTaskInfo ArrTaskInfo = 2;
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrtaskinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActNewYearBlessingDayInfo)
  return target;
}

int TActNewYearBlessingDayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  // repeated .pb.TActNewYearBlessingTaskInfo ArrTaskInfo = 2;
  total_size += 1 * this->arrtaskinfo_size();
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtaskinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActNewYearBlessingDayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActNewYearBlessingDayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActNewYearBlessingDayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActNewYearBlessingDayInfo::MergeFrom(const TActNewYearBlessingDayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrtaskinfo_.MergeFrom(from.arrtaskinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActNewYearBlessingDayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActNewYearBlessingDayInfo::CopyFrom(const TActNewYearBlessingDayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActNewYearBlessingDayInfo::IsInitialized() const {

  return true;
}

void TActNewYearBlessingDayInfo::Swap(TActNewYearBlessingDayInfo* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    arrtaskinfo_.Swap(&other->arrtaskinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActNewYearBlessingDayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActNewYearBlessingDayInfo_descriptor_;
  metadata.reflection = TActNewYearBlessingDayInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActNewYearBlessingGetInfoRsp::kLuckFieldNumber;
const int TActNewYearBlessingGetInfoRsp::kDrawNumFieldNumber;
const int TActNewYearBlessingGetInfoRsp::kDarkNumFieldNumber;
const int TActNewYearBlessingGetInfoRsp::kArrDayInfoFieldNumber;
const int TActNewYearBlessingGetInfoRsp::kArrTaskRewardInfoFieldNumber;
const int TActNewYearBlessingGetInfoRsp::kArrLuckRewardInfoFieldNumber;
#endif  // !_MSC_VER

TActNewYearBlessingGetInfoRsp::TActNewYearBlessingGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActNewYearBlessingGetInfoRsp)
}

void TActNewYearBlessingGetInfoRsp::InitAsDefaultInstance() {
}

TActNewYearBlessingGetInfoRsp::TActNewYearBlessingGetInfoRsp(const TActNewYearBlessingGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActNewYearBlessingGetInfoRsp)
}

void TActNewYearBlessingGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  luck_ = 0u;
  drawnum_ = 0u;
  darknum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActNewYearBlessingGetInfoRsp::~TActNewYearBlessingGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActNewYearBlessingGetInfoRsp)
  SharedDtor();
}

void TActNewYearBlessingGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActNewYearBlessingGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActNewYearBlessingGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActNewYearBlessingGetInfoRsp_descriptor_;
}

const TActNewYearBlessingGetInfoRsp& TActNewYearBlessingGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActNewYearBlessing_2eproto();
  return *default_instance_;
}

TActNewYearBlessingGetInfoRsp* TActNewYearBlessingGetInfoRsp::default_instance_ = NULL;

TActNewYearBlessingGetInfoRsp* TActNewYearBlessingGetInfoRsp::New() const {
  return new TActNewYearBlessingGetInfoRsp;
}

void TActNewYearBlessingGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActNewYearBlessingGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(luck_, drawnum_);
    darknum_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrdayinfo_.Clear();
  arrtaskrewardinfo_.Clear();
  arrluckrewardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActNewYearBlessingGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActNewYearBlessingGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Luck = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &luck_)));
          set_has_luck();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DrawNum;
        break;
      }

      // optional uint32 DrawNum = 2;
      case 2: {
        if (tag == 16) {
         parse_DrawNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drawnum_)));
          set_has_drawnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DarkNum;
        break;
      }

      // optional uint32 DarkNum = 3;
      case 3: {
        if (tag == 24) {
         parse_DarkNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &darknum_)));
          set_has_darknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrDayInfo;
        break;
      }

      // repeated .pb.TActNewYearBlessingDayInfo ArrDayInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_ArrDayInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrdayinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrDayInfo;
        if (input->ExpectTag(42)) goto parse_ArrTaskRewardInfo;
        break;
      }

      // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_ArrTaskRewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtaskrewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ArrTaskRewardInfo;
        if (input->ExpectTag(50)) goto parse_ArrLuckRewardInfo;
        break;
      }

      // repeated .pb.TActivityRewardInfo ArrLuckRewardInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_ArrLuckRewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrluckrewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ArrLuckRewardInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActNewYearBlessingGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActNewYearBlessingGetInfoRsp)
  return false;
#undef DO_
}

void TActNewYearBlessingGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActNewYearBlessingGetInfoRsp)
  // optional uint32 Luck = 1;
  if (has_luck()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->luck(), output);
  }

  // optional uint32 DrawNum = 2;
  if (has_drawnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->drawnum(), output);
  }

  // optional uint32 DarkNum = 3;
  if (has_darknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->darknum(), output);
  }

  // repeated .pb.TActNewYearBlessingDayInfo ArrDayInfo = 4;
  for (int i = 0; i < this->arrdayinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arrdayinfo(i), output);
  }

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 5;
  for (int i = 0; i < this->arrtaskrewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->arrtaskrewardinfo(i), output);
  }

  // repeated .pb.TActivityRewardInfo ArrLuckRewardInfo = 6;
  for (int i = 0; i < this->arrluckrewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->arrluckrewardinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActNewYearBlessingGetInfoRsp)
}

::google::protobuf::uint8* TActNewYearBlessingGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActNewYearBlessingGetInfoRsp)
  // optional uint32 Luck = 1;
  if (has_luck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->luck(), target);
  }

  // optional uint32 DrawNum = 2;
  if (has_drawnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->drawnum(), target);
  }

  // optional uint32 DarkNum = 3;
  if (has_darknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->darknum(), target);
  }

  // repeated .pb.TActNewYearBlessingDayInfo ArrDayInfo = 4;
  for (int i = 0; i < this->arrdayinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arrdayinfo(i), target);
  }

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 5;
  for (int i = 0; i < this->arrtaskrewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->arrtaskrewardinfo(i), target);
  }

  // repeated .pb.TActivityRewardInfo ArrLuckRewardInfo = 6;
  for (int i = 0; i < this->arrluckrewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->arrluckrewardinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActNewYearBlessingGetInfoRsp)
  return target;
}

int TActNewYearBlessingGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Luck = 1;
    if (has_luck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->luck());
    }

    // optional uint32 DrawNum = 2;
    if (has_drawnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drawnum());
    }

    // optional uint32 DarkNum = 3;
    if (has_darknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->darknum());
    }

  }
  // repeated .pb.TActNewYearBlessingDayInfo ArrDayInfo = 4;
  total_size += 1 * this->arrdayinfo_size();
  for (int i = 0; i < this->arrdayinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrdayinfo(i));
  }

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 5;
  total_size += 1 * this->arrtaskrewardinfo_size();
  for (int i = 0; i < this->arrtaskrewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtaskrewardinfo(i));
  }

  // repeated .pb.TActivityRewardInfo ArrLuckRewardInfo = 6;
  total_size += 1 * this->arrluckrewardinfo_size();
  for (int i = 0; i < this->arrluckrewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrluckrewardinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActNewYearBlessingGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActNewYearBlessingGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActNewYearBlessingGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActNewYearBlessingGetInfoRsp::MergeFrom(const TActNewYearBlessingGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrdayinfo_.MergeFrom(from.arrdayinfo_);
  arrtaskrewardinfo_.MergeFrom(from.arrtaskrewardinfo_);
  arrluckrewardinfo_.MergeFrom(from.arrluckrewardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_luck()) {
      set_luck(from.luck());
    }
    if (from.has_drawnum()) {
      set_drawnum(from.drawnum());
    }
    if (from.has_darknum()) {
      set_darknum(from.darknum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActNewYearBlessingGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActNewYearBlessingGetInfoRsp::CopyFrom(const TActNewYearBlessingGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActNewYearBlessingGetInfoRsp::IsInitialized() const {

  return true;
}

void TActNewYearBlessingGetInfoRsp::Swap(TActNewYearBlessingGetInfoRsp* other) {
  if (other != this) {
    std::swap(luck_, other->luck_);
    std::swap(drawnum_, other->drawnum_);
    std::swap(darknum_, other->darknum_);
    arrdayinfo_.Swap(&other->arrdayinfo_);
    arrtaskrewardinfo_.Swap(&other->arrtaskrewardinfo_);
    arrluckrewardinfo_.Swap(&other->arrluckrewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActNewYearBlessingGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActNewYearBlessingGetInfoRsp_descriptor_;
  metadata.reflection = TActNewYearBlessingGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActNewYearBlessingGetArrTaskRewardReq::kArrIdFieldNumber;
#endif  // !_MSC_VER

TActNewYearBlessingGetArrTaskRewardReq::TActNewYearBlessingGetArrTaskRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActNewYearBlessingGetArrTaskRewardReq)
}

void TActNewYearBlessingGetArrTaskRewardReq::InitAsDefaultInstance() {
}

TActNewYearBlessingGetArrTaskRewardReq::TActNewYearBlessingGetArrTaskRewardReq(const TActNewYearBlessingGetArrTaskRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActNewYearBlessingGetArrTaskRewardReq)
}

void TActNewYearBlessingGetArrTaskRewardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActNewYearBlessingGetArrTaskRewardReq::~TActNewYearBlessingGetArrTaskRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActNewYearBlessingGetArrTaskRewardReq)
  SharedDtor();
}

void TActNewYearBlessingGetArrTaskRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActNewYearBlessingGetArrTaskRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActNewYearBlessingGetArrTaskRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActNewYearBlessingGetArrTaskRewardReq_descriptor_;
}

const TActNewYearBlessingGetArrTaskRewardReq& TActNewYearBlessingGetArrTaskRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActNewYearBlessing_2eproto();
  return *default_instance_;
}

TActNewYearBlessingGetArrTaskRewardReq* TActNewYearBlessingGetArrTaskRewardReq::default_instance_ = NULL;

TActNewYearBlessingGetArrTaskRewardReq* TActNewYearBlessingGetArrTaskRewardReq::New() const {
  return new TActNewYearBlessingGetArrTaskRewardReq;
}

void TActNewYearBlessingGetArrTaskRewardReq::Clear() {
  arrid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActNewYearBlessingGetArrTaskRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActNewYearBlessingGetArrTaskRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ArrId = 1;
      case 1: {
        if (tag == 8) {
         parse_ArrId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_arrid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arrid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ArrId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActNewYearBlessingGetArrTaskRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActNewYearBlessingGetArrTaskRewardReq)
  return false;
#undef DO_
}

void TActNewYearBlessingGetArrTaskRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActNewYearBlessingGetArrTaskRewardReq)
  // repeated uint32 ArrId = 1;
  for (int i = 0; i < this->arrid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->arrid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActNewYearBlessingGetArrTaskRewardReq)
}

::google::protobuf::uint8* TActNewYearBlessingGetArrTaskRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActNewYearBlessingGetArrTaskRewardReq)
  // repeated uint32 ArrId = 1;
  for (int i = 0; i < this->arrid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->arrid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActNewYearBlessingGetArrTaskRewardReq)
  return target;
}

int TActNewYearBlessingGetArrTaskRewardReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 ArrId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arrid(i));
    }
    total_size += 1 * this->arrid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActNewYearBlessingGetArrTaskRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActNewYearBlessingGetArrTaskRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActNewYearBlessingGetArrTaskRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActNewYearBlessingGetArrTaskRewardReq::MergeFrom(const TActNewYearBlessingGetArrTaskRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrid_.MergeFrom(from.arrid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActNewYearBlessingGetArrTaskRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActNewYearBlessingGetArrTaskRewardReq::CopyFrom(const TActNewYearBlessingGetArrTaskRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActNewYearBlessingGetArrTaskRewardReq::IsInitialized() const {

  return true;
}

void TActNewYearBlessingGetArrTaskRewardReq::Swap(TActNewYearBlessingGetArrTaskRewardReq* other) {
  if (other != this) {
    arrid_.Swap(&other->arrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActNewYearBlessingGetArrTaskRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActNewYearBlessingGetArrTaskRewardReq_descriptor_;
  metadata.reflection = TActNewYearBlessingGetArrTaskRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActNewYearBlessingGetArrLuckRewardReq::kArrIdFieldNumber;
#endif  // !_MSC_VER

TActNewYearBlessingGetArrLuckRewardReq::TActNewYearBlessingGetArrLuckRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActNewYearBlessingGetArrLuckRewardReq)
}

void TActNewYearBlessingGetArrLuckRewardReq::InitAsDefaultInstance() {
}

TActNewYearBlessingGetArrLuckRewardReq::TActNewYearBlessingGetArrLuckRewardReq(const TActNewYearBlessingGetArrLuckRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActNewYearBlessingGetArrLuckRewardReq)
}

void TActNewYearBlessingGetArrLuckRewardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActNewYearBlessingGetArrLuckRewardReq::~TActNewYearBlessingGetArrLuckRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActNewYearBlessingGetArrLuckRewardReq)
  SharedDtor();
}

void TActNewYearBlessingGetArrLuckRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActNewYearBlessingGetArrLuckRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActNewYearBlessingGetArrLuckRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActNewYearBlessingGetArrLuckRewardReq_descriptor_;
}

const TActNewYearBlessingGetArrLuckRewardReq& TActNewYearBlessingGetArrLuckRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActNewYearBlessing_2eproto();
  return *default_instance_;
}

TActNewYearBlessingGetArrLuckRewardReq* TActNewYearBlessingGetArrLuckRewardReq::default_instance_ = NULL;

TActNewYearBlessingGetArrLuckRewardReq* TActNewYearBlessingGetArrLuckRewardReq::New() const {
  return new TActNewYearBlessingGetArrLuckRewardReq;
}

void TActNewYearBlessingGetArrLuckRewardReq::Clear() {
  arrid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActNewYearBlessingGetArrLuckRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActNewYearBlessingGetArrLuckRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ArrId = 1;
      case 1: {
        if (tag == 8) {
         parse_ArrId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_arrid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arrid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ArrId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActNewYearBlessingGetArrLuckRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActNewYearBlessingGetArrLuckRewardReq)
  return false;
#undef DO_
}

void TActNewYearBlessingGetArrLuckRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActNewYearBlessingGetArrLuckRewardReq)
  // repeated uint32 ArrId = 1;
  for (int i = 0; i < this->arrid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->arrid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActNewYearBlessingGetArrLuckRewardReq)
}

::google::protobuf::uint8* TActNewYearBlessingGetArrLuckRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActNewYearBlessingGetArrLuckRewardReq)
  // repeated uint32 ArrId = 1;
  for (int i = 0; i < this->arrid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->arrid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActNewYearBlessingGetArrLuckRewardReq)
  return target;
}

int TActNewYearBlessingGetArrLuckRewardReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 ArrId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arrid(i));
    }
    total_size += 1 * this->arrid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActNewYearBlessingGetArrLuckRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActNewYearBlessingGetArrLuckRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActNewYearBlessingGetArrLuckRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActNewYearBlessingGetArrLuckRewardReq::MergeFrom(const TActNewYearBlessingGetArrLuckRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrid_.MergeFrom(from.arrid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActNewYearBlessingGetArrLuckRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActNewYearBlessingGetArrLuckRewardReq::CopyFrom(const TActNewYearBlessingGetArrLuckRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActNewYearBlessingGetArrLuckRewardReq::IsInitialized() const {

  return true;
}

void TActNewYearBlessingGetArrLuckRewardReq::Swap(TActNewYearBlessingGetArrLuckRewardReq* other) {
  if (other != this) {
    arrid_.Swap(&other->arrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActNewYearBlessingGetArrLuckRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActNewYearBlessingGetArrLuckRewardReq_descriptor_;
  metadata.reflection = TActNewYearBlessingGetArrLuckRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActNewYearBlessingGetArrLuckRewardRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActNewYearBlessingGetArrLuckRewardRsp::TActNewYearBlessingGetArrLuckRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActNewYearBlessingGetArrLuckRewardRsp)
}

void TActNewYearBlessingGetArrLuckRewardRsp::InitAsDefaultInstance() {
}

TActNewYearBlessingGetArrLuckRewardRsp::TActNewYearBlessingGetArrLuckRewardRsp(const TActNewYearBlessingGetArrLuckRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActNewYearBlessingGetArrLuckRewardRsp)
}

void TActNewYearBlessingGetArrLuckRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActNewYearBlessingGetArrLuckRewardRsp::~TActNewYearBlessingGetArrLuckRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TActNewYearBlessingGetArrLuckRewardRsp)
  SharedDtor();
}

void TActNewYearBlessingGetArrLuckRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActNewYearBlessingGetArrLuckRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActNewYearBlessingGetArrLuckRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActNewYearBlessingGetArrLuckRewardRsp_descriptor_;
}

const TActNewYearBlessingGetArrLuckRewardRsp& TActNewYearBlessingGetArrLuckRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActNewYearBlessing_2eproto();
  return *default_instance_;
}

TActNewYearBlessingGetArrLuckRewardRsp* TActNewYearBlessingGetArrLuckRewardRsp::default_instance_ = NULL;

TActNewYearBlessingGetArrLuckRewardRsp* TActNewYearBlessingGetArrLuckRewardRsp::New() const {
  return new TActNewYearBlessingGetArrLuckRewardRsp;
}

void TActNewYearBlessingGetArrLuckRewardRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActNewYearBlessingGetArrLuckRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActNewYearBlessingGetArrLuckRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActNewYearBlessingGetArrLuckRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActNewYearBlessingGetArrLuckRewardRsp)
  return false;
#undef DO_
}

void TActNewYearBlessingGetArrLuckRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActNewYearBlessingGetArrLuckRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActNewYearBlessingGetArrLuckRewardRsp)
}

::google::protobuf::uint8* TActNewYearBlessingGetArrLuckRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActNewYearBlessingGetArrLuckRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActNewYearBlessingGetArrLuckRewardRsp)
  return target;
}

int TActNewYearBlessingGetArrLuckRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActNewYearBlessingGetArrLuckRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActNewYearBlessingGetArrLuckRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActNewYearBlessingGetArrLuckRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActNewYearBlessingGetArrLuckRewardRsp::MergeFrom(const TActNewYearBlessingGetArrLuckRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActNewYearBlessingGetArrLuckRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActNewYearBlessingGetArrLuckRewardRsp::CopyFrom(const TActNewYearBlessingGetArrLuckRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActNewYearBlessingGetArrLuckRewardRsp::IsInitialized() const {

  return true;
}

void TActNewYearBlessingGetArrLuckRewardRsp::Swap(TActNewYearBlessingGetArrLuckRewardRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActNewYearBlessingGetArrLuckRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActNewYearBlessingGetArrLuckRewardRsp_descriptor_;
  metadata.reflection = TActNewYearBlessingGetArrLuckRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActNewYearBlessingDrawRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActNewYearBlessingDrawRsp::TActNewYearBlessingDrawRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActNewYearBlessingDrawRsp)
}

void TActNewYearBlessingDrawRsp::InitAsDefaultInstance() {
}

TActNewYearBlessingDrawRsp::TActNewYearBlessingDrawRsp(const TActNewYearBlessingDrawRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActNewYearBlessingDrawRsp)
}

void TActNewYearBlessingDrawRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActNewYearBlessingDrawRsp::~TActNewYearBlessingDrawRsp() {
  // @@protoc_insertion_point(destructor:pb.TActNewYearBlessingDrawRsp)
  SharedDtor();
}

void TActNewYearBlessingDrawRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActNewYearBlessingDrawRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActNewYearBlessingDrawRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActNewYearBlessingDrawRsp_descriptor_;
}

const TActNewYearBlessingDrawRsp& TActNewYearBlessingDrawRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActNewYearBlessing_2eproto();
  return *default_instance_;
}

TActNewYearBlessingDrawRsp* TActNewYearBlessingDrawRsp::default_instance_ = NULL;

TActNewYearBlessingDrawRsp* TActNewYearBlessingDrawRsp::New() const {
  return new TActNewYearBlessingDrawRsp;
}

void TActNewYearBlessingDrawRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActNewYearBlessingDrawRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActNewYearBlessingDrawRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActNewYearBlessingDrawRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActNewYearBlessingDrawRsp)
  return false;
#undef DO_
}

void TActNewYearBlessingDrawRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActNewYearBlessingDrawRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActNewYearBlessingDrawRsp)
}

::google::protobuf::uint8* TActNewYearBlessingDrawRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActNewYearBlessingDrawRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActNewYearBlessingDrawRsp)
  return target;
}

int TActNewYearBlessingDrawRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActNewYearBlessingDrawRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActNewYearBlessingDrawRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActNewYearBlessingDrawRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActNewYearBlessingDrawRsp::MergeFrom(const TActNewYearBlessingDrawRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActNewYearBlessingDrawRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActNewYearBlessingDrawRsp::CopyFrom(const TActNewYearBlessingDrawRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActNewYearBlessingDrawRsp::IsInitialized() const {

  return true;
}

void TActNewYearBlessingDrawRsp::Swap(TActNewYearBlessingDrawRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActNewYearBlessingDrawRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActNewYearBlessingDrawRsp_descriptor_;
  metadata.reflection = TActNewYearBlessingDrawRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActNewYearBlessingNotify::kArrDayInfoFieldNumber;
#endif  // !_MSC_VER

TActNewYearBlessingNotify::TActNewYearBlessingNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActNewYearBlessingNotify)
}

void TActNewYearBlessingNotify::InitAsDefaultInstance() {
}

TActNewYearBlessingNotify::TActNewYearBlessingNotify(const TActNewYearBlessingNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActNewYearBlessingNotify)
}

void TActNewYearBlessingNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActNewYearBlessingNotify::~TActNewYearBlessingNotify() {
  // @@protoc_insertion_point(destructor:pb.TActNewYearBlessingNotify)
  SharedDtor();
}

void TActNewYearBlessingNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActNewYearBlessingNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActNewYearBlessingNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActNewYearBlessingNotify_descriptor_;
}

const TActNewYearBlessingNotify& TActNewYearBlessingNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActNewYearBlessing_2eproto();
  return *default_instance_;
}

TActNewYearBlessingNotify* TActNewYearBlessingNotify::default_instance_ = NULL;

TActNewYearBlessingNotify* TActNewYearBlessingNotify::New() const {
  return new TActNewYearBlessingNotify;
}

void TActNewYearBlessingNotify::Clear() {
  arrdayinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActNewYearBlessingNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActNewYearBlessingNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActNewYearBlessingDayInfo ArrDayInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrDayInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrdayinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrDayInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActNewYearBlessingNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActNewYearBlessingNotify)
  return false;
#undef DO_
}

void TActNewYearBlessingNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActNewYearBlessingNotify)
  // repeated .pb.TActNewYearBlessingDayInfo ArrDayInfo = 1;
  for (int i = 0; i < this->arrdayinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrdayinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActNewYearBlessingNotify)
}

::google::protobuf::uint8* TActNewYearBlessingNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActNewYearBlessingNotify)
  // repeated .pb.TActNewYearBlessingDayInfo ArrDayInfo = 1;
  for (int i = 0; i < this->arrdayinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrdayinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActNewYearBlessingNotify)
  return target;
}

int TActNewYearBlessingNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActNewYearBlessingDayInfo ArrDayInfo = 1;
  total_size += 1 * this->arrdayinfo_size();
  for (int i = 0; i < this->arrdayinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrdayinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActNewYearBlessingNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActNewYearBlessingNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActNewYearBlessingNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActNewYearBlessingNotify::MergeFrom(const TActNewYearBlessingNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrdayinfo_.MergeFrom(from.arrdayinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActNewYearBlessingNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActNewYearBlessingNotify::CopyFrom(const TActNewYearBlessingNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActNewYearBlessingNotify::IsInitialized() const {

  return true;
}

void TActNewYearBlessingNotify::Swap(TActNewYearBlessingNotify* other) {
  if (other != this) {
    arrdayinfo_.Swap(&other->arrdayinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActNewYearBlessingNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActNewYearBlessingNotify_descriptor_;
  metadata.reflection = TActNewYearBlessingNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
