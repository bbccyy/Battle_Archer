// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/AdventureTower.proto

#ifndef PROTOBUF_net_2fAdventureTower_2eproto__INCLUDED
#define PROTOBUF_net_2fAdventureTower_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/AdventureMap.pb.h"
#include "net/AdventureBase.pb.h"
#include "net/Battle.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

class TAdventureTowerGetInfoRsp;
class TAdventureTowerSimpleMapInfo;
class TAdventureTowerBuffBox;
class TAdventureTowerMapInfo;
class TAdventureTowerTavernInfo;
class TAdventureTowerEnterMapReq;
class TAdventureTowerHeroBattleInfo;
class TAdventureTowerHeroStatus;
class TAdventureTowerEnterMapRsp;
class TAdventureTowerQuitMapReq;
class TAdventureTowerSetSquadReq;
class TAdventureTowerTriggerEventReq;
class TAdventureTowerEventRet;
class TAdventureTowerTriggerEventRsp;
class TAdventureTowerStartBattleReq;
class TAdventureTowerStartBattleRsp;
class TAdventureTowerReportBattleReq;
class TAdventureTowerReportBattleRsp;
class TAdventureTowerReportPosReq;
class TAdventureTowerPassBlocksReq;
class TAdventureTowerPos;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TAdventureTowerGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerGetInfoRsp : public ::google::protobuf::Message {
 public:
  TAdventureTowerGetInfoRsp();
  virtual ~TAdventureTowerGetInfoRsp();

  TAdventureTowerGetInfoRsp(const TAdventureTowerGetInfoRsp& from);

  inline TAdventureTowerGetInfoRsp& operator=(const TAdventureTowerGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerGetInfoRsp& default_instance();

  void Swap(TAdventureTowerGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TAdventureTowerGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerGetInfoRsp& from);
  void MergeFrom(const TAdventureTowerGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAdventureTowerSimpleMapInfo MaxMapInfo = 1;
  inline bool has_maxmapinfo() const;
  inline void clear_maxmapinfo();
  static const int kMaxMapInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerGetInfoRsp</name>
  	<Function>
  		<name>maxmapinfo</name>
  		<replaceName>MaxMapInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxmapinfo</name>
  		<replaceName>MaxMapInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_maxmapinfo</name>
  		<replaceName>MaxMapInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxmapinfo</name>
  		<replaceName>MaxMapInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureTowerSimpleMapInfo& maxmapinfo() const;
  inline ::pb::TAdventureTowerSimpleMapInfo* mutable_maxmapinfo();
  inline ::pb::TAdventureTowerSimpleMapInfo* release_maxmapinfo();
  inline void set_allocated_maxmapinfo(::pb::TAdventureTowerSimpleMapInfo* maxmapinfo);

  // optional uint32 CurMapId = 2;
  inline bool has_curmapid() const;
  inline void clear_curmapid();
  static const int kCurMapIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerGetInfoRsp</name>
  	<Function>
  		<name>curmapid</name>
  		<replaceName>CurMapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curmapid</name>
  		<replaceName>CurMapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curmapid</name>
  		<replaceName>CurMapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curmapid() const;
  inline void set_curmapid(::google::protobuf::uint32 value);

  // optional uint32 MaxPassedMapId = 3;
  inline bool has_maxpassedmapid() const;
  inline void clear_maxpassedmapid();
  static const int kMaxPassedMapIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerGetInfoRsp</name>
  	<Function>
  		<name>maxpassedmapid</name>
  		<replaceName>MaxPassedMapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxpassedmapid</name>
  		<replaceName>MaxPassedMapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxpassedmapid</name>
  		<replaceName>MaxPassedMapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxpassedmapid() const;
  inline void set_maxpassedmapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerGetInfoRsp)
 private:
  inline void set_has_maxmapinfo();
  inline void clear_has_maxmapinfo();
  inline void set_has_curmapid();
  inline void clear_has_curmapid();
  inline void set_has_maxpassedmapid();
  inline void clear_has_maxpassedmapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAdventureTowerSimpleMapInfo* maxmapinfo_;
  ::google::protobuf::uint32 curmapid_;
  ::google::protobuf::uint32 maxpassedmapid_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerSimpleMapInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerSimpleMapInfo : public ::google::protobuf::Message {
 public:
  TAdventureTowerSimpleMapInfo();
  virtual ~TAdventureTowerSimpleMapInfo();

  TAdventureTowerSimpleMapInfo(const TAdventureTowerSimpleMapInfo& from);

  inline TAdventureTowerSimpleMapInfo& operator=(const TAdventureTowerSimpleMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerSimpleMapInfo& default_instance();

  void Swap(TAdventureTowerSimpleMapInfo* other);

  // implements Message ----------------------------------------------

  TAdventureTowerSimpleMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerSimpleMapInfo& from);
  void MergeFrom(const TAdventureTowerSimpleMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerSimpleMapInfo</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // repeated uint32 ReceivedBoxId = 2;
  inline int receivedboxid_size() const;
  inline void clear_receivedboxid();
  static const int kReceivedBoxIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerSimpleMapInfo</name>
  	<Function>
  		<name>receivedboxid</name>
  		<replaceName>ReceivedBoxId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_receivedboxid</name>
  		<replaceName>ReceivedBoxId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_receivedboxid</name>
  		<replaceName>ReceivedBoxId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receivedboxid</name>
  		<replaceName>ReceivedBoxId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>receivedboxid_size</name>
  		<replaceName>ReceivedBoxId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 receivedboxid(int index) const;
  inline void set_receivedboxid(int index, ::google::protobuf::uint32 value);
  inline void add_receivedboxid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      receivedboxid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_receivedboxid();

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerSimpleMapInfo)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > receivedboxid_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerSimpleMapInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerBuffBox</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerBuffBox : public ::google::protobuf::Message {
 public:
  TAdventureTowerBuffBox();
  virtual ~TAdventureTowerBuffBox();

  TAdventureTowerBuffBox(const TAdventureTowerBuffBox& from);

  inline TAdventureTowerBuffBox& operator=(const TAdventureTowerBuffBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerBuffBox& default_instance();

  void Swap(TAdventureTowerBuffBox* other);

  // implements Message ----------------------------------------------

  TAdventureTowerBuffBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerBuffBox& from);
  void MergeFrom(const TAdventureTowerBuffBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAdventureTowerPos BuffBoxPos = 1;
  inline bool has_buffboxpos() const;
  inline void clear_buffboxpos();
  static const int kBuffBoxPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerBuffBox</name>
  	<Function>
  		<name>buffboxpos</name>
  		<replaceName>BuffBoxPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buffboxpos</name>
  		<replaceName>BuffBoxPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_buffboxpos</name>
  		<replaceName>BuffBoxPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffboxpos</name>
  		<replaceName>BuffBoxPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureTowerPos& buffboxpos() const;
  inline ::pb::TAdventureTowerPos* mutable_buffboxpos();
  inline ::pb::TAdventureTowerPos* release_buffboxpos();
  inline void set_allocated_buffboxpos(::pb::TAdventureTowerPos* buffboxpos);

  // repeated uint32 BuffIdArr = 2;
  inline int buffidarr_size() const;
  inline void clear_buffidarr();
  static const int kBuffIdArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerBuffBox</name>
  	<Function>
  		<name>buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buffidarr_size</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buffidarr(int index) const;
  inline void set_buffidarr(int index, ::google::protobuf::uint32 value);
  inline void add_buffidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      buffidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_buffidarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerBuffBox)
 private:
  inline void set_has_buffboxpos();
  inline void clear_has_buffboxpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAdventureTowerPos* buffboxpos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > buffidarr_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerBuffBox* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerMapInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerMapInfo : public ::google::protobuf::Message {
 public:
  TAdventureTowerMapInfo();
  virtual ~TAdventureTowerMapInfo();

  TAdventureTowerMapInfo(const TAdventureTowerMapInfo& from);

  inline TAdventureTowerMapInfo& operator=(const TAdventureTowerMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerMapInfo& default_instance();

  void Swap(TAdventureTowerMapInfo* other);

  // implements Message ----------------------------------------------

  TAdventureTowerMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerMapInfo& from);
  void MergeFrom(const TAdventureTowerMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerIndex = 1;
  inline bool has_layerindex() const;
  inline void clear_layerindex();
  static const int kLayerIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerMapInfo</name>
  	<Function>
  		<name>layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerindex() const;
  inline void set_layerindex(::google::protobuf::uint32 value);

  // optional int32 PosX = 2;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerMapInfo</name>
  	<Function>
  		<name>posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // optional int32 PosY = 3;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerMapInfo</name>
  	<Function>
  		<name>posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // optional .pb.AdventureMap BaseMapInfo = 4;
  inline bool has_basemapinfo() const;
  inline void clear_basemapinfo();
  static const int kBaseMapInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerMapInfo</name>
  	<Function>
  		<name>basemapinfo</name>
  		<replaceName>BaseMapInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_basemapinfo</name>
  		<replaceName>BaseMapInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_basemapinfo</name>
  		<replaceName>BaseMapInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_basemapinfo</name>
  		<replaceName>BaseMapInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AdventureMap& basemapinfo() const;
  inline ::pb::AdventureMap* mutable_basemapinfo();
  inline ::pb::AdventureMap* release_basemapinfo();
  inline void set_allocated_basemapinfo(::pb::AdventureMap* basemapinfo);

  // repeated .pb.TAdventureTowerBuffBox BuffBoxArr = 5;
  inline int buffboxarr_size() const;
  inline void clear_buffboxarr();
  static const int kBuffBoxArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerMapInfo</name>
  	<Function>
  		<name>buffboxarr</name>
  		<replaceName>BuffBoxArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buffboxarr</name>
  		<replaceName>BuffBoxArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buffboxarr</name>
  		<replaceName>BuffBoxArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffboxarr</name>
  		<replaceName>BuffBoxArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buffboxarr_size</name>
  		<replaceName>BuffBoxArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureTowerBuffBox& buffboxarr(int index) const;
  inline ::pb::TAdventureTowerBuffBox* mutable_buffboxarr(int index);
  inline ::pb::TAdventureTowerBuffBox* add_buffboxarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerBuffBox >&
      buffboxarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerBuffBox >*
      mutable_buffboxarr();

  // repeated .pb.TAdventureTowerTavernInfo TavernArr = 6;
  inline int tavernarr_size() const;
  inline void clear_tavernarr();
  static const int kTavernArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerMapInfo</name>
  	<Function>
  		<name>tavernarr</name>
  		<replaceName>TavernArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_tavernarr</name>
  		<replaceName>TavernArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_tavernarr</name>
  		<replaceName>TavernArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tavernarr</name>
  		<replaceName>TavernArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>tavernarr_size</name>
  		<replaceName>TavernArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureTowerTavernInfo& tavernarr(int index) const;
  inline ::pb::TAdventureTowerTavernInfo* mutable_tavernarr(int index);
  inline ::pb::TAdventureTowerTavernInfo* add_tavernarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerTavernInfo >&
      tavernarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerTavernInfo >*
      mutable_tavernarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerMapInfo)
 private:
  inline void set_has_layerindex();
  inline void clear_has_layerindex();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_basemapinfo();
  inline void clear_has_basemapinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 layerindex_;
  ::google::protobuf::int32 posx_;
  ::pb::AdventureMap* basemapinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerBuffBox > buffboxarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerTavernInfo > tavernarr_;
  ::google::protobuf::int32 posy_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerMapInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerTavernInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerTavernInfo : public ::google::protobuf::Message {
 public:
  TAdventureTowerTavernInfo();
  virtual ~TAdventureTowerTavernInfo();

  TAdventureTowerTavernInfo(const TAdventureTowerTavernInfo& from);

  inline TAdventureTowerTavernInfo& operator=(const TAdventureTowerTavernInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerTavernInfo& default_instance();

  void Swap(TAdventureTowerTavernInfo* other);

  // implements Message ----------------------------------------------

  TAdventureTowerTavernInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerTavernInfo& from);
  void MergeFrom(const TAdventureTowerTavernInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAdventureTowerPos TavernPos = 1;
  inline bool has_tavernpos() const;
  inline void clear_tavernpos();
  static const int kTavernPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerTavernInfo</name>
  	<Function>
  		<name>tavernpos</name>
  		<replaceName>TavernPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tavernpos</name>
  		<replaceName>TavernPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_tavernpos</name>
  		<replaceName>TavernPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tavernpos</name>
  		<replaceName>TavernPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureTowerPos& tavernpos() const;
  inline ::pb::TAdventureTowerPos* mutable_tavernpos();
  inline ::pb::TAdventureTowerPos* release_tavernpos();
  inline void set_allocated_tavernpos(::pb::TAdventureTowerPos* tavernpos);

  // repeated uint32 TavernHeroArr = 2;
  inline int tavernheroarr_size() const;
  inline void clear_tavernheroarr();
  static const int kTavernHeroArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerTavernInfo</name>
  	<Function>
  		<name>tavernheroarr</name>
  		<replaceName>TavernHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_tavernheroarr</name>
  		<replaceName>TavernHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_tavernheroarr</name>
  		<replaceName>TavernHeroArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tavernheroarr</name>
  		<replaceName>TavernHeroArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>tavernheroarr_size</name>
  		<replaceName>TavernHeroArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tavernheroarr(int index) const;
  inline void set_tavernheroarr(int index, ::google::protobuf::uint32 value);
  inline void add_tavernheroarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tavernheroarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tavernheroarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerTavernInfo)
 private:
  inline void set_has_tavernpos();
  inline void clear_has_tavernpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAdventureTowerPos* tavernpos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tavernheroarr_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerTavernInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerEnterMapReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerEnterMapReq : public ::google::protobuf::Message {
 public:
  TAdventureTowerEnterMapReq();
  virtual ~TAdventureTowerEnterMapReq();

  TAdventureTowerEnterMapReq(const TAdventureTowerEnterMapReq& from);

  inline TAdventureTowerEnterMapReq& operator=(const TAdventureTowerEnterMapReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerEnterMapReq& default_instance();

  void Swap(TAdventureTowerEnterMapReq* other);

  // implements Message ----------------------------------------------

  TAdventureTowerEnterMapReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerEnterMapReq& from);
  void MergeFrom(const TAdventureTowerEnterMapReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerEnterMapReq</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerEnterMapReq)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerEnterMapReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerHeroBattleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerHeroBattleInfo : public ::google::protobuf::Message {
 public:
  TAdventureTowerHeroBattleInfo();
  virtual ~TAdventureTowerHeroBattleInfo();

  TAdventureTowerHeroBattleInfo(const TAdventureTowerHeroBattleInfo& from);

  inline TAdventureTowerHeroBattleInfo& operator=(const TAdventureTowerHeroBattleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerHeroBattleInfo& default_instance();

  void Swap(TAdventureTowerHeroBattleInfo* other);

  // implements Message ----------------------------------------------

  TAdventureTowerHeroBattleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerHeroBattleInfo& from);
  void MergeFrom(const TAdventureTowerHeroBattleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUnitInfo Unit = 1;
  inline bool has_unit() const;
  inline void clear_unit();
  static const int kUnitFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerHeroBattleInfo</name>
  	<Function>
  		<name>unit</name>
  		<replaceName>Unit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_unit</name>
  		<replaceName>Unit</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_unit</name>
  		<replaceName>Unit</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unit</name>
  		<replaceName>Unit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitInfo& unit() const;
  inline ::pb::TUnitInfo* mutable_unit();
  inline ::pb::TUnitInfo* release_unit();
  inline void set_allocated_unit(::pb::TUnitInfo* unit);

  // optional uint64 MaxHp = 2;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerHeroBattleInfo</name>
  	<Function>
  		<name>maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerHeroBattleInfo)
 private:
  inline void set_has_unit();
  inline void clear_has_unit();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUnitInfo* unit_;
  ::google::protobuf::uint64 maxhp_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerHeroBattleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerHeroStatus</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerHeroStatus : public ::google::protobuf::Message {
 public:
  TAdventureTowerHeroStatus();
  virtual ~TAdventureTowerHeroStatus();

  TAdventureTowerHeroStatus(const TAdventureTowerHeroStatus& from);

  inline TAdventureTowerHeroStatus& operator=(const TAdventureTowerHeroStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerHeroStatus& default_instance();

  void Swap(TAdventureTowerHeroStatus* other);

  // implements Message ----------------------------------------------

  TAdventureTowerHeroStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerHeroStatus& from);
  void MergeFrom(const TAdventureTowerHeroStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 HeroId = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerHeroStatus</name>
  	<Function>
  		<name>heroid</name>
  		<replaceName>HeroId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_heroid</name>
  		<replaceName>HeroId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_heroid</name>
  		<replaceName>HeroId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint64 CurHp = 2;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHpFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerHeroStatus</name>
  	<Function>
  		<name>curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 curhp() const;
  inline void set_curhp(::google::protobuf::uint64 value);

  // optional uint64 MaxHp = 3;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerHeroStatus</name>
  	<Function>
  		<name>maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint64 value);

  // optional uint64 CurRage = 4;
  inline bool has_currage() const;
  inline void clear_currage();
  static const int kCurRageFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerHeroStatus</name>
  	<Function>
  		<name>currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 currage() const;
  inline void set_currage(::google::protobuf::uint64 value);

  // optional uint64 MaxRage = 5;
  inline bool has_maxrage() const;
  inline void clear_maxrage();
  static const int kMaxRageFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerHeroStatus</name>
  	<Function>
  		<name>maxrage</name>
  		<replaceName>MaxRage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxrage</name>
  		<replaceName>MaxRage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxrage</name>
  		<replaceName>MaxRage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxrage() const;
  inline void set_maxrage(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerHeroStatus)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_currage();
  inline void clear_has_currage();
  inline void set_has_maxrage();
  inline void clear_has_maxrage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 curhp_;
  ::google::protobuf::uint64 maxhp_;
  ::google::protobuf::uint64 currage_;
  ::google::protobuf::uint64 maxrage_;
  ::google::protobuf::uint32 heroid_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerHeroStatus* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerEnterMapRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerEnterMapRsp : public ::google::protobuf::Message {
 public:
  TAdventureTowerEnterMapRsp();
  virtual ~TAdventureTowerEnterMapRsp();

  TAdventureTowerEnterMapRsp(const TAdventureTowerEnterMapRsp& from);

  inline TAdventureTowerEnterMapRsp& operator=(const TAdventureTowerEnterMapRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerEnterMapRsp& default_instance();

  void Swap(TAdventureTowerEnterMapRsp* other);

  // implements Message ----------------------------------------------

  TAdventureTowerEnterMapRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerEnterMapRsp& from);
  void MergeFrom(const TAdventureTowerEnterMapRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAdventureTowerMapInfo MapInfo = 1;
  inline bool has_mapinfo() const;
  inline void clear_mapinfo();
  static const int kMapInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerEnterMapRsp</name>
  	<Function>
  		<name>mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureTowerMapInfo& mapinfo() const;
  inline ::pb::TAdventureTowerMapInfo* mutable_mapinfo();
  inline ::pb::TAdventureTowerMapInfo* release_mapinfo();
  inline void set_allocated_mapinfo(::pb::TAdventureTowerMapInfo* mapinfo);

  // repeated uint32 BuffIdArr = 2;
  inline int buffidarr_size() const;
  inline void clear_buffidarr();
  static const int kBuffIdArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerEnterMapRsp</name>
  	<Function>
  		<name>buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buffidarr_size</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buffidarr(int index) const;
  inline void set_buffidarr(int index, ::google::protobuf::uint32 value);
  inline void add_buffidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      buffidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_buffidarr();

  // repeated .pb.TAdventureTowerHeroStatus HeroStatusArr = 3;
  inline int herostatusarr_size() const;
  inline void clear_herostatusarr();
  static const int kHeroStatusArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerEnterMapRsp</name>
  	<Function>
  		<name>herostatusarr</name>
  		<replaceName>HeroStatusArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_herostatusarr</name>
  		<replaceName>HeroStatusArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_herostatusarr</name>
  		<replaceName>HeroStatusArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_herostatusarr</name>
  		<replaceName>HeroStatusArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>herostatusarr_size</name>
  		<replaceName>HeroStatusArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureTowerHeroStatus& herostatusarr(int index) const;
  inline ::pb::TAdventureTowerHeroStatus* mutable_herostatusarr(int index);
  inline ::pb::TAdventureTowerHeroStatus* add_herostatusarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroStatus >&
      herostatusarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroStatus >*
      mutable_herostatusarr();

  // repeated uint32 SquadHeroArr = 4;
  inline int squadheroarr_size() const;
  inline void clear_squadheroarr();
  static const int kSquadHeroArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerEnterMapRsp</name>
  	<Function>
  		<name>squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squadheroarr_size</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 squadheroarr(int index) const;
  inline void set_squadheroarr(int index, ::google::protobuf::uint32 value);
  inline void add_squadheroarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      squadheroarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_squadheroarr();

  // repeated uint32 TemporaryHeroArr = 5;
  inline int temporaryheroarr_size() const;
  inline void clear_temporaryheroarr();
  static const int kTemporaryHeroArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerEnterMapRsp</name>
  	<Function>
  		<name>temporaryheroarr</name>
  		<replaceName>TemporaryHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_temporaryheroarr</name>
  		<replaceName>TemporaryHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_temporaryheroarr</name>
  		<replaceName>TemporaryHeroArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_temporaryheroarr</name>
  		<replaceName>TemporaryHeroArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>temporaryheroarr_size</name>
  		<replaceName>TemporaryHeroArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 temporaryheroarr(int index) const;
  inline void set_temporaryheroarr(int index, ::google::protobuf::uint32 value);
  inline void add_temporaryheroarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      temporaryheroarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_temporaryheroarr();

  // repeated .pb.TAdventureMonsterInfo MonsterInfoArr = 6;
  inline int monsterinfoarr_size() const;
  inline void clear_monsterinfoarr();
  static const int kMonsterInfoArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerEnterMapRsp</name>
  	<Function>
  		<name>monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>monsterinfoarr_size</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureMonsterInfo& monsterinfoarr(int index) const;
  inline ::pb::TAdventureMonsterInfo* mutable_monsterinfoarr(int index);
  inline ::pb::TAdventureMonsterInfo* add_monsterinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMonsterInfo >&
      monsterinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMonsterInfo >*
      mutable_monsterinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerEnterMapRsp)
 private:
  inline void set_has_mapinfo();
  inline void clear_has_mapinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAdventureTowerMapInfo* mapinfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > buffidarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroStatus > herostatusarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > squadheroarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > temporaryheroarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMonsterInfo > monsterinfoarr_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerEnterMapRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerQuitMapReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerQuitMapReq : public ::google::protobuf::Message {
 public:
  TAdventureTowerQuitMapReq();
  virtual ~TAdventureTowerQuitMapReq();

  TAdventureTowerQuitMapReq(const TAdventureTowerQuitMapReq& from);

  inline TAdventureTowerQuitMapReq& operator=(const TAdventureTowerQuitMapReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerQuitMapReq& default_instance();

  void Swap(TAdventureTowerQuitMapReq* other);

  // implements Message ----------------------------------------------

  TAdventureTowerQuitMapReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerQuitMapReq& from);
  void MergeFrom(const TAdventureTowerQuitMapReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerQuitMapReq</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerQuitMapReq)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerQuitMapReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerSetSquadReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerSetSquadReq : public ::google::protobuf::Message {
 public:
  TAdventureTowerSetSquadReq();
  virtual ~TAdventureTowerSetSquadReq();

  TAdventureTowerSetSquadReq(const TAdventureTowerSetSquadReq& from);

  inline TAdventureTowerSetSquadReq& operator=(const TAdventureTowerSetSquadReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerSetSquadReq& default_instance();

  void Swap(TAdventureTowerSetSquadReq* other);

  // implements Message ----------------------------------------------

  TAdventureTowerSetSquadReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerSetSquadReq& from);
  void MergeFrom(const TAdventureTowerSetSquadReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 SquadHeroArr = 1;
  inline int squadheroarr_size() const;
  inline void clear_squadheroarr();
  static const int kSquadHeroArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerSetSquadReq</name>
  	<Function>
  		<name>squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squadheroarr_size</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 squadheroarr(int index) const;
  inline void set_squadheroarr(int index, ::google::protobuf::uint32 value);
  inline void add_squadheroarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      squadheroarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_squadheroarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerSetSquadReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > squadheroarr_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerSetSquadReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerTriggerEventReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerTriggerEventReq : public ::google::protobuf::Message {
 public:
  TAdventureTowerTriggerEventReq();
  virtual ~TAdventureTowerTriggerEventReq();

  TAdventureTowerTriggerEventReq(const TAdventureTowerTriggerEventReq& from);

  inline TAdventureTowerTriggerEventReq& operator=(const TAdventureTowerTriggerEventReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerTriggerEventReq& default_instance();

  void Swap(TAdventureTowerTriggerEventReq* other);

  // implements Message ----------------------------------------------

  TAdventureTowerTriggerEventReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerTriggerEventReq& from);
  void MergeFrom(const TAdventureTowerTriggerEventReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerIndex = 1;
  inline bool has_layerindex() const;
  inline void clear_layerindex();
  static const int kLayerIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerTriggerEventReq</name>
  	<Function>
  		<name>layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerindex() const;
  inline void set_layerindex(::google::protobuf::uint32 value);

  // optional int32 PosX = 2;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerTriggerEventReq</name>
  	<Function>
  		<name>posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // optional int32 PosY = 3;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerTriggerEventReq</name>
  	<Function>
  		<name>posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // optional uint32 ChoseBuffIndex = 4;
  inline bool has_chosebuffindex() const;
  inline void clear_chosebuffindex();
  static const int kChoseBuffIndexFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerTriggerEventReq</name>
  	<Function>
  		<name>chosebuffindex</name>
  		<replaceName>ChoseBuffIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chosebuffindex</name>
  		<replaceName>ChoseBuffIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chosebuffindex</name>
  		<replaceName>ChoseBuffIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chosebuffindex() const;
  inline void set_chosebuffindex(::google::protobuf::uint32 value);

  // optional uint32 ChoseHeroIndex = 5;
  inline bool has_choseheroindex() const;
  inline void clear_choseheroindex();
  static const int kChoseHeroIndexFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerTriggerEventReq</name>
  	<Function>
  		<name>choseheroindex</name>
  		<replaceName>ChoseHeroIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_choseheroindex</name>
  		<replaceName>ChoseHeroIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_choseheroindex</name>
  		<replaceName>ChoseHeroIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 choseheroindex() const;
  inline void set_choseheroindex(::google::protobuf::uint32 value);

  // repeated uint32 EventOnHidArr = 6;
  inline int eventonhidarr_size() const;
  inline void clear_eventonhidarr();
  static const int kEventOnHidArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerTriggerEventReq</name>
  	<Function>
  		<name>eventonhidarr</name>
  		<replaceName>EventOnHidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_eventonhidarr</name>
  		<replaceName>EventOnHidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_eventonhidarr</name>
  		<replaceName>EventOnHidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eventonhidarr</name>
  		<replaceName>EventOnHidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>eventonhidarr_size</name>
  		<replaceName>EventOnHidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 eventonhidarr(int index) const;
  inline void set_eventonhidarr(int index, ::google::protobuf::uint32 value);
  inline void add_eventonhidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      eventonhidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_eventonhidarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerTriggerEventReq)
 private:
  inline void set_has_layerindex();
  inline void clear_has_layerindex();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_chosebuffindex();
  inline void clear_has_chosebuffindex();
  inline void set_has_choseheroindex();
  inline void clear_has_choseheroindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 layerindex_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::uint32 chosebuffindex_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > eventonhidarr_;
  ::google::protobuf::uint32 choseheroindex_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerTriggerEventReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerEventRet</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerEventRet : public ::google::protobuf::Message {
 public:
  TAdventureTowerEventRet();
  virtual ~TAdventureTowerEventRet();

  TAdventureTowerEventRet(const TAdventureTowerEventRet& from);

  inline TAdventureTowerEventRet& operator=(const TAdventureTowerEventRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerEventRet& default_instance();

  void Swap(TAdventureTowerEventRet* other);

  // implements Message ----------------------------------------------

  TAdventureTowerEventRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerEventRet& from);
  void MergeFrom(const TAdventureTowerEventRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BattleinfoId = 1;
  inline bool has_battleinfoid() const;
  inline void clear_battleinfoid();
  static const int kBattleinfoIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerEventRet</name>
  	<Function>
  		<name>battleinfoid</name>
  		<replaceName>BattleinfoId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleinfoid</name>
  		<replaceName>BattleinfoId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleinfoid</name>
  		<replaceName>BattleinfoId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleinfoid() const;
  inline void set_battleinfoid(::google::protobuf::uint32 value);

  // repeated uint32 InteractIdArr = 2;
  inline int interactidarr_size() const;
  inline void clear_interactidarr();
  static const int kInteractIdArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerEventRet</name>
  	<Function>
  		<name>interactidarr</name>
  		<replaceName>InteractIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_interactidarr</name>
  		<replaceName>InteractIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_interactidarr</name>
  		<replaceName>InteractIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_interactidarr</name>
  		<replaceName>InteractIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>interactidarr_size</name>
  		<replaceName>InteractIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 interactidarr(int index) const;
  inline void set_interactidarr(int index, ::google::protobuf::uint32 value);
  inline void add_interactidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      interactidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_interactidarr();

  // repeated .pb.TAdventureTowerHeroStatus HeroStatusArr = 3;
  inline int herostatusarr_size() const;
  inline void clear_herostatusarr();
  static const int kHeroStatusArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerEventRet</name>
  	<Function>
  		<name>herostatusarr</name>
  		<replaceName>HeroStatusArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_herostatusarr</name>
  		<replaceName>HeroStatusArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_herostatusarr</name>
  		<replaceName>HeroStatusArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_herostatusarr</name>
  		<replaceName>HeroStatusArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>herostatusarr_size</name>
  		<replaceName>HeroStatusArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureTowerHeroStatus& herostatusarr(int index) const;
  inline ::pb::TAdventureTowerHeroStatus* mutable_herostatusarr(int index);
  inline ::pb::TAdventureTowerHeroStatus* add_herostatusarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroStatus >&
      herostatusarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroStatus >*
      mutable_herostatusarr();

  // optional .pb.TAdventureBattleMonsterInfo MonsterInfo = 4;
  inline bool has_monsterinfo() const;
  inline void clear_monsterinfo();
  static const int kMonsterInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerEventRet</name>
  	<Function>
  		<name>monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureBattleMonsterInfo& monsterinfo() const;
  inline ::pb::TAdventureBattleMonsterInfo* mutable_monsterinfo();
  inline ::pb::TAdventureBattleMonsterInfo* release_monsterinfo();
  inline void set_allocated_monsterinfo(::pb::TAdventureBattleMonsterInfo* monsterinfo);

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerEventRet)
 private:
  inline void set_has_battleinfoid();
  inline void clear_has_battleinfoid();
  inline void set_has_monsterinfo();
  inline void clear_has_monsterinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > interactidarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroStatus > herostatusarr_;
  ::pb::TAdventureBattleMonsterInfo* monsterinfo_;
  ::google::protobuf::uint32 battleinfoid_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerEventRet* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerTriggerEventRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerTriggerEventRsp : public ::google::protobuf::Message {
 public:
  TAdventureTowerTriggerEventRsp();
  virtual ~TAdventureTowerTriggerEventRsp();

  TAdventureTowerTriggerEventRsp(const TAdventureTowerTriggerEventRsp& from);

  inline TAdventureTowerTriggerEventRsp& operator=(const TAdventureTowerTriggerEventRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerTriggerEventRsp& default_instance();

  void Swap(TAdventureTowerTriggerEventRsp* other);

  // implements Message ----------------------------------------------

  TAdventureTowerTriggerEventRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerTriggerEventRsp& from);
  void MergeFrom(const TAdventureTowerTriggerEventRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EEventStatus EventStatus = 1;
  inline bool has_eventstatus() const;
  inline void clear_eventstatus();
  static const int kEventStatusFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerTriggerEventRsp</name>
  	<Function>
  		<name>eventstatus</name>
  		<replaceName>EventStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eventstatus</name>
  		<replaceName>EventStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eventstatus</name>
  		<replaceName>EventStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EEventStatus eventstatus() const;
  inline void set_eventstatus(::pb::EEventStatus value);

  // optional .pb.TAdventureTowerEventRet EventRet = 2;
  inline bool has_eventret() const;
  inline void clear_eventret();
  static const int kEventRetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerTriggerEventRsp</name>
  	<Function>
  		<name>eventret</name>
  		<replaceName>EventRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eventret</name>
  		<replaceName>EventRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_eventret</name>
  		<replaceName>EventRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eventret</name>
  		<replaceName>EventRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureTowerEventRet& eventret() const;
  inline ::pb::TAdventureTowerEventRet* mutable_eventret();
  inline ::pb::TAdventureTowerEventRet* release_eventret();
  inline void set_allocated_eventret(::pb::TAdventureTowerEventRet* eventret);

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerTriggerEventRsp)
 private:
  inline void set_has_eventstatus();
  inline void clear_has_eventstatus();
  inline void set_has_eventret();
  inline void clear_has_eventret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAdventureTowerEventRet* eventret_;
  int eventstatus_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerTriggerEventRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerStartBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerStartBattleReq : public ::google::protobuf::Message {
 public:
  TAdventureTowerStartBattleReq();
  virtual ~TAdventureTowerStartBattleReq();

  TAdventureTowerStartBattleReq(const TAdventureTowerStartBattleReq& from);

  inline TAdventureTowerStartBattleReq& operator=(const TAdventureTowerStartBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerStartBattleReq& default_instance();

  void Swap(TAdventureTowerStartBattleReq* other);

  // implements Message ----------------------------------------------

  TAdventureTowerStartBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerStartBattleReq& from);
  void MergeFrom(const TAdventureTowerStartBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAdventureTowerPos BattlePos = 1;
  inline bool has_battlepos() const;
  inline void clear_battlepos();
  static const int kBattlePosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerStartBattleReq</name>
  	<Function>
  		<name>battlepos</name>
  		<replaceName>BattlePos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlepos</name>
  		<replaceName>BattlePos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlepos</name>
  		<replaceName>BattlePos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlepos</name>
  		<replaceName>BattlePos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureTowerPos& battlepos() const;
  inline ::pb::TAdventureTowerPos* mutable_battlepos();
  inline ::pb::TAdventureTowerPos* release_battlepos();
  inline void set_allocated_battlepos(::pb::TAdventureTowerPos* battlepos);

  // repeated uint32 SquadHeroArr = 2;
  inline int squadheroarr_size() const;
  inline void clear_squadheroarr();
  static const int kSquadHeroArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerStartBattleReq</name>
  	<Function>
  		<name>squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squadheroarr_size</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 squadheroarr(int index) const;
  inline void set_squadheroarr(int index, ::google::protobuf::uint32 value);
  inline void add_squadheroarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      squadheroarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_squadheroarr();

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerStartBattleReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerStartBattleReq)
 private:
  inline void set_has_battlepos();
  inline void clear_has_battlepos();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAdventureTowerPos* battlepos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > squadheroarr_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerStartBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerStartBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerStartBattleRsp : public ::google::protobuf::Message {
 public:
  TAdventureTowerStartBattleRsp();
  virtual ~TAdventureTowerStartBattleRsp();

  TAdventureTowerStartBattleRsp(const TAdventureTowerStartBattleRsp& from);

  inline TAdventureTowerStartBattleRsp& operator=(const TAdventureTowerStartBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerStartBattleRsp& default_instance();

  void Swap(TAdventureTowerStartBattleRsp* other);

  // implements Message ----------------------------------------------

  TAdventureTowerStartBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerStartBattleRsp& from);
  void MergeFrom(const TAdventureTowerStartBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleArgs BattleArgs = 1;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerStartBattleRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // optional .pb.TAdventureBattleMonsterInfo MonsterInfo = 2;
  inline bool has_monsterinfo() const;
  inline void clear_monsterinfo();
  static const int kMonsterInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerStartBattleRsp</name>
  	<Function>
  		<name>monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureBattleMonsterInfo& monsterinfo() const;
  inline ::pb::TAdventureBattleMonsterInfo* mutable_monsterinfo();
  inline ::pb::TAdventureBattleMonsterInfo* release_monsterinfo();
  inline void set_allocated_monsterinfo(::pb::TAdventureBattleMonsterInfo* monsterinfo);

  // repeated .pb.TAdventureTowerHeroBattleInfo HeroBattleInfoArr = 3;
  inline int herobattleinfoarr_size() const;
  inline void clear_herobattleinfoarr();
  static const int kHeroBattleInfoArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerStartBattleRsp</name>
  	<Function>
  		<name>herobattleinfoarr</name>
  		<replaceName>HeroBattleInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_herobattleinfoarr</name>
  		<replaceName>HeroBattleInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_herobattleinfoarr</name>
  		<replaceName>HeroBattleInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_herobattleinfoarr</name>
  		<replaceName>HeroBattleInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>herobattleinfoarr_size</name>
  		<replaceName>HeroBattleInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureTowerHeroBattleInfo& herobattleinfoarr(int index) const;
  inline ::pb::TAdventureTowerHeroBattleInfo* mutable_herobattleinfoarr(int index);
  inline ::pb::TAdventureTowerHeroBattleInfo* add_herobattleinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroBattleInfo >&
      herobattleinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroBattleInfo >*
      mutable_herobattleinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerStartBattleRsp)
 private:
  inline void set_has_battleargs();
  inline void clear_has_battleargs();
  inline void set_has_monsterinfo();
  inline void clear_has_monsterinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleArgs* battleargs_;
  ::pb::TAdventureBattleMonsterInfo* monsterinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroBattleInfo > herobattleinfoarr_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerStartBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerReportBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerReportBattleReq : public ::google::protobuf::Message {
 public:
  TAdventureTowerReportBattleReq();
  virtual ~TAdventureTowerReportBattleReq();

  TAdventureTowerReportBattleReq(const TAdventureTowerReportBattleReq& from);

  inline TAdventureTowerReportBattleReq& operator=(const TAdventureTowerReportBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerReportBattleReq& default_instance();

  void Swap(TAdventureTowerReportBattleReq* other);

  // implements Message ----------------------------------------------

  TAdventureTowerReportBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerReportBattleReq& from);
  void MergeFrom(const TAdventureTowerReportBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAdventureTowerPos BattlePos = 1;
  inline bool has_battlepos() const;
  inline void clear_battlepos();
  static const int kBattlePosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerReportBattleReq</name>
  	<Function>
  		<name>battlepos</name>
  		<replaceName>BattlePos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlepos</name>
  		<replaceName>BattlePos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlepos</name>
  		<replaceName>BattlePos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlepos</name>
  		<replaceName>BattlePos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureTowerPos& battlepos() const;
  inline ::pb::TAdventureTowerPos* mutable_battlepos();
  inline ::pb::TAdventureTowerPos* release_battlepos();
  inline void set_allocated_battlepos(::pb::TAdventureTowerPos* battlepos);

  // optional .pb.TBattleResult BattleResult = 2;
  inline bool has_battleresult() const;
  inline void clear_battleresult();
  static const int kBattleResultFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerReportBattleReq</name>
  	<Function>
  		<name>battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& battleresult() const;
  inline ::pb::TBattleResult* mutable_battleresult();
  inline ::pb::TBattleResult* release_battleresult();
  inline void set_allocated_battleresult(::pb::TBattleResult* battleresult);

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerReportBattleReq)
 private:
  inline void set_has_battlepos();
  inline void clear_has_battlepos();
  inline void set_has_battleresult();
  inline void clear_has_battleresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAdventureTowerPos* battlepos_;
  ::pb::TBattleResult* battleresult_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerReportBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerReportBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerReportBattleRsp : public ::google::protobuf::Message {
 public:
  TAdventureTowerReportBattleRsp();
  virtual ~TAdventureTowerReportBattleRsp();

  TAdventureTowerReportBattleRsp(const TAdventureTowerReportBattleRsp& from);

  inline TAdventureTowerReportBattleRsp& operator=(const TAdventureTowerReportBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerReportBattleRsp& default_instance();

  void Swap(TAdventureTowerReportBattleRsp* other);

  // implements Message ----------------------------------------------

  TAdventureTowerReportBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerReportBattleRsp& from);
  void MergeFrom(const TAdventureTowerReportBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAdventureTowerBuffBox BuffBox = 1;
  inline bool has_buffbox() const;
  inline void clear_buffbox();
  static const int kBuffBoxFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerReportBattleRsp</name>
  	<Function>
  		<name>buffbox</name>
  		<replaceName>BuffBox</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buffbox</name>
  		<replaceName>BuffBox</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_buffbox</name>
  		<replaceName>BuffBox</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffbox</name>
  		<replaceName>BuffBox</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureTowerBuffBox& buffbox() const;
  inline ::pb::TAdventureTowerBuffBox* mutable_buffbox();
  inline ::pb::TAdventureTowerBuffBox* release_buffbox();
  inline void set_allocated_buffbox(::pb::TAdventureTowerBuffBox* buffbox);

  // optional .pb.TAdventureMonsterInfo MonsterInfoArr = 2;
  inline bool has_monsterinfoarr() const;
  inline void clear_monsterinfoarr();
  static const int kMonsterInfoArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerReportBattleRsp</name>
  	<Function>
  		<name>monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureMonsterInfo& monsterinfoarr() const;
  inline ::pb::TAdventureMonsterInfo* mutable_monsterinfoarr();
  inline ::pb::TAdventureMonsterInfo* release_monsterinfoarr();
  inline void set_allocated_monsterinfoarr(::pb::TAdventureMonsterInfo* monsterinfoarr);

  // repeated .pb.TAdventureTowerHeroStatus HeroStatusArr = 3;
  inline int herostatusarr_size() const;
  inline void clear_herostatusarr();
  static const int kHeroStatusArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerReportBattleRsp</name>
  	<Function>
  		<name>herostatusarr</name>
  		<replaceName>HeroStatusArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_herostatusarr</name>
  		<replaceName>HeroStatusArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_herostatusarr</name>
  		<replaceName>HeroStatusArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_herostatusarr</name>
  		<replaceName>HeroStatusArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>herostatusarr_size</name>
  		<replaceName>HeroStatusArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureTowerHeroStatus& herostatusarr(int index) const;
  inline ::pb::TAdventureTowerHeroStatus* mutable_herostatusarr(int index);
  inline ::pb::TAdventureTowerHeroStatus* add_herostatusarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroStatus >&
      herostatusarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroStatus >*
      mutable_herostatusarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerReportBattleRsp)
 private:
  inline void set_has_buffbox();
  inline void clear_has_buffbox();
  inline void set_has_monsterinfoarr();
  inline void clear_has_monsterinfoarr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAdventureTowerBuffBox* buffbox_;
  ::pb::TAdventureMonsterInfo* monsterinfoarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroStatus > herostatusarr_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerReportBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerReportPosReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerReportPosReq : public ::google::protobuf::Message {
 public:
  TAdventureTowerReportPosReq();
  virtual ~TAdventureTowerReportPosReq();

  TAdventureTowerReportPosReq(const TAdventureTowerReportPosReq& from);

  inline TAdventureTowerReportPosReq& operator=(const TAdventureTowerReportPosReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerReportPosReq& default_instance();

  void Swap(TAdventureTowerReportPosReq* other);

  // implements Message ----------------------------------------------

  TAdventureTowerReportPosReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerReportPosReq& from);
  void MergeFrom(const TAdventureTowerReportPosReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 PosX = 1;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerReportPosReq</name>
  	<Function>
  		<name>posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // optional int32 PosY = 2;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerReportPosReq</name>
  	<Function>
  		<name>posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerReportPosReq)
 private:
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerReportPosReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerPassBlocksReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerPassBlocksReq : public ::google::protobuf::Message {
 public:
  TAdventureTowerPassBlocksReq();
  virtual ~TAdventureTowerPassBlocksReq();

  TAdventureTowerPassBlocksReq(const TAdventureTowerPassBlocksReq& from);

  inline TAdventureTowerPassBlocksReq& operator=(const TAdventureTowerPassBlocksReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerPassBlocksReq& default_instance();

  void Swap(TAdventureTowerPassBlocksReq* other);

  // implements Message ----------------------------------------------

  TAdventureTowerPassBlocksReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerPassBlocksReq& from);
  void MergeFrom(const TAdventureTowerPassBlocksReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TAdventureTowerPos BlockArr = 1;
  inline int blockarr_size() const;
  inline void clear_blockarr();
  static const int kBlockArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerPassBlocksReq</name>
  	<Function>
  		<name>blockarr</name>
  		<replaceName>BlockArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_blockarr</name>
  		<replaceName>BlockArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_blockarr</name>
  		<replaceName>BlockArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_blockarr</name>
  		<replaceName>BlockArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>blockarr_size</name>
  		<replaceName>BlockArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureTowerPos& blockarr(int index) const;
  inline ::pb::TAdventureTowerPos* mutable_blockarr(int index);
  inline ::pb::TAdventureTowerPos* add_blockarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerPos >&
      blockarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerPos >*
      mutable_blockarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerPassBlocksReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerPos > blockarr_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerPassBlocksReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTowerPos</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureTower.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTowerPos : public ::google::protobuf::Message {
 public:
  TAdventureTowerPos();
  virtual ~TAdventureTowerPos();

  TAdventureTowerPos(const TAdventureTowerPos& from);

  inline TAdventureTowerPos& operator=(const TAdventureTowerPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTowerPos& default_instance();

  void Swap(TAdventureTowerPos* other);

  // implements Message ----------------------------------------------

  TAdventureTowerPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTowerPos& from);
  void MergeFrom(const TAdventureTowerPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerIndex = 1;
  inline bool has_layerindex() const;
  inline void clear_layerindex();
  static const int kLayerIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerPos</name>
  	<Function>
  		<name>layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerindex() const;
  inline void set_layerindex(::google::protobuf::uint32 value);

  // optional int32 PosX = 2;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerPos</name>
  	<Function>
  		<name>posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // optional int32 PosY = 3;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTowerPos</name>
  	<Function>
  		<name>posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureTowerPos)
 private:
  inline void set_has_layerindex();
  inline void clear_has_layerindex();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 layerindex_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  friend void  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureTower_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureTower_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTowerPos* default_instance_;
};
// ===================================================================


// ===================================================================

// TAdventureTowerGetInfoRsp

// optional .pb.TAdventureTowerSimpleMapInfo MaxMapInfo = 1;
inline bool TAdventureTowerGetInfoRsp::has_maxmapinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTowerGetInfoRsp::set_has_maxmapinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTowerGetInfoRsp::clear_has_maxmapinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTowerGetInfoRsp::clear_maxmapinfo() {
  if (maxmapinfo_ != NULL) maxmapinfo_->::pb::TAdventureTowerSimpleMapInfo::Clear();
  clear_has_maxmapinfo();
}
inline const ::pb::TAdventureTowerSimpleMapInfo& TAdventureTowerGetInfoRsp::maxmapinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerGetInfoRsp.MaxMapInfo)
  return maxmapinfo_ != NULL ? *maxmapinfo_ : *default_instance_->maxmapinfo_;
}
inline ::pb::TAdventureTowerSimpleMapInfo* TAdventureTowerGetInfoRsp::mutable_maxmapinfo() {
  set_has_maxmapinfo();
  if (maxmapinfo_ == NULL) maxmapinfo_ = new ::pb::TAdventureTowerSimpleMapInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerGetInfoRsp.MaxMapInfo)
  return maxmapinfo_;
}
inline ::pb::TAdventureTowerSimpleMapInfo* TAdventureTowerGetInfoRsp::release_maxmapinfo() {
  clear_has_maxmapinfo();
  ::pb::TAdventureTowerSimpleMapInfo* temp = maxmapinfo_;
  maxmapinfo_ = NULL;
  return temp;
}
inline void TAdventureTowerGetInfoRsp::set_allocated_maxmapinfo(::pb::TAdventureTowerSimpleMapInfo* maxmapinfo) {
  delete maxmapinfo_;
  maxmapinfo_ = maxmapinfo;
  if (maxmapinfo) {
    set_has_maxmapinfo();
  } else {
    clear_has_maxmapinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureTowerGetInfoRsp.MaxMapInfo)
}

// optional uint32 CurMapId = 2;
inline bool TAdventureTowerGetInfoRsp::has_curmapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureTowerGetInfoRsp::set_has_curmapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureTowerGetInfoRsp::clear_has_curmapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureTowerGetInfoRsp::clear_curmapid() {
  curmapid_ = 0u;
  clear_has_curmapid();
}
inline ::google::protobuf::uint32 TAdventureTowerGetInfoRsp::curmapid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerGetInfoRsp.CurMapId)
  return curmapid_;
}
inline void TAdventureTowerGetInfoRsp::set_curmapid(::google::protobuf::uint32 value) {
  set_has_curmapid();
  curmapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerGetInfoRsp.CurMapId)
}

// optional uint32 MaxPassedMapId = 3;
inline bool TAdventureTowerGetInfoRsp::has_maxpassedmapid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureTowerGetInfoRsp::set_has_maxpassedmapid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureTowerGetInfoRsp::clear_has_maxpassedmapid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureTowerGetInfoRsp::clear_maxpassedmapid() {
  maxpassedmapid_ = 0u;
  clear_has_maxpassedmapid();
}
inline ::google::protobuf::uint32 TAdventureTowerGetInfoRsp::maxpassedmapid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerGetInfoRsp.MaxPassedMapId)
  return maxpassedmapid_;
}
inline void TAdventureTowerGetInfoRsp::set_maxpassedmapid(::google::protobuf::uint32 value) {
  set_has_maxpassedmapid();
  maxpassedmapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerGetInfoRsp.MaxPassedMapId)
}

// -------------------------------------------------------------------

// TAdventureTowerSimpleMapInfo

// optional uint32 MapId = 1;
inline bool TAdventureTowerSimpleMapInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTowerSimpleMapInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTowerSimpleMapInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTowerSimpleMapInfo::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 TAdventureTowerSimpleMapInfo::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerSimpleMapInfo.MapId)
  return mapid_;
}
inline void TAdventureTowerSimpleMapInfo::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerSimpleMapInfo.MapId)
}

// repeated uint32 ReceivedBoxId = 2;
inline int TAdventureTowerSimpleMapInfo::receivedboxid_size() const {
  return receivedboxid_.size();
}
inline void TAdventureTowerSimpleMapInfo::clear_receivedboxid() {
  receivedboxid_.Clear();
}
inline ::google::protobuf::uint32 TAdventureTowerSimpleMapInfo::receivedboxid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerSimpleMapInfo.ReceivedBoxId)
  return receivedboxid_.Get(index);
}
inline void TAdventureTowerSimpleMapInfo::set_receivedboxid(int index, ::google::protobuf::uint32 value) {
  receivedboxid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerSimpleMapInfo.ReceivedBoxId)
}
inline void TAdventureTowerSimpleMapInfo::add_receivedboxid(::google::protobuf::uint32 value) {
  receivedboxid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TAdventureTowerSimpleMapInfo.ReceivedBoxId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TAdventureTowerSimpleMapInfo::receivedboxid() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTowerSimpleMapInfo.ReceivedBoxId)
  return receivedboxid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TAdventureTowerSimpleMapInfo::mutable_receivedboxid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTowerSimpleMapInfo.ReceivedBoxId)
  return &receivedboxid_;
}

// -------------------------------------------------------------------

// TAdventureTowerBuffBox

// optional .pb.TAdventureTowerPos BuffBoxPos = 1;
inline bool TAdventureTowerBuffBox::has_buffboxpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTowerBuffBox::set_has_buffboxpos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTowerBuffBox::clear_has_buffboxpos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTowerBuffBox::clear_buffboxpos() {
  if (buffboxpos_ != NULL) buffboxpos_->::pb::TAdventureTowerPos::Clear();
  clear_has_buffboxpos();
}
inline const ::pb::TAdventureTowerPos& TAdventureTowerBuffBox::buffboxpos() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerBuffBox.BuffBoxPos)
  return buffboxpos_ != NULL ? *buffboxpos_ : *default_instance_->buffboxpos_;
}
inline ::pb::TAdventureTowerPos* TAdventureTowerBuffBox::mutable_buffboxpos() {
  set_has_buffboxpos();
  if (buffboxpos_ == NULL) buffboxpos_ = new ::pb::TAdventureTowerPos;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerBuffBox.BuffBoxPos)
  return buffboxpos_;
}
inline ::pb::TAdventureTowerPos* TAdventureTowerBuffBox::release_buffboxpos() {
  clear_has_buffboxpos();
  ::pb::TAdventureTowerPos* temp = buffboxpos_;
  buffboxpos_ = NULL;
  return temp;
}
inline void TAdventureTowerBuffBox::set_allocated_buffboxpos(::pb::TAdventureTowerPos* buffboxpos) {
  delete buffboxpos_;
  buffboxpos_ = buffboxpos;
  if (buffboxpos) {
    set_has_buffboxpos();
  } else {
    clear_has_buffboxpos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureTowerBuffBox.BuffBoxPos)
}

// repeated uint32 BuffIdArr = 2;
inline int TAdventureTowerBuffBox::buffidarr_size() const {
  return buffidarr_.size();
}
inline void TAdventureTowerBuffBox::clear_buffidarr() {
  buffidarr_.Clear();
}
inline ::google::protobuf::uint32 TAdventureTowerBuffBox::buffidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerBuffBox.BuffIdArr)
  return buffidarr_.Get(index);
}
inline void TAdventureTowerBuffBox::set_buffidarr(int index, ::google::protobuf::uint32 value) {
  buffidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerBuffBox.BuffIdArr)
}
inline void TAdventureTowerBuffBox::add_buffidarr(::google::protobuf::uint32 value) {
  buffidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TAdventureTowerBuffBox.BuffIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TAdventureTowerBuffBox::buffidarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTowerBuffBox.BuffIdArr)
  return buffidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TAdventureTowerBuffBox::mutable_buffidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTowerBuffBox.BuffIdArr)
  return &buffidarr_;
}

// -------------------------------------------------------------------

// TAdventureTowerMapInfo

// optional uint32 LayerIndex = 1;
inline bool TAdventureTowerMapInfo::has_layerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTowerMapInfo::set_has_layerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTowerMapInfo::clear_has_layerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTowerMapInfo::clear_layerindex() {
  layerindex_ = 0u;
  clear_has_layerindex();
}
inline ::google::protobuf::uint32 TAdventureTowerMapInfo::layerindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerMapInfo.LayerIndex)
  return layerindex_;
}
inline void TAdventureTowerMapInfo::set_layerindex(::google::protobuf::uint32 value) {
  set_has_layerindex();
  layerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerMapInfo.LayerIndex)
}

// optional int32 PosX = 2;
inline bool TAdventureTowerMapInfo::has_posx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureTowerMapInfo::set_has_posx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureTowerMapInfo::clear_has_posx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureTowerMapInfo::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 TAdventureTowerMapInfo::posx() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerMapInfo.PosX)
  return posx_;
}
inline void TAdventureTowerMapInfo::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerMapInfo.PosX)
}

// optional int32 PosY = 3;
inline bool TAdventureTowerMapInfo::has_posy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureTowerMapInfo::set_has_posy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureTowerMapInfo::clear_has_posy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureTowerMapInfo::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 TAdventureTowerMapInfo::posy() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerMapInfo.PosY)
  return posy_;
}
inline void TAdventureTowerMapInfo::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerMapInfo.PosY)
}

// optional .pb.AdventureMap BaseMapInfo = 4;
inline bool TAdventureTowerMapInfo::has_basemapinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureTowerMapInfo::set_has_basemapinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureTowerMapInfo::clear_has_basemapinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureTowerMapInfo::clear_basemapinfo() {
  if (basemapinfo_ != NULL) basemapinfo_->::pb::AdventureMap::Clear();
  clear_has_basemapinfo();
}
inline const ::pb::AdventureMap& TAdventureTowerMapInfo::basemapinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerMapInfo.BaseMapInfo)
  return basemapinfo_ != NULL ? *basemapinfo_ : *default_instance_->basemapinfo_;
}
inline ::pb::AdventureMap* TAdventureTowerMapInfo::mutable_basemapinfo() {
  set_has_basemapinfo();
  if (basemapinfo_ == NULL) basemapinfo_ = new ::pb::AdventureMap;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerMapInfo.BaseMapInfo)
  return basemapinfo_;
}
inline ::pb::AdventureMap* TAdventureTowerMapInfo::release_basemapinfo() {
  clear_has_basemapinfo();
  ::pb::AdventureMap* temp = basemapinfo_;
  basemapinfo_ = NULL;
  return temp;
}
inline void TAdventureTowerMapInfo::set_allocated_basemapinfo(::pb::AdventureMap* basemapinfo) {
  delete basemapinfo_;
  basemapinfo_ = basemapinfo;
  if (basemapinfo) {
    set_has_basemapinfo();
  } else {
    clear_has_basemapinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureTowerMapInfo.BaseMapInfo)
}

// repeated .pb.TAdventureTowerBuffBox BuffBoxArr = 5;
inline int TAdventureTowerMapInfo::buffboxarr_size() const {
  return buffboxarr_.size();
}
inline void TAdventureTowerMapInfo::clear_buffboxarr() {
  buffboxarr_.Clear();
}
inline const ::pb::TAdventureTowerBuffBox& TAdventureTowerMapInfo::buffboxarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerMapInfo.BuffBoxArr)
  return buffboxarr_.Get(index);
}
inline ::pb::TAdventureTowerBuffBox* TAdventureTowerMapInfo::mutable_buffboxarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerMapInfo.BuffBoxArr)
  return buffboxarr_.Mutable(index);
}
inline ::pb::TAdventureTowerBuffBox* TAdventureTowerMapInfo::add_buffboxarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureTowerMapInfo.BuffBoxArr)
  return buffboxarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerBuffBox >&
TAdventureTowerMapInfo::buffboxarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTowerMapInfo.BuffBoxArr)
  return buffboxarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerBuffBox >*
TAdventureTowerMapInfo::mutable_buffboxarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTowerMapInfo.BuffBoxArr)
  return &buffboxarr_;
}

// repeated .pb.TAdventureTowerTavernInfo TavernArr = 6;
inline int TAdventureTowerMapInfo::tavernarr_size() const {
  return tavernarr_.size();
}
inline void TAdventureTowerMapInfo::clear_tavernarr() {
  tavernarr_.Clear();
}
inline const ::pb::TAdventureTowerTavernInfo& TAdventureTowerMapInfo::tavernarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerMapInfo.TavernArr)
  return tavernarr_.Get(index);
}
inline ::pb::TAdventureTowerTavernInfo* TAdventureTowerMapInfo::mutable_tavernarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerMapInfo.TavernArr)
  return tavernarr_.Mutable(index);
}
inline ::pb::TAdventureTowerTavernInfo* TAdventureTowerMapInfo::add_tavernarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureTowerMapInfo.TavernArr)
  return tavernarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerTavernInfo >&
TAdventureTowerMapInfo::tavernarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTowerMapInfo.TavernArr)
  return tavernarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerTavernInfo >*
TAdventureTowerMapInfo::mutable_tavernarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTowerMapInfo.TavernArr)
  return &tavernarr_;
}

// -------------------------------------------------------------------

// TAdventureTowerTavernInfo

// optional .pb.TAdventureTowerPos TavernPos = 1;
inline bool TAdventureTowerTavernInfo::has_tavernpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTowerTavernInfo::set_has_tavernpos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTowerTavernInfo::clear_has_tavernpos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTowerTavernInfo::clear_tavernpos() {
  if (tavernpos_ != NULL) tavernpos_->::pb::TAdventureTowerPos::Clear();
  clear_has_tavernpos();
}
inline const ::pb::TAdventureTowerPos& TAdventureTowerTavernInfo::tavernpos() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerTavernInfo.TavernPos)
  return tavernpos_ != NULL ? *tavernpos_ : *default_instance_->tavernpos_;
}
inline ::pb::TAdventureTowerPos* TAdventureTowerTavernInfo::mutable_tavernpos() {
  set_has_tavernpos();
  if (tavernpos_ == NULL) tavernpos_ = new ::pb::TAdventureTowerPos;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerTavernInfo.TavernPos)
  return tavernpos_;
}
inline ::pb::TAdventureTowerPos* TAdventureTowerTavernInfo::release_tavernpos() {
  clear_has_tavernpos();
  ::pb::TAdventureTowerPos* temp = tavernpos_;
  tavernpos_ = NULL;
  return temp;
}
inline void TAdventureTowerTavernInfo::set_allocated_tavernpos(::pb::TAdventureTowerPos* tavernpos) {
  delete tavernpos_;
  tavernpos_ = tavernpos;
  if (tavernpos) {
    set_has_tavernpos();
  } else {
    clear_has_tavernpos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureTowerTavernInfo.TavernPos)
}

// repeated uint32 TavernHeroArr = 2;
inline int TAdventureTowerTavernInfo::tavernheroarr_size() const {
  return tavernheroarr_.size();
}
inline void TAdventureTowerTavernInfo::clear_tavernheroarr() {
  tavernheroarr_.Clear();
}
inline ::google::protobuf::uint32 TAdventureTowerTavernInfo::tavernheroarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerTavernInfo.TavernHeroArr)
  return tavernheroarr_.Get(index);
}
inline void TAdventureTowerTavernInfo::set_tavernheroarr(int index, ::google::protobuf::uint32 value) {
  tavernheroarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerTavernInfo.TavernHeroArr)
}
inline void TAdventureTowerTavernInfo::add_tavernheroarr(::google::protobuf::uint32 value) {
  tavernheroarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TAdventureTowerTavernInfo.TavernHeroArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TAdventureTowerTavernInfo::tavernheroarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTowerTavernInfo.TavernHeroArr)
  return tavernheroarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TAdventureTowerTavernInfo::mutable_tavernheroarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTowerTavernInfo.TavernHeroArr)
  return &tavernheroarr_;
}

// -------------------------------------------------------------------

// TAdventureTowerEnterMapReq

// optional uint32 MapId = 1;
inline bool TAdventureTowerEnterMapReq::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTowerEnterMapReq::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTowerEnterMapReq::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTowerEnterMapReq::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 TAdventureTowerEnterMapReq::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerEnterMapReq.MapId)
  return mapid_;
}
inline void TAdventureTowerEnterMapReq::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerEnterMapReq.MapId)
}

// -------------------------------------------------------------------

// TAdventureTowerHeroBattleInfo

// optional .pb.TUnitInfo Unit = 1;
inline bool TAdventureTowerHeroBattleInfo::has_unit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTowerHeroBattleInfo::set_has_unit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTowerHeroBattleInfo::clear_has_unit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTowerHeroBattleInfo::clear_unit() {
  if (unit_ != NULL) unit_->::pb::TUnitInfo::Clear();
  clear_has_unit();
}
inline const ::pb::TUnitInfo& TAdventureTowerHeroBattleInfo::unit() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerHeroBattleInfo.Unit)
  return unit_ != NULL ? *unit_ : *default_instance_->unit_;
}
inline ::pb::TUnitInfo* TAdventureTowerHeroBattleInfo::mutable_unit() {
  set_has_unit();
  if (unit_ == NULL) unit_ = new ::pb::TUnitInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerHeroBattleInfo.Unit)
  return unit_;
}
inline ::pb::TUnitInfo* TAdventureTowerHeroBattleInfo::release_unit() {
  clear_has_unit();
  ::pb::TUnitInfo* temp = unit_;
  unit_ = NULL;
  return temp;
}
inline void TAdventureTowerHeroBattleInfo::set_allocated_unit(::pb::TUnitInfo* unit) {
  delete unit_;
  unit_ = unit;
  if (unit) {
    set_has_unit();
  } else {
    clear_has_unit();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureTowerHeroBattleInfo.Unit)
}

// optional uint64 MaxHp = 2;
inline bool TAdventureTowerHeroBattleInfo::has_maxhp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureTowerHeroBattleInfo::set_has_maxhp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureTowerHeroBattleInfo::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureTowerHeroBattleInfo::clear_maxhp() {
  maxhp_ = GOOGLE_ULONGLONG(0);
  clear_has_maxhp();
}
inline ::google::protobuf::uint64 TAdventureTowerHeroBattleInfo::maxhp() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerHeroBattleInfo.MaxHp)
  return maxhp_;
}
inline void TAdventureTowerHeroBattleInfo::set_maxhp(::google::protobuf::uint64 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerHeroBattleInfo.MaxHp)
}

// -------------------------------------------------------------------

// TAdventureTowerHeroStatus

// optional uint32 HeroId = 1;
inline bool TAdventureTowerHeroStatus::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTowerHeroStatus::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTowerHeroStatus::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTowerHeroStatus::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 TAdventureTowerHeroStatus::heroid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerHeroStatus.HeroId)
  return heroid_;
}
inline void TAdventureTowerHeroStatus::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerHeroStatus.HeroId)
}

// optional uint64 CurHp = 2;
inline bool TAdventureTowerHeroStatus::has_curhp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureTowerHeroStatus::set_has_curhp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureTowerHeroStatus::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureTowerHeroStatus::clear_curhp() {
  curhp_ = GOOGLE_ULONGLONG(0);
  clear_has_curhp();
}
inline ::google::protobuf::uint64 TAdventureTowerHeroStatus::curhp() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerHeroStatus.CurHp)
  return curhp_;
}
inline void TAdventureTowerHeroStatus::set_curhp(::google::protobuf::uint64 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerHeroStatus.CurHp)
}

// optional uint64 MaxHp = 3;
inline bool TAdventureTowerHeroStatus::has_maxhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureTowerHeroStatus::set_has_maxhp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureTowerHeroStatus::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureTowerHeroStatus::clear_maxhp() {
  maxhp_ = GOOGLE_ULONGLONG(0);
  clear_has_maxhp();
}
inline ::google::protobuf::uint64 TAdventureTowerHeroStatus::maxhp() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerHeroStatus.MaxHp)
  return maxhp_;
}
inline void TAdventureTowerHeroStatus::set_maxhp(::google::protobuf::uint64 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerHeroStatus.MaxHp)
}

// optional uint64 CurRage = 4;
inline bool TAdventureTowerHeroStatus::has_currage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureTowerHeroStatus::set_has_currage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureTowerHeroStatus::clear_has_currage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureTowerHeroStatus::clear_currage() {
  currage_ = GOOGLE_ULONGLONG(0);
  clear_has_currage();
}
inline ::google::protobuf::uint64 TAdventureTowerHeroStatus::currage() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerHeroStatus.CurRage)
  return currage_;
}
inline void TAdventureTowerHeroStatus::set_currage(::google::protobuf::uint64 value) {
  set_has_currage();
  currage_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerHeroStatus.CurRage)
}

// optional uint64 MaxRage = 5;
inline bool TAdventureTowerHeroStatus::has_maxrage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAdventureTowerHeroStatus::set_has_maxrage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAdventureTowerHeroStatus::clear_has_maxrage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAdventureTowerHeroStatus::clear_maxrage() {
  maxrage_ = GOOGLE_ULONGLONG(0);
  clear_has_maxrage();
}
inline ::google::protobuf::uint64 TAdventureTowerHeroStatus::maxrage() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerHeroStatus.MaxRage)
  return maxrage_;
}
inline void TAdventureTowerHeroStatus::set_maxrage(::google::protobuf::uint64 value) {
  set_has_maxrage();
  maxrage_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerHeroStatus.MaxRage)
}

// -------------------------------------------------------------------

// TAdventureTowerEnterMapRsp

// optional .pb.TAdventureTowerMapInfo MapInfo = 1;
inline bool TAdventureTowerEnterMapRsp::has_mapinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTowerEnterMapRsp::set_has_mapinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTowerEnterMapRsp::clear_has_mapinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTowerEnterMapRsp::clear_mapinfo() {
  if (mapinfo_ != NULL) mapinfo_->::pb::TAdventureTowerMapInfo::Clear();
  clear_has_mapinfo();
}
inline const ::pb::TAdventureTowerMapInfo& TAdventureTowerEnterMapRsp::mapinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerEnterMapRsp.MapInfo)
  return mapinfo_ != NULL ? *mapinfo_ : *default_instance_->mapinfo_;
}
inline ::pb::TAdventureTowerMapInfo* TAdventureTowerEnterMapRsp::mutable_mapinfo() {
  set_has_mapinfo();
  if (mapinfo_ == NULL) mapinfo_ = new ::pb::TAdventureTowerMapInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerEnterMapRsp.MapInfo)
  return mapinfo_;
}
inline ::pb::TAdventureTowerMapInfo* TAdventureTowerEnterMapRsp::release_mapinfo() {
  clear_has_mapinfo();
  ::pb::TAdventureTowerMapInfo* temp = mapinfo_;
  mapinfo_ = NULL;
  return temp;
}
inline void TAdventureTowerEnterMapRsp::set_allocated_mapinfo(::pb::TAdventureTowerMapInfo* mapinfo) {
  delete mapinfo_;
  mapinfo_ = mapinfo;
  if (mapinfo) {
    set_has_mapinfo();
  } else {
    clear_has_mapinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureTowerEnterMapRsp.MapInfo)
}

// repeated uint32 BuffIdArr = 2;
inline int TAdventureTowerEnterMapRsp::buffidarr_size() const {
  return buffidarr_.size();
}
inline void TAdventureTowerEnterMapRsp::clear_buffidarr() {
  buffidarr_.Clear();
}
inline ::google::protobuf::uint32 TAdventureTowerEnterMapRsp::buffidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerEnterMapRsp.BuffIdArr)
  return buffidarr_.Get(index);
}
inline void TAdventureTowerEnterMapRsp::set_buffidarr(int index, ::google::protobuf::uint32 value) {
  buffidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerEnterMapRsp.BuffIdArr)
}
inline void TAdventureTowerEnterMapRsp::add_buffidarr(::google::protobuf::uint32 value) {
  buffidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TAdventureTowerEnterMapRsp.BuffIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TAdventureTowerEnterMapRsp::buffidarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTowerEnterMapRsp.BuffIdArr)
  return buffidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TAdventureTowerEnterMapRsp::mutable_buffidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTowerEnterMapRsp.BuffIdArr)
  return &buffidarr_;
}

// repeated .pb.TAdventureTowerHeroStatus HeroStatusArr = 3;
inline int TAdventureTowerEnterMapRsp::herostatusarr_size() const {
  return herostatusarr_.size();
}
inline void TAdventureTowerEnterMapRsp::clear_herostatusarr() {
  herostatusarr_.Clear();
}
inline const ::pb::TAdventureTowerHeroStatus& TAdventureTowerEnterMapRsp::herostatusarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerEnterMapRsp.HeroStatusArr)
  return herostatusarr_.Get(index);
}
inline ::pb::TAdventureTowerHeroStatus* TAdventureTowerEnterMapRsp::mutable_herostatusarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerEnterMapRsp.HeroStatusArr)
  return herostatusarr_.Mutable(index);
}
inline ::pb::TAdventureTowerHeroStatus* TAdventureTowerEnterMapRsp::add_herostatusarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureTowerEnterMapRsp.HeroStatusArr)
  return herostatusarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroStatus >&
TAdventureTowerEnterMapRsp::herostatusarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTowerEnterMapRsp.HeroStatusArr)
  return herostatusarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroStatus >*
TAdventureTowerEnterMapRsp::mutable_herostatusarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTowerEnterMapRsp.HeroStatusArr)
  return &herostatusarr_;
}

// repeated uint32 SquadHeroArr = 4;
inline int TAdventureTowerEnterMapRsp::squadheroarr_size() const {
  return squadheroarr_.size();
}
inline void TAdventureTowerEnterMapRsp::clear_squadheroarr() {
  squadheroarr_.Clear();
}
inline ::google::protobuf::uint32 TAdventureTowerEnterMapRsp::squadheroarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerEnterMapRsp.SquadHeroArr)
  return squadheroarr_.Get(index);
}
inline void TAdventureTowerEnterMapRsp::set_squadheroarr(int index, ::google::protobuf::uint32 value) {
  squadheroarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerEnterMapRsp.SquadHeroArr)
}
inline void TAdventureTowerEnterMapRsp::add_squadheroarr(::google::protobuf::uint32 value) {
  squadheroarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TAdventureTowerEnterMapRsp.SquadHeroArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TAdventureTowerEnterMapRsp::squadheroarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTowerEnterMapRsp.SquadHeroArr)
  return squadheroarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TAdventureTowerEnterMapRsp::mutable_squadheroarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTowerEnterMapRsp.SquadHeroArr)
  return &squadheroarr_;
}

// repeated uint32 TemporaryHeroArr = 5;
inline int TAdventureTowerEnterMapRsp::temporaryheroarr_size() const {
  return temporaryheroarr_.size();
}
inline void TAdventureTowerEnterMapRsp::clear_temporaryheroarr() {
  temporaryheroarr_.Clear();
}
inline ::google::protobuf::uint32 TAdventureTowerEnterMapRsp::temporaryheroarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerEnterMapRsp.TemporaryHeroArr)
  return temporaryheroarr_.Get(index);
}
inline void TAdventureTowerEnterMapRsp::set_temporaryheroarr(int index, ::google::protobuf::uint32 value) {
  temporaryheroarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerEnterMapRsp.TemporaryHeroArr)
}
inline void TAdventureTowerEnterMapRsp::add_temporaryheroarr(::google::protobuf::uint32 value) {
  temporaryheroarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TAdventureTowerEnterMapRsp.TemporaryHeroArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TAdventureTowerEnterMapRsp::temporaryheroarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTowerEnterMapRsp.TemporaryHeroArr)
  return temporaryheroarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TAdventureTowerEnterMapRsp::mutable_temporaryheroarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTowerEnterMapRsp.TemporaryHeroArr)
  return &temporaryheroarr_;
}

// repeated .pb.TAdventureMonsterInfo MonsterInfoArr = 6;
inline int TAdventureTowerEnterMapRsp::monsterinfoarr_size() const {
  return monsterinfoarr_.size();
}
inline void TAdventureTowerEnterMapRsp::clear_monsterinfoarr() {
  monsterinfoarr_.Clear();
}
inline const ::pb::TAdventureMonsterInfo& TAdventureTowerEnterMapRsp::monsterinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerEnterMapRsp.MonsterInfoArr)
  return monsterinfoarr_.Get(index);
}
inline ::pb::TAdventureMonsterInfo* TAdventureTowerEnterMapRsp::mutable_monsterinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerEnterMapRsp.MonsterInfoArr)
  return monsterinfoarr_.Mutable(index);
}
inline ::pb::TAdventureMonsterInfo* TAdventureTowerEnterMapRsp::add_monsterinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureTowerEnterMapRsp.MonsterInfoArr)
  return monsterinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMonsterInfo >&
TAdventureTowerEnterMapRsp::monsterinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTowerEnterMapRsp.MonsterInfoArr)
  return monsterinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMonsterInfo >*
TAdventureTowerEnterMapRsp::mutable_monsterinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTowerEnterMapRsp.MonsterInfoArr)
  return &monsterinfoarr_;
}

// -------------------------------------------------------------------

// TAdventureTowerQuitMapReq

// optional uint32 MapId = 1;
inline bool TAdventureTowerQuitMapReq::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTowerQuitMapReq::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTowerQuitMapReq::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTowerQuitMapReq::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 TAdventureTowerQuitMapReq::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerQuitMapReq.MapId)
  return mapid_;
}
inline void TAdventureTowerQuitMapReq::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerQuitMapReq.MapId)
}

// -------------------------------------------------------------------

// TAdventureTowerSetSquadReq

// repeated uint32 SquadHeroArr = 1;
inline int TAdventureTowerSetSquadReq::squadheroarr_size() const {
  return squadheroarr_.size();
}
inline void TAdventureTowerSetSquadReq::clear_squadheroarr() {
  squadheroarr_.Clear();
}
inline ::google::protobuf::uint32 TAdventureTowerSetSquadReq::squadheroarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerSetSquadReq.SquadHeroArr)
  return squadheroarr_.Get(index);
}
inline void TAdventureTowerSetSquadReq::set_squadheroarr(int index, ::google::protobuf::uint32 value) {
  squadheroarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerSetSquadReq.SquadHeroArr)
}
inline void TAdventureTowerSetSquadReq::add_squadheroarr(::google::protobuf::uint32 value) {
  squadheroarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TAdventureTowerSetSquadReq.SquadHeroArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TAdventureTowerSetSquadReq::squadheroarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTowerSetSquadReq.SquadHeroArr)
  return squadheroarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TAdventureTowerSetSquadReq::mutable_squadheroarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTowerSetSquadReq.SquadHeroArr)
  return &squadheroarr_;
}

// -------------------------------------------------------------------

// TAdventureTowerTriggerEventReq

// optional uint32 LayerIndex = 1;
inline bool TAdventureTowerTriggerEventReq::has_layerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTowerTriggerEventReq::set_has_layerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTowerTriggerEventReq::clear_has_layerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTowerTriggerEventReq::clear_layerindex() {
  layerindex_ = 0u;
  clear_has_layerindex();
}
inline ::google::protobuf::uint32 TAdventureTowerTriggerEventReq::layerindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerTriggerEventReq.LayerIndex)
  return layerindex_;
}
inline void TAdventureTowerTriggerEventReq::set_layerindex(::google::protobuf::uint32 value) {
  set_has_layerindex();
  layerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerTriggerEventReq.LayerIndex)
}

// optional int32 PosX = 2;
inline bool TAdventureTowerTriggerEventReq::has_posx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureTowerTriggerEventReq::set_has_posx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureTowerTriggerEventReq::clear_has_posx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureTowerTriggerEventReq::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 TAdventureTowerTriggerEventReq::posx() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerTriggerEventReq.PosX)
  return posx_;
}
inline void TAdventureTowerTriggerEventReq::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerTriggerEventReq.PosX)
}

// optional int32 PosY = 3;
inline bool TAdventureTowerTriggerEventReq::has_posy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureTowerTriggerEventReq::set_has_posy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureTowerTriggerEventReq::clear_has_posy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureTowerTriggerEventReq::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 TAdventureTowerTriggerEventReq::posy() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerTriggerEventReq.PosY)
  return posy_;
}
inline void TAdventureTowerTriggerEventReq::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerTriggerEventReq.PosY)
}

// optional uint32 ChoseBuffIndex = 4;
inline bool TAdventureTowerTriggerEventReq::has_chosebuffindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureTowerTriggerEventReq::set_has_chosebuffindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureTowerTriggerEventReq::clear_has_chosebuffindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureTowerTriggerEventReq::clear_chosebuffindex() {
  chosebuffindex_ = 0u;
  clear_has_chosebuffindex();
}
inline ::google::protobuf::uint32 TAdventureTowerTriggerEventReq::chosebuffindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerTriggerEventReq.ChoseBuffIndex)
  return chosebuffindex_;
}
inline void TAdventureTowerTriggerEventReq::set_chosebuffindex(::google::protobuf::uint32 value) {
  set_has_chosebuffindex();
  chosebuffindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerTriggerEventReq.ChoseBuffIndex)
}

// optional uint32 ChoseHeroIndex = 5;
inline bool TAdventureTowerTriggerEventReq::has_choseheroindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAdventureTowerTriggerEventReq::set_has_choseheroindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAdventureTowerTriggerEventReq::clear_has_choseheroindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAdventureTowerTriggerEventReq::clear_choseheroindex() {
  choseheroindex_ = 0u;
  clear_has_choseheroindex();
}
inline ::google::protobuf::uint32 TAdventureTowerTriggerEventReq::choseheroindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerTriggerEventReq.ChoseHeroIndex)
  return choseheroindex_;
}
inline void TAdventureTowerTriggerEventReq::set_choseheroindex(::google::protobuf::uint32 value) {
  set_has_choseheroindex();
  choseheroindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerTriggerEventReq.ChoseHeroIndex)
}

// repeated uint32 EventOnHidArr = 6;
inline int TAdventureTowerTriggerEventReq::eventonhidarr_size() const {
  return eventonhidarr_.size();
}
inline void TAdventureTowerTriggerEventReq::clear_eventonhidarr() {
  eventonhidarr_.Clear();
}
inline ::google::protobuf::uint32 TAdventureTowerTriggerEventReq::eventonhidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerTriggerEventReq.EventOnHidArr)
  return eventonhidarr_.Get(index);
}
inline void TAdventureTowerTriggerEventReq::set_eventonhidarr(int index, ::google::protobuf::uint32 value) {
  eventonhidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerTriggerEventReq.EventOnHidArr)
}
inline void TAdventureTowerTriggerEventReq::add_eventonhidarr(::google::protobuf::uint32 value) {
  eventonhidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TAdventureTowerTriggerEventReq.EventOnHidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TAdventureTowerTriggerEventReq::eventonhidarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTowerTriggerEventReq.EventOnHidArr)
  return eventonhidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TAdventureTowerTriggerEventReq::mutable_eventonhidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTowerTriggerEventReq.EventOnHidArr)
  return &eventonhidarr_;
}

// -------------------------------------------------------------------

// TAdventureTowerEventRet

// optional uint32 BattleinfoId = 1;
inline bool TAdventureTowerEventRet::has_battleinfoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTowerEventRet::set_has_battleinfoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTowerEventRet::clear_has_battleinfoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTowerEventRet::clear_battleinfoid() {
  battleinfoid_ = 0u;
  clear_has_battleinfoid();
}
inline ::google::protobuf::uint32 TAdventureTowerEventRet::battleinfoid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerEventRet.BattleinfoId)
  return battleinfoid_;
}
inline void TAdventureTowerEventRet::set_battleinfoid(::google::protobuf::uint32 value) {
  set_has_battleinfoid();
  battleinfoid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerEventRet.BattleinfoId)
}

// repeated uint32 InteractIdArr = 2;
inline int TAdventureTowerEventRet::interactidarr_size() const {
  return interactidarr_.size();
}
inline void TAdventureTowerEventRet::clear_interactidarr() {
  interactidarr_.Clear();
}
inline ::google::protobuf::uint32 TAdventureTowerEventRet::interactidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerEventRet.InteractIdArr)
  return interactidarr_.Get(index);
}
inline void TAdventureTowerEventRet::set_interactidarr(int index, ::google::protobuf::uint32 value) {
  interactidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerEventRet.InteractIdArr)
}
inline void TAdventureTowerEventRet::add_interactidarr(::google::protobuf::uint32 value) {
  interactidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TAdventureTowerEventRet.InteractIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TAdventureTowerEventRet::interactidarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTowerEventRet.InteractIdArr)
  return interactidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TAdventureTowerEventRet::mutable_interactidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTowerEventRet.InteractIdArr)
  return &interactidarr_;
}

// repeated .pb.TAdventureTowerHeroStatus HeroStatusArr = 3;
inline int TAdventureTowerEventRet::herostatusarr_size() const {
  return herostatusarr_.size();
}
inline void TAdventureTowerEventRet::clear_herostatusarr() {
  herostatusarr_.Clear();
}
inline const ::pb::TAdventureTowerHeroStatus& TAdventureTowerEventRet::herostatusarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerEventRet.HeroStatusArr)
  return herostatusarr_.Get(index);
}
inline ::pb::TAdventureTowerHeroStatus* TAdventureTowerEventRet::mutable_herostatusarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerEventRet.HeroStatusArr)
  return herostatusarr_.Mutable(index);
}
inline ::pb::TAdventureTowerHeroStatus* TAdventureTowerEventRet::add_herostatusarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureTowerEventRet.HeroStatusArr)
  return herostatusarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroStatus >&
TAdventureTowerEventRet::herostatusarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTowerEventRet.HeroStatusArr)
  return herostatusarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroStatus >*
TAdventureTowerEventRet::mutable_herostatusarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTowerEventRet.HeroStatusArr)
  return &herostatusarr_;
}

// optional .pb.TAdventureBattleMonsterInfo MonsterInfo = 4;
inline bool TAdventureTowerEventRet::has_monsterinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureTowerEventRet::set_has_monsterinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureTowerEventRet::clear_has_monsterinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureTowerEventRet::clear_monsterinfo() {
  if (monsterinfo_ != NULL) monsterinfo_->::pb::TAdventureBattleMonsterInfo::Clear();
  clear_has_monsterinfo();
}
inline const ::pb::TAdventureBattleMonsterInfo& TAdventureTowerEventRet::monsterinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerEventRet.MonsterInfo)
  return monsterinfo_ != NULL ? *monsterinfo_ : *default_instance_->monsterinfo_;
}
inline ::pb::TAdventureBattleMonsterInfo* TAdventureTowerEventRet::mutable_monsterinfo() {
  set_has_monsterinfo();
  if (monsterinfo_ == NULL) monsterinfo_ = new ::pb::TAdventureBattleMonsterInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerEventRet.MonsterInfo)
  return monsterinfo_;
}
inline ::pb::TAdventureBattleMonsterInfo* TAdventureTowerEventRet::release_monsterinfo() {
  clear_has_monsterinfo();
  ::pb::TAdventureBattleMonsterInfo* temp = monsterinfo_;
  monsterinfo_ = NULL;
  return temp;
}
inline void TAdventureTowerEventRet::set_allocated_monsterinfo(::pb::TAdventureBattleMonsterInfo* monsterinfo) {
  delete monsterinfo_;
  monsterinfo_ = monsterinfo;
  if (monsterinfo) {
    set_has_monsterinfo();
  } else {
    clear_has_monsterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureTowerEventRet.MonsterInfo)
}

// -------------------------------------------------------------------

// TAdventureTowerTriggerEventRsp

// optional .pb.EEventStatus EventStatus = 1;
inline bool TAdventureTowerTriggerEventRsp::has_eventstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTowerTriggerEventRsp::set_has_eventstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTowerTriggerEventRsp::clear_has_eventstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTowerTriggerEventRsp::clear_eventstatus() {
  eventstatus_ = 0;
  clear_has_eventstatus();
}
inline ::pb::EEventStatus TAdventureTowerTriggerEventRsp::eventstatus() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerTriggerEventRsp.EventStatus)
  return static_cast< ::pb::EEventStatus >(eventstatus_);
}
inline void TAdventureTowerTriggerEventRsp::set_eventstatus(::pb::EEventStatus value) {
  assert(::pb::EEventStatus_IsValid(value));
  set_has_eventstatus();
  eventstatus_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerTriggerEventRsp.EventStatus)
}

// optional .pb.TAdventureTowerEventRet EventRet = 2;
inline bool TAdventureTowerTriggerEventRsp::has_eventret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureTowerTriggerEventRsp::set_has_eventret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureTowerTriggerEventRsp::clear_has_eventret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureTowerTriggerEventRsp::clear_eventret() {
  if (eventret_ != NULL) eventret_->::pb::TAdventureTowerEventRet::Clear();
  clear_has_eventret();
}
inline const ::pb::TAdventureTowerEventRet& TAdventureTowerTriggerEventRsp::eventret() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerTriggerEventRsp.EventRet)
  return eventret_ != NULL ? *eventret_ : *default_instance_->eventret_;
}
inline ::pb::TAdventureTowerEventRet* TAdventureTowerTriggerEventRsp::mutable_eventret() {
  set_has_eventret();
  if (eventret_ == NULL) eventret_ = new ::pb::TAdventureTowerEventRet;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerTriggerEventRsp.EventRet)
  return eventret_;
}
inline ::pb::TAdventureTowerEventRet* TAdventureTowerTriggerEventRsp::release_eventret() {
  clear_has_eventret();
  ::pb::TAdventureTowerEventRet* temp = eventret_;
  eventret_ = NULL;
  return temp;
}
inline void TAdventureTowerTriggerEventRsp::set_allocated_eventret(::pb::TAdventureTowerEventRet* eventret) {
  delete eventret_;
  eventret_ = eventret;
  if (eventret) {
    set_has_eventret();
  } else {
    clear_has_eventret();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureTowerTriggerEventRsp.EventRet)
}

// -------------------------------------------------------------------

// TAdventureTowerStartBattleReq

// optional .pb.TAdventureTowerPos BattlePos = 1;
inline bool TAdventureTowerStartBattleReq::has_battlepos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTowerStartBattleReq::set_has_battlepos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTowerStartBattleReq::clear_has_battlepos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTowerStartBattleReq::clear_battlepos() {
  if (battlepos_ != NULL) battlepos_->::pb::TAdventureTowerPos::Clear();
  clear_has_battlepos();
}
inline const ::pb::TAdventureTowerPos& TAdventureTowerStartBattleReq::battlepos() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerStartBattleReq.BattlePos)
  return battlepos_ != NULL ? *battlepos_ : *default_instance_->battlepos_;
}
inline ::pb::TAdventureTowerPos* TAdventureTowerStartBattleReq::mutable_battlepos() {
  set_has_battlepos();
  if (battlepos_ == NULL) battlepos_ = new ::pb::TAdventureTowerPos;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerStartBattleReq.BattlePos)
  return battlepos_;
}
inline ::pb::TAdventureTowerPos* TAdventureTowerStartBattleReq::release_battlepos() {
  clear_has_battlepos();
  ::pb::TAdventureTowerPos* temp = battlepos_;
  battlepos_ = NULL;
  return temp;
}
inline void TAdventureTowerStartBattleReq::set_allocated_battlepos(::pb::TAdventureTowerPos* battlepos) {
  delete battlepos_;
  battlepos_ = battlepos;
  if (battlepos) {
    set_has_battlepos();
  } else {
    clear_has_battlepos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureTowerStartBattleReq.BattlePos)
}

// repeated uint32 SquadHeroArr = 2;
inline int TAdventureTowerStartBattleReq::squadheroarr_size() const {
  return squadheroarr_.size();
}
inline void TAdventureTowerStartBattleReq::clear_squadheroarr() {
  squadheroarr_.Clear();
}
inline ::google::protobuf::uint32 TAdventureTowerStartBattleReq::squadheroarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerStartBattleReq.SquadHeroArr)
  return squadheroarr_.Get(index);
}
inline void TAdventureTowerStartBattleReq::set_squadheroarr(int index, ::google::protobuf::uint32 value) {
  squadheroarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerStartBattleReq.SquadHeroArr)
}
inline void TAdventureTowerStartBattleReq::add_squadheroarr(::google::protobuf::uint32 value) {
  squadheroarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TAdventureTowerStartBattleReq.SquadHeroArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TAdventureTowerStartBattleReq::squadheroarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTowerStartBattleReq.SquadHeroArr)
  return squadheroarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TAdventureTowerStartBattleReq::mutable_squadheroarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTowerStartBattleReq.SquadHeroArr)
  return &squadheroarr_;
}

// optional .pb.TBattleCheckParam BattleCheckParam = 3;
inline bool TAdventureTowerStartBattleReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureTowerStartBattleReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureTowerStartBattleReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureTowerStartBattleReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TAdventureTowerStartBattleReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerStartBattleReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TAdventureTowerStartBattleReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerStartBattleReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TAdventureTowerStartBattleReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TAdventureTowerStartBattleReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureTowerStartBattleReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TAdventureTowerStartBattleRsp

// optional .pb.TBattleArgs BattleArgs = 1;
inline bool TAdventureTowerStartBattleRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTowerStartBattleRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTowerStartBattleRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTowerStartBattleRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TAdventureTowerStartBattleRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerStartBattleRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TAdventureTowerStartBattleRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerStartBattleRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TAdventureTowerStartBattleRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TAdventureTowerStartBattleRsp::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureTowerStartBattleRsp.BattleArgs)
}

// optional .pb.TAdventureBattleMonsterInfo MonsterInfo = 2;
inline bool TAdventureTowerStartBattleRsp::has_monsterinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureTowerStartBattleRsp::set_has_monsterinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureTowerStartBattleRsp::clear_has_monsterinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureTowerStartBattleRsp::clear_monsterinfo() {
  if (monsterinfo_ != NULL) monsterinfo_->::pb::TAdventureBattleMonsterInfo::Clear();
  clear_has_monsterinfo();
}
inline const ::pb::TAdventureBattleMonsterInfo& TAdventureTowerStartBattleRsp::monsterinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerStartBattleRsp.MonsterInfo)
  return monsterinfo_ != NULL ? *monsterinfo_ : *default_instance_->monsterinfo_;
}
inline ::pb::TAdventureBattleMonsterInfo* TAdventureTowerStartBattleRsp::mutable_monsterinfo() {
  set_has_monsterinfo();
  if (monsterinfo_ == NULL) monsterinfo_ = new ::pb::TAdventureBattleMonsterInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerStartBattleRsp.MonsterInfo)
  return monsterinfo_;
}
inline ::pb::TAdventureBattleMonsterInfo* TAdventureTowerStartBattleRsp::release_monsterinfo() {
  clear_has_monsterinfo();
  ::pb::TAdventureBattleMonsterInfo* temp = monsterinfo_;
  monsterinfo_ = NULL;
  return temp;
}
inline void TAdventureTowerStartBattleRsp::set_allocated_monsterinfo(::pb::TAdventureBattleMonsterInfo* monsterinfo) {
  delete monsterinfo_;
  monsterinfo_ = monsterinfo;
  if (monsterinfo) {
    set_has_monsterinfo();
  } else {
    clear_has_monsterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureTowerStartBattleRsp.MonsterInfo)
}

// repeated .pb.TAdventureTowerHeroBattleInfo HeroBattleInfoArr = 3;
inline int TAdventureTowerStartBattleRsp::herobattleinfoarr_size() const {
  return herobattleinfoarr_.size();
}
inline void TAdventureTowerStartBattleRsp::clear_herobattleinfoarr() {
  herobattleinfoarr_.Clear();
}
inline const ::pb::TAdventureTowerHeroBattleInfo& TAdventureTowerStartBattleRsp::herobattleinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerStartBattleRsp.HeroBattleInfoArr)
  return herobattleinfoarr_.Get(index);
}
inline ::pb::TAdventureTowerHeroBattleInfo* TAdventureTowerStartBattleRsp::mutable_herobattleinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerStartBattleRsp.HeroBattleInfoArr)
  return herobattleinfoarr_.Mutable(index);
}
inline ::pb::TAdventureTowerHeroBattleInfo* TAdventureTowerStartBattleRsp::add_herobattleinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureTowerStartBattleRsp.HeroBattleInfoArr)
  return herobattleinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroBattleInfo >&
TAdventureTowerStartBattleRsp::herobattleinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTowerStartBattleRsp.HeroBattleInfoArr)
  return herobattleinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroBattleInfo >*
TAdventureTowerStartBattleRsp::mutable_herobattleinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTowerStartBattleRsp.HeroBattleInfoArr)
  return &herobattleinfoarr_;
}

// -------------------------------------------------------------------

// TAdventureTowerReportBattleReq

// optional .pb.TAdventureTowerPos BattlePos = 1;
inline bool TAdventureTowerReportBattleReq::has_battlepos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTowerReportBattleReq::set_has_battlepos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTowerReportBattleReq::clear_has_battlepos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTowerReportBattleReq::clear_battlepos() {
  if (battlepos_ != NULL) battlepos_->::pb::TAdventureTowerPos::Clear();
  clear_has_battlepos();
}
inline const ::pb::TAdventureTowerPos& TAdventureTowerReportBattleReq::battlepos() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerReportBattleReq.BattlePos)
  return battlepos_ != NULL ? *battlepos_ : *default_instance_->battlepos_;
}
inline ::pb::TAdventureTowerPos* TAdventureTowerReportBattleReq::mutable_battlepos() {
  set_has_battlepos();
  if (battlepos_ == NULL) battlepos_ = new ::pb::TAdventureTowerPos;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerReportBattleReq.BattlePos)
  return battlepos_;
}
inline ::pb::TAdventureTowerPos* TAdventureTowerReportBattleReq::release_battlepos() {
  clear_has_battlepos();
  ::pb::TAdventureTowerPos* temp = battlepos_;
  battlepos_ = NULL;
  return temp;
}
inline void TAdventureTowerReportBattleReq::set_allocated_battlepos(::pb::TAdventureTowerPos* battlepos) {
  delete battlepos_;
  battlepos_ = battlepos;
  if (battlepos) {
    set_has_battlepos();
  } else {
    clear_has_battlepos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureTowerReportBattleReq.BattlePos)
}

// optional .pb.TBattleResult BattleResult = 2;
inline bool TAdventureTowerReportBattleReq::has_battleresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureTowerReportBattleReq::set_has_battleresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureTowerReportBattleReq::clear_has_battleresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureTowerReportBattleReq::clear_battleresult() {
  if (battleresult_ != NULL) battleresult_->::pb::TBattleResult::Clear();
  clear_has_battleresult();
}
inline const ::pb::TBattleResult& TAdventureTowerReportBattleReq::battleresult() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerReportBattleReq.BattleResult)
  return battleresult_ != NULL ? *battleresult_ : *default_instance_->battleresult_;
}
inline ::pb::TBattleResult* TAdventureTowerReportBattleReq::mutable_battleresult() {
  set_has_battleresult();
  if (battleresult_ == NULL) battleresult_ = new ::pb::TBattleResult;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerReportBattleReq.BattleResult)
  return battleresult_;
}
inline ::pb::TBattleResult* TAdventureTowerReportBattleReq::release_battleresult() {
  clear_has_battleresult();
  ::pb::TBattleResult* temp = battleresult_;
  battleresult_ = NULL;
  return temp;
}
inline void TAdventureTowerReportBattleReq::set_allocated_battleresult(::pb::TBattleResult* battleresult) {
  delete battleresult_;
  battleresult_ = battleresult;
  if (battleresult) {
    set_has_battleresult();
  } else {
    clear_has_battleresult();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureTowerReportBattleReq.BattleResult)
}

// -------------------------------------------------------------------

// TAdventureTowerReportBattleRsp

// optional .pb.TAdventureTowerBuffBox BuffBox = 1;
inline bool TAdventureTowerReportBattleRsp::has_buffbox() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTowerReportBattleRsp::set_has_buffbox() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTowerReportBattleRsp::clear_has_buffbox() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTowerReportBattleRsp::clear_buffbox() {
  if (buffbox_ != NULL) buffbox_->::pb::TAdventureTowerBuffBox::Clear();
  clear_has_buffbox();
}
inline const ::pb::TAdventureTowerBuffBox& TAdventureTowerReportBattleRsp::buffbox() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerReportBattleRsp.BuffBox)
  return buffbox_ != NULL ? *buffbox_ : *default_instance_->buffbox_;
}
inline ::pb::TAdventureTowerBuffBox* TAdventureTowerReportBattleRsp::mutable_buffbox() {
  set_has_buffbox();
  if (buffbox_ == NULL) buffbox_ = new ::pb::TAdventureTowerBuffBox;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerReportBattleRsp.BuffBox)
  return buffbox_;
}
inline ::pb::TAdventureTowerBuffBox* TAdventureTowerReportBattleRsp::release_buffbox() {
  clear_has_buffbox();
  ::pb::TAdventureTowerBuffBox* temp = buffbox_;
  buffbox_ = NULL;
  return temp;
}
inline void TAdventureTowerReportBattleRsp::set_allocated_buffbox(::pb::TAdventureTowerBuffBox* buffbox) {
  delete buffbox_;
  buffbox_ = buffbox;
  if (buffbox) {
    set_has_buffbox();
  } else {
    clear_has_buffbox();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureTowerReportBattleRsp.BuffBox)
}

// optional .pb.TAdventureMonsterInfo MonsterInfoArr = 2;
inline bool TAdventureTowerReportBattleRsp::has_monsterinfoarr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureTowerReportBattleRsp::set_has_monsterinfoarr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureTowerReportBattleRsp::clear_has_monsterinfoarr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureTowerReportBattleRsp::clear_monsterinfoarr() {
  if (monsterinfoarr_ != NULL) monsterinfoarr_->::pb::TAdventureMonsterInfo::Clear();
  clear_has_monsterinfoarr();
}
inline const ::pb::TAdventureMonsterInfo& TAdventureTowerReportBattleRsp::monsterinfoarr() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerReportBattleRsp.MonsterInfoArr)
  return monsterinfoarr_ != NULL ? *monsterinfoarr_ : *default_instance_->monsterinfoarr_;
}
inline ::pb::TAdventureMonsterInfo* TAdventureTowerReportBattleRsp::mutable_monsterinfoarr() {
  set_has_monsterinfoarr();
  if (monsterinfoarr_ == NULL) monsterinfoarr_ = new ::pb::TAdventureMonsterInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerReportBattleRsp.MonsterInfoArr)
  return monsterinfoarr_;
}
inline ::pb::TAdventureMonsterInfo* TAdventureTowerReportBattleRsp::release_monsterinfoarr() {
  clear_has_monsterinfoarr();
  ::pb::TAdventureMonsterInfo* temp = monsterinfoarr_;
  monsterinfoarr_ = NULL;
  return temp;
}
inline void TAdventureTowerReportBattleRsp::set_allocated_monsterinfoarr(::pb::TAdventureMonsterInfo* monsterinfoarr) {
  delete monsterinfoarr_;
  monsterinfoarr_ = monsterinfoarr;
  if (monsterinfoarr) {
    set_has_monsterinfoarr();
  } else {
    clear_has_monsterinfoarr();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureTowerReportBattleRsp.MonsterInfoArr)
}

// repeated .pb.TAdventureTowerHeroStatus HeroStatusArr = 3;
inline int TAdventureTowerReportBattleRsp::herostatusarr_size() const {
  return herostatusarr_.size();
}
inline void TAdventureTowerReportBattleRsp::clear_herostatusarr() {
  herostatusarr_.Clear();
}
inline const ::pb::TAdventureTowerHeroStatus& TAdventureTowerReportBattleRsp::herostatusarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerReportBattleRsp.HeroStatusArr)
  return herostatusarr_.Get(index);
}
inline ::pb::TAdventureTowerHeroStatus* TAdventureTowerReportBattleRsp::mutable_herostatusarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerReportBattleRsp.HeroStatusArr)
  return herostatusarr_.Mutable(index);
}
inline ::pb::TAdventureTowerHeroStatus* TAdventureTowerReportBattleRsp::add_herostatusarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureTowerReportBattleRsp.HeroStatusArr)
  return herostatusarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroStatus >&
TAdventureTowerReportBattleRsp::herostatusarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTowerReportBattleRsp.HeroStatusArr)
  return herostatusarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerHeroStatus >*
TAdventureTowerReportBattleRsp::mutable_herostatusarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTowerReportBattleRsp.HeroStatusArr)
  return &herostatusarr_;
}

// -------------------------------------------------------------------

// TAdventureTowerReportPosReq

// optional int32 PosX = 1;
inline bool TAdventureTowerReportPosReq::has_posx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTowerReportPosReq::set_has_posx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTowerReportPosReq::clear_has_posx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTowerReportPosReq::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 TAdventureTowerReportPosReq::posx() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerReportPosReq.PosX)
  return posx_;
}
inline void TAdventureTowerReportPosReq::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerReportPosReq.PosX)
}

// optional int32 PosY = 2;
inline bool TAdventureTowerReportPosReq::has_posy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureTowerReportPosReq::set_has_posy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureTowerReportPosReq::clear_has_posy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureTowerReportPosReq::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 TAdventureTowerReportPosReq::posy() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerReportPosReq.PosY)
  return posy_;
}
inline void TAdventureTowerReportPosReq::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerReportPosReq.PosY)
}

// -------------------------------------------------------------------

// TAdventureTowerPassBlocksReq

// repeated .pb.TAdventureTowerPos BlockArr = 1;
inline int TAdventureTowerPassBlocksReq::blockarr_size() const {
  return blockarr_.size();
}
inline void TAdventureTowerPassBlocksReq::clear_blockarr() {
  blockarr_.Clear();
}
inline const ::pb::TAdventureTowerPos& TAdventureTowerPassBlocksReq::blockarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerPassBlocksReq.BlockArr)
  return blockarr_.Get(index);
}
inline ::pb::TAdventureTowerPos* TAdventureTowerPassBlocksReq::mutable_blockarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTowerPassBlocksReq.BlockArr)
  return blockarr_.Mutable(index);
}
inline ::pb::TAdventureTowerPos* TAdventureTowerPassBlocksReq::add_blockarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureTowerPassBlocksReq.BlockArr)
  return blockarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerPos >&
TAdventureTowerPassBlocksReq::blockarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTowerPassBlocksReq.BlockArr)
  return blockarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTowerPos >*
TAdventureTowerPassBlocksReq::mutable_blockarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTowerPassBlocksReq.BlockArr)
  return &blockarr_;
}

// -------------------------------------------------------------------

// TAdventureTowerPos

// optional uint32 LayerIndex = 1;
inline bool TAdventureTowerPos::has_layerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTowerPos::set_has_layerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTowerPos::clear_has_layerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTowerPos::clear_layerindex() {
  layerindex_ = 0u;
  clear_has_layerindex();
}
inline ::google::protobuf::uint32 TAdventureTowerPos::layerindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerPos.LayerIndex)
  return layerindex_;
}
inline void TAdventureTowerPos::set_layerindex(::google::protobuf::uint32 value) {
  set_has_layerindex();
  layerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerPos.LayerIndex)
}

// optional int32 PosX = 2;
inline bool TAdventureTowerPos::has_posx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureTowerPos::set_has_posx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureTowerPos::clear_has_posx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureTowerPos::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 TAdventureTowerPos::posx() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerPos.PosX)
  return posx_;
}
inline void TAdventureTowerPos::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerPos.PosX)
}

// optional int32 PosY = 3;
inline bool TAdventureTowerPos::has_posy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureTowerPos::set_has_posy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureTowerPos::clear_has_posy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureTowerPos::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 TAdventureTowerPos::posy() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTowerPos.PosY)
  return posy_;
}
inline void TAdventureTowerPos::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTowerPos.PosY)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fAdventureTower_2eproto__INCLUDED
