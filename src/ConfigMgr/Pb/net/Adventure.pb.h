// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Adventure.proto

#ifndef PROTOBUF_net_2fAdventure_2eproto__INCLUDED
#define PROTOBUF_net_2fAdventure_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/AdventureBase.pb.h"
#include "net/AdventureTeam.pb.h"
#include "module/AdventureMap.pb.h"
#include "net/CommonReward.pb.h"
#include "net/Battle.pb.h"
#include "net/Common.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fAdventure_2eproto();
void protobuf_AssignDesc_net_2fAdventure_2eproto();
void protobuf_ShutdownFile_net_2fAdventure_2eproto();

class TAdventureGetInfoRsp;
class TAdventureActivityInfo;
class TAdventureGetListReq;
class TAdventureGetListRsp;
class TAdventureRefreshListRsp;
class TAdventureStartMapReq;
class TAdventureEnterMapReq;
class TAdventureStartOrEnterMapRsp;
class TAdventureCastingEventInfo;
class TAdventureCurMap;
class TAdventureReportPosReq;
class TAdventureQuitMapRsp;
class TAdventureTriggerEventReq;
class TAdventureTriggerEventRsp;
class TAdventureAnswerReq;
class TAdventureAnswerEndReq;
class TAdventureGetBuffRsp;
class TAdventureReportBattleReq;
class TAdventureReportBattleRsp;
class TAdventureStartBattleReq;
class TAdventureStartBattleRsp;
class TAdventureBuyNumReq;
class TAdventurePassBlocksReq;
class TAdventureReportTalkReq;
class TAdventureReportTalkRsp;
class TAdventureBuyGoodsReq;
class TAdventureReceiveCompleteRewardRsp;
class TAdventureSendToTeamMateReq;
class TAdventureCallTeamMateReq;
class TAdventureCallOrSendRsp;
class TAdventureAcceptCallReq;
class TAdventureGetTeamRankReq;
class TAdventureGetTeamRankRsp;
class TAdventureGetCurMapRewardRsp;
class TAdventureTeamExchangeRpcReq;
class TAdventureTeamExchangeRpcRsp;
class TAdventureQualityPassInfo;
class TAdventureGetPassInfoRsp;
class TAdventureRefreshActMapReq;
class TAdventureRefreshActMapRsp;
class TAdventureBackToStartPosRsp;
class TAdventureSetRatioModeReq;
class TAdventureGetHangUpInfoRsp;
class TAdventureSweepReq;
class TAdventureSweepRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TAdventureGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureGetInfoRsp : public ::google::protobuf::Message {
 public:
  TAdventureGetInfoRsp();
  virtual ~TAdventureGetInfoRsp();

  TAdventureGetInfoRsp(const TAdventureGetInfoRsp& from);

  inline TAdventureGetInfoRsp& operator=(const TAdventureGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureGetInfoRsp& default_instance();

  void Swap(TAdventureGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TAdventureGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureGetInfoRsp& from);
  void MergeFrom(const TAdventureGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AdventureNum = 1;
  inline bool has_adventurenum() const;
  inline void clear_adventurenum();
  static const int kAdventureNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetInfoRsp</name>
  	<Function>
  		<name>adventurenum</name>
  		<replaceName>AdventureNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_adventurenum</name>
  		<replaceName>AdventureNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_adventurenum</name>
  		<replaceName>AdventureNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 adventurenum() const;
  inline void set_adventurenum(::google::protobuf::uint32 value);

  // optional uint32 BuyAdventureNum = 2;
  inline bool has_buyadventurenum() const;
  inline void clear_buyadventurenum();
  static const int kBuyAdventureNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetInfoRsp</name>
  	<Function>
  		<name>buyadventurenum</name>
  		<replaceName>BuyAdventureNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buyadventurenum</name>
  		<replaceName>BuyAdventureNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buyadventurenum</name>
  		<replaceName>BuyAdventureNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buyadventurenum() const;
  inline void set_buyadventurenum(::google::protobuf::uint32 value);

  // optional uint32 FreeRefreshNum = 3;
  inline bool has_freerefreshnum() const;
  inline void clear_freerefreshnum();
  static const int kFreeRefreshNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetInfoRsp</name>
  	<Function>
  		<name>freerefreshnum</name>
  		<replaceName>FreeRefreshNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_freerefreshnum</name>
  		<replaceName>FreeRefreshNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_freerefreshnum</name>
  		<replaceName>FreeRefreshNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 freerefreshnum() const;
  inline void set_freerefreshnum(::google::protobuf::uint32 value);

  // optional uint32 GoldRefreshNum = 4;
  inline bool has_goldrefreshnum() const;
  inline void clear_goldrefreshnum();
  static const int kGoldRefreshNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetInfoRsp</name>
  	<Function>
  		<name>goldrefreshnum</name>
  		<replaceName>GoldRefreshNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goldrefreshnum</name>
  		<replaceName>GoldRefreshNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goldrefreshnum</name>
  		<replaceName>GoldRefreshNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 goldrefreshnum() const;
  inline void set_goldrefreshnum(::google::protobuf::uint32 value);

  // optional uint32 AdventureLevelId = 5;
  inline bool has_adventurelevelid() const;
  inline void clear_adventurelevelid();
  static const int kAdventureLevelIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetInfoRsp</name>
  	<Function>
  		<name>adventurelevelid</name>
  		<replaceName>AdventureLevelId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_adventurelevelid</name>
  		<replaceName>AdventureLevelId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_adventurelevelid</name>
  		<replaceName>AdventureLevelId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 adventurelevelid() const;
  inline void set_adventurelevelid(::google::protobuf::uint32 value);

  // optional .pb.TAdventureMapList MapList = 6;
  inline bool has_maplist() const;
  inline void clear_maplist();
  static const int kMapListFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetInfoRsp</name>
  	<Function>
  		<name>maplist</name>
  		<replaceName>MapList</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maplist</name>
  		<replaceName>MapList</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_maplist</name>
  		<replaceName>MapList</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maplist</name>
  		<replaceName>MapList</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureMapList& maplist() const;
  inline ::pb::TAdventureMapList* mutable_maplist();
  inline ::pb::TAdventureMapList* release_maplist();
  inline void set_allocated_maplist(::pb::TAdventureMapList* maplist);

  // repeated .pb.TAdventLevelExpNum ExpNumArr = 7;
  inline int expnumarr_size() const;
  inline void clear_expnumarr();
  static const int kExpNumArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetInfoRsp</name>
  	<Function>
  		<name>expnumarr</name>
  		<replaceName>ExpNumArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_expnumarr</name>
  		<replaceName>ExpNumArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_expnumarr</name>
  		<replaceName>ExpNumArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_expnumarr</name>
  		<replaceName>ExpNumArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>expnumarr_size</name>
  		<replaceName>ExpNumArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventLevelExpNum& expnumarr(int index) const;
  inline ::pb::TAdventLevelExpNum* mutable_expnumarr(int index);
  inline ::pb::TAdventLevelExpNum* add_expnumarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventLevelExpNum >&
      expnumarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventLevelExpNum >*
      mutable_expnumarr();

  // optional .pb.EAdventureType AdventureType = 8;
  inline bool has_adventuretype() const;
  inline void clear_adventuretype();
  static const int kAdventureTypeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetInfoRsp</name>
  	<Function>
  		<name>adventuretype</name>
  		<replaceName>AdventureType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_adventuretype</name>
  		<replaceName>AdventureType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_adventuretype</name>
  		<replaceName>AdventureType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAdventureType adventuretype() const;
  inline void set_adventuretype(::pb::EAdventureType value);

  // optional uint64 MapId = 9;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetInfoRsp</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mapid() const;
  inline void set_mapid(::google::protobuf::uint64 value);

  // optional uint64 TeamId = 10;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetInfoRsp</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint64 MapExpireTime = 11;
  inline bool has_mapexpiretime() const;
  inline void clear_mapexpiretime();
  static const int kMapExpireTimeFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetInfoRsp</name>
  	<Function>
  		<name>mapexpiretime</name>
  		<replaceName>MapExpireTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapexpiretime</name>
  		<replaceName>MapExpireTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapexpiretime</name>
  		<replaceName>MapExpireTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mapexpiretime() const;
  inline void set_mapexpiretime(::google::protobuf::uint64 value);

  // optional uint32 ActAdventureNum = 12;
  inline bool has_actadventurenum() const;
  inline void clear_actadventurenum();
  static const int kActAdventureNumFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetInfoRsp</name>
  	<Function>
  		<name>actadventurenum</name>
  		<replaceName>ActAdventureNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_actadventurenum</name>
  		<replaceName>ActAdventureNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_actadventurenum</name>
  		<replaceName>ActAdventureNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 actadventurenum() const;
  inline void set_actadventurenum(::google::protobuf::uint32 value);

  // optional .pb.TAdventureActivityInfo ActInfo = 13;
  inline bool has_actinfo() const;
  inline void clear_actinfo();
  static const int kActInfoFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetInfoRsp</name>
  	<Function>
  		<name>actinfo</name>
  		<replaceName>ActInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_actinfo</name>
  		<replaceName>ActInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_actinfo</name>
  		<replaceName>ActInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_actinfo</name>
  		<replaceName>ActInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureActivityInfo& actinfo() const;
  inline ::pb::TAdventureActivityInfo* mutable_actinfo();
  inline ::pb::TAdventureActivityInfo* release_actinfo();
  inline void set_allocated_actinfo(::pb::TAdventureActivityInfo* actinfo);

  // optional uint32 RatioMode = 14;
  inline bool has_ratiomode() const;
  inline void clear_ratiomode();
  static const int kRatioModeFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetInfoRsp</name>
  	<Function>
  		<name>ratiomode</name>
  		<replaceName>RatioMode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ratiomode</name>
  		<replaceName>RatioMode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ratiomode</name>
  		<replaceName>RatioMode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 ratiomode() const;
  inline void set_ratiomode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureGetInfoRsp)
 private:
  inline void set_has_adventurenum();
  inline void clear_has_adventurenum();
  inline void set_has_buyadventurenum();
  inline void clear_has_buyadventurenum();
  inline void set_has_freerefreshnum();
  inline void clear_has_freerefreshnum();
  inline void set_has_goldrefreshnum();
  inline void clear_has_goldrefreshnum();
  inline void set_has_adventurelevelid();
  inline void clear_has_adventurelevelid();
  inline void set_has_maplist();
  inline void clear_has_maplist();
  inline void set_has_adventuretype();
  inline void clear_has_adventuretype();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_mapexpiretime();
  inline void clear_has_mapexpiretime();
  inline void set_has_actadventurenum();
  inline void clear_has_actadventurenum();
  inline void set_has_actinfo();
  inline void clear_has_actinfo();
  inline void set_has_ratiomode();
  inline void clear_has_ratiomode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 adventurenum_;
  ::google::protobuf::uint32 buyadventurenum_;
  ::google::protobuf::uint32 freerefreshnum_;
  ::google::protobuf::uint32 goldrefreshnum_;
  ::pb::TAdventureMapList* maplist_;
  ::google::protobuf::uint32 adventurelevelid_;
  int adventuretype_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventLevelExpNum > expnumarr_;
  ::google::protobuf::uint64 mapid_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 mapexpiretime_;
  ::pb::TAdventureActivityInfo* actinfo_;
  ::google::protobuf::uint32 actadventurenum_;
  ::google::protobuf::uint32 ratiomode_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureActivityInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureActivityInfo : public ::google::protobuf::Message {
 public:
  TAdventureActivityInfo();
  virtual ~TAdventureActivityInfo();

  TAdventureActivityInfo(const TAdventureActivityInfo& from);

  inline TAdventureActivityInfo& operator=(const TAdventureActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureActivityInfo& default_instance();

  void Swap(TAdventureActivityInfo* other);

  // implements Message ----------------------------------------------

  TAdventureActivityInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureActivityInfo& from);
  void MergeFrom(const TAdventureActivityInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CurActMapId = 1;
  inline bool has_curactmapid() const;
  inline void clear_curactmapid();
  static const int kCurActMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureActivityInfo</name>
  	<Function>
  		<name>curactmapid</name>
  		<replaceName>CurActMapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curactmapid</name>
  		<replaceName>CurActMapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curactmapid</name>
  		<replaceName>CurActMapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curactmapid() const;
  inline void set_curactmapid(::google::protobuf::uint32 value);

  // optional uint32 ActAdventureNum = 2;
  inline bool has_actadventurenum() const;
  inline void clear_actadventurenum();
  static const int kActAdventureNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureActivityInfo</name>
  	<Function>
  		<name>actadventurenum</name>
  		<replaceName>ActAdventureNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_actadventurenum</name>
  		<replaceName>ActAdventureNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_actadventurenum</name>
  		<replaceName>ActAdventureNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 actadventurenum() const;
  inline void set_actadventurenum(::google::protobuf::uint32 value);

  // optional uint32 ActFreeRfrNum = 3;
  inline bool has_actfreerfrnum() const;
  inline void clear_actfreerfrnum();
  static const int kActFreeRfrNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureActivityInfo</name>
  	<Function>
  		<name>actfreerfrnum</name>
  		<replaceName>ActFreeRfrNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_actfreerfrnum</name>
  		<replaceName>ActFreeRfrNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_actfreerfrnum</name>
  		<replaceName>ActFreeRfrNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 actfreerfrnum() const;
  inline void set_actfreerfrnum(::google::protobuf::uint32 value);

  // optional uint32 ActGoldRfrNum = 4;
  inline bool has_actgoldrfrnum() const;
  inline void clear_actgoldrfrnum();
  static const int kActGoldRfrNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureActivityInfo</name>
  	<Function>
  		<name>actgoldrfrnum</name>
  		<replaceName>ActGoldRfrNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_actgoldrfrnum</name>
  		<replaceName>ActGoldRfrNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_actgoldrfrnum</name>
  		<replaceName>ActGoldRfrNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 actgoldrfrnum() const;
  inline void set_actgoldrfrnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureActivityInfo)
 private:
  inline void set_has_curactmapid();
  inline void clear_has_curactmapid();
  inline void set_has_actadventurenum();
  inline void clear_has_actadventurenum();
  inline void set_has_actfreerfrnum();
  inline void clear_has_actfreerfrnum();
  inline void set_has_actgoldrfrnum();
  inline void clear_has_actgoldrfrnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 curactmapid_;
  ::google::protobuf::uint32 actadventurenum_;
  ::google::protobuf::uint32 actfreerfrnum_;
  ::google::protobuf::uint32 actgoldrfrnum_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureActivityInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureGetListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureGetListReq : public ::google::protobuf::Message {
 public:
  TAdventureGetListReq();
  virtual ~TAdventureGetListReq();

  TAdventureGetListReq(const TAdventureGetListReq& from);

  inline TAdventureGetListReq& operator=(const TAdventureGetListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureGetListReq& default_instance();

  void Swap(TAdventureGetListReq* other);

  // implements Message ----------------------------------------------

  TAdventureGetListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureGetListReq& from);
  void MergeFrom(const TAdventureGetListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AdventureLevelId = 1;
  inline bool has_adventurelevelid() const;
  inline void clear_adventurelevelid();
  static const int kAdventureLevelIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetListReq</name>
  	<Function>
  		<name>adventurelevelid</name>
  		<replaceName>AdventureLevelId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_adventurelevelid</name>
  		<replaceName>AdventureLevelId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_adventurelevelid</name>
  		<replaceName>AdventureLevelId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 adventurelevelid() const;
  inline void set_adventurelevelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureGetListReq)
 private:
  inline void set_has_adventurelevelid();
  inline void clear_has_adventurelevelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 adventurelevelid_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureGetListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureGetListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureGetListRsp : public ::google::protobuf::Message {
 public:
  TAdventureGetListRsp();
  virtual ~TAdventureGetListRsp();

  TAdventureGetListRsp(const TAdventureGetListRsp& from);

  inline TAdventureGetListRsp& operator=(const TAdventureGetListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureGetListRsp& default_instance();

  void Swap(TAdventureGetListRsp* other);

  // implements Message ----------------------------------------------

  TAdventureGetListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureGetListRsp& from);
  void MergeFrom(const TAdventureGetListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAdventureMapList MapList = 1;
  inline bool has_maplist() const;
  inline void clear_maplist();
  static const int kMapListFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetListRsp</name>
  	<Function>
  		<name>maplist</name>
  		<replaceName>MapList</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maplist</name>
  		<replaceName>MapList</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_maplist</name>
  		<replaceName>MapList</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maplist</name>
  		<replaceName>MapList</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureMapList& maplist() const;
  inline ::pb::TAdventureMapList* mutable_maplist();
  inline ::pb::TAdventureMapList* release_maplist();
  inline void set_allocated_maplist(::pb::TAdventureMapList* maplist);

  // @@protoc_insertion_point(class_scope:pb.TAdventureGetListRsp)
 private:
  inline void set_has_maplist();
  inline void clear_has_maplist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAdventureMapList* maplist_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureGetListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureRefreshListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureRefreshListRsp : public ::google::protobuf::Message {
 public:
  TAdventureRefreshListRsp();
  virtual ~TAdventureRefreshListRsp();

  TAdventureRefreshListRsp(const TAdventureRefreshListRsp& from);

  inline TAdventureRefreshListRsp& operator=(const TAdventureRefreshListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureRefreshListRsp& default_instance();

  void Swap(TAdventureRefreshListRsp* other);

  // implements Message ----------------------------------------------

  TAdventureRefreshListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureRefreshListRsp& from);
  void MergeFrom(const TAdventureRefreshListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAdventureMapList MapList = 1;
  inline bool has_maplist() const;
  inline void clear_maplist();
  static const int kMapListFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureRefreshListRsp</name>
  	<Function>
  		<name>maplist</name>
  		<replaceName>MapList</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maplist</name>
  		<replaceName>MapList</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_maplist</name>
  		<replaceName>MapList</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maplist</name>
  		<replaceName>MapList</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureMapList& maplist() const;
  inline ::pb::TAdventureMapList* mutable_maplist();
  inline ::pb::TAdventureMapList* release_maplist();
  inline void set_allocated_maplist(::pb::TAdventureMapList* maplist);

  // @@protoc_insertion_point(class_scope:pb.TAdventureRefreshListRsp)
 private:
  inline void set_has_maplist();
  inline void clear_has_maplist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAdventureMapList* maplist_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureRefreshListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureStartMapReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureStartMapReq : public ::google::protobuf::Message {
 public:
  TAdventureStartMapReq();
  virtual ~TAdventureStartMapReq();

  TAdventureStartMapReq(const TAdventureStartMapReq& from);

  inline TAdventureStartMapReq& operator=(const TAdventureStartMapReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureStartMapReq& default_instance();

  void Swap(TAdventureStartMapReq* other);

  // implements Message ----------------------------------------------

  TAdventureStartMapReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureStartMapReq& from);
  void MergeFrom(const TAdventureStartMapReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 MapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureStartMapReq</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mapid() const;
  inline void set_mapid(::google::protobuf::uint64 value);

  // optional .pb.EAdventureType AdventureType = 2;
  inline bool has_adventuretype() const;
  inline void clear_adventuretype();
  static const int kAdventureTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureStartMapReq</name>
  	<Function>
  		<name>adventuretype</name>
  		<replaceName>AdventureType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_adventuretype</name>
  		<replaceName>AdventureType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_adventuretype</name>
  		<replaceName>AdventureType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAdventureType adventuretype() const;
  inline void set_adventuretype(::pb::EAdventureType value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureStartMapReq)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_adventuretype();
  inline void clear_has_adventuretype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 mapid_;
  int adventuretype_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureStartMapReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEnterMapReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEnterMapReq : public ::google::protobuf::Message {
 public:
  TAdventureEnterMapReq();
  virtual ~TAdventureEnterMapReq();

  TAdventureEnterMapReq(const TAdventureEnterMapReq& from);

  inline TAdventureEnterMapReq& operator=(const TAdventureEnterMapReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEnterMapReq& default_instance();

  void Swap(TAdventureEnterMapReq* other);

  // implements Message ----------------------------------------------

  TAdventureEnterMapReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEnterMapReq& from);
  void MergeFrom(const TAdventureEnterMapReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnterMapReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint64 MapId = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnterMapReq</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mapid() const;
  inline void set_mapid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureEnterMapReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 mapid_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEnterMapReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureStartOrEnterMapRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureStartOrEnterMapRsp : public ::google::protobuf::Message {
 public:
  TAdventureStartOrEnterMapRsp();
  virtual ~TAdventureStartOrEnterMapRsp();

  TAdventureStartOrEnterMapRsp(const TAdventureStartOrEnterMapRsp& from);

  inline TAdventureStartOrEnterMapRsp& operator=(const TAdventureStartOrEnterMapRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureStartOrEnterMapRsp& default_instance();

  void Swap(TAdventureStartOrEnterMapRsp* other);

  // implements Message ----------------------------------------------

  TAdventureStartOrEnterMapRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureStartOrEnterMapRsp& from);
  void MergeFrom(const TAdventureStartOrEnterMapRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAdventureCurMap CurMapInfo = 1;
  inline bool has_curmapinfo() const;
  inline void clear_curmapinfo();
  static const int kCurMapInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureStartOrEnterMapRsp</name>
  	<Function>
  		<name>curmapinfo</name>
  		<replaceName>CurMapInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curmapinfo</name>
  		<replaceName>CurMapInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_curmapinfo</name>
  		<replaceName>CurMapInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curmapinfo</name>
  		<replaceName>CurMapInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureCurMap& curmapinfo() const;
  inline ::pb::TAdventureCurMap* mutable_curmapinfo();
  inline ::pb::TAdventureCurMap* release_curmapinfo();
  inline void set_allocated_curmapinfo(::pb::TAdventureCurMap* curmapinfo);

  // @@protoc_insertion_point(class_scope:pb.TAdventureStartOrEnterMapRsp)
 private:
  inline void set_has_curmapinfo();
  inline void clear_has_curmapinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAdventureCurMap* curmapinfo_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureStartOrEnterMapRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureCastingEventInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureCastingEventInfo : public ::google::protobuf::Message {
 public:
  TAdventureCastingEventInfo();
  virtual ~TAdventureCastingEventInfo();

  TAdventureCastingEventInfo(const TAdventureCastingEventInfo& from);

  inline TAdventureCastingEventInfo& operator=(const TAdventureCastingEventInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureCastingEventInfo& default_instance();

  void Swap(TAdventureCastingEventInfo* other);

  // implements Message ----------------------------------------------

  TAdventureCastingEventInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureCastingEventInfo& from);
  void MergeFrom(const TAdventureCastingEventInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerIndex = 1;
  inline bool has_layerindex() const;
  inline void clear_layerindex();
  static const int kLayerIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCastingEventInfo</name>
  	<Function>
  		<name>layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerindex() const;
  inline void set_layerindex(::google::protobuf::uint32 value);

  // optional int32 PosX = 2;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCastingEventInfo</name>
  	<Function>
  		<name>posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // optional int32 PosY = 3;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCastingEventInfo</name>
  	<Function>
  		<name>posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // optional uint32 CastingNum = 4;
  inline bool has_castingnum() const;
  inline void clear_castingnum();
  static const int kCastingNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCastingEventInfo</name>
  	<Function>
  		<name>castingnum</name>
  		<replaceName>CastingNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_castingnum</name>
  		<replaceName>CastingNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_castingnum</name>
  		<replaceName>CastingNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 castingnum() const;
  inline void set_castingnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureCastingEventInfo)
 private:
  inline void set_has_layerindex();
  inline void clear_has_layerindex();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_castingnum();
  inline void clear_has_castingnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 layerindex_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::uint32 castingnum_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureCastingEventInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureCurMap</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureCurMap : public ::google::protobuf::Message {
 public:
  TAdventureCurMap();
  virtual ~TAdventureCurMap();

  TAdventureCurMap(const TAdventureCurMap& from);

  inline TAdventureCurMap& operator=(const TAdventureCurMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureCurMap& default_instance();

  void Swap(TAdventureCurMap* other);

  // implements Message ----------------------------------------------

  TAdventureCurMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureCurMap& from);
  void MergeFrom(const TAdventureCurMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.AdventureMap MapBaseInfo = 1;
  inline bool has_mapbaseinfo() const;
  inline void clear_mapbaseinfo();
  static const int kMapBaseInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCurMap</name>
  	<Function>
  		<name>mapbaseinfo</name>
  		<replaceName>MapBaseInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapbaseinfo</name>
  		<replaceName>MapBaseInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_mapbaseinfo</name>
  		<replaceName>MapBaseInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapbaseinfo</name>
  		<replaceName>MapBaseInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AdventureMap& mapbaseinfo() const;
  inline ::pb::AdventureMap* mutable_mapbaseinfo();
  inline ::pb::AdventureMap* release_mapbaseinfo();
  inline void set_allocated_mapbaseinfo(::pb::AdventureMap* mapbaseinfo);

  // repeated .pb.TAdventureTeamRecord RecordArray = 2;
  inline int recordarray_size() const;
  inline void clear_recordarray();
  static const int kRecordArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCurMap</name>
  	<Function>
  		<name>recordarray</name>
  		<replaceName>RecordArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarray</name>
  		<replaceName>RecordArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarray</name>
  		<replaceName>RecordArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarray</name>
  		<replaceName>RecordArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarray_size</name>
  		<replaceName>RecordArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureTeamRecord& recordarray(int index) const;
  inline ::pb::TAdventureTeamRecord* mutable_recordarray(int index);
  inline ::pb::TAdventureTeamRecord* add_recordarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTeamRecord >&
      recordarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTeamRecord >*
      mutable_recordarray();

  // repeated .pb.TAdventureUserSimpleInfo AllUserArr = 3;
  inline int alluserarr_size() const;
  inline void clear_alluserarr();
  static const int kAllUserArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCurMap</name>
  	<Function>
  		<name>alluserarr</name>
  		<replaceName>AllUserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_alluserarr</name>
  		<replaceName>AllUserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_alluserarr</name>
  		<replaceName>AllUserArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_alluserarr</name>
  		<replaceName>AllUserArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>alluserarr_size</name>
  		<replaceName>AllUserArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureUserSimpleInfo& alluserarr(int index) const;
  inline ::pb::TAdventureUserSimpleInfo* mutable_alluserarr(int index);
  inline ::pb::TAdventureUserSimpleInfo* add_alluserarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureUserSimpleInfo >&
      alluserarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureUserSimpleInfo >*
      mutable_alluserarr();

  // repeated .pb.TUserInfoWithPos UserInMapArr = 4;
  inline int userinmaparr_size() const;
  inline void clear_userinmaparr();
  static const int kUserInMapArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCurMap</name>
  	<Function>
  		<name>userinmaparr</name>
  		<replaceName>UserInMapArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userinmaparr</name>
  		<replaceName>UserInMapArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userinmaparr</name>
  		<replaceName>UserInMapArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinmaparr</name>
  		<replaceName>UserInMapArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userinmaparr_size</name>
  		<replaceName>UserInMapArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserInfoWithPos& userinmaparr(int index) const;
  inline ::pb::TUserInfoWithPos* mutable_userinmaparr(int index);
  inline ::pb::TUserInfoWithPos* add_userinmaparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserInfoWithPos >&
      userinmaparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserInfoWithPos >*
      mutable_userinmaparr();

  // optional .pb.EAdventureType AdventureType = 5;
  inline bool has_adventuretype() const;
  inline void clear_adventuretype();
  static const int kAdventureTypeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCurMap</name>
  	<Function>
  		<name>adventuretype</name>
  		<replaceName>AdventureType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_adventuretype</name>
  		<replaceName>AdventureType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_adventuretype</name>
  		<replaceName>AdventureType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAdventureType adventuretype() const;
  inline void set_adventuretype(::pb::EAdventureType value);

  // optional uint64 TeamId = 7;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCurMap</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint32 CurEnergy = 8;
  inline bool has_curenergy() const;
  inline void clear_curenergy();
  static const int kCurEnergyFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCurMap</name>
  	<Function>
  		<name>curenergy</name>
  		<replaceName>CurEnergy</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curenergy</name>
  		<replaceName>CurEnergy</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curenergy</name>
  		<replaceName>CurEnergy</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curenergy() const;
  inline void set_curenergy(::google::protobuf::uint32 value);

  // optional uint64 RewardTime = 9;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCurMap</name>
  	<Function>
  		<name>rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::uint64 value);

  // optional uint64 LeaderUid = 10;
  inline bool has_leaderuid() const;
  inline void clear_leaderuid();
  static const int kLeaderUidFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCurMap</name>
  	<Function>
  		<name>leaderuid</name>
  		<replaceName>LeaderUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leaderuid</name>
  		<replaceName>LeaderUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leaderuid</name>
  		<replaceName>LeaderUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 leaderuid() const;
  inline void set_leaderuid(::google::protobuf::uint64 value);

  // repeated .pb.TAdventureMonsterInfo MonsterInfoArr = 11;
  inline int monsterinfoarr_size() const;
  inline void clear_monsterinfoarr();
  static const int kMonsterInfoArrFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCurMap</name>
  	<Function>
  		<name>monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>monsterinfoarr_size</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureMonsterInfo& monsterinfoarr(int index) const;
  inline ::pb::TAdventureMonsterInfo* mutable_monsterinfoarr(int index);
  inline ::pb::TAdventureMonsterInfo* add_monsterinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMonsterInfo >&
      monsterinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMonsterInfo >*
      mutable_monsterinfoarr();

  // optional uint64 EnterTime = 12;
  inline bool has_entertime() const;
  inline void clear_entertime();
  static const int kEnterTimeFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCurMap</name>
  	<Function>
  		<name>entertime</name>
  		<replaceName>EnterTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_entertime</name>
  		<replaceName>EnterTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_entertime</name>
  		<replaceName>EnterTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 entertime() const;
  inline void set_entertime(::google::protobuf::uint64 value);

  // repeated .pb.TAdventureBusinessMan ShopArr = 13;
  inline int shoparr_size() const;
  inline void clear_shoparr();
  static const int kShopArrFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCurMap</name>
  	<Function>
  		<name>shoparr</name>
  		<replaceName>ShopArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_shoparr</name>
  		<replaceName>ShopArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_shoparr</name>
  		<replaceName>ShopArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_shoparr</name>
  		<replaceName>ShopArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>shoparr_size</name>
  		<replaceName>ShopArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureBusinessMan& shoparr(int index) const;
  inline ::pb::TAdventureBusinessMan* mutable_shoparr(int index);
  inline ::pb::TAdventureBusinessMan* add_shoparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureBusinessMan >&
      shoparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureBusinessMan >*
      mutable_shoparr();

  // optional uint32 RatioMode = 14;
  inline bool has_ratiomode() const;
  inline void clear_ratiomode();
  static const int kRatioModeFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCurMap</name>
  	<Function>
  		<name>ratiomode</name>
  		<replaceName>RatioMode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ratiomode</name>
  		<replaceName>RatioMode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ratiomode</name>
  		<replaceName>RatioMode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 ratiomode() const;
  inline void set_ratiomode(::google::protobuf::uint32 value);

  // repeated .pb.TAdventureCastingEventInfo CastingEventInfoArr = 15;
  inline int castingeventinfoarr_size() const;
  inline void clear_castingeventinfoarr();
  static const int kCastingEventInfoArrFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCurMap</name>
  	<Function>
  		<name>castingeventinfoarr</name>
  		<replaceName>CastingEventInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_castingeventinfoarr</name>
  		<replaceName>CastingEventInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_castingeventinfoarr</name>
  		<replaceName>CastingEventInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_castingeventinfoarr</name>
  		<replaceName>CastingEventInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>castingeventinfoarr_size</name>
  		<replaceName>CastingEventInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureCastingEventInfo& castingeventinfoarr(int index) const;
  inline ::pb::TAdventureCastingEventInfo* mutable_castingeventinfoarr(int index);
  inline ::pb::TAdventureCastingEventInfo* add_castingeventinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureCastingEventInfo >&
      castingeventinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureCastingEventInfo >*
      mutable_castingeventinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureCurMap)
 private:
  inline void set_has_mapbaseinfo();
  inline void clear_has_mapbaseinfo();
  inline void set_has_adventuretype();
  inline void clear_has_adventuretype();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_curenergy();
  inline void clear_has_curenergy();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();
  inline void set_has_leaderuid();
  inline void clear_has_leaderuid();
  inline void set_has_entertime();
  inline void clear_has_entertime();
  inline void set_has_ratiomode();
  inline void clear_has_ratiomode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::AdventureMap* mapbaseinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTeamRecord > recordarray_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureUserSimpleInfo > alluserarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserInfoWithPos > userinmaparr_;
  ::google::protobuf::uint64 teamid_;
  int adventuretype_;
  ::google::protobuf::uint32 curenergy_;
  ::google::protobuf::uint64 rewardtime_;
  ::google::protobuf::uint64 leaderuid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMonsterInfo > monsterinfoarr_;
  ::google::protobuf::uint64 entertime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureBusinessMan > shoparr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureCastingEventInfo > castingeventinfoarr_;
  ::google::protobuf::uint32 ratiomode_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureCurMap* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureReportPosReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureReportPosReq : public ::google::protobuf::Message {
 public:
  TAdventureReportPosReq();
  virtual ~TAdventureReportPosReq();

  TAdventureReportPosReq(const TAdventureReportPosReq& from);

  inline TAdventureReportPosReq& operator=(const TAdventureReportPosReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureReportPosReq& default_instance();

  void Swap(TAdventureReportPosReq* other);

  // implements Message ----------------------------------------------

  TAdventureReportPosReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureReportPosReq& from);
  void MergeFrom(const TAdventureReportPosReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureReportPosReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint32 LayerIndex = 2;
  inline bool has_layerindex() const;
  inline void clear_layerindex();
  static const int kLayerIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureReportPosReq</name>
  	<Function>
  		<name>layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerindex() const;
  inline void set_layerindex(::google::protobuf::uint32 value);

  // optional int32 PosX = 3;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureReportPosReq</name>
  	<Function>
  		<name>posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // optional int32 PosY = 4;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureReportPosReq</name>
  	<Function>
  		<name>posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // optional .pb.EAdventurePosChangeType PosChangeType = 5;
  inline bool has_poschangetype() const;
  inline void clear_poschangetype();
  static const int kPosChangeTypeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureReportPosReq</name>
  	<Function>
  		<name>poschangetype</name>
  		<replaceName>PosChangeType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_poschangetype</name>
  		<replaceName>PosChangeType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_poschangetype</name>
  		<replaceName>PosChangeType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAdventurePosChangeType poschangetype() const;
  inline void set_poschangetype(::pb::EAdventurePosChangeType value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureReportPosReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_layerindex();
  inline void clear_has_layerindex();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_poschangetype();
  inline void clear_has_poschangetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint32 layerindex_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  int poschangetype_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureReportPosReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureQuitMapRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureQuitMapRsp : public ::google::protobuf::Message {
 public:
  TAdventureQuitMapRsp();
  virtual ~TAdventureQuitMapRsp();

  TAdventureQuitMapRsp(const TAdventureQuitMapRsp& from);

  inline TAdventureQuitMapRsp& operator=(const TAdventureQuitMapRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureQuitMapRsp& default_instance();

  void Swap(TAdventureQuitMapRsp* other);

  // implements Message ----------------------------------------------

  TAdventureQuitMapRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureQuitMapRsp& from);
  void MergeFrom(const TAdventureQuitMapRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureQuitMapRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // optional uint32 RatioMode = 2;
  inline bool has_ratiomode() const;
  inline void clear_ratiomode();
  static const int kRatioModeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureQuitMapRsp</name>
  	<Function>
  		<name>ratiomode</name>
  		<replaceName>RatioMode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ratiomode</name>
  		<replaceName>RatioMode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ratiomode</name>
  		<replaceName>RatioMode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 ratiomode() const;
  inline void set_ratiomode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureQuitMapRsp)
 private:
  inline void set_has_ratiomode();
  inline void clear_has_ratiomode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  ::google::protobuf::uint32 ratiomode_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureQuitMapRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTriggerEventReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTriggerEventReq : public ::google::protobuf::Message {
 public:
  TAdventureTriggerEventReq();
  virtual ~TAdventureTriggerEventReq();

  TAdventureTriggerEventReq(const TAdventureTriggerEventReq& from);

  inline TAdventureTriggerEventReq& operator=(const TAdventureTriggerEventReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTriggerEventReq& default_instance();

  void Swap(TAdventureTriggerEventReq* other);

  // implements Message ----------------------------------------------

  TAdventureTriggerEventReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTriggerEventReq& from);
  void MergeFrom(const TAdventureTriggerEventReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTriggerEventReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint32 LayerIndex = 2;
  inline bool has_layerindex() const;
  inline void clear_layerindex();
  static const int kLayerIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTriggerEventReq</name>
  	<Function>
  		<name>layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerindex() const;
  inline void set_layerindex(::google::protobuf::uint32 value);

  // optional int32 X = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTriggerEventReq</name>
  	<Function>
  		<name>x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 Y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTriggerEventReq</name>
  	<Function>
  		<name>y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // optional uint32 EventId = 5;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTriggerEventReq</name>
  	<Function>
  		<name>eventid</name>
  		<replaceName>EventId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eventid</name>
  		<replaceName>EventId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eventid</name>
  		<replaceName>EventId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 eventid() const;
  inline void set_eventid(::google::protobuf::uint32 value);

  // optional uint32 Hid = 6;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTriggerEventReq</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 ChoseIndex = 7;
  inline bool has_choseindex() const;
  inline void clear_choseindex();
  static const int kChoseIndexFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTriggerEventReq</name>
  	<Function>
  		<name>choseindex</name>
  		<replaceName>ChoseIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_choseindex</name>
  		<replaceName>ChoseIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_choseindex</name>
  		<replaceName>ChoseIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 choseindex() const;
  inline void set_choseindex(::google::protobuf::uint32 value);

  // optional int32 GimmickIndex = 8;
  inline bool has_gimmickindex() const;
  inline void clear_gimmickindex();
  static const int kGimmickIndexFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTriggerEventReq</name>
  	<Function>
  		<name>gimmickindex</name>
  		<replaceName>GimmickIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gimmickindex</name>
  		<replaceName>GimmickIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gimmickindex</name>
  		<replaceName>GimmickIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 gimmickindex() const;
  inline void set_gimmickindex(::google::protobuf::int32 value);

  // optional uint32 StateValue = 9;
  inline bool has_statevalue() const;
  inline void clear_statevalue();
  static const int kStateValueFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTriggerEventReq</name>
  	<Function>
  		<name>statevalue</name>
  		<replaceName>StateValue</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_statevalue</name>
  		<replaceName>StateValue</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_statevalue</name>
  		<replaceName>StateValue</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 statevalue() const;
  inline void set_statevalue(::google::protobuf::uint32 value);

  // repeated .pb.TSimpleItem ItemArr = 10;
  inline int itemarr_size() const;
  inline void clear_itemarr();
  static const int kItemArrFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTriggerEventReq</name>
  	<Function>
  		<name>itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>itemarr_size</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& itemarr(int index) const;
  inline ::pb::TSimpleItem* mutable_itemarr(int index);
  inline ::pb::TSimpleItem* add_itemarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      itemarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_itemarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureTriggerEventReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_layerindex();
  inline void clear_has_layerindex();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_eventid();
  inline void clear_has_eventid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_choseindex();
  inline void clear_has_choseindex();
  inline void set_has_gimmickindex();
  inline void clear_has_gimmickindex();
  inline void set_has_statevalue();
  inline void clear_has_statevalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint32 layerindex_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::uint32 eventid_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 choseindex_;
  ::google::protobuf::int32 gimmickindex_;
  ::google::protobuf::uint32 statevalue_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > itemarr_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTriggerEventReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTriggerEventRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTriggerEventRsp : public ::google::protobuf::Message {
 public:
  TAdventureTriggerEventRsp();
  virtual ~TAdventureTriggerEventRsp();

  TAdventureTriggerEventRsp(const TAdventureTriggerEventRsp& from);

  inline TAdventureTriggerEventRsp& operator=(const TAdventureTriggerEventRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTriggerEventRsp& default_instance();

  void Swap(TAdventureTriggerEventRsp* other);

  // implements Message ----------------------------------------------

  TAdventureTriggerEventRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTriggerEventRsp& from);
  void MergeFrom(const TAdventureTriggerEventRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EEventStatus EventStatus = 1;
  inline bool has_eventstatus() const;
  inline void clear_eventstatus();
  static const int kEventStatusFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTriggerEventRsp</name>
  	<Function>
  		<name>eventstatus</name>
  		<replaceName>EventStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eventstatus</name>
  		<replaceName>EventStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eventstatus</name>
  		<replaceName>EventStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EEventStatus eventstatus() const;
  inline void set_eventstatus(::pb::EEventStatus value);

  // repeated .pb.TCommonReward RewardArray = 2;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTriggerEventRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // optional .pb.TAdventureEventRet EventRet = 3;
  inline bool has_eventret() const;
  inline void clear_eventret();
  static const int kEventRetFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTriggerEventRsp</name>
  	<Function>
  		<name>eventret</name>
  		<replaceName>EventRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eventret</name>
  		<replaceName>EventRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_eventret</name>
  		<replaceName>EventRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eventret</name>
  		<replaceName>EventRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureEventRet& eventret() const;
  inline ::pb::TAdventureEventRet* mutable_eventret();
  inline ::pb::TAdventureEventRet* release_eventret();
  inline void set_allocated_eventret(::pb::TAdventureEventRet* eventret);

  // optional uint32 CurEnergy = 4;
  inline bool has_curenergy() const;
  inline void clear_curenergy();
  static const int kCurEnergyFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTriggerEventRsp</name>
  	<Function>
  		<name>curenergy</name>
  		<replaceName>CurEnergy</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curenergy</name>
  		<replaceName>CurEnergy</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curenergy</name>
  		<replaceName>CurEnergy</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curenergy() const;
  inline void set_curenergy(::google::protobuf::uint32 value);

  // optional uint32 StateSucc = 5;
  inline bool has_statesucc() const;
  inline void clear_statesucc();
  static const int kStateSuccFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTriggerEventRsp</name>
  	<Function>
  		<name>statesucc</name>
  		<replaceName>StateSucc</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_statesucc</name>
  		<replaceName>StateSucc</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_statesucc</name>
  		<replaceName>StateSucc</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 statesucc() const;
  inline void set_statesucc(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureTriggerEventRsp)
 private:
  inline void set_has_eventstatus();
  inline void clear_has_eventstatus();
  inline void set_has_eventret();
  inline void clear_has_eventret();
  inline void set_has_curenergy();
  inline void clear_has_curenergy();
  inline void set_has_statesucc();
  inline void clear_has_statesucc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  int eventstatus_;
  ::google::protobuf::uint32 curenergy_;
  ::pb::TAdventureEventRet* eventret_;
  ::google::protobuf::uint32 statesucc_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTriggerEventRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureAnswerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureAnswerReq : public ::google::protobuf::Message {
 public:
  TAdventureAnswerReq();
  virtual ~TAdventureAnswerReq();

  TAdventureAnswerReq(const TAdventureAnswerReq& from);

  inline TAdventureAnswerReq& operator=(const TAdventureAnswerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureAnswerReq& default_instance();

  void Swap(TAdventureAnswerReq* other);

  // implements Message ----------------------------------------------

  TAdventureAnswerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureAnswerReq& from);
  void MergeFrom(const TAdventureAnswerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAnswerReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint32 LayerIndex = 2;
  inline bool has_layerindex() const;
  inline void clear_layerindex();
  static const int kLayerIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAnswerReq</name>
  	<Function>
  		<name>layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerindex() const;
  inline void set_layerindex(::google::protobuf::uint32 value);

  // optional int32 X = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAnswerReq</name>
  	<Function>
  		<name>x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 Y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAnswerReq</name>
  	<Function>
  		<name>y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // optional uint32 EventId = 5;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAnswerReq</name>
  	<Function>
  		<name>eventid</name>
  		<replaceName>EventId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eventid</name>
  		<replaceName>EventId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eventid</name>
  		<replaceName>EventId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 eventid() const;
  inline void set_eventid(::google::protobuf::uint32 value);

  // optional uint32 ChoseIndex = 6;
  inline bool has_choseindex() const;
  inline void clear_choseindex();
  static const int kChoseIndexFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAnswerReq</name>
  	<Function>
  		<name>choseindex</name>
  		<replaceName>ChoseIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_choseindex</name>
  		<replaceName>ChoseIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_choseindex</name>
  		<replaceName>ChoseIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 choseindex() const;
  inline void set_choseindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureAnswerReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_layerindex();
  inline void clear_has_layerindex();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_eventid();
  inline void clear_has_eventid();
  inline void set_has_choseindex();
  inline void clear_has_choseindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint32 layerindex_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::uint32 eventid_;
  ::google::protobuf::uint32 choseindex_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureAnswerReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureAnswerEndReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureAnswerEndReq : public ::google::protobuf::Message {
 public:
  TAdventureAnswerEndReq();
  virtual ~TAdventureAnswerEndReq();

  TAdventureAnswerEndReq(const TAdventureAnswerEndReq& from);

  inline TAdventureAnswerEndReq& operator=(const TAdventureAnswerEndReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureAnswerEndReq& default_instance();

  void Swap(TAdventureAnswerEndReq* other);

  // implements Message ----------------------------------------------

  TAdventureAnswerEndReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureAnswerEndReq& from);
  void MergeFrom(const TAdventureAnswerEndReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAnswerEndReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint32 LayerIndex = 2;
  inline bool has_layerindex() const;
  inline void clear_layerindex();
  static const int kLayerIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAnswerEndReq</name>
  	<Function>
  		<name>layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerindex() const;
  inline void set_layerindex(::google::protobuf::uint32 value);

  // optional int32 X = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAnswerEndReq</name>
  	<Function>
  		<name>x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 Y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAnswerEndReq</name>
  	<Function>
  		<name>y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureAnswerEndReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_layerindex();
  inline void clear_has_layerindex();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint32 layerindex_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureAnswerEndReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureGetBuffRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureGetBuffRsp : public ::google::protobuf::Message {
 public:
  TAdventureGetBuffRsp();
  virtual ~TAdventureGetBuffRsp();

  TAdventureGetBuffRsp(const TAdventureGetBuffRsp& from);

  inline TAdventureGetBuffRsp& operator=(const TAdventureGetBuffRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureGetBuffRsp& default_instance();

  void Swap(TAdventureGetBuffRsp* other);

  // implements Message ----------------------------------------------

  TAdventureGetBuffRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureGetBuffRsp& from);
  void MergeFrom(const TAdventureGetBuffRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TAdventureBuff BuffArr = 1;
  inline int buffarr_size() const;
  inline void clear_buffarr();
  static const int kBuffArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetBuffRsp</name>
  	<Function>
  		<name>buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buffarr_size</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureBuff& buffarr(int index) const;
  inline ::pb::TAdventureBuff* mutable_buffarr(int index);
  inline ::pb::TAdventureBuff* add_buffarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureBuff >&
      buffarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureBuff >*
      mutable_buffarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureGetBuffRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureBuff > buffarr_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureGetBuffRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureReportBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureReportBattleReq : public ::google::protobuf::Message {
 public:
  TAdventureReportBattleReq();
  virtual ~TAdventureReportBattleReq();

  TAdventureReportBattleReq(const TAdventureReportBattleReq& from);

  inline TAdventureReportBattleReq& operator=(const TAdventureReportBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureReportBattleReq& default_instance();

  void Swap(TAdventureReportBattleReq* other);

  // implements Message ----------------------------------------------

  TAdventureReportBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureReportBattleReq& from);
  void MergeFrom(const TAdventureReportBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes BattleResult = 1;
  inline bool has_battleresult() const;
  inline void clear_battleresult();
  static const int kBattleResultFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureReportBattleReq</name>
  	<Function>
  		<name>battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleresult() const;
  inline void set_battleresult(const ::std::string& value);
  inline void set_battleresult(const char* value);
  inline void set_battleresult(const void* value, size_t size);
  inline ::std::string* mutable_battleresult();
  inline ::std::string* release_battleresult();
  inline void set_allocated_battleresult(::std::string* battleresult);

  // optional uint32 LayerIndex = 2;
  inline bool has_layerindex() const;
  inline void clear_layerindex();
  static const int kLayerIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureReportBattleReq</name>
  	<Function>
  		<name>layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerindex() const;
  inline void set_layerindex(::google::protobuf::uint32 value);

  // optional int32 PosX = 3;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureReportBattleReq</name>
  	<Function>
  		<name>posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // optional int32 PosY = 4;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureReportBattleReq</name>
  	<Function>
  		<name>posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureReportBattleReq)
 private:
  inline void set_has_battleresult();
  inline void clear_has_battleresult();
  inline void set_has_layerindex();
  inline void clear_has_layerindex();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* battleresult_;
  ::google::protobuf::uint32 layerindex_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureReportBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureReportBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureReportBattleRsp : public ::google::protobuf::Message {
 public:
  TAdventureReportBattleRsp();
  virtual ~TAdventureReportBattleRsp();

  TAdventureReportBattleRsp(const TAdventureReportBattleRsp& from);

  inline TAdventureReportBattleRsp& operator=(const TAdventureReportBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureReportBattleRsp& default_instance();

  void Swap(TAdventureReportBattleRsp* other);

  // implements Message ----------------------------------------------

  TAdventureReportBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureReportBattleRsp& from);
  void MergeFrom(const TAdventureReportBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureReportBattleRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // optional uint32 CurEnergy = 2;
  inline bool has_curenergy() const;
  inline void clear_curenergy();
  static const int kCurEnergyFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureReportBattleRsp</name>
  	<Function>
  		<name>curenergy</name>
  		<replaceName>CurEnergy</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curenergy</name>
  		<replaceName>CurEnergy</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curenergy</name>
  		<replaceName>CurEnergy</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curenergy() const;
  inline void set_curenergy(::google::protobuf::uint32 value);

  // optional string ModelName = 3;
  inline bool has_modelname() const;
  inline void clear_modelname();
  static const int kModelNameFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureReportBattleRsp</name>
  	<Function>
  		<name>modelname</name>
  		<replaceName>ModelName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_modelname</name>
  		<replaceName>ModelName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_modelname</name>
  		<replaceName>ModelName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& modelname() const;
  inline void set_modelname(const ::std::string& value);
  inline void set_modelname(const char* value);
  inline void set_modelname(const char* value, size_t size);
  inline ::std::string* mutable_modelname();
  inline ::std::string* release_modelname();
  inline void set_allocated_modelname(::std::string* modelname);

  // @@protoc_insertion_point(class_scope:pb.TAdventureReportBattleRsp)
 private:
  inline void set_has_curenergy();
  inline void clear_has_curenergy();
  inline void set_has_modelname();
  inline void clear_has_modelname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  ::std::string* modelname_;
  ::google::protobuf::uint32 curenergy_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureReportBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureStartBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureStartBattleReq : public ::google::protobuf::Message {
 public:
  TAdventureStartBattleReq();
  virtual ~TAdventureStartBattleReq();

  TAdventureStartBattleReq(const TAdventureStartBattleReq& from);

  inline TAdventureStartBattleReq& operator=(const TAdventureStartBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureStartBattleReq& default_instance();

  void Swap(TAdventureStartBattleReq* other);

  // implements Message ----------------------------------------------

  TAdventureStartBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureStartBattleReq& from);
  void MergeFrom(const TAdventureStartBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 X = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureStartBattleReq</name>
  	<Function>
  		<name>x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 Y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureStartBattleReq</name>
  	<Function>
  		<name>y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureStartBattleReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TAdventureStartBattleReq)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureStartBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureStartBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureStartBattleRsp : public ::google::protobuf::Message {
 public:
  TAdventureStartBattleRsp();
  virtual ~TAdventureStartBattleRsp();

  TAdventureStartBattleRsp(const TAdventureStartBattleRsp& from);

  inline TAdventureStartBattleRsp& operator=(const TAdventureStartBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureStartBattleRsp& default_instance();

  void Swap(TAdventureStartBattleRsp* other);

  // implements Message ----------------------------------------------

  TAdventureStartBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureStartBattleRsp& from);
  void MergeFrom(const TAdventureStartBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EAdventureStartBattleRetCode RetCode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureStartBattleRsp</name>
  	<Function>
  		<name>retcode</name>
  		<replaceName>RetCode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_retcode</name>
  		<replaceName>RetCode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_retcode</name>
  		<replaceName>RetCode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAdventureStartBattleRetCode retcode() const;
  inline void set_retcode(::pb::EAdventureStartBattleRetCode value);

  // optional uint32 BattleinfoId = 2;
  inline bool has_battleinfoid() const;
  inline void clear_battleinfoid();
  static const int kBattleinfoIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureStartBattleRsp</name>
  	<Function>
  		<name>battleinfoid</name>
  		<replaceName>BattleinfoId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleinfoid</name>
  		<replaceName>BattleinfoId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleinfoid</name>
  		<replaceName>BattleinfoId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleinfoid() const;
  inline void set_battleinfoid(::google::protobuf::uint32 value);

  // optional uint32 BossLevel = 3;
  inline bool has_bosslevel() const;
  inline void clear_bosslevel();
  static const int kBossLevelFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureStartBattleRsp</name>
  	<Function>
  		<name>bosslevel</name>
  		<replaceName>BossLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bosslevel</name>
  		<replaceName>BossLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bosslevel</name>
  		<replaceName>BossLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bosslevel() const;
  inline void set_bosslevel(::google::protobuf::uint32 value);

  // optional .pb.TAdventureBattleMonsterInfo MonsterInfo = 4;
  inline bool has_monsterinfo() const;
  inline void clear_monsterinfo();
  static const int kMonsterInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureStartBattleRsp</name>
  	<Function>
  		<name>monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureBattleMonsterInfo& monsterinfo() const;
  inline ::pb::TAdventureBattleMonsterInfo* mutable_monsterinfo();
  inline ::pb::TAdventureBattleMonsterInfo* release_monsterinfo();
  inline void set_allocated_monsterinfo(::pb::TAdventureBattleMonsterInfo* monsterinfo);

  // optional .pb.TBattleArgs BattleArgs = 5;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureStartBattleRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // @@protoc_insertion_point(class_scope:pb.TAdventureStartBattleRsp)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_battleinfoid();
  inline void clear_has_battleinfoid();
  inline void set_has_bosslevel();
  inline void clear_has_bosslevel();
  inline void set_has_monsterinfo();
  inline void clear_has_monsterinfo();
  inline void set_has_battleargs();
  inline void clear_has_battleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int retcode_;
  ::google::protobuf::uint32 battleinfoid_;
  ::pb::TAdventureBattleMonsterInfo* monsterinfo_;
  ::pb::TBattleArgs* battleargs_;
  ::google::protobuf::uint32 bosslevel_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureStartBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureBuyNumReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureBuyNumReq : public ::google::protobuf::Message {
 public:
  TAdventureBuyNumReq();
  virtual ~TAdventureBuyNumReq();

  TAdventureBuyNumReq(const TAdventureBuyNumReq& from);

  inline TAdventureBuyNumReq& operator=(const TAdventureBuyNumReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureBuyNumReq& default_instance();

  void Swap(TAdventureBuyNumReq* other);

  // implements Message ----------------------------------------------

  TAdventureBuyNumReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureBuyNumReq& from);
  void MergeFrom(const TAdventureBuyNumReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuyNum = 1;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureBuyNumReq</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureBuyNumReq)
 private:
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buynum_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureBuyNumReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventurePassBlocksReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventurePassBlocksReq : public ::google::protobuf::Message {
 public:
  TAdventurePassBlocksReq();
  virtual ~TAdventurePassBlocksReq();

  TAdventurePassBlocksReq(const TAdventurePassBlocksReq& from);

  inline TAdventurePassBlocksReq& operator=(const TAdventurePassBlocksReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventurePassBlocksReq& default_instance();

  void Swap(TAdventurePassBlocksReq* other);

  // implements Message ----------------------------------------------

  TAdventurePassBlocksReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventurePassBlocksReq& from);
  void MergeFrom(const TAdventurePassBlocksReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TAdventurePassBlock BlockArr = 1;
  inline int blockarr_size() const;
  inline void clear_blockarr();
  static const int kBlockArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventurePassBlocksReq</name>
  	<Function>
  		<name>blockarr</name>
  		<replaceName>BlockArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_blockarr</name>
  		<replaceName>BlockArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_blockarr</name>
  		<replaceName>BlockArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_blockarr</name>
  		<replaceName>BlockArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>blockarr_size</name>
  		<replaceName>BlockArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventurePassBlock& blockarr(int index) const;
  inline ::pb::TAdventurePassBlock* mutable_blockarr(int index);
  inline ::pb::TAdventurePassBlock* add_blockarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventurePassBlock >&
      blockarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventurePassBlock >*
      mutable_blockarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventurePassBlocksReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventurePassBlock > blockarr_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventurePassBlocksReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureReportTalkReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureReportTalkReq : public ::google::protobuf::Message {
 public:
  TAdventureReportTalkReq();
  virtual ~TAdventureReportTalkReq();

  TAdventureReportTalkReq(const TAdventureReportTalkReq& from);

  inline TAdventureReportTalkReq& operator=(const TAdventureReportTalkReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureReportTalkReq& default_instance();

  void Swap(TAdventureReportTalkReq* other);

  // implements Message ----------------------------------------------

  TAdventureReportTalkReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureReportTalkReq& from);
  void MergeFrom(const TAdventureReportTalkReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TalkId = 1;
  inline bool has_talkid() const;
  inline void clear_talkid();
  static const int kTalkIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureReportTalkReq</name>
  	<Function>
  		<name>talkid</name>
  		<replaceName>TalkId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_talkid</name>
  		<replaceName>TalkId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_talkid</name>
  		<replaceName>TalkId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 talkid() const;
  inline void set_talkid(::google::protobuf::uint32 value);

  // optional uint32 ChooseIdx = 2;
  inline bool has_chooseidx() const;
  inline void clear_chooseidx();
  static const int kChooseIdxFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureReportTalkReq</name>
  	<Function>
  		<name>chooseidx</name>
  		<replaceName>ChooseIdx</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chooseidx</name>
  		<replaceName>ChooseIdx</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chooseidx</name>
  		<replaceName>ChooseIdx</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chooseidx() const;
  inline void set_chooseidx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureReportTalkReq)
 private:
  inline void set_has_talkid();
  inline void clear_has_talkid();
  inline void set_has_chooseidx();
  inline void clear_has_chooseidx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 talkid_;
  ::google::protobuf::uint32 chooseidx_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureReportTalkReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureReportTalkRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureReportTalkRsp : public ::google::protobuf::Message {
 public:
  TAdventureReportTalkRsp();
  virtual ~TAdventureReportTalkRsp();

  TAdventureReportTalkRsp(const TAdventureReportTalkRsp& from);

  inline TAdventureReportTalkRsp& operator=(const TAdventureReportTalkRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureReportTalkRsp& default_instance();

  void Swap(TAdventureReportTalkRsp* other);

  // implements Message ----------------------------------------------

  TAdventureReportTalkRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureReportTalkRsp& from);
  void MergeFrom(const TAdventureReportTalkRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureReportTalkRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // @@protoc_insertion_point(class_scope:pb.TAdventureReportTalkRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureReportTalkRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureBuyGoodsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureBuyGoodsReq : public ::google::protobuf::Message {
 public:
  TAdventureBuyGoodsReq();
  virtual ~TAdventureBuyGoodsReq();

  TAdventureBuyGoodsReq(const TAdventureBuyGoodsReq& from);

  inline TAdventureBuyGoodsReq& operator=(const TAdventureBuyGoodsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureBuyGoodsReq& default_instance();

  void Swap(TAdventureBuyGoodsReq* other);

  // implements Message ----------------------------------------------

  TAdventureBuyGoodsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureBuyGoodsReq& from);
  void MergeFrom(const TAdventureBuyGoodsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerIndex = 1;
  inline bool has_layerindex() const;
  inline void clear_layerindex();
  static const int kLayerIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureBuyGoodsReq</name>
  	<Function>
  		<name>layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerindex() const;
  inline void set_layerindex(::google::protobuf::uint32 value);

  // optional int32 PosX = 2;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureBuyGoodsReq</name>
  	<Function>
  		<name>posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // optional int32 PosY = 3;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureBuyGoodsReq</name>
  	<Function>
  		<name>posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // optional uint32 GoodsId = 4;
  inline bool has_goodsid() const;
  inline void clear_goodsid();
  static const int kGoodsIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureBuyGoodsReq</name>
  	<Function>
  		<name>goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 goodsid() const;
  inline void set_goodsid(::google::protobuf::uint32 value);

  // optional uint32 BuyNum = 5;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureBuyGoodsReq</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureBuyGoodsReq)
 private:
  inline void set_has_layerindex();
  inline void clear_has_layerindex();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_goodsid();
  inline void clear_has_goodsid();
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 layerindex_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::uint32 goodsid_;
  ::google::protobuf::uint32 buynum_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureBuyGoodsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureReceiveCompleteRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureReceiveCompleteRewardRsp : public ::google::protobuf::Message {
 public:
  TAdventureReceiveCompleteRewardRsp();
  virtual ~TAdventureReceiveCompleteRewardRsp();

  TAdventureReceiveCompleteRewardRsp(const TAdventureReceiveCompleteRewardRsp& from);

  inline TAdventureReceiveCompleteRewardRsp& operator=(const TAdventureReceiveCompleteRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureReceiveCompleteRewardRsp& default_instance();

  void Swap(TAdventureReceiveCompleteRewardRsp* other);

  // implements Message ----------------------------------------------

  TAdventureReceiveCompleteRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureReceiveCompleteRewardRsp& from);
  void MergeFrom(const TAdventureReceiveCompleteRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureReceiveCompleteRewardRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // @@protoc_insertion_point(class_scope:pb.TAdventureReceiveCompleteRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureReceiveCompleteRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureSendToTeamMateReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureSendToTeamMateReq : public ::google::protobuf::Message {
 public:
  TAdventureSendToTeamMateReq();
  virtual ~TAdventureSendToTeamMateReq();

  TAdventureSendToTeamMateReq(const TAdventureSendToTeamMateReq& from);

  inline TAdventureSendToTeamMateReq& operator=(const TAdventureSendToTeamMateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureSendToTeamMateReq& default_instance();

  void Swap(TAdventureSendToTeamMateReq* other);

  // implements Message ----------------------------------------------

  TAdventureSendToTeamMateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureSendToTeamMateReq& from);
  void MergeFrom(const TAdventureSendToTeamMateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureSendToTeamMateReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint64 MateUid = 2;
  inline bool has_mateuid() const;
  inline void clear_mateuid();
  static const int kMateUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureSendToTeamMateReq</name>
  	<Function>
  		<name>mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mateuid() const;
  inline void set_mateuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureSendToTeamMateReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_mateuid();
  inline void clear_has_mateuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 mateuid_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureSendToTeamMateReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureCallTeamMateReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureCallTeamMateReq : public ::google::protobuf::Message {
 public:
  TAdventureCallTeamMateReq();
  virtual ~TAdventureCallTeamMateReq();

  TAdventureCallTeamMateReq(const TAdventureCallTeamMateReq& from);

  inline TAdventureCallTeamMateReq& operator=(const TAdventureCallTeamMateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureCallTeamMateReq& default_instance();

  void Swap(TAdventureCallTeamMateReq* other);

  // implements Message ----------------------------------------------

  TAdventureCallTeamMateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureCallTeamMateReq& from);
  void MergeFrom(const TAdventureCallTeamMateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCallTeamMateReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint64 MateUid = 2;
  inline bool has_mateuid() const;
  inline void clear_mateuid();
  static const int kMateUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCallTeamMateReq</name>
  	<Function>
  		<name>mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mateuid() const;
  inline void set_mateuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureCallTeamMateReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_mateuid();
  inline void clear_has_mateuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 mateuid_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureCallTeamMateReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureCallOrSendRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureCallOrSendRsp : public ::google::protobuf::Message {
 public:
  TAdventureCallOrSendRsp();
  virtual ~TAdventureCallOrSendRsp();

  TAdventureCallOrSendRsp(const TAdventureCallOrSendRsp& from);

  inline TAdventureCallOrSendRsp& operator=(const TAdventureCallOrSendRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureCallOrSendRsp& default_instance();

  void Swap(TAdventureCallOrSendRsp* other);

  // implements Message ----------------------------------------------

  TAdventureCallOrSendRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureCallOrSendRsp& from);
  void MergeFrom(const TAdventureCallOrSendRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EAdventureSendToMateRetCode RetCode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCallOrSendRsp</name>
  	<Function>
  		<name>retcode</name>
  		<replaceName>RetCode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_retcode</name>
  		<replaceName>RetCode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_retcode</name>
  		<replaceName>RetCode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAdventureSendToMateRetCode retcode() const;
  inline void set_retcode(::pb::EAdventureSendToMateRetCode value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureCallOrSendRsp)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int retcode_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureCallOrSendRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureAcceptCallReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureAcceptCallReq : public ::google::protobuf::Message {
 public:
  TAdventureAcceptCallReq();
  virtual ~TAdventureAcceptCallReq();

  TAdventureAcceptCallReq(const TAdventureAcceptCallReq& from);

  inline TAdventureAcceptCallReq& operator=(const TAdventureAcceptCallReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureAcceptCallReq& default_instance();

  void Swap(TAdventureAcceptCallReq* other);

  // implements Message ----------------------------------------------

  TAdventureAcceptCallReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureAcceptCallReq& from);
  void MergeFrom(const TAdventureAcceptCallReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAcceptCallReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint64 MateUid = 2;
  inline bool has_mateuid() const;
  inline void clear_mateuid();
  static const int kMateUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAcceptCallReq</name>
  	<Function>
  		<name>mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mateuid() const;
  inline void set_mateuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureAcceptCallReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_mateuid();
  inline void clear_has_mateuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 mateuid_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureAcceptCallReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureGetTeamRankReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureGetTeamRankReq : public ::google::protobuf::Message {
 public:
  TAdventureGetTeamRankReq();
  virtual ~TAdventureGetTeamRankReq();

  TAdventureGetTeamRankReq(const TAdventureGetTeamRankReq& from);

  inline TAdventureGetTeamRankReq& operator=(const TAdventureGetTeamRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureGetTeamRankReq& default_instance();

  void Swap(TAdventureGetTeamRankReq* other);

  // implements Message ----------------------------------------------

  TAdventureGetTeamRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureGetTeamRankReq& from);
  void MergeFrom(const TAdventureGetTeamRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetTeamRankReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureGetTeamRankReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureGetTeamRankReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureGetTeamRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureGetTeamRankRsp : public ::google::protobuf::Message {
 public:
  TAdventureGetTeamRankRsp();
  virtual ~TAdventureGetTeamRankRsp();

  TAdventureGetTeamRankRsp(const TAdventureGetTeamRankRsp& from);

  inline TAdventureGetTeamRankRsp& operator=(const TAdventureGetTeamRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureGetTeamRankRsp& default_instance();

  void Swap(TAdventureGetTeamRankRsp* other);

  // implements Message ----------------------------------------------

  TAdventureGetTeamRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureGetTeamRankRsp& from);
  void MergeFrom(const TAdventureGetTeamRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TAdventureGetTeamRankUserInfo RankUserInfo = 1;
  inline int rankuserinfo_size() const;
  inline void clear_rankuserinfo();
  static const int kRankUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetTeamRankRsp</name>
  	<Function>
  		<name>rankuserinfo</name>
  		<replaceName>RankUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankuserinfo</name>
  		<replaceName>RankUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankuserinfo</name>
  		<replaceName>RankUserInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankuserinfo</name>
  		<replaceName>RankUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankuserinfo_size</name>
  		<replaceName>RankUserInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureGetTeamRankUserInfo& rankuserinfo(int index) const;
  inline ::pb::TAdventureGetTeamRankUserInfo* mutable_rankuserinfo(int index);
  inline ::pb::TAdventureGetTeamRankUserInfo* add_rankuserinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureGetTeamRankUserInfo >&
      rankuserinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureGetTeamRankUserInfo >*
      mutable_rankuserinfo();

  // @@protoc_insertion_point(class_scope:pb.TAdventureGetTeamRankRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureGetTeamRankUserInfo > rankuserinfo_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureGetTeamRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureGetCurMapRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureGetCurMapRewardRsp : public ::google::protobuf::Message {
 public:
  TAdventureGetCurMapRewardRsp();
  virtual ~TAdventureGetCurMapRewardRsp();

  TAdventureGetCurMapRewardRsp(const TAdventureGetCurMapRewardRsp& from);

  inline TAdventureGetCurMapRewardRsp& operator=(const TAdventureGetCurMapRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureGetCurMapRewardRsp& default_instance();

  void Swap(TAdventureGetCurMapRewardRsp* other);

  // implements Message ----------------------------------------------

  TAdventureGetCurMapRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureGetCurMapRewardRsp& from);
  void MergeFrom(const TAdventureGetCurMapRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetCurMapRewardRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // @@protoc_insertion_point(class_scope:pb.TAdventureGetCurMapRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureGetCurMapRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTeamExchangeRpcReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTeamExchangeRpcReq : public ::google::protobuf::Message {
 public:
  TAdventureTeamExchangeRpcReq();
  virtual ~TAdventureTeamExchangeRpcReq();

  TAdventureTeamExchangeRpcReq(const TAdventureTeamExchangeRpcReq& from);

  inline TAdventureTeamExchangeRpcReq& operator=(const TAdventureTeamExchangeRpcReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTeamExchangeRpcReq& default_instance();

  void Swap(TAdventureTeamExchangeRpcReq* other);

  // implements Message ----------------------------------------------

  TAdventureTeamExchangeRpcReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTeamExchangeRpcReq& from);
  void MergeFrom(const TAdventureTeamExchangeRpcReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTeamExchangeRpcReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint64 TeamId = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTeamExchangeRpcReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional .pb.ETeamMode TeamMode = 3;
  inline bool has_teammode() const;
  inline void clear_teammode();
  static const int kTeamModeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTeamExchangeRpcReq</name>
  	<Function>
  		<name>teammode</name>
  		<replaceName>TeamMode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teammode</name>
  		<replaceName>TeamMode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teammode</name>
  		<replaceName>TeamMode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ETeamMode teammode() const;
  inline void set_teammode(::pb::ETeamMode value);

  // repeated .pb.TCommonReward CostArr = 4;
  inline int costarr_size() const;
  inline void clear_costarr();
  static const int kCostArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTeamExchangeRpcReq</name>
  	<Function>
  		<name>costarr</name>
  		<replaceName>CostArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_costarr</name>
  		<replaceName>CostArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_costarr</name>
  		<replaceName>CostArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_costarr</name>
  		<replaceName>CostArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>costarr_size</name>
  		<replaceName>CostArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& costarr(int index) const;
  inline ::pb::TCommonReward* mutable_costarr(int index);
  inline ::pb::TCommonReward* add_costarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      costarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_costarr();

  // repeated .pb.TCommonReward RewardArr = 5;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTeamExchangeRpcReq</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureTeamExchangeRpcReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_teammode();
  inline void clear_has_teammode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > costarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  int teammode_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTeamExchangeRpcReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTeamExchangeRpcRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTeamExchangeRpcRsp : public ::google::protobuf::Message {
 public:
  TAdventureTeamExchangeRpcRsp();
  virtual ~TAdventureTeamExchangeRpcRsp();

  TAdventureTeamExchangeRpcRsp(const TAdventureTeamExchangeRpcRsp& from);

  inline TAdventureTeamExchangeRpcRsp& operator=(const TAdventureTeamExchangeRpcRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTeamExchangeRpcRsp& default_instance();

  void Swap(TAdventureTeamExchangeRpcRsp* other);

  // implements Message ----------------------------------------------

  TAdventureTeamExchangeRpcRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTeamExchangeRpcRsp& from);
  void MergeFrom(const TAdventureTeamExchangeRpcRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsSuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIsSuccessFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTeamExchangeRpcRsp</name>
  	<Function>
  		<name>issuccess</name>
  		<replaceName>IsSuccess</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_issuccess</name>
  		<replaceName>IsSuccess</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_issuccess</name>
  		<replaceName>IsSuccess</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureTeamExchangeRpcRsp)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool issuccess_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTeamExchangeRpcRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureQualityPassInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureQualityPassInfo : public ::google::protobuf::Message {
 public:
  TAdventureQualityPassInfo();
  virtual ~TAdventureQualityPassInfo();

  TAdventureQualityPassInfo(const TAdventureQualityPassInfo& from);

  inline TAdventureQualityPassInfo& operator=(const TAdventureQualityPassInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureQualityPassInfo& default_instance();

  void Swap(TAdventureQualityPassInfo* other);

  // implements Message ----------------------------------------------

  TAdventureQualityPassInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureQualityPassInfo& from);
  void MergeFrom(const TAdventureQualityPassInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapLevel = 1;
  inline bool has_maplevel() const;
  inline void clear_maplevel();
  static const int kMapLevelFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureQualityPassInfo</name>
  	<Function>
  		<name>maplevel</name>
  		<replaceName>MapLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maplevel</name>
  		<replaceName>MapLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maplevel</name>
  		<replaceName>MapLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maplevel() const;
  inline void set_maplevel(::google::protobuf::uint32 value);

  // optional uint32 MapQuality = 2;
  inline bool has_mapquality() const;
  inline void clear_mapquality();
  static const int kMapQualityFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureQualityPassInfo</name>
  	<Function>
  		<name>mapquality</name>
  		<replaceName>MapQuality</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapquality</name>
  		<replaceName>MapQuality</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapquality</name>
  		<replaceName>MapQuality</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapquality() const;
  inline void set_mapquality(::google::protobuf::uint32 value);

  // optional uint32 PassNum = 3;
  inline bool has_passnum() const;
  inline void clear_passnum();
  static const int kPassNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureQualityPassInfo</name>
  	<Function>
  		<name>passnum</name>
  		<replaceName>PassNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_passnum</name>
  		<replaceName>PassNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_passnum</name>
  		<replaceName>PassNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 passnum() const;
  inline void set_passnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureQualityPassInfo)
 private:
  inline void set_has_maplevel();
  inline void clear_has_maplevel();
  inline void set_has_mapquality();
  inline void clear_has_mapquality();
  inline void set_has_passnum();
  inline void clear_has_passnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 maplevel_;
  ::google::protobuf::uint32 mapquality_;
  ::google::protobuf::uint32 passnum_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureQualityPassInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureGetPassInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureGetPassInfoRsp : public ::google::protobuf::Message {
 public:
  TAdventureGetPassInfoRsp();
  virtual ~TAdventureGetPassInfoRsp();

  TAdventureGetPassInfoRsp(const TAdventureGetPassInfoRsp& from);

  inline TAdventureGetPassInfoRsp& operator=(const TAdventureGetPassInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureGetPassInfoRsp& default_instance();

  void Swap(TAdventureGetPassInfoRsp* other);

  // implements Message ----------------------------------------------

  TAdventureGetPassInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureGetPassInfoRsp& from);
  void MergeFrom(const TAdventureGetPassInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TAdventureQualityPassInfo PassInfoArr = 1;
  inline int passinfoarr_size() const;
  inline void clear_passinfoarr();
  static const int kPassInfoArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetPassInfoRsp</name>
  	<Function>
  		<name>passinfoarr</name>
  		<replaceName>PassInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_passinfoarr</name>
  		<replaceName>PassInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_passinfoarr</name>
  		<replaceName>PassInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_passinfoarr</name>
  		<replaceName>PassInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>passinfoarr_size</name>
  		<replaceName>PassInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureQualityPassInfo& passinfoarr(int index) const;
  inline ::pb::TAdventureQualityPassInfo* mutable_passinfoarr(int index);
  inline ::pb::TAdventureQualityPassInfo* add_passinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureQualityPassInfo >&
      passinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureQualityPassInfo >*
      mutable_passinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureGetPassInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureQualityPassInfo > passinfoarr_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureGetPassInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureRefreshActMapReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureRefreshActMapReq : public ::google::protobuf::Message {
 public:
  TAdventureRefreshActMapReq();
  virtual ~TAdventureRefreshActMapReq();

  TAdventureRefreshActMapReq(const TAdventureRefreshActMapReq& from);

  inline TAdventureRefreshActMapReq& operator=(const TAdventureRefreshActMapReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureRefreshActMapReq& default_instance();

  void Swap(TAdventureRefreshActMapReq* other);

  // implements Message ----------------------------------------------

  TAdventureRefreshActMapReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureRefreshActMapReq& from);
  void MergeFrom(const TAdventureRefreshActMapReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EAdventureRefreshMapCostType CostType = 1;
  inline bool has_costtype() const;
  inline void clear_costtype();
  static const int kCostTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureRefreshActMapReq</name>
  	<Function>
  		<name>costtype</name>
  		<replaceName>CostType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_costtype</name>
  		<replaceName>CostType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_costtype</name>
  		<replaceName>CostType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAdventureRefreshMapCostType costtype() const;
  inline void set_costtype(::pb::EAdventureRefreshMapCostType value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureRefreshActMapReq)
 private:
  inline void set_has_costtype();
  inline void clear_has_costtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int costtype_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureRefreshActMapReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureRefreshActMapRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureRefreshActMapRsp : public ::google::protobuf::Message {
 public:
  TAdventureRefreshActMapRsp();
  virtual ~TAdventureRefreshActMapRsp();

  TAdventureRefreshActMapRsp(const TAdventureRefreshActMapRsp& from);

  inline TAdventureRefreshActMapRsp& operator=(const TAdventureRefreshActMapRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureRefreshActMapRsp& default_instance();

  void Swap(TAdventureRefreshActMapRsp* other);

  // implements Message ----------------------------------------------

  TAdventureRefreshActMapRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureRefreshActMapRsp& from);
  void MergeFrom(const TAdventureRefreshActMapRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ActMapId = 1;
  inline bool has_actmapid() const;
  inline void clear_actmapid();
  static const int kActMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureRefreshActMapRsp</name>
  	<Function>
  		<name>actmapid</name>
  		<replaceName>ActMapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_actmapid</name>
  		<replaceName>ActMapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_actmapid</name>
  		<replaceName>ActMapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 actmapid() const;
  inline void set_actmapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureRefreshActMapRsp)
 private:
  inline void set_has_actmapid();
  inline void clear_has_actmapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 actmapid_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureRefreshActMapRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureBackToStartPosRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureBackToStartPosRsp : public ::google::protobuf::Message {
 public:
  TAdventureBackToStartPosRsp();
  virtual ~TAdventureBackToStartPosRsp();

  TAdventureBackToStartPosRsp(const TAdventureBackToStartPosRsp& from);

  inline TAdventureBackToStartPosRsp& operator=(const TAdventureBackToStartPosRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureBackToStartPosRsp& default_instance();

  void Swap(TAdventureBackToStartPosRsp* other);

  // implements Message ----------------------------------------------

  TAdventureBackToStartPosRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureBackToStartPosRsp& from);
  void MergeFrom(const TAdventureBackToStartPosRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 StartLayerIndex = 1;
  inline bool has_startlayerindex() const;
  inline void clear_startlayerindex();
  static const int kStartLayerIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureBackToStartPosRsp</name>
  	<Function>
  		<name>startlayerindex</name>
  		<replaceName>StartLayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_startlayerindex</name>
  		<replaceName>StartLayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_startlayerindex</name>
  		<replaceName>StartLayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 startlayerindex() const;
  inline void set_startlayerindex(::google::protobuf::uint32 value);

  // optional int32 StartPosX = 2;
  inline bool has_startposx() const;
  inline void clear_startposx();
  static const int kStartPosXFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureBackToStartPosRsp</name>
  	<Function>
  		<name>startposx</name>
  		<replaceName>StartPosX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_startposx</name>
  		<replaceName>StartPosX</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_startposx</name>
  		<replaceName>StartPosX</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 startposx() const;
  inline void set_startposx(::google::protobuf::int32 value);

  // optional int32 StartPosY = 3;
  inline bool has_startposy() const;
  inline void clear_startposy();
  static const int kStartPosYFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureBackToStartPosRsp</name>
  	<Function>
  		<name>startposy</name>
  		<replaceName>StartPosY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_startposy</name>
  		<replaceName>StartPosY</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_startposy</name>
  		<replaceName>StartPosY</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 startposy() const;
  inline void set_startposy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureBackToStartPosRsp)
 private:
  inline void set_has_startlayerindex();
  inline void clear_has_startlayerindex();
  inline void set_has_startposx();
  inline void clear_has_startposx();
  inline void set_has_startposy();
  inline void clear_has_startposy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 startlayerindex_;
  ::google::protobuf::int32 startposx_;
  ::google::protobuf::int32 startposy_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureBackToStartPosRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureSetRatioModeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureSetRatioModeReq : public ::google::protobuf::Message {
 public:
  TAdventureSetRatioModeReq();
  virtual ~TAdventureSetRatioModeReq();

  TAdventureSetRatioModeReq(const TAdventureSetRatioModeReq& from);

  inline TAdventureSetRatioModeReq& operator=(const TAdventureSetRatioModeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureSetRatioModeReq& default_instance();

  void Swap(TAdventureSetRatioModeReq* other);

  // implements Message ----------------------------------------------

  TAdventureSetRatioModeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureSetRatioModeReq& from);
  void MergeFrom(const TAdventureSetRatioModeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RatioMode = 1;
  inline bool has_ratiomode() const;
  inline void clear_ratiomode();
  static const int kRatioModeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureSetRatioModeReq</name>
  	<Function>
  		<name>ratiomode</name>
  		<replaceName>RatioMode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ratiomode</name>
  		<replaceName>RatioMode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ratiomode</name>
  		<replaceName>RatioMode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 ratiomode() const;
  inline void set_ratiomode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureSetRatioModeReq)
 private:
  inline void set_has_ratiomode();
  inline void clear_has_ratiomode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ratiomode_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureSetRatioModeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureGetHangUpInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureGetHangUpInfoRsp : public ::google::protobuf::Message {
 public:
  TAdventureGetHangUpInfoRsp();
  virtual ~TAdventureGetHangUpInfoRsp();

  TAdventureGetHangUpInfoRsp(const TAdventureGetHangUpInfoRsp& from);

  inline TAdventureGetHangUpInfoRsp& operator=(const TAdventureGetHangUpInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureGetHangUpInfoRsp& default_instance();

  void Swap(TAdventureGetHangUpInfoRsp* other);

  // implements Message ----------------------------------------------

  TAdventureGetHangUpInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureGetHangUpInfoRsp& from);
  void MergeFrom(const TAdventureGetHangUpInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TAdventureUserSimpleInfo PunishedUserArr = 1;
  inline int punisheduserarr_size() const;
  inline void clear_punisheduserarr();
  static const int kPunishedUserArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetHangUpInfoRsp</name>
  	<Function>
  		<name>punisheduserarr</name>
  		<replaceName>PunishedUserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_punisheduserarr</name>
  		<replaceName>PunishedUserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_punisheduserarr</name>
  		<replaceName>PunishedUserArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_punisheduserarr</name>
  		<replaceName>PunishedUserArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>punisheduserarr_size</name>
  		<replaceName>PunishedUserArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureUserSimpleInfo& punisheduserarr(int index) const;
  inline ::pb::TAdventureUserSimpleInfo* mutable_punisheduserarr(int index);
  inline ::pb::TAdventureUserSimpleInfo* add_punisheduserarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureUserSimpleInfo >&
      punisheduserarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureUserSimpleInfo >*
      mutable_punisheduserarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureGetHangUpInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureUserSimpleInfo > punisheduserarr_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureGetHangUpInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureSweepReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureSweepReq : public ::google::protobuf::Message {
 public:
  TAdventureSweepReq();
  virtual ~TAdventureSweepReq();

  TAdventureSweepReq(const TAdventureSweepReq& from);

  inline TAdventureSweepReq& operator=(const TAdventureSweepReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureSweepReq& default_instance();

  void Swap(TAdventureSweepReq* other);

  // implements Message ----------------------------------------------

  TAdventureSweepReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureSweepReq& from);
  void MergeFrom(const TAdventureSweepReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 MapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureSweepReq</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mapid() const;
  inline void set_mapid(::google::protobuf::uint64 value);

  // optional .pb.EAdventureType AdventureType = 2;
  inline bool has_adventuretype() const;
  inline void clear_adventuretype();
  static const int kAdventureTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureSweepReq</name>
  	<Function>
  		<name>adventuretype</name>
  		<replaceName>AdventureType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_adventuretype</name>
  		<replaceName>AdventureType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_adventuretype</name>
  		<replaceName>AdventureType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAdventureType adventuretype() const;
  inline void set_adventuretype(::pb::EAdventureType value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureSweepReq)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_adventuretype();
  inline void clear_has_adventuretype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 mapid_;
  int adventuretype_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureSweepReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureSweepRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Adventure.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureSweepRsp : public ::google::protobuf::Message {
 public:
  TAdventureSweepRsp();
  virtual ~TAdventureSweepRsp();

  TAdventureSweepRsp(const TAdventureSweepRsp& from);

  inline TAdventureSweepRsp& operator=(const TAdventureSweepRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureSweepRsp& default_instance();

  void Swap(TAdventureSweepRsp* other);

  // implements Message ----------------------------------------------

  TAdventureSweepRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureSweepRsp& from);
  void MergeFrom(const TAdventureSweepRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureSweepRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // optional uint32 RatioMode = 2;
  inline bool has_ratiomode() const;
  inline void clear_ratiomode();
  static const int kRatioModeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureSweepRsp</name>
  	<Function>
  		<name>ratiomode</name>
  		<replaceName>RatioMode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ratiomode</name>
  		<replaceName>RatioMode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ratiomode</name>
  		<replaceName>RatioMode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 ratiomode() const;
  inline void set_ratiomode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureSweepRsp)
 private:
  inline void set_has_ratiomode();
  inline void clear_has_ratiomode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  ::google::protobuf::uint32 ratiomode_;
  friend void  protobuf_AddDesc_net_2fAdventure_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventure_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventure_2eproto();

  void InitAsDefaultInstance();
  static TAdventureSweepRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TAdventureGetInfoRsp

// optional uint32 AdventureNum = 1;
inline bool TAdventureGetInfoRsp::has_adventurenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureGetInfoRsp::set_has_adventurenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureGetInfoRsp::clear_has_adventurenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureGetInfoRsp::clear_adventurenum() {
  adventurenum_ = 0u;
  clear_has_adventurenum();
}
inline ::google::protobuf::uint32 TAdventureGetInfoRsp::adventurenum() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetInfoRsp.AdventureNum)
  return adventurenum_;
}
inline void TAdventureGetInfoRsp::set_adventurenum(::google::protobuf::uint32 value) {
  set_has_adventurenum();
  adventurenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetInfoRsp.AdventureNum)
}

// optional uint32 BuyAdventureNum = 2;
inline bool TAdventureGetInfoRsp::has_buyadventurenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureGetInfoRsp::set_has_buyadventurenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureGetInfoRsp::clear_has_buyadventurenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureGetInfoRsp::clear_buyadventurenum() {
  buyadventurenum_ = 0u;
  clear_has_buyadventurenum();
}
inline ::google::protobuf::uint32 TAdventureGetInfoRsp::buyadventurenum() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetInfoRsp.BuyAdventureNum)
  return buyadventurenum_;
}
inline void TAdventureGetInfoRsp::set_buyadventurenum(::google::protobuf::uint32 value) {
  set_has_buyadventurenum();
  buyadventurenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetInfoRsp.BuyAdventureNum)
}

// optional uint32 FreeRefreshNum = 3;
inline bool TAdventureGetInfoRsp::has_freerefreshnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureGetInfoRsp::set_has_freerefreshnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureGetInfoRsp::clear_has_freerefreshnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureGetInfoRsp::clear_freerefreshnum() {
  freerefreshnum_ = 0u;
  clear_has_freerefreshnum();
}
inline ::google::protobuf::uint32 TAdventureGetInfoRsp::freerefreshnum() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetInfoRsp.FreeRefreshNum)
  return freerefreshnum_;
}
inline void TAdventureGetInfoRsp::set_freerefreshnum(::google::protobuf::uint32 value) {
  set_has_freerefreshnum();
  freerefreshnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetInfoRsp.FreeRefreshNum)
}

// optional uint32 GoldRefreshNum = 4;
inline bool TAdventureGetInfoRsp::has_goldrefreshnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureGetInfoRsp::set_has_goldrefreshnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureGetInfoRsp::clear_has_goldrefreshnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureGetInfoRsp::clear_goldrefreshnum() {
  goldrefreshnum_ = 0u;
  clear_has_goldrefreshnum();
}
inline ::google::protobuf::uint32 TAdventureGetInfoRsp::goldrefreshnum() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetInfoRsp.GoldRefreshNum)
  return goldrefreshnum_;
}
inline void TAdventureGetInfoRsp::set_goldrefreshnum(::google::protobuf::uint32 value) {
  set_has_goldrefreshnum();
  goldrefreshnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetInfoRsp.GoldRefreshNum)
}

// optional uint32 AdventureLevelId = 5;
inline bool TAdventureGetInfoRsp::has_adventurelevelid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAdventureGetInfoRsp::set_has_adventurelevelid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAdventureGetInfoRsp::clear_has_adventurelevelid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAdventureGetInfoRsp::clear_adventurelevelid() {
  adventurelevelid_ = 0u;
  clear_has_adventurelevelid();
}
inline ::google::protobuf::uint32 TAdventureGetInfoRsp::adventurelevelid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetInfoRsp.AdventureLevelId)
  return adventurelevelid_;
}
inline void TAdventureGetInfoRsp::set_adventurelevelid(::google::protobuf::uint32 value) {
  set_has_adventurelevelid();
  adventurelevelid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetInfoRsp.AdventureLevelId)
}

// optional .pb.TAdventureMapList MapList = 6;
inline bool TAdventureGetInfoRsp::has_maplist() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TAdventureGetInfoRsp::set_has_maplist() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TAdventureGetInfoRsp::clear_has_maplist() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TAdventureGetInfoRsp::clear_maplist() {
  if (maplist_ != NULL) maplist_->::pb::TAdventureMapList::Clear();
  clear_has_maplist();
}
inline const ::pb::TAdventureMapList& TAdventureGetInfoRsp::maplist() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetInfoRsp.MapList)
  return maplist_ != NULL ? *maplist_ : *default_instance_->maplist_;
}
inline ::pb::TAdventureMapList* TAdventureGetInfoRsp::mutable_maplist() {
  set_has_maplist();
  if (maplist_ == NULL) maplist_ = new ::pb::TAdventureMapList;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureGetInfoRsp.MapList)
  return maplist_;
}
inline ::pb::TAdventureMapList* TAdventureGetInfoRsp::release_maplist() {
  clear_has_maplist();
  ::pb::TAdventureMapList* temp = maplist_;
  maplist_ = NULL;
  return temp;
}
inline void TAdventureGetInfoRsp::set_allocated_maplist(::pb::TAdventureMapList* maplist) {
  delete maplist_;
  maplist_ = maplist;
  if (maplist) {
    set_has_maplist();
  } else {
    clear_has_maplist();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureGetInfoRsp.MapList)
}

// repeated .pb.TAdventLevelExpNum ExpNumArr = 7;
inline int TAdventureGetInfoRsp::expnumarr_size() const {
  return expnumarr_.size();
}
inline void TAdventureGetInfoRsp::clear_expnumarr() {
  expnumarr_.Clear();
}
inline const ::pb::TAdventLevelExpNum& TAdventureGetInfoRsp::expnumarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetInfoRsp.ExpNumArr)
  return expnumarr_.Get(index);
}
inline ::pb::TAdventLevelExpNum* TAdventureGetInfoRsp::mutable_expnumarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureGetInfoRsp.ExpNumArr)
  return expnumarr_.Mutable(index);
}
inline ::pb::TAdventLevelExpNum* TAdventureGetInfoRsp::add_expnumarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureGetInfoRsp.ExpNumArr)
  return expnumarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventLevelExpNum >&
TAdventureGetInfoRsp::expnumarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureGetInfoRsp.ExpNumArr)
  return expnumarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventLevelExpNum >*
TAdventureGetInfoRsp::mutable_expnumarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureGetInfoRsp.ExpNumArr)
  return &expnumarr_;
}

// optional .pb.EAdventureType AdventureType = 8;
inline bool TAdventureGetInfoRsp::has_adventuretype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TAdventureGetInfoRsp::set_has_adventuretype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TAdventureGetInfoRsp::clear_has_adventuretype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TAdventureGetInfoRsp::clear_adventuretype() {
  adventuretype_ = 0;
  clear_has_adventuretype();
}
inline ::pb::EAdventureType TAdventureGetInfoRsp::adventuretype() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetInfoRsp.AdventureType)
  return static_cast< ::pb::EAdventureType >(adventuretype_);
}
inline void TAdventureGetInfoRsp::set_adventuretype(::pb::EAdventureType value) {
  assert(::pb::EAdventureType_IsValid(value));
  set_has_adventuretype();
  adventuretype_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetInfoRsp.AdventureType)
}

// optional uint64 MapId = 9;
inline bool TAdventureGetInfoRsp::has_mapid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TAdventureGetInfoRsp::set_has_mapid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TAdventureGetInfoRsp::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TAdventureGetInfoRsp::clear_mapid() {
  mapid_ = GOOGLE_ULONGLONG(0);
  clear_has_mapid();
}
inline ::google::protobuf::uint64 TAdventureGetInfoRsp::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetInfoRsp.MapId)
  return mapid_;
}
inline void TAdventureGetInfoRsp::set_mapid(::google::protobuf::uint64 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetInfoRsp.MapId)
}

// optional uint64 TeamId = 10;
inline bool TAdventureGetInfoRsp::has_teamid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TAdventureGetInfoRsp::set_has_teamid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TAdventureGetInfoRsp::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TAdventureGetInfoRsp::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TAdventureGetInfoRsp::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetInfoRsp.TeamId)
  return teamid_;
}
inline void TAdventureGetInfoRsp::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetInfoRsp.TeamId)
}

// optional uint64 MapExpireTime = 11;
inline bool TAdventureGetInfoRsp::has_mapexpiretime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TAdventureGetInfoRsp::set_has_mapexpiretime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TAdventureGetInfoRsp::clear_has_mapexpiretime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TAdventureGetInfoRsp::clear_mapexpiretime() {
  mapexpiretime_ = GOOGLE_ULONGLONG(0);
  clear_has_mapexpiretime();
}
inline ::google::protobuf::uint64 TAdventureGetInfoRsp::mapexpiretime() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetInfoRsp.MapExpireTime)
  return mapexpiretime_;
}
inline void TAdventureGetInfoRsp::set_mapexpiretime(::google::protobuf::uint64 value) {
  set_has_mapexpiretime();
  mapexpiretime_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetInfoRsp.MapExpireTime)
}

// optional uint32 ActAdventureNum = 12;
inline bool TAdventureGetInfoRsp::has_actadventurenum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TAdventureGetInfoRsp::set_has_actadventurenum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TAdventureGetInfoRsp::clear_has_actadventurenum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TAdventureGetInfoRsp::clear_actadventurenum() {
  actadventurenum_ = 0u;
  clear_has_actadventurenum();
}
inline ::google::protobuf::uint32 TAdventureGetInfoRsp::actadventurenum() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetInfoRsp.ActAdventureNum)
  return actadventurenum_;
}
inline void TAdventureGetInfoRsp::set_actadventurenum(::google::protobuf::uint32 value) {
  set_has_actadventurenum();
  actadventurenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetInfoRsp.ActAdventureNum)
}

// optional .pb.TAdventureActivityInfo ActInfo = 13;
inline bool TAdventureGetInfoRsp::has_actinfo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TAdventureGetInfoRsp::set_has_actinfo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TAdventureGetInfoRsp::clear_has_actinfo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TAdventureGetInfoRsp::clear_actinfo() {
  if (actinfo_ != NULL) actinfo_->::pb::TAdventureActivityInfo::Clear();
  clear_has_actinfo();
}
inline const ::pb::TAdventureActivityInfo& TAdventureGetInfoRsp::actinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetInfoRsp.ActInfo)
  return actinfo_ != NULL ? *actinfo_ : *default_instance_->actinfo_;
}
inline ::pb::TAdventureActivityInfo* TAdventureGetInfoRsp::mutable_actinfo() {
  set_has_actinfo();
  if (actinfo_ == NULL) actinfo_ = new ::pb::TAdventureActivityInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureGetInfoRsp.ActInfo)
  return actinfo_;
}
inline ::pb::TAdventureActivityInfo* TAdventureGetInfoRsp::release_actinfo() {
  clear_has_actinfo();
  ::pb::TAdventureActivityInfo* temp = actinfo_;
  actinfo_ = NULL;
  return temp;
}
inline void TAdventureGetInfoRsp::set_allocated_actinfo(::pb::TAdventureActivityInfo* actinfo) {
  delete actinfo_;
  actinfo_ = actinfo;
  if (actinfo) {
    set_has_actinfo();
  } else {
    clear_has_actinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureGetInfoRsp.ActInfo)
}

// optional uint32 RatioMode = 14;
inline bool TAdventureGetInfoRsp::has_ratiomode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TAdventureGetInfoRsp::set_has_ratiomode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TAdventureGetInfoRsp::clear_has_ratiomode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TAdventureGetInfoRsp::clear_ratiomode() {
  ratiomode_ = 0u;
  clear_has_ratiomode();
}
inline ::google::protobuf::uint32 TAdventureGetInfoRsp::ratiomode() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetInfoRsp.RatioMode)
  return ratiomode_;
}
inline void TAdventureGetInfoRsp::set_ratiomode(::google::protobuf::uint32 value) {
  set_has_ratiomode();
  ratiomode_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetInfoRsp.RatioMode)
}

// -------------------------------------------------------------------

// TAdventureActivityInfo

// optional uint32 CurActMapId = 1;
inline bool TAdventureActivityInfo::has_curactmapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureActivityInfo::set_has_curactmapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureActivityInfo::clear_has_curactmapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureActivityInfo::clear_curactmapid() {
  curactmapid_ = 0u;
  clear_has_curactmapid();
}
inline ::google::protobuf::uint32 TAdventureActivityInfo::curactmapid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureActivityInfo.CurActMapId)
  return curactmapid_;
}
inline void TAdventureActivityInfo::set_curactmapid(::google::protobuf::uint32 value) {
  set_has_curactmapid();
  curactmapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureActivityInfo.CurActMapId)
}

// optional uint32 ActAdventureNum = 2;
inline bool TAdventureActivityInfo::has_actadventurenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureActivityInfo::set_has_actadventurenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureActivityInfo::clear_has_actadventurenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureActivityInfo::clear_actadventurenum() {
  actadventurenum_ = 0u;
  clear_has_actadventurenum();
}
inline ::google::protobuf::uint32 TAdventureActivityInfo::actadventurenum() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureActivityInfo.ActAdventureNum)
  return actadventurenum_;
}
inline void TAdventureActivityInfo::set_actadventurenum(::google::protobuf::uint32 value) {
  set_has_actadventurenum();
  actadventurenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureActivityInfo.ActAdventureNum)
}

// optional uint32 ActFreeRfrNum = 3;
inline bool TAdventureActivityInfo::has_actfreerfrnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureActivityInfo::set_has_actfreerfrnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureActivityInfo::clear_has_actfreerfrnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureActivityInfo::clear_actfreerfrnum() {
  actfreerfrnum_ = 0u;
  clear_has_actfreerfrnum();
}
inline ::google::protobuf::uint32 TAdventureActivityInfo::actfreerfrnum() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureActivityInfo.ActFreeRfrNum)
  return actfreerfrnum_;
}
inline void TAdventureActivityInfo::set_actfreerfrnum(::google::protobuf::uint32 value) {
  set_has_actfreerfrnum();
  actfreerfrnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureActivityInfo.ActFreeRfrNum)
}

// optional uint32 ActGoldRfrNum = 4;
inline bool TAdventureActivityInfo::has_actgoldrfrnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureActivityInfo::set_has_actgoldrfrnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureActivityInfo::clear_has_actgoldrfrnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureActivityInfo::clear_actgoldrfrnum() {
  actgoldrfrnum_ = 0u;
  clear_has_actgoldrfrnum();
}
inline ::google::protobuf::uint32 TAdventureActivityInfo::actgoldrfrnum() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureActivityInfo.ActGoldRfrNum)
  return actgoldrfrnum_;
}
inline void TAdventureActivityInfo::set_actgoldrfrnum(::google::protobuf::uint32 value) {
  set_has_actgoldrfrnum();
  actgoldrfrnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureActivityInfo.ActGoldRfrNum)
}

// -------------------------------------------------------------------

// TAdventureGetListReq

// optional uint32 AdventureLevelId = 1;
inline bool TAdventureGetListReq::has_adventurelevelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureGetListReq::set_has_adventurelevelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureGetListReq::clear_has_adventurelevelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureGetListReq::clear_adventurelevelid() {
  adventurelevelid_ = 0u;
  clear_has_adventurelevelid();
}
inline ::google::protobuf::uint32 TAdventureGetListReq::adventurelevelid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetListReq.AdventureLevelId)
  return adventurelevelid_;
}
inline void TAdventureGetListReq::set_adventurelevelid(::google::protobuf::uint32 value) {
  set_has_adventurelevelid();
  adventurelevelid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetListReq.AdventureLevelId)
}

// -------------------------------------------------------------------

// TAdventureGetListRsp

// optional .pb.TAdventureMapList MapList = 1;
inline bool TAdventureGetListRsp::has_maplist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureGetListRsp::set_has_maplist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureGetListRsp::clear_has_maplist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureGetListRsp::clear_maplist() {
  if (maplist_ != NULL) maplist_->::pb::TAdventureMapList::Clear();
  clear_has_maplist();
}
inline const ::pb::TAdventureMapList& TAdventureGetListRsp::maplist() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetListRsp.MapList)
  return maplist_ != NULL ? *maplist_ : *default_instance_->maplist_;
}
inline ::pb::TAdventureMapList* TAdventureGetListRsp::mutable_maplist() {
  set_has_maplist();
  if (maplist_ == NULL) maplist_ = new ::pb::TAdventureMapList;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureGetListRsp.MapList)
  return maplist_;
}
inline ::pb::TAdventureMapList* TAdventureGetListRsp::release_maplist() {
  clear_has_maplist();
  ::pb::TAdventureMapList* temp = maplist_;
  maplist_ = NULL;
  return temp;
}
inline void TAdventureGetListRsp::set_allocated_maplist(::pb::TAdventureMapList* maplist) {
  delete maplist_;
  maplist_ = maplist;
  if (maplist) {
    set_has_maplist();
  } else {
    clear_has_maplist();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureGetListRsp.MapList)
}

// -------------------------------------------------------------------

// TAdventureRefreshListRsp

// optional .pb.TAdventureMapList MapList = 1;
inline bool TAdventureRefreshListRsp::has_maplist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureRefreshListRsp::set_has_maplist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureRefreshListRsp::clear_has_maplist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureRefreshListRsp::clear_maplist() {
  if (maplist_ != NULL) maplist_->::pb::TAdventureMapList::Clear();
  clear_has_maplist();
}
inline const ::pb::TAdventureMapList& TAdventureRefreshListRsp::maplist() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureRefreshListRsp.MapList)
  return maplist_ != NULL ? *maplist_ : *default_instance_->maplist_;
}
inline ::pb::TAdventureMapList* TAdventureRefreshListRsp::mutable_maplist() {
  set_has_maplist();
  if (maplist_ == NULL) maplist_ = new ::pb::TAdventureMapList;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureRefreshListRsp.MapList)
  return maplist_;
}
inline ::pb::TAdventureMapList* TAdventureRefreshListRsp::release_maplist() {
  clear_has_maplist();
  ::pb::TAdventureMapList* temp = maplist_;
  maplist_ = NULL;
  return temp;
}
inline void TAdventureRefreshListRsp::set_allocated_maplist(::pb::TAdventureMapList* maplist) {
  delete maplist_;
  maplist_ = maplist;
  if (maplist) {
    set_has_maplist();
  } else {
    clear_has_maplist();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureRefreshListRsp.MapList)
}

// -------------------------------------------------------------------

// TAdventureStartMapReq

// optional uint64 MapId = 1;
inline bool TAdventureStartMapReq::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureStartMapReq::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureStartMapReq::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureStartMapReq::clear_mapid() {
  mapid_ = GOOGLE_ULONGLONG(0);
  clear_has_mapid();
}
inline ::google::protobuf::uint64 TAdventureStartMapReq::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureStartMapReq.MapId)
  return mapid_;
}
inline void TAdventureStartMapReq::set_mapid(::google::protobuf::uint64 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureStartMapReq.MapId)
}

// optional .pb.EAdventureType AdventureType = 2;
inline bool TAdventureStartMapReq::has_adventuretype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureStartMapReq::set_has_adventuretype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureStartMapReq::clear_has_adventuretype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureStartMapReq::clear_adventuretype() {
  adventuretype_ = 0;
  clear_has_adventuretype();
}
inline ::pb::EAdventureType TAdventureStartMapReq::adventuretype() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureStartMapReq.AdventureType)
  return static_cast< ::pb::EAdventureType >(adventuretype_);
}
inline void TAdventureStartMapReq::set_adventuretype(::pb::EAdventureType value) {
  assert(::pb::EAdventureType_IsValid(value));
  set_has_adventuretype();
  adventuretype_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureStartMapReq.AdventureType)
}

// -------------------------------------------------------------------

// TAdventureEnterMapReq

// optional uint64 TeamId = 1;
inline bool TAdventureEnterMapReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureEnterMapReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureEnterMapReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureEnterMapReq::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TAdventureEnterMapReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnterMapReq.TeamId)
  return teamid_;
}
inline void TAdventureEnterMapReq::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnterMapReq.TeamId)
}

// optional uint64 MapId = 2;
inline bool TAdventureEnterMapReq::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureEnterMapReq::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureEnterMapReq::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureEnterMapReq::clear_mapid() {
  mapid_ = GOOGLE_ULONGLONG(0);
  clear_has_mapid();
}
inline ::google::protobuf::uint64 TAdventureEnterMapReq::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnterMapReq.MapId)
  return mapid_;
}
inline void TAdventureEnterMapReq::set_mapid(::google::protobuf::uint64 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnterMapReq.MapId)
}

// -------------------------------------------------------------------

// TAdventureStartOrEnterMapRsp

// optional .pb.TAdventureCurMap CurMapInfo = 1;
inline bool TAdventureStartOrEnterMapRsp::has_curmapinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureStartOrEnterMapRsp::set_has_curmapinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureStartOrEnterMapRsp::clear_has_curmapinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureStartOrEnterMapRsp::clear_curmapinfo() {
  if (curmapinfo_ != NULL) curmapinfo_->::pb::TAdventureCurMap::Clear();
  clear_has_curmapinfo();
}
inline const ::pb::TAdventureCurMap& TAdventureStartOrEnterMapRsp::curmapinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureStartOrEnterMapRsp.CurMapInfo)
  return curmapinfo_ != NULL ? *curmapinfo_ : *default_instance_->curmapinfo_;
}
inline ::pb::TAdventureCurMap* TAdventureStartOrEnterMapRsp::mutable_curmapinfo() {
  set_has_curmapinfo();
  if (curmapinfo_ == NULL) curmapinfo_ = new ::pb::TAdventureCurMap;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureStartOrEnterMapRsp.CurMapInfo)
  return curmapinfo_;
}
inline ::pb::TAdventureCurMap* TAdventureStartOrEnterMapRsp::release_curmapinfo() {
  clear_has_curmapinfo();
  ::pb::TAdventureCurMap* temp = curmapinfo_;
  curmapinfo_ = NULL;
  return temp;
}
inline void TAdventureStartOrEnterMapRsp::set_allocated_curmapinfo(::pb::TAdventureCurMap* curmapinfo) {
  delete curmapinfo_;
  curmapinfo_ = curmapinfo;
  if (curmapinfo) {
    set_has_curmapinfo();
  } else {
    clear_has_curmapinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureStartOrEnterMapRsp.CurMapInfo)
}

// -------------------------------------------------------------------

// TAdventureCastingEventInfo

// optional uint32 LayerIndex = 1;
inline bool TAdventureCastingEventInfo::has_layerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureCastingEventInfo::set_has_layerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureCastingEventInfo::clear_has_layerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureCastingEventInfo::clear_layerindex() {
  layerindex_ = 0u;
  clear_has_layerindex();
}
inline ::google::protobuf::uint32 TAdventureCastingEventInfo::layerindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCastingEventInfo.LayerIndex)
  return layerindex_;
}
inline void TAdventureCastingEventInfo::set_layerindex(::google::protobuf::uint32 value) {
  set_has_layerindex();
  layerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureCastingEventInfo.LayerIndex)
}

// optional int32 PosX = 2;
inline bool TAdventureCastingEventInfo::has_posx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureCastingEventInfo::set_has_posx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureCastingEventInfo::clear_has_posx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureCastingEventInfo::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 TAdventureCastingEventInfo::posx() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCastingEventInfo.PosX)
  return posx_;
}
inline void TAdventureCastingEventInfo::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureCastingEventInfo.PosX)
}

// optional int32 PosY = 3;
inline bool TAdventureCastingEventInfo::has_posy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureCastingEventInfo::set_has_posy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureCastingEventInfo::clear_has_posy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureCastingEventInfo::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 TAdventureCastingEventInfo::posy() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCastingEventInfo.PosY)
  return posy_;
}
inline void TAdventureCastingEventInfo::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureCastingEventInfo.PosY)
}

// optional uint32 CastingNum = 4;
inline bool TAdventureCastingEventInfo::has_castingnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureCastingEventInfo::set_has_castingnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureCastingEventInfo::clear_has_castingnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureCastingEventInfo::clear_castingnum() {
  castingnum_ = 0u;
  clear_has_castingnum();
}
inline ::google::protobuf::uint32 TAdventureCastingEventInfo::castingnum() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCastingEventInfo.CastingNum)
  return castingnum_;
}
inline void TAdventureCastingEventInfo::set_castingnum(::google::protobuf::uint32 value) {
  set_has_castingnum();
  castingnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureCastingEventInfo.CastingNum)
}

// -------------------------------------------------------------------

// TAdventureCurMap

// optional .pb.AdventureMap MapBaseInfo = 1;
inline bool TAdventureCurMap::has_mapbaseinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureCurMap::set_has_mapbaseinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureCurMap::clear_has_mapbaseinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureCurMap::clear_mapbaseinfo() {
  if (mapbaseinfo_ != NULL) mapbaseinfo_->::pb::AdventureMap::Clear();
  clear_has_mapbaseinfo();
}
inline const ::pb::AdventureMap& TAdventureCurMap::mapbaseinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCurMap.MapBaseInfo)
  return mapbaseinfo_ != NULL ? *mapbaseinfo_ : *default_instance_->mapbaseinfo_;
}
inline ::pb::AdventureMap* TAdventureCurMap::mutable_mapbaseinfo() {
  set_has_mapbaseinfo();
  if (mapbaseinfo_ == NULL) mapbaseinfo_ = new ::pb::AdventureMap;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureCurMap.MapBaseInfo)
  return mapbaseinfo_;
}
inline ::pb::AdventureMap* TAdventureCurMap::release_mapbaseinfo() {
  clear_has_mapbaseinfo();
  ::pb::AdventureMap* temp = mapbaseinfo_;
  mapbaseinfo_ = NULL;
  return temp;
}
inline void TAdventureCurMap::set_allocated_mapbaseinfo(::pb::AdventureMap* mapbaseinfo) {
  delete mapbaseinfo_;
  mapbaseinfo_ = mapbaseinfo;
  if (mapbaseinfo) {
    set_has_mapbaseinfo();
  } else {
    clear_has_mapbaseinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureCurMap.MapBaseInfo)
}

// repeated .pb.TAdventureTeamRecord RecordArray = 2;
inline int TAdventureCurMap::recordarray_size() const {
  return recordarray_.size();
}
inline void TAdventureCurMap::clear_recordarray() {
  recordarray_.Clear();
}
inline const ::pb::TAdventureTeamRecord& TAdventureCurMap::recordarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCurMap.RecordArray)
  return recordarray_.Get(index);
}
inline ::pb::TAdventureTeamRecord* TAdventureCurMap::mutable_recordarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureCurMap.RecordArray)
  return recordarray_.Mutable(index);
}
inline ::pb::TAdventureTeamRecord* TAdventureCurMap::add_recordarray() {
  // @@protoc_insertion_point(field_add:pb.TAdventureCurMap.RecordArray)
  return recordarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTeamRecord >&
TAdventureCurMap::recordarray() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureCurMap.RecordArray)
  return recordarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTeamRecord >*
TAdventureCurMap::mutable_recordarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureCurMap.RecordArray)
  return &recordarray_;
}

// repeated .pb.TAdventureUserSimpleInfo AllUserArr = 3;
inline int TAdventureCurMap::alluserarr_size() const {
  return alluserarr_.size();
}
inline void TAdventureCurMap::clear_alluserarr() {
  alluserarr_.Clear();
}
inline const ::pb::TAdventureUserSimpleInfo& TAdventureCurMap::alluserarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCurMap.AllUserArr)
  return alluserarr_.Get(index);
}
inline ::pb::TAdventureUserSimpleInfo* TAdventureCurMap::mutable_alluserarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureCurMap.AllUserArr)
  return alluserarr_.Mutable(index);
}
inline ::pb::TAdventureUserSimpleInfo* TAdventureCurMap::add_alluserarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureCurMap.AllUserArr)
  return alluserarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureUserSimpleInfo >&
TAdventureCurMap::alluserarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureCurMap.AllUserArr)
  return alluserarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureUserSimpleInfo >*
TAdventureCurMap::mutable_alluserarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureCurMap.AllUserArr)
  return &alluserarr_;
}

// repeated .pb.TUserInfoWithPos UserInMapArr = 4;
inline int TAdventureCurMap::userinmaparr_size() const {
  return userinmaparr_.size();
}
inline void TAdventureCurMap::clear_userinmaparr() {
  userinmaparr_.Clear();
}
inline const ::pb::TUserInfoWithPos& TAdventureCurMap::userinmaparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCurMap.UserInMapArr)
  return userinmaparr_.Get(index);
}
inline ::pb::TUserInfoWithPos* TAdventureCurMap::mutable_userinmaparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureCurMap.UserInMapArr)
  return userinmaparr_.Mutable(index);
}
inline ::pb::TUserInfoWithPos* TAdventureCurMap::add_userinmaparr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureCurMap.UserInMapArr)
  return userinmaparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserInfoWithPos >&
TAdventureCurMap::userinmaparr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureCurMap.UserInMapArr)
  return userinmaparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserInfoWithPos >*
TAdventureCurMap::mutable_userinmaparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureCurMap.UserInMapArr)
  return &userinmaparr_;
}

// optional .pb.EAdventureType AdventureType = 5;
inline bool TAdventureCurMap::has_adventuretype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAdventureCurMap::set_has_adventuretype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAdventureCurMap::clear_has_adventuretype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAdventureCurMap::clear_adventuretype() {
  adventuretype_ = 0;
  clear_has_adventuretype();
}
inline ::pb::EAdventureType TAdventureCurMap::adventuretype() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCurMap.AdventureType)
  return static_cast< ::pb::EAdventureType >(adventuretype_);
}
inline void TAdventureCurMap::set_adventuretype(::pb::EAdventureType value) {
  assert(::pb::EAdventureType_IsValid(value));
  set_has_adventuretype();
  adventuretype_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureCurMap.AdventureType)
}

// optional uint64 TeamId = 7;
inline bool TAdventureCurMap::has_teamid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TAdventureCurMap::set_has_teamid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TAdventureCurMap::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TAdventureCurMap::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TAdventureCurMap::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCurMap.TeamId)
  return teamid_;
}
inline void TAdventureCurMap::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureCurMap.TeamId)
}

// optional uint32 CurEnergy = 8;
inline bool TAdventureCurMap::has_curenergy() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TAdventureCurMap::set_has_curenergy() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TAdventureCurMap::clear_has_curenergy() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TAdventureCurMap::clear_curenergy() {
  curenergy_ = 0u;
  clear_has_curenergy();
}
inline ::google::protobuf::uint32 TAdventureCurMap::curenergy() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCurMap.CurEnergy)
  return curenergy_;
}
inline void TAdventureCurMap::set_curenergy(::google::protobuf::uint32 value) {
  set_has_curenergy();
  curenergy_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureCurMap.CurEnergy)
}

// optional uint64 RewardTime = 9;
inline bool TAdventureCurMap::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TAdventureCurMap::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TAdventureCurMap::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TAdventureCurMap::clear_rewardtime() {
  rewardtime_ = GOOGLE_ULONGLONG(0);
  clear_has_rewardtime();
}
inline ::google::protobuf::uint64 TAdventureCurMap::rewardtime() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCurMap.RewardTime)
  return rewardtime_;
}
inline void TAdventureCurMap::set_rewardtime(::google::protobuf::uint64 value) {
  set_has_rewardtime();
  rewardtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureCurMap.RewardTime)
}

// optional uint64 LeaderUid = 10;
inline bool TAdventureCurMap::has_leaderuid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TAdventureCurMap::set_has_leaderuid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TAdventureCurMap::clear_has_leaderuid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TAdventureCurMap::clear_leaderuid() {
  leaderuid_ = GOOGLE_ULONGLONG(0);
  clear_has_leaderuid();
}
inline ::google::protobuf::uint64 TAdventureCurMap::leaderuid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCurMap.LeaderUid)
  return leaderuid_;
}
inline void TAdventureCurMap::set_leaderuid(::google::protobuf::uint64 value) {
  set_has_leaderuid();
  leaderuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureCurMap.LeaderUid)
}

// repeated .pb.TAdventureMonsterInfo MonsterInfoArr = 11;
inline int TAdventureCurMap::monsterinfoarr_size() const {
  return monsterinfoarr_.size();
}
inline void TAdventureCurMap::clear_monsterinfoarr() {
  monsterinfoarr_.Clear();
}
inline const ::pb::TAdventureMonsterInfo& TAdventureCurMap::monsterinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCurMap.MonsterInfoArr)
  return monsterinfoarr_.Get(index);
}
inline ::pb::TAdventureMonsterInfo* TAdventureCurMap::mutable_monsterinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureCurMap.MonsterInfoArr)
  return monsterinfoarr_.Mutable(index);
}
inline ::pb::TAdventureMonsterInfo* TAdventureCurMap::add_monsterinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureCurMap.MonsterInfoArr)
  return monsterinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMonsterInfo >&
TAdventureCurMap::monsterinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureCurMap.MonsterInfoArr)
  return monsterinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMonsterInfo >*
TAdventureCurMap::mutable_monsterinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureCurMap.MonsterInfoArr)
  return &monsterinfoarr_;
}

// optional uint64 EnterTime = 12;
inline bool TAdventureCurMap::has_entertime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TAdventureCurMap::set_has_entertime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TAdventureCurMap::clear_has_entertime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TAdventureCurMap::clear_entertime() {
  entertime_ = GOOGLE_ULONGLONG(0);
  clear_has_entertime();
}
inline ::google::protobuf::uint64 TAdventureCurMap::entertime() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCurMap.EnterTime)
  return entertime_;
}
inline void TAdventureCurMap::set_entertime(::google::protobuf::uint64 value) {
  set_has_entertime();
  entertime_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureCurMap.EnterTime)
}

// repeated .pb.TAdventureBusinessMan ShopArr = 13;
inline int TAdventureCurMap::shoparr_size() const {
  return shoparr_.size();
}
inline void TAdventureCurMap::clear_shoparr() {
  shoparr_.Clear();
}
inline const ::pb::TAdventureBusinessMan& TAdventureCurMap::shoparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCurMap.ShopArr)
  return shoparr_.Get(index);
}
inline ::pb::TAdventureBusinessMan* TAdventureCurMap::mutable_shoparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureCurMap.ShopArr)
  return shoparr_.Mutable(index);
}
inline ::pb::TAdventureBusinessMan* TAdventureCurMap::add_shoparr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureCurMap.ShopArr)
  return shoparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureBusinessMan >&
TAdventureCurMap::shoparr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureCurMap.ShopArr)
  return shoparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureBusinessMan >*
TAdventureCurMap::mutable_shoparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureCurMap.ShopArr)
  return &shoparr_;
}

// optional uint32 RatioMode = 14;
inline bool TAdventureCurMap::has_ratiomode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TAdventureCurMap::set_has_ratiomode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TAdventureCurMap::clear_has_ratiomode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TAdventureCurMap::clear_ratiomode() {
  ratiomode_ = 0u;
  clear_has_ratiomode();
}
inline ::google::protobuf::uint32 TAdventureCurMap::ratiomode() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCurMap.RatioMode)
  return ratiomode_;
}
inline void TAdventureCurMap::set_ratiomode(::google::protobuf::uint32 value) {
  set_has_ratiomode();
  ratiomode_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureCurMap.RatioMode)
}

// repeated .pb.TAdventureCastingEventInfo CastingEventInfoArr = 15;
inline int TAdventureCurMap::castingeventinfoarr_size() const {
  return castingeventinfoarr_.size();
}
inline void TAdventureCurMap::clear_castingeventinfoarr() {
  castingeventinfoarr_.Clear();
}
inline const ::pb::TAdventureCastingEventInfo& TAdventureCurMap::castingeventinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCurMap.CastingEventInfoArr)
  return castingeventinfoarr_.Get(index);
}
inline ::pb::TAdventureCastingEventInfo* TAdventureCurMap::mutable_castingeventinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureCurMap.CastingEventInfoArr)
  return castingeventinfoarr_.Mutable(index);
}
inline ::pb::TAdventureCastingEventInfo* TAdventureCurMap::add_castingeventinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureCurMap.CastingEventInfoArr)
  return castingeventinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureCastingEventInfo >&
TAdventureCurMap::castingeventinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureCurMap.CastingEventInfoArr)
  return castingeventinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureCastingEventInfo >*
TAdventureCurMap::mutable_castingeventinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureCurMap.CastingEventInfoArr)
  return &castingeventinfoarr_;
}

// -------------------------------------------------------------------

// TAdventureReportPosReq

// optional uint64 TeamId = 1;
inline bool TAdventureReportPosReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureReportPosReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureReportPosReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureReportPosReq::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TAdventureReportPosReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureReportPosReq.TeamId)
  return teamid_;
}
inline void TAdventureReportPosReq::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureReportPosReq.TeamId)
}

// optional uint32 LayerIndex = 2;
inline bool TAdventureReportPosReq::has_layerindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureReportPosReq::set_has_layerindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureReportPosReq::clear_has_layerindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureReportPosReq::clear_layerindex() {
  layerindex_ = 0u;
  clear_has_layerindex();
}
inline ::google::protobuf::uint32 TAdventureReportPosReq::layerindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureReportPosReq.LayerIndex)
  return layerindex_;
}
inline void TAdventureReportPosReq::set_layerindex(::google::protobuf::uint32 value) {
  set_has_layerindex();
  layerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureReportPosReq.LayerIndex)
}

// optional int32 PosX = 3;
inline bool TAdventureReportPosReq::has_posx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureReportPosReq::set_has_posx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureReportPosReq::clear_has_posx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureReportPosReq::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 TAdventureReportPosReq::posx() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureReportPosReq.PosX)
  return posx_;
}
inline void TAdventureReportPosReq::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureReportPosReq.PosX)
}

// optional int32 PosY = 4;
inline bool TAdventureReportPosReq::has_posy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureReportPosReq::set_has_posy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureReportPosReq::clear_has_posy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureReportPosReq::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 TAdventureReportPosReq::posy() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureReportPosReq.PosY)
  return posy_;
}
inline void TAdventureReportPosReq::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureReportPosReq.PosY)
}

// optional .pb.EAdventurePosChangeType PosChangeType = 5;
inline bool TAdventureReportPosReq::has_poschangetype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAdventureReportPosReq::set_has_poschangetype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAdventureReportPosReq::clear_has_poschangetype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAdventureReportPosReq::clear_poschangetype() {
  poschangetype_ = 1;
  clear_has_poschangetype();
}
inline ::pb::EAdventurePosChangeType TAdventureReportPosReq::poschangetype() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureReportPosReq.PosChangeType)
  return static_cast< ::pb::EAdventurePosChangeType >(poschangetype_);
}
inline void TAdventureReportPosReq::set_poschangetype(::pb::EAdventurePosChangeType value) {
  assert(::pb::EAdventurePosChangeType_IsValid(value));
  set_has_poschangetype();
  poschangetype_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureReportPosReq.PosChangeType)
}

// -------------------------------------------------------------------

// TAdventureQuitMapRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TAdventureQuitMapRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TAdventureQuitMapRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TAdventureQuitMapRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureQuitMapRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TAdventureQuitMapRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureQuitMapRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TAdventureQuitMapRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TAdventureQuitMapRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TAdventureQuitMapRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureQuitMapRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TAdventureQuitMapRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureQuitMapRsp.RewardArray)
  return &rewardarray_;
}

// optional uint32 RatioMode = 2;
inline bool TAdventureQuitMapRsp::has_ratiomode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureQuitMapRsp::set_has_ratiomode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureQuitMapRsp::clear_has_ratiomode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureQuitMapRsp::clear_ratiomode() {
  ratiomode_ = 0u;
  clear_has_ratiomode();
}
inline ::google::protobuf::uint32 TAdventureQuitMapRsp::ratiomode() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureQuitMapRsp.RatioMode)
  return ratiomode_;
}
inline void TAdventureQuitMapRsp::set_ratiomode(::google::protobuf::uint32 value) {
  set_has_ratiomode();
  ratiomode_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureQuitMapRsp.RatioMode)
}

// -------------------------------------------------------------------

// TAdventureTriggerEventReq

// optional uint64 TeamId = 1;
inline bool TAdventureTriggerEventReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTriggerEventReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTriggerEventReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTriggerEventReq::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TAdventureTriggerEventReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTriggerEventReq.TeamId)
  return teamid_;
}
inline void TAdventureTriggerEventReq::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTriggerEventReq.TeamId)
}

// optional uint32 LayerIndex = 2;
inline bool TAdventureTriggerEventReq::has_layerindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureTriggerEventReq::set_has_layerindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureTriggerEventReq::clear_has_layerindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureTriggerEventReq::clear_layerindex() {
  layerindex_ = 0u;
  clear_has_layerindex();
}
inline ::google::protobuf::uint32 TAdventureTriggerEventReq::layerindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTriggerEventReq.LayerIndex)
  return layerindex_;
}
inline void TAdventureTriggerEventReq::set_layerindex(::google::protobuf::uint32 value) {
  set_has_layerindex();
  layerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTriggerEventReq.LayerIndex)
}

// optional int32 X = 3;
inline bool TAdventureTriggerEventReq::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureTriggerEventReq::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureTriggerEventReq::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureTriggerEventReq::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 TAdventureTriggerEventReq::x() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTriggerEventReq.X)
  return x_;
}
inline void TAdventureTriggerEventReq::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTriggerEventReq.X)
}

// optional int32 Y = 4;
inline bool TAdventureTriggerEventReq::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureTriggerEventReq::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureTriggerEventReq::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureTriggerEventReq::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 TAdventureTriggerEventReq::y() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTriggerEventReq.Y)
  return y_;
}
inline void TAdventureTriggerEventReq::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTriggerEventReq.Y)
}

// optional uint32 EventId = 5;
inline bool TAdventureTriggerEventReq::has_eventid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAdventureTriggerEventReq::set_has_eventid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAdventureTriggerEventReq::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAdventureTriggerEventReq::clear_eventid() {
  eventid_ = 0u;
  clear_has_eventid();
}
inline ::google::protobuf::uint32 TAdventureTriggerEventReq::eventid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTriggerEventReq.EventId)
  return eventid_;
}
inline void TAdventureTriggerEventReq::set_eventid(::google::protobuf::uint32 value) {
  set_has_eventid();
  eventid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTriggerEventReq.EventId)
}

// optional uint32 Hid = 6;
inline bool TAdventureTriggerEventReq::has_hid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TAdventureTriggerEventReq::set_has_hid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TAdventureTriggerEventReq::clear_has_hid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TAdventureTriggerEventReq::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TAdventureTriggerEventReq::hid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTriggerEventReq.Hid)
  return hid_;
}
inline void TAdventureTriggerEventReq::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTriggerEventReq.Hid)
}

// optional uint32 ChoseIndex = 7;
inline bool TAdventureTriggerEventReq::has_choseindex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TAdventureTriggerEventReq::set_has_choseindex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TAdventureTriggerEventReq::clear_has_choseindex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TAdventureTriggerEventReq::clear_choseindex() {
  choseindex_ = 0u;
  clear_has_choseindex();
}
inline ::google::protobuf::uint32 TAdventureTriggerEventReq::choseindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTriggerEventReq.ChoseIndex)
  return choseindex_;
}
inline void TAdventureTriggerEventReq::set_choseindex(::google::protobuf::uint32 value) {
  set_has_choseindex();
  choseindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTriggerEventReq.ChoseIndex)
}

// optional int32 GimmickIndex = 8;
inline bool TAdventureTriggerEventReq::has_gimmickindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TAdventureTriggerEventReq::set_has_gimmickindex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TAdventureTriggerEventReq::clear_has_gimmickindex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TAdventureTriggerEventReq::clear_gimmickindex() {
  gimmickindex_ = 0;
  clear_has_gimmickindex();
}
inline ::google::protobuf::int32 TAdventureTriggerEventReq::gimmickindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTriggerEventReq.GimmickIndex)
  return gimmickindex_;
}
inline void TAdventureTriggerEventReq::set_gimmickindex(::google::protobuf::int32 value) {
  set_has_gimmickindex();
  gimmickindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTriggerEventReq.GimmickIndex)
}

// optional uint32 StateValue = 9;
inline bool TAdventureTriggerEventReq::has_statevalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TAdventureTriggerEventReq::set_has_statevalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TAdventureTriggerEventReq::clear_has_statevalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TAdventureTriggerEventReq::clear_statevalue() {
  statevalue_ = 0u;
  clear_has_statevalue();
}
inline ::google::protobuf::uint32 TAdventureTriggerEventReq::statevalue() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTriggerEventReq.StateValue)
  return statevalue_;
}
inline void TAdventureTriggerEventReq::set_statevalue(::google::protobuf::uint32 value) {
  set_has_statevalue();
  statevalue_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTriggerEventReq.StateValue)
}

// repeated .pb.TSimpleItem ItemArr = 10;
inline int TAdventureTriggerEventReq::itemarr_size() const {
  return itemarr_.size();
}
inline void TAdventureTriggerEventReq::clear_itemarr() {
  itemarr_.Clear();
}
inline const ::pb::TSimpleItem& TAdventureTriggerEventReq::itemarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTriggerEventReq.ItemArr)
  return itemarr_.Get(index);
}
inline ::pb::TSimpleItem* TAdventureTriggerEventReq::mutable_itemarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTriggerEventReq.ItemArr)
  return itemarr_.Mutable(index);
}
inline ::pb::TSimpleItem* TAdventureTriggerEventReq::add_itemarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureTriggerEventReq.ItemArr)
  return itemarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TAdventureTriggerEventReq::itemarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTriggerEventReq.ItemArr)
  return itemarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TAdventureTriggerEventReq::mutable_itemarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTriggerEventReq.ItemArr)
  return &itemarr_;
}

// -------------------------------------------------------------------

// TAdventureTriggerEventRsp

// optional .pb.EEventStatus EventStatus = 1;
inline bool TAdventureTriggerEventRsp::has_eventstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTriggerEventRsp::set_has_eventstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTriggerEventRsp::clear_has_eventstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTriggerEventRsp::clear_eventstatus() {
  eventstatus_ = 0;
  clear_has_eventstatus();
}
inline ::pb::EEventStatus TAdventureTriggerEventRsp::eventstatus() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTriggerEventRsp.EventStatus)
  return static_cast< ::pb::EEventStatus >(eventstatus_);
}
inline void TAdventureTriggerEventRsp::set_eventstatus(::pb::EEventStatus value) {
  assert(::pb::EEventStatus_IsValid(value));
  set_has_eventstatus();
  eventstatus_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTriggerEventRsp.EventStatus)
}

// repeated .pb.TCommonReward RewardArray = 2;
inline int TAdventureTriggerEventRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TAdventureTriggerEventRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TAdventureTriggerEventRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTriggerEventRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TAdventureTriggerEventRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTriggerEventRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TAdventureTriggerEventRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TAdventureTriggerEventRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TAdventureTriggerEventRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTriggerEventRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TAdventureTriggerEventRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTriggerEventRsp.RewardArray)
  return &rewardarray_;
}

// optional .pb.TAdventureEventRet EventRet = 3;
inline bool TAdventureTriggerEventRsp::has_eventret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureTriggerEventRsp::set_has_eventret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureTriggerEventRsp::clear_has_eventret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureTriggerEventRsp::clear_eventret() {
  if (eventret_ != NULL) eventret_->::pb::TAdventureEventRet::Clear();
  clear_has_eventret();
}
inline const ::pb::TAdventureEventRet& TAdventureTriggerEventRsp::eventret() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTriggerEventRsp.EventRet)
  return eventret_ != NULL ? *eventret_ : *default_instance_->eventret_;
}
inline ::pb::TAdventureEventRet* TAdventureTriggerEventRsp::mutable_eventret() {
  set_has_eventret();
  if (eventret_ == NULL) eventret_ = new ::pb::TAdventureEventRet;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTriggerEventRsp.EventRet)
  return eventret_;
}
inline ::pb::TAdventureEventRet* TAdventureTriggerEventRsp::release_eventret() {
  clear_has_eventret();
  ::pb::TAdventureEventRet* temp = eventret_;
  eventret_ = NULL;
  return temp;
}
inline void TAdventureTriggerEventRsp::set_allocated_eventret(::pb::TAdventureEventRet* eventret) {
  delete eventret_;
  eventret_ = eventret;
  if (eventret) {
    set_has_eventret();
  } else {
    clear_has_eventret();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureTriggerEventRsp.EventRet)
}

// optional uint32 CurEnergy = 4;
inline bool TAdventureTriggerEventRsp::has_curenergy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureTriggerEventRsp::set_has_curenergy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureTriggerEventRsp::clear_has_curenergy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureTriggerEventRsp::clear_curenergy() {
  curenergy_ = 0u;
  clear_has_curenergy();
}
inline ::google::protobuf::uint32 TAdventureTriggerEventRsp::curenergy() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTriggerEventRsp.CurEnergy)
  return curenergy_;
}
inline void TAdventureTriggerEventRsp::set_curenergy(::google::protobuf::uint32 value) {
  set_has_curenergy();
  curenergy_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTriggerEventRsp.CurEnergy)
}

// optional uint32 StateSucc = 5;
inline bool TAdventureTriggerEventRsp::has_statesucc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAdventureTriggerEventRsp::set_has_statesucc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAdventureTriggerEventRsp::clear_has_statesucc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAdventureTriggerEventRsp::clear_statesucc() {
  statesucc_ = 0u;
  clear_has_statesucc();
}
inline ::google::protobuf::uint32 TAdventureTriggerEventRsp::statesucc() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTriggerEventRsp.StateSucc)
  return statesucc_;
}
inline void TAdventureTriggerEventRsp::set_statesucc(::google::protobuf::uint32 value) {
  set_has_statesucc();
  statesucc_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTriggerEventRsp.StateSucc)
}

// -------------------------------------------------------------------

// TAdventureAnswerReq

// optional uint64 TeamId = 1;
inline bool TAdventureAnswerReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureAnswerReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureAnswerReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureAnswerReq::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TAdventureAnswerReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAnswerReq.TeamId)
  return teamid_;
}
inline void TAdventureAnswerReq::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAnswerReq.TeamId)
}

// optional uint32 LayerIndex = 2;
inline bool TAdventureAnswerReq::has_layerindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureAnswerReq::set_has_layerindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureAnswerReq::clear_has_layerindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureAnswerReq::clear_layerindex() {
  layerindex_ = 0u;
  clear_has_layerindex();
}
inline ::google::protobuf::uint32 TAdventureAnswerReq::layerindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAnswerReq.LayerIndex)
  return layerindex_;
}
inline void TAdventureAnswerReq::set_layerindex(::google::protobuf::uint32 value) {
  set_has_layerindex();
  layerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAnswerReq.LayerIndex)
}

// optional int32 X = 3;
inline bool TAdventureAnswerReq::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureAnswerReq::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureAnswerReq::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureAnswerReq::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 TAdventureAnswerReq::x() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAnswerReq.X)
  return x_;
}
inline void TAdventureAnswerReq::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAnswerReq.X)
}

// optional int32 Y = 4;
inline bool TAdventureAnswerReq::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureAnswerReq::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureAnswerReq::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureAnswerReq::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 TAdventureAnswerReq::y() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAnswerReq.Y)
  return y_;
}
inline void TAdventureAnswerReq::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAnswerReq.Y)
}

// optional uint32 EventId = 5;
inline bool TAdventureAnswerReq::has_eventid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAdventureAnswerReq::set_has_eventid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAdventureAnswerReq::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAdventureAnswerReq::clear_eventid() {
  eventid_ = 0u;
  clear_has_eventid();
}
inline ::google::protobuf::uint32 TAdventureAnswerReq::eventid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAnswerReq.EventId)
  return eventid_;
}
inline void TAdventureAnswerReq::set_eventid(::google::protobuf::uint32 value) {
  set_has_eventid();
  eventid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAnswerReq.EventId)
}

// optional uint32 ChoseIndex = 6;
inline bool TAdventureAnswerReq::has_choseindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TAdventureAnswerReq::set_has_choseindex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TAdventureAnswerReq::clear_has_choseindex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TAdventureAnswerReq::clear_choseindex() {
  choseindex_ = 0u;
  clear_has_choseindex();
}
inline ::google::protobuf::uint32 TAdventureAnswerReq::choseindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAnswerReq.ChoseIndex)
  return choseindex_;
}
inline void TAdventureAnswerReq::set_choseindex(::google::protobuf::uint32 value) {
  set_has_choseindex();
  choseindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAnswerReq.ChoseIndex)
}

// -------------------------------------------------------------------

// TAdventureAnswerEndReq

// optional uint64 TeamId = 1;
inline bool TAdventureAnswerEndReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureAnswerEndReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureAnswerEndReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureAnswerEndReq::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TAdventureAnswerEndReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAnswerEndReq.TeamId)
  return teamid_;
}
inline void TAdventureAnswerEndReq::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAnswerEndReq.TeamId)
}

// optional uint32 LayerIndex = 2;
inline bool TAdventureAnswerEndReq::has_layerindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureAnswerEndReq::set_has_layerindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureAnswerEndReq::clear_has_layerindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureAnswerEndReq::clear_layerindex() {
  layerindex_ = 0u;
  clear_has_layerindex();
}
inline ::google::protobuf::uint32 TAdventureAnswerEndReq::layerindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAnswerEndReq.LayerIndex)
  return layerindex_;
}
inline void TAdventureAnswerEndReq::set_layerindex(::google::protobuf::uint32 value) {
  set_has_layerindex();
  layerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAnswerEndReq.LayerIndex)
}

// optional int32 X = 3;
inline bool TAdventureAnswerEndReq::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureAnswerEndReq::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureAnswerEndReq::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureAnswerEndReq::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 TAdventureAnswerEndReq::x() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAnswerEndReq.X)
  return x_;
}
inline void TAdventureAnswerEndReq::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAnswerEndReq.X)
}

// optional int32 Y = 4;
inline bool TAdventureAnswerEndReq::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureAnswerEndReq::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureAnswerEndReq::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureAnswerEndReq::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 TAdventureAnswerEndReq::y() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAnswerEndReq.Y)
  return y_;
}
inline void TAdventureAnswerEndReq::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAnswerEndReq.Y)
}

// -------------------------------------------------------------------

// TAdventureGetBuffRsp

// repeated .pb.TAdventureBuff BuffArr = 1;
inline int TAdventureGetBuffRsp::buffarr_size() const {
  return buffarr_.size();
}
inline void TAdventureGetBuffRsp::clear_buffarr() {
  buffarr_.Clear();
}
inline const ::pb::TAdventureBuff& TAdventureGetBuffRsp::buffarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetBuffRsp.BuffArr)
  return buffarr_.Get(index);
}
inline ::pb::TAdventureBuff* TAdventureGetBuffRsp::mutable_buffarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureGetBuffRsp.BuffArr)
  return buffarr_.Mutable(index);
}
inline ::pb::TAdventureBuff* TAdventureGetBuffRsp::add_buffarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureGetBuffRsp.BuffArr)
  return buffarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureBuff >&
TAdventureGetBuffRsp::buffarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureGetBuffRsp.BuffArr)
  return buffarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureBuff >*
TAdventureGetBuffRsp::mutable_buffarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureGetBuffRsp.BuffArr)
  return &buffarr_;
}

// -------------------------------------------------------------------

// TAdventureReportBattleReq

// optional bytes BattleResult = 1;
inline bool TAdventureReportBattleReq::has_battleresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureReportBattleReq::set_has_battleresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureReportBattleReq::clear_has_battleresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureReportBattleReq::clear_battleresult() {
  if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_->clear();
  }
  clear_has_battleresult();
}
inline const ::std::string& TAdventureReportBattleReq::battleresult() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureReportBattleReq.BattleResult)
  return *battleresult_;
}
inline void TAdventureReportBattleReq::set_battleresult(const ::std::string& value) {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  battleresult_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TAdventureReportBattleReq.BattleResult)
}
inline void TAdventureReportBattleReq::set_battleresult(const char* value) {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  battleresult_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TAdventureReportBattleReq.BattleResult)
}
inline void TAdventureReportBattleReq::set_battleresult(const void* value, size_t size) {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  battleresult_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TAdventureReportBattleReq.BattleResult)
}
inline ::std::string* TAdventureReportBattleReq::mutable_battleresult() {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TAdventureReportBattleReq.BattleResult)
  return battleresult_;
}
inline ::std::string* TAdventureReportBattleReq::release_battleresult() {
  clear_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleresult_;
    battleresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TAdventureReportBattleReq::set_allocated_battleresult(::std::string* battleresult) {
  if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresult_;
  }
  if (battleresult) {
    set_has_battleresult();
    battleresult_ = battleresult;
  } else {
    clear_has_battleresult();
    battleresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureReportBattleReq.BattleResult)
}

// optional uint32 LayerIndex = 2;
inline bool TAdventureReportBattleReq::has_layerindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureReportBattleReq::set_has_layerindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureReportBattleReq::clear_has_layerindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureReportBattleReq::clear_layerindex() {
  layerindex_ = 0u;
  clear_has_layerindex();
}
inline ::google::protobuf::uint32 TAdventureReportBattleReq::layerindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureReportBattleReq.LayerIndex)
  return layerindex_;
}
inline void TAdventureReportBattleReq::set_layerindex(::google::protobuf::uint32 value) {
  set_has_layerindex();
  layerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureReportBattleReq.LayerIndex)
}

// optional int32 PosX = 3;
inline bool TAdventureReportBattleReq::has_posx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureReportBattleReq::set_has_posx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureReportBattleReq::clear_has_posx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureReportBattleReq::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 TAdventureReportBattleReq::posx() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureReportBattleReq.PosX)
  return posx_;
}
inline void TAdventureReportBattleReq::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureReportBattleReq.PosX)
}

// optional int32 PosY = 4;
inline bool TAdventureReportBattleReq::has_posy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureReportBattleReq::set_has_posy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureReportBattleReq::clear_has_posy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureReportBattleReq::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 TAdventureReportBattleReq::posy() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureReportBattleReq.PosY)
  return posy_;
}
inline void TAdventureReportBattleReq::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureReportBattleReq.PosY)
}

// -------------------------------------------------------------------

// TAdventureReportBattleRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TAdventureReportBattleRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TAdventureReportBattleRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TAdventureReportBattleRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureReportBattleRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TAdventureReportBattleRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureReportBattleRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TAdventureReportBattleRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TAdventureReportBattleRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TAdventureReportBattleRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureReportBattleRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TAdventureReportBattleRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureReportBattleRsp.RewardArray)
  return &rewardarray_;
}

// optional uint32 CurEnergy = 2;
inline bool TAdventureReportBattleRsp::has_curenergy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureReportBattleRsp::set_has_curenergy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureReportBattleRsp::clear_has_curenergy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureReportBattleRsp::clear_curenergy() {
  curenergy_ = 0u;
  clear_has_curenergy();
}
inline ::google::protobuf::uint32 TAdventureReportBattleRsp::curenergy() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureReportBattleRsp.CurEnergy)
  return curenergy_;
}
inline void TAdventureReportBattleRsp::set_curenergy(::google::protobuf::uint32 value) {
  set_has_curenergy();
  curenergy_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureReportBattleRsp.CurEnergy)
}

// optional string ModelName = 3;
inline bool TAdventureReportBattleRsp::has_modelname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureReportBattleRsp::set_has_modelname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureReportBattleRsp::clear_has_modelname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureReportBattleRsp::clear_modelname() {
  if (modelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    modelname_->clear();
  }
  clear_has_modelname();
}
inline const ::std::string& TAdventureReportBattleRsp::modelname() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureReportBattleRsp.ModelName)
  return *modelname_;
}
inline void TAdventureReportBattleRsp::set_modelname(const ::std::string& value) {
  set_has_modelname();
  if (modelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    modelname_ = new ::std::string;
  }
  modelname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TAdventureReportBattleRsp.ModelName)
}
inline void TAdventureReportBattleRsp::set_modelname(const char* value) {
  set_has_modelname();
  if (modelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    modelname_ = new ::std::string;
  }
  modelname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TAdventureReportBattleRsp.ModelName)
}
inline void TAdventureReportBattleRsp::set_modelname(const char* value, size_t size) {
  set_has_modelname();
  if (modelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    modelname_ = new ::std::string;
  }
  modelname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TAdventureReportBattleRsp.ModelName)
}
inline ::std::string* TAdventureReportBattleRsp::mutable_modelname() {
  set_has_modelname();
  if (modelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    modelname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TAdventureReportBattleRsp.ModelName)
  return modelname_;
}
inline ::std::string* TAdventureReportBattleRsp::release_modelname() {
  clear_has_modelname();
  if (modelname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = modelname_;
    modelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TAdventureReportBattleRsp::set_allocated_modelname(::std::string* modelname) {
  if (modelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete modelname_;
  }
  if (modelname) {
    set_has_modelname();
    modelname_ = modelname;
  } else {
    clear_has_modelname();
    modelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureReportBattleRsp.ModelName)
}

// -------------------------------------------------------------------

// TAdventureStartBattleReq

// optional int32 X = 1;
inline bool TAdventureStartBattleReq::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureStartBattleReq::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureStartBattleReq::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureStartBattleReq::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 TAdventureStartBattleReq::x() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureStartBattleReq.X)
  return x_;
}
inline void TAdventureStartBattleReq::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureStartBattleReq.X)
}

// optional int32 Y = 2;
inline bool TAdventureStartBattleReq::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureStartBattleReq::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureStartBattleReq::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureStartBattleReq::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 TAdventureStartBattleReq::y() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureStartBattleReq.Y)
  return y_;
}
inline void TAdventureStartBattleReq::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureStartBattleReq.Y)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 3;
inline bool TAdventureStartBattleReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureStartBattleReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureStartBattleReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureStartBattleReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TAdventureStartBattleReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureStartBattleReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TAdventureStartBattleReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureStartBattleReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TAdventureStartBattleReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TAdventureStartBattleReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureStartBattleReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TAdventureStartBattleRsp

// optional .pb.EAdventureStartBattleRetCode RetCode = 1;
inline bool TAdventureStartBattleRsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureStartBattleRsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureStartBattleRsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureStartBattleRsp::clear_retcode() {
  retcode_ = 1;
  clear_has_retcode();
}
inline ::pb::EAdventureStartBattleRetCode TAdventureStartBattleRsp::retcode() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureStartBattleRsp.RetCode)
  return static_cast< ::pb::EAdventureStartBattleRetCode >(retcode_);
}
inline void TAdventureStartBattleRsp::set_retcode(::pb::EAdventureStartBattleRetCode value) {
  assert(::pb::EAdventureStartBattleRetCode_IsValid(value));
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureStartBattleRsp.RetCode)
}

// optional uint32 BattleinfoId = 2;
inline bool TAdventureStartBattleRsp::has_battleinfoid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureStartBattleRsp::set_has_battleinfoid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureStartBattleRsp::clear_has_battleinfoid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureStartBattleRsp::clear_battleinfoid() {
  battleinfoid_ = 0u;
  clear_has_battleinfoid();
}
inline ::google::protobuf::uint32 TAdventureStartBattleRsp::battleinfoid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureStartBattleRsp.BattleinfoId)
  return battleinfoid_;
}
inline void TAdventureStartBattleRsp::set_battleinfoid(::google::protobuf::uint32 value) {
  set_has_battleinfoid();
  battleinfoid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureStartBattleRsp.BattleinfoId)
}

// optional uint32 BossLevel = 3;
inline bool TAdventureStartBattleRsp::has_bosslevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureStartBattleRsp::set_has_bosslevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureStartBattleRsp::clear_has_bosslevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureStartBattleRsp::clear_bosslevel() {
  bosslevel_ = 0u;
  clear_has_bosslevel();
}
inline ::google::protobuf::uint32 TAdventureStartBattleRsp::bosslevel() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureStartBattleRsp.BossLevel)
  return bosslevel_;
}
inline void TAdventureStartBattleRsp::set_bosslevel(::google::protobuf::uint32 value) {
  set_has_bosslevel();
  bosslevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureStartBattleRsp.BossLevel)
}

// optional .pb.TAdventureBattleMonsterInfo MonsterInfo = 4;
inline bool TAdventureStartBattleRsp::has_monsterinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureStartBattleRsp::set_has_monsterinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureStartBattleRsp::clear_has_monsterinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureStartBattleRsp::clear_monsterinfo() {
  if (monsterinfo_ != NULL) monsterinfo_->::pb::TAdventureBattleMonsterInfo::Clear();
  clear_has_monsterinfo();
}
inline const ::pb::TAdventureBattleMonsterInfo& TAdventureStartBattleRsp::monsterinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureStartBattleRsp.MonsterInfo)
  return monsterinfo_ != NULL ? *monsterinfo_ : *default_instance_->monsterinfo_;
}
inline ::pb::TAdventureBattleMonsterInfo* TAdventureStartBattleRsp::mutable_monsterinfo() {
  set_has_monsterinfo();
  if (monsterinfo_ == NULL) monsterinfo_ = new ::pb::TAdventureBattleMonsterInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureStartBattleRsp.MonsterInfo)
  return monsterinfo_;
}
inline ::pb::TAdventureBattleMonsterInfo* TAdventureStartBattleRsp::release_monsterinfo() {
  clear_has_monsterinfo();
  ::pb::TAdventureBattleMonsterInfo* temp = monsterinfo_;
  monsterinfo_ = NULL;
  return temp;
}
inline void TAdventureStartBattleRsp::set_allocated_monsterinfo(::pb::TAdventureBattleMonsterInfo* monsterinfo) {
  delete monsterinfo_;
  monsterinfo_ = monsterinfo;
  if (monsterinfo) {
    set_has_monsterinfo();
  } else {
    clear_has_monsterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureStartBattleRsp.MonsterInfo)
}

// optional .pb.TBattleArgs BattleArgs = 5;
inline bool TAdventureStartBattleRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAdventureStartBattleRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAdventureStartBattleRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAdventureStartBattleRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TAdventureStartBattleRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureStartBattleRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TAdventureStartBattleRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureStartBattleRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TAdventureStartBattleRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TAdventureStartBattleRsp::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureStartBattleRsp.BattleArgs)
}

// -------------------------------------------------------------------

// TAdventureBuyNumReq

// optional uint32 BuyNum = 1;
inline bool TAdventureBuyNumReq::has_buynum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureBuyNumReq::set_has_buynum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureBuyNumReq::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureBuyNumReq::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TAdventureBuyNumReq::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureBuyNumReq.BuyNum)
  return buynum_;
}
inline void TAdventureBuyNumReq::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureBuyNumReq.BuyNum)
}

// -------------------------------------------------------------------

// TAdventurePassBlocksReq

// repeated .pb.TAdventurePassBlock BlockArr = 1;
inline int TAdventurePassBlocksReq::blockarr_size() const {
  return blockarr_.size();
}
inline void TAdventurePassBlocksReq::clear_blockarr() {
  blockarr_.Clear();
}
inline const ::pb::TAdventurePassBlock& TAdventurePassBlocksReq::blockarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventurePassBlocksReq.BlockArr)
  return blockarr_.Get(index);
}
inline ::pb::TAdventurePassBlock* TAdventurePassBlocksReq::mutable_blockarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventurePassBlocksReq.BlockArr)
  return blockarr_.Mutable(index);
}
inline ::pb::TAdventurePassBlock* TAdventurePassBlocksReq::add_blockarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventurePassBlocksReq.BlockArr)
  return blockarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventurePassBlock >&
TAdventurePassBlocksReq::blockarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventurePassBlocksReq.BlockArr)
  return blockarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventurePassBlock >*
TAdventurePassBlocksReq::mutable_blockarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventurePassBlocksReq.BlockArr)
  return &blockarr_;
}

// -------------------------------------------------------------------

// TAdventureReportTalkReq

// optional uint32 TalkId = 1;
inline bool TAdventureReportTalkReq::has_talkid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureReportTalkReq::set_has_talkid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureReportTalkReq::clear_has_talkid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureReportTalkReq::clear_talkid() {
  talkid_ = 0u;
  clear_has_talkid();
}
inline ::google::protobuf::uint32 TAdventureReportTalkReq::talkid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureReportTalkReq.TalkId)
  return talkid_;
}
inline void TAdventureReportTalkReq::set_talkid(::google::protobuf::uint32 value) {
  set_has_talkid();
  talkid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureReportTalkReq.TalkId)
}

// optional uint32 ChooseIdx = 2;
inline bool TAdventureReportTalkReq::has_chooseidx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureReportTalkReq::set_has_chooseidx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureReportTalkReq::clear_has_chooseidx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureReportTalkReq::clear_chooseidx() {
  chooseidx_ = 0u;
  clear_has_chooseidx();
}
inline ::google::protobuf::uint32 TAdventureReportTalkReq::chooseidx() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureReportTalkReq.ChooseIdx)
  return chooseidx_;
}
inline void TAdventureReportTalkReq::set_chooseidx(::google::protobuf::uint32 value) {
  set_has_chooseidx();
  chooseidx_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureReportTalkReq.ChooseIdx)
}

// -------------------------------------------------------------------

// TAdventureReportTalkRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TAdventureReportTalkRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TAdventureReportTalkRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TAdventureReportTalkRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureReportTalkRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TAdventureReportTalkRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureReportTalkRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TAdventureReportTalkRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TAdventureReportTalkRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TAdventureReportTalkRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureReportTalkRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TAdventureReportTalkRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureReportTalkRsp.RewardArray)
  return &rewardarray_;
}

// -------------------------------------------------------------------

// TAdventureBuyGoodsReq

// optional uint32 LayerIndex = 1;
inline bool TAdventureBuyGoodsReq::has_layerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureBuyGoodsReq::set_has_layerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureBuyGoodsReq::clear_has_layerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureBuyGoodsReq::clear_layerindex() {
  layerindex_ = 0u;
  clear_has_layerindex();
}
inline ::google::protobuf::uint32 TAdventureBuyGoodsReq::layerindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureBuyGoodsReq.LayerIndex)
  return layerindex_;
}
inline void TAdventureBuyGoodsReq::set_layerindex(::google::protobuf::uint32 value) {
  set_has_layerindex();
  layerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureBuyGoodsReq.LayerIndex)
}

// optional int32 PosX = 2;
inline bool TAdventureBuyGoodsReq::has_posx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureBuyGoodsReq::set_has_posx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureBuyGoodsReq::clear_has_posx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureBuyGoodsReq::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 TAdventureBuyGoodsReq::posx() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureBuyGoodsReq.PosX)
  return posx_;
}
inline void TAdventureBuyGoodsReq::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureBuyGoodsReq.PosX)
}

// optional int32 PosY = 3;
inline bool TAdventureBuyGoodsReq::has_posy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureBuyGoodsReq::set_has_posy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureBuyGoodsReq::clear_has_posy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureBuyGoodsReq::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 TAdventureBuyGoodsReq::posy() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureBuyGoodsReq.PosY)
  return posy_;
}
inline void TAdventureBuyGoodsReq::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureBuyGoodsReq.PosY)
}

// optional uint32 GoodsId = 4;
inline bool TAdventureBuyGoodsReq::has_goodsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureBuyGoodsReq::set_has_goodsid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureBuyGoodsReq::clear_has_goodsid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureBuyGoodsReq::clear_goodsid() {
  goodsid_ = 0u;
  clear_has_goodsid();
}
inline ::google::protobuf::uint32 TAdventureBuyGoodsReq::goodsid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureBuyGoodsReq.GoodsId)
  return goodsid_;
}
inline void TAdventureBuyGoodsReq::set_goodsid(::google::protobuf::uint32 value) {
  set_has_goodsid();
  goodsid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureBuyGoodsReq.GoodsId)
}

// optional uint32 BuyNum = 5;
inline bool TAdventureBuyGoodsReq::has_buynum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAdventureBuyGoodsReq::set_has_buynum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAdventureBuyGoodsReq::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAdventureBuyGoodsReq::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TAdventureBuyGoodsReq::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureBuyGoodsReq.BuyNum)
  return buynum_;
}
inline void TAdventureBuyGoodsReq::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureBuyGoodsReq.BuyNum)
}

// -------------------------------------------------------------------

// TAdventureReceiveCompleteRewardRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TAdventureReceiveCompleteRewardRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TAdventureReceiveCompleteRewardRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TAdventureReceiveCompleteRewardRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureReceiveCompleteRewardRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TAdventureReceiveCompleteRewardRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureReceiveCompleteRewardRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TAdventureReceiveCompleteRewardRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TAdventureReceiveCompleteRewardRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TAdventureReceiveCompleteRewardRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureReceiveCompleteRewardRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TAdventureReceiveCompleteRewardRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureReceiveCompleteRewardRsp.RewardArray)
  return &rewardarray_;
}

// -------------------------------------------------------------------

// TAdventureSendToTeamMateReq

// optional uint64 TeamId = 1;
inline bool TAdventureSendToTeamMateReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureSendToTeamMateReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureSendToTeamMateReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureSendToTeamMateReq::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TAdventureSendToTeamMateReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureSendToTeamMateReq.TeamId)
  return teamid_;
}
inline void TAdventureSendToTeamMateReq::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureSendToTeamMateReq.TeamId)
}

// optional uint64 MateUid = 2;
inline bool TAdventureSendToTeamMateReq::has_mateuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureSendToTeamMateReq::set_has_mateuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureSendToTeamMateReq::clear_has_mateuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureSendToTeamMateReq::clear_mateuid() {
  mateuid_ = GOOGLE_ULONGLONG(0);
  clear_has_mateuid();
}
inline ::google::protobuf::uint64 TAdventureSendToTeamMateReq::mateuid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureSendToTeamMateReq.MateUid)
  return mateuid_;
}
inline void TAdventureSendToTeamMateReq::set_mateuid(::google::protobuf::uint64 value) {
  set_has_mateuid();
  mateuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureSendToTeamMateReq.MateUid)
}

// -------------------------------------------------------------------

// TAdventureCallTeamMateReq

// optional uint64 TeamId = 1;
inline bool TAdventureCallTeamMateReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureCallTeamMateReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureCallTeamMateReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureCallTeamMateReq::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TAdventureCallTeamMateReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCallTeamMateReq.TeamId)
  return teamid_;
}
inline void TAdventureCallTeamMateReq::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureCallTeamMateReq.TeamId)
}

// optional uint64 MateUid = 2;
inline bool TAdventureCallTeamMateReq::has_mateuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureCallTeamMateReq::set_has_mateuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureCallTeamMateReq::clear_has_mateuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureCallTeamMateReq::clear_mateuid() {
  mateuid_ = GOOGLE_ULONGLONG(0);
  clear_has_mateuid();
}
inline ::google::protobuf::uint64 TAdventureCallTeamMateReq::mateuid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCallTeamMateReq.MateUid)
  return mateuid_;
}
inline void TAdventureCallTeamMateReq::set_mateuid(::google::protobuf::uint64 value) {
  set_has_mateuid();
  mateuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureCallTeamMateReq.MateUid)
}

// -------------------------------------------------------------------

// TAdventureCallOrSendRsp

// optional .pb.EAdventureSendToMateRetCode RetCode = 1;
inline bool TAdventureCallOrSendRsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureCallOrSendRsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureCallOrSendRsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureCallOrSendRsp::clear_retcode() {
  retcode_ = 1;
  clear_has_retcode();
}
inline ::pb::EAdventureSendToMateRetCode TAdventureCallOrSendRsp::retcode() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCallOrSendRsp.RetCode)
  return static_cast< ::pb::EAdventureSendToMateRetCode >(retcode_);
}
inline void TAdventureCallOrSendRsp::set_retcode(::pb::EAdventureSendToMateRetCode value) {
  assert(::pb::EAdventureSendToMateRetCode_IsValid(value));
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureCallOrSendRsp.RetCode)
}

// -------------------------------------------------------------------

// TAdventureAcceptCallReq

// optional uint64 TeamId = 1;
inline bool TAdventureAcceptCallReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureAcceptCallReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureAcceptCallReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureAcceptCallReq::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TAdventureAcceptCallReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAcceptCallReq.TeamId)
  return teamid_;
}
inline void TAdventureAcceptCallReq::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAcceptCallReq.TeamId)
}

// optional uint64 MateUid = 2;
inline bool TAdventureAcceptCallReq::has_mateuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureAcceptCallReq::set_has_mateuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureAcceptCallReq::clear_has_mateuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureAcceptCallReq::clear_mateuid() {
  mateuid_ = GOOGLE_ULONGLONG(0);
  clear_has_mateuid();
}
inline ::google::protobuf::uint64 TAdventureAcceptCallReq::mateuid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAcceptCallReq.MateUid)
  return mateuid_;
}
inline void TAdventureAcceptCallReq::set_mateuid(::google::protobuf::uint64 value) {
  set_has_mateuid();
  mateuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAcceptCallReq.MateUid)
}

// -------------------------------------------------------------------

// TAdventureGetTeamRankReq

// optional uint64 TeamId = 1;
inline bool TAdventureGetTeamRankReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureGetTeamRankReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureGetTeamRankReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureGetTeamRankReq::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TAdventureGetTeamRankReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetTeamRankReq.TeamId)
  return teamid_;
}
inline void TAdventureGetTeamRankReq::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetTeamRankReq.TeamId)
}

// -------------------------------------------------------------------

// TAdventureGetTeamRankRsp

// repeated .pb.TAdventureGetTeamRankUserInfo RankUserInfo = 1;
inline int TAdventureGetTeamRankRsp::rankuserinfo_size() const {
  return rankuserinfo_.size();
}
inline void TAdventureGetTeamRankRsp::clear_rankuserinfo() {
  rankuserinfo_.Clear();
}
inline const ::pb::TAdventureGetTeamRankUserInfo& TAdventureGetTeamRankRsp::rankuserinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetTeamRankRsp.RankUserInfo)
  return rankuserinfo_.Get(index);
}
inline ::pb::TAdventureGetTeamRankUserInfo* TAdventureGetTeamRankRsp::mutable_rankuserinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureGetTeamRankRsp.RankUserInfo)
  return rankuserinfo_.Mutable(index);
}
inline ::pb::TAdventureGetTeamRankUserInfo* TAdventureGetTeamRankRsp::add_rankuserinfo() {
  // @@protoc_insertion_point(field_add:pb.TAdventureGetTeamRankRsp.RankUserInfo)
  return rankuserinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureGetTeamRankUserInfo >&
TAdventureGetTeamRankRsp::rankuserinfo() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureGetTeamRankRsp.RankUserInfo)
  return rankuserinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureGetTeamRankUserInfo >*
TAdventureGetTeamRankRsp::mutable_rankuserinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureGetTeamRankRsp.RankUserInfo)
  return &rankuserinfo_;
}

// -------------------------------------------------------------------

// TAdventureGetCurMapRewardRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TAdventureGetCurMapRewardRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TAdventureGetCurMapRewardRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TAdventureGetCurMapRewardRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetCurMapRewardRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TAdventureGetCurMapRewardRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureGetCurMapRewardRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TAdventureGetCurMapRewardRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TAdventureGetCurMapRewardRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TAdventureGetCurMapRewardRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureGetCurMapRewardRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TAdventureGetCurMapRewardRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureGetCurMapRewardRsp.RewardArray)
  return &rewardarray_;
}

// -------------------------------------------------------------------

// TAdventureTeamExchangeRpcReq

// optional uint64 Uid = 1;
inline bool TAdventureTeamExchangeRpcReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTeamExchangeRpcReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTeamExchangeRpcReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTeamExchangeRpcReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TAdventureTeamExchangeRpcReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTeamExchangeRpcReq.Uid)
  return uid_;
}
inline void TAdventureTeamExchangeRpcReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTeamExchangeRpcReq.Uid)
}

// optional uint64 TeamId = 2;
inline bool TAdventureTeamExchangeRpcReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureTeamExchangeRpcReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureTeamExchangeRpcReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureTeamExchangeRpcReq::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TAdventureTeamExchangeRpcReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTeamExchangeRpcReq.TeamId)
  return teamid_;
}
inline void TAdventureTeamExchangeRpcReq::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTeamExchangeRpcReq.TeamId)
}

// optional .pb.ETeamMode TeamMode = 3;
inline bool TAdventureTeamExchangeRpcReq::has_teammode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureTeamExchangeRpcReq::set_has_teammode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureTeamExchangeRpcReq::clear_has_teammode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureTeamExchangeRpcReq::clear_teammode() {
  teammode_ = 0;
  clear_has_teammode();
}
inline ::pb::ETeamMode TAdventureTeamExchangeRpcReq::teammode() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTeamExchangeRpcReq.TeamMode)
  return static_cast< ::pb::ETeamMode >(teammode_);
}
inline void TAdventureTeamExchangeRpcReq::set_teammode(::pb::ETeamMode value) {
  assert(::pb::ETeamMode_IsValid(value));
  set_has_teammode();
  teammode_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTeamExchangeRpcReq.TeamMode)
}

// repeated .pb.TCommonReward CostArr = 4;
inline int TAdventureTeamExchangeRpcReq::costarr_size() const {
  return costarr_.size();
}
inline void TAdventureTeamExchangeRpcReq::clear_costarr() {
  costarr_.Clear();
}
inline const ::pb::TCommonReward& TAdventureTeamExchangeRpcReq::costarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTeamExchangeRpcReq.CostArr)
  return costarr_.Get(index);
}
inline ::pb::TCommonReward* TAdventureTeamExchangeRpcReq::mutable_costarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTeamExchangeRpcReq.CostArr)
  return costarr_.Mutable(index);
}
inline ::pb::TCommonReward* TAdventureTeamExchangeRpcReq::add_costarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureTeamExchangeRpcReq.CostArr)
  return costarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TAdventureTeamExchangeRpcReq::costarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTeamExchangeRpcReq.CostArr)
  return costarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TAdventureTeamExchangeRpcReq::mutable_costarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTeamExchangeRpcReq.CostArr)
  return &costarr_;
}

// repeated .pb.TCommonReward RewardArr = 5;
inline int TAdventureTeamExchangeRpcReq::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TAdventureTeamExchangeRpcReq::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TAdventureTeamExchangeRpcReq::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTeamExchangeRpcReq.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TAdventureTeamExchangeRpcReq::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTeamExchangeRpcReq.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TAdventureTeamExchangeRpcReq::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureTeamExchangeRpcReq.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TAdventureTeamExchangeRpcReq::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTeamExchangeRpcReq.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TAdventureTeamExchangeRpcReq::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTeamExchangeRpcReq.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TAdventureTeamExchangeRpcRsp

// optional bool IsSuccess = 1;
inline bool TAdventureTeamExchangeRpcRsp::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTeamExchangeRpcRsp::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTeamExchangeRpcRsp::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTeamExchangeRpcRsp::clear_issuccess() {
  issuccess_ = false;
  clear_has_issuccess();
}
inline bool TAdventureTeamExchangeRpcRsp::issuccess() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTeamExchangeRpcRsp.IsSuccess)
  return issuccess_;
}
inline void TAdventureTeamExchangeRpcRsp::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTeamExchangeRpcRsp.IsSuccess)
}

// -------------------------------------------------------------------

// TAdventureQualityPassInfo

// optional uint32 MapLevel = 1;
inline bool TAdventureQualityPassInfo::has_maplevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureQualityPassInfo::set_has_maplevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureQualityPassInfo::clear_has_maplevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureQualityPassInfo::clear_maplevel() {
  maplevel_ = 0u;
  clear_has_maplevel();
}
inline ::google::protobuf::uint32 TAdventureQualityPassInfo::maplevel() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureQualityPassInfo.MapLevel)
  return maplevel_;
}
inline void TAdventureQualityPassInfo::set_maplevel(::google::protobuf::uint32 value) {
  set_has_maplevel();
  maplevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureQualityPassInfo.MapLevel)
}

// optional uint32 MapQuality = 2;
inline bool TAdventureQualityPassInfo::has_mapquality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureQualityPassInfo::set_has_mapquality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureQualityPassInfo::clear_has_mapquality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureQualityPassInfo::clear_mapquality() {
  mapquality_ = 0u;
  clear_has_mapquality();
}
inline ::google::protobuf::uint32 TAdventureQualityPassInfo::mapquality() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureQualityPassInfo.MapQuality)
  return mapquality_;
}
inline void TAdventureQualityPassInfo::set_mapquality(::google::protobuf::uint32 value) {
  set_has_mapquality();
  mapquality_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureQualityPassInfo.MapQuality)
}

// optional uint32 PassNum = 3;
inline bool TAdventureQualityPassInfo::has_passnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureQualityPassInfo::set_has_passnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureQualityPassInfo::clear_has_passnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureQualityPassInfo::clear_passnum() {
  passnum_ = 0u;
  clear_has_passnum();
}
inline ::google::protobuf::uint32 TAdventureQualityPassInfo::passnum() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureQualityPassInfo.PassNum)
  return passnum_;
}
inline void TAdventureQualityPassInfo::set_passnum(::google::protobuf::uint32 value) {
  set_has_passnum();
  passnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureQualityPassInfo.PassNum)
}

// -------------------------------------------------------------------

// TAdventureGetPassInfoRsp

// repeated .pb.TAdventureQualityPassInfo PassInfoArr = 1;
inline int TAdventureGetPassInfoRsp::passinfoarr_size() const {
  return passinfoarr_.size();
}
inline void TAdventureGetPassInfoRsp::clear_passinfoarr() {
  passinfoarr_.Clear();
}
inline const ::pb::TAdventureQualityPassInfo& TAdventureGetPassInfoRsp::passinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetPassInfoRsp.PassInfoArr)
  return passinfoarr_.Get(index);
}
inline ::pb::TAdventureQualityPassInfo* TAdventureGetPassInfoRsp::mutable_passinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureGetPassInfoRsp.PassInfoArr)
  return passinfoarr_.Mutable(index);
}
inline ::pb::TAdventureQualityPassInfo* TAdventureGetPassInfoRsp::add_passinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureGetPassInfoRsp.PassInfoArr)
  return passinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureQualityPassInfo >&
TAdventureGetPassInfoRsp::passinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureGetPassInfoRsp.PassInfoArr)
  return passinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureQualityPassInfo >*
TAdventureGetPassInfoRsp::mutable_passinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureGetPassInfoRsp.PassInfoArr)
  return &passinfoarr_;
}

// -------------------------------------------------------------------

// TAdventureRefreshActMapReq

// optional .pb.EAdventureRefreshMapCostType CostType = 1;
inline bool TAdventureRefreshActMapReq::has_costtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureRefreshActMapReq::set_has_costtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureRefreshActMapReq::clear_has_costtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureRefreshActMapReq::clear_costtype() {
  costtype_ = 1;
  clear_has_costtype();
}
inline ::pb::EAdventureRefreshMapCostType TAdventureRefreshActMapReq::costtype() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureRefreshActMapReq.CostType)
  return static_cast< ::pb::EAdventureRefreshMapCostType >(costtype_);
}
inline void TAdventureRefreshActMapReq::set_costtype(::pb::EAdventureRefreshMapCostType value) {
  assert(::pb::EAdventureRefreshMapCostType_IsValid(value));
  set_has_costtype();
  costtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureRefreshActMapReq.CostType)
}

// -------------------------------------------------------------------

// TAdventureRefreshActMapRsp

// optional uint32 ActMapId = 1;
inline bool TAdventureRefreshActMapRsp::has_actmapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureRefreshActMapRsp::set_has_actmapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureRefreshActMapRsp::clear_has_actmapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureRefreshActMapRsp::clear_actmapid() {
  actmapid_ = 0u;
  clear_has_actmapid();
}
inline ::google::protobuf::uint32 TAdventureRefreshActMapRsp::actmapid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureRefreshActMapRsp.ActMapId)
  return actmapid_;
}
inline void TAdventureRefreshActMapRsp::set_actmapid(::google::protobuf::uint32 value) {
  set_has_actmapid();
  actmapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureRefreshActMapRsp.ActMapId)
}

// -------------------------------------------------------------------

// TAdventureBackToStartPosRsp

// optional uint32 StartLayerIndex = 1;
inline bool TAdventureBackToStartPosRsp::has_startlayerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureBackToStartPosRsp::set_has_startlayerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureBackToStartPosRsp::clear_has_startlayerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureBackToStartPosRsp::clear_startlayerindex() {
  startlayerindex_ = 0u;
  clear_has_startlayerindex();
}
inline ::google::protobuf::uint32 TAdventureBackToStartPosRsp::startlayerindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureBackToStartPosRsp.StartLayerIndex)
  return startlayerindex_;
}
inline void TAdventureBackToStartPosRsp::set_startlayerindex(::google::protobuf::uint32 value) {
  set_has_startlayerindex();
  startlayerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureBackToStartPosRsp.StartLayerIndex)
}

// optional int32 StartPosX = 2;
inline bool TAdventureBackToStartPosRsp::has_startposx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureBackToStartPosRsp::set_has_startposx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureBackToStartPosRsp::clear_has_startposx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureBackToStartPosRsp::clear_startposx() {
  startposx_ = 0;
  clear_has_startposx();
}
inline ::google::protobuf::int32 TAdventureBackToStartPosRsp::startposx() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureBackToStartPosRsp.StartPosX)
  return startposx_;
}
inline void TAdventureBackToStartPosRsp::set_startposx(::google::protobuf::int32 value) {
  set_has_startposx();
  startposx_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureBackToStartPosRsp.StartPosX)
}

// optional int32 StartPosY = 3;
inline bool TAdventureBackToStartPosRsp::has_startposy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureBackToStartPosRsp::set_has_startposy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureBackToStartPosRsp::clear_has_startposy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureBackToStartPosRsp::clear_startposy() {
  startposy_ = 0;
  clear_has_startposy();
}
inline ::google::protobuf::int32 TAdventureBackToStartPosRsp::startposy() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureBackToStartPosRsp.StartPosY)
  return startposy_;
}
inline void TAdventureBackToStartPosRsp::set_startposy(::google::protobuf::int32 value) {
  set_has_startposy();
  startposy_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureBackToStartPosRsp.StartPosY)
}

// -------------------------------------------------------------------

// TAdventureSetRatioModeReq

// optional uint32 RatioMode = 1;
inline bool TAdventureSetRatioModeReq::has_ratiomode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureSetRatioModeReq::set_has_ratiomode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureSetRatioModeReq::clear_has_ratiomode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureSetRatioModeReq::clear_ratiomode() {
  ratiomode_ = 0u;
  clear_has_ratiomode();
}
inline ::google::protobuf::uint32 TAdventureSetRatioModeReq::ratiomode() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureSetRatioModeReq.RatioMode)
  return ratiomode_;
}
inline void TAdventureSetRatioModeReq::set_ratiomode(::google::protobuf::uint32 value) {
  set_has_ratiomode();
  ratiomode_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureSetRatioModeReq.RatioMode)
}

// -------------------------------------------------------------------

// TAdventureGetHangUpInfoRsp

// repeated .pb.TAdventureUserSimpleInfo PunishedUserArr = 1;
inline int TAdventureGetHangUpInfoRsp::punisheduserarr_size() const {
  return punisheduserarr_.size();
}
inline void TAdventureGetHangUpInfoRsp::clear_punisheduserarr() {
  punisheduserarr_.Clear();
}
inline const ::pb::TAdventureUserSimpleInfo& TAdventureGetHangUpInfoRsp::punisheduserarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetHangUpInfoRsp.PunishedUserArr)
  return punisheduserarr_.Get(index);
}
inline ::pb::TAdventureUserSimpleInfo* TAdventureGetHangUpInfoRsp::mutable_punisheduserarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureGetHangUpInfoRsp.PunishedUserArr)
  return punisheduserarr_.Mutable(index);
}
inline ::pb::TAdventureUserSimpleInfo* TAdventureGetHangUpInfoRsp::add_punisheduserarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureGetHangUpInfoRsp.PunishedUserArr)
  return punisheduserarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureUserSimpleInfo >&
TAdventureGetHangUpInfoRsp::punisheduserarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureGetHangUpInfoRsp.PunishedUserArr)
  return punisheduserarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureUserSimpleInfo >*
TAdventureGetHangUpInfoRsp::mutable_punisheduserarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureGetHangUpInfoRsp.PunishedUserArr)
  return &punisheduserarr_;
}

// -------------------------------------------------------------------

// TAdventureSweepReq

// optional uint64 MapId = 1;
inline bool TAdventureSweepReq::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureSweepReq::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureSweepReq::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureSweepReq::clear_mapid() {
  mapid_ = GOOGLE_ULONGLONG(0);
  clear_has_mapid();
}
inline ::google::protobuf::uint64 TAdventureSweepReq::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureSweepReq.MapId)
  return mapid_;
}
inline void TAdventureSweepReq::set_mapid(::google::protobuf::uint64 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureSweepReq.MapId)
}

// optional .pb.EAdventureType AdventureType = 2;
inline bool TAdventureSweepReq::has_adventuretype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureSweepReq::set_has_adventuretype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureSweepReq::clear_has_adventuretype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureSweepReq::clear_adventuretype() {
  adventuretype_ = 0;
  clear_has_adventuretype();
}
inline ::pb::EAdventureType TAdventureSweepReq::adventuretype() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureSweepReq.AdventureType)
  return static_cast< ::pb::EAdventureType >(adventuretype_);
}
inline void TAdventureSweepReq::set_adventuretype(::pb::EAdventureType value) {
  assert(::pb::EAdventureType_IsValid(value));
  set_has_adventuretype();
  adventuretype_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureSweepReq.AdventureType)
}

// -------------------------------------------------------------------

// TAdventureSweepRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TAdventureSweepRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TAdventureSweepRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TAdventureSweepRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureSweepRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TAdventureSweepRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureSweepRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TAdventureSweepRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TAdventureSweepRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TAdventureSweepRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureSweepRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TAdventureSweepRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureSweepRsp.RewardArray)
  return &rewardarray_;
}

// optional uint32 RatioMode = 2;
inline bool TAdventureSweepRsp::has_ratiomode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureSweepRsp::set_has_ratiomode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureSweepRsp::clear_has_ratiomode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureSweepRsp::clear_ratiomode() {
  ratiomode_ = 0u;
  clear_has_ratiomode();
}
inline ::google::protobuf::uint32 TAdventureSweepRsp::ratiomode() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureSweepRsp.RatioMode)
  return ratiomode_;
}
inline void TAdventureSweepRsp::set_ratiomode(::google::protobuf::uint32 value) {
  set_has_ratiomode();
  ratiomode_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureSweepRsp.RatioMode)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fAdventure_2eproto__INCLUDED
