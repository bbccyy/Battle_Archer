// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Team.proto

#ifndef PROTOBUF_net_2fTeam_2eproto__INCLUDED
#define PROTOBUF_net_2fTeam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fTeam_2eproto();
void protobuf_AssignDesc_net_2fTeam_2eproto();
void protobuf_ShutdownFile_net_2fTeam_2eproto();

class THallMemberInfo;
class THallTeamInfo;
class THallTeamNotifyAddMember;
class THallTeamNotifyUpdateMemberInfo;
class THallTeamNotifyUpdateTeamInfo;
class THallTeamNotifyDelMember;
class THallTeamNotifyMemberReady;
class THallTeamNotifyTeamDissolved;
class THallTeamNotifyStartPlay;

enum EHallMemberReadyStatus {
  HALL_MEMBER_STATUS_NOREADY = 1,
  HALL_MEMBER_STATUS_READY = 2
};
bool EHallMemberReadyStatus_IsValid(int value);
const EHallMemberReadyStatus EHallMemberReadyStatus_MIN = HALL_MEMBER_STATUS_NOREADY;
const EHallMemberReadyStatus EHallMemberReadyStatus_MAX = HALL_MEMBER_STATUS_READY;
const int EHallMemberReadyStatus_ARRAYSIZE = EHallMemberReadyStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EHallMemberReadyStatus_descriptor();
inline const ::std::string& EHallMemberReadyStatus_Name(EHallMemberReadyStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EHallMemberReadyStatus_descriptor(), value);
}
inline bool EHallMemberReadyStatus_Parse(
    const ::std::string& name, EHallMemberReadyStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EHallMemberReadyStatus>(
    EHallMemberReadyStatus_descriptor(), name, value);
}
enum EHallTeamType {
  HALL_TEAM_TYPE_PRIVATE = 1,
  HALL_TEAM_TYPE_PUBLIC = 2
};
bool EHallTeamType_IsValid(int value);
const EHallTeamType EHallTeamType_MIN = HALL_TEAM_TYPE_PRIVATE;
const EHallTeamType EHallTeamType_MAX = HALL_TEAM_TYPE_PUBLIC;
const int EHallTeamType_ARRAYSIZE = EHallTeamType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EHallTeamType_descriptor();
inline const ::std::string& EHallTeamType_Name(EHallTeamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EHallTeamType_descriptor(), value);
}
inline bool EHallTeamType_Parse(
    const ::std::string& name, EHallTeamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EHallTeamType>(
    EHallTeamType_descriptor(), name, value);
}
enum ETeamDissolveCause {
  TEAM_DISSOLVE_CAUSE_LEADER_LEAVE = 1,
  TEAM_DISSOLVE_CAUSE_LEADER_ACT = 2,
  TEAM_DISSOLVE_CAUSE_TIMEOUT = 3
};
bool ETeamDissolveCause_IsValid(int value);
const ETeamDissolveCause ETeamDissolveCause_MIN = TEAM_DISSOLVE_CAUSE_LEADER_LEAVE;
const ETeamDissolveCause ETeamDissolveCause_MAX = TEAM_DISSOLVE_CAUSE_TIMEOUT;
const int ETeamDissolveCause_ARRAYSIZE = ETeamDissolveCause_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETeamDissolveCause_descriptor();
inline const ::std::string& ETeamDissolveCause_Name(ETeamDissolveCause value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETeamDissolveCause_descriptor(), value);
}
inline bool ETeamDissolveCause_Parse(
    const ::std::string& name, ETeamDissolveCause* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETeamDissolveCause>(
    ETeamDissolveCause_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>THallMemberInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Team.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THallMemberInfo : public ::google::protobuf::Message {
 public:
  THallMemberInfo();
  virtual ~THallMemberInfo();

  THallMemberInfo(const THallMemberInfo& from);

  inline THallMemberInfo& operator=(const THallMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THallMemberInfo& default_instance();

  void Swap(THallMemberInfo* other);

  // implements Message ----------------------------------------------

  THallMemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THallMemberInfo& from);
  void MergeFrom(const THallMemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 MemberId = 1;
  inline bool has_memberid() const;
  inline void clear_memberid();
  static const int kMemberIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THallMemberInfo</name>
  	<Function>
  		<name>memberid</name>
  		<replaceName>MemberId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_memberid</name>
  		<replaceName>MemberId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_memberid</name>
  		<replaceName>MemberId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 memberid() const;
  inline void set_memberid(::google::protobuf::uint64 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>THallMemberInfo</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional .pb.EHallMemberReadyStatus ReadyStatus = 3;
  inline bool has_readystatus() const;
  inline void clear_readystatus();
  static const int kReadyStatusFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>THallMemberInfo</name>
  	<Function>
  		<name>readystatus</name>
  		<replaceName>ReadyStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_readystatus</name>
  		<replaceName>ReadyStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_readystatus</name>
  		<replaceName>ReadyStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EHallMemberReadyStatus readystatus() const;
  inline void set_readystatus(::pb::EHallMemberReadyStatus value);

  // optional bytes InfoData = 4;
  inline bool has_infodata() const;
  inline void clear_infodata();
  static const int kInfoDataFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>THallMemberInfo</name>
  	<Function>
  		<name>infodata</name>
  		<replaceName>InfoData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_infodata</name>
  		<replaceName>InfoData</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_infodata</name>
  		<replaceName>InfoData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& infodata() const;
  inline void set_infodata(const ::std::string& value);
  inline void set_infodata(const char* value);
  inline void set_infodata(const void* value, size_t size);
  inline ::std::string* mutable_infodata();
  inline ::std::string* release_infodata();
  inline void set_allocated_infodata(::std::string* infodata);

  // @@protoc_insertion_point(class_scope:pb.THallMemberInfo)
 private:
  inline void set_has_memberid();
  inline void clear_has_memberid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_readystatus();
  inline void clear_has_readystatus();
  inline void set_has_infodata();
  inline void clear_has_infodata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 memberid_;
  ::std::string* serverid_;
  ::std::string* infodata_;
  int readystatus_;
  friend void  protobuf_AddDesc_net_2fTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fTeam_2eproto();

  void InitAsDefaultInstance();
  static THallMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THallTeamInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Team.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THallTeamInfo : public ::google::protobuf::Message {
 public:
  THallTeamInfo();
  virtual ~THallTeamInfo();

  THallTeamInfo(const THallTeamInfo& from);

  inline THallTeamInfo& operator=(const THallTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THallTeamInfo& default_instance();

  void Swap(THallTeamInfo* other);

  // implements Message ----------------------------------------------

  THallTeamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THallTeamInfo& from);
  void MergeFrom(const THallTeamInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THallTeamInfo</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint64 LeaderId = 2;
  inline bool has_leaderid() const;
  inline void clear_leaderid();
  static const int kLeaderIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>THallTeamInfo</name>
  	<Function>
  		<name>leaderid</name>
  		<replaceName>LeaderId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leaderid</name>
  		<replaceName>LeaderId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leaderid</name>
  		<replaceName>LeaderId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 leaderid() const;
  inline void set_leaderid(::google::protobuf::uint64 value);

  // optional .pb.EHallTeamType TeamType = 3;
  inline bool has_teamtype() const;
  inline void clear_teamtype();
  static const int kTeamTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>THallTeamInfo</name>
  	<Function>
  		<name>teamtype</name>
  		<replaceName>TeamType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamtype</name>
  		<replaceName>TeamType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamtype</name>
  		<replaceName>TeamType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EHallTeamType teamtype() const;
  inline void set_teamtype(::pb::EHallTeamType value);

  // optional uint32 MaxSize = 4;
  inline bool has_maxsize() const;
  inline void clear_maxsize();
  static const int kMaxSizeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>THallTeamInfo</name>
  	<Function>
  		<name>maxsize</name>
  		<replaceName>MaxSize</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxsize</name>
  		<replaceName>MaxSize</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxsize</name>
  		<replaceName>MaxSize</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxsize() const;
  inline void set_maxsize(::google::protobuf::uint32 value);

  // optional bytes InfoData = 5;
  inline bool has_infodata() const;
  inline void clear_infodata();
  static const int kInfoDataFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>THallTeamInfo</name>
  	<Function>
  		<name>infodata</name>
  		<replaceName>InfoData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_infodata</name>
  		<replaceName>InfoData</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_infodata</name>
  		<replaceName>InfoData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& infodata() const;
  inline void set_infodata(const ::std::string& value);
  inline void set_infodata(const char* value);
  inline void set_infodata(const void* value, size_t size);
  inline ::std::string* mutable_infodata();
  inline ::std::string* release_infodata();
  inline void set_allocated_infodata(::std::string* infodata);

  // @@protoc_insertion_point(class_scope:pb.THallTeamInfo)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_leaderid();
  inline void clear_has_leaderid();
  inline void set_has_teamtype();
  inline void clear_has_teamtype();
  inline void set_has_maxsize();
  inline void clear_has_maxsize();
  inline void set_has_infodata();
  inline void clear_has_infodata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 leaderid_;
  int teamtype_;
  ::google::protobuf::uint32 maxsize_;
  ::std::string* infodata_;
  friend void  protobuf_AddDesc_net_2fTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fTeam_2eproto();

  void InitAsDefaultInstance();
  static THallTeamInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THallTeamNotifyAddMember</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Team.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THallTeamNotifyAddMember : public ::google::protobuf::Message {
 public:
  THallTeamNotifyAddMember();
  virtual ~THallTeamNotifyAddMember();

  THallTeamNotifyAddMember(const THallTeamNotifyAddMember& from);

  inline THallTeamNotifyAddMember& operator=(const THallTeamNotifyAddMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THallTeamNotifyAddMember& default_instance();

  void Swap(THallTeamNotifyAddMember* other);

  // implements Message ----------------------------------------------

  THallTeamNotifyAddMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THallTeamNotifyAddMember& from);
  void MergeFrom(const THallTeamNotifyAddMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THallTeamNotifyAddMember</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional .pb.THallMemberInfo MemberInfo = 2;
  inline bool has_memberinfo() const;
  inline void clear_memberinfo();
  static const int kMemberInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>THallTeamNotifyAddMember</name>
  	<Function>
  		<name>memberinfo</name>
  		<replaceName>MemberInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_memberinfo</name>
  		<replaceName>MemberInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_memberinfo</name>
  		<replaceName>MemberInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_memberinfo</name>
  		<replaceName>MemberInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::THallMemberInfo& memberinfo() const;
  inline ::pb::THallMemberInfo* mutable_memberinfo();
  inline ::pb::THallMemberInfo* release_memberinfo();
  inline void set_allocated_memberinfo(::pb::THallMemberInfo* memberinfo);

  // @@protoc_insertion_point(class_scope:pb.THallTeamNotifyAddMember)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_memberinfo();
  inline void clear_has_memberinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::pb::THallMemberInfo* memberinfo_;
  friend void  protobuf_AddDesc_net_2fTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fTeam_2eproto();

  void InitAsDefaultInstance();
  static THallTeamNotifyAddMember* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THallTeamNotifyUpdateMemberInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Team.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THallTeamNotifyUpdateMemberInfo : public ::google::protobuf::Message {
 public:
  THallTeamNotifyUpdateMemberInfo();
  virtual ~THallTeamNotifyUpdateMemberInfo();

  THallTeamNotifyUpdateMemberInfo(const THallTeamNotifyUpdateMemberInfo& from);

  inline THallTeamNotifyUpdateMemberInfo& operator=(const THallTeamNotifyUpdateMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THallTeamNotifyUpdateMemberInfo& default_instance();

  void Swap(THallTeamNotifyUpdateMemberInfo* other);

  // implements Message ----------------------------------------------

  THallTeamNotifyUpdateMemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THallTeamNotifyUpdateMemberInfo& from);
  void MergeFrom(const THallTeamNotifyUpdateMemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THallTeamNotifyUpdateMemberInfo</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional .pb.THallMemberInfo MemberInfo = 2;
  inline bool has_memberinfo() const;
  inline void clear_memberinfo();
  static const int kMemberInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>THallTeamNotifyUpdateMemberInfo</name>
  	<Function>
  		<name>memberinfo</name>
  		<replaceName>MemberInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_memberinfo</name>
  		<replaceName>MemberInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_memberinfo</name>
  		<replaceName>MemberInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_memberinfo</name>
  		<replaceName>MemberInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::THallMemberInfo& memberinfo() const;
  inline ::pb::THallMemberInfo* mutable_memberinfo();
  inline ::pb::THallMemberInfo* release_memberinfo();
  inline void set_allocated_memberinfo(::pb::THallMemberInfo* memberinfo);

  // @@protoc_insertion_point(class_scope:pb.THallTeamNotifyUpdateMemberInfo)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_memberinfo();
  inline void clear_has_memberinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::pb::THallMemberInfo* memberinfo_;
  friend void  protobuf_AddDesc_net_2fTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fTeam_2eproto();

  void InitAsDefaultInstance();
  static THallTeamNotifyUpdateMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THallTeamNotifyUpdateTeamInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Team.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THallTeamNotifyUpdateTeamInfo : public ::google::protobuf::Message {
 public:
  THallTeamNotifyUpdateTeamInfo();
  virtual ~THallTeamNotifyUpdateTeamInfo();

  THallTeamNotifyUpdateTeamInfo(const THallTeamNotifyUpdateTeamInfo& from);

  inline THallTeamNotifyUpdateTeamInfo& operator=(const THallTeamNotifyUpdateTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THallTeamNotifyUpdateTeamInfo& default_instance();

  void Swap(THallTeamNotifyUpdateTeamInfo* other);

  // implements Message ----------------------------------------------

  THallTeamNotifyUpdateTeamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THallTeamNotifyUpdateTeamInfo& from);
  void MergeFrom(const THallTeamNotifyUpdateTeamInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.THallTeamInfo TeamInfo = 1;
  inline bool has_teaminfo() const;
  inline void clear_teaminfo();
  static const int kTeamInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THallTeamNotifyUpdateTeamInfo</name>
  	<Function>
  		<name>teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teaminfo</name>
  		<replaceName>TeamInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::THallTeamInfo& teaminfo() const;
  inline ::pb::THallTeamInfo* mutable_teaminfo();
  inline ::pb::THallTeamInfo* release_teaminfo();
  inline void set_allocated_teaminfo(::pb::THallTeamInfo* teaminfo);

  // @@protoc_insertion_point(class_scope:pb.THallTeamNotifyUpdateTeamInfo)
 private:
  inline void set_has_teaminfo();
  inline void clear_has_teaminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::THallTeamInfo* teaminfo_;
  friend void  protobuf_AddDesc_net_2fTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fTeam_2eproto();

  void InitAsDefaultInstance();
  static THallTeamNotifyUpdateTeamInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THallTeamNotifyDelMember</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Team.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THallTeamNotifyDelMember : public ::google::protobuf::Message {
 public:
  THallTeamNotifyDelMember();
  virtual ~THallTeamNotifyDelMember();

  THallTeamNotifyDelMember(const THallTeamNotifyDelMember& from);

  inline THallTeamNotifyDelMember& operator=(const THallTeamNotifyDelMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THallTeamNotifyDelMember& default_instance();

  void Swap(THallTeamNotifyDelMember* other);

  // implements Message ----------------------------------------------

  THallTeamNotifyDelMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THallTeamNotifyDelMember& from);
  void MergeFrom(const THallTeamNotifyDelMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THallTeamNotifyDelMember</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint64 MemberId = 2;
  inline bool has_memberid() const;
  inline void clear_memberid();
  static const int kMemberIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>THallTeamNotifyDelMember</name>
  	<Function>
  		<name>memberid</name>
  		<replaceName>MemberId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_memberid</name>
  		<replaceName>MemberId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_memberid</name>
  		<replaceName>MemberId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 memberid() const;
  inline void set_memberid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.THallTeamNotifyDelMember)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_memberid();
  inline void clear_has_memberid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 memberid_;
  friend void  protobuf_AddDesc_net_2fTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fTeam_2eproto();

  void InitAsDefaultInstance();
  static THallTeamNotifyDelMember* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THallTeamNotifyMemberReady</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Team.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THallTeamNotifyMemberReady : public ::google::protobuf::Message {
 public:
  THallTeamNotifyMemberReady();
  virtual ~THallTeamNotifyMemberReady();

  THallTeamNotifyMemberReady(const THallTeamNotifyMemberReady& from);

  inline THallTeamNotifyMemberReady& operator=(const THallTeamNotifyMemberReady& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THallTeamNotifyMemberReady& default_instance();

  void Swap(THallTeamNotifyMemberReady* other);

  // implements Message ----------------------------------------------

  THallTeamNotifyMemberReady* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THallTeamNotifyMemberReady& from);
  void MergeFrom(const THallTeamNotifyMemberReady& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THallTeamNotifyMemberReady</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint64 MemberId = 2;
  inline bool has_memberid() const;
  inline void clear_memberid();
  static const int kMemberIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>THallTeamNotifyMemberReady</name>
  	<Function>
  		<name>memberid</name>
  		<replaceName>MemberId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_memberid</name>
  		<replaceName>MemberId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_memberid</name>
  		<replaceName>MemberId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 memberid() const;
  inline void set_memberid(::google::protobuf::uint64 value);

  // optional .pb.EHallMemberReadyStatus ReadyStatus = 3;
  inline bool has_readystatus() const;
  inline void clear_readystatus();
  static const int kReadyStatusFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>THallTeamNotifyMemberReady</name>
  	<Function>
  		<name>readystatus</name>
  		<replaceName>ReadyStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_readystatus</name>
  		<replaceName>ReadyStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_readystatus</name>
  		<replaceName>ReadyStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EHallMemberReadyStatus readystatus() const;
  inline void set_readystatus(::pb::EHallMemberReadyStatus value);

  // @@protoc_insertion_point(class_scope:pb.THallTeamNotifyMemberReady)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_memberid();
  inline void clear_has_memberid();
  inline void set_has_readystatus();
  inline void clear_has_readystatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 memberid_;
  int readystatus_;
  friend void  protobuf_AddDesc_net_2fTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fTeam_2eproto();

  void InitAsDefaultInstance();
  static THallTeamNotifyMemberReady* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THallTeamNotifyTeamDissolved</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Team.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THallTeamNotifyTeamDissolved : public ::google::protobuf::Message {
 public:
  THallTeamNotifyTeamDissolved();
  virtual ~THallTeamNotifyTeamDissolved();

  THallTeamNotifyTeamDissolved(const THallTeamNotifyTeamDissolved& from);

  inline THallTeamNotifyTeamDissolved& operator=(const THallTeamNotifyTeamDissolved& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THallTeamNotifyTeamDissolved& default_instance();

  void Swap(THallTeamNotifyTeamDissolved* other);

  // implements Message ----------------------------------------------

  THallTeamNotifyTeamDissolved* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THallTeamNotifyTeamDissolved& from);
  void MergeFrom(const THallTeamNotifyTeamDissolved& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THallTeamNotifyTeamDissolved</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional .pb.ETeamDissolveCause Cause = 2;
  inline bool has_cause() const;
  inline void clear_cause();
  static const int kCauseFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>THallTeamNotifyTeamDissolved</name>
  	<Function>
  		<name>cause</name>
  		<replaceName>Cause</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cause</name>
  		<replaceName>Cause</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cause</name>
  		<replaceName>Cause</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ETeamDissolveCause cause() const;
  inline void set_cause(::pb::ETeamDissolveCause value);

  // @@protoc_insertion_point(class_scope:pb.THallTeamNotifyTeamDissolved)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_cause();
  inline void clear_has_cause();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  int cause_;
  friend void  protobuf_AddDesc_net_2fTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fTeam_2eproto();

  void InitAsDefaultInstance();
  static THallTeamNotifyTeamDissolved* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THallTeamNotifyStartPlay</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Team.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THallTeamNotifyStartPlay : public ::google::protobuf::Message {
 public:
  THallTeamNotifyStartPlay();
  virtual ~THallTeamNotifyStartPlay();

  THallTeamNotifyStartPlay(const THallTeamNotifyStartPlay& from);

  inline THallTeamNotifyStartPlay& operator=(const THallTeamNotifyStartPlay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THallTeamNotifyStartPlay& default_instance();

  void Swap(THallTeamNotifyStartPlay* other);

  // implements Message ----------------------------------------------

  THallTeamNotifyStartPlay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THallTeamNotifyStartPlay& from);
  void MergeFrom(const THallTeamNotifyStartPlay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THallTeamNotifyStartPlay</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint32 Err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>THallTeamNotifyStartPlay</name>
  	<Function>
  		<name>err</name>
  		<replaceName>Err</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_err</name>
  		<replaceName>Err</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_err</name>
  		<replaceName>Err</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 err() const;
  inline void set_err(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.THallTeamNotifyStartPlay)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint32 err_;
  friend void  protobuf_AddDesc_net_2fTeam_2eproto();
  friend void protobuf_AssignDesc_net_2fTeam_2eproto();
  friend void protobuf_ShutdownFile_net_2fTeam_2eproto();

  void InitAsDefaultInstance();
  static THallTeamNotifyStartPlay* default_instance_;
};
// ===================================================================


// ===================================================================

// THallMemberInfo

// optional uint64 MemberId = 1;
inline bool THallMemberInfo::has_memberid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THallMemberInfo::set_has_memberid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THallMemberInfo::clear_has_memberid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THallMemberInfo::clear_memberid() {
  memberid_ = GOOGLE_ULONGLONG(0);
  clear_has_memberid();
}
inline ::google::protobuf::uint64 THallMemberInfo::memberid() const {
  // @@protoc_insertion_point(field_get:pb.THallMemberInfo.MemberId)
  return memberid_;
}
inline void THallMemberInfo::set_memberid(::google::protobuf::uint64 value) {
  set_has_memberid();
  memberid_ = value;
  // @@protoc_insertion_point(field_set:pb.THallMemberInfo.MemberId)
}

// optional string ServerId = 2;
inline bool THallMemberInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void THallMemberInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void THallMemberInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void THallMemberInfo::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& THallMemberInfo::serverid() const {
  // @@protoc_insertion_point(field_get:pb.THallMemberInfo.ServerId)
  return *serverid_;
}
inline void THallMemberInfo::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.THallMemberInfo.ServerId)
}
inline void THallMemberInfo::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.THallMemberInfo.ServerId)
}
inline void THallMemberInfo::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.THallMemberInfo.ServerId)
}
inline ::std::string* THallMemberInfo::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.THallMemberInfo.ServerId)
  return serverid_;
}
inline ::std::string* THallMemberInfo::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void THallMemberInfo::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.THallMemberInfo.ServerId)
}

// optional .pb.EHallMemberReadyStatus ReadyStatus = 3;
inline bool THallMemberInfo::has_readystatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void THallMemberInfo::set_has_readystatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void THallMemberInfo::clear_has_readystatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void THallMemberInfo::clear_readystatus() {
  readystatus_ = 1;
  clear_has_readystatus();
}
inline ::pb::EHallMemberReadyStatus THallMemberInfo::readystatus() const {
  // @@protoc_insertion_point(field_get:pb.THallMemberInfo.ReadyStatus)
  return static_cast< ::pb::EHallMemberReadyStatus >(readystatus_);
}
inline void THallMemberInfo::set_readystatus(::pb::EHallMemberReadyStatus value) {
  assert(::pb::EHallMemberReadyStatus_IsValid(value));
  set_has_readystatus();
  readystatus_ = value;
  // @@protoc_insertion_point(field_set:pb.THallMemberInfo.ReadyStatus)
}

// optional bytes InfoData = 4;
inline bool THallMemberInfo::has_infodata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void THallMemberInfo::set_has_infodata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void THallMemberInfo::clear_has_infodata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void THallMemberInfo::clear_infodata() {
  if (infodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_->clear();
  }
  clear_has_infodata();
}
inline const ::std::string& THallMemberInfo::infodata() const {
  // @@protoc_insertion_point(field_get:pb.THallMemberInfo.InfoData)
  return *infodata_;
}
inline void THallMemberInfo::set_infodata(const ::std::string& value) {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  infodata_->assign(value);
  // @@protoc_insertion_point(field_set:pb.THallMemberInfo.InfoData)
}
inline void THallMemberInfo::set_infodata(const char* value) {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  infodata_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.THallMemberInfo.InfoData)
}
inline void THallMemberInfo::set_infodata(const void* value, size_t size) {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  infodata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.THallMemberInfo.InfoData)
}
inline ::std::string* THallMemberInfo::mutable_infodata() {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.THallMemberInfo.InfoData)
  return infodata_;
}
inline ::std::string* THallMemberInfo::release_infodata() {
  clear_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = infodata_;
    infodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void THallMemberInfo::set_allocated_infodata(::std::string* infodata) {
  if (infodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete infodata_;
  }
  if (infodata) {
    set_has_infodata();
    infodata_ = infodata;
  } else {
    clear_has_infodata();
    infodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.THallMemberInfo.InfoData)
}

// -------------------------------------------------------------------

// THallTeamInfo

// optional uint64 TeamId = 1;
inline bool THallTeamInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THallTeamInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THallTeamInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THallTeamInfo::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 THallTeamInfo::teamid() const {
  // @@protoc_insertion_point(field_get:pb.THallTeamInfo.TeamId)
  return teamid_;
}
inline void THallTeamInfo::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.THallTeamInfo.TeamId)
}

// optional uint64 LeaderId = 2;
inline bool THallTeamInfo::has_leaderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void THallTeamInfo::set_has_leaderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void THallTeamInfo::clear_has_leaderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void THallTeamInfo::clear_leaderid() {
  leaderid_ = GOOGLE_ULONGLONG(0);
  clear_has_leaderid();
}
inline ::google::protobuf::uint64 THallTeamInfo::leaderid() const {
  // @@protoc_insertion_point(field_get:pb.THallTeamInfo.LeaderId)
  return leaderid_;
}
inline void THallTeamInfo::set_leaderid(::google::protobuf::uint64 value) {
  set_has_leaderid();
  leaderid_ = value;
  // @@protoc_insertion_point(field_set:pb.THallTeamInfo.LeaderId)
}

// optional .pb.EHallTeamType TeamType = 3;
inline bool THallTeamInfo::has_teamtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void THallTeamInfo::set_has_teamtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void THallTeamInfo::clear_has_teamtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void THallTeamInfo::clear_teamtype() {
  teamtype_ = 1;
  clear_has_teamtype();
}
inline ::pb::EHallTeamType THallTeamInfo::teamtype() const {
  // @@protoc_insertion_point(field_get:pb.THallTeamInfo.TeamType)
  return static_cast< ::pb::EHallTeamType >(teamtype_);
}
inline void THallTeamInfo::set_teamtype(::pb::EHallTeamType value) {
  assert(::pb::EHallTeamType_IsValid(value));
  set_has_teamtype();
  teamtype_ = value;
  // @@protoc_insertion_point(field_set:pb.THallTeamInfo.TeamType)
}

// optional uint32 MaxSize = 4;
inline bool THallTeamInfo::has_maxsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void THallTeamInfo::set_has_maxsize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void THallTeamInfo::clear_has_maxsize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void THallTeamInfo::clear_maxsize() {
  maxsize_ = 0u;
  clear_has_maxsize();
}
inline ::google::protobuf::uint32 THallTeamInfo::maxsize() const {
  // @@protoc_insertion_point(field_get:pb.THallTeamInfo.MaxSize)
  return maxsize_;
}
inline void THallTeamInfo::set_maxsize(::google::protobuf::uint32 value) {
  set_has_maxsize();
  maxsize_ = value;
  // @@protoc_insertion_point(field_set:pb.THallTeamInfo.MaxSize)
}

// optional bytes InfoData = 5;
inline bool THallTeamInfo::has_infodata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void THallTeamInfo::set_has_infodata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void THallTeamInfo::clear_has_infodata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void THallTeamInfo::clear_infodata() {
  if (infodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_->clear();
  }
  clear_has_infodata();
}
inline const ::std::string& THallTeamInfo::infodata() const {
  // @@protoc_insertion_point(field_get:pb.THallTeamInfo.InfoData)
  return *infodata_;
}
inline void THallTeamInfo::set_infodata(const ::std::string& value) {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  infodata_->assign(value);
  // @@protoc_insertion_point(field_set:pb.THallTeamInfo.InfoData)
}
inline void THallTeamInfo::set_infodata(const char* value) {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  infodata_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.THallTeamInfo.InfoData)
}
inline void THallTeamInfo::set_infodata(const void* value, size_t size) {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  infodata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.THallTeamInfo.InfoData)
}
inline ::std::string* THallTeamInfo::mutable_infodata() {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.THallTeamInfo.InfoData)
  return infodata_;
}
inline ::std::string* THallTeamInfo::release_infodata() {
  clear_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = infodata_;
    infodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void THallTeamInfo::set_allocated_infodata(::std::string* infodata) {
  if (infodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete infodata_;
  }
  if (infodata) {
    set_has_infodata();
    infodata_ = infodata;
  } else {
    clear_has_infodata();
    infodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.THallTeamInfo.InfoData)
}

// -------------------------------------------------------------------

// THallTeamNotifyAddMember

// optional uint64 TeamId = 1;
inline bool THallTeamNotifyAddMember::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THallTeamNotifyAddMember::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THallTeamNotifyAddMember::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THallTeamNotifyAddMember::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 THallTeamNotifyAddMember::teamid() const {
  // @@protoc_insertion_point(field_get:pb.THallTeamNotifyAddMember.TeamId)
  return teamid_;
}
inline void THallTeamNotifyAddMember::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.THallTeamNotifyAddMember.TeamId)
}

// optional .pb.THallMemberInfo MemberInfo = 2;
inline bool THallTeamNotifyAddMember::has_memberinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void THallTeamNotifyAddMember::set_has_memberinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void THallTeamNotifyAddMember::clear_has_memberinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void THallTeamNotifyAddMember::clear_memberinfo() {
  if (memberinfo_ != NULL) memberinfo_->::pb::THallMemberInfo::Clear();
  clear_has_memberinfo();
}
inline const ::pb::THallMemberInfo& THallTeamNotifyAddMember::memberinfo() const {
  // @@protoc_insertion_point(field_get:pb.THallTeamNotifyAddMember.MemberInfo)
  return memberinfo_ != NULL ? *memberinfo_ : *default_instance_->memberinfo_;
}
inline ::pb::THallMemberInfo* THallTeamNotifyAddMember::mutable_memberinfo() {
  set_has_memberinfo();
  if (memberinfo_ == NULL) memberinfo_ = new ::pb::THallMemberInfo;
  // @@protoc_insertion_point(field_mutable:pb.THallTeamNotifyAddMember.MemberInfo)
  return memberinfo_;
}
inline ::pb::THallMemberInfo* THallTeamNotifyAddMember::release_memberinfo() {
  clear_has_memberinfo();
  ::pb::THallMemberInfo* temp = memberinfo_;
  memberinfo_ = NULL;
  return temp;
}
inline void THallTeamNotifyAddMember::set_allocated_memberinfo(::pb::THallMemberInfo* memberinfo) {
  delete memberinfo_;
  memberinfo_ = memberinfo;
  if (memberinfo) {
    set_has_memberinfo();
  } else {
    clear_has_memberinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.THallTeamNotifyAddMember.MemberInfo)
}

// -------------------------------------------------------------------

// THallTeamNotifyUpdateMemberInfo

// optional uint64 TeamId = 1;
inline bool THallTeamNotifyUpdateMemberInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THallTeamNotifyUpdateMemberInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THallTeamNotifyUpdateMemberInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THallTeamNotifyUpdateMemberInfo::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 THallTeamNotifyUpdateMemberInfo::teamid() const {
  // @@protoc_insertion_point(field_get:pb.THallTeamNotifyUpdateMemberInfo.TeamId)
  return teamid_;
}
inline void THallTeamNotifyUpdateMemberInfo::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.THallTeamNotifyUpdateMemberInfo.TeamId)
}

// optional .pb.THallMemberInfo MemberInfo = 2;
inline bool THallTeamNotifyUpdateMemberInfo::has_memberinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void THallTeamNotifyUpdateMemberInfo::set_has_memberinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void THallTeamNotifyUpdateMemberInfo::clear_has_memberinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void THallTeamNotifyUpdateMemberInfo::clear_memberinfo() {
  if (memberinfo_ != NULL) memberinfo_->::pb::THallMemberInfo::Clear();
  clear_has_memberinfo();
}
inline const ::pb::THallMemberInfo& THallTeamNotifyUpdateMemberInfo::memberinfo() const {
  // @@protoc_insertion_point(field_get:pb.THallTeamNotifyUpdateMemberInfo.MemberInfo)
  return memberinfo_ != NULL ? *memberinfo_ : *default_instance_->memberinfo_;
}
inline ::pb::THallMemberInfo* THallTeamNotifyUpdateMemberInfo::mutable_memberinfo() {
  set_has_memberinfo();
  if (memberinfo_ == NULL) memberinfo_ = new ::pb::THallMemberInfo;
  // @@protoc_insertion_point(field_mutable:pb.THallTeamNotifyUpdateMemberInfo.MemberInfo)
  return memberinfo_;
}
inline ::pb::THallMemberInfo* THallTeamNotifyUpdateMemberInfo::release_memberinfo() {
  clear_has_memberinfo();
  ::pb::THallMemberInfo* temp = memberinfo_;
  memberinfo_ = NULL;
  return temp;
}
inline void THallTeamNotifyUpdateMemberInfo::set_allocated_memberinfo(::pb::THallMemberInfo* memberinfo) {
  delete memberinfo_;
  memberinfo_ = memberinfo;
  if (memberinfo) {
    set_has_memberinfo();
  } else {
    clear_has_memberinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.THallTeamNotifyUpdateMemberInfo.MemberInfo)
}

// -------------------------------------------------------------------

// THallTeamNotifyUpdateTeamInfo

// optional .pb.THallTeamInfo TeamInfo = 1;
inline bool THallTeamNotifyUpdateTeamInfo::has_teaminfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THallTeamNotifyUpdateTeamInfo::set_has_teaminfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THallTeamNotifyUpdateTeamInfo::clear_has_teaminfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THallTeamNotifyUpdateTeamInfo::clear_teaminfo() {
  if (teaminfo_ != NULL) teaminfo_->::pb::THallTeamInfo::Clear();
  clear_has_teaminfo();
}
inline const ::pb::THallTeamInfo& THallTeamNotifyUpdateTeamInfo::teaminfo() const {
  // @@protoc_insertion_point(field_get:pb.THallTeamNotifyUpdateTeamInfo.TeamInfo)
  return teaminfo_ != NULL ? *teaminfo_ : *default_instance_->teaminfo_;
}
inline ::pb::THallTeamInfo* THallTeamNotifyUpdateTeamInfo::mutable_teaminfo() {
  set_has_teaminfo();
  if (teaminfo_ == NULL) teaminfo_ = new ::pb::THallTeamInfo;
  // @@protoc_insertion_point(field_mutable:pb.THallTeamNotifyUpdateTeamInfo.TeamInfo)
  return teaminfo_;
}
inline ::pb::THallTeamInfo* THallTeamNotifyUpdateTeamInfo::release_teaminfo() {
  clear_has_teaminfo();
  ::pb::THallTeamInfo* temp = teaminfo_;
  teaminfo_ = NULL;
  return temp;
}
inline void THallTeamNotifyUpdateTeamInfo::set_allocated_teaminfo(::pb::THallTeamInfo* teaminfo) {
  delete teaminfo_;
  teaminfo_ = teaminfo;
  if (teaminfo) {
    set_has_teaminfo();
  } else {
    clear_has_teaminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.THallTeamNotifyUpdateTeamInfo.TeamInfo)
}

// -------------------------------------------------------------------

// THallTeamNotifyDelMember

// optional uint64 TeamId = 1;
inline bool THallTeamNotifyDelMember::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THallTeamNotifyDelMember::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THallTeamNotifyDelMember::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THallTeamNotifyDelMember::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 THallTeamNotifyDelMember::teamid() const {
  // @@protoc_insertion_point(field_get:pb.THallTeamNotifyDelMember.TeamId)
  return teamid_;
}
inline void THallTeamNotifyDelMember::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.THallTeamNotifyDelMember.TeamId)
}

// optional uint64 MemberId = 2;
inline bool THallTeamNotifyDelMember::has_memberid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void THallTeamNotifyDelMember::set_has_memberid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void THallTeamNotifyDelMember::clear_has_memberid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void THallTeamNotifyDelMember::clear_memberid() {
  memberid_ = GOOGLE_ULONGLONG(0);
  clear_has_memberid();
}
inline ::google::protobuf::uint64 THallTeamNotifyDelMember::memberid() const {
  // @@protoc_insertion_point(field_get:pb.THallTeamNotifyDelMember.MemberId)
  return memberid_;
}
inline void THallTeamNotifyDelMember::set_memberid(::google::protobuf::uint64 value) {
  set_has_memberid();
  memberid_ = value;
  // @@protoc_insertion_point(field_set:pb.THallTeamNotifyDelMember.MemberId)
}

// -------------------------------------------------------------------

// THallTeamNotifyMemberReady

// optional uint64 TeamId = 1;
inline bool THallTeamNotifyMemberReady::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THallTeamNotifyMemberReady::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THallTeamNotifyMemberReady::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THallTeamNotifyMemberReady::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 THallTeamNotifyMemberReady::teamid() const {
  // @@protoc_insertion_point(field_get:pb.THallTeamNotifyMemberReady.TeamId)
  return teamid_;
}
inline void THallTeamNotifyMemberReady::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.THallTeamNotifyMemberReady.TeamId)
}

// optional uint64 MemberId = 2;
inline bool THallTeamNotifyMemberReady::has_memberid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void THallTeamNotifyMemberReady::set_has_memberid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void THallTeamNotifyMemberReady::clear_has_memberid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void THallTeamNotifyMemberReady::clear_memberid() {
  memberid_ = GOOGLE_ULONGLONG(0);
  clear_has_memberid();
}
inline ::google::protobuf::uint64 THallTeamNotifyMemberReady::memberid() const {
  // @@protoc_insertion_point(field_get:pb.THallTeamNotifyMemberReady.MemberId)
  return memberid_;
}
inline void THallTeamNotifyMemberReady::set_memberid(::google::protobuf::uint64 value) {
  set_has_memberid();
  memberid_ = value;
  // @@protoc_insertion_point(field_set:pb.THallTeamNotifyMemberReady.MemberId)
}

// optional .pb.EHallMemberReadyStatus ReadyStatus = 3;
inline bool THallTeamNotifyMemberReady::has_readystatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void THallTeamNotifyMemberReady::set_has_readystatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void THallTeamNotifyMemberReady::clear_has_readystatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void THallTeamNotifyMemberReady::clear_readystatus() {
  readystatus_ = 1;
  clear_has_readystatus();
}
inline ::pb::EHallMemberReadyStatus THallTeamNotifyMemberReady::readystatus() const {
  // @@protoc_insertion_point(field_get:pb.THallTeamNotifyMemberReady.ReadyStatus)
  return static_cast< ::pb::EHallMemberReadyStatus >(readystatus_);
}
inline void THallTeamNotifyMemberReady::set_readystatus(::pb::EHallMemberReadyStatus value) {
  assert(::pb::EHallMemberReadyStatus_IsValid(value));
  set_has_readystatus();
  readystatus_ = value;
  // @@protoc_insertion_point(field_set:pb.THallTeamNotifyMemberReady.ReadyStatus)
}

// -------------------------------------------------------------------

// THallTeamNotifyTeamDissolved

// optional uint64 TeamId = 1;
inline bool THallTeamNotifyTeamDissolved::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THallTeamNotifyTeamDissolved::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THallTeamNotifyTeamDissolved::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THallTeamNotifyTeamDissolved::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 THallTeamNotifyTeamDissolved::teamid() const {
  // @@protoc_insertion_point(field_get:pb.THallTeamNotifyTeamDissolved.TeamId)
  return teamid_;
}
inline void THallTeamNotifyTeamDissolved::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.THallTeamNotifyTeamDissolved.TeamId)
}

// optional .pb.ETeamDissolveCause Cause = 2;
inline bool THallTeamNotifyTeamDissolved::has_cause() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void THallTeamNotifyTeamDissolved::set_has_cause() {
  _has_bits_[0] |= 0x00000002u;
}
inline void THallTeamNotifyTeamDissolved::clear_has_cause() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void THallTeamNotifyTeamDissolved::clear_cause() {
  cause_ = 1;
  clear_has_cause();
}
inline ::pb::ETeamDissolveCause THallTeamNotifyTeamDissolved::cause() const {
  // @@protoc_insertion_point(field_get:pb.THallTeamNotifyTeamDissolved.Cause)
  return static_cast< ::pb::ETeamDissolveCause >(cause_);
}
inline void THallTeamNotifyTeamDissolved::set_cause(::pb::ETeamDissolveCause value) {
  assert(::pb::ETeamDissolveCause_IsValid(value));
  set_has_cause();
  cause_ = value;
  // @@protoc_insertion_point(field_set:pb.THallTeamNotifyTeamDissolved.Cause)
}

// -------------------------------------------------------------------

// THallTeamNotifyStartPlay

// optional uint64 TeamId = 1;
inline bool THallTeamNotifyStartPlay::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THallTeamNotifyStartPlay::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THallTeamNotifyStartPlay::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THallTeamNotifyStartPlay::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 THallTeamNotifyStartPlay::teamid() const {
  // @@protoc_insertion_point(field_get:pb.THallTeamNotifyStartPlay.TeamId)
  return teamid_;
}
inline void THallTeamNotifyStartPlay::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.THallTeamNotifyStartPlay.TeamId)
}

// optional uint32 Err = 2;
inline bool THallTeamNotifyStartPlay::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void THallTeamNotifyStartPlay::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void THallTeamNotifyStartPlay::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void THallTeamNotifyStartPlay::clear_err() {
  err_ = 0u;
  clear_has_err();
}
inline ::google::protobuf::uint32 THallTeamNotifyStartPlay::err() const {
  // @@protoc_insertion_point(field_get:pb.THallTeamNotifyStartPlay.Err)
  return err_;
}
inline void THallTeamNotifyStartPlay::set_err(::google::protobuf::uint32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:pb.THallTeamNotifyStartPlay.Err)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EHallMemberReadyStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EHallMemberReadyStatus>() {
  return ::pb::EHallMemberReadyStatus_descriptor();
}
template <> struct is_proto_enum< ::pb::EHallTeamType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EHallTeamType>() {
  return ::pb::EHallTeamType_descriptor();
}
template <> struct is_proto_enum< ::pb::ETeamDissolveCause> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ETeamDissolveCause>() {
  return ::pb::ETeamDissolveCause_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fTeam_2eproto__INCLUDED
