// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/AdventureTower.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/AdventureTower.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TAdventureTowerGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerSimpleMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerSimpleMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerBuffBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerBuffBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerTavernInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerTavernInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerEnterMapReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerEnterMapReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerHeroBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerHeroBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerHeroStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerHeroStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerEnterMapRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerEnterMapRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerQuitMapReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerQuitMapReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerSetSquadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerSetSquadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerTriggerEventReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerTriggerEventReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerEventRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerEventRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerTriggerEventRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerTriggerEventRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerStartBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerStartBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerStartBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerStartBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerReportBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerReportBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerReportBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerReportBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerReportPosReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerReportPosReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerPassBlocksReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerPassBlocksReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTowerPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTowerPos_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fAdventureTower_2eproto() {
  protobuf_AddDesc_net_2fAdventureTower_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/AdventureTower.proto");
  GOOGLE_CHECK(file != NULL);
  TAdventureTowerGetInfoRsp_descriptor_ = file->message_type(0);
  static const int TAdventureTowerGetInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerGetInfoRsp, maxmapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerGetInfoRsp, curmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerGetInfoRsp, maxpassedmapid_),
  };
  TAdventureTowerGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerGetInfoRsp_descriptor_,
      TAdventureTowerGetInfoRsp::default_instance_,
      TAdventureTowerGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerGetInfoRsp));
  TAdventureTowerSimpleMapInfo_descriptor_ = file->message_type(1);
  static const int TAdventureTowerSimpleMapInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerSimpleMapInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerSimpleMapInfo, receivedboxid_),
  };
  TAdventureTowerSimpleMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerSimpleMapInfo_descriptor_,
      TAdventureTowerSimpleMapInfo::default_instance_,
      TAdventureTowerSimpleMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerSimpleMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerSimpleMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerSimpleMapInfo));
  TAdventureTowerBuffBox_descriptor_ = file->message_type(2);
  static const int TAdventureTowerBuffBox_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerBuffBox, buffboxpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerBuffBox, buffidarr_),
  };
  TAdventureTowerBuffBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerBuffBox_descriptor_,
      TAdventureTowerBuffBox::default_instance_,
      TAdventureTowerBuffBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerBuffBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerBuffBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerBuffBox));
  TAdventureTowerMapInfo_descriptor_ = file->message_type(3);
  static const int TAdventureTowerMapInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerMapInfo, layerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerMapInfo, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerMapInfo, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerMapInfo, basemapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerMapInfo, buffboxarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerMapInfo, tavernarr_),
  };
  TAdventureTowerMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerMapInfo_descriptor_,
      TAdventureTowerMapInfo::default_instance_,
      TAdventureTowerMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerMapInfo));
  TAdventureTowerTavernInfo_descriptor_ = file->message_type(4);
  static const int TAdventureTowerTavernInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerTavernInfo, tavernpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerTavernInfo, tavernheroarr_),
  };
  TAdventureTowerTavernInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerTavernInfo_descriptor_,
      TAdventureTowerTavernInfo::default_instance_,
      TAdventureTowerTavernInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerTavernInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerTavernInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerTavernInfo));
  TAdventureTowerEnterMapReq_descriptor_ = file->message_type(5);
  static const int TAdventureTowerEnterMapReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerEnterMapReq, mapid_),
  };
  TAdventureTowerEnterMapReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerEnterMapReq_descriptor_,
      TAdventureTowerEnterMapReq::default_instance_,
      TAdventureTowerEnterMapReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerEnterMapReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerEnterMapReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerEnterMapReq));
  TAdventureTowerHeroBattleInfo_descriptor_ = file->message_type(6);
  static const int TAdventureTowerHeroBattleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerHeroBattleInfo, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerHeroBattleInfo, maxhp_),
  };
  TAdventureTowerHeroBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerHeroBattleInfo_descriptor_,
      TAdventureTowerHeroBattleInfo::default_instance_,
      TAdventureTowerHeroBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerHeroBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerHeroBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerHeroBattleInfo));
  TAdventureTowerHeroStatus_descriptor_ = file->message_type(7);
  static const int TAdventureTowerHeroStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerHeroStatus, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerHeroStatus, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerHeroStatus, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerHeroStatus, currage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerHeroStatus, maxrage_),
  };
  TAdventureTowerHeroStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerHeroStatus_descriptor_,
      TAdventureTowerHeroStatus::default_instance_,
      TAdventureTowerHeroStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerHeroStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerHeroStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerHeroStatus));
  TAdventureTowerEnterMapRsp_descriptor_ = file->message_type(8);
  static const int TAdventureTowerEnterMapRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerEnterMapRsp, mapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerEnterMapRsp, buffidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerEnterMapRsp, herostatusarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerEnterMapRsp, squadheroarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerEnterMapRsp, temporaryheroarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerEnterMapRsp, monsterinfoarr_),
  };
  TAdventureTowerEnterMapRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerEnterMapRsp_descriptor_,
      TAdventureTowerEnterMapRsp::default_instance_,
      TAdventureTowerEnterMapRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerEnterMapRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerEnterMapRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerEnterMapRsp));
  TAdventureTowerQuitMapReq_descriptor_ = file->message_type(9);
  static const int TAdventureTowerQuitMapReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerQuitMapReq, mapid_),
  };
  TAdventureTowerQuitMapReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerQuitMapReq_descriptor_,
      TAdventureTowerQuitMapReq::default_instance_,
      TAdventureTowerQuitMapReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerQuitMapReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerQuitMapReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerQuitMapReq));
  TAdventureTowerSetSquadReq_descriptor_ = file->message_type(10);
  static const int TAdventureTowerSetSquadReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerSetSquadReq, squadheroarr_),
  };
  TAdventureTowerSetSquadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerSetSquadReq_descriptor_,
      TAdventureTowerSetSquadReq::default_instance_,
      TAdventureTowerSetSquadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerSetSquadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerSetSquadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerSetSquadReq));
  TAdventureTowerTriggerEventReq_descriptor_ = file->message_type(11);
  static const int TAdventureTowerTriggerEventReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerTriggerEventReq, layerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerTriggerEventReq, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerTriggerEventReq, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerTriggerEventReq, chosebuffindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerTriggerEventReq, choseheroindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerTriggerEventReq, eventonhidarr_),
  };
  TAdventureTowerTriggerEventReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerTriggerEventReq_descriptor_,
      TAdventureTowerTriggerEventReq::default_instance_,
      TAdventureTowerTriggerEventReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerTriggerEventReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerTriggerEventReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerTriggerEventReq));
  TAdventureTowerEventRet_descriptor_ = file->message_type(12);
  static const int TAdventureTowerEventRet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerEventRet, battleinfoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerEventRet, interactidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerEventRet, herostatusarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerEventRet, monsterinfo_),
  };
  TAdventureTowerEventRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerEventRet_descriptor_,
      TAdventureTowerEventRet::default_instance_,
      TAdventureTowerEventRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerEventRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerEventRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerEventRet));
  TAdventureTowerTriggerEventRsp_descriptor_ = file->message_type(13);
  static const int TAdventureTowerTriggerEventRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerTriggerEventRsp, eventstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerTriggerEventRsp, eventret_),
  };
  TAdventureTowerTriggerEventRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerTriggerEventRsp_descriptor_,
      TAdventureTowerTriggerEventRsp::default_instance_,
      TAdventureTowerTriggerEventRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerTriggerEventRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerTriggerEventRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerTriggerEventRsp));
  TAdventureTowerStartBattleReq_descriptor_ = file->message_type(14);
  static const int TAdventureTowerStartBattleReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerStartBattleReq, battlepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerStartBattleReq, squadheroarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerStartBattleReq, battlecheckparam_),
  };
  TAdventureTowerStartBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerStartBattleReq_descriptor_,
      TAdventureTowerStartBattleReq::default_instance_,
      TAdventureTowerStartBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerStartBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerStartBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerStartBattleReq));
  TAdventureTowerStartBattleRsp_descriptor_ = file->message_type(15);
  static const int TAdventureTowerStartBattleRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerStartBattleRsp, battleargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerStartBattleRsp, monsterinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerStartBattleRsp, herobattleinfoarr_),
  };
  TAdventureTowerStartBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerStartBattleRsp_descriptor_,
      TAdventureTowerStartBattleRsp::default_instance_,
      TAdventureTowerStartBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerStartBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerStartBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerStartBattleRsp));
  TAdventureTowerReportBattleReq_descriptor_ = file->message_type(16);
  static const int TAdventureTowerReportBattleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerReportBattleReq, battlepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerReportBattleReq, battleresult_),
  };
  TAdventureTowerReportBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerReportBattleReq_descriptor_,
      TAdventureTowerReportBattleReq::default_instance_,
      TAdventureTowerReportBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerReportBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerReportBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerReportBattleReq));
  TAdventureTowerReportBattleRsp_descriptor_ = file->message_type(17);
  static const int TAdventureTowerReportBattleRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerReportBattleRsp, buffbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerReportBattleRsp, monsterinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerReportBattleRsp, herostatusarr_),
  };
  TAdventureTowerReportBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerReportBattleRsp_descriptor_,
      TAdventureTowerReportBattleRsp::default_instance_,
      TAdventureTowerReportBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerReportBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerReportBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerReportBattleRsp));
  TAdventureTowerReportPosReq_descriptor_ = file->message_type(18);
  static const int TAdventureTowerReportPosReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerReportPosReq, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerReportPosReq, posy_),
  };
  TAdventureTowerReportPosReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerReportPosReq_descriptor_,
      TAdventureTowerReportPosReq::default_instance_,
      TAdventureTowerReportPosReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerReportPosReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerReportPosReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerReportPosReq));
  TAdventureTowerPassBlocksReq_descriptor_ = file->message_type(19);
  static const int TAdventureTowerPassBlocksReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerPassBlocksReq, blockarr_),
  };
  TAdventureTowerPassBlocksReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerPassBlocksReq_descriptor_,
      TAdventureTowerPassBlocksReq::default_instance_,
      TAdventureTowerPassBlocksReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerPassBlocksReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerPassBlocksReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerPassBlocksReq));
  TAdventureTowerPos_descriptor_ = file->message_type(20);
  static const int TAdventureTowerPos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerPos, layerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerPos, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerPos, posy_),
  };
  TAdventureTowerPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTowerPos_descriptor_,
      TAdventureTowerPos::default_instance_,
      TAdventureTowerPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTowerPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTowerPos));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fAdventureTower_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerGetInfoRsp_descriptor_, &TAdventureTowerGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerSimpleMapInfo_descriptor_, &TAdventureTowerSimpleMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerBuffBox_descriptor_, &TAdventureTowerBuffBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerMapInfo_descriptor_, &TAdventureTowerMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerTavernInfo_descriptor_, &TAdventureTowerTavernInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerEnterMapReq_descriptor_, &TAdventureTowerEnterMapReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerHeroBattleInfo_descriptor_, &TAdventureTowerHeroBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerHeroStatus_descriptor_, &TAdventureTowerHeroStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerEnterMapRsp_descriptor_, &TAdventureTowerEnterMapRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerQuitMapReq_descriptor_, &TAdventureTowerQuitMapReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerSetSquadReq_descriptor_, &TAdventureTowerSetSquadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerTriggerEventReq_descriptor_, &TAdventureTowerTriggerEventReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerEventRet_descriptor_, &TAdventureTowerEventRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerTriggerEventRsp_descriptor_, &TAdventureTowerTriggerEventRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerStartBattleReq_descriptor_, &TAdventureTowerStartBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerStartBattleRsp_descriptor_, &TAdventureTowerStartBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerReportBattleReq_descriptor_, &TAdventureTowerReportBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerReportBattleRsp_descriptor_, &TAdventureTowerReportBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerReportPosReq_descriptor_, &TAdventureTowerReportPosReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerPassBlocksReq_descriptor_, &TAdventureTowerPassBlocksReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTowerPos_descriptor_, &TAdventureTowerPos::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fAdventureTower_2eproto() {
  delete TAdventureTowerGetInfoRsp::default_instance_;
  delete TAdventureTowerGetInfoRsp_reflection_;
  delete TAdventureTowerSimpleMapInfo::default_instance_;
  delete TAdventureTowerSimpleMapInfo_reflection_;
  delete TAdventureTowerBuffBox::default_instance_;
  delete TAdventureTowerBuffBox_reflection_;
  delete TAdventureTowerMapInfo::default_instance_;
  delete TAdventureTowerMapInfo_reflection_;
  delete TAdventureTowerTavernInfo::default_instance_;
  delete TAdventureTowerTavernInfo_reflection_;
  delete TAdventureTowerEnterMapReq::default_instance_;
  delete TAdventureTowerEnterMapReq_reflection_;
  delete TAdventureTowerHeroBattleInfo::default_instance_;
  delete TAdventureTowerHeroBattleInfo_reflection_;
  delete TAdventureTowerHeroStatus::default_instance_;
  delete TAdventureTowerHeroStatus_reflection_;
  delete TAdventureTowerEnterMapRsp::default_instance_;
  delete TAdventureTowerEnterMapRsp_reflection_;
  delete TAdventureTowerQuitMapReq::default_instance_;
  delete TAdventureTowerQuitMapReq_reflection_;
  delete TAdventureTowerSetSquadReq::default_instance_;
  delete TAdventureTowerSetSquadReq_reflection_;
  delete TAdventureTowerTriggerEventReq::default_instance_;
  delete TAdventureTowerTriggerEventReq_reflection_;
  delete TAdventureTowerEventRet::default_instance_;
  delete TAdventureTowerEventRet_reflection_;
  delete TAdventureTowerTriggerEventRsp::default_instance_;
  delete TAdventureTowerTriggerEventRsp_reflection_;
  delete TAdventureTowerStartBattleReq::default_instance_;
  delete TAdventureTowerStartBattleReq_reflection_;
  delete TAdventureTowerStartBattleRsp::default_instance_;
  delete TAdventureTowerStartBattleRsp_reflection_;
  delete TAdventureTowerReportBattleReq::default_instance_;
  delete TAdventureTowerReportBattleReq_reflection_;
  delete TAdventureTowerReportBattleRsp::default_instance_;
  delete TAdventureTowerReportBattleRsp_reflection_;
  delete TAdventureTowerReportPosReq::default_instance_;
  delete TAdventureTowerReportPosReq_reflection_;
  delete TAdventureTowerPassBlocksReq::default_instance_;
  delete TAdventureTowerPassBlocksReq_reflection_;
  delete TAdventureTowerPos::default_instance_;
  delete TAdventureTowerPos_reflection_;
}

void protobuf_AddDesc_net_2fAdventureTower_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fAdventureMap_2eproto();
  ::pb::protobuf_AddDesc_net_2fAdventureBase_2eproto();
  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030net/AdventureTower.proto\022\002pb\032\031module/A"
    "dventureMap.proto\032\027net/AdventureBase.pro"
    "to\032\020net/Battle.proto\"{\n\031TAdventureTowerG"
    "etInfoRsp\0224\n\nMaxMapInfo\030\001 \001(\0132 .pb.TAdve"
    "ntureTowerSimpleMapInfo\022\020\n\010CurMapId\030\002 \001("
    "\r\022\026\n\016MaxPassedMapId\030\003 \001(\r\"D\n\034TAdventureT"
    "owerSimpleMapInfo\022\r\n\005MapId\030\001 \001(\r\022\025\n\rRece"
    "ivedBoxId\030\002 \003(\r\"W\n\026TAdventureTowerBuffBo"
    "x\022*\n\nBuffBoxPos\030\001 \001(\0132\026.pb.TAdventureTow"
    "erPos\022\021\n\tBuffIdArr\030\002 \003(\r\"\321\001\n\026TAdventureT"
    "owerMapInfo\022\022\n\nLayerIndex\030\001 \001(\r\022\014\n\004PosX\030"
    "\002 \001(\005\022\014\n\004PosY\030\003 \001(\005\022%\n\013BaseMapInfo\030\004 \001(\013"
    "2\020.pb.AdventureMap\022.\n\nBuffBoxArr\030\005 \003(\0132\032"
    ".pb.TAdventureTowerBuffBox\0220\n\tTavernArr\030"
    "\006 \003(\0132\035.pb.TAdventureTowerTavernInfo\"]\n\031"
    "TAdventureTowerTavernInfo\022)\n\tTavernPos\030\001"
    " \001(\0132\026.pb.TAdventureTowerPos\022\025\n\rTavernHe"
    "roArr\030\002 \003(\r\"+\n\032TAdventureTowerEnterMapRe"
    "q\022\r\n\005MapId\030\001 \001(\r\"K\n\035TAdventureTowerHeroB"
    "attleInfo\022\033\n\004Unit\030\001 \001(\0132\r.pb.TUnitInfo\022\r"
    "\n\005MaxHp\030\002 \001(\004\"k\n\031TAdventureTowerHeroStat"
    "us\022\016\n\006HeroId\030\001 \001(\r\022\r\n\005CurHp\030\002 \001(\004\022\r\n\005Max"
    "Hp\030\003 \001(\004\022\017\n\007CurRage\030\004 \001(\004\022\017\n\007MaxRage\030\005 \001"
    "(\004\"\365\001\n\032TAdventureTowerEnterMapRsp\022+\n\007Map"
    "Info\030\001 \001(\0132\032.pb.TAdventureTowerMapInfo\022\021"
    "\n\tBuffIdArr\030\002 \003(\r\0224\n\rHeroStatusArr\030\003 \003(\013"
    "2\035.pb.TAdventureTowerHeroStatus\022\024\n\014Squad"
    "HeroArr\030\004 \003(\r\022\030\n\020TemporaryHeroArr\030\005 \003(\r\022"
    "1\n\016MonsterInfoArr\030\006 \003(\0132\031.pb.TAdventureM"
    "onsterInfo\"*\n\031TAdventureTowerQuitMapReq\022"
    "\r\n\005MapId\030\001 \001(\r\"2\n\032TAdventureTowerSetSqua"
    "dReq\022\024\n\014SquadHeroArr\030\001 \003(\r\"\227\001\n\036TAdventur"
    "eTowerTriggerEventReq\022\022\n\nLayerIndex\030\001 \001("
    "\r\022\014\n\004PosX\030\002 \001(\005\022\014\n\004PosY\030\003 \001(\005\022\026\n\016ChoseBu"
    "ffIndex\030\004 \001(\r\022\026\n\016ChoseHeroIndex\030\005 \001(\r\022\025\n"
    "\rEventOnHidArr\030\006 \003(\r\"\262\001\n\027TAdventureTower"
    "EventRet\022\024\n\014BattleinfoId\030\001 \001(\r\022\025\n\rIntera"
    "ctIdArr\030\002 \003(\r\0224\n\rHeroStatusArr\030\003 \003(\0132\035.p"
    "b.TAdventureTowerHeroStatus\0224\n\013MonsterIn"
    "fo\030\004 \001(\0132\037.pb.TAdventureBattleMonsterInf"
    "o\"v\n\036TAdventureTowerTriggerEventRsp\022%\n\013E"
    "ventStatus\030\001 \001(\0162\020.pb.EEventStatus\022-\n\010Ev"
    "entRet\030\002 \001(\0132\033.pb.TAdventureTowerEventRe"
    "t\"\221\001\n\035TAdventureTowerStartBattleReq\022)\n\tB"
    "attlePos\030\001 \001(\0132\026.pb.TAdventureTowerPos\022\024"
    "\n\014SquadHeroArr\030\002 \003(\r\022/\n\020BattleCheckParam"
    "\030\003 \001(\0132\025.pb.TBattleCheckParam\"\270\001\n\035TAdven"
    "tureTowerStartBattleRsp\022#\n\nBattleArgs\030\001 "
    "\001(\0132\017.pb.TBattleArgs\0224\n\013MonsterInfo\030\002 \001("
    "\0132\037.pb.TAdventureBattleMonsterInfo\022<\n\021He"
    "roBattleInfoArr\030\003 \003(\0132!.pb.TAdventureTow"
    "erHeroBattleInfo\"t\n\036TAdventureTowerRepor"
    "tBattleReq\022)\n\tBattlePos\030\001 \001(\0132\026.pb.TAdve"
    "ntureTowerPos\022\'\n\014BattleResult\030\002 \001(\0132\021.pb"
    ".TBattleResult\"\266\001\n\036TAdventureTowerReport"
    "BattleRsp\022+\n\007BuffBox\030\001 \001(\0132\032.pb.TAdventu"
    "reTowerBuffBox\0221\n\016MonsterInfoArr\030\002 \001(\0132\031"
    ".pb.TAdventureMonsterInfo\0224\n\rHeroStatusA"
    "rr\030\003 \003(\0132\035.pb.TAdventureTowerHeroStatus\""
    "9\n\033TAdventureTowerReportPosReq\022\014\n\004PosX\030\001"
    " \001(\005\022\014\n\004PosY\030\002 \001(\005\"H\n\034TAdventureTowerPas"
    "sBlocksReq\022(\n\010BlockArr\030\001 \003(\0132\026.pb.TAdven"
    "tureTowerPos\"D\n\022TAdventureTowerPos\022\022\n\nLa"
    "yerIndex\030\001 \001(\r\022\014\n\004PosX\030\002 \001(\005\022\014\n\004PosY\030\003 \001"
    "(\005", 2562);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/AdventureTower.proto", &protobuf_RegisterTypes);
  TAdventureTowerGetInfoRsp::default_instance_ = new TAdventureTowerGetInfoRsp();
  TAdventureTowerSimpleMapInfo::default_instance_ = new TAdventureTowerSimpleMapInfo();
  TAdventureTowerBuffBox::default_instance_ = new TAdventureTowerBuffBox();
  TAdventureTowerMapInfo::default_instance_ = new TAdventureTowerMapInfo();
  TAdventureTowerTavernInfo::default_instance_ = new TAdventureTowerTavernInfo();
  TAdventureTowerEnterMapReq::default_instance_ = new TAdventureTowerEnterMapReq();
  TAdventureTowerHeroBattleInfo::default_instance_ = new TAdventureTowerHeroBattleInfo();
  TAdventureTowerHeroStatus::default_instance_ = new TAdventureTowerHeroStatus();
  TAdventureTowerEnterMapRsp::default_instance_ = new TAdventureTowerEnterMapRsp();
  TAdventureTowerQuitMapReq::default_instance_ = new TAdventureTowerQuitMapReq();
  TAdventureTowerSetSquadReq::default_instance_ = new TAdventureTowerSetSquadReq();
  TAdventureTowerTriggerEventReq::default_instance_ = new TAdventureTowerTriggerEventReq();
  TAdventureTowerEventRet::default_instance_ = new TAdventureTowerEventRet();
  TAdventureTowerTriggerEventRsp::default_instance_ = new TAdventureTowerTriggerEventRsp();
  TAdventureTowerStartBattleReq::default_instance_ = new TAdventureTowerStartBattleReq();
  TAdventureTowerStartBattleRsp::default_instance_ = new TAdventureTowerStartBattleRsp();
  TAdventureTowerReportBattleReq::default_instance_ = new TAdventureTowerReportBattleReq();
  TAdventureTowerReportBattleRsp::default_instance_ = new TAdventureTowerReportBattleRsp();
  TAdventureTowerReportPosReq::default_instance_ = new TAdventureTowerReportPosReq();
  TAdventureTowerPassBlocksReq::default_instance_ = new TAdventureTowerPassBlocksReq();
  TAdventureTowerPos::default_instance_ = new TAdventureTowerPos();
  TAdventureTowerGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TAdventureTowerSimpleMapInfo::default_instance_->InitAsDefaultInstance();
  TAdventureTowerBuffBox::default_instance_->InitAsDefaultInstance();
  TAdventureTowerMapInfo::default_instance_->InitAsDefaultInstance();
  TAdventureTowerTavernInfo::default_instance_->InitAsDefaultInstance();
  TAdventureTowerEnterMapReq::default_instance_->InitAsDefaultInstance();
  TAdventureTowerHeroBattleInfo::default_instance_->InitAsDefaultInstance();
  TAdventureTowerHeroStatus::default_instance_->InitAsDefaultInstance();
  TAdventureTowerEnterMapRsp::default_instance_->InitAsDefaultInstance();
  TAdventureTowerQuitMapReq::default_instance_->InitAsDefaultInstance();
  TAdventureTowerSetSquadReq::default_instance_->InitAsDefaultInstance();
  TAdventureTowerTriggerEventReq::default_instance_->InitAsDefaultInstance();
  TAdventureTowerEventRet::default_instance_->InitAsDefaultInstance();
  TAdventureTowerTriggerEventRsp::default_instance_->InitAsDefaultInstance();
  TAdventureTowerStartBattleReq::default_instance_->InitAsDefaultInstance();
  TAdventureTowerStartBattleRsp::default_instance_->InitAsDefaultInstance();
  TAdventureTowerReportBattleReq::default_instance_->InitAsDefaultInstance();
  TAdventureTowerReportBattleRsp::default_instance_->InitAsDefaultInstance();
  TAdventureTowerReportPosReq::default_instance_->InitAsDefaultInstance();
  TAdventureTowerPassBlocksReq::default_instance_->InitAsDefaultInstance();
  TAdventureTowerPos::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fAdventureTower_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fAdventureTower_2eproto {
  StaticDescriptorInitializer_net_2fAdventureTower_2eproto() {
    protobuf_AddDesc_net_2fAdventureTower_2eproto();
  }
} static_descriptor_initializer_net_2fAdventureTower_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerGetInfoRsp::kMaxMapInfoFieldNumber;
const int TAdventureTowerGetInfoRsp::kCurMapIdFieldNumber;
const int TAdventureTowerGetInfoRsp::kMaxPassedMapIdFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerGetInfoRsp::TAdventureTowerGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerGetInfoRsp)
}

void TAdventureTowerGetInfoRsp::InitAsDefaultInstance() {
  maxmapinfo_ = const_cast< ::pb::TAdventureTowerSimpleMapInfo*>(&::pb::TAdventureTowerSimpleMapInfo::default_instance());
}

TAdventureTowerGetInfoRsp::TAdventureTowerGetInfoRsp(const TAdventureTowerGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerGetInfoRsp)
}

void TAdventureTowerGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  maxmapinfo_ = NULL;
  curmapid_ = 0u;
  maxpassedmapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerGetInfoRsp::~TAdventureTowerGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerGetInfoRsp)
  SharedDtor();
}

void TAdventureTowerGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete maxmapinfo_;
  }
}

void TAdventureTowerGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerGetInfoRsp_descriptor_;
}

const TAdventureTowerGetInfoRsp& TAdventureTowerGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerGetInfoRsp* TAdventureTowerGetInfoRsp::default_instance_ = NULL;

TAdventureTowerGetInfoRsp* TAdventureTowerGetInfoRsp::New() const {
  return new TAdventureTowerGetInfoRsp;
}

void TAdventureTowerGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureTowerGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(curmapid_, maxpassedmapid_);
    if (has_maxmapinfo()) {
      if (maxmapinfo_ != NULL) maxmapinfo_->::pb::TAdventureTowerSimpleMapInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAdventureTowerSimpleMapInfo MaxMapInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maxmapinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CurMapId;
        break;
      }

      // optional uint32 CurMapId = 2;
      case 2: {
        if (tag == 16) {
         parse_CurMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curmapid_)));
          set_has_curmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MaxPassedMapId;
        break;
      }

      // optional uint32 MaxPassedMapId = 3;
      case 3: {
        if (tag == 24) {
         parse_MaxPassedMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpassedmapid_)));
          set_has_maxpassedmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerGetInfoRsp)
  return false;
#undef DO_
}

void TAdventureTowerGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerGetInfoRsp)
  // optional .pb.TAdventureTowerSimpleMapInfo MaxMapInfo = 1;
  if (has_maxmapinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maxmapinfo(), output);
  }

  // optional uint32 CurMapId = 2;
  if (has_curmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curmapid(), output);
  }

  // optional uint32 MaxPassedMapId = 3;
  if (has_maxpassedmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxpassedmapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerGetInfoRsp)
}

::google::protobuf::uint8* TAdventureTowerGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerGetInfoRsp)
  // optional .pb.TAdventureTowerSimpleMapInfo MaxMapInfo = 1;
  if (has_maxmapinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->maxmapinfo(), target);
  }

  // optional uint32 CurMapId = 2;
  if (has_curmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curmapid(), target);
  }

  // optional uint32 MaxPassedMapId = 3;
  if (has_maxpassedmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxpassedmapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerGetInfoRsp)
  return target;
}

int TAdventureTowerGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAdventureTowerSimpleMapInfo MaxMapInfo = 1;
    if (has_maxmapinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maxmapinfo());
    }

    // optional uint32 CurMapId = 2;
    if (has_curmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curmapid());
    }

    // optional uint32 MaxPassedMapId = 3;
    if (has_maxpassedmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpassedmapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerGetInfoRsp::MergeFrom(const TAdventureTowerGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxmapinfo()) {
      mutable_maxmapinfo()->::pb::TAdventureTowerSimpleMapInfo::MergeFrom(from.maxmapinfo());
    }
    if (from.has_curmapid()) {
      set_curmapid(from.curmapid());
    }
    if (from.has_maxpassedmapid()) {
      set_maxpassedmapid(from.maxpassedmapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerGetInfoRsp::CopyFrom(const TAdventureTowerGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerGetInfoRsp::IsInitialized() const {

  return true;
}

void TAdventureTowerGetInfoRsp::Swap(TAdventureTowerGetInfoRsp* other) {
  if (other != this) {
    std::swap(maxmapinfo_, other->maxmapinfo_);
    std::swap(curmapid_, other->curmapid_);
    std::swap(maxpassedmapid_, other->maxpassedmapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerGetInfoRsp_descriptor_;
  metadata.reflection = TAdventureTowerGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerSimpleMapInfo::kMapIdFieldNumber;
const int TAdventureTowerSimpleMapInfo::kReceivedBoxIdFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerSimpleMapInfo::TAdventureTowerSimpleMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerSimpleMapInfo)
}

void TAdventureTowerSimpleMapInfo::InitAsDefaultInstance() {
}

TAdventureTowerSimpleMapInfo::TAdventureTowerSimpleMapInfo(const TAdventureTowerSimpleMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerSimpleMapInfo)
}

void TAdventureTowerSimpleMapInfo::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerSimpleMapInfo::~TAdventureTowerSimpleMapInfo() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerSimpleMapInfo)
  SharedDtor();
}

void TAdventureTowerSimpleMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureTowerSimpleMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerSimpleMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerSimpleMapInfo_descriptor_;
}

const TAdventureTowerSimpleMapInfo& TAdventureTowerSimpleMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerSimpleMapInfo* TAdventureTowerSimpleMapInfo::default_instance_ = NULL;

TAdventureTowerSimpleMapInfo* TAdventureTowerSimpleMapInfo::New() const {
  return new TAdventureTowerSimpleMapInfo;
}

void TAdventureTowerSimpleMapInfo::Clear() {
  mapid_ = 0u;
  receivedboxid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerSimpleMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerSimpleMapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MapId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ReceivedBoxId;
        break;
      }

      // repeated uint32 ReceivedBoxId = 2;
      case 2: {
        if (tag == 16) {
         parse_ReceivedBoxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_receivedboxid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_receivedboxid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ReceivedBoxId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerSimpleMapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerSimpleMapInfo)
  return false;
#undef DO_
}

void TAdventureTowerSimpleMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerSimpleMapInfo)
  // optional uint32 MapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // repeated uint32 ReceivedBoxId = 2;
  for (int i = 0; i < this->receivedboxid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->receivedboxid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerSimpleMapInfo)
}

::google::protobuf::uint8* TAdventureTowerSimpleMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerSimpleMapInfo)
  // optional uint32 MapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // repeated uint32 ReceivedBoxId = 2;
  for (int i = 0; i < this->receivedboxid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->receivedboxid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerSimpleMapInfo)
  return target;
}

int TAdventureTowerSimpleMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  // repeated uint32 ReceivedBoxId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->receivedboxid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->receivedboxid(i));
    }
    total_size += 1 * this->receivedboxid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerSimpleMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerSimpleMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerSimpleMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerSimpleMapInfo::MergeFrom(const TAdventureTowerSimpleMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  receivedboxid_.MergeFrom(from.receivedboxid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerSimpleMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerSimpleMapInfo::CopyFrom(const TAdventureTowerSimpleMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerSimpleMapInfo::IsInitialized() const {

  return true;
}

void TAdventureTowerSimpleMapInfo::Swap(TAdventureTowerSimpleMapInfo* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    receivedboxid_.Swap(&other->receivedboxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerSimpleMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerSimpleMapInfo_descriptor_;
  metadata.reflection = TAdventureTowerSimpleMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerBuffBox::kBuffBoxPosFieldNumber;
const int TAdventureTowerBuffBox::kBuffIdArrFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerBuffBox::TAdventureTowerBuffBox()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerBuffBox)
}

void TAdventureTowerBuffBox::InitAsDefaultInstance() {
  buffboxpos_ = const_cast< ::pb::TAdventureTowerPos*>(&::pb::TAdventureTowerPos::default_instance());
}

TAdventureTowerBuffBox::TAdventureTowerBuffBox(const TAdventureTowerBuffBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerBuffBox)
}

void TAdventureTowerBuffBox::SharedCtor() {
  _cached_size_ = 0;
  buffboxpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerBuffBox::~TAdventureTowerBuffBox() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerBuffBox)
  SharedDtor();
}

void TAdventureTowerBuffBox::SharedDtor() {
  if (this != default_instance_) {
    delete buffboxpos_;
  }
}

void TAdventureTowerBuffBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerBuffBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerBuffBox_descriptor_;
}

const TAdventureTowerBuffBox& TAdventureTowerBuffBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerBuffBox* TAdventureTowerBuffBox::default_instance_ = NULL;

TAdventureTowerBuffBox* TAdventureTowerBuffBox::New() const {
  return new TAdventureTowerBuffBox;
}

void TAdventureTowerBuffBox::Clear() {
  if (has_buffboxpos()) {
    if (buffboxpos_ != NULL) buffboxpos_->::pb::TAdventureTowerPos::Clear();
  }
  buffidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerBuffBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerBuffBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAdventureTowerPos BuffBoxPos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffboxpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuffIdArr;
        break;
      }

      // repeated uint32 BuffIdArr = 2;
      case 2: {
        if (tag == 16) {
         parse_BuffIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_buffidarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buffidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuffIdArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerBuffBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerBuffBox)
  return false;
#undef DO_
}

void TAdventureTowerBuffBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerBuffBox)
  // optional .pb.TAdventureTowerPos BuffBoxPos = 1;
  if (has_buffboxpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buffboxpos(), output);
  }

  // repeated uint32 BuffIdArr = 2;
  for (int i = 0; i < this->buffidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->buffidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerBuffBox)
}

::google::protobuf::uint8* TAdventureTowerBuffBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerBuffBox)
  // optional .pb.TAdventureTowerPos BuffBoxPos = 1;
  if (has_buffboxpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buffboxpos(), target);
  }

  // repeated uint32 BuffIdArr = 2;
  for (int i = 0; i < this->buffidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->buffidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerBuffBox)
  return target;
}

int TAdventureTowerBuffBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAdventureTowerPos BuffBoxPos = 1;
    if (has_buffboxpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffboxpos());
    }

  }
  // repeated uint32 BuffIdArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buffidarr(i));
    }
    total_size += 1 * this->buffidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerBuffBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerBuffBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerBuffBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerBuffBox::MergeFrom(const TAdventureTowerBuffBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffidarr_.MergeFrom(from.buffidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffboxpos()) {
      mutable_buffboxpos()->::pb::TAdventureTowerPos::MergeFrom(from.buffboxpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerBuffBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerBuffBox::CopyFrom(const TAdventureTowerBuffBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerBuffBox::IsInitialized() const {

  return true;
}

void TAdventureTowerBuffBox::Swap(TAdventureTowerBuffBox* other) {
  if (other != this) {
    std::swap(buffboxpos_, other->buffboxpos_);
    buffidarr_.Swap(&other->buffidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerBuffBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerBuffBox_descriptor_;
  metadata.reflection = TAdventureTowerBuffBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerMapInfo::kLayerIndexFieldNumber;
const int TAdventureTowerMapInfo::kPosXFieldNumber;
const int TAdventureTowerMapInfo::kPosYFieldNumber;
const int TAdventureTowerMapInfo::kBaseMapInfoFieldNumber;
const int TAdventureTowerMapInfo::kBuffBoxArrFieldNumber;
const int TAdventureTowerMapInfo::kTavernArrFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerMapInfo::TAdventureTowerMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerMapInfo)
}

void TAdventureTowerMapInfo::InitAsDefaultInstance() {
  basemapinfo_ = const_cast< ::pb::AdventureMap*>(&::pb::AdventureMap::default_instance());
}

TAdventureTowerMapInfo::TAdventureTowerMapInfo(const TAdventureTowerMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerMapInfo)
}

void TAdventureTowerMapInfo::SharedCtor() {
  _cached_size_ = 0;
  layerindex_ = 0u;
  posx_ = 0;
  posy_ = 0;
  basemapinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerMapInfo::~TAdventureTowerMapInfo() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerMapInfo)
  SharedDtor();
}

void TAdventureTowerMapInfo::SharedDtor() {
  if (this != default_instance_) {
    delete basemapinfo_;
  }
}

void TAdventureTowerMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerMapInfo_descriptor_;
}

const TAdventureTowerMapInfo& TAdventureTowerMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerMapInfo* TAdventureTowerMapInfo::default_instance_ = NULL;

TAdventureTowerMapInfo* TAdventureTowerMapInfo::New() const {
  return new TAdventureTowerMapInfo;
}

void TAdventureTowerMapInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureTowerMapInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(layerindex_, posx_);
    posy_ = 0;
    if (has_basemapinfo()) {
      if (basemapinfo_ != NULL) basemapinfo_->::pb::AdventureMap::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  buffboxarr_.Clear();
  tavernarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerMapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerindex_)));
          set_has_layerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PosX;
        break;
      }

      // optional int32 PosX = 2;
      case 2: {
        if (tag == 16) {
         parse_PosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PosY;
        break;
      }

      // optional int32 PosY = 3;
      case 3: {
        if (tag == 24) {
         parse_PosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BaseMapInfo;
        break;
      }

      // optional .pb.AdventureMap BaseMapInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_BaseMapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basemapinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_BuffBoxArr;
        break;
      }

      // repeated .pb.TAdventureTowerBuffBox BuffBoxArr = 5;
      case 5: {
        if (tag == 42) {
         parse_BuffBoxArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffboxarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_BuffBoxArr;
        if (input->ExpectTag(50)) goto parse_TavernArr;
        break;
      }

      // repeated .pb.TAdventureTowerTavernInfo TavernArr = 6;
      case 6: {
        if (tag == 50) {
         parse_TavernArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tavernarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_TavernArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerMapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerMapInfo)
  return false;
#undef DO_
}

void TAdventureTowerMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerMapInfo)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerindex(), output);
  }

  // optional int32 PosX = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posx(), output);
  }

  // optional int32 PosY = 3;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posy(), output);
  }

  // optional .pb.AdventureMap BaseMapInfo = 4;
  if (has_basemapinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->basemapinfo(), output);
  }

  // repeated .pb.TAdventureTowerBuffBox BuffBoxArr = 5;
  for (int i = 0; i < this->buffboxarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->buffboxarr(i), output);
  }

  // repeated .pb.TAdventureTowerTavernInfo TavernArr = 6;
  for (int i = 0; i < this->tavernarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tavernarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerMapInfo)
}

::google::protobuf::uint8* TAdventureTowerMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerMapInfo)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerindex(), target);
  }

  // optional int32 PosX = 2;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posx(), target);
  }

  // optional int32 PosY = 3;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posy(), target);
  }

  // optional .pb.AdventureMap BaseMapInfo = 4;
  if (has_basemapinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->basemapinfo(), target);
  }

  // repeated .pb.TAdventureTowerBuffBox BuffBoxArr = 5;
  for (int i = 0; i < this->buffboxarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->buffboxarr(i), target);
  }

  // repeated .pb.TAdventureTowerTavernInfo TavernArr = 6;
  for (int i = 0; i < this->tavernarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tavernarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerMapInfo)
  return target;
}

int TAdventureTowerMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerIndex = 1;
    if (has_layerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerindex());
    }

    // optional int32 PosX = 2;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 PosY = 3;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional .pb.AdventureMap BaseMapInfo = 4;
    if (has_basemapinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basemapinfo());
    }

  }
  // repeated .pb.TAdventureTowerBuffBox BuffBoxArr = 5;
  total_size += 1 * this->buffboxarr_size();
  for (int i = 0; i < this->buffboxarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffboxarr(i));
  }

  // repeated .pb.TAdventureTowerTavernInfo TavernArr = 6;
  total_size += 1 * this->tavernarr_size();
  for (int i = 0; i < this->tavernarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tavernarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerMapInfo::MergeFrom(const TAdventureTowerMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffboxarr_.MergeFrom(from.buffboxarr_);
  tavernarr_.MergeFrom(from.tavernarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerindex()) {
      set_layerindex(from.layerindex());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_basemapinfo()) {
      mutable_basemapinfo()->::pb::AdventureMap::MergeFrom(from.basemapinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerMapInfo::CopyFrom(const TAdventureTowerMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerMapInfo::IsInitialized() const {

  if (has_basemapinfo()) {
    if (!this->basemapinfo().IsInitialized()) return false;
  }
  return true;
}

void TAdventureTowerMapInfo::Swap(TAdventureTowerMapInfo* other) {
  if (other != this) {
    std::swap(layerindex_, other->layerindex_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(basemapinfo_, other->basemapinfo_);
    buffboxarr_.Swap(&other->buffboxarr_);
    tavernarr_.Swap(&other->tavernarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerMapInfo_descriptor_;
  metadata.reflection = TAdventureTowerMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerTavernInfo::kTavernPosFieldNumber;
const int TAdventureTowerTavernInfo::kTavernHeroArrFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerTavernInfo::TAdventureTowerTavernInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerTavernInfo)
}

void TAdventureTowerTavernInfo::InitAsDefaultInstance() {
  tavernpos_ = const_cast< ::pb::TAdventureTowerPos*>(&::pb::TAdventureTowerPos::default_instance());
}

TAdventureTowerTavernInfo::TAdventureTowerTavernInfo(const TAdventureTowerTavernInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerTavernInfo)
}

void TAdventureTowerTavernInfo::SharedCtor() {
  _cached_size_ = 0;
  tavernpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerTavernInfo::~TAdventureTowerTavernInfo() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerTavernInfo)
  SharedDtor();
}

void TAdventureTowerTavernInfo::SharedDtor() {
  if (this != default_instance_) {
    delete tavernpos_;
  }
}

void TAdventureTowerTavernInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerTavernInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerTavernInfo_descriptor_;
}

const TAdventureTowerTavernInfo& TAdventureTowerTavernInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerTavernInfo* TAdventureTowerTavernInfo::default_instance_ = NULL;

TAdventureTowerTavernInfo* TAdventureTowerTavernInfo::New() const {
  return new TAdventureTowerTavernInfo;
}

void TAdventureTowerTavernInfo::Clear() {
  if (has_tavernpos()) {
    if (tavernpos_ != NULL) tavernpos_->::pb::TAdventureTowerPos::Clear();
  }
  tavernheroarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerTavernInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerTavernInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAdventureTowerPos TavernPos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tavernpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TavernHeroArr;
        break;
      }

      // repeated uint32 TavernHeroArr = 2;
      case 2: {
        if (tag == 16) {
         parse_TavernHeroArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_tavernheroarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tavernheroarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TavernHeroArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerTavernInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerTavernInfo)
  return false;
#undef DO_
}

void TAdventureTowerTavernInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerTavernInfo)
  // optional .pb.TAdventureTowerPos TavernPos = 1;
  if (has_tavernpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tavernpos(), output);
  }

  // repeated uint32 TavernHeroArr = 2;
  for (int i = 0; i < this->tavernheroarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->tavernheroarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerTavernInfo)
}

::google::protobuf::uint8* TAdventureTowerTavernInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerTavernInfo)
  // optional .pb.TAdventureTowerPos TavernPos = 1;
  if (has_tavernpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tavernpos(), target);
  }

  // repeated uint32 TavernHeroArr = 2;
  for (int i = 0; i < this->tavernheroarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->tavernheroarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerTavernInfo)
  return target;
}

int TAdventureTowerTavernInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAdventureTowerPos TavernPos = 1;
    if (has_tavernpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tavernpos());
    }

  }
  // repeated uint32 TavernHeroArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->tavernheroarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tavernheroarr(i));
    }
    total_size += 1 * this->tavernheroarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerTavernInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerTavernInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerTavernInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerTavernInfo::MergeFrom(const TAdventureTowerTavernInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  tavernheroarr_.MergeFrom(from.tavernheroarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tavernpos()) {
      mutable_tavernpos()->::pb::TAdventureTowerPos::MergeFrom(from.tavernpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerTavernInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerTavernInfo::CopyFrom(const TAdventureTowerTavernInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerTavernInfo::IsInitialized() const {

  return true;
}

void TAdventureTowerTavernInfo::Swap(TAdventureTowerTavernInfo* other) {
  if (other != this) {
    std::swap(tavernpos_, other->tavernpos_);
    tavernheroarr_.Swap(&other->tavernheroarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerTavernInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerTavernInfo_descriptor_;
  metadata.reflection = TAdventureTowerTavernInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerEnterMapReq::kMapIdFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerEnterMapReq::TAdventureTowerEnterMapReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerEnterMapReq)
}

void TAdventureTowerEnterMapReq::InitAsDefaultInstance() {
}

TAdventureTowerEnterMapReq::TAdventureTowerEnterMapReq(const TAdventureTowerEnterMapReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerEnterMapReq)
}

void TAdventureTowerEnterMapReq::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerEnterMapReq::~TAdventureTowerEnterMapReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerEnterMapReq)
  SharedDtor();
}

void TAdventureTowerEnterMapReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureTowerEnterMapReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerEnterMapReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerEnterMapReq_descriptor_;
}

const TAdventureTowerEnterMapReq& TAdventureTowerEnterMapReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerEnterMapReq* TAdventureTowerEnterMapReq::default_instance_ = NULL;

TAdventureTowerEnterMapReq* TAdventureTowerEnterMapReq::New() const {
  return new TAdventureTowerEnterMapReq;
}

void TAdventureTowerEnterMapReq::Clear() {
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerEnterMapReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerEnterMapReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MapId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerEnterMapReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerEnterMapReq)
  return false;
#undef DO_
}

void TAdventureTowerEnterMapReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerEnterMapReq)
  // optional uint32 MapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerEnterMapReq)
}

::google::protobuf::uint8* TAdventureTowerEnterMapReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerEnterMapReq)
  // optional uint32 MapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerEnterMapReq)
  return target;
}

int TAdventureTowerEnterMapReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerEnterMapReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerEnterMapReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerEnterMapReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerEnterMapReq::MergeFrom(const TAdventureTowerEnterMapReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerEnterMapReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerEnterMapReq::CopyFrom(const TAdventureTowerEnterMapReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerEnterMapReq::IsInitialized() const {

  return true;
}

void TAdventureTowerEnterMapReq::Swap(TAdventureTowerEnterMapReq* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerEnterMapReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerEnterMapReq_descriptor_;
  metadata.reflection = TAdventureTowerEnterMapReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerHeroBattleInfo::kUnitFieldNumber;
const int TAdventureTowerHeroBattleInfo::kMaxHpFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerHeroBattleInfo::TAdventureTowerHeroBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerHeroBattleInfo)
}

void TAdventureTowerHeroBattleInfo::InitAsDefaultInstance() {
  unit_ = const_cast< ::pb::TUnitInfo*>(&::pb::TUnitInfo::default_instance());
}

TAdventureTowerHeroBattleInfo::TAdventureTowerHeroBattleInfo(const TAdventureTowerHeroBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerHeroBattleInfo)
}

void TAdventureTowerHeroBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  unit_ = NULL;
  maxhp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerHeroBattleInfo::~TAdventureTowerHeroBattleInfo() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerHeroBattleInfo)
  SharedDtor();
}

void TAdventureTowerHeroBattleInfo::SharedDtor() {
  if (this != default_instance_) {
    delete unit_;
  }
}

void TAdventureTowerHeroBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerHeroBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerHeroBattleInfo_descriptor_;
}

const TAdventureTowerHeroBattleInfo& TAdventureTowerHeroBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerHeroBattleInfo* TAdventureTowerHeroBattleInfo::default_instance_ = NULL;

TAdventureTowerHeroBattleInfo* TAdventureTowerHeroBattleInfo::New() const {
  return new TAdventureTowerHeroBattleInfo;
}

void TAdventureTowerHeroBattleInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_unit()) {
      if (unit_ != NULL) unit_->::pb::TUnitInfo::Clear();
    }
    maxhp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerHeroBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerHeroBattleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUnitInfo Unit = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MaxHp;
        break;
      }

      // optional uint64 MaxHp = 2;
      case 2: {
        if (tag == 16) {
         parse_MaxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerHeroBattleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerHeroBattleInfo)
  return false;
#undef DO_
}

void TAdventureTowerHeroBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerHeroBattleInfo)
  // optional .pb.TUnitInfo Unit = 1;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unit(), output);
  }

  // optional uint64 MaxHp = 2;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->maxhp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerHeroBattleInfo)
}

::google::protobuf::uint8* TAdventureTowerHeroBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerHeroBattleInfo)
  // optional .pb.TUnitInfo Unit = 1;
  if (has_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unit(), target);
  }

  // optional uint64 MaxHp = 2;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->maxhp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerHeroBattleInfo)
  return target;
}

int TAdventureTowerHeroBattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUnitInfo Unit = 1;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit());
    }

    // optional uint64 MaxHp = 2;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxhp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerHeroBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerHeroBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerHeroBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerHeroBattleInfo::MergeFrom(const TAdventureTowerHeroBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit()) {
      mutable_unit()->::pb::TUnitInfo::MergeFrom(from.unit());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerHeroBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerHeroBattleInfo::CopyFrom(const TAdventureTowerHeroBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerHeroBattleInfo::IsInitialized() const {

  if (has_unit()) {
    if (!this->unit().IsInitialized()) return false;
  }
  return true;
}

void TAdventureTowerHeroBattleInfo::Swap(TAdventureTowerHeroBattleInfo* other) {
  if (other != this) {
    std::swap(unit_, other->unit_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerHeroBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerHeroBattleInfo_descriptor_;
  metadata.reflection = TAdventureTowerHeroBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerHeroStatus::kHeroIdFieldNumber;
const int TAdventureTowerHeroStatus::kCurHpFieldNumber;
const int TAdventureTowerHeroStatus::kMaxHpFieldNumber;
const int TAdventureTowerHeroStatus::kCurRageFieldNumber;
const int TAdventureTowerHeroStatus::kMaxRageFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerHeroStatus::TAdventureTowerHeroStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerHeroStatus)
}

void TAdventureTowerHeroStatus::InitAsDefaultInstance() {
}

TAdventureTowerHeroStatus::TAdventureTowerHeroStatus(const TAdventureTowerHeroStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerHeroStatus)
}

void TAdventureTowerHeroStatus::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  curhp_ = GOOGLE_ULONGLONG(0);
  maxhp_ = GOOGLE_ULONGLONG(0);
  currage_ = GOOGLE_ULONGLONG(0);
  maxrage_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerHeroStatus::~TAdventureTowerHeroStatus() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerHeroStatus)
  SharedDtor();
}

void TAdventureTowerHeroStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureTowerHeroStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerHeroStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerHeroStatus_descriptor_;
}

const TAdventureTowerHeroStatus& TAdventureTowerHeroStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerHeroStatus* TAdventureTowerHeroStatus::default_instance_ = NULL;

TAdventureTowerHeroStatus* TAdventureTowerHeroStatus::New() const {
  return new TAdventureTowerHeroStatus;
}

void TAdventureTowerHeroStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureTowerHeroStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(curhp_, heroid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerHeroStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerHeroStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 HeroId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CurHp;
        break;
      }

      // optional uint64 CurHp = 2;
      case 2: {
        if (tag == 16) {
         parse_CurHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MaxHp;
        break;
      }

      // optional uint64 MaxHp = 3;
      case 3: {
        if (tag == 24) {
         parse_MaxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CurRage;
        break;
      }

      // optional uint64 CurRage = 4;
      case 4: {
        if (tag == 32) {
         parse_CurRage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &currage_)));
          set_has_currage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MaxRage;
        break;
      }

      // optional uint64 MaxRage = 5;
      case 5: {
        if (tag == 40) {
         parse_MaxRage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxrage_)));
          set_has_maxrage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerHeroStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerHeroStatus)
  return false;
#undef DO_
}

void TAdventureTowerHeroStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerHeroStatus)
  // optional uint32 HeroId = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint64 CurHp = 2;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->curhp(), output);
  }

  // optional uint64 MaxHp = 3;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->maxhp(), output);
  }

  // optional uint64 CurRage = 4;
  if (has_currage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->currage(), output);
  }

  // optional uint64 MaxRage = 5;
  if (has_maxrage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->maxrage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerHeroStatus)
}

::google::protobuf::uint8* TAdventureTowerHeroStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerHeroStatus)
  // optional uint32 HeroId = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint64 CurHp = 2;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->curhp(), target);
  }

  // optional uint64 MaxHp = 3;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->maxhp(), target);
  }

  // optional uint64 CurRage = 4;
  if (has_currage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->currage(), target);
  }

  // optional uint64 MaxRage = 5;
  if (has_maxrage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->maxrage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerHeroStatus)
  return target;
}

int TAdventureTowerHeroStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 HeroId = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint64 CurHp = 2;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curhp());
    }

    // optional uint64 MaxHp = 3;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxhp());
    }

    // optional uint64 CurRage = 4;
    if (has_currage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->currage());
    }

    // optional uint64 MaxRage = 5;
    if (has_maxrage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxrage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerHeroStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerHeroStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerHeroStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerHeroStatus::MergeFrom(const TAdventureTowerHeroStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_currage()) {
      set_currage(from.currage());
    }
    if (from.has_maxrage()) {
      set_maxrage(from.maxrage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerHeroStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerHeroStatus::CopyFrom(const TAdventureTowerHeroStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerHeroStatus::IsInitialized() const {

  return true;
}

void TAdventureTowerHeroStatus::Swap(TAdventureTowerHeroStatus* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(curhp_, other->curhp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(currage_, other->currage_);
    std::swap(maxrage_, other->maxrage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerHeroStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerHeroStatus_descriptor_;
  metadata.reflection = TAdventureTowerHeroStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerEnterMapRsp::kMapInfoFieldNumber;
const int TAdventureTowerEnterMapRsp::kBuffIdArrFieldNumber;
const int TAdventureTowerEnterMapRsp::kHeroStatusArrFieldNumber;
const int TAdventureTowerEnterMapRsp::kSquadHeroArrFieldNumber;
const int TAdventureTowerEnterMapRsp::kTemporaryHeroArrFieldNumber;
const int TAdventureTowerEnterMapRsp::kMonsterInfoArrFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerEnterMapRsp::TAdventureTowerEnterMapRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerEnterMapRsp)
}

void TAdventureTowerEnterMapRsp::InitAsDefaultInstance() {
  mapinfo_ = const_cast< ::pb::TAdventureTowerMapInfo*>(&::pb::TAdventureTowerMapInfo::default_instance());
}

TAdventureTowerEnterMapRsp::TAdventureTowerEnterMapRsp(const TAdventureTowerEnterMapRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerEnterMapRsp)
}

void TAdventureTowerEnterMapRsp::SharedCtor() {
  _cached_size_ = 0;
  mapinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerEnterMapRsp::~TAdventureTowerEnterMapRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerEnterMapRsp)
  SharedDtor();
}

void TAdventureTowerEnterMapRsp::SharedDtor() {
  if (this != default_instance_) {
    delete mapinfo_;
  }
}

void TAdventureTowerEnterMapRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerEnterMapRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerEnterMapRsp_descriptor_;
}

const TAdventureTowerEnterMapRsp& TAdventureTowerEnterMapRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerEnterMapRsp* TAdventureTowerEnterMapRsp::default_instance_ = NULL;

TAdventureTowerEnterMapRsp* TAdventureTowerEnterMapRsp::New() const {
  return new TAdventureTowerEnterMapRsp;
}

void TAdventureTowerEnterMapRsp::Clear() {
  if (has_mapinfo()) {
    if (mapinfo_ != NULL) mapinfo_->::pb::TAdventureTowerMapInfo::Clear();
  }
  buffidarr_.Clear();
  herostatusarr_.Clear();
  squadheroarr_.Clear();
  temporaryheroarr_.Clear();
  monsterinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerEnterMapRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerEnterMapRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAdventureTowerMapInfo MapInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuffIdArr;
        break;
      }

      // repeated uint32 BuffIdArr = 2;
      case 2: {
        if (tag == 16) {
         parse_BuffIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_buffidarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buffidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuffIdArr;
        if (input->ExpectTag(26)) goto parse_HeroStatusArr;
        break;
      }

      // repeated .pb.TAdventureTowerHeroStatus HeroStatusArr = 3;
      case 3: {
        if (tag == 26) {
         parse_HeroStatusArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herostatusarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_HeroStatusArr;
        if (input->ExpectTag(32)) goto parse_SquadHeroArr;
        break;
      }

      // repeated uint32 SquadHeroArr = 4;
      case 4: {
        if (tag == 32) {
         parse_SquadHeroArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_squadheroarr())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_squadheroarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SquadHeroArr;
        if (input->ExpectTag(40)) goto parse_TemporaryHeroArr;
        break;
      }

      // repeated uint32 TemporaryHeroArr = 5;
      case 5: {
        if (tag == 40) {
         parse_TemporaryHeroArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_temporaryheroarr())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_temporaryheroarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_TemporaryHeroArr;
        if (input->ExpectTag(50)) goto parse_MonsterInfoArr;
        break;
      }

      // repeated .pb.TAdventureMonsterInfo MonsterInfoArr = 6;
      case 6: {
        if (tag == 50) {
         parse_MonsterInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_MonsterInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerEnterMapRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerEnterMapRsp)
  return false;
#undef DO_
}

void TAdventureTowerEnterMapRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerEnterMapRsp)
  // optional .pb.TAdventureTowerMapInfo MapInfo = 1;
  if (has_mapinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapinfo(), output);
  }

  // repeated uint32 BuffIdArr = 2;
  for (int i = 0; i < this->buffidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->buffidarr(i), output);
  }

  // repeated .pb.TAdventureTowerHeroStatus HeroStatusArr = 3;
  for (int i = 0; i < this->herostatusarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->herostatusarr(i), output);
  }

  // repeated uint32 SquadHeroArr = 4;
  for (int i = 0; i < this->squadheroarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->squadheroarr(i), output);
  }

  // repeated uint32 TemporaryHeroArr = 5;
  for (int i = 0; i < this->temporaryheroarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->temporaryheroarr(i), output);
  }

  // repeated .pb.TAdventureMonsterInfo MonsterInfoArr = 6;
  for (int i = 0; i < this->monsterinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->monsterinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerEnterMapRsp)
}

::google::protobuf::uint8* TAdventureTowerEnterMapRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerEnterMapRsp)
  // optional .pb.TAdventureTowerMapInfo MapInfo = 1;
  if (has_mapinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapinfo(), target);
  }

  // repeated uint32 BuffIdArr = 2;
  for (int i = 0; i < this->buffidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->buffidarr(i), target);
  }

  // repeated .pb.TAdventureTowerHeroStatus HeroStatusArr = 3;
  for (int i = 0; i < this->herostatusarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->herostatusarr(i), target);
  }

  // repeated uint32 SquadHeroArr = 4;
  for (int i = 0; i < this->squadheroarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->squadheroarr(i), target);
  }

  // repeated uint32 TemporaryHeroArr = 5;
  for (int i = 0; i < this->temporaryheroarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->temporaryheroarr(i), target);
  }

  // repeated .pb.TAdventureMonsterInfo MonsterInfoArr = 6;
  for (int i = 0; i < this->monsterinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->monsterinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerEnterMapRsp)
  return target;
}

int TAdventureTowerEnterMapRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAdventureTowerMapInfo MapInfo = 1;
    if (has_mapinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapinfo());
    }

  }
  // repeated uint32 BuffIdArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buffidarr(i));
    }
    total_size += 1 * this->buffidarr_size() + data_size;
  }

  // repeated .pb.TAdventureTowerHeroStatus HeroStatusArr = 3;
  total_size += 1 * this->herostatusarr_size();
  for (int i = 0; i < this->herostatusarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herostatusarr(i));
  }

  // repeated uint32 SquadHeroArr = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->squadheroarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->squadheroarr(i));
    }
    total_size += 1 * this->squadheroarr_size() + data_size;
  }

  // repeated uint32 TemporaryHeroArr = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->temporaryheroarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->temporaryheroarr(i));
    }
    total_size += 1 * this->temporaryheroarr_size() + data_size;
  }

  // repeated .pb.TAdventureMonsterInfo MonsterInfoArr = 6;
  total_size += 1 * this->monsterinfoarr_size();
  for (int i = 0; i < this->monsterinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerEnterMapRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerEnterMapRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerEnterMapRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerEnterMapRsp::MergeFrom(const TAdventureTowerEnterMapRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffidarr_.MergeFrom(from.buffidarr_);
  herostatusarr_.MergeFrom(from.herostatusarr_);
  squadheroarr_.MergeFrom(from.squadheroarr_);
  temporaryheroarr_.MergeFrom(from.temporaryheroarr_);
  monsterinfoarr_.MergeFrom(from.monsterinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapinfo()) {
      mutable_mapinfo()->::pb::TAdventureTowerMapInfo::MergeFrom(from.mapinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerEnterMapRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerEnterMapRsp::CopyFrom(const TAdventureTowerEnterMapRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerEnterMapRsp::IsInitialized() const {

  if (has_mapinfo()) {
    if (!this->mapinfo().IsInitialized()) return false;
  }
  return true;
}

void TAdventureTowerEnterMapRsp::Swap(TAdventureTowerEnterMapRsp* other) {
  if (other != this) {
    std::swap(mapinfo_, other->mapinfo_);
    buffidarr_.Swap(&other->buffidarr_);
    herostatusarr_.Swap(&other->herostatusarr_);
    squadheroarr_.Swap(&other->squadheroarr_);
    temporaryheroarr_.Swap(&other->temporaryheroarr_);
    monsterinfoarr_.Swap(&other->monsterinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerEnterMapRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerEnterMapRsp_descriptor_;
  metadata.reflection = TAdventureTowerEnterMapRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerQuitMapReq::kMapIdFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerQuitMapReq::TAdventureTowerQuitMapReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerQuitMapReq)
}

void TAdventureTowerQuitMapReq::InitAsDefaultInstance() {
}

TAdventureTowerQuitMapReq::TAdventureTowerQuitMapReq(const TAdventureTowerQuitMapReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerQuitMapReq)
}

void TAdventureTowerQuitMapReq::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerQuitMapReq::~TAdventureTowerQuitMapReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerQuitMapReq)
  SharedDtor();
}

void TAdventureTowerQuitMapReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureTowerQuitMapReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerQuitMapReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerQuitMapReq_descriptor_;
}

const TAdventureTowerQuitMapReq& TAdventureTowerQuitMapReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerQuitMapReq* TAdventureTowerQuitMapReq::default_instance_ = NULL;

TAdventureTowerQuitMapReq* TAdventureTowerQuitMapReq::New() const {
  return new TAdventureTowerQuitMapReq;
}

void TAdventureTowerQuitMapReq::Clear() {
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerQuitMapReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerQuitMapReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MapId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerQuitMapReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerQuitMapReq)
  return false;
#undef DO_
}

void TAdventureTowerQuitMapReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerQuitMapReq)
  // optional uint32 MapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerQuitMapReq)
}

::google::protobuf::uint8* TAdventureTowerQuitMapReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerQuitMapReq)
  // optional uint32 MapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerQuitMapReq)
  return target;
}

int TAdventureTowerQuitMapReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerQuitMapReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerQuitMapReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerQuitMapReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerQuitMapReq::MergeFrom(const TAdventureTowerQuitMapReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerQuitMapReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerQuitMapReq::CopyFrom(const TAdventureTowerQuitMapReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerQuitMapReq::IsInitialized() const {

  return true;
}

void TAdventureTowerQuitMapReq::Swap(TAdventureTowerQuitMapReq* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerQuitMapReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerQuitMapReq_descriptor_;
  metadata.reflection = TAdventureTowerQuitMapReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerSetSquadReq::kSquadHeroArrFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerSetSquadReq::TAdventureTowerSetSquadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerSetSquadReq)
}

void TAdventureTowerSetSquadReq::InitAsDefaultInstance() {
}

TAdventureTowerSetSquadReq::TAdventureTowerSetSquadReq(const TAdventureTowerSetSquadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerSetSquadReq)
}

void TAdventureTowerSetSquadReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerSetSquadReq::~TAdventureTowerSetSquadReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerSetSquadReq)
  SharedDtor();
}

void TAdventureTowerSetSquadReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureTowerSetSquadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerSetSquadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerSetSquadReq_descriptor_;
}

const TAdventureTowerSetSquadReq& TAdventureTowerSetSquadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerSetSquadReq* TAdventureTowerSetSquadReq::default_instance_ = NULL;

TAdventureTowerSetSquadReq* TAdventureTowerSetSquadReq::New() const {
  return new TAdventureTowerSetSquadReq;
}

void TAdventureTowerSetSquadReq::Clear() {
  squadheroarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerSetSquadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerSetSquadReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 SquadHeroArr = 1;
      case 1: {
        if (tag == 8) {
         parse_SquadHeroArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_squadheroarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_squadheroarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_SquadHeroArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerSetSquadReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerSetSquadReq)
  return false;
#undef DO_
}

void TAdventureTowerSetSquadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerSetSquadReq)
  // repeated uint32 SquadHeroArr = 1;
  for (int i = 0; i < this->squadheroarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->squadheroarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerSetSquadReq)
}

::google::protobuf::uint8* TAdventureTowerSetSquadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerSetSquadReq)
  // repeated uint32 SquadHeroArr = 1;
  for (int i = 0; i < this->squadheroarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->squadheroarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerSetSquadReq)
  return target;
}

int TAdventureTowerSetSquadReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 SquadHeroArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->squadheroarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->squadheroarr(i));
    }
    total_size += 1 * this->squadheroarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerSetSquadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerSetSquadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerSetSquadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerSetSquadReq::MergeFrom(const TAdventureTowerSetSquadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  squadheroarr_.MergeFrom(from.squadheroarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerSetSquadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerSetSquadReq::CopyFrom(const TAdventureTowerSetSquadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerSetSquadReq::IsInitialized() const {

  return true;
}

void TAdventureTowerSetSquadReq::Swap(TAdventureTowerSetSquadReq* other) {
  if (other != this) {
    squadheroarr_.Swap(&other->squadheroarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerSetSquadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerSetSquadReq_descriptor_;
  metadata.reflection = TAdventureTowerSetSquadReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerTriggerEventReq::kLayerIndexFieldNumber;
const int TAdventureTowerTriggerEventReq::kPosXFieldNumber;
const int TAdventureTowerTriggerEventReq::kPosYFieldNumber;
const int TAdventureTowerTriggerEventReq::kChoseBuffIndexFieldNumber;
const int TAdventureTowerTriggerEventReq::kChoseHeroIndexFieldNumber;
const int TAdventureTowerTriggerEventReq::kEventOnHidArrFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerTriggerEventReq::TAdventureTowerTriggerEventReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerTriggerEventReq)
}

void TAdventureTowerTriggerEventReq::InitAsDefaultInstance() {
}

TAdventureTowerTriggerEventReq::TAdventureTowerTriggerEventReq(const TAdventureTowerTriggerEventReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerTriggerEventReq)
}

void TAdventureTowerTriggerEventReq::SharedCtor() {
  _cached_size_ = 0;
  layerindex_ = 0u;
  posx_ = 0;
  posy_ = 0;
  chosebuffindex_ = 0u;
  choseheroindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerTriggerEventReq::~TAdventureTowerTriggerEventReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerTriggerEventReq)
  SharedDtor();
}

void TAdventureTowerTriggerEventReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureTowerTriggerEventReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerTriggerEventReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerTriggerEventReq_descriptor_;
}

const TAdventureTowerTriggerEventReq& TAdventureTowerTriggerEventReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerTriggerEventReq* TAdventureTowerTriggerEventReq::default_instance_ = NULL;

TAdventureTowerTriggerEventReq* TAdventureTowerTriggerEventReq::New() const {
  return new TAdventureTowerTriggerEventReq;
}

void TAdventureTowerTriggerEventReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureTowerTriggerEventReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(layerindex_, chosebuffindex_);
    choseheroindex_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  eventonhidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerTriggerEventReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerTriggerEventReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerindex_)));
          set_has_layerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PosX;
        break;
      }

      // optional int32 PosX = 2;
      case 2: {
        if (tag == 16) {
         parse_PosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PosY;
        break;
      }

      // optional int32 PosY = 3;
      case 3: {
        if (tag == 24) {
         parse_PosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ChoseBuffIndex;
        break;
      }

      // optional uint32 ChoseBuffIndex = 4;
      case 4: {
        if (tag == 32) {
         parse_ChoseBuffIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chosebuffindex_)));
          set_has_chosebuffindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ChoseHeroIndex;
        break;
      }

      // optional uint32 ChoseHeroIndex = 5;
      case 5: {
        if (tag == 40) {
         parse_ChoseHeroIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &choseheroindex_)));
          set_has_choseheroindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_EventOnHidArr;
        break;
      }

      // repeated uint32 EventOnHidArr = 6;
      case 6: {
        if (tag == 48) {
         parse_EventOnHidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_eventonhidarr())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_eventonhidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_EventOnHidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerTriggerEventReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerTriggerEventReq)
  return false;
#undef DO_
}

void TAdventureTowerTriggerEventReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerTriggerEventReq)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerindex(), output);
  }

  // optional int32 PosX = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posx(), output);
  }

  // optional int32 PosY = 3;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posy(), output);
  }

  // optional uint32 ChoseBuffIndex = 4;
  if (has_chosebuffindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->chosebuffindex(), output);
  }

  // optional uint32 ChoseHeroIndex = 5;
  if (has_choseheroindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->choseheroindex(), output);
  }

  // repeated uint32 EventOnHidArr = 6;
  for (int i = 0; i < this->eventonhidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->eventonhidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerTriggerEventReq)
}

::google::protobuf::uint8* TAdventureTowerTriggerEventReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerTriggerEventReq)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerindex(), target);
  }

  // optional int32 PosX = 2;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posx(), target);
  }

  // optional int32 PosY = 3;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posy(), target);
  }

  // optional uint32 ChoseBuffIndex = 4;
  if (has_chosebuffindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->chosebuffindex(), target);
  }

  // optional uint32 ChoseHeroIndex = 5;
  if (has_choseheroindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->choseheroindex(), target);
  }

  // repeated uint32 EventOnHidArr = 6;
  for (int i = 0; i < this->eventonhidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->eventonhidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerTriggerEventReq)
  return target;
}

int TAdventureTowerTriggerEventReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerIndex = 1;
    if (has_layerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerindex());
    }

    // optional int32 PosX = 2;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 PosY = 3;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional uint32 ChoseBuffIndex = 4;
    if (has_chosebuffindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chosebuffindex());
    }

    // optional uint32 ChoseHeroIndex = 5;
    if (has_choseheroindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->choseheroindex());
    }

  }
  // repeated uint32 EventOnHidArr = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->eventonhidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->eventonhidarr(i));
    }
    total_size += 1 * this->eventonhidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerTriggerEventReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerTriggerEventReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerTriggerEventReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerTriggerEventReq::MergeFrom(const TAdventureTowerTriggerEventReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  eventonhidarr_.MergeFrom(from.eventonhidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerindex()) {
      set_layerindex(from.layerindex());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_chosebuffindex()) {
      set_chosebuffindex(from.chosebuffindex());
    }
    if (from.has_choseheroindex()) {
      set_choseheroindex(from.choseheroindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerTriggerEventReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerTriggerEventReq::CopyFrom(const TAdventureTowerTriggerEventReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerTriggerEventReq::IsInitialized() const {

  return true;
}

void TAdventureTowerTriggerEventReq::Swap(TAdventureTowerTriggerEventReq* other) {
  if (other != this) {
    std::swap(layerindex_, other->layerindex_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(chosebuffindex_, other->chosebuffindex_);
    std::swap(choseheroindex_, other->choseheroindex_);
    eventonhidarr_.Swap(&other->eventonhidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerTriggerEventReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerTriggerEventReq_descriptor_;
  metadata.reflection = TAdventureTowerTriggerEventReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerEventRet::kBattleinfoIdFieldNumber;
const int TAdventureTowerEventRet::kInteractIdArrFieldNumber;
const int TAdventureTowerEventRet::kHeroStatusArrFieldNumber;
const int TAdventureTowerEventRet::kMonsterInfoFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerEventRet::TAdventureTowerEventRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerEventRet)
}

void TAdventureTowerEventRet::InitAsDefaultInstance() {
  monsterinfo_ = const_cast< ::pb::TAdventureBattleMonsterInfo*>(&::pb::TAdventureBattleMonsterInfo::default_instance());
}

TAdventureTowerEventRet::TAdventureTowerEventRet(const TAdventureTowerEventRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerEventRet)
}

void TAdventureTowerEventRet::SharedCtor() {
  _cached_size_ = 0;
  battleinfoid_ = 0u;
  monsterinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerEventRet::~TAdventureTowerEventRet() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerEventRet)
  SharedDtor();
}

void TAdventureTowerEventRet::SharedDtor() {
  if (this != default_instance_) {
    delete monsterinfo_;
  }
}

void TAdventureTowerEventRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerEventRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerEventRet_descriptor_;
}

const TAdventureTowerEventRet& TAdventureTowerEventRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerEventRet* TAdventureTowerEventRet::default_instance_ = NULL;

TAdventureTowerEventRet* TAdventureTowerEventRet::New() const {
  return new TAdventureTowerEventRet;
}

void TAdventureTowerEventRet::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    battleinfoid_ = 0u;
    if (has_monsterinfo()) {
      if (monsterinfo_ != NULL) monsterinfo_->::pb::TAdventureBattleMonsterInfo::Clear();
    }
  }
  interactidarr_.Clear();
  herostatusarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerEventRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerEventRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BattleinfoId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleinfoid_)));
          set_has_battleinfoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_InteractIdArr;
        break;
      }

      // repeated uint32 InteractIdArr = 2;
      case 2: {
        if (tag == 16) {
         parse_InteractIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_interactidarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_interactidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_InteractIdArr;
        if (input->ExpectTag(26)) goto parse_HeroStatusArr;
        break;
      }

      // repeated .pb.TAdventureTowerHeroStatus HeroStatusArr = 3;
      case 3: {
        if (tag == 26) {
         parse_HeroStatusArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herostatusarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_HeroStatusArr;
        if (input->ExpectTag(34)) goto parse_MonsterInfo;
        break;
      }

      // optional .pb.TAdventureBattleMonsterInfo MonsterInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_MonsterInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monsterinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerEventRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerEventRet)
  return false;
#undef DO_
}

void TAdventureTowerEventRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerEventRet)
  // optional uint32 BattleinfoId = 1;
  if (has_battleinfoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battleinfoid(), output);
  }

  // repeated uint32 InteractIdArr = 2;
  for (int i = 0; i < this->interactidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->interactidarr(i), output);
  }

  // repeated .pb.TAdventureTowerHeroStatus HeroStatusArr = 3;
  for (int i = 0; i < this->herostatusarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->herostatusarr(i), output);
  }

  // optional .pb.TAdventureBattleMonsterInfo MonsterInfo = 4;
  if (has_monsterinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->monsterinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerEventRet)
}

::google::protobuf::uint8* TAdventureTowerEventRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerEventRet)
  // optional uint32 BattleinfoId = 1;
  if (has_battleinfoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battleinfoid(), target);
  }

  // repeated uint32 InteractIdArr = 2;
  for (int i = 0; i < this->interactidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->interactidarr(i), target);
  }

  // repeated .pb.TAdventureTowerHeroStatus HeroStatusArr = 3;
  for (int i = 0; i < this->herostatusarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->herostatusarr(i), target);
  }

  // optional .pb.TAdventureBattleMonsterInfo MonsterInfo = 4;
  if (has_monsterinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->monsterinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerEventRet)
  return target;
}

int TAdventureTowerEventRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleinfoId = 1;
    if (has_battleinfoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleinfoid());
    }

    // optional .pb.TAdventureBattleMonsterInfo MonsterInfo = 4;
    if (has_monsterinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monsterinfo());
    }

  }
  // repeated uint32 InteractIdArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->interactidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->interactidarr(i));
    }
    total_size += 1 * this->interactidarr_size() + data_size;
  }

  // repeated .pb.TAdventureTowerHeroStatus HeroStatusArr = 3;
  total_size += 1 * this->herostatusarr_size();
  for (int i = 0; i < this->herostatusarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herostatusarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerEventRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerEventRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerEventRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerEventRet::MergeFrom(const TAdventureTowerEventRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  interactidarr_.MergeFrom(from.interactidarr_);
  herostatusarr_.MergeFrom(from.herostatusarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleinfoid()) {
      set_battleinfoid(from.battleinfoid());
    }
    if (from.has_monsterinfo()) {
      mutable_monsterinfo()->::pb::TAdventureBattleMonsterInfo::MergeFrom(from.monsterinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerEventRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerEventRet::CopyFrom(const TAdventureTowerEventRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerEventRet::IsInitialized() const {

  return true;
}

void TAdventureTowerEventRet::Swap(TAdventureTowerEventRet* other) {
  if (other != this) {
    std::swap(battleinfoid_, other->battleinfoid_);
    interactidarr_.Swap(&other->interactidarr_);
    herostatusarr_.Swap(&other->herostatusarr_);
    std::swap(monsterinfo_, other->monsterinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerEventRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerEventRet_descriptor_;
  metadata.reflection = TAdventureTowerEventRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerTriggerEventRsp::kEventStatusFieldNumber;
const int TAdventureTowerTriggerEventRsp::kEventRetFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerTriggerEventRsp::TAdventureTowerTriggerEventRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerTriggerEventRsp)
}

void TAdventureTowerTriggerEventRsp::InitAsDefaultInstance() {
  eventret_ = const_cast< ::pb::TAdventureTowerEventRet*>(&::pb::TAdventureTowerEventRet::default_instance());
}

TAdventureTowerTriggerEventRsp::TAdventureTowerTriggerEventRsp(const TAdventureTowerTriggerEventRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerTriggerEventRsp)
}

void TAdventureTowerTriggerEventRsp::SharedCtor() {
  _cached_size_ = 0;
  eventstatus_ = 0;
  eventret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerTriggerEventRsp::~TAdventureTowerTriggerEventRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerTriggerEventRsp)
  SharedDtor();
}

void TAdventureTowerTriggerEventRsp::SharedDtor() {
  if (this != default_instance_) {
    delete eventret_;
  }
}

void TAdventureTowerTriggerEventRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerTriggerEventRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerTriggerEventRsp_descriptor_;
}

const TAdventureTowerTriggerEventRsp& TAdventureTowerTriggerEventRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerTriggerEventRsp* TAdventureTowerTriggerEventRsp::default_instance_ = NULL;

TAdventureTowerTriggerEventRsp* TAdventureTowerTriggerEventRsp::New() const {
  return new TAdventureTowerTriggerEventRsp;
}

void TAdventureTowerTriggerEventRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    eventstatus_ = 0;
    if (has_eventret()) {
      if (eventret_ != NULL) eventret_->::pb::TAdventureTowerEventRet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerTriggerEventRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerTriggerEventRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EEventStatus EventStatus = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EEventStatus_IsValid(value)) {
            set_eventstatus(static_cast< ::pb::EEventStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_EventRet;
        break;
      }

      // optional .pb.TAdventureTowerEventRet EventRet = 2;
      case 2: {
        if (tag == 18) {
         parse_EventRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eventret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerTriggerEventRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerTriggerEventRsp)
  return false;
#undef DO_
}

void TAdventureTowerTriggerEventRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerTriggerEventRsp)
  // optional .pb.EEventStatus EventStatus = 1;
  if (has_eventstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->eventstatus(), output);
  }

  // optional .pb.TAdventureTowerEventRet EventRet = 2;
  if (has_eventret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->eventret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerTriggerEventRsp)
}

::google::protobuf::uint8* TAdventureTowerTriggerEventRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerTriggerEventRsp)
  // optional .pb.EEventStatus EventStatus = 1;
  if (has_eventstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->eventstatus(), target);
  }

  // optional .pb.TAdventureTowerEventRet EventRet = 2;
  if (has_eventret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->eventret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerTriggerEventRsp)
  return target;
}

int TAdventureTowerTriggerEventRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EEventStatus EventStatus = 1;
    if (has_eventstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventstatus());
    }

    // optional .pb.TAdventureTowerEventRet EventRet = 2;
    if (has_eventret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eventret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerTriggerEventRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerTriggerEventRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerTriggerEventRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerTriggerEventRsp::MergeFrom(const TAdventureTowerTriggerEventRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventstatus()) {
      set_eventstatus(from.eventstatus());
    }
    if (from.has_eventret()) {
      mutable_eventret()->::pb::TAdventureTowerEventRet::MergeFrom(from.eventret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerTriggerEventRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerTriggerEventRsp::CopyFrom(const TAdventureTowerTriggerEventRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerTriggerEventRsp::IsInitialized() const {

  return true;
}

void TAdventureTowerTriggerEventRsp::Swap(TAdventureTowerTriggerEventRsp* other) {
  if (other != this) {
    std::swap(eventstatus_, other->eventstatus_);
    std::swap(eventret_, other->eventret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerTriggerEventRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerTriggerEventRsp_descriptor_;
  metadata.reflection = TAdventureTowerTriggerEventRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerStartBattleReq::kBattlePosFieldNumber;
const int TAdventureTowerStartBattleReq::kSquadHeroArrFieldNumber;
const int TAdventureTowerStartBattleReq::kBattleCheckParamFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerStartBattleReq::TAdventureTowerStartBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerStartBattleReq)
}

void TAdventureTowerStartBattleReq::InitAsDefaultInstance() {
  battlepos_ = const_cast< ::pb::TAdventureTowerPos*>(&::pb::TAdventureTowerPos::default_instance());
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TAdventureTowerStartBattleReq::TAdventureTowerStartBattleReq(const TAdventureTowerStartBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerStartBattleReq)
}

void TAdventureTowerStartBattleReq::SharedCtor() {
  _cached_size_ = 0;
  battlepos_ = NULL;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerStartBattleReq::~TAdventureTowerStartBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerStartBattleReq)
  SharedDtor();
}

void TAdventureTowerStartBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlepos_;
    delete battlecheckparam_;
  }
}

void TAdventureTowerStartBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerStartBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerStartBattleReq_descriptor_;
}

const TAdventureTowerStartBattleReq& TAdventureTowerStartBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerStartBattleReq* TAdventureTowerStartBattleReq::default_instance_ = NULL;

TAdventureTowerStartBattleReq* TAdventureTowerStartBattleReq::New() const {
  return new TAdventureTowerStartBattleReq;
}

void TAdventureTowerStartBattleReq::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_battlepos()) {
      if (battlepos_ != NULL) battlepos_->::pb::TAdventureTowerPos::Clear();
    }
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }
  squadheroarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerStartBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerStartBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAdventureTowerPos BattlePos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlepos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SquadHeroArr;
        break;
      }

      // repeated uint32 SquadHeroArr = 2;
      case 2: {
        if (tag == 16) {
         parse_SquadHeroArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_squadheroarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_squadheroarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SquadHeroArr;
        if (input->ExpectTag(26)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 3;
      case 3: {
        if (tag == 26) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerStartBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerStartBattleReq)
  return false;
#undef DO_
}

void TAdventureTowerStartBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerStartBattleReq)
  // optional .pb.TAdventureTowerPos BattlePos = 1;
  if (has_battlepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battlepos(), output);
  }

  // repeated uint32 SquadHeroArr = 2;
  for (int i = 0; i < this->squadheroarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->squadheroarr(i), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battlecheckparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerStartBattleReq)
}

::google::protobuf::uint8* TAdventureTowerStartBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerStartBattleReq)
  // optional .pb.TAdventureTowerPos BattlePos = 1;
  if (has_battlepos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battlepos(), target);
  }

  // repeated uint32 SquadHeroArr = 2;
  for (int i = 0; i < this->squadheroarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->squadheroarr(i), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battlecheckparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerStartBattleReq)
  return target;
}

int TAdventureTowerStartBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAdventureTowerPos BattlePos = 1;
    if (has_battlepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlepos());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 3;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  // repeated uint32 SquadHeroArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->squadheroarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->squadheroarr(i));
    }
    total_size += 1 * this->squadheroarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerStartBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerStartBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerStartBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerStartBattleReq::MergeFrom(const TAdventureTowerStartBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  squadheroarr_.MergeFrom(from.squadheroarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battlepos()) {
      mutable_battlepos()->::pb::TAdventureTowerPos::MergeFrom(from.battlepos());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerStartBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerStartBattleReq::CopyFrom(const TAdventureTowerStartBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerStartBattleReq::IsInitialized() const {

  return true;
}

void TAdventureTowerStartBattleReq::Swap(TAdventureTowerStartBattleReq* other) {
  if (other != this) {
    std::swap(battlepos_, other->battlepos_);
    squadheroarr_.Swap(&other->squadheroarr_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerStartBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerStartBattleReq_descriptor_;
  metadata.reflection = TAdventureTowerStartBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerStartBattleRsp::kBattleArgsFieldNumber;
const int TAdventureTowerStartBattleRsp::kMonsterInfoFieldNumber;
const int TAdventureTowerStartBattleRsp::kHeroBattleInfoArrFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerStartBattleRsp::TAdventureTowerStartBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerStartBattleRsp)
}

void TAdventureTowerStartBattleRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
  monsterinfo_ = const_cast< ::pb::TAdventureBattleMonsterInfo*>(&::pb::TAdventureBattleMonsterInfo::default_instance());
}

TAdventureTowerStartBattleRsp::TAdventureTowerStartBattleRsp(const TAdventureTowerStartBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerStartBattleRsp)
}

void TAdventureTowerStartBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  battleargs_ = NULL;
  monsterinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerStartBattleRsp::~TAdventureTowerStartBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerStartBattleRsp)
  SharedDtor();
}

void TAdventureTowerStartBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
    delete monsterinfo_;
  }
}

void TAdventureTowerStartBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerStartBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerStartBattleRsp_descriptor_;
}

const TAdventureTowerStartBattleRsp& TAdventureTowerStartBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerStartBattleRsp* TAdventureTowerStartBattleRsp::default_instance_ = NULL;

TAdventureTowerStartBattleRsp* TAdventureTowerStartBattleRsp::New() const {
  return new TAdventureTowerStartBattleRsp;
}

void TAdventureTowerStartBattleRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_battleargs()) {
      if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
    }
    if (has_monsterinfo()) {
      if (monsterinfo_ != NULL) monsterinfo_->::pb::TAdventureBattleMonsterInfo::Clear();
    }
  }
  herobattleinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerStartBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerStartBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBattleArgs BattleArgs = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MonsterInfo;
        break;
      }

      // optional .pb.TAdventureBattleMonsterInfo MonsterInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_MonsterInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monsterinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_HeroBattleInfoArr;
        break;
      }

      // repeated .pb.TAdventureTowerHeroBattleInfo HeroBattleInfoArr = 3;
      case 3: {
        if (tag == 26) {
         parse_HeroBattleInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herobattleinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_HeroBattleInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerStartBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerStartBattleRsp)
  return false;
#undef DO_
}

void TAdventureTowerStartBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerStartBattleRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleargs(), output);
  }

  // optional .pb.TAdventureBattleMonsterInfo MonsterInfo = 2;
  if (has_monsterinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monsterinfo(), output);
  }

  // repeated .pb.TAdventureTowerHeroBattleInfo HeroBattleInfoArr = 3;
  for (int i = 0; i < this->herobattleinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->herobattleinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerStartBattleRsp)
}

::google::protobuf::uint8* TAdventureTowerStartBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerStartBattleRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleargs(), target);
  }

  // optional .pb.TAdventureBattleMonsterInfo MonsterInfo = 2;
  if (has_monsterinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monsterinfo(), target);
  }

  // repeated .pb.TAdventureTowerHeroBattleInfo HeroBattleInfoArr = 3;
  for (int i = 0; i < this->herobattleinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->herobattleinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerStartBattleRsp)
  return target;
}

int TAdventureTowerStartBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBattleArgs BattleArgs = 1;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

    // optional .pb.TAdventureBattleMonsterInfo MonsterInfo = 2;
    if (has_monsterinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monsterinfo());
    }

  }
  // repeated .pb.TAdventureTowerHeroBattleInfo HeroBattleInfoArr = 3;
  total_size += 1 * this->herobattleinfoarr_size();
  for (int i = 0; i < this->herobattleinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herobattleinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerStartBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerStartBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerStartBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerStartBattleRsp::MergeFrom(const TAdventureTowerStartBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  herobattleinfoarr_.MergeFrom(from.herobattleinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TBattleArgs::MergeFrom(from.battleargs());
    }
    if (from.has_monsterinfo()) {
      mutable_monsterinfo()->::pb::TAdventureBattleMonsterInfo::MergeFrom(from.monsterinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerStartBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerStartBattleRsp::CopyFrom(const TAdventureTowerStartBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerStartBattleRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->herobattleinfoarr())) return false;
  return true;
}

void TAdventureTowerStartBattleRsp::Swap(TAdventureTowerStartBattleRsp* other) {
  if (other != this) {
    std::swap(battleargs_, other->battleargs_);
    std::swap(monsterinfo_, other->monsterinfo_);
    herobattleinfoarr_.Swap(&other->herobattleinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerStartBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerStartBattleRsp_descriptor_;
  metadata.reflection = TAdventureTowerStartBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerReportBattleReq::kBattlePosFieldNumber;
const int TAdventureTowerReportBattleReq::kBattleResultFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerReportBattleReq::TAdventureTowerReportBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerReportBattleReq)
}

void TAdventureTowerReportBattleReq::InitAsDefaultInstance() {
  battlepos_ = const_cast< ::pb::TAdventureTowerPos*>(&::pb::TAdventureTowerPos::default_instance());
  battleresult_ = const_cast< ::pb::TBattleResult*>(&::pb::TBattleResult::default_instance());
}

TAdventureTowerReportBattleReq::TAdventureTowerReportBattleReq(const TAdventureTowerReportBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerReportBattleReq)
}

void TAdventureTowerReportBattleReq::SharedCtor() {
  _cached_size_ = 0;
  battlepos_ = NULL;
  battleresult_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerReportBattleReq::~TAdventureTowerReportBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerReportBattleReq)
  SharedDtor();
}

void TAdventureTowerReportBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlepos_;
    delete battleresult_;
  }
}

void TAdventureTowerReportBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerReportBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerReportBattleReq_descriptor_;
}

const TAdventureTowerReportBattleReq& TAdventureTowerReportBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerReportBattleReq* TAdventureTowerReportBattleReq::default_instance_ = NULL;

TAdventureTowerReportBattleReq* TAdventureTowerReportBattleReq::New() const {
  return new TAdventureTowerReportBattleReq;
}

void TAdventureTowerReportBattleReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_battlepos()) {
      if (battlepos_ != NULL) battlepos_->::pb::TAdventureTowerPos::Clear();
    }
    if (has_battleresult()) {
      if (battleresult_ != NULL) battleresult_->::pb::TBattleResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerReportBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerReportBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAdventureTowerPos BattlePos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlepos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleResult;
        break;
      }

      // optional .pb.TBattleResult BattleResult = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerReportBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerReportBattleReq)
  return false;
#undef DO_
}

void TAdventureTowerReportBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerReportBattleReq)
  // optional .pb.TAdventureTowerPos BattlePos = 1;
  if (has_battlepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battlepos(), output);
  }

  // optional .pb.TBattleResult BattleResult = 2;
  if (has_battleresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battleresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerReportBattleReq)
}

::google::protobuf::uint8* TAdventureTowerReportBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerReportBattleReq)
  // optional .pb.TAdventureTowerPos BattlePos = 1;
  if (has_battlepos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battlepos(), target);
  }

  // optional .pb.TBattleResult BattleResult = 2;
  if (has_battleresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battleresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerReportBattleReq)
  return target;
}

int TAdventureTowerReportBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAdventureTowerPos BattlePos = 1;
    if (has_battlepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlepos());
    }

    // optional .pb.TBattleResult BattleResult = 2;
    if (has_battleresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerReportBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerReportBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerReportBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerReportBattleReq::MergeFrom(const TAdventureTowerReportBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battlepos()) {
      mutable_battlepos()->::pb::TAdventureTowerPos::MergeFrom(from.battlepos());
    }
    if (from.has_battleresult()) {
      mutable_battleresult()->::pb::TBattleResult::MergeFrom(from.battleresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerReportBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerReportBattleReq::CopyFrom(const TAdventureTowerReportBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerReportBattleReq::IsInitialized() const {

  if (has_battleresult()) {
    if (!this->battleresult().IsInitialized()) return false;
  }
  return true;
}

void TAdventureTowerReportBattleReq::Swap(TAdventureTowerReportBattleReq* other) {
  if (other != this) {
    std::swap(battlepos_, other->battlepos_);
    std::swap(battleresult_, other->battleresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerReportBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerReportBattleReq_descriptor_;
  metadata.reflection = TAdventureTowerReportBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerReportBattleRsp::kBuffBoxFieldNumber;
const int TAdventureTowerReportBattleRsp::kMonsterInfoArrFieldNumber;
const int TAdventureTowerReportBattleRsp::kHeroStatusArrFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerReportBattleRsp::TAdventureTowerReportBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerReportBattleRsp)
}

void TAdventureTowerReportBattleRsp::InitAsDefaultInstance() {
  buffbox_ = const_cast< ::pb::TAdventureTowerBuffBox*>(&::pb::TAdventureTowerBuffBox::default_instance());
  monsterinfoarr_ = const_cast< ::pb::TAdventureMonsterInfo*>(&::pb::TAdventureMonsterInfo::default_instance());
}

TAdventureTowerReportBattleRsp::TAdventureTowerReportBattleRsp(const TAdventureTowerReportBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerReportBattleRsp)
}

void TAdventureTowerReportBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  buffbox_ = NULL;
  monsterinfoarr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerReportBattleRsp::~TAdventureTowerReportBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerReportBattleRsp)
  SharedDtor();
}

void TAdventureTowerReportBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete buffbox_;
    delete monsterinfoarr_;
  }
}

void TAdventureTowerReportBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerReportBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerReportBattleRsp_descriptor_;
}

const TAdventureTowerReportBattleRsp& TAdventureTowerReportBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerReportBattleRsp* TAdventureTowerReportBattleRsp::default_instance_ = NULL;

TAdventureTowerReportBattleRsp* TAdventureTowerReportBattleRsp::New() const {
  return new TAdventureTowerReportBattleRsp;
}

void TAdventureTowerReportBattleRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_buffbox()) {
      if (buffbox_ != NULL) buffbox_->::pb::TAdventureTowerBuffBox::Clear();
    }
    if (has_monsterinfoarr()) {
      if (monsterinfoarr_ != NULL) monsterinfoarr_->::pb::TAdventureMonsterInfo::Clear();
    }
  }
  herostatusarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerReportBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerReportBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAdventureTowerBuffBox BuffBox = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffbox()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MonsterInfoArr;
        break;
      }

      // optional .pb.TAdventureMonsterInfo MonsterInfoArr = 2;
      case 2: {
        if (tag == 18) {
         parse_MonsterInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monsterinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_HeroStatusArr;
        break;
      }

      // repeated .pb.TAdventureTowerHeroStatus HeroStatusArr = 3;
      case 3: {
        if (tag == 26) {
         parse_HeroStatusArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herostatusarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_HeroStatusArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerReportBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerReportBattleRsp)
  return false;
#undef DO_
}

void TAdventureTowerReportBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerReportBattleRsp)
  // optional .pb.TAdventureTowerBuffBox BuffBox = 1;
  if (has_buffbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buffbox(), output);
  }

  // optional .pb.TAdventureMonsterInfo MonsterInfoArr = 2;
  if (has_monsterinfoarr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monsterinfoarr(), output);
  }

  // repeated .pb.TAdventureTowerHeroStatus HeroStatusArr = 3;
  for (int i = 0; i < this->herostatusarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->herostatusarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerReportBattleRsp)
}

::google::protobuf::uint8* TAdventureTowerReportBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerReportBattleRsp)
  // optional .pb.TAdventureTowerBuffBox BuffBox = 1;
  if (has_buffbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buffbox(), target);
  }

  // optional .pb.TAdventureMonsterInfo MonsterInfoArr = 2;
  if (has_monsterinfoarr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monsterinfoarr(), target);
  }

  // repeated .pb.TAdventureTowerHeroStatus HeroStatusArr = 3;
  for (int i = 0; i < this->herostatusarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->herostatusarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerReportBattleRsp)
  return target;
}

int TAdventureTowerReportBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAdventureTowerBuffBox BuffBox = 1;
    if (has_buffbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffbox());
    }

    // optional .pb.TAdventureMonsterInfo MonsterInfoArr = 2;
    if (has_monsterinfoarr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monsterinfoarr());
    }

  }
  // repeated .pb.TAdventureTowerHeroStatus HeroStatusArr = 3;
  total_size += 1 * this->herostatusarr_size();
  for (int i = 0; i < this->herostatusarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herostatusarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerReportBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerReportBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerReportBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerReportBattleRsp::MergeFrom(const TAdventureTowerReportBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  herostatusarr_.MergeFrom(from.herostatusarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffbox()) {
      mutable_buffbox()->::pb::TAdventureTowerBuffBox::MergeFrom(from.buffbox());
    }
    if (from.has_monsterinfoarr()) {
      mutable_monsterinfoarr()->::pb::TAdventureMonsterInfo::MergeFrom(from.monsterinfoarr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerReportBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerReportBattleRsp::CopyFrom(const TAdventureTowerReportBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerReportBattleRsp::IsInitialized() const {

  return true;
}

void TAdventureTowerReportBattleRsp::Swap(TAdventureTowerReportBattleRsp* other) {
  if (other != this) {
    std::swap(buffbox_, other->buffbox_);
    std::swap(monsterinfoarr_, other->monsterinfoarr_);
    herostatusarr_.Swap(&other->herostatusarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerReportBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerReportBattleRsp_descriptor_;
  metadata.reflection = TAdventureTowerReportBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerReportPosReq::kPosXFieldNumber;
const int TAdventureTowerReportPosReq::kPosYFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerReportPosReq::TAdventureTowerReportPosReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerReportPosReq)
}

void TAdventureTowerReportPosReq::InitAsDefaultInstance() {
}

TAdventureTowerReportPosReq::TAdventureTowerReportPosReq(const TAdventureTowerReportPosReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerReportPosReq)
}

void TAdventureTowerReportPosReq::SharedCtor() {
  _cached_size_ = 0;
  posx_ = 0;
  posy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerReportPosReq::~TAdventureTowerReportPosReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerReportPosReq)
  SharedDtor();
}

void TAdventureTowerReportPosReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureTowerReportPosReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerReportPosReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerReportPosReq_descriptor_;
}

const TAdventureTowerReportPosReq& TAdventureTowerReportPosReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerReportPosReq* TAdventureTowerReportPosReq::default_instance_ = NULL;

TAdventureTowerReportPosReq* TAdventureTowerReportPosReq::New() const {
  return new TAdventureTowerReportPosReq;
}

void TAdventureTowerReportPosReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureTowerReportPosReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(posx_, posy_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerReportPosReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerReportPosReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PosX = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PosY;
        break;
      }

      // optional int32 PosY = 2;
      case 2: {
        if (tag == 16) {
         parse_PosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerReportPosReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerReportPosReq)
  return false;
#undef DO_
}

void TAdventureTowerReportPosReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerReportPosReq)
  // optional int32 PosX = 1;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->posx(), output);
  }

  // optional int32 PosY = 2;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerReportPosReq)
}

::google::protobuf::uint8* TAdventureTowerReportPosReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerReportPosReq)
  // optional int32 PosX = 1;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->posx(), target);
  }

  // optional int32 PosY = 2;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerReportPosReq)
  return target;
}

int TAdventureTowerReportPosReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PosX = 1;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 PosY = 2;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerReportPosReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerReportPosReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerReportPosReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerReportPosReq::MergeFrom(const TAdventureTowerReportPosReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerReportPosReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerReportPosReq::CopyFrom(const TAdventureTowerReportPosReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerReportPosReq::IsInitialized() const {

  return true;
}

void TAdventureTowerReportPosReq::Swap(TAdventureTowerReportPosReq* other) {
  if (other != this) {
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerReportPosReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerReportPosReq_descriptor_;
  metadata.reflection = TAdventureTowerReportPosReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerPassBlocksReq::kBlockArrFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerPassBlocksReq::TAdventureTowerPassBlocksReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerPassBlocksReq)
}

void TAdventureTowerPassBlocksReq::InitAsDefaultInstance() {
}

TAdventureTowerPassBlocksReq::TAdventureTowerPassBlocksReq(const TAdventureTowerPassBlocksReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerPassBlocksReq)
}

void TAdventureTowerPassBlocksReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerPassBlocksReq::~TAdventureTowerPassBlocksReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerPassBlocksReq)
  SharedDtor();
}

void TAdventureTowerPassBlocksReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureTowerPassBlocksReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerPassBlocksReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerPassBlocksReq_descriptor_;
}

const TAdventureTowerPassBlocksReq& TAdventureTowerPassBlocksReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerPassBlocksReq* TAdventureTowerPassBlocksReq::default_instance_ = NULL;

TAdventureTowerPassBlocksReq* TAdventureTowerPassBlocksReq::New() const {
  return new TAdventureTowerPassBlocksReq;
}

void TAdventureTowerPassBlocksReq::Clear() {
  blockarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerPassBlocksReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerPassBlocksReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TAdventureTowerPos BlockArr = 1;
      case 1: {
        if (tag == 10) {
         parse_BlockArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blockarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_BlockArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerPassBlocksReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerPassBlocksReq)
  return false;
#undef DO_
}

void TAdventureTowerPassBlocksReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerPassBlocksReq)
  // repeated .pb.TAdventureTowerPos BlockArr = 1;
  for (int i = 0; i < this->blockarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blockarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerPassBlocksReq)
}

::google::protobuf::uint8* TAdventureTowerPassBlocksReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerPassBlocksReq)
  // repeated .pb.TAdventureTowerPos BlockArr = 1;
  for (int i = 0; i < this->blockarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blockarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerPassBlocksReq)
  return target;
}

int TAdventureTowerPassBlocksReq::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TAdventureTowerPos BlockArr = 1;
  total_size += 1 * this->blockarr_size();
  for (int i = 0; i < this->blockarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blockarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerPassBlocksReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerPassBlocksReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerPassBlocksReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerPassBlocksReq::MergeFrom(const TAdventureTowerPassBlocksReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  blockarr_.MergeFrom(from.blockarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerPassBlocksReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerPassBlocksReq::CopyFrom(const TAdventureTowerPassBlocksReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerPassBlocksReq::IsInitialized() const {

  return true;
}

void TAdventureTowerPassBlocksReq::Swap(TAdventureTowerPassBlocksReq* other) {
  if (other != this) {
    blockarr_.Swap(&other->blockarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerPassBlocksReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerPassBlocksReq_descriptor_;
  metadata.reflection = TAdventureTowerPassBlocksReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTowerPos::kLayerIndexFieldNumber;
const int TAdventureTowerPos::kPosXFieldNumber;
const int TAdventureTowerPos::kPosYFieldNumber;
#endif  // !_MSC_VER

TAdventureTowerPos::TAdventureTowerPos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTowerPos)
}

void TAdventureTowerPos::InitAsDefaultInstance() {
}

TAdventureTowerPos::TAdventureTowerPos(const TAdventureTowerPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTowerPos)
}

void TAdventureTowerPos::SharedCtor() {
  _cached_size_ = 0;
  layerindex_ = 0u;
  posx_ = 0;
  posy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTowerPos::~TAdventureTowerPos() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTowerPos)
  SharedDtor();
}

void TAdventureTowerPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureTowerPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTowerPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTowerPos_descriptor_;
}

const TAdventureTowerPos& TAdventureTowerPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureTower_2eproto();
  return *default_instance_;
}

TAdventureTowerPos* TAdventureTowerPos::default_instance_ = NULL;

TAdventureTowerPos* TAdventureTowerPos::New() const {
  return new TAdventureTowerPos;
}

void TAdventureTowerPos::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureTowerPos*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(layerindex_, posy_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTowerPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTowerPos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerindex_)));
          set_has_layerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PosX;
        break;
      }

      // optional int32 PosX = 2;
      case 2: {
        if (tag == 16) {
         parse_PosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PosY;
        break;
      }

      // optional int32 PosY = 3;
      case 3: {
        if (tag == 24) {
         parse_PosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTowerPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTowerPos)
  return false;
#undef DO_
}

void TAdventureTowerPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTowerPos)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerindex(), output);
  }

  // optional int32 PosX = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posx(), output);
  }

  // optional int32 PosY = 3;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTowerPos)
}

::google::protobuf::uint8* TAdventureTowerPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTowerPos)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerindex(), target);
  }

  // optional int32 PosX = 2;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posx(), target);
  }

  // optional int32 PosY = 3;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTowerPos)
  return target;
}

int TAdventureTowerPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerIndex = 1;
    if (has_layerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerindex());
    }

    // optional int32 PosX = 2;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 PosY = 3;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTowerPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTowerPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTowerPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTowerPos::MergeFrom(const TAdventureTowerPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerindex()) {
      set_layerindex(from.layerindex());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTowerPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTowerPos::CopyFrom(const TAdventureTowerPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTowerPos::IsInitialized() const {

  return true;
}

void TAdventureTowerPos::Swap(TAdventureTowerPos* other) {
  if (other != this) {
    std::swap(layerindex_, other->layerindex_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTowerPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTowerPos_descriptor_;
  metadata.reflection = TAdventureTowerPos_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
