// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActBattlePass.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActBattlePass.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActBattlePassTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActBattlePassTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActBattlePassSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActBattlePassSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActBattlePassGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActBattlePassGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActBattlePassGetArrRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActBattlePassGetArrRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActBattlePassGetArrRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActBattlePassGetArrRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActBattlePassGetArrCostRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActBattlePassGetArrCostRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActBattlePassGetArrCostRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActBattlePassGetArrCostRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActBattlePassNotifySingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActBattlePassNotifySingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActBattlePassNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActBattlePassNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActBattlePass_2eproto() {
  protobuf_AddDesc_net_2fActBattlePass_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActBattlePass.proto");
  GOOGLE_CHECK(file != NULL);
  TActBattlePassTaskInfo_descriptor_ = file->message_type(0);
  static const int TActBattlePassTaskInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassTaskInfo, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassTaskInfo, num_),
  };
  TActBattlePassTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActBattlePassTaskInfo_descriptor_,
      TActBattlePassTaskInfo::default_instance_,
      TActBattlePassTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActBattlePassTaskInfo));
  TActBattlePassSingle_descriptor_ = file->message_type(1);
  static const int TActBattlePassSingle_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassSingle, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassSingle, buytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassSingle, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassSingle, arrtaskinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassSingle, arrrewardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassSingle, arrcostrewardinfo_),
  };
  TActBattlePassSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActBattlePassSingle_descriptor_,
      TActBattlePassSingle::default_instance_,
      TActBattlePassSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActBattlePassSingle));
  TActBattlePassGetInfoRsp_descriptor_ = file->message_type(2);
  static const int TActBattlePassGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassGetInfoRsp, arrinfo_),
  };
  TActBattlePassGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActBattlePassGetInfoRsp_descriptor_,
      TActBattlePassGetInfoRsp::default_instance_,
      TActBattlePassGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActBattlePassGetInfoRsp));
  TActBattlePassGetArrRewardReq_descriptor_ = file->message_type(3);
  static const int TActBattlePassGetArrRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassGetArrRewardReq, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassGetArrRewardReq, arrid_),
  };
  TActBattlePassGetArrRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActBattlePassGetArrRewardReq_descriptor_,
      TActBattlePassGetArrRewardReq::default_instance_,
      TActBattlePassGetArrRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassGetArrRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassGetArrRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActBattlePassGetArrRewardReq));
  TActBattlePassGetArrRewardRsp_descriptor_ = file->message_type(4);
  static const int TActBattlePassGetArrRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassGetArrRewardRsp, arrreward_),
  };
  TActBattlePassGetArrRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActBattlePassGetArrRewardRsp_descriptor_,
      TActBattlePassGetArrRewardRsp::default_instance_,
      TActBattlePassGetArrRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassGetArrRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassGetArrRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActBattlePassGetArrRewardRsp));
  TActBattlePassGetArrCostRewardReq_descriptor_ = file->message_type(5);
  static const int TActBattlePassGetArrCostRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassGetArrCostRewardReq, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassGetArrCostRewardReq, arrid_),
  };
  TActBattlePassGetArrCostRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActBattlePassGetArrCostRewardReq_descriptor_,
      TActBattlePassGetArrCostRewardReq::default_instance_,
      TActBattlePassGetArrCostRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassGetArrCostRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassGetArrCostRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActBattlePassGetArrCostRewardReq));
  TActBattlePassGetArrCostRewardRsp_descriptor_ = file->message_type(6);
  static const int TActBattlePassGetArrCostRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassGetArrCostRewardRsp, arrreward_),
  };
  TActBattlePassGetArrCostRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActBattlePassGetArrCostRewardRsp_descriptor_,
      TActBattlePassGetArrCostRewardRsp::default_instance_,
      TActBattlePassGetArrCostRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassGetArrCostRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassGetArrCostRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActBattlePassGetArrCostRewardRsp));
  TActBattlePassNotifySingle_descriptor_ = file->message_type(7);
  static const int TActBattlePassNotifySingle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassNotifySingle, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassNotifySingle, buytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassNotifySingle, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassNotifySingle, arrtaskinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassNotifySingle, arrcostrewardinfo_),
  };
  TActBattlePassNotifySingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActBattlePassNotifySingle_descriptor_,
      TActBattlePassNotifySingle::default_instance_,
      TActBattlePassNotifySingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassNotifySingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassNotifySingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActBattlePassNotifySingle));
  TActBattlePassNotify_descriptor_ = file->message_type(8);
  static const int TActBattlePassNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassNotify, arrnotify_),
  };
  TActBattlePassNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActBattlePassNotify_descriptor_,
      TActBattlePassNotify::default_instance_,
      TActBattlePassNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActBattlePassNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActBattlePassNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActBattlePass_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActBattlePassTaskInfo_descriptor_, &TActBattlePassTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActBattlePassSingle_descriptor_, &TActBattlePassSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActBattlePassGetInfoRsp_descriptor_, &TActBattlePassGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActBattlePassGetArrRewardReq_descriptor_, &TActBattlePassGetArrRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActBattlePassGetArrRewardRsp_descriptor_, &TActBattlePassGetArrRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActBattlePassGetArrCostRewardReq_descriptor_, &TActBattlePassGetArrCostRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActBattlePassGetArrCostRewardRsp_descriptor_, &TActBattlePassGetArrCostRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActBattlePassNotifySingle_descriptor_, &TActBattlePassNotifySingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActBattlePassNotify_descriptor_, &TActBattlePassNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActBattlePass_2eproto() {
  delete TActBattlePassTaskInfo::default_instance_;
  delete TActBattlePassTaskInfo_reflection_;
  delete TActBattlePassSingle::default_instance_;
  delete TActBattlePassSingle_reflection_;
  delete TActBattlePassGetInfoRsp::default_instance_;
  delete TActBattlePassGetInfoRsp_reflection_;
  delete TActBattlePassGetArrRewardReq::default_instance_;
  delete TActBattlePassGetArrRewardReq_reflection_;
  delete TActBattlePassGetArrRewardRsp::default_instance_;
  delete TActBattlePassGetArrRewardRsp_reflection_;
  delete TActBattlePassGetArrCostRewardReq::default_instance_;
  delete TActBattlePassGetArrCostRewardReq_reflection_;
  delete TActBattlePassGetArrCostRewardRsp::default_instance_;
  delete TActBattlePassGetArrCostRewardRsp_reflection_;
  delete TActBattlePassNotifySingle::default_instance_;
  delete TActBattlePassNotifySingle_reflection_;
  delete TActBattlePassNotify::default_instance_;
  delete TActBattlePassNotify_reflection_;
}

void protobuf_AddDesc_net_2fActBattlePass_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fOpenActivity_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027net/ActBattlePass.proto\022\002pb\032\026net/Commo"
    "nReward.proto\032\026net/OpenActivity.proto\"7\n"
    "\026TActBattlePassTaskInfo\022\020\n\010TaskType\030\001 \001("
    "\r\022\013\n\003Num\030\002 \001(\004\"\343\001\n\024TActBattlePassSingle\022"
    "\021\n\tProductId\030\001 \001(\r\022\017\n\007BuyTime\030\002 \001(\004\022\022\n\nT"
    "otalScore\030\003 \001(\r\022/\n\013ArrTaskInfo\030\004 \003(\0132\032.p"
    "b.TActBattlePassTaskInfo\022.\n\rArrRewardInf"
    "o\030\005 \003(\0132\027.pb.TActivityRewardInfo\0222\n\021ArrC"
    "ostRewardInfo\030\006 \003(\0132\027.pb.TActivityReward"
    "Info\"E\n\030TActBattlePassGetInfoRsp\022)\n\007ArrI"
    "nfo\030\001 \003(\0132\030.pb.TActBattlePassSingle\"A\n\035T"
    "ActBattlePassGetArrRewardReq\022\021\n\tProductI"
    "d\030\001 \001(\r\022\r\n\005ArrId\030\002 \003(\r\"E\n\035TActBattlePass"
    "GetArrRewardRsp\022$\n\tArrReward\030\001 \003(\0132\021.pb."
    "TCommonReward\"E\n!TActBattlePassGetArrCos"
    "tRewardReq\022\021\n\tProductId\030\001 \001(\r\022\r\n\005ArrId\030\002"
    " \003(\r\"I\n!TActBattlePassGetArrCostRewardRs"
    "p\022$\n\tArrReward\030\001 \003(\0132\021.pb.TCommonReward\""
    "\271\001\n\032TActBattlePassNotifySingle\022\021\n\tProduc"
    "tId\030\001 \001(\r\022\017\n\007BuyTime\030\002 \001(\004\022\022\n\nTotalScore"
    "\030\003 \001(\r\022/\n\013ArrTaskInfo\030\004 \003(\0132\032.pb.TActBat"
    "tlePassTaskInfo\0222\n\021ArrCostRewardInfo\030\005 \003"
    "(\0132\027.pb.TActivityRewardInfo\"I\n\024TActBattl"
    "ePassNotify\0221\n\tArrNotify\030\001 \003(\0132\036.pb.TAct"
    "BattlePassNotifySingle", 982);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActBattlePass.proto", &protobuf_RegisterTypes);
  TActBattlePassTaskInfo::default_instance_ = new TActBattlePassTaskInfo();
  TActBattlePassSingle::default_instance_ = new TActBattlePassSingle();
  TActBattlePassGetInfoRsp::default_instance_ = new TActBattlePassGetInfoRsp();
  TActBattlePassGetArrRewardReq::default_instance_ = new TActBattlePassGetArrRewardReq();
  TActBattlePassGetArrRewardRsp::default_instance_ = new TActBattlePassGetArrRewardRsp();
  TActBattlePassGetArrCostRewardReq::default_instance_ = new TActBattlePassGetArrCostRewardReq();
  TActBattlePassGetArrCostRewardRsp::default_instance_ = new TActBattlePassGetArrCostRewardRsp();
  TActBattlePassNotifySingle::default_instance_ = new TActBattlePassNotifySingle();
  TActBattlePassNotify::default_instance_ = new TActBattlePassNotify();
  TActBattlePassTaskInfo::default_instance_->InitAsDefaultInstance();
  TActBattlePassSingle::default_instance_->InitAsDefaultInstance();
  TActBattlePassGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActBattlePassGetArrRewardReq::default_instance_->InitAsDefaultInstance();
  TActBattlePassGetArrRewardRsp::default_instance_->InitAsDefaultInstance();
  TActBattlePassGetArrCostRewardReq::default_instance_->InitAsDefaultInstance();
  TActBattlePassGetArrCostRewardRsp::default_instance_->InitAsDefaultInstance();
  TActBattlePassNotifySingle::default_instance_->InitAsDefaultInstance();
  TActBattlePassNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActBattlePass_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActBattlePass_2eproto {
  StaticDescriptorInitializer_net_2fActBattlePass_2eproto() {
    protobuf_AddDesc_net_2fActBattlePass_2eproto();
  }
} static_descriptor_initializer_net_2fActBattlePass_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActBattlePassTaskInfo::kTaskTypeFieldNumber;
const int TActBattlePassTaskInfo::kNumFieldNumber;
#endif  // !_MSC_VER

TActBattlePassTaskInfo::TActBattlePassTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActBattlePassTaskInfo)
}

void TActBattlePassTaskInfo::InitAsDefaultInstance() {
}

TActBattlePassTaskInfo::TActBattlePassTaskInfo(const TActBattlePassTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActBattlePassTaskInfo)
}

void TActBattlePassTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  tasktype_ = 0u;
  num_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActBattlePassTaskInfo::~TActBattlePassTaskInfo() {
  // @@protoc_insertion_point(destructor:pb.TActBattlePassTaskInfo)
  SharedDtor();
}

void TActBattlePassTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActBattlePassTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActBattlePassTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActBattlePassTaskInfo_descriptor_;
}

const TActBattlePassTaskInfo& TActBattlePassTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActBattlePass_2eproto();
  return *default_instance_;
}

TActBattlePassTaskInfo* TActBattlePassTaskInfo::default_instance_ = NULL;

TActBattlePassTaskInfo* TActBattlePassTaskInfo::New() const {
  return new TActBattlePassTaskInfo;
}

void TActBattlePassTaskInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActBattlePassTaskInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(num_, tasktype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActBattlePassTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActBattlePassTaskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint64 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActBattlePassTaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActBattlePassTaskInfo)
  return false;
#undef DO_
}

void TActBattlePassTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActBattlePassTaskInfo)
  // optional uint32 TaskType = 1;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tasktype(), output);
  }

  // optional uint64 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActBattlePassTaskInfo)
}

::google::protobuf::uint8* TActBattlePassTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActBattlePassTaskInfo)
  // optional uint32 TaskType = 1;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tasktype(), target);
  }

  // optional uint64 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActBattlePassTaskInfo)
  return target;
}

int TActBattlePassTaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskType = 1;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasktype());
    }

    // optional uint64 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActBattlePassTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActBattlePassTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActBattlePassTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActBattlePassTaskInfo::MergeFrom(const TActBattlePassTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActBattlePassTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActBattlePassTaskInfo::CopyFrom(const TActBattlePassTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActBattlePassTaskInfo::IsInitialized() const {

  return true;
}

void TActBattlePassTaskInfo::Swap(TActBattlePassTaskInfo* other) {
  if (other != this) {
    std::swap(tasktype_, other->tasktype_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActBattlePassTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActBattlePassTaskInfo_descriptor_;
  metadata.reflection = TActBattlePassTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActBattlePassSingle::kProductIdFieldNumber;
const int TActBattlePassSingle::kBuyTimeFieldNumber;
const int TActBattlePassSingle::kTotalScoreFieldNumber;
const int TActBattlePassSingle::kArrTaskInfoFieldNumber;
const int TActBattlePassSingle::kArrRewardInfoFieldNumber;
const int TActBattlePassSingle::kArrCostRewardInfoFieldNumber;
#endif  // !_MSC_VER

TActBattlePassSingle::TActBattlePassSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActBattlePassSingle)
}

void TActBattlePassSingle::InitAsDefaultInstance() {
}

TActBattlePassSingle::TActBattlePassSingle(const TActBattlePassSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActBattlePassSingle)
}

void TActBattlePassSingle::SharedCtor() {
  _cached_size_ = 0;
  productid_ = 0u;
  buytime_ = GOOGLE_ULONGLONG(0);
  totalscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActBattlePassSingle::~TActBattlePassSingle() {
  // @@protoc_insertion_point(destructor:pb.TActBattlePassSingle)
  SharedDtor();
}

void TActBattlePassSingle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActBattlePassSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActBattlePassSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActBattlePassSingle_descriptor_;
}

const TActBattlePassSingle& TActBattlePassSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActBattlePass_2eproto();
  return *default_instance_;
}

TActBattlePassSingle* TActBattlePassSingle::default_instance_ = NULL;

TActBattlePassSingle* TActBattlePassSingle::New() const {
  return new TActBattlePassSingle;
}

void TActBattlePassSingle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActBattlePassSingle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buytime_, totalscore_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrtaskinfo_.Clear();
  arrrewardinfo_.Clear();
  arrcostrewardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActBattlePassSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActBattlePassSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ProductId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyTime;
        break;
      }

      // optional uint64 BuyTime = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buytime_)));
          set_has_buytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TotalScore;
        break;
      }

      // optional uint32 TotalScore = 3;
      case 3: {
        if (tag == 24) {
         parse_TotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrTaskInfo;
        break;
      }

      // repeated .pb.TActBattlePassTaskInfo ArrTaskInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_ArrTaskInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtaskinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrTaskInfo;
        if (input->ExpectTag(42)) goto parse_ArrRewardInfo;
        break;
      }

      // repeated .pb.TActivityRewardInfo ArrRewardInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_ArrRewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ArrRewardInfo;
        if (input->ExpectTag(50)) goto parse_ArrCostRewardInfo;
        break;
      }

      // repeated .pb.TActivityRewardInfo ArrCostRewardInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_ArrCostRewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrcostrewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ArrCostRewardInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActBattlePassSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActBattlePassSingle)
  return false;
#undef DO_
}

void TActBattlePassSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActBattlePassSingle)
  // optional uint32 ProductId = 1;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->productid(), output);
  }

  // optional uint64 BuyTime = 2;
  if (has_buytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->buytime(), output);
  }

  // optional uint32 TotalScore = 3;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totalscore(), output);
  }

  // repeated .pb.TActBattlePassTaskInfo ArrTaskInfo = 4;
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arrtaskinfo(i), output);
  }

  // repeated .pb.TActivityRewardInfo ArrRewardInfo = 5;
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->arrrewardinfo(i), output);
  }

  // repeated .pb.TActivityRewardInfo ArrCostRewardInfo = 6;
  for (int i = 0; i < this->arrcostrewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->arrcostrewardinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActBattlePassSingle)
}

::google::protobuf::uint8* TActBattlePassSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActBattlePassSingle)
  // optional uint32 ProductId = 1;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->productid(), target);
  }

  // optional uint64 BuyTime = 2;
  if (has_buytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->buytime(), target);
  }

  // optional uint32 TotalScore = 3;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totalscore(), target);
  }

  // repeated .pb.TActBattlePassTaskInfo ArrTaskInfo = 4;
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arrtaskinfo(i), target);
  }

  // repeated .pb.TActivityRewardInfo ArrRewardInfo = 5;
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->arrrewardinfo(i), target);
  }

  // repeated .pb.TActivityRewardInfo ArrCostRewardInfo = 6;
  for (int i = 0; i < this->arrcostrewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->arrcostrewardinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActBattlePassSingle)
  return target;
}

int TActBattlePassSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ProductId = 1;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->productid());
    }

    // optional uint64 BuyTime = 2;
    if (has_buytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buytime());
    }

    // optional uint32 TotalScore = 3;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalscore());
    }

  }
  // repeated .pb.TActBattlePassTaskInfo ArrTaskInfo = 4;
  total_size += 1 * this->arrtaskinfo_size();
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtaskinfo(i));
  }

  // repeated .pb.TActivityRewardInfo ArrRewardInfo = 5;
  total_size += 1 * this->arrrewardinfo_size();
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrewardinfo(i));
  }

  // repeated .pb.TActivityRewardInfo ArrCostRewardInfo = 6;
  total_size += 1 * this->arrcostrewardinfo_size();
  for (int i = 0; i < this->arrcostrewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrcostrewardinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActBattlePassSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActBattlePassSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActBattlePassSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActBattlePassSingle::MergeFrom(const TActBattlePassSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrtaskinfo_.MergeFrom(from.arrtaskinfo_);
  arrrewardinfo_.MergeFrom(from.arrrewardinfo_);
  arrcostrewardinfo_.MergeFrom(from.arrcostrewardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_buytime()) {
      set_buytime(from.buytime());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActBattlePassSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActBattlePassSingle::CopyFrom(const TActBattlePassSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActBattlePassSingle::IsInitialized() const {

  return true;
}

void TActBattlePassSingle::Swap(TActBattlePassSingle* other) {
  if (other != this) {
    std::swap(productid_, other->productid_);
    std::swap(buytime_, other->buytime_);
    std::swap(totalscore_, other->totalscore_);
    arrtaskinfo_.Swap(&other->arrtaskinfo_);
    arrrewardinfo_.Swap(&other->arrrewardinfo_);
    arrcostrewardinfo_.Swap(&other->arrcostrewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActBattlePassSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActBattlePassSingle_descriptor_;
  metadata.reflection = TActBattlePassSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActBattlePassGetInfoRsp::kArrInfoFieldNumber;
#endif  // !_MSC_VER

TActBattlePassGetInfoRsp::TActBattlePassGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActBattlePassGetInfoRsp)
}

void TActBattlePassGetInfoRsp::InitAsDefaultInstance() {
}

TActBattlePassGetInfoRsp::TActBattlePassGetInfoRsp(const TActBattlePassGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActBattlePassGetInfoRsp)
}

void TActBattlePassGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActBattlePassGetInfoRsp::~TActBattlePassGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActBattlePassGetInfoRsp)
  SharedDtor();
}

void TActBattlePassGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActBattlePassGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActBattlePassGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActBattlePassGetInfoRsp_descriptor_;
}

const TActBattlePassGetInfoRsp& TActBattlePassGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActBattlePass_2eproto();
  return *default_instance_;
}

TActBattlePassGetInfoRsp* TActBattlePassGetInfoRsp::default_instance_ = NULL;

TActBattlePassGetInfoRsp* TActBattlePassGetInfoRsp::New() const {
  return new TActBattlePassGetInfoRsp;
}

void TActBattlePassGetInfoRsp::Clear() {
  arrinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActBattlePassGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActBattlePassGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActBattlePassSingle ArrInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActBattlePassGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActBattlePassGetInfoRsp)
  return false;
#undef DO_
}

void TActBattlePassGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActBattlePassGetInfoRsp)
  // repeated .pb.TActBattlePassSingle ArrInfo = 1;
  for (int i = 0; i < this->arrinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActBattlePassGetInfoRsp)
}

::google::protobuf::uint8* TActBattlePassGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActBattlePassGetInfoRsp)
  // repeated .pb.TActBattlePassSingle ArrInfo = 1;
  for (int i = 0; i < this->arrinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActBattlePassGetInfoRsp)
  return target;
}

int TActBattlePassGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActBattlePassSingle ArrInfo = 1;
  total_size += 1 * this->arrinfo_size();
  for (int i = 0; i < this->arrinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActBattlePassGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActBattlePassGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActBattlePassGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActBattlePassGetInfoRsp::MergeFrom(const TActBattlePassGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrinfo_.MergeFrom(from.arrinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActBattlePassGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActBattlePassGetInfoRsp::CopyFrom(const TActBattlePassGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActBattlePassGetInfoRsp::IsInitialized() const {

  return true;
}

void TActBattlePassGetInfoRsp::Swap(TActBattlePassGetInfoRsp* other) {
  if (other != this) {
    arrinfo_.Swap(&other->arrinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActBattlePassGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActBattlePassGetInfoRsp_descriptor_;
  metadata.reflection = TActBattlePassGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActBattlePassGetArrRewardReq::kProductIdFieldNumber;
const int TActBattlePassGetArrRewardReq::kArrIdFieldNumber;
#endif  // !_MSC_VER

TActBattlePassGetArrRewardReq::TActBattlePassGetArrRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActBattlePassGetArrRewardReq)
}

void TActBattlePassGetArrRewardReq::InitAsDefaultInstance() {
}

TActBattlePassGetArrRewardReq::TActBattlePassGetArrRewardReq(const TActBattlePassGetArrRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActBattlePassGetArrRewardReq)
}

void TActBattlePassGetArrRewardReq::SharedCtor() {
  _cached_size_ = 0;
  productid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActBattlePassGetArrRewardReq::~TActBattlePassGetArrRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActBattlePassGetArrRewardReq)
  SharedDtor();
}

void TActBattlePassGetArrRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActBattlePassGetArrRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActBattlePassGetArrRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActBattlePassGetArrRewardReq_descriptor_;
}

const TActBattlePassGetArrRewardReq& TActBattlePassGetArrRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActBattlePass_2eproto();
  return *default_instance_;
}

TActBattlePassGetArrRewardReq* TActBattlePassGetArrRewardReq::default_instance_ = NULL;

TActBattlePassGetArrRewardReq* TActBattlePassGetArrRewardReq::New() const {
  return new TActBattlePassGetArrRewardReq;
}

void TActBattlePassGetArrRewardReq::Clear() {
  productid_ = 0u;
  arrid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActBattlePassGetArrRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActBattlePassGetArrRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ProductId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ArrId;
        break;
      }

      // repeated uint32 ArrId = 2;
      case 2: {
        if (tag == 16) {
         parse_ArrId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_arrid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arrid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ArrId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActBattlePassGetArrRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActBattlePassGetArrRewardReq)
  return false;
#undef DO_
}

void TActBattlePassGetArrRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActBattlePassGetArrRewardReq)
  // optional uint32 ProductId = 1;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->productid(), output);
  }

  // repeated uint32 ArrId = 2;
  for (int i = 0; i < this->arrid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->arrid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActBattlePassGetArrRewardReq)
}

::google::protobuf::uint8* TActBattlePassGetArrRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActBattlePassGetArrRewardReq)
  // optional uint32 ProductId = 1;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->productid(), target);
  }

  // repeated uint32 ArrId = 2;
  for (int i = 0; i < this->arrid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->arrid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActBattlePassGetArrRewardReq)
  return target;
}

int TActBattlePassGetArrRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ProductId = 1;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->productid());
    }

  }
  // repeated uint32 ArrId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arrid(i));
    }
    total_size += 1 * this->arrid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActBattlePassGetArrRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActBattlePassGetArrRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActBattlePassGetArrRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActBattlePassGetArrRewardReq::MergeFrom(const TActBattlePassGetArrRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrid_.MergeFrom(from.arrid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productid()) {
      set_productid(from.productid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActBattlePassGetArrRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActBattlePassGetArrRewardReq::CopyFrom(const TActBattlePassGetArrRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActBattlePassGetArrRewardReq::IsInitialized() const {

  return true;
}

void TActBattlePassGetArrRewardReq::Swap(TActBattlePassGetArrRewardReq* other) {
  if (other != this) {
    std::swap(productid_, other->productid_);
    arrid_.Swap(&other->arrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActBattlePassGetArrRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActBattlePassGetArrRewardReq_descriptor_;
  metadata.reflection = TActBattlePassGetArrRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActBattlePassGetArrRewardRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActBattlePassGetArrRewardRsp::TActBattlePassGetArrRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActBattlePassGetArrRewardRsp)
}

void TActBattlePassGetArrRewardRsp::InitAsDefaultInstance() {
}

TActBattlePassGetArrRewardRsp::TActBattlePassGetArrRewardRsp(const TActBattlePassGetArrRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActBattlePassGetArrRewardRsp)
}

void TActBattlePassGetArrRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActBattlePassGetArrRewardRsp::~TActBattlePassGetArrRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TActBattlePassGetArrRewardRsp)
  SharedDtor();
}

void TActBattlePassGetArrRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActBattlePassGetArrRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActBattlePassGetArrRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActBattlePassGetArrRewardRsp_descriptor_;
}

const TActBattlePassGetArrRewardRsp& TActBattlePassGetArrRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActBattlePass_2eproto();
  return *default_instance_;
}

TActBattlePassGetArrRewardRsp* TActBattlePassGetArrRewardRsp::default_instance_ = NULL;

TActBattlePassGetArrRewardRsp* TActBattlePassGetArrRewardRsp::New() const {
  return new TActBattlePassGetArrRewardRsp;
}

void TActBattlePassGetArrRewardRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActBattlePassGetArrRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActBattlePassGetArrRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActBattlePassGetArrRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActBattlePassGetArrRewardRsp)
  return false;
#undef DO_
}

void TActBattlePassGetArrRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActBattlePassGetArrRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActBattlePassGetArrRewardRsp)
}

::google::protobuf::uint8* TActBattlePassGetArrRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActBattlePassGetArrRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActBattlePassGetArrRewardRsp)
  return target;
}

int TActBattlePassGetArrRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActBattlePassGetArrRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActBattlePassGetArrRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActBattlePassGetArrRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActBattlePassGetArrRewardRsp::MergeFrom(const TActBattlePassGetArrRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActBattlePassGetArrRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActBattlePassGetArrRewardRsp::CopyFrom(const TActBattlePassGetArrRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActBattlePassGetArrRewardRsp::IsInitialized() const {

  return true;
}

void TActBattlePassGetArrRewardRsp::Swap(TActBattlePassGetArrRewardRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActBattlePassGetArrRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActBattlePassGetArrRewardRsp_descriptor_;
  metadata.reflection = TActBattlePassGetArrRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActBattlePassGetArrCostRewardReq::kProductIdFieldNumber;
const int TActBattlePassGetArrCostRewardReq::kArrIdFieldNumber;
#endif  // !_MSC_VER

TActBattlePassGetArrCostRewardReq::TActBattlePassGetArrCostRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActBattlePassGetArrCostRewardReq)
}

void TActBattlePassGetArrCostRewardReq::InitAsDefaultInstance() {
}

TActBattlePassGetArrCostRewardReq::TActBattlePassGetArrCostRewardReq(const TActBattlePassGetArrCostRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActBattlePassGetArrCostRewardReq)
}

void TActBattlePassGetArrCostRewardReq::SharedCtor() {
  _cached_size_ = 0;
  productid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActBattlePassGetArrCostRewardReq::~TActBattlePassGetArrCostRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActBattlePassGetArrCostRewardReq)
  SharedDtor();
}

void TActBattlePassGetArrCostRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActBattlePassGetArrCostRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActBattlePassGetArrCostRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActBattlePassGetArrCostRewardReq_descriptor_;
}

const TActBattlePassGetArrCostRewardReq& TActBattlePassGetArrCostRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActBattlePass_2eproto();
  return *default_instance_;
}

TActBattlePassGetArrCostRewardReq* TActBattlePassGetArrCostRewardReq::default_instance_ = NULL;

TActBattlePassGetArrCostRewardReq* TActBattlePassGetArrCostRewardReq::New() const {
  return new TActBattlePassGetArrCostRewardReq;
}

void TActBattlePassGetArrCostRewardReq::Clear() {
  productid_ = 0u;
  arrid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActBattlePassGetArrCostRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActBattlePassGetArrCostRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ProductId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ArrId;
        break;
      }

      // repeated uint32 ArrId = 2;
      case 2: {
        if (tag == 16) {
         parse_ArrId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_arrid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arrid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ArrId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActBattlePassGetArrCostRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActBattlePassGetArrCostRewardReq)
  return false;
#undef DO_
}

void TActBattlePassGetArrCostRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActBattlePassGetArrCostRewardReq)
  // optional uint32 ProductId = 1;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->productid(), output);
  }

  // repeated uint32 ArrId = 2;
  for (int i = 0; i < this->arrid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->arrid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActBattlePassGetArrCostRewardReq)
}

::google::protobuf::uint8* TActBattlePassGetArrCostRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActBattlePassGetArrCostRewardReq)
  // optional uint32 ProductId = 1;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->productid(), target);
  }

  // repeated uint32 ArrId = 2;
  for (int i = 0; i < this->arrid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->arrid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActBattlePassGetArrCostRewardReq)
  return target;
}

int TActBattlePassGetArrCostRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ProductId = 1;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->productid());
    }

  }
  // repeated uint32 ArrId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arrid(i));
    }
    total_size += 1 * this->arrid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActBattlePassGetArrCostRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActBattlePassGetArrCostRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActBattlePassGetArrCostRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActBattlePassGetArrCostRewardReq::MergeFrom(const TActBattlePassGetArrCostRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrid_.MergeFrom(from.arrid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productid()) {
      set_productid(from.productid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActBattlePassGetArrCostRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActBattlePassGetArrCostRewardReq::CopyFrom(const TActBattlePassGetArrCostRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActBattlePassGetArrCostRewardReq::IsInitialized() const {

  return true;
}

void TActBattlePassGetArrCostRewardReq::Swap(TActBattlePassGetArrCostRewardReq* other) {
  if (other != this) {
    std::swap(productid_, other->productid_);
    arrid_.Swap(&other->arrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActBattlePassGetArrCostRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActBattlePassGetArrCostRewardReq_descriptor_;
  metadata.reflection = TActBattlePassGetArrCostRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActBattlePassGetArrCostRewardRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActBattlePassGetArrCostRewardRsp::TActBattlePassGetArrCostRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActBattlePassGetArrCostRewardRsp)
}

void TActBattlePassGetArrCostRewardRsp::InitAsDefaultInstance() {
}

TActBattlePassGetArrCostRewardRsp::TActBattlePassGetArrCostRewardRsp(const TActBattlePassGetArrCostRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActBattlePassGetArrCostRewardRsp)
}

void TActBattlePassGetArrCostRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActBattlePassGetArrCostRewardRsp::~TActBattlePassGetArrCostRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TActBattlePassGetArrCostRewardRsp)
  SharedDtor();
}

void TActBattlePassGetArrCostRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActBattlePassGetArrCostRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActBattlePassGetArrCostRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActBattlePassGetArrCostRewardRsp_descriptor_;
}

const TActBattlePassGetArrCostRewardRsp& TActBattlePassGetArrCostRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActBattlePass_2eproto();
  return *default_instance_;
}

TActBattlePassGetArrCostRewardRsp* TActBattlePassGetArrCostRewardRsp::default_instance_ = NULL;

TActBattlePassGetArrCostRewardRsp* TActBattlePassGetArrCostRewardRsp::New() const {
  return new TActBattlePassGetArrCostRewardRsp;
}

void TActBattlePassGetArrCostRewardRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActBattlePassGetArrCostRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActBattlePassGetArrCostRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActBattlePassGetArrCostRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActBattlePassGetArrCostRewardRsp)
  return false;
#undef DO_
}

void TActBattlePassGetArrCostRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActBattlePassGetArrCostRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActBattlePassGetArrCostRewardRsp)
}

::google::protobuf::uint8* TActBattlePassGetArrCostRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActBattlePassGetArrCostRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActBattlePassGetArrCostRewardRsp)
  return target;
}

int TActBattlePassGetArrCostRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActBattlePassGetArrCostRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActBattlePassGetArrCostRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActBattlePassGetArrCostRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActBattlePassGetArrCostRewardRsp::MergeFrom(const TActBattlePassGetArrCostRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActBattlePassGetArrCostRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActBattlePassGetArrCostRewardRsp::CopyFrom(const TActBattlePassGetArrCostRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActBattlePassGetArrCostRewardRsp::IsInitialized() const {

  return true;
}

void TActBattlePassGetArrCostRewardRsp::Swap(TActBattlePassGetArrCostRewardRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActBattlePassGetArrCostRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActBattlePassGetArrCostRewardRsp_descriptor_;
  metadata.reflection = TActBattlePassGetArrCostRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActBattlePassNotifySingle::kProductIdFieldNumber;
const int TActBattlePassNotifySingle::kBuyTimeFieldNumber;
const int TActBattlePassNotifySingle::kTotalScoreFieldNumber;
const int TActBattlePassNotifySingle::kArrTaskInfoFieldNumber;
const int TActBattlePassNotifySingle::kArrCostRewardInfoFieldNumber;
#endif  // !_MSC_VER

TActBattlePassNotifySingle::TActBattlePassNotifySingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActBattlePassNotifySingle)
}

void TActBattlePassNotifySingle::InitAsDefaultInstance() {
}

TActBattlePassNotifySingle::TActBattlePassNotifySingle(const TActBattlePassNotifySingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActBattlePassNotifySingle)
}

void TActBattlePassNotifySingle::SharedCtor() {
  _cached_size_ = 0;
  productid_ = 0u;
  buytime_ = GOOGLE_ULONGLONG(0);
  totalscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActBattlePassNotifySingle::~TActBattlePassNotifySingle() {
  // @@protoc_insertion_point(destructor:pb.TActBattlePassNotifySingle)
  SharedDtor();
}

void TActBattlePassNotifySingle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActBattlePassNotifySingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActBattlePassNotifySingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActBattlePassNotifySingle_descriptor_;
}

const TActBattlePassNotifySingle& TActBattlePassNotifySingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActBattlePass_2eproto();
  return *default_instance_;
}

TActBattlePassNotifySingle* TActBattlePassNotifySingle::default_instance_ = NULL;

TActBattlePassNotifySingle* TActBattlePassNotifySingle::New() const {
  return new TActBattlePassNotifySingle;
}

void TActBattlePassNotifySingle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActBattlePassNotifySingle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buytime_, totalscore_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrtaskinfo_.Clear();
  arrcostrewardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActBattlePassNotifySingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActBattlePassNotifySingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ProductId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyTime;
        break;
      }

      // optional uint64 BuyTime = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buytime_)));
          set_has_buytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TotalScore;
        break;
      }

      // optional uint32 TotalScore = 3;
      case 3: {
        if (tag == 24) {
         parse_TotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrTaskInfo;
        break;
      }

      // repeated .pb.TActBattlePassTaskInfo ArrTaskInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_ArrTaskInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtaskinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrTaskInfo;
        if (input->ExpectTag(42)) goto parse_ArrCostRewardInfo;
        break;
      }

      // repeated .pb.TActivityRewardInfo ArrCostRewardInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_ArrCostRewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrcostrewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ArrCostRewardInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActBattlePassNotifySingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActBattlePassNotifySingle)
  return false;
#undef DO_
}

void TActBattlePassNotifySingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActBattlePassNotifySingle)
  // optional uint32 ProductId = 1;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->productid(), output);
  }

  // optional uint64 BuyTime = 2;
  if (has_buytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->buytime(), output);
  }

  // optional uint32 TotalScore = 3;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totalscore(), output);
  }

  // repeated .pb.TActBattlePassTaskInfo ArrTaskInfo = 4;
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arrtaskinfo(i), output);
  }

  // repeated .pb.TActivityRewardInfo ArrCostRewardInfo = 5;
  for (int i = 0; i < this->arrcostrewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->arrcostrewardinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActBattlePassNotifySingle)
}

::google::protobuf::uint8* TActBattlePassNotifySingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActBattlePassNotifySingle)
  // optional uint32 ProductId = 1;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->productid(), target);
  }

  // optional uint64 BuyTime = 2;
  if (has_buytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->buytime(), target);
  }

  // optional uint32 TotalScore = 3;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totalscore(), target);
  }

  // repeated .pb.TActBattlePassTaskInfo ArrTaskInfo = 4;
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arrtaskinfo(i), target);
  }

  // repeated .pb.TActivityRewardInfo ArrCostRewardInfo = 5;
  for (int i = 0; i < this->arrcostrewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->arrcostrewardinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActBattlePassNotifySingle)
  return target;
}

int TActBattlePassNotifySingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ProductId = 1;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->productid());
    }

    // optional uint64 BuyTime = 2;
    if (has_buytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buytime());
    }

    // optional uint32 TotalScore = 3;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalscore());
    }

  }
  // repeated .pb.TActBattlePassTaskInfo ArrTaskInfo = 4;
  total_size += 1 * this->arrtaskinfo_size();
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtaskinfo(i));
  }

  // repeated .pb.TActivityRewardInfo ArrCostRewardInfo = 5;
  total_size += 1 * this->arrcostrewardinfo_size();
  for (int i = 0; i < this->arrcostrewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrcostrewardinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActBattlePassNotifySingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActBattlePassNotifySingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActBattlePassNotifySingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActBattlePassNotifySingle::MergeFrom(const TActBattlePassNotifySingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrtaskinfo_.MergeFrom(from.arrtaskinfo_);
  arrcostrewardinfo_.MergeFrom(from.arrcostrewardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_buytime()) {
      set_buytime(from.buytime());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActBattlePassNotifySingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActBattlePassNotifySingle::CopyFrom(const TActBattlePassNotifySingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActBattlePassNotifySingle::IsInitialized() const {

  return true;
}

void TActBattlePassNotifySingle::Swap(TActBattlePassNotifySingle* other) {
  if (other != this) {
    std::swap(productid_, other->productid_);
    std::swap(buytime_, other->buytime_);
    std::swap(totalscore_, other->totalscore_);
    arrtaskinfo_.Swap(&other->arrtaskinfo_);
    arrcostrewardinfo_.Swap(&other->arrcostrewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActBattlePassNotifySingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActBattlePassNotifySingle_descriptor_;
  metadata.reflection = TActBattlePassNotifySingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActBattlePassNotify::kArrNotifyFieldNumber;
#endif  // !_MSC_VER

TActBattlePassNotify::TActBattlePassNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActBattlePassNotify)
}

void TActBattlePassNotify::InitAsDefaultInstance() {
}

TActBattlePassNotify::TActBattlePassNotify(const TActBattlePassNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActBattlePassNotify)
}

void TActBattlePassNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActBattlePassNotify::~TActBattlePassNotify() {
  // @@protoc_insertion_point(destructor:pb.TActBattlePassNotify)
  SharedDtor();
}

void TActBattlePassNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActBattlePassNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActBattlePassNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActBattlePassNotify_descriptor_;
}

const TActBattlePassNotify& TActBattlePassNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActBattlePass_2eproto();
  return *default_instance_;
}

TActBattlePassNotify* TActBattlePassNotify::default_instance_ = NULL;

TActBattlePassNotify* TActBattlePassNotify::New() const {
  return new TActBattlePassNotify;
}

void TActBattlePassNotify::Clear() {
  arrnotify_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActBattlePassNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActBattlePassNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActBattlePassNotifySingle ArrNotify = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrNotify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrnotify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrNotify;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActBattlePassNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActBattlePassNotify)
  return false;
#undef DO_
}

void TActBattlePassNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActBattlePassNotify)
  // repeated .pb.TActBattlePassNotifySingle ArrNotify = 1;
  for (int i = 0; i < this->arrnotify_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrnotify(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActBattlePassNotify)
}

::google::protobuf::uint8* TActBattlePassNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActBattlePassNotify)
  // repeated .pb.TActBattlePassNotifySingle ArrNotify = 1;
  for (int i = 0; i < this->arrnotify_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrnotify(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActBattlePassNotify)
  return target;
}

int TActBattlePassNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActBattlePassNotifySingle ArrNotify = 1;
  total_size += 1 * this->arrnotify_size();
  for (int i = 0; i < this->arrnotify_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrnotify(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActBattlePassNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActBattlePassNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActBattlePassNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActBattlePassNotify::MergeFrom(const TActBattlePassNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrnotify_.MergeFrom(from.arrnotify_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActBattlePassNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActBattlePassNotify::CopyFrom(const TActBattlePassNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActBattlePassNotify::IsInitialized() const {

  return true;
}

void TActBattlePassNotify::Swap(TActBattlePassNotify* other) {
  if (other != this) {
    arrnotify_.Swap(&other->arrnotify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActBattlePassNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActBattlePassNotify_descriptor_;
  metadata.reflection = TActBattlePassNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
